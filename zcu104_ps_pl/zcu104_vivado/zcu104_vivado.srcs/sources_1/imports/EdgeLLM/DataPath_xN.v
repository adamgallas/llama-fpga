// Generator : SpinalHDL v1.10.2a    git head : a348a60b7e8b6a455c72e1536ec3d74a2ea16935
// Component : DataPath_xN
// Git hash  : f5b0d75b4a1f0f28deddf1936520ec36e6232df7

`timescale 1ns/1ps

module DataPath_xN (
  input  wire          S00_AXIL_awvalid,
  output wire          S00_AXIL_awready,
  input  wire [31:0]   S00_AXIL_awaddr,
  input  wire [2:0]    S00_AXIL_awprot,
  input  wire          S00_AXIL_wvalid,
  output wire          S00_AXIL_wready,
  input  wire [31:0]   S00_AXIL_wdata,
  input  wire [3:0]    S00_AXIL_wstrb,
  output wire          S00_AXIL_bvalid,
  input  wire          S00_AXIL_bready,
  output wire [1:0]    S00_AXIL_bresp,
  input  wire          S00_AXIL_arvalid,
  output wire          S00_AXIL_arready,
  input  wire [31:0]   S00_AXIL_araddr,
  input  wire [2:0]    S00_AXIL_arprot,
  output wire          S00_AXIL_rvalid,
  input  wire          S00_AXIL_rready,
  output wire [31:0]   S00_AXIL_rdata,
  output wire [1:0]    S00_AXIL_rresp,
  output wire          softReset,
  input  wire          S00_ACLK,
  input  wire          S00_ARESETN,
  output wire          M01_AXI_awvalid,
  input  wire          M01_AXI_awready,
  output wire [31:0]   M01_AXI_awaddr,
  output wire [3:0]    M01_AXI_awid,
  output wire [7:0]    M01_AXI_awlen,
  output wire [2:0]    M01_AXI_awsize,
  output wire [1:0]    M01_AXI_awburst,
  output wire [3:0]    M01_AXI_awcache,
  output wire [3:0]    M01_AXI_awuser,
  output wire [2:0]    M01_AXI_awprot,
  output wire          M01_AXI_wvalid,
  input  wire          M01_AXI_wready,
  output wire [511:0]  M01_AXI_wdata,
  output wire [63:0]   M01_AXI_wstrb,
  output wire          M01_AXI_wlast,
  input  wire          M01_AXI_bvalid,
  output wire          M01_AXI_bready,
  input  wire [3:0]    M01_AXI_bid,
  input  wire [1:0]    M01_AXI_bresp,
  output wire          M01_AXI_arvalid,
  input  wire          M01_AXI_arready,
  output wire [31:0]   M01_AXI_araddr,
  output wire [3:0]    M01_AXI_arid,
  output wire [7:0]    M01_AXI_arlen,
  output wire [2:0]    M01_AXI_arsize,
  output wire [1:0]    M01_AXI_arburst,
  output wire [3:0]    M01_AXI_arcache,
  output wire [3:0]    M01_AXI_aruser,
  output wire [2:0]    M01_AXI_arprot,
  input  wire          M01_AXI_rvalid,
  output wire          M01_AXI_rready,
  input  wire [511:0]  M01_AXI_rdata,
  input  wire [3:0]    M01_AXI_rid,
  input  wire [1:0]    M01_AXI_rresp,
  input  wire          M01_AXI_rlast,
  output wire          m_axi_hp_0_0_awvalid,
  input  wire          m_axi_hp_0_0_awready,
  output wire [31:0]   m_axi_hp_0_0_awaddr,
  output wire [3:0]    m_axi_hp_0_0_awid,
  output wire [7:0]    m_axi_hp_0_0_awlen,
  output wire [2:0]    m_axi_hp_0_0_awsize,
  output wire [1:0]    m_axi_hp_0_0_awburst,
  output wire [3:0]    m_axi_hp_0_0_awcache,
  output wire [3:0]    m_axi_hp_0_0_awuser,
  output wire [2:0]    m_axi_hp_0_0_awprot,
  output wire          m_axi_hp_0_0_wvalid,
  input  wire          m_axi_hp_0_0_wready,
  output wire [127:0]  m_axi_hp_0_0_wdata,
  output wire [15:0]   m_axi_hp_0_0_wstrb,
  output wire          m_axi_hp_0_0_wlast,
  input  wire          m_axi_hp_0_0_bvalid,
  output wire          m_axi_hp_0_0_bready,
  input  wire [3:0]    m_axi_hp_0_0_bid,
  input  wire [1:0]    m_axi_hp_0_0_bresp,
  output wire          m_axi_hp_0_0_arvalid,
  input  wire          m_axi_hp_0_0_arready,
  output wire [31:0]   m_axi_hp_0_0_araddr,
  output wire [3:0]    m_axi_hp_0_0_arid,
  output wire [7:0]    m_axi_hp_0_0_arlen,
  output wire [2:0]    m_axi_hp_0_0_arsize,
  output wire [1:0]    m_axi_hp_0_0_arburst,
  output wire [3:0]    m_axi_hp_0_0_arcache,
  output wire [3:0]    m_axi_hp_0_0_aruser,
  output wire [2:0]    m_axi_hp_0_0_arprot,
  input  wire          m_axi_hp_0_0_rvalid,
  output wire          m_axi_hp_0_0_rready,
  input  wire [127:0]  m_axi_hp_0_0_rdata,
  input  wire [3:0]    m_axi_hp_0_0_rid,
  input  wire [1:0]    m_axi_hp_0_0_rresp,
  input  wire          m_axi_hp_0_0_rlast,
  output wire          m_axi_hp_0_1_awvalid,
  input  wire          m_axi_hp_0_1_awready,
  output wire [31:0]   m_axi_hp_0_1_awaddr,
  output wire [3:0]    m_axi_hp_0_1_awid,
  output wire [7:0]    m_axi_hp_0_1_awlen,
  output wire [2:0]    m_axi_hp_0_1_awsize,
  output wire [1:0]    m_axi_hp_0_1_awburst,
  output wire [3:0]    m_axi_hp_0_1_awcache,
  output wire [3:0]    m_axi_hp_0_1_awuser,
  output wire [2:0]    m_axi_hp_0_1_awprot,
  output wire          m_axi_hp_0_1_wvalid,
  input  wire          m_axi_hp_0_1_wready,
  output wire [127:0]  m_axi_hp_0_1_wdata,
  output wire [15:0]   m_axi_hp_0_1_wstrb,
  output wire          m_axi_hp_0_1_wlast,
  input  wire          m_axi_hp_0_1_bvalid,
  output wire          m_axi_hp_0_1_bready,
  input  wire [3:0]    m_axi_hp_0_1_bid,
  input  wire [1:0]    m_axi_hp_0_1_bresp,
  output wire          m_axi_hp_0_1_arvalid,
  input  wire          m_axi_hp_0_1_arready,
  output wire [31:0]   m_axi_hp_0_1_araddr,
  output wire [3:0]    m_axi_hp_0_1_arid,
  output wire [7:0]    m_axi_hp_0_1_arlen,
  output wire [2:0]    m_axi_hp_0_1_arsize,
  output wire [1:0]    m_axi_hp_0_1_arburst,
  output wire [3:0]    m_axi_hp_0_1_arcache,
  output wire [3:0]    m_axi_hp_0_1_aruser,
  output wire [2:0]    m_axi_hp_0_1_arprot,
  input  wire          m_axi_hp_0_1_rvalid,
  output wire          m_axi_hp_0_1_rready,
  input  wire [127:0]  m_axi_hp_0_1_rdata,
  input  wire [3:0]    m_axi_hp_0_1_rid,
  input  wire [1:0]    m_axi_hp_0_1_rresp,
  input  wire          m_axi_hp_0_1_rlast,
  output wire          m_axi_hp_0_2_awvalid,
  input  wire          m_axi_hp_0_2_awready,
  output wire [31:0]   m_axi_hp_0_2_awaddr,
  output wire [3:0]    m_axi_hp_0_2_awid,
  output wire [7:0]    m_axi_hp_0_2_awlen,
  output wire [2:0]    m_axi_hp_0_2_awsize,
  output wire [1:0]    m_axi_hp_0_2_awburst,
  output wire [3:0]    m_axi_hp_0_2_awcache,
  output wire [3:0]    m_axi_hp_0_2_awuser,
  output wire [2:0]    m_axi_hp_0_2_awprot,
  output wire          m_axi_hp_0_2_wvalid,
  input  wire          m_axi_hp_0_2_wready,
  output wire [127:0]  m_axi_hp_0_2_wdata,
  output wire [15:0]   m_axi_hp_0_2_wstrb,
  output wire          m_axi_hp_0_2_wlast,
  input  wire          m_axi_hp_0_2_bvalid,
  output wire          m_axi_hp_0_2_bready,
  input  wire [3:0]    m_axi_hp_0_2_bid,
  input  wire [1:0]    m_axi_hp_0_2_bresp,
  output wire          m_axi_hp_0_2_arvalid,
  input  wire          m_axi_hp_0_2_arready,
  output wire [31:0]   m_axi_hp_0_2_araddr,
  output wire [3:0]    m_axi_hp_0_2_arid,
  output wire [7:0]    m_axi_hp_0_2_arlen,
  output wire [2:0]    m_axi_hp_0_2_arsize,
  output wire [1:0]    m_axi_hp_0_2_arburst,
  output wire [3:0]    m_axi_hp_0_2_arcache,
  output wire [3:0]    m_axi_hp_0_2_aruser,
  output wire [2:0]    m_axi_hp_0_2_arprot,
  input  wire          m_axi_hp_0_2_rvalid,
  output wire          m_axi_hp_0_2_rready,
  input  wire [127:0]  m_axi_hp_0_2_rdata,
  input  wire [3:0]    m_axi_hp_0_2_rid,
  input  wire [1:0]    m_axi_hp_0_2_rresp,
  input  wire          m_axi_hp_0_2_rlast,
  output wire          m_axi_hp_0_3_awvalid,
  input  wire          m_axi_hp_0_3_awready,
  output wire [31:0]   m_axi_hp_0_3_awaddr,
  output wire [3:0]    m_axi_hp_0_3_awid,
  output wire [7:0]    m_axi_hp_0_3_awlen,
  output wire [2:0]    m_axi_hp_0_3_awsize,
  output wire [1:0]    m_axi_hp_0_3_awburst,
  output wire [3:0]    m_axi_hp_0_3_awcache,
  output wire [3:0]    m_axi_hp_0_3_awuser,
  output wire [2:0]    m_axi_hp_0_3_awprot,
  output wire          m_axi_hp_0_3_wvalid,
  input  wire          m_axi_hp_0_3_wready,
  output wire [127:0]  m_axi_hp_0_3_wdata,
  output wire [15:0]   m_axi_hp_0_3_wstrb,
  output wire          m_axi_hp_0_3_wlast,
  input  wire          m_axi_hp_0_3_bvalid,
  output wire          m_axi_hp_0_3_bready,
  input  wire [3:0]    m_axi_hp_0_3_bid,
  input  wire [1:0]    m_axi_hp_0_3_bresp,
  output wire          m_axi_hp_0_3_arvalid,
  input  wire          m_axi_hp_0_3_arready,
  output wire [31:0]   m_axi_hp_0_3_araddr,
  output wire [3:0]    m_axi_hp_0_3_arid,
  output wire [7:0]    m_axi_hp_0_3_arlen,
  output wire [2:0]    m_axi_hp_0_3_arsize,
  output wire [1:0]    m_axi_hp_0_3_arburst,
  output wire [3:0]    m_axi_hp_0_3_arcache,
  output wire [3:0]    m_axi_hp_0_3_aruser,
  output wire [2:0]    m_axi_hp_0_3_arprot,
  input  wire          m_axi_hp_0_3_rvalid,
  output wire          m_axi_hp_0_3_rready,
  input  wire [127:0]  m_axi_hp_0_3_rdata,
  input  wire [3:0]    m_axi_hp_0_3_rid,
  input  wire [1:0]    m_axi_hp_0_3_rresp,
  input  wire          m_axi_hp_0_3_rlast
);

  wire                cfg_io_ctrl_aw_ready;
  wire                cfg_io_ctrl_w_ready;
  wire                cfg_io_ctrl_b_valid;
  wire       [1:0]    cfg_io_ctrl_b_payload_resp;
  wire                cfg_io_ctrl_ar_ready;
  wire                cfg_io_ctrl_r_valid;
  wire       [31:0]   cfg_io_ctrl_r_payload_data;
  wire       [1:0]    cfg_io_ctrl_r_payload_resp;
  wire                cfg_io_tokenIndex_valid;
  wire       [15:0]   cfg_io_tokenIndex_tdata;
  wire       [5:0]    cfg_io_tokenIndex_tuser;
  wire       [1:0]    cfg_io_cmdSel;
  wire       [4:0]    cfg_io_presetLayer;
  wire       [9:0]    cfg_io_presetToken;
  wire                cfg_resetOut;
  wire                coreArea_0_core_c2c_from_ready;
  wire                coreArea_0_core_c2c_to_valid;
  wire                coreArea_0_core_c2c_to_payload_last;
  wire       [15:0]   coreArea_0_core_c2c_to_payload_tdata;
  wire       [5:0]    coreArea_0_core_c2c_to_payload_tuser;
  wire       [0:0]    coreArea_0_core_c2c_to_payload_tdest;
  wire       [15:0]   coreArea_0_core_toAxiLite_tokenCnt;
  wire                coreArea_0_core_toAxiLite_argMaxVld;
  wire       [15:0]   coreArea_0_core_toAxiLite_argMaxIndex;
  wire                coreArea_0_core_toAxiLite_prefill;
  wire       [7:0]    coreArea_0_core_toAxiLite_layerCnt;
  wire                coreArea_0_core_tokenIndex_ready;
  wire                coreArea_0_core_m_axi_hp_0_ar_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_0_ar_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_ar_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_0_ar_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_0_ar_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_0_ar_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_ar_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_ar_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_0_ar_payload_prot;
  wire                coreArea_0_core_m_axi_hp_0_aw_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_0_aw_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_aw_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_0_aw_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_0_aw_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_0_aw_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_aw_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_0_aw_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_0_aw_payload_prot;
  wire                coreArea_0_core_m_axi_hp_0_w_valid;
  wire       [127:0]  coreArea_0_core_m_axi_hp_0_w_payload_data;
  wire       [15:0]   coreArea_0_core_m_axi_hp_0_w_payload_strb;
  wire                coreArea_0_core_m_axi_hp_0_w_payload_last;
  wire                coreArea_0_core_m_axi_hp_0_r_ready;
  wire                coreArea_0_core_m_axi_hp_0_b_ready;
  wire                coreArea_0_core_m_axi_hp_1_ar_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_1_ar_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_ar_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_1_ar_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_1_ar_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_1_ar_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_ar_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_ar_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_1_ar_payload_prot;
  wire                coreArea_0_core_m_axi_hp_1_aw_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_1_aw_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_aw_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_1_aw_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_1_aw_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_1_aw_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_aw_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_1_aw_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_1_aw_payload_prot;
  wire                coreArea_0_core_m_axi_hp_1_w_valid;
  wire       [127:0]  coreArea_0_core_m_axi_hp_1_w_payload_data;
  wire       [15:0]   coreArea_0_core_m_axi_hp_1_w_payload_strb;
  wire                coreArea_0_core_m_axi_hp_1_w_payload_last;
  wire                coreArea_0_core_m_axi_hp_1_r_ready;
  wire                coreArea_0_core_m_axi_hp_1_b_ready;
  wire                coreArea_0_core_m_axi_hp_2_ar_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_2_ar_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_ar_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_2_ar_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_2_ar_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_2_ar_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_ar_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_ar_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_2_ar_payload_prot;
  wire                coreArea_0_core_m_axi_hp_2_aw_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_2_aw_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_aw_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_2_aw_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_2_aw_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_2_aw_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_aw_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_2_aw_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_2_aw_payload_prot;
  wire                coreArea_0_core_m_axi_hp_2_w_valid;
  wire       [127:0]  coreArea_0_core_m_axi_hp_2_w_payload_data;
  wire       [15:0]   coreArea_0_core_m_axi_hp_2_w_payload_strb;
  wire                coreArea_0_core_m_axi_hp_2_w_payload_last;
  wire                coreArea_0_core_m_axi_hp_2_r_ready;
  wire                coreArea_0_core_m_axi_hp_2_b_ready;
  wire                coreArea_0_core_m_axi_hp_3_ar_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_3_ar_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_ar_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_3_ar_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_3_ar_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_3_ar_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_ar_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_ar_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_3_ar_payload_prot;
  wire                coreArea_0_core_m_axi_hp_3_aw_valid;
  wire       [31:0]   coreArea_0_core_m_axi_hp_3_aw_payload_addr;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_aw_payload_id;
  wire       [7:0]    coreArea_0_core_m_axi_hp_3_aw_payload_len;
  wire       [2:0]    coreArea_0_core_m_axi_hp_3_aw_payload_size;
  wire       [1:0]    coreArea_0_core_m_axi_hp_3_aw_payload_burst;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_aw_payload_cache;
  wire       [3:0]    coreArea_0_core_m_axi_hp_3_aw_payload_user;
  wire       [2:0]    coreArea_0_core_m_axi_hp_3_aw_payload_prot;
  wire                coreArea_0_core_m_axi_hp_3_w_valid;
  wire       [127:0]  coreArea_0_core_m_axi_hp_3_w_payload_data;
  wire       [15:0]   coreArea_0_core_m_axi_hp_3_w_payload_strb;
  wire                coreArea_0_core_m_axi_hp_3_w_payload_last;
  wire                coreArea_0_core_m_axi_hp_3_r_ready;
  wire                coreArea_0_core_m_axi_hp_3_b_ready;
  wire                coreArea_1_core_c2c_from_ready;
  wire                coreArea_1_core_c2c_to_valid;
  wire                coreArea_1_core_c2c_to_payload_last;
  wire       [15:0]   coreArea_1_core_c2c_to_payload_tdata;
  wire       [5:0]    coreArea_1_core_c2c_to_payload_tuser;
  wire       [0:0]    coreArea_1_core_c2c_to_payload_tdest;
  wire       [15:0]   coreArea_1_core_toAxiLite_tokenCnt;
  wire                coreArea_1_core_toAxiLite_argMaxVld;
  wire       [15:0]   coreArea_1_core_toAxiLite_argMaxIndex;
  wire                coreArea_1_core_toAxiLite_prefill;
  wire       [7:0]    coreArea_1_core_toAxiLite_layerCnt;
  wire                coreArea_1_core_tokenIndex_ready;
  wire                coreArea_1_core_m_axi_ar_valid;
  wire       [31:0]   coreArea_1_core_m_axi_ar_payload_addr;
  wire       [3:0]    coreArea_1_core_m_axi_ar_payload_id;
  wire       [7:0]    coreArea_1_core_m_axi_ar_payload_len;
  wire       [2:0]    coreArea_1_core_m_axi_ar_payload_size;
  wire       [1:0]    coreArea_1_core_m_axi_ar_payload_burst;
  wire       [3:0]    coreArea_1_core_m_axi_ar_payload_cache;
  wire       [3:0]    coreArea_1_core_m_axi_ar_payload_user;
  wire       [2:0]    coreArea_1_core_m_axi_ar_payload_prot;
  wire                coreArea_1_core_m_axi_aw_valid;
  wire       [31:0]   coreArea_1_core_m_axi_aw_payload_addr;
  wire       [3:0]    coreArea_1_core_m_axi_aw_payload_id;
  wire       [7:0]    coreArea_1_core_m_axi_aw_payload_len;
  wire       [2:0]    coreArea_1_core_m_axi_aw_payload_size;
  wire       [1:0]    coreArea_1_core_m_axi_aw_payload_burst;
  wire       [3:0]    coreArea_1_core_m_axi_aw_payload_cache;
  wire       [3:0]    coreArea_1_core_m_axi_aw_payload_user;
  wire       [2:0]    coreArea_1_core_m_axi_aw_payload_prot;
  wire                coreArea_1_core_m_axi_w_valid;
  wire       [511:0]  coreArea_1_core_m_axi_w_payload_data;
  wire       [63:0]   coreArea_1_core_m_axi_w_payload_strb;
  wire                coreArea_1_core_m_axi_w_payload_last;
  wire                coreArea_1_core_m_axi_r_ready;
  wire                coreArea_1_core_m_axi_b_ready;
  wire                clk_0_clk;
  wire                clk_0_resetn;
  wire                clk_1_clk;
  wire                clk_1_resetn;
  reg                 toplevel_cfg_io_tokenIndex_regNext_valid;
  reg        [15:0]   toplevel_cfg_io_tokenIndex_regNext_tdata;
  reg        [5:0]    toplevel_cfg_io_tokenIndex_regNext_tuser;
  reg                 toplevel_cfg_io_tokenIndex_regNext_regNext_valid;
  reg        [15:0]   toplevel_cfg_io_tokenIndex_regNext_regNext_tdata;
  reg        [5:0]    toplevel_cfg_io_tokenIndex_regNext_regNext_tuser;
  wire                toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid;
  wire                toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_ready;
  wire       [15:0]   toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata;
  wire       [5:0]    toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser;
  reg                 toplevel_cfg_io_tokenIndex_regNext_valid_1;
  reg        [15:0]   toplevel_cfg_io_tokenIndex_regNext_tdata_1;
  reg        [5:0]    toplevel_cfg_io_tokenIndex_regNext_tuser_1;
  reg                 toplevel_cfg_io_tokenIndex_regNext_regNext_valid_1;
  reg        [15:0]   toplevel_cfg_io_tokenIndex_regNext_regNext_tdata_1;
  reg        [5:0]    toplevel_cfg_io_tokenIndex_regNext_regNext_tuser_1;
  wire                toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid_1;
  wire                toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_ready_1;
  wire       [15:0]   toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata_1;
  wire       [5:0]    toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser_1;
  wire                toplevel_coreArea_1_core_c2c_to_toStream_valid;
  wire                toplevel_coreArea_1_core_c2c_to_toStream_ready;
  wire                toplevel_coreArea_1_core_c2c_to_toStream_payload_last;
  wire       [15:0]   toplevel_coreArea_1_core_c2c_to_toStream_payload_tdata;
  wire       [5:0]    toplevel_coreArea_1_core_c2c_to_toStream_payload_tuser;
  wire       [0:0]    toplevel_coreArea_1_core_c2c_to_toStream_payload_tdest;
  wire                toplevel_coreArea_0_core_c2c_to_toStream_valid;
  wire                toplevel_coreArea_0_core_c2c_to_toStream_ready;
  wire                toplevel_coreArea_0_core_c2c_to_toStream_payload_last;
  wire       [15:0]   toplevel_coreArea_0_core_c2c_to_toStream_payload_tdata;
  wire       [5:0]    toplevel_coreArea_0_core_c2c_to_toStream_payload_tuser;
  wire       [0:0]    toplevel_coreArea_0_core_c2c_to_toStream_payload_tdest;

  AxiLiteCtrl cfg (
    .io_ctrl_aw_valid        (S00_AXIL_awvalid                           ), //i
    .io_ctrl_aw_ready        (cfg_io_ctrl_aw_ready                       ), //o
    .io_ctrl_aw_payload_addr (S00_AXIL_awaddr[31:0]                      ), //i
    .io_ctrl_aw_payload_prot (S00_AXIL_awprot[2:0]                       ), //i
    .io_ctrl_w_valid         (S00_AXIL_wvalid                            ), //i
    .io_ctrl_w_ready         (cfg_io_ctrl_w_ready                        ), //o
    .io_ctrl_w_payload_data  (S00_AXIL_wdata[31:0]                       ), //i
    .io_ctrl_w_payload_strb  (S00_AXIL_wstrb[3:0]                        ), //i
    .io_ctrl_b_valid         (cfg_io_ctrl_b_valid                        ), //o
    .io_ctrl_b_ready         (S00_AXIL_bready                            ), //i
    .io_ctrl_b_payload_resp  (cfg_io_ctrl_b_payload_resp[1:0]            ), //o
    .io_ctrl_ar_valid        (S00_AXIL_arvalid                           ), //i
    .io_ctrl_ar_ready        (cfg_io_ctrl_ar_ready                       ), //o
    .io_ctrl_ar_payload_addr (S00_AXIL_araddr[31:0]                      ), //i
    .io_ctrl_ar_payload_prot (S00_AXIL_arprot[2:0]                       ), //i
    .io_ctrl_r_valid         (cfg_io_ctrl_r_valid                        ), //o
    .io_ctrl_r_ready         (S00_AXIL_rready                            ), //i
    .io_ctrl_r_payload_data  (cfg_io_ctrl_r_payload_data[31:0]           ), //o
    .io_ctrl_r_payload_resp  (cfg_io_ctrl_r_payload_resp[1:0]            ), //o
    .io_tokenIndex_valid     (cfg_io_tokenIndex_valid                    ), //o
    .io_tokenIndex_tdata     (cfg_io_tokenIndex_tdata[15:0]              ), //o
    .io_tokenIndex_tuser     (cfg_io_tokenIndex_tuser[5:0]               ), //o
    .io_cmdSel               (cfg_io_cmdSel[1:0]                         ), //o
    .io_presetLayer          (cfg_io_presetLayer[4:0]                    ), //o
    .io_presetToken          (cfg_io_presetToken[9:0]                    ), //o
    .status_tokenCnt         (coreArea_0_core_toAxiLite_tokenCnt[15:0]   ), //i
    .status_layerCnt         (coreArea_0_core_toAxiLite_layerCnt[7:0]    ), //i
    .status_argMaxVld        (coreArea_0_core_toAxiLite_argMaxVld        ), //i
    .status_argMaxIndex      (coreArea_0_core_toAxiLite_argMaxIndex[15:0]), //i
    .status_prefill          (coreArea_0_core_toAxiLite_prefill          ), //i
    .resetOut                (cfg_resetOut                               ), //o
    .S00_ACLK                (S00_ACLK                                   ), //i
    .S00_ARESETN             (S00_ARESETN                                )  //i
  );
  DataPath coreArea_0_core (
    .c2c_from_valid              (toplevel_coreArea_1_core_c2c_to_toStream_valid                 ), //i
    .c2c_from_ready              (coreArea_0_core_c2c_from_ready                                 ), //o
    .c2c_from_payload_last       (toplevel_coreArea_1_core_c2c_to_toStream_payload_last          ), //i
    .c2c_from_payload_tdata      (toplevel_coreArea_1_core_c2c_to_toStream_payload_tdata[15:0]   ), //i
    .c2c_from_payload_tuser      (toplevel_coreArea_1_core_c2c_to_toStream_payload_tuser[5:0]    ), //i
    .c2c_from_payload_tdest      (toplevel_coreArea_1_core_c2c_to_toStream_payload_tdest         ), //i
    .c2c_to_valid                (coreArea_0_core_c2c_to_valid                                   ), //o
    .c2c_to_payload_last         (coreArea_0_core_c2c_to_payload_last                            ), //o
    .c2c_to_payload_tdata        (coreArea_0_core_c2c_to_payload_tdata[15:0]                     ), //o
    .c2c_to_payload_tuser        (coreArea_0_core_c2c_to_payload_tuser[5:0]                      ), //o
    .c2c_to_payload_tdest        (coreArea_0_core_c2c_to_payload_tdest                           ), //o
    .toAxiLite_tokenCnt          (coreArea_0_core_toAxiLite_tokenCnt[15:0]                       ), //o
    .toAxiLite_argMaxVld         (coreArea_0_core_toAxiLite_argMaxVld                            ), //o
    .toAxiLite_argMaxIndex       (coreArea_0_core_toAxiLite_argMaxIndex[15:0]                    ), //o
    .toAxiLite_prefill           (coreArea_0_core_toAxiLite_prefill                              ), //o
    .toAxiLite_layerCnt          (coreArea_0_core_toAxiLite_layerCnt[7:0]                        ), //o
    .tokenIndex_valid            (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid      ), //i
    .tokenIndex_ready            (coreArea_0_core_tokenIndex_ready                               ), //o
    .tokenIndex_tdata            (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata[15:0]), //i
    .tokenIndex_tuser            (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser[5:0] ), //i
    .m_axi_hp_0_aw_valid         (coreArea_0_core_m_axi_hp_0_aw_valid                            ), //o
    .m_axi_hp_0_aw_ready         (m_axi_hp_0_0_awready                                           ), //i
    .m_axi_hp_0_aw_payload_addr  (coreArea_0_core_m_axi_hp_0_aw_payload_addr[31:0]               ), //o
    .m_axi_hp_0_aw_payload_id    (coreArea_0_core_m_axi_hp_0_aw_payload_id[3:0]                  ), //o
    .m_axi_hp_0_aw_payload_len   (coreArea_0_core_m_axi_hp_0_aw_payload_len[7:0]                 ), //o
    .m_axi_hp_0_aw_payload_size  (coreArea_0_core_m_axi_hp_0_aw_payload_size[2:0]                ), //o
    .m_axi_hp_0_aw_payload_burst (coreArea_0_core_m_axi_hp_0_aw_payload_burst[1:0]               ), //o
    .m_axi_hp_0_aw_payload_cache (coreArea_0_core_m_axi_hp_0_aw_payload_cache[3:0]               ), //o
    .m_axi_hp_0_aw_payload_user  (coreArea_0_core_m_axi_hp_0_aw_payload_user[3:0]                ), //o
    .m_axi_hp_0_aw_payload_prot  (coreArea_0_core_m_axi_hp_0_aw_payload_prot[2:0]                ), //o
    .m_axi_hp_0_w_valid          (coreArea_0_core_m_axi_hp_0_w_valid                             ), //o
    .m_axi_hp_0_w_ready          (m_axi_hp_0_0_wready                                            ), //i
    .m_axi_hp_0_w_payload_data   (coreArea_0_core_m_axi_hp_0_w_payload_data[127:0]               ), //o
    .m_axi_hp_0_w_payload_strb   (coreArea_0_core_m_axi_hp_0_w_payload_strb[15:0]                ), //o
    .m_axi_hp_0_w_payload_last   (coreArea_0_core_m_axi_hp_0_w_payload_last                      ), //o
    .m_axi_hp_0_b_valid          (m_axi_hp_0_0_bvalid                                            ), //i
    .m_axi_hp_0_b_ready          (coreArea_0_core_m_axi_hp_0_b_ready                             ), //o
    .m_axi_hp_0_b_payload_id     (m_axi_hp_0_0_bid[3:0]                                          ), //i
    .m_axi_hp_0_b_payload_resp   (m_axi_hp_0_0_bresp[1:0]                                        ), //i
    .m_axi_hp_0_ar_valid         (coreArea_0_core_m_axi_hp_0_ar_valid                            ), //o
    .m_axi_hp_0_ar_ready         (m_axi_hp_0_0_arready                                           ), //i
    .m_axi_hp_0_ar_payload_addr  (coreArea_0_core_m_axi_hp_0_ar_payload_addr[31:0]               ), //o
    .m_axi_hp_0_ar_payload_id    (coreArea_0_core_m_axi_hp_0_ar_payload_id[3:0]                  ), //o
    .m_axi_hp_0_ar_payload_len   (coreArea_0_core_m_axi_hp_0_ar_payload_len[7:0]                 ), //o
    .m_axi_hp_0_ar_payload_size  (coreArea_0_core_m_axi_hp_0_ar_payload_size[2:0]                ), //o
    .m_axi_hp_0_ar_payload_burst (coreArea_0_core_m_axi_hp_0_ar_payload_burst[1:0]               ), //o
    .m_axi_hp_0_ar_payload_cache (coreArea_0_core_m_axi_hp_0_ar_payload_cache[3:0]               ), //o
    .m_axi_hp_0_ar_payload_user  (coreArea_0_core_m_axi_hp_0_ar_payload_user[3:0]                ), //o
    .m_axi_hp_0_ar_payload_prot  (coreArea_0_core_m_axi_hp_0_ar_payload_prot[2:0]                ), //o
    .m_axi_hp_0_r_valid          (m_axi_hp_0_0_rvalid                                            ), //i
    .m_axi_hp_0_r_ready          (coreArea_0_core_m_axi_hp_0_r_ready                             ), //o
    .m_axi_hp_0_r_payload_data   (m_axi_hp_0_0_rdata[127:0]                                      ), //i
    .m_axi_hp_0_r_payload_id     (m_axi_hp_0_0_rid[3:0]                                          ), //i
    .m_axi_hp_0_r_payload_resp   (m_axi_hp_0_0_rresp[1:0]                                        ), //i
    .m_axi_hp_0_r_payload_last   (m_axi_hp_0_0_rlast                                             ), //i
    .m_axi_hp_1_aw_valid         (coreArea_0_core_m_axi_hp_1_aw_valid                            ), //o
    .m_axi_hp_1_aw_ready         (m_axi_hp_0_1_awready                                           ), //i
    .m_axi_hp_1_aw_payload_addr  (coreArea_0_core_m_axi_hp_1_aw_payload_addr[31:0]               ), //o
    .m_axi_hp_1_aw_payload_id    (coreArea_0_core_m_axi_hp_1_aw_payload_id[3:0]                  ), //o
    .m_axi_hp_1_aw_payload_len   (coreArea_0_core_m_axi_hp_1_aw_payload_len[7:0]                 ), //o
    .m_axi_hp_1_aw_payload_size  (coreArea_0_core_m_axi_hp_1_aw_payload_size[2:0]                ), //o
    .m_axi_hp_1_aw_payload_burst (coreArea_0_core_m_axi_hp_1_aw_payload_burst[1:0]               ), //o
    .m_axi_hp_1_aw_payload_cache (coreArea_0_core_m_axi_hp_1_aw_payload_cache[3:0]               ), //o
    .m_axi_hp_1_aw_payload_user  (coreArea_0_core_m_axi_hp_1_aw_payload_user[3:0]                ), //o
    .m_axi_hp_1_aw_payload_prot  (coreArea_0_core_m_axi_hp_1_aw_payload_prot[2:0]                ), //o
    .m_axi_hp_1_w_valid          (coreArea_0_core_m_axi_hp_1_w_valid                             ), //o
    .m_axi_hp_1_w_ready          (m_axi_hp_0_1_wready                                            ), //i
    .m_axi_hp_1_w_payload_data   (coreArea_0_core_m_axi_hp_1_w_payload_data[127:0]               ), //o
    .m_axi_hp_1_w_payload_strb   (coreArea_0_core_m_axi_hp_1_w_payload_strb[15:0]                ), //o
    .m_axi_hp_1_w_payload_last   (coreArea_0_core_m_axi_hp_1_w_payload_last                      ), //o
    .m_axi_hp_1_b_valid          (m_axi_hp_0_1_bvalid                                            ), //i
    .m_axi_hp_1_b_ready          (coreArea_0_core_m_axi_hp_1_b_ready                             ), //o
    .m_axi_hp_1_b_payload_id     (m_axi_hp_0_1_bid[3:0]                                          ), //i
    .m_axi_hp_1_b_payload_resp   (m_axi_hp_0_1_bresp[1:0]                                        ), //i
    .m_axi_hp_1_ar_valid         (coreArea_0_core_m_axi_hp_1_ar_valid                            ), //o
    .m_axi_hp_1_ar_ready         (m_axi_hp_0_1_arready                                           ), //i
    .m_axi_hp_1_ar_payload_addr  (coreArea_0_core_m_axi_hp_1_ar_payload_addr[31:0]               ), //o
    .m_axi_hp_1_ar_payload_id    (coreArea_0_core_m_axi_hp_1_ar_payload_id[3:0]                  ), //o
    .m_axi_hp_1_ar_payload_len   (coreArea_0_core_m_axi_hp_1_ar_payload_len[7:0]                 ), //o
    .m_axi_hp_1_ar_payload_size  (coreArea_0_core_m_axi_hp_1_ar_payload_size[2:0]                ), //o
    .m_axi_hp_1_ar_payload_burst (coreArea_0_core_m_axi_hp_1_ar_payload_burst[1:0]               ), //o
    .m_axi_hp_1_ar_payload_cache (coreArea_0_core_m_axi_hp_1_ar_payload_cache[3:0]               ), //o
    .m_axi_hp_1_ar_payload_user  (coreArea_0_core_m_axi_hp_1_ar_payload_user[3:0]                ), //o
    .m_axi_hp_1_ar_payload_prot  (coreArea_0_core_m_axi_hp_1_ar_payload_prot[2:0]                ), //o
    .m_axi_hp_1_r_valid          (m_axi_hp_0_1_rvalid                                            ), //i
    .m_axi_hp_1_r_ready          (coreArea_0_core_m_axi_hp_1_r_ready                             ), //o
    .m_axi_hp_1_r_payload_data   (m_axi_hp_0_1_rdata[127:0]                                      ), //i
    .m_axi_hp_1_r_payload_id     (m_axi_hp_0_1_rid[3:0]                                          ), //i
    .m_axi_hp_1_r_payload_resp   (m_axi_hp_0_1_rresp[1:0]                                        ), //i
    .m_axi_hp_1_r_payload_last   (m_axi_hp_0_1_rlast                                             ), //i
    .m_axi_hp_2_aw_valid         (coreArea_0_core_m_axi_hp_2_aw_valid                            ), //o
    .m_axi_hp_2_aw_ready         (m_axi_hp_0_2_awready                                           ), //i
    .m_axi_hp_2_aw_payload_addr  (coreArea_0_core_m_axi_hp_2_aw_payload_addr[31:0]               ), //o
    .m_axi_hp_2_aw_payload_id    (coreArea_0_core_m_axi_hp_2_aw_payload_id[3:0]                  ), //o
    .m_axi_hp_2_aw_payload_len   (coreArea_0_core_m_axi_hp_2_aw_payload_len[7:0]                 ), //o
    .m_axi_hp_2_aw_payload_size  (coreArea_0_core_m_axi_hp_2_aw_payload_size[2:0]                ), //o
    .m_axi_hp_2_aw_payload_burst (coreArea_0_core_m_axi_hp_2_aw_payload_burst[1:0]               ), //o
    .m_axi_hp_2_aw_payload_cache (coreArea_0_core_m_axi_hp_2_aw_payload_cache[3:0]               ), //o
    .m_axi_hp_2_aw_payload_user  (coreArea_0_core_m_axi_hp_2_aw_payload_user[3:0]                ), //o
    .m_axi_hp_2_aw_payload_prot  (coreArea_0_core_m_axi_hp_2_aw_payload_prot[2:0]                ), //o
    .m_axi_hp_2_w_valid          (coreArea_0_core_m_axi_hp_2_w_valid                             ), //o
    .m_axi_hp_2_w_ready          (m_axi_hp_0_2_wready                                            ), //i
    .m_axi_hp_2_w_payload_data   (coreArea_0_core_m_axi_hp_2_w_payload_data[127:0]               ), //o
    .m_axi_hp_2_w_payload_strb   (coreArea_0_core_m_axi_hp_2_w_payload_strb[15:0]                ), //o
    .m_axi_hp_2_w_payload_last   (coreArea_0_core_m_axi_hp_2_w_payload_last                      ), //o
    .m_axi_hp_2_b_valid          (m_axi_hp_0_2_bvalid                                            ), //i
    .m_axi_hp_2_b_ready          (coreArea_0_core_m_axi_hp_2_b_ready                             ), //o
    .m_axi_hp_2_b_payload_id     (m_axi_hp_0_2_bid[3:0]                                          ), //i
    .m_axi_hp_2_b_payload_resp   (m_axi_hp_0_2_bresp[1:0]                                        ), //i
    .m_axi_hp_2_ar_valid         (coreArea_0_core_m_axi_hp_2_ar_valid                            ), //o
    .m_axi_hp_2_ar_ready         (m_axi_hp_0_2_arready                                           ), //i
    .m_axi_hp_2_ar_payload_addr  (coreArea_0_core_m_axi_hp_2_ar_payload_addr[31:0]               ), //o
    .m_axi_hp_2_ar_payload_id    (coreArea_0_core_m_axi_hp_2_ar_payload_id[3:0]                  ), //o
    .m_axi_hp_2_ar_payload_len   (coreArea_0_core_m_axi_hp_2_ar_payload_len[7:0]                 ), //o
    .m_axi_hp_2_ar_payload_size  (coreArea_0_core_m_axi_hp_2_ar_payload_size[2:0]                ), //o
    .m_axi_hp_2_ar_payload_burst (coreArea_0_core_m_axi_hp_2_ar_payload_burst[1:0]               ), //o
    .m_axi_hp_2_ar_payload_cache (coreArea_0_core_m_axi_hp_2_ar_payload_cache[3:0]               ), //o
    .m_axi_hp_2_ar_payload_user  (coreArea_0_core_m_axi_hp_2_ar_payload_user[3:0]                ), //o
    .m_axi_hp_2_ar_payload_prot  (coreArea_0_core_m_axi_hp_2_ar_payload_prot[2:0]                ), //o
    .m_axi_hp_2_r_valid          (m_axi_hp_0_2_rvalid                                            ), //i
    .m_axi_hp_2_r_ready          (coreArea_0_core_m_axi_hp_2_r_ready                             ), //o
    .m_axi_hp_2_r_payload_data   (m_axi_hp_0_2_rdata[127:0]                                      ), //i
    .m_axi_hp_2_r_payload_id     (m_axi_hp_0_2_rid[3:0]                                          ), //i
    .m_axi_hp_2_r_payload_resp   (m_axi_hp_0_2_rresp[1:0]                                        ), //i
    .m_axi_hp_2_r_payload_last   (m_axi_hp_0_2_rlast                                             ), //i
    .m_axi_hp_3_aw_valid         (coreArea_0_core_m_axi_hp_3_aw_valid                            ), //o
    .m_axi_hp_3_aw_ready         (m_axi_hp_0_3_awready                                           ), //i
    .m_axi_hp_3_aw_payload_addr  (coreArea_0_core_m_axi_hp_3_aw_payload_addr[31:0]               ), //o
    .m_axi_hp_3_aw_payload_id    (coreArea_0_core_m_axi_hp_3_aw_payload_id[3:0]                  ), //o
    .m_axi_hp_3_aw_payload_len   (coreArea_0_core_m_axi_hp_3_aw_payload_len[7:0]                 ), //o
    .m_axi_hp_3_aw_payload_size  (coreArea_0_core_m_axi_hp_3_aw_payload_size[2:0]                ), //o
    .m_axi_hp_3_aw_payload_burst (coreArea_0_core_m_axi_hp_3_aw_payload_burst[1:0]               ), //o
    .m_axi_hp_3_aw_payload_cache (coreArea_0_core_m_axi_hp_3_aw_payload_cache[3:0]               ), //o
    .m_axi_hp_3_aw_payload_user  (coreArea_0_core_m_axi_hp_3_aw_payload_user[3:0]                ), //o
    .m_axi_hp_3_aw_payload_prot  (coreArea_0_core_m_axi_hp_3_aw_payload_prot[2:0]                ), //o
    .m_axi_hp_3_w_valid          (coreArea_0_core_m_axi_hp_3_w_valid                             ), //o
    .m_axi_hp_3_w_ready          (m_axi_hp_0_3_wready                                            ), //i
    .m_axi_hp_3_w_payload_data   (coreArea_0_core_m_axi_hp_3_w_payload_data[127:0]               ), //o
    .m_axi_hp_3_w_payload_strb   (coreArea_0_core_m_axi_hp_3_w_payload_strb[15:0]                ), //o
    .m_axi_hp_3_w_payload_last   (coreArea_0_core_m_axi_hp_3_w_payload_last                      ), //o
    .m_axi_hp_3_b_valid          (m_axi_hp_0_3_bvalid                                            ), //i
    .m_axi_hp_3_b_ready          (coreArea_0_core_m_axi_hp_3_b_ready                             ), //o
    .m_axi_hp_3_b_payload_id     (m_axi_hp_0_3_bid[3:0]                                          ), //i
    .m_axi_hp_3_b_payload_resp   (m_axi_hp_0_3_bresp[1:0]                                        ), //i
    .m_axi_hp_3_ar_valid         (coreArea_0_core_m_axi_hp_3_ar_valid                            ), //o
    .m_axi_hp_3_ar_ready         (m_axi_hp_0_3_arready                                           ), //i
    .m_axi_hp_3_ar_payload_addr  (coreArea_0_core_m_axi_hp_3_ar_payload_addr[31:0]               ), //o
    .m_axi_hp_3_ar_payload_id    (coreArea_0_core_m_axi_hp_3_ar_payload_id[3:0]                  ), //o
    .m_axi_hp_3_ar_payload_len   (coreArea_0_core_m_axi_hp_3_ar_payload_len[7:0]                 ), //o
    .m_axi_hp_3_ar_payload_size  (coreArea_0_core_m_axi_hp_3_ar_payload_size[2:0]                ), //o
    .m_axi_hp_3_ar_payload_burst (coreArea_0_core_m_axi_hp_3_ar_payload_burst[1:0]               ), //o
    .m_axi_hp_3_ar_payload_cache (coreArea_0_core_m_axi_hp_3_ar_payload_cache[3:0]               ), //o
    .m_axi_hp_3_ar_payload_user  (coreArea_0_core_m_axi_hp_3_ar_payload_user[3:0]                ), //o
    .m_axi_hp_3_ar_payload_prot  (coreArea_0_core_m_axi_hp_3_ar_payload_prot[2:0]                ), //o
    .m_axi_hp_3_r_valid          (m_axi_hp_0_3_rvalid                                            ), //i
    .m_axi_hp_3_r_ready          (coreArea_0_core_m_axi_hp_3_r_ready                             ), //o
    .m_axi_hp_3_r_payload_data   (m_axi_hp_0_3_rdata[127:0]                                      ), //i
    .m_axi_hp_3_r_payload_id     (m_axi_hp_0_3_rid[3:0]                                          ), //i
    .m_axi_hp_3_r_payload_resp   (m_axi_hp_0_3_rresp[1:0]                                        ), //i
    .m_axi_hp_3_r_payload_last   (m_axi_hp_0_3_rlast                                             ), //i
    .aresetn                     (S00_ARESETN                                                    ), //i
    .clk_0_clk                   (clk_0_clk                                                      ), //i
    .clk_0_resetn                (clk_0_resetn                                                   )  //i
  );
  DataPath_1 coreArea_1_core (
    .c2c_from_valid         (toplevel_coreArea_0_core_c2c_to_toStream_valid                   ), //i
    .c2c_from_ready         (coreArea_1_core_c2c_from_ready                                   ), //o
    .c2c_from_payload_last  (toplevel_coreArea_0_core_c2c_to_toStream_payload_last            ), //i
    .c2c_from_payload_tdata (toplevel_coreArea_0_core_c2c_to_toStream_payload_tdata[15:0]     ), //i
    .c2c_from_payload_tuser (toplevel_coreArea_0_core_c2c_to_toStream_payload_tuser[5:0]      ), //i
    .c2c_from_payload_tdest (toplevel_coreArea_0_core_c2c_to_toStream_payload_tdest           ), //i
    .c2c_to_valid           (coreArea_1_core_c2c_to_valid                                     ), //o
    .c2c_to_payload_last    (coreArea_1_core_c2c_to_payload_last                              ), //o
    .c2c_to_payload_tdata   (coreArea_1_core_c2c_to_payload_tdata[15:0]                       ), //o
    .c2c_to_payload_tuser   (coreArea_1_core_c2c_to_payload_tuser[5:0]                        ), //o
    .c2c_to_payload_tdest   (coreArea_1_core_c2c_to_payload_tdest                             ), //o
    .toAxiLite_tokenCnt     (coreArea_1_core_toAxiLite_tokenCnt[15:0]                         ), //o
    .toAxiLite_argMaxVld    (coreArea_1_core_toAxiLite_argMaxVld                              ), //o
    .toAxiLite_argMaxIndex  (coreArea_1_core_toAxiLite_argMaxIndex[15:0]                      ), //o
    .toAxiLite_prefill      (coreArea_1_core_toAxiLite_prefill                                ), //o
    .toAxiLite_layerCnt     (coreArea_1_core_toAxiLite_layerCnt[7:0]                          ), //o
    .tokenIndex_valid       (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid_1      ), //i
    .tokenIndex_ready       (coreArea_1_core_tokenIndex_ready                                 ), //o
    .tokenIndex_tdata       (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata_1[15:0]), //i
    .tokenIndex_tuser       (toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser_1[5:0] ), //i
    .m_axi_aw_valid         (coreArea_1_core_m_axi_aw_valid                                   ), //o
    .m_axi_aw_ready         (M01_AXI_awready                                                  ), //i
    .m_axi_aw_payload_addr  (coreArea_1_core_m_axi_aw_payload_addr[31:0]                      ), //o
    .m_axi_aw_payload_id    (coreArea_1_core_m_axi_aw_payload_id[3:0]                         ), //o
    .m_axi_aw_payload_len   (coreArea_1_core_m_axi_aw_payload_len[7:0]                        ), //o
    .m_axi_aw_payload_size  (coreArea_1_core_m_axi_aw_payload_size[2:0]                       ), //o
    .m_axi_aw_payload_burst (coreArea_1_core_m_axi_aw_payload_burst[1:0]                      ), //o
    .m_axi_aw_payload_cache (coreArea_1_core_m_axi_aw_payload_cache[3:0]                      ), //o
    .m_axi_aw_payload_user  (coreArea_1_core_m_axi_aw_payload_user[3:0]                       ), //o
    .m_axi_aw_payload_prot  (coreArea_1_core_m_axi_aw_payload_prot[2:0]                       ), //o
    .m_axi_w_valid          (coreArea_1_core_m_axi_w_valid                                    ), //o
    .m_axi_w_ready          (M01_AXI_wready                                                   ), //i
    .m_axi_w_payload_data   (coreArea_1_core_m_axi_w_payload_data[511:0]                      ), //o
    .m_axi_w_payload_strb   (coreArea_1_core_m_axi_w_payload_strb[63:0]                       ), //o
    .m_axi_w_payload_last   (coreArea_1_core_m_axi_w_payload_last                             ), //o
    .m_axi_b_valid          (M01_AXI_bvalid                                                   ), //i
    .m_axi_b_ready          (coreArea_1_core_m_axi_b_ready                                    ), //o
    .m_axi_b_payload_id     (M01_AXI_bid[3:0]                                                 ), //i
    .m_axi_b_payload_resp   (M01_AXI_bresp[1:0]                                               ), //i
    .m_axi_ar_valid         (coreArea_1_core_m_axi_ar_valid                                   ), //o
    .m_axi_ar_ready         (M01_AXI_arready                                                  ), //i
    .m_axi_ar_payload_addr  (coreArea_1_core_m_axi_ar_payload_addr[31:0]                      ), //o
    .m_axi_ar_payload_id    (coreArea_1_core_m_axi_ar_payload_id[3:0]                         ), //o
    .m_axi_ar_payload_len   (coreArea_1_core_m_axi_ar_payload_len[7:0]                        ), //o
    .m_axi_ar_payload_size  (coreArea_1_core_m_axi_ar_payload_size[2:0]                       ), //o
    .m_axi_ar_payload_burst (coreArea_1_core_m_axi_ar_payload_burst[1:0]                      ), //o
    .m_axi_ar_payload_cache (coreArea_1_core_m_axi_ar_payload_cache[3:0]                      ), //o
    .m_axi_ar_payload_user  (coreArea_1_core_m_axi_ar_payload_user[3:0]                       ), //o
    .m_axi_ar_payload_prot  (coreArea_1_core_m_axi_ar_payload_prot[2:0]                       ), //o
    .m_axi_r_valid          (M01_AXI_rvalid                                                   ), //i
    .m_axi_r_ready          (coreArea_1_core_m_axi_r_ready                                    ), //o
    .m_axi_r_payload_data   (M01_AXI_rdata[511:0]                                             ), //i
    .m_axi_r_payload_id     (M01_AXI_rid[3:0]                                                 ), //i
    .m_axi_r_payload_resp   (M01_AXI_rresp[1:0]                                               ), //i
    .m_axi_r_payload_last   (M01_AXI_rlast                                                    ), //i
    .aresetn                (S00_ARESETN                                                      ), //i
    .clk_1_clk              (clk_1_clk                                                        ), //i
    .clk_1_resetn           (clk_1_resetn                                                     )  //i
  );
  assign S00_AXIL_awready = cfg_io_ctrl_aw_ready;
  assign S00_AXIL_wready = cfg_io_ctrl_w_ready;
  assign S00_AXIL_bvalid = cfg_io_ctrl_b_valid;
  assign S00_AXIL_bresp = cfg_io_ctrl_b_payload_resp;
  assign S00_AXIL_arready = cfg_io_ctrl_ar_ready;
  assign S00_AXIL_rvalid = cfg_io_ctrl_r_valid;
  assign S00_AXIL_rdata = cfg_io_ctrl_r_payload_data;
  assign S00_AXIL_rresp = cfg_io_ctrl_r_payload_resp;
  assign softReset = cfg_resetOut;
  assign clk_0_clk = S00_ACLK;
  assign clk_0_resetn = S00_ARESETN;
  assign clk_1_clk = S00_ACLK;
  assign clk_1_resetn = S00_ARESETN;
  assign M01_AXI_awvalid = coreArea_1_core_m_axi_aw_valid;
  assign M01_AXI_awaddr = coreArea_1_core_m_axi_aw_payload_addr;
  assign M01_AXI_awid = coreArea_1_core_m_axi_aw_payload_id;
  assign M01_AXI_awlen = coreArea_1_core_m_axi_aw_payload_len;
  assign M01_AXI_awsize = coreArea_1_core_m_axi_aw_payload_size;
  assign M01_AXI_awburst = coreArea_1_core_m_axi_aw_payload_burst;
  assign M01_AXI_awcache = coreArea_1_core_m_axi_aw_payload_cache;
  assign M01_AXI_awuser = coreArea_1_core_m_axi_aw_payload_user;
  assign M01_AXI_awprot = coreArea_1_core_m_axi_aw_payload_prot;
  assign M01_AXI_wvalid = coreArea_1_core_m_axi_w_valid;
  assign M01_AXI_wdata = coreArea_1_core_m_axi_w_payload_data;
  assign M01_AXI_wstrb = coreArea_1_core_m_axi_w_payload_strb;
  assign M01_AXI_wlast = coreArea_1_core_m_axi_w_payload_last;
  assign M01_AXI_bready = coreArea_1_core_m_axi_b_ready;
  assign M01_AXI_arvalid = coreArea_1_core_m_axi_ar_valid;
  assign M01_AXI_araddr = coreArea_1_core_m_axi_ar_payload_addr;
  assign M01_AXI_arid = coreArea_1_core_m_axi_ar_payload_id;
  assign M01_AXI_arlen = coreArea_1_core_m_axi_ar_payload_len;
  assign M01_AXI_arsize = coreArea_1_core_m_axi_ar_payload_size;
  assign M01_AXI_arburst = coreArea_1_core_m_axi_ar_payload_burst;
  assign M01_AXI_arcache = coreArea_1_core_m_axi_ar_payload_cache;
  assign M01_AXI_aruser = coreArea_1_core_m_axi_ar_payload_user;
  assign M01_AXI_arprot = coreArea_1_core_m_axi_ar_payload_prot;
  assign M01_AXI_rready = coreArea_1_core_m_axi_r_ready;
  assign m_axi_hp_0_0_awvalid = coreArea_0_core_m_axi_hp_0_aw_valid;
  assign m_axi_hp_0_0_awaddr = coreArea_0_core_m_axi_hp_0_aw_payload_addr;
  assign m_axi_hp_0_0_awid = coreArea_0_core_m_axi_hp_0_aw_payload_id;
  assign m_axi_hp_0_0_awlen = coreArea_0_core_m_axi_hp_0_aw_payload_len;
  assign m_axi_hp_0_0_awsize = coreArea_0_core_m_axi_hp_0_aw_payload_size;
  assign m_axi_hp_0_0_awburst = coreArea_0_core_m_axi_hp_0_aw_payload_burst;
  assign m_axi_hp_0_0_awcache = coreArea_0_core_m_axi_hp_0_aw_payload_cache;
  assign m_axi_hp_0_0_awuser = coreArea_0_core_m_axi_hp_0_aw_payload_user;
  assign m_axi_hp_0_0_awprot = coreArea_0_core_m_axi_hp_0_aw_payload_prot;
  assign m_axi_hp_0_0_wvalid = coreArea_0_core_m_axi_hp_0_w_valid;
  assign m_axi_hp_0_0_wdata = coreArea_0_core_m_axi_hp_0_w_payload_data;
  assign m_axi_hp_0_0_wstrb = coreArea_0_core_m_axi_hp_0_w_payload_strb;
  assign m_axi_hp_0_0_wlast = coreArea_0_core_m_axi_hp_0_w_payload_last;
  assign m_axi_hp_0_0_bready = coreArea_0_core_m_axi_hp_0_b_ready;
  assign m_axi_hp_0_0_arvalid = coreArea_0_core_m_axi_hp_0_ar_valid;
  assign m_axi_hp_0_0_araddr = coreArea_0_core_m_axi_hp_0_ar_payload_addr;
  assign m_axi_hp_0_0_arid = coreArea_0_core_m_axi_hp_0_ar_payload_id;
  assign m_axi_hp_0_0_arlen = coreArea_0_core_m_axi_hp_0_ar_payload_len;
  assign m_axi_hp_0_0_arsize = coreArea_0_core_m_axi_hp_0_ar_payload_size;
  assign m_axi_hp_0_0_arburst = coreArea_0_core_m_axi_hp_0_ar_payload_burst;
  assign m_axi_hp_0_0_arcache = coreArea_0_core_m_axi_hp_0_ar_payload_cache;
  assign m_axi_hp_0_0_aruser = coreArea_0_core_m_axi_hp_0_ar_payload_user;
  assign m_axi_hp_0_0_arprot = coreArea_0_core_m_axi_hp_0_ar_payload_prot;
  assign m_axi_hp_0_0_rready = coreArea_0_core_m_axi_hp_0_r_ready;
  assign m_axi_hp_0_1_awvalid = coreArea_0_core_m_axi_hp_1_aw_valid;
  assign m_axi_hp_0_1_awaddr = coreArea_0_core_m_axi_hp_1_aw_payload_addr;
  assign m_axi_hp_0_1_awid = coreArea_0_core_m_axi_hp_1_aw_payload_id;
  assign m_axi_hp_0_1_awlen = coreArea_0_core_m_axi_hp_1_aw_payload_len;
  assign m_axi_hp_0_1_awsize = coreArea_0_core_m_axi_hp_1_aw_payload_size;
  assign m_axi_hp_0_1_awburst = coreArea_0_core_m_axi_hp_1_aw_payload_burst;
  assign m_axi_hp_0_1_awcache = coreArea_0_core_m_axi_hp_1_aw_payload_cache;
  assign m_axi_hp_0_1_awuser = coreArea_0_core_m_axi_hp_1_aw_payload_user;
  assign m_axi_hp_0_1_awprot = coreArea_0_core_m_axi_hp_1_aw_payload_prot;
  assign m_axi_hp_0_1_wvalid = coreArea_0_core_m_axi_hp_1_w_valid;
  assign m_axi_hp_0_1_wdata = coreArea_0_core_m_axi_hp_1_w_payload_data;
  assign m_axi_hp_0_1_wstrb = coreArea_0_core_m_axi_hp_1_w_payload_strb;
  assign m_axi_hp_0_1_wlast = coreArea_0_core_m_axi_hp_1_w_payload_last;
  assign m_axi_hp_0_1_bready = coreArea_0_core_m_axi_hp_1_b_ready;
  assign m_axi_hp_0_1_arvalid = coreArea_0_core_m_axi_hp_1_ar_valid;
  assign m_axi_hp_0_1_araddr = coreArea_0_core_m_axi_hp_1_ar_payload_addr;
  assign m_axi_hp_0_1_arid = coreArea_0_core_m_axi_hp_1_ar_payload_id;
  assign m_axi_hp_0_1_arlen = coreArea_0_core_m_axi_hp_1_ar_payload_len;
  assign m_axi_hp_0_1_arsize = coreArea_0_core_m_axi_hp_1_ar_payload_size;
  assign m_axi_hp_0_1_arburst = coreArea_0_core_m_axi_hp_1_ar_payload_burst;
  assign m_axi_hp_0_1_arcache = coreArea_0_core_m_axi_hp_1_ar_payload_cache;
  assign m_axi_hp_0_1_aruser = coreArea_0_core_m_axi_hp_1_ar_payload_user;
  assign m_axi_hp_0_1_arprot = coreArea_0_core_m_axi_hp_1_ar_payload_prot;
  assign m_axi_hp_0_1_rready = coreArea_0_core_m_axi_hp_1_r_ready;
  assign m_axi_hp_0_2_awvalid = coreArea_0_core_m_axi_hp_2_aw_valid;
  assign m_axi_hp_0_2_awaddr = coreArea_0_core_m_axi_hp_2_aw_payload_addr;
  assign m_axi_hp_0_2_awid = coreArea_0_core_m_axi_hp_2_aw_payload_id;
  assign m_axi_hp_0_2_awlen = coreArea_0_core_m_axi_hp_2_aw_payload_len;
  assign m_axi_hp_0_2_awsize = coreArea_0_core_m_axi_hp_2_aw_payload_size;
  assign m_axi_hp_0_2_awburst = coreArea_0_core_m_axi_hp_2_aw_payload_burst;
  assign m_axi_hp_0_2_awcache = coreArea_0_core_m_axi_hp_2_aw_payload_cache;
  assign m_axi_hp_0_2_awuser = coreArea_0_core_m_axi_hp_2_aw_payload_user;
  assign m_axi_hp_0_2_awprot = coreArea_0_core_m_axi_hp_2_aw_payload_prot;
  assign m_axi_hp_0_2_wvalid = coreArea_0_core_m_axi_hp_2_w_valid;
  assign m_axi_hp_0_2_wdata = coreArea_0_core_m_axi_hp_2_w_payload_data;
  assign m_axi_hp_0_2_wstrb = coreArea_0_core_m_axi_hp_2_w_payload_strb;
  assign m_axi_hp_0_2_wlast = coreArea_0_core_m_axi_hp_2_w_payload_last;
  assign m_axi_hp_0_2_bready = coreArea_0_core_m_axi_hp_2_b_ready;
  assign m_axi_hp_0_2_arvalid = coreArea_0_core_m_axi_hp_2_ar_valid;
  assign m_axi_hp_0_2_araddr = coreArea_0_core_m_axi_hp_2_ar_payload_addr;
  assign m_axi_hp_0_2_arid = coreArea_0_core_m_axi_hp_2_ar_payload_id;
  assign m_axi_hp_0_2_arlen = coreArea_0_core_m_axi_hp_2_ar_payload_len;
  assign m_axi_hp_0_2_arsize = coreArea_0_core_m_axi_hp_2_ar_payload_size;
  assign m_axi_hp_0_2_arburst = coreArea_0_core_m_axi_hp_2_ar_payload_burst;
  assign m_axi_hp_0_2_arcache = coreArea_0_core_m_axi_hp_2_ar_payload_cache;
  assign m_axi_hp_0_2_aruser = coreArea_0_core_m_axi_hp_2_ar_payload_user;
  assign m_axi_hp_0_2_arprot = coreArea_0_core_m_axi_hp_2_ar_payload_prot;
  assign m_axi_hp_0_2_rready = coreArea_0_core_m_axi_hp_2_r_ready;
  assign m_axi_hp_0_3_awvalid = coreArea_0_core_m_axi_hp_3_aw_valid;
  assign m_axi_hp_0_3_awaddr = coreArea_0_core_m_axi_hp_3_aw_payload_addr;
  assign m_axi_hp_0_3_awid = coreArea_0_core_m_axi_hp_3_aw_payload_id;
  assign m_axi_hp_0_3_awlen = coreArea_0_core_m_axi_hp_3_aw_payload_len;
  assign m_axi_hp_0_3_awsize = coreArea_0_core_m_axi_hp_3_aw_payload_size;
  assign m_axi_hp_0_3_awburst = coreArea_0_core_m_axi_hp_3_aw_payload_burst;
  assign m_axi_hp_0_3_awcache = coreArea_0_core_m_axi_hp_3_aw_payload_cache;
  assign m_axi_hp_0_3_awuser = coreArea_0_core_m_axi_hp_3_aw_payload_user;
  assign m_axi_hp_0_3_awprot = coreArea_0_core_m_axi_hp_3_aw_payload_prot;
  assign m_axi_hp_0_3_wvalid = coreArea_0_core_m_axi_hp_3_w_valid;
  assign m_axi_hp_0_3_wdata = coreArea_0_core_m_axi_hp_3_w_payload_data;
  assign m_axi_hp_0_3_wstrb = coreArea_0_core_m_axi_hp_3_w_payload_strb;
  assign m_axi_hp_0_3_wlast = coreArea_0_core_m_axi_hp_3_w_payload_last;
  assign m_axi_hp_0_3_bready = coreArea_0_core_m_axi_hp_3_b_ready;
  assign m_axi_hp_0_3_arvalid = coreArea_0_core_m_axi_hp_3_ar_valid;
  assign m_axi_hp_0_3_araddr = coreArea_0_core_m_axi_hp_3_ar_payload_addr;
  assign m_axi_hp_0_3_arid = coreArea_0_core_m_axi_hp_3_ar_payload_id;
  assign m_axi_hp_0_3_arlen = coreArea_0_core_m_axi_hp_3_ar_payload_len;
  assign m_axi_hp_0_3_arsize = coreArea_0_core_m_axi_hp_3_ar_payload_size;
  assign m_axi_hp_0_3_arburst = coreArea_0_core_m_axi_hp_3_ar_payload_burst;
  assign m_axi_hp_0_3_arcache = coreArea_0_core_m_axi_hp_3_ar_payload_cache;
  assign m_axi_hp_0_3_aruser = coreArea_0_core_m_axi_hp_3_ar_payload_user;
  assign m_axi_hp_0_3_arprot = coreArea_0_core_m_axi_hp_3_ar_payload_prot;
  assign m_axi_hp_0_3_rready = coreArea_0_core_m_axi_hp_3_r_ready;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid = toplevel_cfg_io_tokenIndex_regNext_regNext_valid;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata = toplevel_cfg_io_tokenIndex_regNext_regNext_tdata;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser = toplevel_cfg_io_tokenIndex_regNext_regNext_tuser;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_ready = coreArea_0_core_tokenIndex_ready;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_valid_1 = toplevel_cfg_io_tokenIndex_regNext_regNext_valid_1;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tdata_1 = toplevel_cfg_io_tokenIndex_regNext_regNext_tdata_1;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_tuser_1 = toplevel_cfg_io_tokenIndex_regNext_regNext_tuser_1;
  assign toplevel_cfg_io_tokenIndex_regNext_regNext_toStream_ready_1 = coreArea_1_core_tokenIndex_ready;
  assign toplevel_coreArea_1_core_c2c_to_toStream_valid = coreArea_1_core_c2c_to_valid;
  assign toplevel_coreArea_1_core_c2c_to_toStream_payload_last = coreArea_1_core_c2c_to_payload_last;
  assign toplevel_coreArea_1_core_c2c_to_toStream_payload_tdata = coreArea_1_core_c2c_to_payload_tdata;
  assign toplevel_coreArea_1_core_c2c_to_toStream_payload_tuser = coreArea_1_core_c2c_to_payload_tuser;
  assign toplevel_coreArea_1_core_c2c_to_toStream_payload_tdest = coreArea_1_core_c2c_to_payload_tdest;
  assign toplevel_coreArea_1_core_c2c_to_toStream_ready = coreArea_0_core_c2c_from_ready;
  assign toplevel_coreArea_0_core_c2c_to_toStream_valid = coreArea_0_core_c2c_to_valid;
  assign toplevel_coreArea_0_core_c2c_to_toStream_payload_last = coreArea_0_core_c2c_to_payload_last;
  assign toplevel_coreArea_0_core_c2c_to_toStream_payload_tdata = coreArea_0_core_c2c_to_payload_tdata;
  assign toplevel_coreArea_0_core_c2c_to_toStream_payload_tuser = coreArea_0_core_c2c_to_payload_tuser;
  assign toplevel_coreArea_0_core_c2c_to_toStream_payload_tdest = coreArea_0_core_c2c_to_payload_tdest;
  assign toplevel_coreArea_0_core_c2c_to_toStream_ready = coreArea_1_core_c2c_from_ready;
  always @(posedge S00_ACLK or negedge S00_ARESETN) begin
    if(!S00_ARESETN) begin
      toplevel_cfg_io_tokenIndex_regNext_valid <= 1'b0;
      toplevel_cfg_io_tokenIndex_regNext_regNext_valid <= 1'b0;
      toplevel_cfg_io_tokenIndex_regNext_valid_1 <= 1'b0;
      toplevel_cfg_io_tokenIndex_regNext_regNext_valid_1 <= 1'b0;
    end else begin
      toplevel_cfg_io_tokenIndex_regNext_valid <= cfg_io_tokenIndex_valid;
      toplevel_cfg_io_tokenIndex_regNext_regNext_valid <= toplevel_cfg_io_tokenIndex_regNext_valid;
      toplevel_cfg_io_tokenIndex_regNext_valid_1 <= cfg_io_tokenIndex_valid;
      toplevel_cfg_io_tokenIndex_regNext_regNext_valid_1 <= toplevel_cfg_io_tokenIndex_regNext_valid_1;
    end
  end

  always @(posedge S00_ACLK) begin
    toplevel_cfg_io_tokenIndex_regNext_tdata <= cfg_io_tokenIndex_tdata;
    toplevel_cfg_io_tokenIndex_regNext_tuser <= cfg_io_tokenIndex_tuser;
    toplevel_cfg_io_tokenIndex_regNext_regNext_tdata <= toplevel_cfg_io_tokenIndex_regNext_tdata;
    toplevel_cfg_io_tokenIndex_regNext_regNext_tuser <= toplevel_cfg_io_tokenIndex_regNext_tuser;
    toplevel_cfg_io_tokenIndex_regNext_tdata_1 <= cfg_io_tokenIndex_tdata;
    toplevel_cfg_io_tokenIndex_regNext_tuser_1 <= cfg_io_tokenIndex_tuser;
    toplevel_cfg_io_tokenIndex_regNext_regNext_tdata_1 <= toplevel_cfg_io_tokenIndex_regNext_tdata_1;
    toplevel_cfg_io_tokenIndex_regNext_regNext_tuser_1 <= toplevel_cfg_io_tokenIndex_regNext_tuser_1;
  end


endmodule

module DataPath_1 (
  input  wire          c2c_from_valid,
  output wire          c2c_from_ready,
  input  wire          c2c_from_payload_last,
  input  wire [15:0]   c2c_from_payload_tdata,
  input  wire [5:0]    c2c_from_payload_tuser,
  input  wire [0:0]    c2c_from_payload_tdest,
  output wire          c2c_to_valid,
  output wire          c2c_to_payload_last,
  output wire [15:0]   c2c_to_payload_tdata,
  output wire [5:0]    c2c_to_payload_tuser,
  output wire [0:0]    c2c_to_payload_tdest,
  output wire [15:0]   toAxiLite_tokenCnt,
  output wire          toAxiLite_argMaxVld,
  output wire [15:0]   toAxiLite_argMaxIndex,
  output wire          toAxiLite_prefill,
  output wire [7:0]    toAxiLite_layerCnt,
  input  wire          tokenIndex_valid,
  output wire          tokenIndex_ready,
  input  wire [15:0]   tokenIndex_tdata,
  input  wire [5:0]    tokenIndex_tuser,
  output wire          m_axi_aw_valid,
  input  wire          m_axi_aw_ready,
  output wire [31:0]   m_axi_aw_payload_addr,
  output wire [3:0]    m_axi_aw_payload_id,
  output wire [7:0]    m_axi_aw_payload_len,
  output wire [2:0]    m_axi_aw_payload_size,
  output wire [1:0]    m_axi_aw_payload_burst,
  output wire [3:0]    m_axi_aw_payload_cache,
  output wire [3:0]    m_axi_aw_payload_user,
  output wire [2:0]    m_axi_aw_payload_prot,
  output wire          m_axi_w_valid,
  input  wire          m_axi_w_ready,
  output wire [511:0]  m_axi_w_payload_data,
  output wire [63:0]   m_axi_w_payload_strb,
  output wire          m_axi_w_payload_last,
  input  wire          m_axi_b_valid,
  output wire          m_axi_b_ready,
  input  wire [3:0]    m_axi_b_payload_id,
  input  wire [1:0]    m_axi_b_payload_resp,
  output wire          m_axi_ar_valid,
  input  wire          m_axi_ar_ready,
  output wire [31:0]   m_axi_ar_payload_addr,
  output wire [3:0]    m_axi_ar_payload_id,
  output wire [7:0]    m_axi_ar_payload_len,
  output wire [2:0]    m_axi_ar_payload_size,
  output wire [1:0]    m_axi_ar_payload_burst,
  output wire [3:0]    m_axi_ar_payload_cache,
  output wire [3:0]    m_axi_ar_payload_user,
  output wire [2:0]    m_axi_ar_payload_prot,
  input  wire          m_axi_r_valid,
  output wire          m_axi_r_ready,
  input  wire [511:0]  m_axi_r_payload_data,
  input  wire [3:0]    m_axi_r_payload_id,
  input  wire [1:0]    m_axi_r_payload_resp,
  input  wire          m_axi_r_payload_last,
  input  wire          aresetn,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                attn_exp_from_valid;
  wire       [15:0]   attn_exp_from_payload;
  wire                sOut_io_p2sOut_valid;
  wire       [15:0]   sOut_io_p2sOut_tdata;
  wire       [5:0]    sOut_io_p2sOut_tuser;
  wire                cmdGen_io_tokenIndex_ready;
  wire                cmdGen_io_mm2s_ready;
  wire                cmdGen_io_s2mm_valid;
  wire       [511:0]  cmdGen_io_s2mm_payload_data;
  wire       [63:0]   cmdGen_io_s2mm_payload_keep;
  wire                cmdGen_io_s2mm_payload_last;
  wire                cmdGen_io_mm2sCmd_valid;
  wire       [71:0]   cmdGen_io_mm2sCmd_payload;
  wire                cmdGen_io_s2mmCmd_valid;
  wire       [71:0]   cmdGen_io_s2mmCmd_payload;
  wire                cmdGen_local_bus_valid;
  wire       [511:0]  cmdGen_local_bus_payload_data;
  wire                cmdGen_local_bus_payload_last;
  wire       [5:0]    cmdGen_local_bus_payload_dest;
  wire                cmdGen_local_kvBus_ready;
  wire                tokenIndexFifo_io_push_ready;
  wire                tokenIndexFifo_io_pop_valid;
  wire       [15:0]   tokenIndexFifo_io_pop_tdata;
  wire       [5:0]    tokenIndexFifo_io_pop_tuser;
  wire       [6:0]    tokenIndexFifo_io_occupancy;
  wire       [6:0]    tokenIndexFifo_io_availability;
  wire                dmaMig_s_axis_s2mm_tready;
  wire                dmaMig_s_axis_s2mm_cmd_tready;
  wire                dmaMig_s_axis_mm2s_cmd_tready;
  wire                dmaMig_m_axi_mm2s_arvalid;
  wire       [31:0]   dmaMig_m_axi_mm2s_araddr;
  wire       [3:0]    dmaMig_m_axi_mm2s_arid;
  wire       [7:0]    dmaMig_m_axi_mm2s_arlen;
  wire       [2:0]    dmaMig_m_axi_mm2s_arsize;
  wire       [1:0]    dmaMig_m_axi_mm2s_arburst;
  wire       [3:0]    dmaMig_m_axi_mm2s_arcache;
  wire       [3:0]    dmaMig_m_axi_mm2s_aruser;
  wire       [2:0]    dmaMig_m_axi_mm2s_arprot;
  wire                dmaMig_m_axi_s2mm_awvalid;
  wire       [31:0]   dmaMig_m_axi_s2mm_awaddr;
  wire       [3:0]    dmaMig_m_axi_s2mm_awid;
  wire       [7:0]    dmaMig_m_axi_s2mm_awlen;
  wire       [2:0]    dmaMig_m_axi_s2mm_awsize;
  wire       [1:0]    dmaMig_m_axi_s2mm_awburst;
  wire       [3:0]    dmaMig_m_axi_s2mm_awcache;
  wire       [3:0]    dmaMig_m_axi_s2mm_awuser;
  wire       [2:0]    dmaMig_m_axi_s2mm_awprot;
  wire                dmaMig_m_axi_s2mm_wvalid;
  wire       [511:0]  dmaMig_m_axi_s2mm_wdata;
  wire       [63:0]   dmaMig_m_axi_s2mm_wstrb;
  wire                dmaMig_m_axi_s2mm_wlast;
  wire                dmaMig_m_axi_mm2s_rready;
  wire                dmaMig_m_axi_s2mm_bready;
  wire                dmaMig_m_axis_s2mm_sts_tvalid;
  wire       [7:0]    dmaMig_m_axis_s2mm_sts_tdata;
  wire       [0:0]    dmaMig_m_axis_s2mm_sts_tkeep;
  wire                dmaMig_m_axis_s2mm_sts_tlast;
  wire                dmaMig_m_axis_mm2s_sts_tvalid;
  wire       [7:0]    dmaMig_m_axis_mm2s_sts_tdata;
  wire       [0:0]    dmaMig_m_axis_mm2s_sts_tkeep;
  wire                dmaMig_m_axis_mm2s_sts_tlast;
  wire                dmaMig_m_axis_mm2s_tvalid;
  wire       [511:0]  dmaMig_m_axis_mm2s_tdata;
  wire       [63:0]   dmaMig_m_axis_mm2s_tkeep;
  wire                dmaMig_m_axis_mm2s_tlast;
  wire                dmaMig_mm2s_err;
  wire                dmaMig_s2mm_err;
  wire                coreArea_1_core_cmdGen_io_s2mm_fifo_io_push_ready;
  wire                coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_valid;
  wire       [511:0]  coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_data;
  wire       [63:0]   coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_keep;
  wire                coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_last;
  wire       [9:0]    coreArea_1_core_cmdGen_io_s2mm_fifo_io_occupancy;
  wire       [9:0]    coreArea_1_core_cmdGen_io_s2mm_fifo_io_availability;
  wire                axi_io_bus_ready;
  wire                axi_io_kSzOut_ready;
  wire                axi_io_vSzOut_ready;
  wire                axi_int_bus_valid;
  wire                axi_int_bus_payload_last;
  wire       [511:0]  axi_int_bus_payload_tdata;
  wire       [5:0]    axi_int_bus_payload_tuser;
  wire                axi_int_lnScale_valid;
  wire       [15:0]   axi_int_lnScale_payload;
  wire                axi_int_zeroInt4_valid;
  wire       [7:0]    axi_int_zeroInt4_payload;
  wire                axi_int_zeroInt8_valid;
  wire       [7:0]    axi_int_zeroInt8_payload;
  wire                axi_int_preScale_valid;
  wire       [15:0]   axi_int_preScale_payload;
  wire                axi_int_postScale_valid;
  wire       [31:0]   axi_int_postScale_payload;
  wire                attn_io_ropeOut_valid;
  wire       [15:0]   attn_io_ropeOut_tdata;
  wire       [5:0]    attn_io_ropeOut_tuser;
  wire                attn_io_softmaxOut_valid;
  wire                attn_io_softmaxOut_payload_last;
  wire       [15:0]   attn_io_softmaxOut_payload_tdata;
  wire       [5:0]    attn_io_softmaxOut_payload_tuser;
  wire                attn_io_quantZero_valid;
  wire       [7:0]    attn_io_quantZero_payload;
  wire                attn_io_quantScale_valid;
  wire       [15:0]   attn_io_quantScale_payload;
  wire                attn_io_afterQuant_valid;
  wire                attn_io_afterQuant_payload_last;
  wire       [7:0]    attn_io_afterQuant_payload_fragment;
  wire                attn_exp_to_valid;
  wire       [15:0]   attn_exp_to_payload;
  wire                ln_io_lnScale_ready;
  wire                ln_io_lnOut_valid;
  wire       [15:0]   ln_io_lnOut_tdata;
  wire       [5:0]    ln_io_lnOut_tuser;
  wire                ln_mlpNormOutProbe_valid;
  wire       [15:0]   ln_mlpNormOutProbe_payload;
  wire                ln_attnNormOutProbe_valid;
  wire       [15:0]   ln_attnNormOutProbe_payload;
  wire                sOut_io_scalarOut_valid;
  wire       [15:0]   sOut_io_scalarOut_payload;
  wire                sOut_io_zfIndexOut_valid;
  wire                sOut_io_zfIndexOut_payload_last;
  wire       [15:0]   sOut_io_zfIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_zfIndexOut_payload_tuser;
  wire                sOut_io_gateIndexOut_valid;
  wire                sOut_io_gateIndexOut_payload_last;
  wire       [15:0]   sOut_io_gateIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_gateIndexOut_payload_tuser;
  wire                sOut_io_ugIndexOut_valid;
  wire                sOut_io_ugIndexOut_payload_last;
  wire       [15:0]   sOut_io_ugIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_ugIndexOut_payload_tuser;
  wire                sOut_silu_to_valid;
  wire       [15:0]   sOut_silu_to_payload;
  wire                busIn_io_bus_ready;
  wire                busIn_io_zeroInt4_ready;
  wire                busIn_io_zeroInt8_ready;
  wire                busIn_io_wkv_valid;
  wire       [2047:0] busIn_io_wkv_payload;
  wire                busIn_io_p2sOut_valid;
  wire                busIn_io_p2sOut_payload_last;
  wire       [15:0]   busIn_io_p2sOut_payload_tdata;
  wire       [5:0]    busIn_io_p2sOut_payload_tuser;
  wire                busIn_io_toResBuf_valid;
  wire       [2047:0] busIn_io_toResBuf_payload;
  wire                busIn_io_directOut_valid;
  wire       [2047:0] busIn_io_directOut_tdata;
  wire       [5:0]    busIn_io_directOut_tuser;
  wire                vecOut_io_vLocal_valid;
  wire       [2047:0] vecOut_io_vLocal_tdata;
  wire       [5:0]    vecOut_io_vLocal_tuser;
  wire                vecOut_io_vecOut_valid;
  wire       [2047:0] vecOut_io_vecOut_payload;
  wire                resBuf_serialOut_tvalid;
  wire       [15:0]   resBuf_serialOut_tdata;
  wire                resBuf_parallelOut_tvalid;
  wire       [2047:0] resBuf_parallelOut_tdata;
  wire                resAdd_io_output_valid;
  wire                resAdd_io_output_payload_last;
  wire       [15:0]   resAdd_io_output_payload_tdata;
  wire       [5:0]    resAdd_io_output_payload_tuser;
  wire                resAdd_io_fromResBuf_ready;
  wire                resAdd_io_toResBuf_valid;
  wire       [15:0]   resAdd_io_toResBuf_payload;
  wire                resAdd_multiCore2Res_resAddProbe_valid;
  wire       [15:0]   resAdd_multiCore2Res_resAddProbe_payload;
  wire                engine_wkvIn_tready;
  wire                engine_dotIn_tready;
  wire                engine_resAdd_tready;
  wire                engine_axpyIn_tready;
  wire                engine_preScale_tready;
  wire                engine_postScale_tready;
  wire                engine_vecOut_tvalid;
  wire       [2047:0] engine_vecOut_tdata;
  wire       [5:0]    engine_vecOut_tuser;
  wire                engine_scalarOut_tvalid;
  wire       [15:0]   engine_scalarOut_tdata;
  wire       [5:0]    engine_scalarOut_tuser;
  wire                engine_cfg_tready;
  wire       [5:0]    engine_preCfgTag;
  wire       [5:0]    engine_postCfgTag;
  wire                node_allGatherOut_tvalid;
  wire       [15:0]   node_allGatherOut_tdata;
  wire       [5:0]    node_allGatherOut_tuser;
  wire                node_allReduceOut_tvalid;
  wire       [15:0]   node_allReduceOut_tdata;
  wire       [5:0]    node_allReduceOut_tuser;
  wire                node_indexOut_tvalid;
  wire                node_indexOut_tlast;
  wire       [15:0]   node_indexOut_tdata;
  wire       [5:0]    node_indexOut_tuser;
  wire                node_c2c_from_ready;
  wire                node_c2c_to_valid;
  wire                node_c2c_to_payload_last;
  wire       [15:0]   node_c2c_to_payload_tdata;
  wire       [5:0]    node_c2c_to_payload_tuser;
  wire       [0:0]    node_c2c_to_payload_tdest;
  wire                cfgInsert_io_cfgIn_ready;
  wire                cfgInsert_io_cfgOut_valid;
  wire       [31:0]   cfgInsert_io_cfgOut_payload;
  wire                cfgInsert_io_gtCnt_valid;
  wire       [15:0]   cfgInsert_io_gtCnt_payload;
  wire                sample_argmax_tvalid;
  wire       [15:0]   sample_argmax_tdata;
  wire                sample_endOfDecode;
  wire                siluAct_io_out_valid;
  wire       [15:0]   siluAct_io_out_payload;
  wire                szPacker_io_kvBus_valid;
  wire                szPacker_io_kvBus_payload_last;
  wire       [511:0]  szPacker_io_kvBus_payload_fragment;
  wire                szPacker_io_kSzOut_valid;
  wire       [31:0]   szPacker_io_kSzOut_payload;
  wire                szPacker_io_vSzOut_valid;
  wire       [31:0]   szPacker_io_vSzOut_payload;
  wire                cfgGen_io_cfg_valid;
  wire       [31:0]   cfgGen_io_cfg_payload;
  wire                stateGen_2_status_enPredictor;
  wire                stateGen_2_status_enProSparse;
  wire                stateGen_2_status_tokenNextHit;
  wire                stateGen_2_status_mlpNextHit;
  wire                stateGen_2_status_vNextHit;
  wire                stateGen_2_status_prefill;
  wire                stateGen_2_status_flushRes;
  wire                stateGen_2_status_nextLayer;
  wire       [15:0]   stateGen_2_status_nonZeroCnt;
  wire                stateGen_2_status_logitsGen;
  wire                stateGen_2_status_toLogitsGen;
  wire       [9:0]    stateGen_2_status_token;
  wire       [4:0]    stateGen_2_status_layerCnt;
  wire       [9:0]    t_toAxiLite_tokenCnt;
  wire       [4:0]    t_toAxiLite_layerCnt;
  reg                 tokenIndexPipe_valid;
  reg        [15:0]   tokenIndexPipe_tdata;
  reg        [5:0]    tokenIndexPipe_tuser;
  wire       [63:0]   t_io_bus_payload_keep;
  wire       [22:0]   t_io_p2sOut_valid;
  wire       [21:0]   t_io_p2sOut_tdata;
  wire                coreArea_1_core_axi_int_bus_fire;

  assign t_toAxiLite_tokenCnt = stateGen_2_status_token;
  assign t_toAxiLite_layerCnt = stateGen_2_status_layerCnt;
  GenMemCmdLenAlign cmdGen (
    .io_tokenIndex_valid       (tokenIndexFifo_io_pop_valid                      ), //i
    .io_tokenIndex_ready       (cmdGen_io_tokenIndex_ready                       ), //o
    .io_tokenIndex_tdata       (tokenIndexFifo_io_pop_tdata[15:0]                ), //i
    .io_tokenIndex_tuser       (tokenIndexFifo_io_pop_tuser[5:0]                 ), //i
    .io_mm2s_valid             (dmaMig_m_axis_mm2s_tvalid                        ), //i
    .io_mm2s_ready             (cmdGen_io_mm2s_ready                             ), //o
    .io_mm2s_payload_data      (dmaMig_m_axis_mm2s_tdata[511:0]                  ), //i
    .io_mm2s_payload_keep      (dmaMig_m_axis_mm2s_tkeep[63:0]                   ), //i
    .io_mm2s_payload_last      (dmaMig_m_axis_mm2s_tlast                         ), //i
    .io_s2mm_valid             (cmdGen_io_s2mm_valid                             ), //o
    .io_s2mm_ready             (coreArea_1_core_cmdGen_io_s2mm_fifo_io_push_ready), //i
    .io_s2mm_payload_data      (cmdGen_io_s2mm_payload_data[511:0]               ), //o
    .io_s2mm_payload_keep      (cmdGen_io_s2mm_payload_keep[63:0]                ), //o
    .io_s2mm_payload_last      (cmdGen_io_s2mm_payload_last                      ), //o
    .io_mm2sCmd_valid          (cmdGen_io_mm2sCmd_valid                          ), //o
    .io_mm2sCmd_ready          (dmaMig_s_axis_mm2s_cmd_tready                    ), //i
    .io_mm2sCmd_payload        (cmdGen_io_mm2sCmd_payload[71:0]                  ), //o
    .io_s2mmCmd_valid          (cmdGen_io_s2mmCmd_valid                          ), //o
    .io_s2mmCmd_ready          (dmaMig_s_axis_s2mm_cmd_tready                    ), //i
    .io_s2mmCmd_payload        (cmdGen_io_s2mmCmd_payload[71:0]                  ), //o
    .local_bus_valid           (cmdGen_local_bus_valid                           ), //o
    .local_bus_ready           (axi_io_bus_ready                                 ), //i
    .local_bus_payload_data    (cmdGen_local_bus_payload_data[511:0]             ), //o
    .local_bus_payload_last    (cmdGen_local_bus_payload_last                    ), //o
    .local_bus_payload_dest    (cmdGen_local_bus_payload_dest[5:0]               ), //o
    .local_kvBus_valid         (szPacker_io_kvBus_valid                          ), //i
    .local_kvBus_ready         (cmdGen_local_kvBus_ready                         ), //o
    .local_kvBus_payload_data  (szPacker_io_kvBus_payload_fragment[511:0]        ), //i
    .local_kvBus_payload_last  (szPacker_io_kvBus_payload_last                   ), //i
    .local_kvBus_payload_dest  (6'h0                                             ), //i
    .local_index_valid         (node_indexOut_tvalid                             ), //i
    .local_index_payload_last  (node_indexOut_tlast                              ), //i
    .local_index_payload_tdata (node_indexOut_tdata[15:0]                        ), //i
    .local_index_payload_tuser (node_indexOut_tuser[5:0]                         ), //i
    .status_enPredictor        (stateGen_2_status_enPredictor                    ), //i
    .clk_1_clk                 (clk_1_clk                                        ), //i
    .clk_1_resetn              (clk_1_resetn                                     )  //i
  );
  StreamFifo tokenIndexFifo (
    .io_push_valid   (tokenIndexPipe_valid               ), //i
    .io_push_ready   (tokenIndexFifo_io_push_ready       ), //o
    .io_push_tdata   (tokenIndexPipe_tdata[15:0]         ), //i
    .io_push_tuser   (tokenIndexPipe_tuser[5:0]          ), //i
    .io_pop_valid    (tokenIndexFifo_io_pop_valid        ), //o
    .io_pop_ready    (cmdGen_io_tokenIndex_ready         ), //i
    .io_pop_tdata    (tokenIndexFifo_io_pop_tdata[15:0]  ), //o
    .io_pop_tuser    (tokenIndexFifo_io_pop_tuser[5:0]   ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (tokenIndexFifo_io_occupancy[6:0]   ), //o
    .io_availability (tokenIndexFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                          ), //i
    .clk_1_resetn    (clk_1_resetn                       )  //i
  );
  AxiDatamover512 dmaMig (
    .s_axis_s2mm_tvalid         (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_valid              ), //i
    .s_axis_s2mm_tready         (dmaMig_s_axis_s2mm_tready                                     ), //o
    .s_axis_s2mm_tdata          (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_data[511:0]), //i
    .s_axis_s2mm_tkeep          (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_keep[63:0] ), //i
    .s_axis_s2mm_tlast          (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_last       ), //i
    .s_axis_s2mm_cmd_tvalid     (cmdGen_io_s2mmCmd_valid                                       ), //i
    .s_axis_s2mm_cmd_tready     (dmaMig_s_axis_s2mm_cmd_tready                                 ), //o
    .s_axis_s2mm_cmd_tdata      (cmdGen_io_s2mmCmd_payload[71:0]                               ), //i
    .s_axis_mm2s_cmd_tvalid     (cmdGen_io_mm2sCmd_valid                                       ), //i
    .s_axis_mm2s_cmd_tready     (dmaMig_s_axis_mm2s_cmd_tready                                 ), //o
    .s_axis_mm2s_cmd_tdata      (cmdGen_io_mm2sCmd_payload[71:0]                               ), //i
    .m_axi_s2mm_awvalid         (dmaMig_m_axi_s2mm_awvalid                                     ), //o
    .m_axi_s2mm_awready         (m_axi_aw_ready                                                ), //i
    .m_axi_s2mm_awaddr          (dmaMig_m_axi_s2mm_awaddr[31:0]                                ), //o
    .m_axi_s2mm_awid            (dmaMig_m_axi_s2mm_awid[3:0]                                   ), //o
    .m_axi_s2mm_awlen           (dmaMig_m_axi_s2mm_awlen[7:0]                                  ), //o
    .m_axi_s2mm_awsize          (dmaMig_m_axi_s2mm_awsize[2:0]                                 ), //o
    .m_axi_s2mm_awburst         (dmaMig_m_axi_s2mm_awburst[1:0]                                ), //o
    .m_axi_s2mm_awcache         (dmaMig_m_axi_s2mm_awcache[3:0]                                ), //o
    .m_axi_s2mm_awuser          (dmaMig_m_axi_s2mm_awuser[3:0]                                 ), //o
    .m_axi_s2mm_awprot          (dmaMig_m_axi_s2mm_awprot[2:0]                                 ), //o
    .m_axi_s2mm_wvalid          (dmaMig_m_axi_s2mm_wvalid                                      ), //o
    .m_axi_s2mm_wready          (m_axi_w_ready                                                 ), //i
    .m_axi_s2mm_wdata           (dmaMig_m_axi_s2mm_wdata[511:0]                                ), //o
    .m_axi_s2mm_wstrb           (dmaMig_m_axi_s2mm_wstrb[63:0]                                 ), //o
    .m_axi_s2mm_wlast           (dmaMig_m_axi_s2mm_wlast                                       ), //o
    .m_axi_s2mm_bvalid          (m_axi_b_valid                                                 ), //i
    .m_axi_s2mm_bready          (dmaMig_m_axi_s2mm_bready                                      ), //o
    .m_axi_s2mm_bresp           (m_axi_b_payload_resp[1:0]                                     ), //i
    .m_axi_mm2s_arvalid         (dmaMig_m_axi_mm2s_arvalid                                     ), //o
    .m_axi_mm2s_arready         (m_axi_ar_ready                                                ), //i
    .m_axi_mm2s_araddr          (dmaMig_m_axi_mm2s_araddr[31:0]                                ), //o
    .m_axi_mm2s_arid            (dmaMig_m_axi_mm2s_arid[3:0]                                   ), //o
    .m_axi_mm2s_arlen           (dmaMig_m_axi_mm2s_arlen[7:0]                                  ), //o
    .m_axi_mm2s_arsize          (dmaMig_m_axi_mm2s_arsize[2:0]                                 ), //o
    .m_axi_mm2s_arburst         (dmaMig_m_axi_mm2s_arburst[1:0]                                ), //o
    .m_axi_mm2s_arcache         (dmaMig_m_axi_mm2s_arcache[3:0]                                ), //o
    .m_axi_mm2s_aruser          (dmaMig_m_axi_mm2s_aruser[3:0]                                 ), //o
    .m_axi_mm2s_arprot          (dmaMig_m_axi_mm2s_arprot[2:0]                                 ), //o
    .m_axi_mm2s_rvalid          (m_axi_r_valid                                                 ), //i
    .m_axi_mm2s_rready          (dmaMig_m_axi_mm2s_rready                                      ), //o
    .m_axi_mm2s_rdata           (m_axi_r_payload_data[511:0]                                   ), //i
    .m_axi_mm2s_rresp           (m_axi_r_payload_resp[1:0]                                     ), //i
    .m_axi_mm2s_rlast           (m_axi_r_payload_last                                          ), //i
    .m_axis_s2mm_sts_tvalid     (dmaMig_m_axis_s2mm_sts_tvalid                                 ), //o
    .m_axis_s2mm_sts_tready     (1'b1                                                          ), //i
    .m_axis_s2mm_sts_tdata      (dmaMig_m_axis_s2mm_sts_tdata[7:0]                             ), //o
    .m_axis_s2mm_sts_tkeep      (dmaMig_m_axis_s2mm_sts_tkeep                                  ), //o
    .m_axis_s2mm_sts_tlast      (dmaMig_m_axis_s2mm_sts_tlast                                  ), //o
    .m_axis_mm2s_sts_tvalid     (dmaMig_m_axis_mm2s_sts_tvalid                                 ), //o
    .m_axis_mm2s_sts_tready     (1'b1                                                          ), //i
    .m_axis_mm2s_sts_tdata      (dmaMig_m_axis_mm2s_sts_tdata[7:0]                             ), //o
    .m_axis_mm2s_sts_tkeep      (dmaMig_m_axis_mm2s_sts_tkeep                                  ), //o
    .m_axis_mm2s_sts_tlast      (dmaMig_m_axis_mm2s_sts_tlast                                  ), //o
    .m_axis_mm2s_tvalid         (dmaMig_m_axis_mm2s_tvalid                                     ), //o
    .m_axis_mm2s_tready         (cmdGen_io_mm2s_ready                                          ), //i
    .m_axis_mm2s_tdata          (dmaMig_m_axis_mm2s_tdata[511:0]                               ), //o
    .m_axis_mm2s_tkeep          (dmaMig_m_axis_mm2s_tkeep[63:0]                                ), //o
    .m_axis_mm2s_tlast          (dmaMig_m_axis_mm2s_tlast                                      ), //o
    .m_axi_mm2s_aclk            (clk_1_clk                                                     ), //i
    .m_axi_mm2s_aresetn         (aresetn                                                       ), //i
    .m_axis_mm2s_cmdsts_aclk    (clk_1_clk                                                     ), //i
    .m_axis_mm2s_cmdsts_aresetn (aresetn                                                       ), //i
    .m_axi_s2mm_aclk            (clk_1_clk                                                     ), //i
    .m_axi_s2mm_aresetn         (aresetn                                                       ), //i
    .m_axis_s2mm_cmdsts_awclk   (clk_1_clk                                                     ), //i
    .m_axis_s2mm_cmdsts_aresetn (aresetn                                                       ), //i
    .mm2s_err                   (dmaMig_mm2s_err                                               ), //o
    .s2mm_err                   (dmaMig_s2mm_err                                               )  //o
  );
  StreamFifo_1 coreArea_1_core_cmdGen_io_s2mm_fifo (
    .io_push_valid        (cmdGen_io_s2mm_valid                                          ), //i
    .io_push_ready        (coreArea_1_core_cmdGen_io_s2mm_fifo_io_push_ready             ), //o
    .io_push_payload_data (cmdGen_io_s2mm_payload_data[511:0]                            ), //i
    .io_push_payload_keep (cmdGen_io_s2mm_payload_keep[63:0]                             ), //i
    .io_push_payload_last (cmdGen_io_s2mm_payload_last                                   ), //i
    .io_pop_valid         (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_valid              ), //o
    .io_pop_ready         (dmaMig_s_axis_s2mm_tready                                     ), //i
    .io_pop_payload_data  (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_data[511:0]), //o
    .io_pop_payload_keep  (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_keep[63:0] ), //o
    .io_pop_payload_last  (coreArea_1_core_cmdGen_io_s2mm_fifo_io_pop_payload_last       ), //o
    .io_flush             (1'b0                                                          ), //i
    .io_occupancy         (coreArea_1_core_cmdGen_io_s2mm_fifo_io_occupancy[9:0]         ), //o
    .io_availability      (coreArea_1_core_cmdGen_io_s2mm_fifo_io_availability[9:0]      ), //o
    .clk_1_clk            (clk_1_clk                                                     ), //i
    .clk_1_resetn         (clk_1_resetn                                                  )  //i
  );
  AxiBusDistributor axi (
    .io_bus_valid          (cmdGen_local_bus_valid              ), //i
    .io_bus_ready          (axi_io_bus_ready                    ), //o
    .io_bus_payload_data   (cmdGen_local_bus_payload_data[511:0]), //i
    .io_bus_payload_keep   (t_io_bus_payload_keep[63:0]         ), //i
    .io_bus_payload_last   (cmdGen_local_bus_payload_last       ), //i
    .io_bus_payload_dest   (cmdGen_local_bus_payload_dest[5:0]  ), //i
    .io_token              (stateGen_2_status_token[9:0]        ), //i
    .io_preCfgTag          (engine_preCfgTag[5:0]               ), //i
    .io_postCfgTag         (engine_postCfgTag[5:0]              ), //i
    .io_enPredictor        (stateGen_2_status_enPredictor       ), //i
    .io_kSzOut_valid       (szPacker_io_kSzOut_valid            ), //i
    .io_kSzOut_ready       (axi_io_kSzOut_ready                 ), //o
    .io_kSzOut_payload     (szPacker_io_kSzOut_payload[31:0]    ), //i
    .io_vSzOut_valid       (szPacker_io_vSzOut_valid            ), //i
    .io_vSzOut_ready       (axi_io_vSzOut_ready                 ), //o
    .io_vSzOut_payload     (szPacker_io_vSzOut_payload[31:0]    ), //i
    .int_bus_valid         (axi_int_bus_valid                   ), //o
    .int_bus_ready         (busIn_io_bus_ready                  ), //i
    .int_bus_payload_last  (axi_int_bus_payload_last            ), //o
    .int_bus_payload_tdata (axi_int_bus_payload_tdata[511:0]    ), //o
    .int_bus_payload_tuser (axi_int_bus_payload_tuser[5:0]      ), //o
    .int_lnScale_valid     (axi_int_lnScale_valid               ), //o
    .int_lnScale_ready     (ln_io_lnScale_ready                 ), //i
    .int_lnScale_payload   (axi_int_lnScale_payload[15:0]       ), //o
    .int_zeroInt4_valid    (axi_int_zeroInt4_valid              ), //o
    .int_zeroInt4_ready    (busIn_io_zeroInt4_ready             ), //i
    .int_zeroInt4_payload  (axi_int_zeroInt4_payload[7:0]       ), //o
    .int_zeroInt8_valid    (axi_int_zeroInt8_valid              ), //o
    .int_zeroInt8_ready    (busIn_io_zeroInt8_ready             ), //i
    .int_zeroInt8_payload  (axi_int_zeroInt8_payload[7:0]       ), //o
    .int_preScale_valid    (axi_int_preScale_valid              ), //o
    .int_preScale_ready    (engine_preScale_tready              ), //i
    .int_preScale_payload  (axi_int_preScale_payload[15:0]      ), //o
    .int_postScale_valid   (axi_int_postScale_valid             ), //o
    .int_postScale_ready   (engine_postScale_tready             ), //i
    .int_postScale_payload (axi_int_postScale_payload[31:0]     ), //o
    .clk_1_clk             (clk_1_clk                           ), //i
    .clk_1_resetn          (clk_1_resetn                        )  //i
  );
  AttnSubMod attn (
    .io_dotOut_valid                (engine_scalarOut_tvalid                 ), //i
    .io_dotOut_tdata                (engine_scalarOut_tdata[15:0]            ), //i
    .io_dotOut_tuser                (engine_scalarOut_tuser[5:0]             ), //i
    .io_ropeOut_valid               (attn_io_ropeOut_valid                   ), //o
    .io_ropeOut_tdata               (attn_io_ropeOut_tdata[15:0]             ), //o
    .io_ropeOut_tuser               (attn_io_ropeOut_tuser[5:0]              ), //o
    .io_softmaxOut_valid            (attn_io_softmaxOut_valid                ), //o
    .io_softmaxOut_payload_last     (attn_io_softmaxOut_payload_last         ), //o
    .io_softmaxOut_payload_tdata    (attn_io_softmaxOut_payload_tdata[15:0]  ), //o
    .io_softmaxOut_payload_tuser    (attn_io_softmaxOut_payload_tuser[5:0]   ), //o
    .io_quantZero_valid             (attn_io_quantZero_valid                 ), //o
    .io_quantZero_payload           (attn_io_quantZero_payload[7:0]          ), //o
    .io_quantScale_valid            (attn_io_quantScale_valid                ), //o
    .io_quantScale_payload          (attn_io_quantScale_payload[15:0]        ), //o
    .io_afterQuant_valid            (attn_io_afterQuant_valid                ), //o
    .io_afterQuant_payload_last     (attn_io_afterQuant_payload_last         ), //o
    .io_afterQuant_payload_fragment (attn_io_afterQuant_payload_fragment[7:0]), //o
    .status_token                   (stateGen_2_status_token[9:0]            ), //i
    .exp_to_valid                   (attn_exp_to_valid                       ), //o
    .exp_to_payload                 (attn_exp_to_payload[15:0]               ), //o
    .exp_from_valid                 (attn_exp_from_valid                     ), //i
    .exp_from_payload               (attn_exp_from_payload[15:0]             ), //i
    .clk_1_clk                      (clk_1_clk                               ), //i
    .clk_1_resetn                   (clk_1_resetn                            )  //i
  );
  NormSubModNew ln (
    .io_allGatherOut_valid    (node_allGatherOut_tvalid         ), //i
    .io_allGatherOut_tdata    (node_allGatherOut_tdata[15:0]    ), //i
    .io_allGatherOut_tuser    (node_allGatherOut_tuser[5:0]     ), //i
    .io_allReduceOut_valid    (node_allReduceOut_tvalid         ), //i
    .io_allReduceOut_tdata    (node_allReduceOut_tdata[15:0]    ), //i
    .io_allReduceOut_tuser    (node_allReduceOut_tuser[5:0]     ), //i
    .io_lnScale_valid         (axi_int_lnScale_valid            ), //i
    .io_lnScale_ready         (ln_io_lnScale_ready              ), //o
    .io_lnScale_payload       (axi_int_lnScale_payload[15:0]    ), //i
    .io_lnOut_valid           (ln_io_lnOut_valid                ), //o
    .io_lnOut_tdata           (ln_io_lnOut_tdata[15:0]          ), //o
    .io_lnOut_tuser           (ln_io_lnOut_tuser[5:0]           ), //o
    .status_toLogitsGen       (stateGen_2_status_toLogitsGen    ), //i
    .clk_1_clk                (clk_1_clk                        ), //i
    .clk_1_resetn             (clk_1_resetn                     ), //i
    .mlpNormOutProbe_valid    (ln_mlpNormOutProbe_valid         ), //o
    .mlpNormOutProbe_payload  (ln_mlpNormOutProbe_payload[15:0] ), //o
    .attnNormOutProbe_valid   (ln_attnNormOutProbe_valid        ), //o
    .attnNormOutProbe_payload (ln_attnNormOutProbe_payload[15:0])  //o
  );
  ScalarOutSubMod sOut (
    .io_p2sOut_valid                   (sOut_io_p2sOut_valid                    ), //i
    .io_p2sOut_tdata                   (sOut_io_p2sOut_tdata[15:0]              ), //i
    .io_p2sOut_tuser                   (sOut_io_p2sOut_tuser[5:0]               ), //i
    .io_allReduceOut_valid             (node_allReduceOut_tvalid                ), //i
    .io_allReduceOut_tdata             (node_allReduceOut_tdata[15:0]           ), //i
    .io_allReduceOut_tuser             (node_allReduceOut_tuser[5:0]            ), //i
    .io_softmaxOut_valid               (attn_io_softmaxOut_valid                ), //i
    .io_softmaxOut_payload_last        (attn_io_softmaxOut_payload_last         ), //i
    .io_softmaxOut_payload_tdata       (attn_io_softmaxOut_payload_tdata[15:0]  ), //i
    .io_softmaxOut_payload_tuser       (attn_io_softmaxOut_payload_tuser[5:0]   ), //i
    .io_scalarOut_valid                (sOut_io_scalarOut_valid                 ), //o
    .io_scalarOut_ready                (engine_axpyIn_tready                    ), //i
    .io_scalarOut_payload              (sOut_io_scalarOut_payload[15:0]         ), //o
    .io_allGatherIndexIn_valid         (node_indexOut_tvalid                    ), //i
    .io_allGatherIndexIn_payload_last  (node_indexOut_tlast                     ), //i
    .io_allGatherIndexIn_payload_tdata (node_indexOut_tdata[15:0]               ), //i
    .io_allGatherIndexIn_payload_tuser (node_indexOut_tuser[5:0]                ), //i
    .io_zfIndexOut_valid               (sOut_io_zfIndexOut_valid                ), //o
    .io_zfIndexOut_payload_last        (sOut_io_zfIndexOut_payload_last         ), //o
    .io_zfIndexOut_payload_tdata       (sOut_io_zfIndexOut_payload_tdata[15:0]  ), //o
    .io_zfIndexOut_payload_tuser       (sOut_io_zfIndexOut_payload_tuser[5:0]   ), //o
    .io_gateIndexOut_valid             (sOut_io_gateIndexOut_valid              ), //o
    .io_gateIndexOut_payload_last      (sOut_io_gateIndexOut_payload_last       ), //o
    .io_gateIndexOut_payload_tdata     (sOut_io_gateIndexOut_payload_tdata[15:0]), //o
    .io_gateIndexOut_payload_tuser     (sOut_io_gateIndexOut_payload_tuser[5:0] ), //o
    .io_ugIndexOut_valid               (sOut_io_ugIndexOut_valid                ), //o
    .io_ugIndexOut_payload_last        (sOut_io_ugIndexOut_payload_last         ), //o
    .io_ugIndexOut_payload_tdata       (sOut_io_ugIndexOut_payload_tdata[15:0]  ), //o
    .io_ugIndexOut_payload_tuser       (sOut_io_ugIndexOut_payload_tuser[5:0]   ), //o
    .clk_1_clk                         (clk_1_clk                               ), //i
    .status_enPredictor                (stateGen_2_status_enPredictor           ), //i
    .status_enFatRelu                  (1'b0                                    ), //i
    .silu_to_valid                     (sOut_silu_to_valid                      ), //o
    .silu_to_payload                   (sOut_silu_to_payload[15:0]              ), //o
    .silu_from_valid                   (siluAct_io_out_valid                    ), //i
    .silu_from_payload                 (siluAct_io_out_payload[15:0]            ), //i
    .clk_1_resetn                      (clk_1_resetn                            )  //i
  );
  BusInSubModNew busIn (
    .io_bus_valid            (axi_int_bus_valid                  ), //i
    .io_bus_ready            (busIn_io_bus_ready                 ), //o
    .io_bus_payload_last     (axi_int_bus_payload_last           ), //i
    .io_bus_payload_tdata    (axi_int_bus_payload_tdata[511:0]   ), //i
    .io_bus_payload_tuser    (axi_int_bus_payload_tuser[5:0]     ), //i
    .io_vecIn_valid          (engine_vecOut_tvalid               ), //i
    .io_vecIn_tdata          (engine_vecOut_tdata[2047:0]        ), //i
    .io_vecIn_tuser          (engine_vecOut_tuser[5:0]           ), //i
    .io_vLocal_valid         (vecOut_io_vLocal_valid             ), //i
    .io_vLocal_tdata         (vecOut_io_vLocal_tdata[2047:0]     ), //i
    .io_vLocal_tuser         (vecOut_io_vLocal_tuser[5:0]        ), //i
    .io_zeroInt4_valid       (axi_int_zeroInt4_valid             ), //i
    .io_zeroInt4_ready       (busIn_io_zeroInt4_ready            ), //o
    .io_zeroInt4_payload     (axi_int_zeroInt4_payload[7:0]      ), //i
    .io_zeroInt8_valid       (axi_int_zeroInt8_valid             ), //i
    .io_zeroInt8_ready       (busIn_io_zeroInt8_ready            ), //o
    .io_zeroInt8_payload     (axi_int_zeroInt8_payload[7:0]      ), //i
    .io_wkv_valid            (busIn_io_wkv_valid                 ), //o
    .io_wkv_ready            (engine_wkvIn_tready                ), //i
    .io_wkv_payload          (busIn_io_wkv_payload[2047:0]       ), //o
    .io_p2sOut_valid         (busIn_io_p2sOut_valid              ), //o
    .io_p2sOut_payload_last  (busIn_io_p2sOut_payload_last       ), //o
    .io_p2sOut_payload_tdata (busIn_io_p2sOut_payload_tdata[15:0]), //o
    .io_p2sOut_payload_tuser (busIn_io_p2sOut_payload_tuser[5:0] ), //o
    .io_toResBuf_valid       (busIn_io_toResBuf_valid            ), //o
    .io_toResBuf_payload     (busIn_io_toResBuf_payload[2047:0]  ), //o
    .io_directOut_valid      (busIn_io_directOut_valid           ), //o
    .io_directOut_tdata      (busIn_io_directOut_tdata[2047:0]   ), //o
    .io_directOut_tuser      (busIn_io_directOut_tuser[5:0]      ), //o
    .status_tokenNextHit     (stateGen_2_status_tokenNextHit     ), //i
    .status_mlpNextHit       (stateGen_2_status_mlpNextHit       ), //i
    .status_vNextHit         (stateGen_2_status_vNextHit         ), //i
    .status_flushRes         (stateGen_2_status_flushRes         ), //i
    .status_logitsGen        (stateGen_2_status_logitsGen        ), //i
    .clk_1_clk               (clk_1_clk                          ), //i
    .clk_1_resetn            (clk_1_resetn                       )  //i
  );
  VecOutSubMod vecOut (
    .io_lnOut_valid                (ln_io_lnOut_valid               ), //i
    .io_lnOut_tdata                (ln_io_lnOut_tdata[15:0]         ), //i
    .io_lnOut_tuser                (ln_io_lnOut_tuser[5:0]          ), //i
    .io_dotOut_valid               (engine_scalarOut_tvalid         ), //i
    .io_dotOut_tdata               (engine_scalarOut_tdata[15:0]    ), //i
    .io_dotOut_tuser               (engine_scalarOut_tuser[5:0]     ), //i
    .io_ropeOut_valid              (attn_io_ropeOut_valid           ), //i
    .io_ropeOut_tdata              (attn_io_ropeOut_tdata[15:0]     ), //i
    .io_ropeOut_tuser              (attn_io_ropeOut_tuser[5:0]      ), //i
    .io_busVecIn_valid             (busIn_io_directOut_valid        ), //i
    .io_busVecIn_tdata             (busIn_io_directOut_tdata[2047:0]), //i
    .io_busVecIn_tuser             (busIn_io_directOut_tuser[5:0]   ), //i
    .io_engineVecIn_valid          (engine_vecOut_tvalid            ), //i
    .io_engineVecIn_tdata          (engine_vecOut_tdata[2047:0]     ), //i
    .io_engineVecIn_tuser          (engine_vecOut_tuser[5:0]        ), //i
    .io_vLocal_valid               (vecOut_io_vLocal_valid          ), //o
    .io_vLocal_tdata               (vecOut_io_vLocal_tdata[2047:0]  ), //o
    .io_vLocal_tuser               (vecOut_io_vLocal_tuser[5:0]     ), //o
    .io_vecOut_valid               (vecOut_io_vecOut_valid          ), //o
    .io_vecOut_ready               (engine_dotIn_tready             ), //i
    .io_vecOut_payload             (vecOut_io_vecOut_payload[2047:0]), //o
    .status_tokenIndexFlow_valid   (tokenIndexPipe_valid            ), //i
    .status_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]       ), //i
    .status_enPredictor            (stateGen_2_status_enPredictor   ), //i
    .clk_1_clk                     (clk_1_clk                       ), //i
    .clk_1_resetn                  (clk_1_resetn                    )  //i
  );
  ResidualBuffer resBuf (
    .serialIn_tvalid    (resAdd_io_toResBuf_valid         ), //i
    .serialIn_tdata     (resAdd_io_toResBuf_payload[15:0] ), //i
    .parallelIn_tvalid  (busIn_io_toResBuf_valid          ), //i
    .parallelIn_tdata   (busIn_io_toResBuf_payload[2047:0]), //i
    .serialOut_tvalid   (resBuf_serialOut_tvalid          ), //o
    .serialOut_tready   (resAdd_io_fromResBuf_ready       ), //i
    .serialOut_tdata    (resBuf_serialOut_tdata[15:0]     ), //o
    .parallelOut_tvalid (resBuf_parallelOut_tvalid        ), //o
    .parallelOut_tready (engine_resAdd_tready             ), //i
    .parallelOut_tdata  (resBuf_parallelOut_tdata[2047:0] ), //o
    .clk_1_clk          (clk_1_clk                        ), //i
    .clk_1_resetn       (clk_1_resetn                     )  //i
  );
  SerialResAdd resAdd (
    .io_dotOut_valid                   (engine_scalarOut_tvalid                       ), //i
    .io_dotOut_tdata                   (engine_scalarOut_tdata[15:0]                  ), //i
    .io_dotOut_tuser                   (engine_scalarOut_tuser[5:0]                   ), //i
    .io_output_valid                   (resAdd_io_output_valid                        ), //o
    .io_output_payload_last            (resAdd_io_output_payload_last                 ), //o
    .io_output_payload_tdata           (resAdd_io_output_payload_tdata[15:0]          ), //o
    .io_output_payload_tuser           (resAdd_io_output_payload_tuser[5:0]           ), //o
    .io_fromAllReduce_valid            (node_allReduceOut_tvalid                      ), //i
    .io_fromAllReduce_tdata            (node_allReduceOut_tdata[15:0]                 ), //i
    .io_fromAllReduce_tuser            (node_allReduceOut_tuser[5:0]                  ), //i
    .io_fromResBuf_valid               (resBuf_serialOut_tvalid                       ), //i
    .io_fromResBuf_ready               (resAdd_io_fromResBuf_ready                    ), //o
    .io_fromResBuf_payload             (resBuf_serialOut_tdata[15:0]                  ), //i
    .io_toResBuf_valid                 (resAdd_io_toResBuf_valid                      ), //o
    .io_toResBuf_payload               (resAdd_io_toResBuf_payload[15:0]              ), //o
    .clk_1_clk                         (clk_1_clk                                     ), //i
    .multiCore2Res_resAddProbe_valid   (resAdd_multiCore2Res_resAddProbe_valid        ), //o
    .multiCore2Res_resAddProbe_payload (resAdd_multiCore2Res_resAddProbe_payload[15:0]), //o
    .clk_1_resetn                      (clk_1_resetn                                  )  //i
  );
  MulAddSGNew engine (
    .wkvIn_tvalid     (busIn_io_wkv_valid               ), //i
    .wkvIn_tready     (engine_wkvIn_tready              ), //o
    .wkvIn_tdata      (busIn_io_wkv_payload[2047:0]     ), //i
    .dotIn_tvalid     (vecOut_io_vecOut_valid           ), //i
    .dotIn_tready     (engine_dotIn_tready              ), //o
    .dotIn_tdata      (vecOut_io_vecOut_payload[2047:0] ), //i
    .resAdd_tvalid    (resBuf_parallelOut_tvalid        ), //i
    .resAdd_tready    (engine_resAdd_tready             ), //o
    .resAdd_tdata     (resBuf_parallelOut_tdata[2047:0] ), //i
    .axpyIn_tvalid    (sOut_io_scalarOut_valid          ), //i
    .axpyIn_tready    (engine_axpyIn_tready             ), //o
    .axpyIn_tdata     (sOut_io_scalarOut_payload[15:0]  ), //i
    .preScale_tvalid  (axi_int_preScale_valid           ), //i
    .preScale_tready  (engine_preScale_tready           ), //o
    .preScale_tdata   (axi_int_preScale_payload[15:0]   ), //i
    .postScale_tvalid (axi_int_postScale_valid          ), //i
    .postScale_tready (engine_postScale_tready          ), //o
    .postScale_tdata  (axi_int_postScale_payload[31:0]  ), //i
    .vecOut_tvalid    (engine_vecOut_tvalid             ), //o
    .vecOut_tdata     (engine_vecOut_tdata[2047:0]      ), //o
    .vecOut_tuser     (engine_vecOut_tuser[5:0]         ), //o
    .scalarOut_tvalid (engine_scalarOut_tvalid          ), //o
    .scalarOut_tdata  (engine_scalarOut_tdata[15:0]     ), //o
    .scalarOut_tuser  (engine_scalarOut_tuser[5:0]      ), //o
    .cfg_tvalid       (cfgInsert_io_cfgOut_valid        ), //i
    .cfg_tready       (engine_cfg_tready                ), //o
    .cfg_tdata        (cfgInsert_io_cfgOut_payload[31:0]), //i
    .preCfgTag        (engine_preCfgTag[5:0]            ), //o
    .postCfgTag       (engine_postCfgTag[5:0]           ), //o
    .clk_1_clk        (clk_1_clk                        ), //i
    .clk_1_resetn     (clk_1_resetn                     )  //i
  );
  AllGatherSubModNew node (
    .dotOut_valid              (engine_scalarOut_tvalid                 ), //i
    .dotOut_tdata              (engine_scalarOut_tdata[15:0]            ), //i
    .dotOut_tuser              (engine_scalarOut_tuser[5:0]             ), //i
    .resOut_valid              (resAdd_io_output_valid                  ), //i
    .resOut_payload_last       (resAdd_io_output_payload_last           ), //i
    .resOut_payload_tdata      (resAdd_io_output_payload_tdata[15:0]    ), //i
    .resOut_payload_tuser      (resAdd_io_output_payload_tuser[5:0]     ), //i
    .p2sOut_valid              (busIn_io_p2sOut_valid                   ), //i
    .p2sOut_payload_last       (busIn_io_p2sOut_payload_last            ), //i
    .p2sOut_payload_tdata      (busIn_io_p2sOut_payload_tdata[15:0]     ), //i
    .p2sOut_payload_tuser      (busIn_io_p2sOut_payload_tuser[5:0]      ), //i
    .allGatherOut_tvalid       (node_allGatherOut_tvalid                ), //o
    .allGatherOut_tdata        (node_allGatherOut_tdata[15:0]           ), //o
    .allGatherOut_tuser        (node_allGatherOut_tuser[5:0]            ), //o
    .allReduceOut_tvalid       (node_allReduceOut_tvalid                ), //o
    .allReduceOut_tdata        (node_allReduceOut_tdata[15:0]           ), //o
    .allReduceOut_tuser        (node_allReduceOut_tuser[5:0]            ), //o
    .indexIn_valid             (sOut_io_zfIndexOut_valid                ), //i
    .indexIn_payload_last      (sOut_io_zfIndexOut_payload_last         ), //i
    .indexIn_payload_tdata     (sOut_io_zfIndexOut_payload_tdata[15:0]  ), //i
    .indexIn_payload_tuser     (sOut_io_zfIndexOut_payload_tuser[5:0]   ), //i
    .gateIndexIn_valid         (sOut_io_gateIndexOut_valid              ), //i
    .gateIndexIn_payload_last  (sOut_io_gateIndexOut_payload_last       ), //i
    .gateIndexIn_payload_tdata (sOut_io_gateIndexOut_payload_tdata[15:0]), //i
    .gateIndexIn_payload_tuser (sOut_io_gateIndexOut_payload_tuser[5:0] ), //i
    .ugIndexIn_valid           (sOut_io_ugIndexOut_valid                ), //i
    .ugIndexIn_payload_last    (sOut_io_ugIndexOut_payload_last         ), //i
    .ugIndexIn_payload_tdata   (sOut_io_ugIndexOut_payload_tdata[15:0]  ), //i
    .ugIndexIn_payload_tuser   (sOut_io_ugIndexOut_payload_tuser[5:0]   ), //i
    .indexOut_tvalid           (node_indexOut_tvalid                    ), //o
    .indexOut_tlast            (node_indexOut_tlast                     ), //o
    .indexOut_tdata            (node_indexOut_tdata[15:0]               ), //o
    .indexOut_tuser            (node_indexOut_tuser[5:0]                ), //o
    .c2c_from_valid            (c2c_from_valid                          ), //i
    .c2c_from_ready            (node_c2c_from_ready                     ), //o
    .c2c_from_payload_last     (c2c_from_payload_last                   ), //i
    .c2c_from_payload_tdata    (c2c_from_payload_tdata[15:0]            ), //i
    .c2c_from_payload_tuser    (c2c_from_payload_tuser[5:0]             ), //i
    .c2c_from_payload_tdest    (c2c_from_payload_tdest                  ), //i
    .c2c_to_valid              (node_c2c_to_valid                       ), //o
    .c2c_to_payload_last       (node_c2c_to_payload_last                ), //o
    .c2c_to_payload_tdata      (node_c2c_to_payload_tdata[15:0]         ), //o
    .c2c_to_payload_tuser      (node_c2c_to_payload_tuser[5:0]          ), //o
    .c2c_to_payload_tdest      (node_c2c_to_payload_tdest               ), //o
    .clk_1_resetn              (clk_1_resetn                            ), //i
    .clk_1_clk                 (clk_1_clk                               )  //i
  );
  InsertCfg cfgInsert (
    .io_cfgIn_valid         (cfgGen_io_cfg_valid              ), //i
    .io_cfgIn_ready         (cfgInsert_io_cfgIn_ready         ), //o
    .io_cfgIn_payload       (cfgGen_io_cfg_payload[31:0]      ), //i
    .io_cfgOut_valid        (cfgInsert_io_cfgOut_valid        ), //o
    .io_cfgOut_ready        (engine_cfg_tready                ), //i
    .io_cfgOut_payload      (cfgInsert_io_cfgOut_payload[31:0]), //o
    .io_gtCnt_valid         (cfgInsert_io_gtCnt_valid         ), //o
    .io_gtCnt_payload       (cfgInsert_io_gtCnt_payload[15:0] ), //o
    .io_index_valid         (node_indexOut_tvalid             ), //i
    .io_index_payload_last  (node_indexOut_tlast              ), //i
    .io_index_payload_tdata (node_indexOut_tdata[15:0]        ), //i
    .io_index_payload_tuser (node_indexOut_tuser[5:0]         ), //i
    .status_enPredictor     (stateGen_2_status_enPredictor    ), //i
    .clk_1_clk              (clk_1_clk                        ), //i
    .clk_1_resetn           (clk_1_resetn                     )  //i
  );
  GreedySampler sample (
    .logits_valid  (node_allReduceOut_tvalid     ), //i
    .logits_tdata  (node_allReduceOut_tdata[15:0]), //i
    .logits_tuser  (node_allReduceOut_tuser[5:0] ), //i
    .argmax_tvalid (sample_argmax_tvalid         ), //o
    .argmax_tdata  (sample_argmax_tdata[15:0]    ), //o
    .endOfDecode   (sample_endOfDecode           ), //o
    .clk_1_clk     (clk_1_clk                    ), //i
    .clk_1_resetn  (clk_1_resetn                 )  //i
  );
  SiluFp32 siluAct (
    .io_in_valid    (sOut_silu_to_valid          ), //i
    .io_in_payload  (sOut_silu_to_payload[15:0]  ), //i
    .io_out_valid   (siluAct_io_out_valid        ), //o
    .io_out_payload (siluAct_io_out_payload[15:0]), //o
    .clk_1_clk      (clk_1_clk                   ), //i
    .clk_1_resetn   (clk_1_resetn                )  //i
  );
  KvScaleZeroPacker szPacker (
    .io_qScale_valid           (attn_io_quantScale_valid                 ), //i
    .io_qScale_payload         (attn_io_quantScale_payload[15:0]         ), //i
    .io_qZero_valid            (attn_io_quantZero_valid                  ), //i
    .io_qZero_payload          (attn_io_quantZero_payload[7:0]           ), //i
    .io_qOut_valid             (attn_io_afterQuant_valid                 ), //i
    .io_qOut_payload_last      (attn_io_afterQuant_payload_last          ), //i
    .io_qOut_payload_fragment  (attn_io_afterQuant_payload_fragment[7:0] ), //i
    .io_kvBus_valid            (szPacker_io_kvBus_valid                  ), //o
    .io_kvBus_ready            (cmdGen_local_kvBus_ready                 ), //i
    .io_kvBus_payload_last     (szPacker_io_kvBus_payload_last           ), //o
    .io_kvBus_payload_fragment (szPacker_io_kvBus_payload_fragment[511:0]), //o
    .io_kSzOut_valid           (szPacker_io_kSzOut_valid                 ), //o
    .io_kSzOut_ready           (axi_io_kSzOut_ready                      ), //i
    .io_kSzOut_payload         (szPacker_io_kSzOut_payload[31:0]         ), //o
    .io_vSzOut_valid           (szPacker_io_vSzOut_valid                 ), //o
    .io_vSzOut_ready           (axi_io_vSzOut_ready                      ), //i
    .io_vSzOut_payload         (szPacker_io_vSzOut_payload[31:0]         ), //o
    .io_nextLayer              (stateGen_2_status_nextLayer              ), //i
    .io_tokenIndexFlow_valid   (tokenIndexPipe_valid                     ), //i
    .io_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]                ), //i
    .clk_1_clk                 (clk_1_clk                                ), //i
    .clk_1_resetn              (clk_1_resetn                             )  //i
  );
  GenCfg cfgGen (
    .io_cfg_valid                  (cfgGen_io_cfg_valid          ), //o
    .io_cfg_ready                  (cfgInsert_io_cfgIn_ready     ), //i
    .io_cfg_payload                (cfgGen_io_cfg_payload[31:0]  ), //o
    .status_tokenIndexFlow_valid   (tokenIndexPipe_valid         ), //i
    .status_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]    ), //i
    .status_enPredictor            (stateGen_2_status_enPredictor), //i
    .clk_1_clk                     (clk_1_clk                    ), //i
    .clk_1_resetn                  (clk_1_resetn                 )  //i
  );
  StateGen stateGen_2 (
    .io_busIn_valid            (coreArea_1_core_axi_int_bus_fire  ), //i
    .io_busIn_payload_last     (axi_int_bus_payload_last          ), //i
    .io_busIn_payload_fragment (axi_int_bus_payload_tuser[5:0]    ), //i
    .io_engineOut_valid        (engine_vecOut_tvalid              ), //i
    .io_engineOut_payload      (engine_vecOut_tuser[5:0]          ), //i
    .io_dotOut_valid           (engine_scalarOut_tvalid           ), //i
    .io_dotOut_payload         (engine_scalarOut_tuser[5:0]       ), //i
    .io_gtCnt_valid            (cfgInsert_io_gtCnt_valid          ), //i
    .io_gtCnt_payload          (cfgInsert_io_gtCnt_payload[15:0]  ), //i
    .io_tokenIndexFlow_valid   (tokenIndexPipe_valid              ), //i
    .io_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]         ), //i
    .status_argmaxVld          (sample_argmax_tvalid              ), //i
    .status_endOfDecode        (sample_endOfDecode                ), //i
    .status_enPredictor        (stateGen_2_status_enPredictor     ), //o
    .status_enProSparse        (stateGen_2_status_enProSparse     ), //o
    .status_tokenNextHit       (stateGen_2_status_tokenNextHit    ), //o
    .status_mlpNextHit         (stateGen_2_status_mlpNextHit      ), //o
    .status_vNextHit           (stateGen_2_status_vNextHit        ), //o
    .status_prefill            (stateGen_2_status_prefill         ), //o
    .status_flushRes           (stateGen_2_status_flushRes        ), //o
    .status_nextLayer          (stateGen_2_status_nextLayer       ), //o
    .status_nonZeroCnt         (stateGen_2_status_nonZeroCnt[15:0]), //o
    .status_logitsGen          (stateGen_2_status_logitsGen       ), //o
    .status_toLogitsGen        (stateGen_2_status_toLogitsGen     ), //o
    .status_token              (stateGen_2_status_token[9:0]      ), //o
    .status_layerCnt           (stateGen_2_status_layerCnt[4:0]   ), //o
    .clk_1_clk                 (clk_1_clk                         ), //i
    .clk_1_resetn              (clk_1_resetn                      )  //i
  );
  assign tokenIndex_ready = 1'b1;
  assign m_axi_ar_valid = dmaMig_m_axi_mm2s_arvalid;
  assign m_axi_ar_payload_addr = dmaMig_m_axi_mm2s_araddr;
  assign m_axi_ar_payload_id = dmaMig_m_axi_mm2s_arid;
  assign m_axi_ar_payload_len = dmaMig_m_axi_mm2s_arlen;
  assign m_axi_ar_payload_size = dmaMig_m_axi_mm2s_arsize;
  assign m_axi_ar_payload_burst = dmaMig_m_axi_mm2s_arburst;
  assign m_axi_ar_payload_cache = dmaMig_m_axi_mm2s_arcache;
  assign m_axi_ar_payload_user = dmaMig_m_axi_mm2s_aruser;
  assign m_axi_ar_payload_prot = dmaMig_m_axi_mm2s_arprot;
  assign m_axi_aw_valid = dmaMig_m_axi_s2mm_awvalid;
  assign m_axi_aw_payload_addr = dmaMig_m_axi_s2mm_awaddr;
  assign m_axi_aw_payload_id = dmaMig_m_axi_s2mm_awid;
  assign m_axi_aw_payload_len = dmaMig_m_axi_s2mm_awlen;
  assign m_axi_aw_payload_size = dmaMig_m_axi_s2mm_awsize;
  assign m_axi_aw_payload_burst = dmaMig_m_axi_s2mm_awburst;
  assign m_axi_aw_payload_cache = dmaMig_m_axi_s2mm_awcache;
  assign m_axi_aw_payload_user = dmaMig_m_axi_s2mm_awuser;
  assign m_axi_aw_payload_prot = dmaMig_m_axi_s2mm_awprot;
  assign m_axi_w_valid = dmaMig_m_axi_s2mm_wvalid;
  assign m_axi_w_payload_data = dmaMig_m_axi_s2mm_wdata;
  assign m_axi_w_payload_strb = dmaMig_m_axi_s2mm_wstrb;
  assign m_axi_w_payload_last = dmaMig_m_axi_s2mm_wlast;
  assign m_axi_r_ready = dmaMig_m_axi_mm2s_rready;
  assign m_axi_b_ready = dmaMig_m_axi_s2mm_bready;
  assign t_io_bus_payload_keep[63 : 0] = 64'hffffffffffffffff;
  assign c2c_to_valid = node_c2c_to_valid;
  assign c2c_to_payload_last = node_c2c_to_payload_last;
  assign c2c_to_payload_tdata = node_c2c_to_payload_tdata;
  assign c2c_to_payload_tuser = node_c2c_to_payload_tuser;
  assign c2c_to_payload_tdest = node_c2c_to_payload_tdest;
  assign c2c_from_ready = node_c2c_from_ready;
  assign t_io_p2sOut_valid = 23'h0;
  assign sOut_io_p2sOut_valid = t_io_p2sOut_valid[0];
  assign t_io_p2sOut_tdata = t_io_p2sOut_valid[22 : 1];
  assign sOut_io_p2sOut_tdata = t_io_p2sOut_tdata[15 : 0];
  assign sOut_io_p2sOut_tuser = t_io_p2sOut_tdata[21 : 16];
  assign coreArea_1_core_axi_int_bus_fire = (axi_int_bus_valid && busIn_io_bus_ready);
  assign toAxiLite_tokenCnt = {6'd0, t_toAxiLite_tokenCnt};
  assign toAxiLite_argMaxVld = sample_argmax_tvalid;
  assign toAxiLite_argMaxIndex = sample_argmax_tdata;
  assign toAxiLite_prefill = stateGen_2_status_prefill;
  assign toAxiLite_layerCnt = {3'd0, t_toAxiLite_layerCnt};
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      tokenIndexPipe_valid <= 1'b0;
    end else begin
      tokenIndexPipe_valid <= tokenIndex_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    tokenIndexPipe_tdata <= tokenIndex_tdata;
    tokenIndexPipe_tuser <= tokenIndex_tuser;
  end


endmodule

module DataPath (
  input  wire          c2c_from_valid,
  output wire          c2c_from_ready,
  input  wire          c2c_from_payload_last,
  input  wire [15:0]   c2c_from_payload_tdata,
  input  wire [5:0]    c2c_from_payload_tuser,
  input  wire [0:0]    c2c_from_payload_tdest,
  output wire          c2c_to_valid,
  output wire          c2c_to_payload_last,
  output wire [15:0]   c2c_to_payload_tdata,
  output wire [5:0]    c2c_to_payload_tuser,
  output wire [0:0]    c2c_to_payload_tdest,
  output wire [15:0]   toAxiLite_tokenCnt,
  output wire          toAxiLite_argMaxVld,
  output wire [15:0]   toAxiLite_argMaxIndex,
  output wire          toAxiLite_prefill,
  output wire [7:0]    toAxiLite_layerCnt,
  input  wire          tokenIndex_valid,
  output wire          tokenIndex_ready,
  input  wire [15:0]   tokenIndex_tdata,
  input  wire [5:0]    tokenIndex_tuser,
  output wire          m_axi_hp_0_aw_valid,
  input  wire          m_axi_hp_0_aw_ready,
  output wire [31:0]   m_axi_hp_0_aw_payload_addr,
  output wire [3:0]    m_axi_hp_0_aw_payload_id,
  output wire [7:0]    m_axi_hp_0_aw_payload_len,
  output wire [2:0]    m_axi_hp_0_aw_payload_size,
  output wire [1:0]    m_axi_hp_0_aw_payload_burst,
  output wire [3:0]    m_axi_hp_0_aw_payload_cache,
  output wire [3:0]    m_axi_hp_0_aw_payload_user,
  output wire [2:0]    m_axi_hp_0_aw_payload_prot,
  output wire          m_axi_hp_0_w_valid,
  input  wire          m_axi_hp_0_w_ready,
  output wire [127:0]  m_axi_hp_0_w_payload_data,
  output wire [15:0]   m_axi_hp_0_w_payload_strb,
  output wire          m_axi_hp_0_w_payload_last,
  input  wire          m_axi_hp_0_b_valid,
  output wire          m_axi_hp_0_b_ready,
  input  wire [3:0]    m_axi_hp_0_b_payload_id,
  input  wire [1:0]    m_axi_hp_0_b_payload_resp,
  output wire          m_axi_hp_0_ar_valid,
  input  wire          m_axi_hp_0_ar_ready,
  output wire [31:0]   m_axi_hp_0_ar_payload_addr,
  output wire [3:0]    m_axi_hp_0_ar_payload_id,
  output wire [7:0]    m_axi_hp_0_ar_payload_len,
  output wire [2:0]    m_axi_hp_0_ar_payload_size,
  output wire [1:0]    m_axi_hp_0_ar_payload_burst,
  output wire [3:0]    m_axi_hp_0_ar_payload_cache,
  output wire [3:0]    m_axi_hp_0_ar_payload_user,
  output wire [2:0]    m_axi_hp_0_ar_payload_prot,
  input  wire          m_axi_hp_0_r_valid,
  output wire          m_axi_hp_0_r_ready,
  input  wire [127:0]  m_axi_hp_0_r_payload_data,
  input  wire [3:0]    m_axi_hp_0_r_payload_id,
  input  wire [1:0]    m_axi_hp_0_r_payload_resp,
  input  wire          m_axi_hp_0_r_payload_last,
  output wire          m_axi_hp_1_aw_valid,
  input  wire          m_axi_hp_1_aw_ready,
  output wire [31:0]   m_axi_hp_1_aw_payload_addr,
  output wire [3:0]    m_axi_hp_1_aw_payload_id,
  output wire [7:0]    m_axi_hp_1_aw_payload_len,
  output wire [2:0]    m_axi_hp_1_aw_payload_size,
  output wire [1:0]    m_axi_hp_1_aw_payload_burst,
  output wire [3:0]    m_axi_hp_1_aw_payload_cache,
  output wire [3:0]    m_axi_hp_1_aw_payload_user,
  output wire [2:0]    m_axi_hp_1_aw_payload_prot,
  output wire          m_axi_hp_1_w_valid,
  input  wire          m_axi_hp_1_w_ready,
  output wire [127:0]  m_axi_hp_1_w_payload_data,
  output wire [15:0]   m_axi_hp_1_w_payload_strb,
  output wire          m_axi_hp_1_w_payload_last,
  input  wire          m_axi_hp_1_b_valid,
  output wire          m_axi_hp_1_b_ready,
  input  wire [3:0]    m_axi_hp_1_b_payload_id,
  input  wire [1:0]    m_axi_hp_1_b_payload_resp,
  output wire          m_axi_hp_1_ar_valid,
  input  wire          m_axi_hp_1_ar_ready,
  output wire [31:0]   m_axi_hp_1_ar_payload_addr,
  output wire [3:0]    m_axi_hp_1_ar_payload_id,
  output wire [7:0]    m_axi_hp_1_ar_payload_len,
  output wire [2:0]    m_axi_hp_1_ar_payload_size,
  output wire [1:0]    m_axi_hp_1_ar_payload_burst,
  output wire [3:0]    m_axi_hp_1_ar_payload_cache,
  output wire [3:0]    m_axi_hp_1_ar_payload_user,
  output wire [2:0]    m_axi_hp_1_ar_payload_prot,
  input  wire          m_axi_hp_1_r_valid,
  output wire          m_axi_hp_1_r_ready,
  input  wire [127:0]  m_axi_hp_1_r_payload_data,
  input  wire [3:0]    m_axi_hp_1_r_payload_id,
  input  wire [1:0]    m_axi_hp_1_r_payload_resp,
  input  wire          m_axi_hp_1_r_payload_last,
  output wire          m_axi_hp_2_aw_valid,
  input  wire          m_axi_hp_2_aw_ready,
  output wire [31:0]   m_axi_hp_2_aw_payload_addr,
  output wire [3:0]    m_axi_hp_2_aw_payload_id,
  output wire [7:0]    m_axi_hp_2_aw_payload_len,
  output wire [2:0]    m_axi_hp_2_aw_payload_size,
  output wire [1:0]    m_axi_hp_2_aw_payload_burst,
  output wire [3:0]    m_axi_hp_2_aw_payload_cache,
  output wire [3:0]    m_axi_hp_2_aw_payload_user,
  output wire [2:0]    m_axi_hp_2_aw_payload_prot,
  output wire          m_axi_hp_2_w_valid,
  input  wire          m_axi_hp_2_w_ready,
  output wire [127:0]  m_axi_hp_2_w_payload_data,
  output wire [15:0]   m_axi_hp_2_w_payload_strb,
  output wire          m_axi_hp_2_w_payload_last,
  input  wire          m_axi_hp_2_b_valid,
  output wire          m_axi_hp_2_b_ready,
  input  wire [3:0]    m_axi_hp_2_b_payload_id,
  input  wire [1:0]    m_axi_hp_2_b_payload_resp,
  output wire          m_axi_hp_2_ar_valid,
  input  wire          m_axi_hp_2_ar_ready,
  output wire [31:0]   m_axi_hp_2_ar_payload_addr,
  output wire [3:0]    m_axi_hp_2_ar_payload_id,
  output wire [7:0]    m_axi_hp_2_ar_payload_len,
  output wire [2:0]    m_axi_hp_2_ar_payload_size,
  output wire [1:0]    m_axi_hp_2_ar_payload_burst,
  output wire [3:0]    m_axi_hp_2_ar_payload_cache,
  output wire [3:0]    m_axi_hp_2_ar_payload_user,
  output wire [2:0]    m_axi_hp_2_ar_payload_prot,
  input  wire          m_axi_hp_2_r_valid,
  output wire          m_axi_hp_2_r_ready,
  input  wire [127:0]  m_axi_hp_2_r_payload_data,
  input  wire [3:0]    m_axi_hp_2_r_payload_id,
  input  wire [1:0]    m_axi_hp_2_r_payload_resp,
  input  wire          m_axi_hp_2_r_payload_last,
  output wire          m_axi_hp_3_aw_valid,
  input  wire          m_axi_hp_3_aw_ready,
  output wire [31:0]   m_axi_hp_3_aw_payload_addr,
  output wire [3:0]    m_axi_hp_3_aw_payload_id,
  output wire [7:0]    m_axi_hp_3_aw_payload_len,
  output wire [2:0]    m_axi_hp_3_aw_payload_size,
  output wire [1:0]    m_axi_hp_3_aw_payload_burst,
  output wire [3:0]    m_axi_hp_3_aw_payload_cache,
  output wire [3:0]    m_axi_hp_3_aw_payload_user,
  output wire [2:0]    m_axi_hp_3_aw_payload_prot,
  output wire          m_axi_hp_3_w_valid,
  input  wire          m_axi_hp_3_w_ready,
  output wire [127:0]  m_axi_hp_3_w_payload_data,
  output wire [15:0]   m_axi_hp_3_w_payload_strb,
  output wire          m_axi_hp_3_w_payload_last,
  input  wire          m_axi_hp_3_b_valid,
  output wire          m_axi_hp_3_b_ready,
  input  wire [3:0]    m_axi_hp_3_b_payload_id,
  input  wire [1:0]    m_axi_hp_3_b_payload_resp,
  output wire          m_axi_hp_3_ar_valid,
  input  wire          m_axi_hp_3_ar_ready,
  output wire [31:0]   m_axi_hp_3_ar_payload_addr,
  output wire [3:0]    m_axi_hp_3_ar_payload_id,
  output wire [7:0]    m_axi_hp_3_ar_payload_len,
  output wire [2:0]    m_axi_hp_3_ar_payload_size,
  output wire [1:0]    m_axi_hp_3_ar_payload_burst,
  output wire [3:0]    m_axi_hp_3_ar_payload_cache,
  output wire [3:0]    m_axi_hp_3_ar_payload_user,
  output wire [2:0]    m_axi_hp_3_ar_payload_prot,
  input  wire          m_axi_hp_3_r_valid,
  output wire          m_axi_hp_3_r_ready,
  input  wire [127:0]  m_axi_hp_3_r_payload_data,
  input  wire [3:0]    m_axi_hp_3_r_payload_id,
  input  wire [1:0]    m_axi_hp_3_r_payload_resp,
  input  wire          m_axi_hp_3_r_payload_last,
  input  wire          aresetn,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                dmaHp_ctrl_aw_valid;
  wire       [31:0]   dmaHp_ctrl_aw_payload_addr;
  wire       [2:0]    dmaHp_ctrl_aw_payload_prot;
  wire                dmaHp_ctrl_w_valid;
  wire       [31:0]   dmaHp_ctrl_w_payload_data;
  wire       [3:0]    dmaHp_ctrl_w_payload_strb;
  wire                dmaHp_ctrl_b_ready;
  wire                dmaHp_ctrl_ar_valid;
  wire       [31:0]   dmaHp_ctrl_ar_payload_addr;
  wire       [2:0]    dmaHp_ctrl_ar_payload_prot;
  wire                dmaHp_ctrl_r_ready;
  wire                attn_exp_from_valid;
  wire       [15:0]   attn_exp_from_payload;
  wire                sOut_io_p2sOut_valid;
  wire       [15:0]   sOut_io_p2sOut_tdata;
  wire       [5:0]    sOut_io_p2sOut_tuser;
  wire                cmdGen_io_tokenIndex_ready;
  wire                cmdGen_io_mm2s_ready;
  wire                cmdGen_io_s2mm_valid;
  wire       [511:0]  cmdGen_io_s2mm_payload_data;
  wire       [63:0]   cmdGen_io_s2mm_payload_keep;
  wire                cmdGen_io_s2mm_payload_last;
  wire                cmdGen_io_mm2sCmd_valid;
  wire       [71:0]   cmdGen_io_mm2sCmd_payload;
  wire                cmdGen_io_s2mmCmd_valid;
  wire       [71:0]   cmdGen_io_s2mmCmd_payload;
  wire                cmdGen_local_bus_valid;
  wire       [511:0]  cmdGen_local_bus_payload_data;
  wire                cmdGen_local_bus_payload_last;
  wire       [5:0]    cmdGen_local_bus_payload_dest;
  wire                cmdGen_local_kvBus_ready;
  wire                tokenIndexFifo_io_push_ready;
  wire                tokenIndexFifo_io_pop_valid;
  wire       [15:0]   tokenIndexFifo_io_pop_tdata;
  wire       [5:0]    tokenIndexFifo_io_pop_tuser;
  wire       [6:0]    tokenIndexFifo_io_occupancy;
  wire       [6:0]    tokenIndexFifo_io_availability;
  wire                dmaHp_s2mm_tready;
  wire                dmaHp_mm2s_tvalid;
  wire       [511:0]  dmaHp_mm2s_tdata;
  wire       [63:0]   dmaHp_mm2s_tkeep;
  wire                dmaHp_mm2s_tlast;
  wire                dmaHp_s2mmCmd_tready;
  wire                dmaHp_mm2sCmd_tready;
  wire                dmaHp_m_axi_0_arvalid;
  wire       [31:0]   dmaHp_m_axi_0_araddr;
  wire       [3:0]    dmaHp_m_axi_0_arid;
  wire       [7:0]    dmaHp_m_axi_0_arlen;
  wire       [2:0]    dmaHp_m_axi_0_arsize;
  wire       [1:0]    dmaHp_m_axi_0_arburst;
  wire       [3:0]    dmaHp_m_axi_0_arcache;
  wire       [3:0]    dmaHp_m_axi_0_aruser;
  wire       [2:0]    dmaHp_m_axi_0_arprot;
  wire                dmaHp_m_axi_0_awvalid;
  wire       [31:0]   dmaHp_m_axi_0_awaddr;
  wire       [3:0]    dmaHp_m_axi_0_awid;
  wire       [7:0]    dmaHp_m_axi_0_awlen;
  wire       [2:0]    dmaHp_m_axi_0_awsize;
  wire       [1:0]    dmaHp_m_axi_0_awburst;
  wire       [3:0]    dmaHp_m_axi_0_awcache;
  wire       [3:0]    dmaHp_m_axi_0_awuser;
  wire       [2:0]    dmaHp_m_axi_0_awprot;
  wire                dmaHp_m_axi_0_wvalid;
  wire       [127:0]  dmaHp_m_axi_0_wdata;
  wire       [15:0]   dmaHp_m_axi_0_wstrb;
  wire                dmaHp_m_axi_0_wlast;
  wire                dmaHp_m_axi_0_rready;
  wire                dmaHp_m_axi_0_bready;
  wire                dmaHp_m_axi_1_arvalid;
  wire       [31:0]   dmaHp_m_axi_1_araddr;
  wire       [3:0]    dmaHp_m_axi_1_arid;
  wire       [7:0]    dmaHp_m_axi_1_arlen;
  wire       [2:0]    dmaHp_m_axi_1_arsize;
  wire       [1:0]    dmaHp_m_axi_1_arburst;
  wire       [3:0]    dmaHp_m_axi_1_arcache;
  wire       [3:0]    dmaHp_m_axi_1_aruser;
  wire       [2:0]    dmaHp_m_axi_1_arprot;
  wire                dmaHp_m_axi_1_awvalid;
  wire       [31:0]   dmaHp_m_axi_1_awaddr;
  wire       [3:0]    dmaHp_m_axi_1_awid;
  wire       [7:0]    dmaHp_m_axi_1_awlen;
  wire       [2:0]    dmaHp_m_axi_1_awsize;
  wire       [1:0]    dmaHp_m_axi_1_awburst;
  wire       [3:0]    dmaHp_m_axi_1_awcache;
  wire       [3:0]    dmaHp_m_axi_1_awuser;
  wire       [2:0]    dmaHp_m_axi_1_awprot;
  wire                dmaHp_m_axi_1_wvalid;
  wire       [127:0]  dmaHp_m_axi_1_wdata;
  wire       [15:0]   dmaHp_m_axi_1_wstrb;
  wire                dmaHp_m_axi_1_wlast;
  wire                dmaHp_m_axi_1_rready;
  wire                dmaHp_m_axi_1_bready;
  wire                dmaHp_m_axi_2_arvalid;
  wire       [31:0]   dmaHp_m_axi_2_araddr;
  wire       [3:0]    dmaHp_m_axi_2_arid;
  wire       [7:0]    dmaHp_m_axi_2_arlen;
  wire       [2:0]    dmaHp_m_axi_2_arsize;
  wire       [1:0]    dmaHp_m_axi_2_arburst;
  wire       [3:0]    dmaHp_m_axi_2_arcache;
  wire       [3:0]    dmaHp_m_axi_2_aruser;
  wire       [2:0]    dmaHp_m_axi_2_arprot;
  wire                dmaHp_m_axi_2_awvalid;
  wire       [31:0]   dmaHp_m_axi_2_awaddr;
  wire       [3:0]    dmaHp_m_axi_2_awid;
  wire       [7:0]    dmaHp_m_axi_2_awlen;
  wire       [2:0]    dmaHp_m_axi_2_awsize;
  wire       [1:0]    dmaHp_m_axi_2_awburst;
  wire       [3:0]    dmaHp_m_axi_2_awcache;
  wire       [3:0]    dmaHp_m_axi_2_awuser;
  wire       [2:0]    dmaHp_m_axi_2_awprot;
  wire                dmaHp_m_axi_2_wvalid;
  wire       [127:0]  dmaHp_m_axi_2_wdata;
  wire       [15:0]   dmaHp_m_axi_2_wstrb;
  wire                dmaHp_m_axi_2_wlast;
  wire                dmaHp_m_axi_2_rready;
  wire                dmaHp_m_axi_2_bready;
  wire                dmaHp_m_axi_3_arvalid;
  wire       [31:0]   dmaHp_m_axi_3_araddr;
  wire       [3:0]    dmaHp_m_axi_3_arid;
  wire       [7:0]    dmaHp_m_axi_3_arlen;
  wire       [2:0]    dmaHp_m_axi_3_arsize;
  wire       [1:0]    dmaHp_m_axi_3_arburst;
  wire       [3:0]    dmaHp_m_axi_3_arcache;
  wire       [3:0]    dmaHp_m_axi_3_aruser;
  wire       [2:0]    dmaHp_m_axi_3_arprot;
  wire                dmaHp_m_axi_3_awvalid;
  wire       [31:0]   dmaHp_m_axi_3_awaddr;
  wire       [3:0]    dmaHp_m_axi_3_awid;
  wire       [7:0]    dmaHp_m_axi_3_awlen;
  wire       [2:0]    dmaHp_m_axi_3_awsize;
  wire       [1:0]    dmaHp_m_axi_3_awburst;
  wire       [3:0]    dmaHp_m_axi_3_awcache;
  wire       [3:0]    dmaHp_m_axi_3_awuser;
  wire       [2:0]    dmaHp_m_axi_3_awprot;
  wire                dmaHp_m_axi_3_wvalid;
  wire       [127:0]  dmaHp_m_axi_3_wdata;
  wire       [15:0]   dmaHp_m_axi_3_wstrb;
  wire                dmaHp_m_axi_3_wlast;
  wire                dmaHp_m_axi_3_rready;
  wire                dmaHp_m_axi_3_bready;
  wire                dmaHp_ctrl_aw_ready;
  wire                dmaHp_ctrl_w_ready;
  wire                dmaHp_ctrl_b_valid;
  wire       [1:0]    dmaHp_ctrl_b_payload_resp;
  wire                dmaHp_ctrl_ar_ready;
  wire                dmaHp_ctrl_r_valid;
  wire       [31:0]   dmaHp_ctrl_r_payload_data;
  wire       [1:0]    dmaHp_ctrl_r_payload_resp;
  wire                axi_io_bus_ready;
  wire                axi_io_kSzOut_ready;
  wire                axi_io_vSzOut_ready;
  wire                axi_int_bus_valid;
  wire                axi_int_bus_payload_last;
  wire       [511:0]  axi_int_bus_payload_tdata;
  wire       [5:0]    axi_int_bus_payload_tuser;
  wire                axi_int_lnScale_valid;
  wire       [15:0]   axi_int_lnScale_payload;
  wire                axi_int_zeroInt4_valid;
  wire       [7:0]    axi_int_zeroInt4_payload;
  wire                axi_int_zeroInt8_valid;
  wire       [7:0]    axi_int_zeroInt8_payload;
  wire                axi_int_preScale_valid;
  wire       [15:0]   axi_int_preScale_payload;
  wire                axi_int_postScale_valid;
  wire       [31:0]   axi_int_postScale_payload;
  wire                attn_io_ropeOut_valid;
  wire       [15:0]   attn_io_ropeOut_tdata;
  wire       [5:0]    attn_io_ropeOut_tuser;
  wire                attn_io_softmaxOut_valid;
  wire                attn_io_softmaxOut_payload_last;
  wire       [15:0]   attn_io_softmaxOut_payload_tdata;
  wire       [5:0]    attn_io_softmaxOut_payload_tuser;
  wire                attn_io_quantZero_valid;
  wire       [7:0]    attn_io_quantZero_payload;
  wire                attn_io_quantScale_valid;
  wire       [15:0]   attn_io_quantScale_payload;
  wire                attn_io_afterQuant_valid;
  wire                attn_io_afterQuant_payload_last;
  wire       [7:0]    attn_io_afterQuant_payload_fragment;
  wire                attn_exp_to_valid;
  wire       [15:0]   attn_exp_to_payload;
  wire                ln_io_lnScale_ready;
  wire                ln_io_lnOut_valid;
  wire       [15:0]   ln_io_lnOut_tdata;
  wire       [5:0]    ln_io_lnOut_tuser;
  wire                ln_mlpNormOutProbe_valid;
  wire       [15:0]   ln_mlpNormOutProbe_payload;
  wire                ln_attnNormOutProbe_valid;
  wire       [15:0]   ln_attnNormOutProbe_payload;
  wire                sOut_io_scalarOut_valid;
  wire       [15:0]   sOut_io_scalarOut_payload;
  wire                sOut_io_zfIndexOut_valid;
  wire                sOut_io_zfIndexOut_payload_last;
  wire       [15:0]   sOut_io_zfIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_zfIndexOut_payload_tuser;
  wire                sOut_io_gateIndexOut_valid;
  wire                sOut_io_gateIndexOut_payload_last;
  wire       [15:0]   sOut_io_gateIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_gateIndexOut_payload_tuser;
  wire                sOut_io_ugIndexOut_valid;
  wire                sOut_io_ugIndexOut_payload_last;
  wire       [15:0]   sOut_io_ugIndexOut_payload_tdata;
  wire       [5:0]    sOut_io_ugIndexOut_payload_tuser;
  wire                sOut_silu_to_valid;
  wire       [15:0]   sOut_silu_to_payload;
  wire                busIn_io_bus_ready;
  wire                busIn_io_zeroInt4_ready;
  wire                busIn_io_zeroInt8_ready;
  wire                busIn_io_wkv_valid;
  wire       [2047:0] busIn_io_wkv_payload;
  wire                busIn_io_p2sOut_valid;
  wire                busIn_io_p2sOut_payload_last;
  wire       [15:0]   busIn_io_p2sOut_payload_tdata;
  wire       [5:0]    busIn_io_p2sOut_payload_tuser;
  wire                busIn_io_toResBuf_valid;
  wire       [2047:0] busIn_io_toResBuf_payload;
  wire                busIn_io_directOut_valid;
  wire       [2047:0] busIn_io_directOut_tdata;
  wire       [5:0]    busIn_io_directOut_tuser;
  wire                vecOut_io_vLocal_valid;
  wire       [2047:0] vecOut_io_vLocal_tdata;
  wire       [5:0]    vecOut_io_vLocal_tuser;
  wire                vecOut_io_vecOut_valid;
  wire       [2047:0] vecOut_io_vecOut_payload;
  wire                resBuf_serialOut_tvalid;
  wire       [15:0]   resBuf_serialOut_tdata;
  wire                resBuf_parallelOut_tvalid;
  wire       [2047:0] resBuf_parallelOut_tdata;
  wire                resAdd_io_output_valid;
  wire                resAdd_io_output_payload_last;
  wire       [15:0]   resAdd_io_output_payload_tdata;
  wire       [5:0]    resAdd_io_output_payload_tuser;
  wire                resAdd_io_fromResBuf_ready;
  wire                resAdd_io_toResBuf_valid;
  wire       [15:0]   resAdd_io_toResBuf_payload;
  wire                resAdd_multiCore2Res_resAddProbe_valid;
  wire       [15:0]   resAdd_multiCore2Res_resAddProbe_payload;
  wire                engine_wkvIn_tready;
  wire                engine_dotIn_tready;
  wire                engine_resAdd_tready;
  wire                engine_axpyIn_tready;
  wire                engine_preScale_tready;
  wire                engine_postScale_tready;
  wire                engine_vecOut_tvalid;
  wire       [2047:0] engine_vecOut_tdata;
  wire       [5:0]    engine_vecOut_tuser;
  wire                engine_scalarOut_tvalid;
  wire       [15:0]   engine_scalarOut_tdata;
  wire       [5:0]    engine_scalarOut_tuser;
  wire                engine_cfg_tready;
  wire       [5:0]    engine_preCfgTag;
  wire       [5:0]    engine_postCfgTag;
  wire                node_allGatherOut_tvalid;
  wire       [15:0]   node_allGatherOut_tdata;
  wire       [5:0]    node_allGatherOut_tuser;
  wire                node_allReduceOut_tvalid;
  wire       [15:0]   node_allReduceOut_tdata;
  wire       [5:0]    node_allReduceOut_tuser;
  wire                node_indexOut_tvalid;
  wire                node_indexOut_tlast;
  wire       [15:0]   node_indexOut_tdata;
  wire       [5:0]    node_indexOut_tuser;
  wire                node_c2c_from_ready;
  wire                node_c2c_to_valid;
  wire                node_c2c_to_payload_last;
  wire       [15:0]   node_c2c_to_payload_tdata;
  wire       [5:0]    node_c2c_to_payload_tuser;
  wire       [0:0]    node_c2c_to_payload_tdest;
  wire                cfgInsert_io_cfgIn_ready;
  wire                cfgInsert_io_cfgOut_valid;
  wire       [31:0]   cfgInsert_io_cfgOut_payload;
  wire                cfgInsert_io_gtCnt_valid;
  wire       [15:0]   cfgInsert_io_gtCnt_payload;
  wire                sample_argmax_tvalid;
  wire       [15:0]   sample_argmax_tdata;
  wire                sample_endOfDecode;
  wire                siluAct_io_out_valid;
  wire       [15:0]   siluAct_io_out_payload;
  wire                szPacker_io_kvBus_valid;
  wire                szPacker_io_kvBus_payload_last;
  wire       [511:0]  szPacker_io_kvBus_payload_fragment;
  wire                szPacker_io_kSzOut_valid;
  wire       [31:0]   szPacker_io_kSzOut_payload;
  wire                szPacker_io_vSzOut_valid;
  wire       [31:0]   szPacker_io_vSzOut_payload;
  wire                cfgGen_io_cfg_valid;
  wire       [31:0]   cfgGen_io_cfg_payload;
  wire                stateGen_2_status_enPredictor;
  wire                stateGen_2_status_enProSparse;
  wire                stateGen_2_status_tokenNextHit;
  wire                stateGen_2_status_mlpNextHit;
  wire                stateGen_2_status_vNextHit;
  wire                stateGen_2_status_prefill;
  wire                stateGen_2_status_flushRes;
  wire                stateGen_2_status_nextLayer;
  wire       [15:0]   stateGen_2_status_nonZeroCnt;
  wire                stateGen_2_status_logitsGen;
  wire                stateGen_2_status_toLogitsGen;
  wire       [9:0]    stateGen_2_status_token;
  wire       [4:0]    stateGen_2_status_layerCnt;
  wire       [9:0]    t_toAxiLite_tokenCnt;
  wire       [4:0]    t_toAxiLite_layerCnt;
  reg                 tokenIndexPipe_valid;
  reg        [15:0]   tokenIndexPipe_tdata;
  reg        [5:0]    tokenIndexPipe_tuser;
  wire       [63:0]   t_io_bus_payload_keep;
  wire       [22:0]   t_io_p2sOut_valid;
  wire       [21:0]   t_io_p2sOut_tdata;
  wire                coreArea_0_core_axi_int_bus_fire;

  assign t_toAxiLite_tokenCnt = stateGen_2_status_token;
  assign t_toAxiLite_layerCnt = stateGen_2_status_layerCnt;
  GenMemCmdLenAlign_1 cmdGen (
    .io_tokenIndex_valid       (tokenIndexFifo_io_pop_valid              ), //i
    .io_tokenIndex_ready       (cmdGen_io_tokenIndex_ready               ), //o
    .io_tokenIndex_tdata       (tokenIndexFifo_io_pop_tdata[15:0]        ), //i
    .io_tokenIndex_tuser       (tokenIndexFifo_io_pop_tuser[5:0]         ), //i
    .io_mm2s_valid             (dmaHp_mm2s_tvalid                        ), //i
    .io_mm2s_ready             (cmdGen_io_mm2s_ready                     ), //o
    .io_mm2s_payload_data      (dmaHp_mm2s_tdata[511:0]                  ), //i
    .io_mm2s_payload_keep      (dmaHp_mm2s_tkeep[63:0]                   ), //i
    .io_mm2s_payload_last      (dmaHp_mm2s_tlast                         ), //i
    .io_s2mm_valid             (cmdGen_io_s2mm_valid                     ), //o
    .io_s2mm_ready             (dmaHp_s2mm_tready                        ), //i
    .io_s2mm_payload_data      (cmdGen_io_s2mm_payload_data[511:0]       ), //o
    .io_s2mm_payload_keep      (cmdGen_io_s2mm_payload_keep[63:0]        ), //o
    .io_s2mm_payload_last      (cmdGen_io_s2mm_payload_last              ), //o
    .io_mm2sCmd_valid          (cmdGen_io_mm2sCmd_valid                  ), //o
    .io_mm2sCmd_ready          (dmaHp_mm2sCmd_tready                     ), //i
    .io_mm2sCmd_payload        (cmdGen_io_mm2sCmd_payload[71:0]          ), //o
    .io_s2mmCmd_valid          (cmdGen_io_s2mmCmd_valid                  ), //o
    .io_s2mmCmd_ready          (dmaHp_s2mmCmd_tready                     ), //i
    .io_s2mmCmd_payload        (cmdGen_io_s2mmCmd_payload[71:0]          ), //o
    .local_bus_valid           (cmdGen_local_bus_valid                   ), //o
    .local_bus_ready           (axi_io_bus_ready                         ), //i
    .local_bus_payload_data    (cmdGen_local_bus_payload_data[511:0]     ), //o
    .local_bus_payload_last    (cmdGen_local_bus_payload_last            ), //o
    .local_bus_payload_dest    (cmdGen_local_bus_payload_dest[5:0]       ), //o
    .local_kvBus_valid         (szPacker_io_kvBus_valid                  ), //i
    .local_kvBus_ready         (cmdGen_local_kvBus_ready                 ), //o
    .local_kvBus_payload_data  (szPacker_io_kvBus_payload_fragment[511:0]), //i
    .local_kvBus_payload_last  (szPacker_io_kvBus_payload_last           ), //i
    .local_kvBus_payload_dest  (6'h0                                     ), //i
    .local_index_valid         (node_indexOut_tvalid                     ), //i
    .local_index_payload_last  (node_indexOut_tlast                      ), //i
    .local_index_payload_tdata (node_indexOut_tdata[15:0]                ), //i
    .local_index_payload_tuser (node_indexOut_tuser[5:0]                 ), //i
    .status_enPredictor        (stateGen_2_status_enPredictor            ), //i
    .clk_0_clk                 (clk_0_clk                                ), //i
    .clk_0_resetn              (clk_0_resetn                             )  //i
  );
  StreamFifo_2 tokenIndexFifo (
    .io_push_valid   (tokenIndexPipe_valid               ), //i
    .io_push_ready   (tokenIndexFifo_io_push_ready       ), //o
    .io_push_tdata   (tokenIndexPipe_tdata[15:0]         ), //i
    .io_push_tuser   (tokenIndexPipe_tuser[5:0]          ), //i
    .io_pop_valid    (tokenIndexFifo_io_pop_valid        ), //o
    .io_pop_ready    (cmdGen_io_tokenIndex_ready         ), //i
    .io_pop_tdata    (tokenIndexFifo_io_pop_tdata[15:0]  ), //o
    .io_pop_tuser    (tokenIndexFifo_io_pop_tuser[5:0]   ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (tokenIndexFifo_io_occupancy[6:0]   ), //o
    .io_availability (tokenIndexFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                          ), //i
    .clk_0_resetn    (clk_0_resetn                       )  //i
  );
  SplitAxiDatamover dmaHp (
    .s2mm_tvalid          (cmdGen_io_s2mm_valid              ), //i
    .s2mm_tready          (dmaHp_s2mm_tready                 ), //o
    .s2mm_tdata           (cmdGen_io_s2mm_payload_data[511:0]), //i
    .s2mm_tkeep           (cmdGen_io_s2mm_payload_keep[63:0] ), //i
    .s2mm_tlast           (cmdGen_io_s2mm_payload_last       ), //i
    .mm2s_tvalid          (dmaHp_mm2s_tvalid                 ), //o
    .mm2s_tready          (cmdGen_io_mm2s_ready              ), //i
    .mm2s_tdata           (dmaHp_mm2s_tdata[511:0]           ), //o
    .mm2s_tkeep           (dmaHp_mm2s_tkeep[63:0]            ), //o
    .mm2s_tlast           (dmaHp_mm2s_tlast                  ), //o
    .s2mmCmd_tvalid       (cmdGen_io_s2mmCmd_valid           ), //i
    .s2mmCmd_tready       (dmaHp_s2mmCmd_tready              ), //o
    .s2mmCmd_tdata        (cmdGen_io_s2mmCmd_payload[71:0]   ), //i
    .mm2sCmd_tvalid       (cmdGen_io_mm2sCmd_valid           ), //i
    .mm2sCmd_tready       (dmaHp_mm2sCmd_tready              ), //o
    .mm2sCmd_tdata        (cmdGen_io_mm2sCmd_payload[71:0]   ), //i
    .m_axi_0_awvalid      (dmaHp_m_axi_0_awvalid             ), //o
    .m_axi_0_awready      (m_axi_hp_0_aw_ready               ), //i
    .m_axi_0_awaddr       (dmaHp_m_axi_0_awaddr[31:0]        ), //o
    .m_axi_0_awid         (dmaHp_m_axi_0_awid[3:0]           ), //o
    .m_axi_0_awlen        (dmaHp_m_axi_0_awlen[7:0]          ), //o
    .m_axi_0_awsize       (dmaHp_m_axi_0_awsize[2:0]         ), //o
    .m_axi_0_awburst      (dmaHp_m_axi_0_awburst[1:0]        ), //o
    .m_axi_0_awcache      (dmaHp_m_axi_0_awcache[3:0]        ), //o
    .m_axi_0_awuser       (dmaHp_m_axi_0_awuser[3:0]         ), //o
    .m_axi_0_awprot       (dmaHp_m_axi_0_awprot[2:0]         ), //o
    .m_axi_0_wvalid       (dmaHp_m_axi_0_wvalid              ), //o
    .m_axi_0_wready       (m_axi_hp_0_w_ready                ), //i
    .m_axi_0_wdata        (dmaHp_m_axi_0_wdata[127:0]        ), //o
    .m_axi_0_wstrb        (dmaHp_m_axi_0_wstrb[15:0]         ), //o
    .m_axi_0_wlast        (dmaHp_m_axi_0_wlast               ), //o
    .m_axi_0_bvalid       (m_axi_hp_0_b_valid                ), //i
    .m_axi_0_bready       (dmaHp_m_axi_0_bready              ), //o
    .m_axi_0_bid          (m_axi_hp_0_b_payload_id[3:0]      ), //i
    .m_axi_0_bresp        (m_axi_hp_0_b_payload_resp[1:0]    ), //i
    .m_axi_0_arvalid      (dmaHp_m_axi_0_arvalid             ), //o
    .m_axi_0_arready      (m_axi_hp_0_ar_ready               ), //i
    .m_axi_0_araddr       (dmaHp_m_axi_0_araddr[31:0]        ), //o
    .m_axi_0_arid         (dmaHp_m_axi_0_arid[3:0]           ), //o
    .m_axi_0_arlen        (dmaHp_m_axi_0_arlen[7:0]          ), //o
    .m_axi_0_arsize       (dmaHp_m_axi_0_arsize[2:0]         ), //o
    .m_axi_0_arburst      (dmaHp_m_axi_0_arburst[1:0]        ), //o
    .m_axi_0_arcache      (dmaHp_m_axi_0_arcache[3:0]        ), //o
    .m_axi_0_aruser       (dmaHp_m_axi_0_aruser[3:0]         ), //o
    .m_axi_0_arprot       (dmaHp_m_axi_0_arprot[2:0]         ), //o
    .m_axi_0_rvalid       (m_axi_hp_0_r_valid                ), //i
    .m_axi_0_rready       (dmaHp_m_axi_0_rready              ), //o
    .m_axi_0_rdata        (m_axi_hp_0_r_payload_data[127:0]  ), //i
    .m_axi_0_rid          (m_axi_hp_0_r_payload_id[3:0]      ), //i
    .m_axi_0_rresp        (m_axi_hp_0_r_payload_resp[1:0]    ), //i
    .m_axi_0_rlast        (m_axi_hp_0_r_payload_last         ), //i
    .m_axi_1_awvalid      (dmaHp_m_axi_1_awvalid             ), //o
    .m_axi_1_awready      (m_axi_hp_1_aw_ready               ), //i
    .m_axi_1_awaddr       (dmaHp_m_axi_1_awaddr[31:0]        ), //o
    .m_axi_1_awid         (dmaHp_m_axi_1_awid[3:0]           ), //o
    .m_axi_1_awlen        (dmaHp_m_axi_1_awlen[7:0]          ), //o
    .m_axi_1_awsize       (dmaHp_m_axi_1_awsize[2:0]         ), //o
    .m_axi_1_awburst      (dmaHp_m_axi_1_awburst[1:0]        ), //o
    .m_axi_1_awcache      (dmaHp_m_axi_1_awcache[3:0]        ), //o
    .m_axi_1_awuser       (dmaHp_m_axi_1_awuser[3:0]         ), //o
    .m_axi_1_awprot       (dmaHp_m_axi_1_awprot[2:0]         ), //o
    .m_axi_1_wvalid       (dmaHp_m_axi_1_wvalid              ), //o
    .m_axi_1_wready       (m_axi_hp_1_w_ready                ), //i
    .m_axi_1_wdata        (dmaHp_m_axi_1_wdata[127:0]        ), //o
    .m_axi_1_wstrb        (dmaHp_m_axi_1_wstrb[15:0]         ), //o
    .m_axi_1_wlast        (dmaHp_m_axi_1_wlast               ), //o
    .m_axi_1_bvalid       (m_axi_hp_1_b_valid                ), //i
    .m_axi_1_bready       (dmaHp_m_axi_1_bready              ), //o
    .m_axi_1_bid          (m_axi_hp_1_b_payload_id[3:0]      ), //i
    .m_axi_1_bresp        (m_axi_hp_1_b_payload_resp[1:0]    ), //i
    .m_axi_1_arvalid      (dmaHp_m_axi_1_arvalid             ), //o
    .m_axi_1_arready      (m_axi_hp_1_ar_ready               ), //i
    .m_axi_1_araddr       (dmaHp_m_axi_1_araddr[31:0]        ), //o
    .m_axi_1_arid         (dmaHp_m_axi_1_arid[3:0]           ), //o
    .m_axi_1_arlen        (dmaHp_m_axi_1_arlen[7:0]          ), //o
    .m_axi_1_arsize       (dmaHp_m_axi_1_arsize[2:0]         ), //o
    .m_axi_1_arburst      (dmaHp_m_axi_1_arburst[1:0]        ), //o
    .m_axi_1_arcache      (dmaHp_m_axi_1_arcache[3:0]        ), //o
    .m_axi_1_aruser       (dmaHp_m_axi_1_aruser[3:0]         ), //o
    .m_axi_1_arprot       (dmaHp_m_axi_1_arprot[2:0]         ), //o
    .m_axi_1_rvalid       (m_axi_hp_1_r_valid                ), //i
    .m_axi_1_rready       (dmaHp_m_axi_1_rready              ), //o
    .m_axi_1_rdata        (m_axi_hp_1_r_payload_data[127:0]  ), //i
    .m_axi_1_rid          (m_axi_hp_1_r_payload_id[3:0]      ), //i
    .m_axi_1_rresp        (m_axi_hp_1_r_payload_resp[1:0]    ), //i
    .m_axi_1_rlast        (m_axi_hp_1_r_payload_last         ), //i
    .m_axi_2_awvalid      (dmaHp_m_axi_2_awvalid             ), //o
    .m_axi_2_awready      (m_axi_hp_2_aw_ready               ), //i
    .m_axi_2_awaddr       (dmaHp_m_axi_2_awaddr[31:0]        ), //o
    .m_axi_2_awid         (dmaHp_m_axi_2_awid[3:0]           ), //o
    .m_axi_2_awlen        (dmaHp_m_axi_2_awlen[7:0]          ), //o
    .m_axi_2_awsize       (dmaHp_m_axi_2_awsize[2:0]         ), //o
    .m_axi_2_awburst      (dmaHp_m_axi_2_awburst[1:0]        ), //o
    .m_axi_2_awcache      (dmaHp_m_axi_2_awcache[3:0]        ), //o
    .m_axi_2_awuser       (dmaHp_m_axi_2_awuser[3:0]         ), //o
    .m_axi_2_awprot       (dmaHp_m_axi_2_awprot[2:0]         ), //o
    .m_axi_2_wvalid       (dmaHp_m_axi_2_wvalid              ), //o
    .m_axi_2_wready       (m_axi_hp_2_w_ready                ), //i
    .m_axi_2_wdata        (dmaHp_m_axi_2_wdata[127:0]        ), //o
    .m_axi_2_wstrb        (dmaHp_m_axi_2_wstrb[15:0]         ), //o
    .m_axi_2_wlast        (dmaHp_m_axi_2_wlast               ), //o
    .m_axi_2_bvalid       (m_axi_hp_2_b_valid                ), //i
    .m_axi_2_bready       (dmaHp_m_axi_2_bready              ), //o
    .m_axi_2_bid          (m_axi_hp_2_b_payload_id[3:0]      ), //i
    .m_axi_2_bresp        (m_axi_hp_2_b_payload_resp[1:0]    ), //i
    .m_axi_2_arvalid      (dmaHp_m_axi_2_arvalid             ), //o
    .m_axi_2_arready      (m_axi_hp_2_ar_ready               ), //i
    .m_axi_2_araddr       (dmaHp_m_axi_2_araddr[31:0]        ), //o
    .m_axi_2_arid         (dmaHp_m_axi_2_arid[3:0]           ), //o
    .m_axi_2_arlen        (dmaHp_m_axi_2_arlen[7:0]          ), //o
    .m_axi_2_arsize       (dmaHp_m_axi_2_arsize[2:0]         ), //o
    .m_axi_2_arburst      (dmaHp_m_axi_2_arburst[1:0]        ), //o
    .m_axi_2_arcache      (dmaHp_m_axi_2_arcache[3:0]        ), //o
    .m_axi_2_aruser       (dmaHp_m_axi_2_aruser[3:0]         ), //o
    .m_axi_2_arprot       (dmaHp_m_axi_2_arprot[2:0]         ), //o
    .m_axi_2_rvalid       (m_axi_hp_2_r_valid                ), //i
    .m_axi_2_rready       (dmaHp_m_axi_2_rready              ), //o
    .m_axi_2_rdata        (m_axi_hp_2_r_payload_data[127:0]  ), //i
    .m_axi_2_rid          (m_axi_hp_2_r_payload_id[3:0]      ), //i
    .m_axi_2_rresp        (m_axi_hp_2_r_payload_resp[1:0]    ), //i
    .m_axi_2_rlast        (m_axi_hp_2_r_payload_last         ), //i
    .m_axi_3_awvalid      (dmaHp_m_axi_3_awvalid             ), //o
    .m_axi_3_awready      (m_axi_hp_3_aw_ready               ), //i
    .m_axi_3_awaddr       (dmaHp_m_axi_3_awaddr[31:0]        ), //o
    .m_axi_3_awid         (dmaHp_m_axi_3_awid[3:0]           ), //o
    .m_axi_3_awlen        (dmaHp_m_axi_3_awlen[7:0]          ), //o
    .m_axi_3_awsize       (dmaHp_m_axi_3_awsize[2:0]         ), //o
    .m_axi_3_awburst      (dmaHp_m_axi_3_awburst[1:0]        ), //o
    .m_axi_3_awcache      (dmaHp_m_axi_3_awcache[3:0]        ), //o
    .m_axi_3_awuser       (dmaHp_m_axi_3_awuser[3:0]         ), //o
    .m_axi_3_awprot       (dmaHp_m_axi_3_awprot[2:0]         ), //o
    .m_axi_3_wvalid       (dmaHp_m_axi_3_wvalid              ), //o
    .m_axi_3_wready       (m_axi_hp_3_w_ready                ), //i
    .m_axi_3_wdata        (dmaHp_m_axi_3_wdata[127:0]        ), //o
    .m_axi_3_wstrb        (dmaHp_m_axi_3_wstrb[15:0]         ), //o
    .m_axi_3_wlast        (dmaHp_m_axi_3_wlast               ), //o
    .m_axi_3_bvalid       (m_axi_hp_3_b_valid                ), //i
    .m_axi_3_bready       (dmaHp_m_axi_3_bready              ), //o
    .m_axi_3_bid          (m_axi_hp_3_b_payload_id[3:0]      ), //i
    .m_axi_3_bresp        (m_axi_hp_3_b_payload_resp[1:0]    ), //i
    .m_axi_3_arvalid      (dmaHp_m_axi_3_arvalid             ), //o
    .m_axi_3_arready      (m_axi_hp_3_ar_ready               ), //i
    .m_axi_3_araddr       (dmaHp_m_axi_3_araddr[31:0]        ), //o
    .m_axi_3_arid         (dmaHp_m_axi_3_arid[3:0]           ), //o
    .m_axi_3_arlen        (dmaHp_m_axi_3_arlen[7:0]          ), //o
    .m_axi_3_arsize       (dmaHp_m_axi_3_arsize[2:0]         ), //o
    .m_axi_3_arburst      (dmaHp_m_axi_3_arburst[1:0]        ), //o
    .m_axi_3_arcache      (dmaHp_m_axi_3_arcache[3:0]        ), //o
    .m_axi_3_aruser       (dmaHp_m_axi_3_aruser[3:0]         ), //o
    .m_axi_3_arprot       (dmaHp_m_axi_3_arprot[2:0]         ), //o
    .m_axi_3_rvalid       (m_axi_hp_3_r_valid                ), //i
    .m_axi_3_rready       (dmaHp_m_axi_3_rready              ), //o
    .m_axi_3_rdata        (m_axi_hp_3_r_payload_data[127:0]  ), //i
    .m_axi_3_rid          (m_axi_hp_3_r_payload_id[3:0]      ), //i
    .m_axi_3_rresp        (m_axi_hp_3_r_payload_resp[1:0]    ), //i
    .m_axi_3_rlast        (m_axi_hp_3_r_payload_last         ), //i
    .ctrl_aw_valid        (dmaHp_ctrl_aw_valid               ), //i
    .ctrl_aw_ready        (dmaHp_ctrl_aw_ready               ), //o
    .ctrl_aw_payload_addr (dmaHp_ctrl_aw_payload_addr[31:0]  ), //i
    .ctrl_aw_payload_prot (dmaHp_ctrl_aw_payload_prot[2:0]   ), //i
    .ctrl_w_valid         (dmaHp_ctrl_w_valid                ), //i
    .ctrl_w_ready         (dmaHp_ctrl_w_ready                ), //o
    .ctrl_w_payload_data  (dmaHp_ctrl_w_payload_data[31:0]   ), //i
    .ctrl_w_payload_strb  (dmaHp_ctrl_w_payload_strb[3:0]    ), //i
    .ctrl_b_valid         (dmaHp_ctrl_b_valid                ), //o
    .ctrl_b_ready         (dmaHp_ctrl_b_ready                ), //i
    .ctrl_b_payload_resp  (dmaHp_ctrl_b_payload_resp[1:0]    ), //o
    .ctrl_ar_valid        (dmaHp_ctrl_ar_valid               ), //i
    .ctrl_ar_ready        (dmaHp_ctrl_ar_ready               ), //o
    .ctrl_ar_payload_addr (dmaHp_ctrl_ar_payload_addr[31:0]  ), //i
    .ctrl_ar_payload_prot (dmaHp_ctrl_ar_payload_prot[2:0]   ), //i
    .ctrl_r_valid         (dmaHp_ctrl_r_valid                ), //o
    .ctrl_r_ready         (dmaHp_ctrl_r_ready                ), //i
    .ctrl_r_payload_data  (dmaHp_ctrl_r_payload_data[31:0]   ), //o
    .ctrl_r_payload_resp  (dmaHp_ctrl_r_payload_resp[1:0]    ), //o
    .aresetn              (aresetn                           ), //i
    .clk_0_clk            (clk_0_clk                         ), //i
    .clk_0_resetn         (clk_0_resetn                      )  //i
  );
  AxiBusDistributor_1 axi (
    .io_bus_valid          (cmdGen_local_bus_valid              ), //i
    .io_bus_ready          (axi_io_bus_ready                    ), //o
    .io_bus_payload_data   (cmdGen_local_bus_payload_data[511:0]), //i
    .io_bus_payload_keep   (t_io_bus_payload_keep[63:0]         ), //i
    .io_bus_payload_last   (cmdGen_local_bus_payload_last       ), //i
    .io_bus_payload_dest   (cmdGen_local_bus_payload_dest[5:0]  ), //i
    .io_token              (stateGen_2_status_token[9:0]        ), //i
    .io_preCfgTag          (engine_preCfgTag[5:0]               ), //i
    .io_postCfgTag         (engine_postCfgTag[5:0]              ), //i
    .io_enPredictor        (stateGen_2_status_enPredictor       ), //i
    .io_kSzOut_valid       (szPacker_io_kSzOut_valid            ), //i
    .io_kSzOut_ready       (axi_io_kSzOut_ready                 ), //o
    .io_kSzOut_payload     (szPacker_io_kSzOut_payload[31:0]    ), //i
    .io_vSzOut_valid       (szPacker_io_vSzOut_valid            ), //i
    .io_vSzOut_ready       (axi_io_vSzOut_ready                 ), //o
    .io_vSzOut_payload     (szPacker_io_vSzOut_payload[31:0]    ), //i
    .int_bus_valid         (axi_int_bus_valid                   ), //o
    .int_bus_ready         (busIn_io_bus_ready                  ), //i
    .int_bus_payload_last  (axi_int_bus_payload_last            ), //o
    .int_bus_payload_tdata (axi_int_bus_payload_tdata[511:0]    ), //o
    .int_bus_payload_tuser (axi_int_bus_payload_tuser[5:0]      ), //o
    .int_lnScale_valid     (axi_int_lnScale_valid               ), //o
    .int_lnScale_ready     (ln_io_lnScale_ready                 ), //i
    .int_lnScale_payload   (axi_int_lnScale_payload[15:0]       ), //o
    .int_zeroInt4_valid    (axi_int_zeroInt4_valid              ), //o
    .int_zeroInt4_ready    (busIn_io_zeroInt4_ready             ), //i
    .int_zeroInt4_payload  (axi_int_zeroInt4_payload[7:0]       ), //o
    .int_zeroInt8_valid    (axi_int_zeroInt8_valid              ), //o
    .int_zeroInt8_ready    (busIn_io_zeroInt8_ready             ), //i
    .int_zeroInt8_payload  (axi_int_zeroInt8_payload[7:0]       ), //o
    .int_preScale_valid    (axi_int_preScale_valid              ), //o
    .int_preScale_ready    (engine_preScale_tready              ), //i
    .int_preScale_payload  (axi_int_preScale_payload[15:0]      ), //o
    .int_postScale_valid   (axi_int_postScale_valid             ), //o
    .int_postScale_ready   (engine_postScale_tready             ), //i
    .int_postScale_payload (axi_int_postScale_payload[31:0]     ), //o
    .clk_0_clk             (clk_0_clk                           ), //i
    .clk_0_resetn          (clk_0_resetn                        )  //i
  );
  AttnSubMod_1 attn (
    .io_dotOut_valid                (engine_scalarOut_tvalid                 ), //i
    .io_dotOut_tdata                (engine_scalarOut_tdata[15:0]            ), //i
    .io_dotOut_tuser                (engine_scalarOut_tuser[5:0]             ), //i
    .io_ropeOut_valid               (attn_io_ropeOut_valid                   ), //o
    .io_ropeOut_tdata               (attn_io_ropeOut_tdata[15:0]             ), //o
    .io_ropeOut_tuser               (attn_io_ropeOut_tuser[5:0]              ), //o
    .io_softmaxOut_valid            (attn_io_softmaxOut_valid                ), //o
    .io_softmaxOut_payload_last     (attn_io_softmaxOut_payload_last         ), //o
    .io_softmaxOut_payload_tdata    (attn_io_softmaxOut_payload_tdata[15:0]  ), //o
    .io_softmaxOut_payload_tuser    (attn_io_softmaxOut_payload_tuser[5:0]   ), //o
    .io_quantZero_valid             (attn_io_quantZero_valid                 ), //o
    .io_quantZero_payload           (attn_io_quantZero_payload[7:0]          ), //o
    .io_quantScale_valid            (attn_io_quantScale_valid                ), //o
    .io_quantScale_payload          (attn_io_quantScale_payload[15:0]        ), //o
    .io_afterQuant_valid            (attn_io_afterQuant_valid                ), //o
    .io_afterQuant_payload_last     (attn_io_afterQuant_payload_last         ), //o
    .io_afterQuant_payload_fragment (attn_io_afterQuant_payload_fragment[7:0]), //o
    .status_token                   (stateGen_2_status_token[9:0]            ), //i
    .exp_to_valid                   (attn_exp_to_valid                       ), //o
    .exp_to_payload                 (attn_exp_to_payload[15:0]               ), //o
    .exp_from_valid                 (attn_exp_from_valid                     ), //i
    .exp_from_payload               (attn_exp_from_payload[15:0]             ), //i
    .clk_0_clk                      (clk_0_clk                               ), //i
    .clk_0_resetn                   (clk_0_resetn                            )  //i
  );
  NormSubModNew_1 ln (
    .io_allGatherOut_valid    (node_allGatherOut_tvalid         ), //i
    .io_allGatherOut_tdata    (node_allGatherOut_tdata[15:0]    ), //i
    .io_allGatherOut_tuser    (node_allGatherOut_tuser[5:0]     ), //i
    .io_allReduceOut_valid    (node_allReduceOut_tvalid         ), //i
    .io_allReduceOut_tdata    (node_allReduceOut_tdata[15:0]    ), //i
    .io_allReduceOut_tuser    (node_allReduceOut_tuser[5:0]     ), //i
    .io_lnScale_valid         (axi_int_lnScale_valid            ), //i
    .io_lnScale_ready         (ln_io_lnScale_ready              ), //o
    .io_lnScale_payload       (axi_int_lnScale_payload[15:0]    ), //i
    .io_lnOut_valid           (ln_io_lnOut_valid                ), //o
    .io_lnOut_tdata           (ln_io_lnOut_tdata[15:0]          ), //o
    .io_lnOut_tuser           (ln_io_lnOut_tuser[5:0]           ), //o
    .status_toLogitsGen       (stateGen_2_status_toLogitsGen    ), //i
    .clk_0_clk                (clk_0_clk                        ), //i
    .clk_0_resetn             (clk_0_resetn                     ), //i
    .mlpNormOutProbe_valid    (ln_mlpNormOutProbe_valid         ), //o
    .mlpNormOutProbe_payload  (ln_mlpNormOutProbe_payload[15:0] ), //o
    .attnNormOutProbe_valid   (ln_attnNormOutProbe_valid        ), //o
    .attnNormOutProbe_payload (ln_attnNormOutProbe_payload[15:0])  //o
  );
  ScalarOutSubMod_1 sOut (
    .io_p2sOut_valid                   (sOut_io_p2sOut_valid                    ), //i
    .io_p2sOut_tdata                   (sOut_io_p2sOut_tdata[15:0]              ), //i
    .io_p2sOut_tuser                   (sOut_io_p2sOut_tuser[5:0]               ), //i
    .io_allReduceOut_valid             (node_allReduceOut_tvalid                ), //i
    .io_allReduceOut_tdata             (node_allReduceOut_tdata[15:0]           ), //i
    .io_allReduceOut_tuser             (node_allReduceOut_tuser[5:0]            ), //i
    .io_softmaxOut_valid               (attn_io_softmaxOut_valid                ), //i
    .io_softmaxOut_payload_last        (attn_io_softmaxOut_payload_last         ), //i
    .io_softmaxOut_payload_tdata       (attn_io_softmaxOut_payload_tdata[15:0]  ), //i
    .io_softmaxOut_payload_tuser       (attn_io_softmaxOut_payload_tuser[5:0]   ), //i
    .io_scalarOut_valid                (sOut_io_scalarOut_valid                 ), //o
    .io_scalarOut_ready                (engine_axpyIn_tready                    ), //i
    .io_scalarOut_payload              (sOut_io_scalarOut_payload[15:0]         ), //o
    .io_allGatherIndexIn_valid         (node_indexOut_tvalid                    ), //i
    .io_allGatherIndexIn_payload_last  (node_indexOut_tlast                     ), //i
    .io_allGatherIndexIn_payload_tdata (node_indexOut_tdata[15:0]               ), //i
    .io_allGatherIndexIn_payload_tuser (node_indexOut_tuser[5:0]                ), //i
    .io_zfIndexOut_valid               (sOut_io_zfIndexOut_valid                ), //o
    .io_zfIndexOut_payload_last        (sOut_io_zfIndexOut_payload_last         ), //o
    .io_zfIndexOut_payload_tdata       (sOut_io_zfIndexOut_payload_tdata[15:0]  ), //o
    .io_zfIndexOut_payload_tuser       (sOut_io_zfIndexOut_payload_tuser[5:0]   ), //o
    .io_gateIndexOut_valid             (sOut_io_gateIndexOut_valid              ), //o
    .io_gateIndexOut_payload_last      (sOut_io_gateIndexOut_payload_last       ), //o
    .io_gateIndexOut_payload_tdata     (sOut_io_gateIndexOut_payload_tdata[15:0]), //o
    .io_gateIndexOut_payload_tuser     (sOut_io_gateIndexOut_payload_tuser[5:0] ), //o
    .io_ugIndexOut_valid               (sOut_io_ugIndexOut_valid                ), //o
    .io_ugIndexOut_payload_last        (sOut_io_ugIndexOut_payload_last         ), //o
    .io_ugIndexOut_payload_tdata       (sOut_io_ugIndexOut_payload_tdata[15:0]  ), //o
    .io_ugIndexOut_payload_tuser       (sOut_io_ugIndexOut_payload_tuser[5:0]   ), //o
    .clk_0_clk                         (clk_0_clk                               ), //i
    .status_enPredictor                (stateGen_2_status_enPredictor           ), //i
    .status_enFatRelu                  (1'b0                                    ), //i
    .silu_to_valid                     (sOut_silu_to_valid                      ), //o
    .silu_to_payload                   (sOut_silu_to_payload[15:0]              ), //o
    .silu_from_valid                   (siluAct_io_out_valid                    ), //i
    .silu_from_payload                 (siluAct_io_out_payload[15:0]            ), //i
    .clk_0_resetn                      (clk_0_resetn                            )  //i
  );
  BusInSubModNew_1 busIn (
    .io_bus_valid            (axi_int_bus_valid                  ), //i
    .io_bus_ready            (busIn_io_bus_ready                 ), //o
    .io_bus_payload_last     (axi_int_bus_payload_last           ), //i
    .io_bus_payload_tdata    (axi_int_bus_payload_tdata[511:0]   ), //i
    .io_bus_payload_tuser    (axi_int_bus_payload_tuser[5:0]     ), //i
    .io_vecIn_valid          (engine_vecOut_tvalid               ), //i
    .io_vecIn_tdata          (engine_vecOut_tdata[2047:0]        ), //i
    .io_vecIn_tuser          (engine_vecOut_tuser[5:0]           ), //i
    .io_vLocal_valid         (vecOut_io_vLocal_valid             ), //i
    .io_vLocal_tdata         (vecOut_io_vLocal_tdata[2047:0]     ), //i
    .io_vLocal_tuser         (vecOut_io_vLocal_tuser[5:0]        ), //i
    .io_zeroInt4_valid       (axi_int_zeroInt4_valid             ), //i
    .io_zeroInt4_ready       (busIn_io_zeroInt4_ready            ), //o
    .io_zeroInt4_payload     (axi_int_zeroInt4_payload[7:0]      ), //i
    .io_zeroInt8_valid       (axi_int_zeroInt8_valid             ), //i
    .io_zeroInt8_ready       (busIn_io_zeroInt8_ready            ), //o
    .io_zeroInt8_payload     (axi_int_zeroInt8_payload[7:0]      ), //i
    .io_wkv_valid            (busIn_io_wkv_valid                 ), //o
    .io_wkv_ready            (engine_wkvIn_tready                ), //i
    .io_wkv_payload          (busIn_io_wkv_payload[2047:0]       ), //o
    .io_p2sOut_valid         (busIn_io_p2sOut_valid              ), //o
    .io_p2sOut_payload_last  (busIn_io_p2sOut_payload_last       ), //o
    .io_p2sOut_payload_tdata (busIn_io_p2sOut_payload_tdata[15:0]), //o
    .io_p2sOut_payload_tuser (busIn_io_p2sOut_payload_tuser[5:0] ), //o
    .io_toResBuf_valid       (busIn_io_toResBuf_valid            ), //o
    .io_toResBuf_payload     (busIn_io_toResBuf_payload[2047:0]  ), //o
    .io_directOut_valid      (busIn_io_directOut_valid           ), //o
    .io_directOut_tdata      (busIn_io_directOut_tdata[2047:0]   ), //o
    .io_directOut_tuser      (busIn_io_directOut_tuser[5:0]      ), //o
    .status_tokenNextHit     (stateGen_2_status_tokenNextHit     ), //i
    .status_mlpNextHit       (stateGen_2_status_mlpNextHit       ), //i
    .status_vNextHit         (stateGen_2_status_vNextHit         ), //i
    .status_flushRes         (stateGen_2_status_flushRes         ), //i
    .status_logitsGen        (stateGen_2_status_logitsGen        ), //i
    .clk_0_clk               (clk_0_clk                          ), //i
    .clk_0_resetn            (clk_0_resetn                       )  //i
  );
  VecOutSubMod_1 vecOut (
    .io_lnOut_valid                (ln_io_lnOut_valid               ), //i
    .io_lnOut_tdata                (ln_io_lnOut_tdata[15:0]         ), //i
    .io_lnOut_tuser                (ln_io_lnOut_tuser[5:0]          ), //i
    .io_dotOut_valid               (engine_scalarOut_tvalid         ), //i
    .io_dotOut_tdata               (engine_scalarOut_tdata[15:0]    ), //i
    .io_dotOut_tuser               (engine_scalarOut_tuser[5:0]     ), //i
    .io_ropeOut_valid              (attn_io_ropeOut_valid           ), //i
    .io_ropeOut_tdata              (attn_io_ropeOut_tdata[15:0]     ), //i
    .io_ropeOut_tuser              (attn_io_ropeOut_tuser[5:0]      ), //i
    .io_busVecIn_valid             (busIn_io_directOut_valid        ), //i
    .io_busVecIn_tdata             (busIn_io_directOut_tdata[2047:0]), //i
    .io_busVecIn_tuser             (busIn_io_directOut_tuser[5:0]   ), //i
    .io_engineVecIn_valid          (engine_vecOut_tvalid            ), //i
    .io_engineVecIn_tdata          (engine_vecOut_tdata[2047:0]     ), //i
    .io_engineVecIn_tuser          (engine_vecOut_tuser[5:0]        ), //i
    .io_vLocal_valid               (vecOut_io_vLocal_valid          ), //o
    .io_vLocal_tdata               (vecOut_io_vLocal_tdata[2047:0]  ), //o
    .io_vLocal_tuser               (vecOut_io_vLocal_tuser[5:0]     ), //o
    .io_vecOut_valid               (vecOut_io_vecOut_valid          ), //o
    .io_vecOut_ready               (engine_dotIn_tready             ), //i
    .io_vecOut_payload             (vecOut_io_vecOut_payload[2047:0]), //o
    .status_tokenIndexFlow_valid   (tokenIndexPipe_valid            ), //i
    .status_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]       ), //i
    .status_enPredictor            (stateGen_2_status_enPredictor   ), //i
    .clk_0_clk                     (clk_0_clk                       ), //i
    .clk_0_resetn                  (clk_0_resetn                    )  //i
  );
  ResidualBuffer_1 resBuf (
    .serialIn_tvalid    (resAdd_io_toResBuf_valid         ), //i
    .serialIn_tdata     (resAdd_io_toResBuf_payload[15:0] ), //i
    .parallelIn_tvalid  (busIn_io_toResBuf_valid          ), //i
    .parallelIn_tdata   (busIn_io_toResBuf_payload[2047:0]), //i
    .serialOut_tvalid   (resBuf_serialOut_tvalid          ), //o
    .serialOut_tready   (resAdd_io_fromResBuf_ready       ), //i
    .serialOut_tdata    (resBuf_serialOut_tdata[15:0]     ), //o
    .parallelOut_tvalid (resBuf_parallelOut_tvalid        ), //o
    .parallelOut_tready (engine_resAdd_tready             ), //i
    .parallelOut_tdata  (resBuf_parallelOut_tdata[2047:0] ), //o
    .clk_0_clk          (clk_0_clk                        ), //i
    .clk_0_resetn       (clk_0_resetn                     )  //i
  );
  SerialResAdd_1 resAdd (
    .io_dotOut_valid                   (engine_scalarOut_tvalid                       ), //i
    .io_dotOut_tdata                   (engine_scalarOut_tdata[15:0]                  ), //i
    .io_dotOut_tuser                   (engine_scalarOut_tuser[5:0]                   ), //i
    .io_output_valid                   (resAdd_io_output_valid                        ), //o
    .io_output_payload_last            (resAdd_io_output_payload_last                 ), //o
    .io_output_payload_tdata           (resAdd_io_output_payload_tdata[15:0]          ), //o
    .io_output_payload_tuser           (resAdd_io_output_payload_tuser[5:0]           ), //o
    .io_fromAllReduce_valid            (node_allReduceOut_tvalid                      ), //i
    .io_fromAllReduce_tdata            (node_allReduceOut_tdata[15:0]                 ), //i
    .io_fromAllReduce_tuser            (node_allReduceOut_tuser[5:0]                  ), //i
    .io_fromResBuf_valid               (resBuf_serialOut_tvalid                       ), //i
    .io_fromResBuf_ready               (resAdd_io_fromResBuf_ready                    ), //o
    .io_fromResBuf_payload             (resBuf_serialOut_tdata[15:0]                  ), //i
    .io_toResBuf_valid                 (resAdd_io_toResBuf_valid                      ), //o
    .io_toResBuf_payload               (resAdd_io_toResBuf_payload[15:0]              ), //o
    .clk_0_clk                         (clk_0_clk                                     ), //i
    .multiCore2Res_resAddProbe_valid   (resAdd_multiCore2Res_resAddProbe_valid        ), //o
    .multiCore2Res_resAddProbe_payload (resAdd_multiCore2Res_resAddProbe_payload[15:0]), //o
    .clk_0_resetn                      (clk_0_resetn                                  )  //i
  );
  MulAddSGNew_1 engine (
    .wkvIn_tvalid     (busIn_io_wkv_valid               ), //i
    .wkvIn_tready     (engine_wkvIn_tready              ), //o
    .wkvIn_tdata      (busIn_io_wkv_payload[2047:0]     ), //i
    .dotIn_tvalid     (vecOut_io_vecOut_valid           ), //i
    .dotIn_tready     (engine_dotIn_tready              ), //o
    .dotIn_tdata      (vecOut_io_vecOut_payload[2047:0] ), //i
    .resAdd_tvalid    (resBuf_parallelOut_tvalid        ), //i
    .resAdd_tready    (engine_resAdd_tready             ), //o
    .resAdd_tdata     (resBuf_parallelOut_tdata[2047:0] ), //i
    .axpyIn_tvalid    (sOut_io_scalarOut_valid          ), //i
    .axpyIn_tready    (engine_axpyIn_tready             ), //o
    .axpyIn_tdata     (sOut_io_scalarOut_payload[15:0]  ), //i
    .preScale_tvalid  (axi_int_preScale_valid           ), //i
    .preScale_tready  (engine_preScale_tready           ), //o
    .preScale_tdata   (axi_int_preScale_payload[15:0]   ), //i
    .postScale_tvalid (axi_int_postScale_valid          ), //i
    .postScale_tready (engine_postScale_tready          ), //o
    .postScale_tdata  (axi_int_postScale_payload[31:0]  ), //i
    .vecOut_tvalid    (engine_vecOut_tvalid             ), //o
    .vecOut_tdata     (engine_vecOut_tdata[2047:0]      ), //o
    .vecOut_tuser     (engine_vecOut_tuser[5:0]         ), //o
    .scalarOut_tvalid (engine_scalarOut_tvalid          ), //o
    .scalarOut_tdata  (engine_scalarOut_tdata[15:0]     ), //o
    .scalarOut_tuser  (engine_scalarOut_tuser[5:0]      ), //o
    .cfg_tvalid       (cfgInsert_io_cfgOut_valid        ), //i
    .cfg_tready       (engine_cfg_tready                ), //o
    .cfg_tdata        (cfgInsert_io_cfgOut_payload[31:0]), //i
    .preCfgTag        (engine_preCfgTag[5:0]            ), //o
    .postCfgTag       (engine_postCfgTag[5:0]           ), //o
    .clk_0_clk        (clk_0_clk                        ), //i
    .clk_0_resetn     (clk_0_resetn                     )  //i
  );
  AllGatherSubModNew_1 node (
    .dotOut_valid              (engine_scalarOut_tvalid                 ), //i
    .dotOut_tdata              (engine_scalarOut_tdata[15:0]            ), //i
    .dotOut_tuser              (engine_scalarOut_tuser[5:0]             ), //i
    .resOut_valid              (resAdd_io_output_valid                  ), //i
    .resOut_payload_last       (resAdd_io_output_payload_last           ), //i
    .resOut_payload_tdata      (resAdd_io_output_payload_tdata[15:0]    ), //i
    .resOut_payload_tuser      (resAdd_io_output_payload_tuser[5:0]     ), //i
    .p2sOut_valid              (busIn_io_p2sOut_valid                   ), //i
    .p2sOut_payload_last       (busIn_io_p2sOut_payload_last            ), //i
    .p2sOut_payload_tdata      (busIn_io_p2sOut_payload_tdata[15:0]     ), //i
    .p2sOut_payload_tuser      (busIn_io_p2sOut_payload_tuser[5:0]      ), //i
    .allGatherOut_tvalid       (node_allGatherOut_tvalid                ), //o
    .allGatherOut_tdata        (node_allGatherOut_tdata[15:0]           ), //o
    .allGatherOut_tuser        (node_allGatherOut_tuser[5:0]            ), //o
    .allReduceOut_tvalid       (node_allReduceOut_tvalid                ), //o
    .allReduceOut_tdata        (node_allReduceOut_tdata[15:0]           ), //o
    .allReduceOut_tuser        (node_allReduceOut_tuser[5:0]            ), //o
    .indexIn_valid             (sOut_io_zfIndexOut_valid                ), //i
    .indexIn_payload_last      (sOut_io_zfIndexOut_payload_last         ), //i
    .indexIn_payload_tdata     (sOut_io_zfIndexOut_payload_tdata[15:0]  ), //i
    .indexIn_payload_tuser     (sOut_io_zfIndexOut_payload_tuser[5:0]   ), //i
    .gateIndexIn_valid         (sOut_io_gateIndexOut_valid              ), //i
    .gateIndexIn_payload_last  (sOut_io_gateIndexOut_payload_last       ), //i
    .gateIndexIn_payload_tdata (sOut_io_gateIndexOut_payload_tdata[15:0]), //i
    .gateIndexIn_payload_tuser (sOut_io_gateIndexOut_payload_tuser[5:0] ), //i
    .ugIndexIn_valid           (sOut_io_ugIndexOut_valid                ), //i
    .ugIndexIn_payload_last    (sOut_io_ugIndexOut_payload_last         ), //i
    .ugIndexIn_payload_tdata   (sOut_io_ugIndexOut_payload_tdata[15:0]  ), //i
    .ugIndexIn_payload_tuser   (sOut_io_ugIndexOut_payload_tuser[5:0]   ), //i
    .indexOut_tvalid           (node_indexOut_tvalid                    ), //o
    .indexOut_tlast            (node_indexOut_tlast                     ), //o
    .indexOut_tdata            (node_indexOut_tdata[15:0]               ), //o
    .indexOut_tuser            (node_indexOut_tuser[5:0]                ), //o
    .c2c_from_valid            (c2c_from_valid                          ), //i
    .c2c_from_ready            (node_c2c_from_ready                     ), //o
    .c2c_from_payload_last     (c2c_from_payload_last                   ), //i
    .c2c_from_payload_tdata    (c2c_from_payload_tdata[15:0]            ), //i
    .c2c_from_payload_tuser    (c2c_from_payload_tuser[5:0]             ), //i
    .c2c_from_payload_tdest    (c2c_from_payload_tdest                  ), //i
    .c2c_to_valid              (node_c2c_to_valid                       ), //o
    .c2c_to_payload_last       (node_c2c_to_payload_last                ), //o
    .c2c_to_payload_tdata      (node_c2c_to_payload_tdata[15:0]         ), //o
    .c2c_to_payload_tuser      (node_c2c_to_payload_tuser[5:0]          ), //o
    .c2c_to_payload_tdest      (node_c2c_to_payload_tdest               ), //o
    .clk_0_resetn              (clk_0_resetn                            ), //i
    .clk_0_clk                 (clk_0_clk                               )  //i
  );
  InsertCfg_1 cfgInsert (
    .io_cfgIn_valid         (cfgGen_io_cfg_valid              ), //i
    .io_cfgIn_ready         (cfgInsert_io_cfgIn_ready         ), //o
    .io_cfgIn_payload       (cfgGen_io_cfg_payload[31:0]      ), //i
    .io_cfgOut_valid        (cfgInsert_io_cfgOut_valid        ), //o
    .io_cfgOut_ready        (engine_cfg_tready                ), //i
    .io_cfgOut_payload      (cfgInsert_io_cfgOut_payload[31:0]), //o
    .io_gtCnt_valid         (cfgInsert_io_gtCnt_valid         ), //o
    .io_gtCnt_payload       (cfgInsert_io_gtCnt_payload[15:0] ), //o
    .io_index_valid         (node_indexOut_tvalid             ), //i
    .io_index_payload_last  (node_indexOut_tlast              ), //i
    .io_index_payload_tdata (node_indexOut_tdata[15:0]        ), //i
    .io_index_payload_tuser (node_indexOut_tuser[5:0]         ), //i
    .status_enPredictor     (stateGen_2_status_enPredictor    ), //i
    .clk_0_clk              (clk_0_clk                        ), //i
    .clk_0_resetn           (clk_0_resetn                     )  //i
  );
  GreedySampler_1 sample (
    .logits_valid  (node_allReduceOut_tvalid     ), //i
    .logits_tdata  (node_allReduceOut_tdata[15:0]), //i
    .logits_tuser  (node_allReduceOut_tuser[5:0] ), //i
    .argmax_tvalid (sample_argmax_tvalid         ), //o
    .argmax_tdata  (sample_argmax_tdata[15:0]    ), //o
    .endOfDecode   (sample_endOfDecode           ), //o
    .clk_0_clk     (clk_0_clk                    ), //i
    .clk_0_resetn  (clk_0_resetn                 )  //i
  );
  SiluFp32_1 siluAct (
    .io_in_valid    (sOut_silu_to_valid          ), //i
    .io_in_payload  (sOut_silu_to_payload[15:0]  ), //i
    .io_out_valid   (siluAct_io_out_valid        ), //o
    .io_out_payload (siluAct_io_out_payload[15:0]), //o
    .clk_0_clk      (clk_0_clk                   ), //i
    .clk_0_resetn   (clk_0_resetn                )  //i
  );
  KvScaleZeroPacker_1 szPacker (
    .io_qScale_valid           (attn_io_quantScale_valid                 ), //i
    .io_qScale_payload         (attn_io_quantScale_payload[15:0]         ), //i
    .io_qZero_valid            (attn_io_quantZero_valid                  ), //i
    .io_qZero_payload          (attn_io_quantZero_payload[7:0]           ), //i
    .io_qOut_valid             (attn_io_afterQuant_valid                 ), //i
    .io_qOut_payload_last      (attn_io_afterQuant_payload_last          ), //i
    .io_qOut_payload_fragment  (attn_io_afterQuant_payload_fragment[7:0] ), //i
    .io_kvBus_valid            (szPacker_io_kvBus_valid                  ), //o
    .io_kvBus_ready            (cmdGen_local_kvBus_ready                 ), //i
    .io_kvBus_payload_last     (szPacker_io_kvBus_payload_last           ), //o
    .io_kvBus_payload_fragment (szPacker_io_kvBus_payload_fragment[511:0]), //o
    .io_kSzOut_valid           (szPacker_io_kSzOut_valid                 ), //o
    .io_kSzOut_ready           (axi_io_kSzOut_ready                      ), //i
    .io_kSzOut_payload         (szPacker_io_kSzOut_payload[31:0]         ), //o
    .io_vSzOut_valid           (szPacker_io_vSzOut_valid                 ), //o
    .io_vSzOut_ready           (axi_io_vSzOut_ready                      ), //i
    .io_vSzOut_payload         (szPacker_io_vSzOut_payload[31:0]         ), //o
    .io_nextLayer              (stateGen_2_status_nextLayer              ), //i
    .io_tokenIndexFlow_valid   (tokenIndexPipe_valid                     ), //i
    .io_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]                ), //i
    .clk_0_clk                 (clk_0_clk                                ), //i
    .clk_0_resetn              (clk_0_resetn                             )  //i
  );
  GenCfg_1 cfgGen (
    .io_cfg_valid                  (cfgGen_io_cfg_valid          ), //o
    .io_cfg_ready                  (cfgInsert_io_cfgIn_ready     ), //i
    .io_cfg_payload                (cfgGen_io_cfg_payload[31:0]  ), //o
    .status_tokenIndexFlow_valid   (tokenIndexPipe_valid         ), //i
    .status_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]    ), //i
    .status_enPredictor            (stateGen_2_status_enPredictor), //i
    .clk_0_clk                     (clk_0_clk                    ), //i
    .clk_0_resetn                  (clk_0_resetn                 )  //i
  );
  StateGen_1 stateGen_2 (
    .io_busIn_valid            (coreArea_0_core_axi_int_bus_fire  ), //i
    .io_busIn_payload_last     (axi_int_bus_payload_last          ), //i
    .io_busIn_payload_fragment (axi_int_bus_payload_tuser[5:0]    ), //i
    .io_engineOut_valid        (engine_vecOut_tvalid              ), //i
    .io_engineOut_payload      (engine_vecOut_tuser[5:0]          ), //i
    .io_dotOut_valid           (engine_scalarOut_tvalid           ), //i
    .io_dotOut_payload         (engine_scalarOut_tuser[5:0]       ), //i
    .io_gtCnt_valid            (cfgInsert_io_gtCnt_valid          ), //i
    .io_gtCnt_payload          (cfgInsert_io_gtCnt_payload[15:0]  ), //i
    .io_tokenIndexFlow_valid   (tokenIndexPipe_valid              ), //i
    .io_tokenIndexFlow_payload (tokenIndexPipe_tuser[5:0]         ), //i
    .status_argmaxVld          (sample_argmax_tvalid              ), //i
    .status_endOfDecode        (sample_endOfDecode                ), //i
    .status_enPredictor        (stateGen_2_status_enPredictor     ), //o
    .status_enProSparse        (stateGen_2_status_enProSparse     ), //o
    .status_tokenNextHit       (stateGen_2_status_tokenNextHit    ), //o
    .status_mlpNextHit         (stateGen_2_status_mlpNextHit      ), //o
    .status_vNextHit           (stateGen_2_status_vNextHit        ), //o
    .status_prefill            (stateGen_2_status_prefill         ), //o
    .status_flushRes           (stateGen_2_status_flushRes        ), //o
    .status_nextLayer          (stateGen_2_status_nextLayer       ), //o
    .status_nonZeroCnt         (stateGen_2_status_nonZeroCnt[15:0]), //o
    .status_logitsGen          (stateGen_2_status_logitsGen       ), //o
    .status_toLogitsGen        (stateGen_2_status_toLogitsGen     ), //o
    .status_token              (stateGen_2_status_token[9:0]      ), //o
    .status_layerCnt           (stateGen_2_status_layerCnt[4:0]   ), //o
    .clk_0_clk                 (clk_0_clk                         ), //i
    .clk_0_resetn              (clk_0_resetn                      )  //i
  );
  assign tokenIndex_ready = 1'b1;
  assign m_axi_hp_0_ar_valid = dmaHp_m_axi_0_arvalid;
  assign m_axi_hp_0_ar_payload_addr = dmaHp_m_axi_0_araddr;
  assign m_axi_hp_0_ar_payload_id = dmaHp_m_axi_0_arid;
  assign m_axi_hp_0_ar_payload_len = dmaHp_m_axi_0_arlen;
  assign m_axi_hp_0_ar_payload_size = dmaHp_m_axi_0_arsize;
  assign m_axi_hp_0_ar_payload_burst = dmaHp_m_axi_0_arburst;
  assign m_axi_hp_0_ar_payload_cache = dmaHp_m_axi_0_arcache;
  assign m_axi_hp_0_ar_payload_user = dmaHp_m_axi_0_aruser;
  assign m_axi_hp_0_ar_payload_prot = dmaHp_m_axi_0_arprot;
  assign m_axi_hp_0_aw_valid = dmaHp_m_axi_0_awvalid;
  assign m_axi_hp_0_aw_payload_addr = dmaHp_m_axi_0_awaddr;
  assign m_axi_hp_0_aw_payload_id = dmaHp_m_axi_0_awid;
  assign m_axi_hp_0_aw_payload_len = dmaHp_m_axi_0_awlen;
  assign m_axi_hp_0_aw_payload_size = dmaHp_m_axi_0_awsize;
  assign m_axi_hp_0_aw_payload_burst = dmaHp_m_axi_0_awburst;
  assign m_axi_hp_0_aw_payload_cache = dmaHp_m_axi_0_awcache;
  assign m_axi_hp_0_aw_payload_user = dmaHp_m_axi_0_awuser;
  assign m_axi_hp_0_aw_payload_prot = dmaHp_m_axi_0_awprot;
  assign m_axi_hp_0_w_valid = dmaHp_m_axi_0_wvalid;
  assign m_axi_hp_0_w_payload_data = dmaHp_m_axi_0_wdata;
  assign m_axi_hp_0_w_payload_strb = dmaHp_m_axi_0_wstrb;
  assign m_axi_hp_0_w_payload_last = dmaHp_m_axi_0_wlast;
  assign m_axi_hp_0_r_ready = dmaHp_m_axi_0_rready;
  assign m_axi_hp_0_b_ready = dmaHp_m_axi_0_bready;
  assign m_axi_hp_1_ar_valid = dmaHp_m_axi_1_arvalid;
  assign m_axi_hp_1_ar_payload_addr = dmaHp_m_axi_1_araddr;
  assign m_axi_hp_1_ar_payload_id = dmaHp_m_axi_1_arid;
  assign m_axi_hp_1_ar_payload_len = dmaHp_m_axi_1_arlen;
  assign m_axi_hp_1_ar_payload_size = dmaHp_m_axi_1_arsize;
  assign m_axi_hp_1_ar_payload_burst = dmaHp_m_axi_1_arburst;
  assign m_axi_hp_1_ar_payload_cache = dmaHp_m_axi_1_arcache;
  assign m_axi_hp_1_ar_payload_user = dmaHp_m_axi_1_aruser;
  assign m_axi_hp_1_ar_payload_prot = dmaHp_m_axi_1_arprot;
  assign m_axi_hp_1_aw_valid = dmaHp_m_axi_1_awvalid;
  assign m_axi_hp_1_aw_payload_addr = dmaHp_m_axi_1_awaddr;
  assign m_axi_hp_1_aw_payload_id = dmaHp_m_axi_1_awid;
  assign m_axi_hp_1_aw_payload_len = dmaHp_m_axi_1_awlen;
  assign m_axi_hp_1_aw_payload_size = dmaHp_m_axi_1_awsize;
  assign m_axi_hp_1_aw_payload_burst = dmaHp_m_axi_1_awburst;
  assign m_axi_hp_1_aw_payload_cache = dmaHp_m_axi_1_awcache;
  assign m_axi_hp_1_aw_payload_user = dmaHp_m_axi_1_awuser;
  assign m_axi_hp_1_aw_payload_prot = dmaHp_m_axi_1_awprot;
  assign m_axi_hp_1_w_valid = dmaHp_m_axi_1_wvalid;
  assign m_axi_hp_1_w_payload_data = dmaHp_m_axi_1_wdata;
  assign m_axi_hp_1_w_payload_strb = dmaHp_m_axi_1_wstrb;
  assign m_axi_hp_1_w_payload_last = dmaHp_m_axi_1_wlast;
  assign m_axi_hp_1_r_ready = dmaHp_m_axi_1_rready;
  assign m_axi_hp_1_b_ready = dmaHp_m_axi_1_bready;
  assign m_axi_hp_2_ar_valid = dmaHp_m_axi_2_arvalid;
  assign m_axi_hp_2_ar_payload_addr = dmaHp_m_axi_2_araddr;
  assign m_axi_hp_2_ar_payload_id = dmaHp_m_axi_2_arid;
  assign m_axi_hp_2_ar_payload_len = dmaHp_m_axi_2_arlen;
  assign m_axi_hp_2_ar_payload_size = dmaHp_m_axi_2_arsize;
  assign m_axi_hp_2_ar_payload_burst = dmaHp_m_axi_2_arburst;
  assign m_axi_hp_2_ar_payload_cache = dmaHp_m_axi_2_arcache;
  assign m_axi_hp_2_ar_payload_user = dmaHp_m_axi_2_aruser;
  assign m_axi_hp_2_ar_payload_prot = dmaHp_m_axi_2_arprot;
  assign m_axi_hp_2_aw_valid = dmaHp_m_axi_2_awvalid;
  assign m_axi_hp_2_aw_payload_addr = dmaHp_m_axi_2_awaddr;
  assign m_axi_hp_2_aw_payload_id = dmaHp_m_axi_2_awid;
  assign m_axi_hp_2_aw_payload_len = dmaHp_m_axi_2_awlen;
  assign m_axi_hp_2_aw_payload_size = dmaHp_m_axi_2_awsize;
  assign m_axi_hp_2_aw_payload_burst = dmaHp_m_axi_2_awburst;
  assign m_axi_hp_2_aw_payload_cache = dmaHp_m_axi_2_awcache;
  assign m_axi_hp_2_aw_payload_user = dmaHp_m_axi_2_awuser;
  assign m_axi_hp_2_aw_payload_prot = dmaHp_m_axi_2_awprot;
  assign m_axi_hp_2_w_valid = dmaHp_m_axi_2_wvalid;
  assign m_axi_hp_2_w_payload_data = dmaHp_m_axi_2_wdata;
  assign m_axi_hp_2_w_payload_strb = dmaHp_m_axi_2_wstrb;
  assign m_axi_hp_2_w_payload_last = dmaHp_m_axi_2_wlast;
  assign m_axi_hp_2_r_ready = dmaHp_m_axi_2_rready;
  assign m_axi_hp_2_b_ready = dmaHp_m_axi_2_bready;
  assign m_axi_hp_3_ar_valid = dmaHp_m_axi_3_arvalid;
  assign m_axi_hp_3_ar_payload_addr = dmaHp_m_axi_3_araddr;
  assign m_axi_hp_3_ar_payload_id = dmaHp_m_axi_3_arid;
  assign m_axi_hp_3_ar_payload_len = dmaHp_m_axi_3_arlen;
  assign m_axi_hp_3_ar_payload_size = dmaHp_m_axi_3_arsize;
  assign m_axi_hp_3_ar_payload_burst = dmaHp_m_axi_3_arburst;
  assign m_axi_hp_3_ar_payload_cache = dmaHp_m_axi_3_arcache;
  assign m_axi_hp_3_ar_payload_user = dmaHp_m_axi_3_aruser;
  assign m_axi_hp_3_ar_payload_prot = dmaHp_m_axi_3_arprot;
  assign m_axi_hp_3_aw_valid = dmaHp_m_axi_3_awvalid;
  assign m_axi_hp_3_aw_payload_addr = dmaHp_m_axi_3_awaddr;
  assign m_axi_hp_3_aw_payload_id = dmaHp_m_axi_3_awid;
  assign m_axi_hp_3_aw_payload_len = dmaHp_m_axi_3_awlen;
  assign m_axi_hp_3_aw_payload_size = dmaHp_m_axi_3_awsize;
  assign m_axi_hp_3_aw_payload_burst = dmaHp_m_axi_3_awburst;
  assign m_axi_hp_3_aw_payload_cache = dmaHp_m_axi_3_awcache;
  assign m_axi_hp_3_aw_payload_user = dmaHp_m_axi_3_awuser;
  assign m_axi_hp_3_aw_payload_prot = dmaHp_m_axi_3_awprot;
  assign m_axi_hp_3_w_valid = dmaHp_m_axi_3_wvalid;
  assign m_axi_hp_3_w_payload_data = dmaHp_m_axi_3_wdata;
  assign m_axi_hp_3_w_payload_strb = dmaHp_m_axi_3_wstrb;
  assign m_axi_hp_3_w_payload_last = dmaHp_m_axi_3_wlast;
  assign m_axi_hp_3_r_ready = dmaHp_m_axi_3_rready;
  assign m_axi_hp_3_b_ready = dmaHp_m_axi_3_bready;
  assign t_io_bus_payload_keep[63 : 0] = 64'hffffffffffffffff;
  assign c2c_to_valid = node_c2c_to_valid;
  assign c2c_to_payload_last = node_c2c_to_payload_last;
  assign c2c_to_payload_tdata = node_c2c_to_payload_tdata;
  assign c2c_to_payload_tuser = node_c2c_to_payload_tuser;
  assign c2c_to_payload_tdest = node_c2c_to_payload_tdest;
  assign c2c_from_ready = node_c2c_from_ready;
  assign t_io_p2sOut_valid = 23'h0;
  assign sOut_io_p2sOut_valid = t_io_p2sOut_valid[0];
  assign t_io_p2sOut_tdata = t_io_p2sOut_valid[22 : 1];
  assign sOut_io_p2sOut_tdata = t_io_p2sOut_tdata[15 : 0];
  assign sOut_io_p2sOut_tuser = t_io_p2sOut_tdata[21 : 16];
  assign coreArea_0_core_axi_int_bus_fire = (axi_int_bus_valid && busIn_io_bus_ready);
  assign toAxiLite_tokenCnt = {6'd0, t_toAxiLite_tokenCnt};
  assign toAxiLite_argMaxVld = sample_argmax_tvalid;
  assign toAxiLite_argMaxIndex = sample_argmax_tdata;
  assign toAxiLite_prefill = stateGen_2_status_prefill;
  assign toAxiLite_layerCnt = {3'd0, t_toAxiLite_layerCnt};
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      tokenIndexPipe_valid <= 1'b0;
    end else begin
      tokenIndexPipe_valid <= tokenIndex_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    tokenIndexPipe_tdata <= tokenIndex_tdata;
    tokenIndexPipe_tuser <= tokenIndex_tuser;
  end


endmodule

module AxiLiteCtrl (
  input  wire          io_ctrl_aw_valid,
  output wire          io_ctrl_aw_ready,
  input  wire [31:0]   io_ctrl_aw_payload_addr,
  input  wire [2:0]    io_ctrl_aw_payload_prot,
  input  wire          io_ctrl_w_valid,
  output wire          io_ctrl_w_ready,
  input  wire [31:0]   io_ctrl_w_payload_data,
  input  wire [3:0]    io_ctrl_w_payload_strb,
  output wire          io_ctrl_b_valid,
  input  wire          io_ctrl_b_ready,
  output wire [1:0]    io_ctrl_b_payload_resp,
  input  wire          io_ctrl_ar_valid,
  output wire          io_ctrl_ar_ready,
  input  wire [31:0]   io_ctrl_ar_payload_addr,
  input  wire [2:0]    io_ctrl_ar_payload_prot,
  output wire          io_ctrl_r_valid,
  input  wire          io_ctrl_r_ready,
  output wire [31:0]   io_ctrl_r_payload_data,
  output wire [1:0]    io_ctrl_r_payload_resp,
  output wire          io_tokenIndex_valid,
  output wire [15:0]   io_tokenIndex_tdata,
  output wire [5:0]    io_tokenIndex_tuser,
  output wire [1:0]    io_cmdSel,
  output wire [4:0]    io_presetLayer,
  output wire [9:0]    io_presetToken,
  input  wire [15:0]   status_tokenCnt,
  input  wire [7:0]    status_layerCnt,
  input  wire          status_argMaxVld,
  input  wire [15:0]   status_argMaxIndex,
  input  wire          status_prefill,
  output wire          resetOut,
  input  wire          S00_ACLK,
  input  wire          S00_ARESETN
);

  wire                liteBus_aw_valid;
  wire                liteBus_aw_ready;
  wire       [31:0]   liteBus_aw_payload_addr;
  wire       [2:0]    liteBus_aw_payload_prot;
  wire                liteBus_w_valid;
  wire                liteBus_w_ready;
  wire       [31:0]   liteBus_w_payload_data;
  wire       [3:0]    liteBus_w_payload_strb;
  wire                liteBus_b_valid;
  wire                liteBus_b_ready;
  wire       [1:0]    liteBus_b_payload_resp;
  wire                liteBus_ar_valid;
  wire                liteBus_ar_ready;
  wire       [31:0]   liteBus_ar_payload_addr;
  wire       [2:0]    liteBus_ar_payload_prot;
  wire                liteBus_r_valid;
  wire                liteBus_r_ready;
  wire       [31:0]   liteBus_r_payload_data;
  wire       [1:0]    liteBus_r_payload_resp;
  wire                ctrl_readErrorFlag;
  wire                ctrl_writeErrorFlag;
  wire                ctrl_readHaltRequest;
  wire                ctrl_writeHaltRequest;
  wire                ctrl_writeJoinEvent_valid;
  wire                ctrl_writeJoinEvent_ready;
  wire                ctrl_writeOccur;
  reg        [1:0]    ctrl_writeRsp_resp;
  wire                ctrl_writeJoinEvent_translated_valid;
  wire                ctrl_writeJoinEvent_translated_ready;
  wire       [1:0]    ctrl_writeJoinEvent_translated_payload_resp;
  wire                t_ctrl_writeJoinEvent_translated_ready;
  wire                t_ctrl_writeJoinEvent_translated_ready_1;
  wire                t_liteBus_b_valid;
  reg                 t_liteBus_b_valid_1;
  reg        [1:0]    t_liteBus_b_payload_resp;
  wire                ctrl_readDataStage_valid;
  wire                ctrl_readDataStage_ready;
  wire       [31:0]   ctrl_readDataStage_payload_addr;
  wire       [2:0]    ctrl_readDataStage_payload_prot;
  reg                 liteBus_ar_rValid;
  wire                ctrl_readDataStage_fire;
  reg        [31:0]   liteBus_ar_rData_addr;
  reg        [2:0]    liteBus_ar_rData_prot;
  reg        [31:0]   ctrl_readRsp_data;
  reg        [1:0]    ctrl_readRsp_resp;
  wire                t_liteBus_r_valid;
  wire       [31:0]   ctrl_readAddressMasked;
  wire       [31:0]   ctrl_writeAddressMasked;
  wire                ctrl_readOccur;
  reg        [15:0]   token;
  reg                 tokenVld;
  reg                 isPrefillToken;
  reg                 isPrefillLastToken;
  reg                 isDecodeToken;
  reg        [15:0]   destTokenCnt;
  reg        [1:0]    cmdSel;
  reg                 softReset;
  reg        [1:0]    resetCnt;
  wire                resetCntOvf;
  reg                 resetKeep;
  reg                 resetKeep_delay_1;
  reg                 resetKeep_delay_2;
  reg                 resetKeep_delay_3;
  reg                 resetKeep_delay_4;
  reg                 resetKeep_delay_5;
  reg                 resetKeep_delay_6;
  reg                 resetKeep_delay_7;
  reg                 resetKeep_delay_8;
  reg                 resetKeep_delay_9;
  reg                 resetKeep_delay_10;
  reg                 resetKeep_delay_11;
  reg                 resetKeep_delay_12;
  reg                 resetKeep_delay_13;
  reg                 resetKeep_delay_14;
  reg                 resetKeep_delay_15;
  reg                 resetKeep_delay_16;
  reg                 resetKeep_delay_17;
  reg                 resetKeep_delay_18;
  reg                 resetKeep_delay_19;
  reg                 resetKeep_delay_20;
  reg                 resetKeep_delay_21;
  reg                 resetKeep_delay_22;
  reg                 resetKeep_delay_23;
  reg                 resetKeep_delay_24;
  reg                 resetKeep_delay_25;
  reg                 resetKeep_delay_26;
  reg                 resetKeep_delay_27;
  reg                 resetKeep_delay_28;
  reg                 resetKeep_delay_29;
  reg                 resetKeep_delay_30;
  reg                 resetKeep_delay_31;
  reg                 resetKeep_delay_32;
  reg                 resetKeep_delay_33;
  reg                 resetKeep_delay_34;
  reg                 resetKeep_delay_35;
  reg                 resetKeep_delay_36;
  reg                 resetKeep_delay_37;
  reg                 resetKeep_delay_38;
  reg                 resetKeep_delay_39;
  reg                 resetKeep_delay_40;
  reg                 resetKeep_delay_41;
  reg                 resetKeep_delay_42;
  reg                 resetKeep_delay_43;
  reg                 resetKeep_delay_44;
  reg                 resetKeep_delay_45;
  reg                 resetKeep_delay_46;
  reg                 resetKeep_delay_47;
  reg                 resetKeep_delay_48;
  reg                 resetKeep_delay_49;
  reg                 resetKeep_delay_50;
  reg                 resetKeep_delay_51;
  reg                 resetKeep_delay_52;
  reg                 resetKeep_delay_53;
  reg                 resetKeep_delay_54;
  reg                 resetKeep_delay_55;
  reg                 resetKeep_delay_56;
  reg                 resetKeep_delay_57;
  reg                 resetKeep_delay_58;
  reg                 resetKeep_delay_59;
  reg                 resetKeep_delay_60;
  reg                 resetKeep_delay_61;
  reg                 resetKeep_delay_62;
  reg                 resetKeep_delay_63;
  reg                 resetDly;
  reg        [15:0]   status_tokenCnt_delay_1;
  reg        [15:0]   tokenCntDly;
  reg                 status_argMaxVld_delay_1;
  reg                 argMaxVldDly;
  reg        [14:0]   t_argMaxIndexDly;
  reg        [14:0]   argMaxIndexDly;
  reg                 status_prefill_delay_1;
  reg                 prefillDly;
  reg        [7:0]    status_layerCnt_delay_1;
  reg        [7:0]    layerCntDly;
  reg                 argMaxVldClr;
  reg                 argMaxVldLock;
  reg        [14:0]   argMaxIndexLock;
  reg        [31:0]   testReg;
  wire       [31:0]   magicNum;
  reg        [31:0]   timer;
  reg                 flag;
  reg        [5:0]    tokenUseTag;

  assign liteBus_aw_valid = io_ctrl_aw_valid;
  assign io_ctrl_aw_ready = liteBus_aw_ready;
  assign liteBus_aw_payload_prot = io_ctrl_aw_payload_prot;
  assign liteBus_w_valid = io_ctrl_w_valid;
  assign io_ctrl_w_ready = liteBus_w_ready;
  assign liteBus_w_payload_data = io_ctrl_w_payload_data;
  assign liteBus_w_payload_strb = io_ctrl_w_payload_strb;
  assign io_ctrl_b_valid = liteBus_b_valid;
  assign liteBus_b_ready = io_ctrl_b_ready;
  assign io_ctrl_b_payload_resp = liteBus_b_payload_resp;
  assign liteBus_ar_valid = io_ctrl_ar_valid;
  assign io_ctrl_ar_ready = liteBus_ar_ready;
  assign liteBus_ar_payload_prot = io_ctrl_ar_payload_prot;
  assign io_ctrl_r_valid = liteBus_r_valid;
  assign liteBus_r_ready = io_ctrl_r_ready;
  assign io_ctrl_r_payload_data = liteBus_r_payload_data;
  assign io_ctrl_r_payload_resp = liteBus_r_payload_resp;
  assign liteBus_ar_payload_addr = {22'h0,io_ctrl_ar_payload_addr[9 : 0]};
  assign liteBus_aw_payload_addr = {22'h0,io_ctrl_aw_payload_addr[9 : 0]};
  assign ctrl_readErrorFlag = 1'b0;
  assign ctrl_writeErrorFlag = 1'b0;
  assign ctrl_readHaltRequest = 1'b0;
  assign ctrl_writeHaltRequest = 1'b0;
  assign ctrl_writeOccur = (ctrl_writeJoinEvent_valid && ctrl_writeJoinEvent_ready);
  assign ctrl_writeJoinEvent_valid = (liteBus_aw_valid && liteBus_w_valid);
  assign liteBus_aw_ready = ctrl_writeOccur;
  assign liteBus_w_ready = ctrl_writeOccur;
  assign ctrl_writeJoinEvent_translated_valid = ctrl_writeJoinEvent_valid;
  assign ctrl_writeJoinEvent_ready = ctrl_writeJoinEvent_translated_ready;
  assign ctrl_writeJoinEvent_translated_payload_resp = ctrl_writeRsp_resp;
  assign t_ctrl_writeJoinEvent_translated_ready = (! ctrl_writeHaltRequest);
  assign ctrl_writeJoinEvent_translated_ready = (t_ctrl_writeJoinEvent_translated_ready_1 && t_ctrl_writeJoinEvent_translated_ready);
  assign t_ctrl_writeJoinEvent_translated_ready_1 = (! t_liteBus_b_valid_1);
  assign t_liteBus_b_valid = t_liteBus_b_valid_1;
  assign liteBus_b_valid = t_liteBus_b_valid;
  assign liteBus_b_payload_resp = t_liteBus_b_payload_resp;
  assign ctrl_readDataStage_fire = (ctrl_readDataStage_valid && ctrl_readDataStage_ready);
  assign liteBus_ar_ready = (! liteBus_ar_rValid);
  assign ctrl_readDataStage_valid = liteBus_ar_rValid;
  assign ctrl_readDataStage_payload_addr = liteBus_ar_rData_addr;
  assign ctrl_readDataStage_payload_prot = liteBus_ar_rData_prot;
  assign t_liteBus_r_valid = (! ctrl_readHaltRequest);
  assign ctrl_readDataStage_ready = (liteBus_r_ready && t_liteBus_r_valid);
  assign liteBus_r_valid = (ctrl_readDataStage_valid && t_liteBus_r_valid);
  assign liteBus_r_payload_data = ctrl_readRsp_data;
  assign liteBus_r_payload_resp = ctrl_readRsp_resp;
  always @(*) begin
    if(ctrl_writeErrorFlag) begin
      ctrl_writeRsp_resp = 2'b10;
    end else begin
      ctrl_writeRsp_resp = 2'b00;
    end
  end

  always @(*) begin
    if(ctrl_readErrorFlag) begin
      ctrl_readRsp_resp = 2'b10;
    end else begin
      ctrl_readRsp_resp = 2'b00;
    end
  end

  always @(*) begin
    ctrl_readRsp_data = 32'h0;
    case(ctrl_readAddressMasked)
      32'h00000004 : begin
        ctrl_readRsp_data[15 : 0] = tokenCntDly;
        ctrl_readRsp_data[30 : 16] = argMaxIndexLock;
        ctrl_readRsp_data[31 : 31] = argMaxVldLock;
      end
      32'h00000008 : begin
        ctrl_readRsp_data[0 : 0] = prefillDly;
      end
      32'h00000020 : begin
        ctrl_readRsp_data[7 : 0] = layerCntDly;
      end
      32'h0000000c : begin
        ctrl_readRsp_data[31 : 0] = testReg;
      end
      32'h00000044 : begin
        ctrl_readRsp_data[31 : 0] = magicNum;
      end
      32'h00000010 : begin
        ctrl_readRsp_data[31 : 0] = timer;
      end
      default : begin
      end
    endcase
  end

  assign ctrl_readAddressMasked = (ctrl_readDataStage_payload_addr & (~ 32'h00000003));
  assign ctrl_writeAddressMasked = (liteBus_aw_payload_addr & (~ 32'h00000003));
  assign ctrl_readOccur = (liteBus_r_valid && liteBus_r_ready);
  assign resetCntOvf = (resetCnt == 2'b11);
  assign resetOut = resetDly;
  assign magicNum = 32'h0000004d;
  always @(*) begin
    tokenUseTag = 6'h0;
    if(isPrefillToken) begin
      tokenUseTag = 6'h0;
    end
    if(isPrefillLastToken) begin
      tokenUseTag = 6'h01;
    end
    if(isDecodeToken) begin
      tokenUseTag = 6'h02;
    end
  end

  assign io_tokenIndex_tdata = token;
  assign io_tokenIndex_tuser = tokenUseTag;
  assign io_tokenIndex_valid = tokenVld;
  assign io_cmdSel = cmdSel;
  always @(posedge S00_ACLK or negedge S00_ARESETN) begin
    if(!S00_ARESETN) begin
      t_liteBus_b_valid_1 <= 1'b0;
      liteBus_ar_rValid <= 1'b0;
      token <= 16'h0;
      tokenVld <= 1'b0;
      isPrefillToken <= 1'b0;
      isPrefillLastToken <= 1'b0;
      isDecodeToken <= 1'b0;
      destTokenCnt <= 16'h0;
      cmdSel <= 2'b00;
      softReset <= 1'b0;
      resetCnt <= 2'b00;
      resetKeep <= 1'b0;
      resetKeep_delay_1 <= 1'b0;
      resetKeep_delay_2 <= 1'b0;
      resetKeep_delay_3 <= 1'b0;
      resetKeep_delay_4 <= 1'b0;
      resetKeep_delay_5 <= 1'b0;
      resetKeep_delay_6 <= 1'b0;
      resetKeep_delay_7 <= 1'b0;
      resetKeep_delay_8 <= 1'b0;
      resetKeep_delay_9 <= 1'b0;
      resetKeep_delay_10 <= 1'b0;
      resetKeep_delay_11 <= 1'b0;
      resetKeep_delay_12 <= 1'b0;
      resetKeep_delay_13 <= 1'b0;
      resetKeep_delay_14 <= 1'b0;
      resetKeep_delay_15 <= 1'b0;
      resetKeep_delay_16 <= 1'b0;
      resetKeep_delay_17 <= 1'b0;
      resetKeep_delay_18 <= 1'b0;
      resetKeep_delay_19 <= 1'b0;
      resetKeep_delay_20 <= 1'b0;
      resetKeep_delay_21 <= 1'b0;
      resetKeep_delay_22 <= 1'b0;
      resetKeep_delay_23 <= 1'b0;
      resetKeep_delay_24 <= 1'b0;
      resetKeep_delay_25 <= 1'b0;
      resetKeep_delay_26 <= 1'b0;
      resetKeep_delay_27 <= 1'b0;
      resetKeep_delay_28 <= 1'b0;
      resetKeep_delay_29 <= 1'b0;
      resetKeep_delay_30 <= 1'b0;
      resetKeep_delay_31 <= 1'b0;
      resetKeep_delay_32 <= 1'b0;
      resetKeep_delay_33 <= 1'b0;
      resetKeep_delay_34 <= 1'b0;
      resetKeep_delay_35 <= 1'b0;
      resetKeep_delay_36 <= 1'b0;
      resetKeep_delay_37 <= 1'b0;
      resetKeep_delay_38 <= 1'b0;
      resetKeep_delay_39 <= 1'b0;
      resetKeep_delay_40 <= 1'b0;
      resetKeep_delay_41 <= 1'b0;
      resetKeep_delay_42 <= 1'b0;
      resetKeep_delay_43 <= 1'b0;
      resetKeep_delay_44 <= 1'b0;
      resetKeep_delay_45 <= 1'b0;
      resetKeep_delay_46 <= 1'b0;
      resetKeep_delay_47 <= 1'b0;
      resetKeep_delay_48 <= 1'b0;
      resetKeep_delay_49 <= 1'b0;
      resetKeep_delay_50 <= 1'b0;
      resetKeep_delay_51 <= 1'b0;
      resetKeep_delay_52 <= 1'b0;
      resetKeep_delay_53 <= 1'b0;
      resetKeep_delay_54 <= 1'b0;
      resetKeep_delay_55 <= 1'b0;
      resetKeep_delay_56 <= 1'b0;
      resetKeep_delay_57 <= 1'b0;
      resetKeep_delay_58 <= 1'b0;
      resetKeep_delay_59 <= 1'b0;
      resetKeep_delay_60 <= 1'b0;
      resetKeep_delay_61 <= 1'b0;
      resetKeep_delay_62 <= 1'b0;
      resetKeep_delay_63 <= 1'b0;
      resetDly <= 1'b0;
      status_tokenCnt_delay_1 <= 16'h0;
      tokenCntDly <= 16'h0;
      status_argMaxVld_delay_1 <= 1'b0;
      argMaxVldDly <= 1'b0;
      t_argMaxIndexDly <= 15'h0;
      argMaxIndexDly <= 15'h0;
      status_prefill_delay_1 <= 1'b0;
      prefillDly <= 1'b0;
      status_layerCnt_delay_1 <= 8'h0;
      layerCntDly <= 8'h0;
      argMaxVldClr <= 1'b0;
      argMaxVldLock <= 1'b0;
      argMaxIndexLock <= 15'h0;
      testReg <= 32'h0;
      timer <= 32'h0;
      flag <= 1'b0;
    end else begin
      if((ctrl_writeJoinEvent_translated_valid && t_ctrl_writeJoinEvent_translated_ready)) begin
        t_liteBus_b_valid_1 <= 1'b1;
      end
      if((t_liteBus_b_valid && liteBus_b_ready)) begin
        t_liteBus_b_valid_1 <= 1'b0;
      end
      if(liteBus_ar_valid) begin
        liteBus_ar_rValid <= 1'b1;
      end
      if(ctrl_readDataStage_fire) begin
        liteBus_ar_rValid <= 1'b0;
      end
      tokenVld <= 1'b0;
      softReset <= 1'b0;
      if(softReset) begin
        resetKeep <= 1'b1;
      end
      if(resetKeep) begin
        resetCnt <= (resetCnt + 2'b01);
        if(resetCntOvf) begin
          resetCnt <= 2'b00;
          resetKeep <= 1'b0;
        end
      end
      resetKeep_delay_1 <= resetKeep;
      resetKeep_delay_2 <= resetKeep_delay_1;
      resetKeep_delay_3 <= resetKeep_delay_2;
      resetKeep_delay_4 <= resetKeep_delay_3;
      resetKeep_delay_5 <= resetKeep_delay_4;
      resetKeep_delay_6 <= resetKeep_delay_5;
      resetKeep_delay_7 <= resetKeep_delay_6;
      resetKeep_delay_8 <= resetKeep_delay_7;
      resetKeep_delay_9 <= resetKeep_delay_8;
      resetKeep_delay_10 <= resetKeep_delay_9;
      resetKeep_delay_11 <= resetKeep_delay_10;
      resetKeep_delay_12 <= resetKeep_delay_11;
      resetKeep_delay_13 <= resetKeep_delay_12;
      resetKeep_delay_14 <= resetKeep_delay_13;
      resetKeep_delay_15 <= resetKeep_delay_14;
      resetKeep_delay_16 <= resetKeep_delay_15;
      resetKeep_delay_17 <= resetKeep_delay_16;
      resetKeep_delay_18 <= resetKeep_delay_17;
      resetKeep_delay_19 <= resetKeep_delay_18;
      resetKeep_delay_20 <= resetKeep_delay_19;
      resetKeep_delay_21 <= resetKeep_delay_20;
      resetKeep_delay_22 <= resetKeep_delay_21;
      resetKeep_delay_23 <= resetKeep_delay_22;
      resetKeep_delay_24 <= resetKeep_delay_23;
      resetKeep_delay_25 <= resetKeep_delay_24;
      resetKeep_delay_26 <= resetKeep_delay_25;
      resetKeep_delay_27 <= resetKeep_delay_26;
      resetKeep_delay_28 <= resetKeep_delay_27;
      resetKeep_delay_29 <= resetKeep_delay_28;
      resetKeep_delay_30 <= resetKeep_delay_29;
      resetKeep_delay_31 <= resetKeep_delay_30;
      resetKeep_delay_32 <= resetKeep_delay_31;
      resetKeep_delay_33 <= resetKeep_delay_32;
      resetKeep_delay_34 <= resetKeep_delay_33;
      resetKeep_delay_35 <= resetKeep_delay_34;
      resetKeep_delay_36 <= resetKeep_delay_35;
      resetKeep_delay_37 <= resetKeep_delay_36;
      resetKeep_delay_38 <= resetKeep_delay_37;
      resetKeep_delay_39 <= resetKeep_delay_38;
      resetKeep_delay_40 <= resetKeep_delay_39;
      resetKeep_delay_41 <= resetKeep_delay_40;
      resetKeep_delay_42 <= resetKeep_delay_41;
      resetKeep_delay_43 <= resetKeep_delay_42;
      resetKeep_delay_44 <= resetKeep_delay_43;
      resetKeep_delay_45 <= resetKeep_delay_44;
      resetKeep_delay_46 <= resetKeep_delay_45;
      resetKeep_delay_47 <= resetKeep_delay_46;
      resetKeep_delay_48 <= resetKeep_delay_47;
      resetKeep_delay_49 <= resetKeep_delay_48;
      resetKeep_delay_50 <= resetKeep_delay_49;
      resetKeep_delay_51 <= resetKeep_delay_50;
      resetKeep_delay_52 <= resetKeep_delay_51;
      resetKeep_delay_53 <= resetKeep_delay_52;
      resetKeep_delay_54 <= resetKeep_delay_53;
      resetKeep_delay_55 <= resetKeep_delay_54;
      resetKeep_delay_56 <= resetKeep_delay_55;
      resetKeep_delay_57 <= resetKeep_delay_56;
      resetKeep_delay_58 <= resetKeep_delay_57;
      resetKeep_delay_59 <= resetKeep_delay_58;
      resetKeep_delay_60 <= resetKeep_delay_59;
      resetKeep_delay_61 <= resetKeep_delay_60;
      resetKeep_delay_62 <= resetKeep_delay_61;
      resetKeep_delay_63 <= resetKeep_delay_62;
      resetDly <= resetKeep_delay_63;
      status_tokenCnt_delay_1 <= status_tokenCnt;
      tokenCntDly <= status_tokenCnt_delay_1;
      status_argMaxVld_delay_1 <= status_argMaxVld;
      argMaxVldDly <= status_argMaxVld_delay_1;
      t_argMaxIndexDly <= status_argMaxIndex[14:0];
      argMaxIndexDly <= t_argMaxIndexDly;
      status_prefill_delay_1 <= status_prefill;
      prefillDly <= status_prefill_delay_1;
      status_layerCnt_delay_1 <= status_layerCnt;
      layerCntDly <= status_layerCnt_delay_1;
      argMaxVldClr <= 1'b0;
      if(argMaxVldDly) begin
        argMaxVldLock <= 1'b1;
      end
      if(argMaxVldClr) begin
        argMaxVldLock <= 1'b0;
      end
      if(argMaxVldDly) begin
        argMaxIndexLock <= argMaxIndexDly;
      end
      if(argMaxVldClr) begin
        argMaxIndexLock <= 15'h0;
      end
      if(flag) begin
        timer <= (timer + 32'h00000001);
      end
      if(tokenVld) begin
        flag <= 1'b1;
      end
      if((destTokenCnt == status_tokenCnt)) begin
        flag <= 1'b0;
      end
      case(ctrl_writeAddressMasked)
        32'h0 : begin
          if(ctrl_writeOccur) begin
            token <= liteBus_w_payload_data[15 : 0];
            tokenVld <= liteBus_w_payload_data[16];
            isPrefillToken <= liteBus_w_payload_data[17];
            isPrefillLastToken <= liteBus_w_payload_data[18];
            isDecodeToken <= liteBus_w_payload_data[19];
          end
        end
        32'h00000024 : begin
          if(ctrl_writeOccur) begin
            cmdSel <= liteBus_w_payload_data[1 : 0];
          end
        end
        32'h000000c0 : begin
          if(ctrl_writeOccur) begin
            softReset <= liteBus_w_payload_data[0];
          end
        end
        32'h00000080 : begin
          if(ctrl_writeOccur) begin
            argMaxVldClr <= liteBus_w_payload_data[0];
          end
        end
        32'h0000000c : begin
          if(ctrl_writeOccur) begin
            testReg <= liteBus_w_payload_data[31 : 0];
          end
        end
        32'h00000010 : begin
          if(ctrl_writeOccur) begin
            destTokenCnt <= liteBus_w_payload_data[15 : 0];
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @(posedge S00_ACLK) begin
    if(t_ctrl_writeJoinEvent_translated_ready_1) begin
      t_liteBus_b_payload_resp <= ctrl_writeJoinEvent_translated_payload_resp;
    end
    if(liteBus_ar_ready) begin
      liteBus_ar_rData_addr <= liteBus_ar_payload_addr;
      liteBus_ar_rData_prot <= liteBus_ar_payload_prot;
    end
  end


endmodule

module StateGen (
  input  wire          io_busIn_valid,
  input  wire          io_busIn_payload_last,
  input  wire [5:0]    io_busIn_payload_fragment,
  input  wire          io_engineOut_valid,
  input  wire [5:0]    io_engineOut_payload,
  input  wire          io_dotOut_valid,
  input  wire [5:0]    io_dotOut_payload,
  input  wire          io_gtCnt_valid,
  input  wire [15:0]   io_gtCnt_payload,
  input  wire          io_tokenIndexFlow_valid,
  input  wire [5:0]    io_tokenIndexFlow_payload,
  input  wire          status_argmaxVld,
  input  wire          status_endOfDecode,
  output wire          status_enPredictor,
  output wire          status_enProSparse,
  output wire          status_tokenNextHit,
  output wire          status_mlpNextHit,
  output wire          status_vNextHit,
  output wire          status_prefill,
  output wire          status_flushRes,
  output wire          status_nextLayer,
  output wire [15:0]   status_nonZeroCnt,
  output wire          status_logitsGen,
  output wire          status_toLogitsGen,
  output wire [9:0]    status_token,
  output wire [4:0]    status_layerCnt,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                busAlign_prefillIn_fifo_io_pop_ready;
  wire                dataAlign_prefillIn_fifo_io_pop_ready;
  wire                busAlign_prefillIn_fifo_io_push_ready;
  wire                busAlign_prefillIn_fifo_io_pop_valid;
  wire                busAlign_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    busAlign_prefillIn_fifo_io_occupancy;
  wire       [6:0]    busAlign_prefillIn_fifo_io_availability;
  wire                dataAlign_prefillIn_fifo_io_push_ready;
  wire                dataAlign_prefillIn_fifo_io_pop_valid;
  wire                dataAlign_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    dataAlign_prefillIn_fifo_io_occupancy;
  wire       [6:0]    dataAlign_prefillIn_fifo_io_availability;
  wire                busAlign_prefillIn_valid;
  wire                busAlign_prefillIn_ready;
  wire                busAlign_prefillIn_payload;
  wire                busAlign_prefillLastHit;
  wire                busAlign_prefillHit;
  wire                busAlign_attnVHit;
  wire                busAlign_mlpDHit;
  wire                busAlign_lmHeadHit;
  reg        [3:0]    busAlign_headCnt;
  wire                busAlign_headCntOvf;
  reg                 busAlign_lastHead;
  wire                busAlign_headVld;
  reg        [4:0]    busAlign_layerCnt;
  reg                 busAlign_lastLayer;
  wire                busAlign_layerCntAbout2Ovf;
  reg                 busAlign_enLayerCntInc;
  reg                 busAlign_prefillFirstToken;
  wire                stateGen_2_busAlign_prefillIn_fifo_io_pop_fire;
  wire                busAlign_noAttn;
  wire                busAlign_tokenNextHit;
  wire                busAlign_vNextHit;
  wire                dataAlign_prefillIn_valid;
  wire                dataAlign_prefillIn_ready;
  wire                dataAlign_prefillIn_payload;
  wire                dataAlign_mlpHit;
  wire                dataAlign_vHit;
  reg        [3:0]    dataAlign_engineOutCnt;
  wire                dataAlign_engineOutCntOvf;
  wire                dataAlign_engineOutVld;
  reg        [10:0]   dataAlign_dotOutCnt;
  wire                dataAlign_dotOutCntOvf;
  wire                dataAlign_dotOutVld;
  wire                dataAlign_mlpDone;
  wire                dataAlign_vDone;
  reg                 dataAlign_prefillFirstToken;
  reg                 dataAlign_lastLayer;
  reg                 dataAlign_enInc;
  reg        [4:0]    dataAlign_layerCnt;
  reg        [9:0]    dataAlign_tokenCnt;
  wire                dataAlign_layerOvf;
  wire                dataAlign_beforeLastLayer;
  reg        [15:0]   dataAlign_nonZeroCnt;
  wire                dataAlign_flushRes;
  reg                 dataAlign_logitsGen;

  StreamFifo_69 busAlign_prefillIn_fifo (
    .io_push_valid   (busAlign_prefillIn_valid                    ), //i
    .io_push_ready   (busAlign_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (busAlign_prefillIn_payload                  ), //i
    .io_pop_valid    (busAlign_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (busAlign_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (busAlign_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                        ), //i
    .io_occupancy    (busAlign_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (busAlign_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                                   ), //i
    .clk_1_resetn    (clk_1_resetn                                )  //i
  );
  StreamFifo_69 dataAlign_prefillIn_fifo (
    .io_push_valid   (dataAlign_prefillIn_valid                    ), //i
    .io_push_ready   (dataAlign_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (dataAlign_prefillIn_payload                  ), //i
    .io_pop_valid    (dataAlign_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (dataAlign_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (dataAlign_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                         ), //i
    .io_occupancy    (dataAlign_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (dataAlign_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                                    ), //i
    .clk_1_resetn    (clk_1_resetn                                 )  //i
  );
  assign status_enPredictor = 1'b0;
  assign status_enProSparse = 1'b0;
  assign busAlign_prefillIn_valid = io_tokenIndexFlow_valid;
  assign busAlign_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign busAlign_prefillIn_ready = busAlign_prefillIn_fifo_io_push_ready;
  assign busAlign_prefillLastHit = (io_busIn_payload_fragment == 6'h01);
  assign busAlign_prefillHit = ((io_busIn_payload_fragment == 6'h0) || busAlign_prefillLastHit);
  assign busAlign_attnVHit = (io_busIn_payload_fragment == 6'h07);
  assign busAlign_mlpDHit = (io_busIn_payload_fragment == 6'h11);
  assign busAlign_lmHeadHit = (io_busIn_payload_fragment == 6'h13);
  assign busAlign_headCntOvf = (busAlign_headCnt == 4'b1111);
  assign busAlign_layerCntAbout2Ovf = (busAlign_layerCnt == 5'h1e);
  assign busAlign_prefillIn_fifo_io_pop_ready = (busAlign_enLayerCntInc && busAlign_lastLayer);
  assign stateGen_2_busAlign_prefillIn_fifo_io_pop_fire = (busAlign_prefillIn_fifo_io_pop_valid && busAlign_prefillIn_fifo_io_pop_ready);
  assign busAlign_headVld = ((io_busIn_valid && io_busIn_payload_last) && busAlign_attnVHit);
  always @(*) begin
    busAlign_enLayerCntInc = ((io_busIn_valid && io_busIn_payload_last) && busAlign_mlpDHit);
    if((busAlign_prefillIn_fifo_io_pop_payload && busAlign_lastLayer)) begin
      busAlign_enLayerCntInc = (busAlign_headVld && busAlign_headCntOvf);
    end
  end

  assign busAlign_noAttn = (busAlign_prefillFirstToken || (busAlign_prefillIn_fifo_io_pop_payload && busAlign_lastLayer));
  assign busAlign_tokenNextHit = ((((busAlign_attnVHit && busAlign_prefillIn_fifo_io_pop_payload) && busAlign_lastLayer) && busAlign_lastHead) || busAlign_lmHeadHit);
  assign busAlign_vNextHit = (busAlign_attnVHit && (! busAlign_noAttn));
  assign status_tokenNextHit = busAlign_tokenNextHit;
  assign status_vNextHit = busAlign_vNextHit;
  assign status_mlpNextHit = busAlign_mlpDHit;
  assign status_prefill = busAlign_prefillIn_fifo_io_pop_payload;
  assign dataAlign_prefillIn_valid = io_tokenIndexFlow_valid;
  assign dataAlign_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign dataAlign_prefillIn_ready = dataAlign_prefillIn_fifo_io_push_ready;
  assign dataAlign_mlpHit = (io_engineOut_payload == 6'h1f);
  assign dataAlign_vHit = ((io_dotOut_payload == 6'h07) || (io_dotOut_payload == 6'h13));
  assign dataAlign_engineOutCntOvf = (dataAlign_engineOutCnt == 4'b1111);
  assign dataAlign_dotOutCntOvf = (dataAlign_dotOutCnt == 11'h7ff);
  assign dataAlign_mlpDone = (dataAlign_engineOutVld && dataAlign_engineOutCntOvf);
  assign dataAlign_vDone = (dataAlign_dotOutVld && dataAlign_dotOutCntOvf);
  assign dataAlign_engineOutVld = (io_engineOut_valid && dataAlign_mlpHit);
  assign dataAlign_dotOutVld = (io_dotOut_valid && dataAlign_vHit);
  assign dataAlign_layerOvf = (dataAlign_layerCnt == 5'h1f);
  assign dataAlign_beforeLastLayer = (dataAlign_layerCnt == 5'h1e);
  always @(*) begin
    dataAlign_enInc = dataAlign_mlpDone;
    if((dataAlign_prefillIn_fifo_io_pop_payload && dataAlign_lastLayer)) begin
      dataAlign_enInc = dataAlign_vDone;
    end
  end

  assign dataAlign_prefillIn_fifo_io_pop_ready = (dataAlign_enInc && dataAlign_lastLayer);
  assign dataAlign_flushRes = ((dataAlign_prefillIn_fifo_io_pop_payload ? dataAlign_beforeLastLayer : dataAlign_lastLayer) && dataAlign_engineOutVld);
  assign status_flushRes = dataAlign_flushRes;
  assign status_nextLayer = dataAlign_enInc;
  assign status_nonZeroCnt = dataAlign_nonZeroCnt;
  assign status_logitsGen = dataAlign_logitsGen;
  assign status_toLogitsGen = ((! dataAlign_prefillIn_fifo_io_pop_payload) && dataAlign_lastLayer);
  assign status_token = dataAlign_tokenCnt;
  assign status_layerCnt = dataAlign_layerCnt;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      busAlign_headCnt <= 4'b0000;
      busAlign_lastHead <= 1'b0;
      busAlign_layerCnt <= 5'h0;
      busAlign_lastLayer <= 1'b0;
      busAlign_prefillFirstToken <= 1'b1;
      dataAlign_engineOutCnt <= 4'b0000;
      dataAlign_dotOutCnt <= 11'h0;
      dataAlign_prefillFirstToken <= 1'b1;
      dataAlign_lastLayer <= 1'b0;
      dataAlign_layerCnt <= 5'h0;
      dataAlign_tokenCnt <= 10'h0;
      dataAlign_nonZeroCnt <= 16'hffff;
      dataAlign_logitsGen <= 1'b0;
    end else begin
      if(busAlign_headVld) begin
        busAlign_headCnt <= (busAlign_headCnt + 4'b0001);
        if((busAlign_headCnt == 4'b1110)) begin
          busAlign_lastHead <= 1'b1;
        end
        if(busAlign_headCntOvf) begin
          busAlign_lastHead <= 1'b0;
          busAlign_headCnt <= 4'b0000;
        end
      end
      if(busAlign_enLayerCntInc) begin
        busAlign_layerCnt <= (busAlign_layerCnt + 5'h01);
        if(busAlign_layerCntAbout2Ovf) begin
          busAlign_lastLayer <= 1'b1;
        end
        if(busAlign_lastLayer) begin
          busAlign_layerCnt <= 5'h0;
          busAlign_lastLayer <= 1'b0;
        end
      end
      if(stateGen_2_busAlign_prefillIn_fifo_io_pop_fire) begin
        busAlign_prefillFirstToken <= 1'b0;
      end
      if(dataAlign_engineOutVld) begin
        dataAlign_engineOutCnt <= (dataAlign_engineOutCnt + 4'b0001);
        if(dataAlign_engineOutCntOvf) begin
          dataAlign_engineOutCnt <= 4'b0000;
        end
      end
      if(dataAlign_dotOutVld) begin
        dataAlign_dotOutCnt <= (dataAlign_dotOutCnt + 11'h001);
        if(dataAlign_dotOutCntOvf) begin
          dataAlign_dotOutCnt <= 11'h0;
        end
      end
      if(dataAlign_enInc) begin
        dataAlign_layerCnt <= (dataAlign_layerCnt + 5'h01);
        if(dataAlign_beforeLastLayer) begin
          dataAlign_lastLayer <= 1'b1;
        end
        if(dataAlign_layerOvf) begin
          dataAlign_layerCnt <= 5'h0;
          dataAlign_lastLayer <= 1'b0;
          dataAlign_prefillFirstToken <= 1'b0;
          dataAlign_tokenCnt <= (dataAlign_tokenCnt + 10'h001);
          if((dataAlign_tokenCnt == 10'h3ff)) begin
            dataAlign_tokenCnt <= 10'h0;
          end
        end
      end
      if(io_gtCnt_valid) begin
        dataAlign_nonZeroCnt <= io_gtCnt_payload;
      end
      if(dataAlign_enInc) begin
        dataAlign_nonZeroCnt <= 16'hffff;
      end
      if((((! dataAlign_prefillIn_fifo_io_pop_payload) && dataAlign_mlpDone) && dataAlign_lastLayer)) begin
        dataAlign_logitsGen <= 1'b1;
      end
      if(status_argmaxVld) begin
        dataAlign_logitsGen <= 1'b0;
      end
    end
  end


endmodule

module GenCfg (
  output wire          io_cfg_valid,
  input  wire          io_cfg_ready,
  output wire [31:0]   io_cfg_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                mux_io_inputs_0_ready;
  wire                mux_io_inputs_1_ready;
  wire                mux_io_inputs_2_ready;
  wire                mux_io_inputs_3_ready;
  wire                mux_io_inputs_4_ready;
  wire                mux_io_inputs_5_ready;
  wire                mux_io_inputs_6_ready;
  wire                mux_io_output_valid;
  wire                mux_io_output_payload_last;
  wire       [31:0]   mux_io_output_payload_fragment;
  wire                prefillIn_fifo_io_push_ready;
  wire                prefillIn_fifo_io_pop_valid;
  wire                prefillIn_fifo_io_pop_payload;
  wire       [6:0]    prefillIn_fifo_io_occupancy;
  wire       [6:0]    prefillIn_fifo_io_availability;
  wire       [15:0]   t_kCacheCfg;
  wire       [9:0]    t_kCacheCfg_1;
  wire       [15:0]   t_vCacheCfg;
  wire       [9:0]    t_vCacheCfg_1;
  wire       [9:0]    t_vCacheCfg_2;
  reg        [31:0]   t_attnKV_cfg_payload_fragment;
  reg        [31:0]   t_attnQKV_cfg_payload_fragment;
  reg        [31:0]   t_mlpDense_cfg_payload_fragment;
  reg        [31:0]   t_logits_cfg_payload_fragment;
  reg        [9:0]    token;
  wire                firstToken;
  wire       [31:0]   attnLnCfg;
  wire       [31:0]   kNoAttnCfg;
  wire       [31:0]   vNoAttnCfg;
  wire       [31:0]   qCfg;
  wire       [31:0]   kCfg;
  wire       [31:0]   vCfg;
  wire       [31:0]   kCacheCfg;
  wire       [31:0]   vCacheCfg;
  wire       [31:0]   attnOCfg;
  wire       [31:0]   mlpPredUCfg;
  wire       [31:0]   mlpPredDCfg;
  wire       [31:0]   mlpGDenseCfg;
  wire       [31:0]   mlpGSparseCfg;
  wire       [31:0]   mlpUCfg;
  wire       [31:0]   mlpDCfg;
  wire       [31:0]   logitsLnCfg;
  wire       [31:0]   logitsOutCfg;
  wire                attnLn_valid;
  wire                attnLn_ready;
  wire                attnLn_payload_last;
  wire       [31:0]   attnLn_payload_fragment;
  wire                attnO_valid;
  wire                attnO_ready;
  wire                attnO_payload_last;
  wire       [31:0]   attnO_payload_fragment;
  reg        [0:0]    attnKV_cnt;
  wire                attnKV_cntOvf;
  wire                attnKV_cfg_valid;
  reg                 attnKV_cfg_ready;
  wire                attnKV_cfg_payload_last;
  wire       [31:0]   attnKV_cfg_payload_fragment;
  wire                attnKV_cfgPipe_valid;
  wire                attnKV_cfgPipe_ready;
  wire                attnKV_cfgPipe_payload_last;
  wire       [31:0]   attnKV_cfgPipe_payload_fragment;
  reg                 attnKV_cfg_rValid;
  reg                 attnKV_cfg_rData_last;
  reg        [31:0]   attnKV_cfg_rData_fragment;
  wire                attnKV_cfg_fire;
  reg        [2:0]    attnQKV_cnt;
  wire                attnQKV_cntOvf;
  wire                attnQKV_cfg_valid;
  reg                 attnQKV_cfg_ready;
  wire                attnQKV_cfg_payload_last;
  wire       [31:0]   attnQKV_cfg_payload_fragment;
  wire                attnQKV_cfgPipe_valid;
  wire                attnQKV_cfgPipe_ready;
  wire                attnQKV_cfgPipe_payload_last;
  wire       [31:0]   attnQKV_cfgPipe_payload_fragment;
  reg                 attnQKV_cfg_rValid;
  reg                 attnQKV_cfg_rData_last;
  reg        [31:0]   attnQKV_cfg_rData_fragment;
  wire                attnQKV_cfg_fire;
  wire                mlpSparse_cfgPipe_valid;
  wire                mlpSparse_cfgPipe_ready;
  wire                mlpSparse_cfgPipe_payload_last;
  wire       [31:0]   mlpSparse_cfgPipe_payload_fragment;
  wire       [32:0]   t_mlpSparse_cfgPipe_payload_last;
  reg        [1:0]    mlpDense_cnt;
  wire                mlpDense_cntOvf;
  wire                mlpDense_cfg_valid;
  reg                 mlpDense_cfg_ready;
  wire                mlpDense_cfg_payload_last;
  wire       [31:0]   mlpDense_cfg_payload_fragment;
  wire                mlpDense_cfgPipe_valid;
  wire                mlpDense_cfgPipe_ready;
  wire                mlpDense_cfgPipe_payload_last;
  wire       [31:0]   mlpDense_cfgPipe_payload_fragment;
  reg                 mlpDense_cfg_rValid;
  reg                 mlpDense_cfg_rData_last;
  reg        [31:0]   mlpDense_cfg_rData_fragment;
  wire                mlpDense_cfg_fire;
  reg        [0:0]    logits_cnt;
  wire                logits_cntOvf;
  wire                logits_cfg_valid;
  reg                 logits_cfg_ready;
  wire                logits_cfg_payload_last;
  wire       [31:0]   logits_cfg_payload_fragment;
  wire                logits_cfgPipe_valid;
  wire                logits_cfgPipe_ready;
  wire                logits_cfgPipe_payload_last;
  wire       [31:0]   logits_cfgPipe_payload_fragment;
  reg                 logits_cfg_rValid;
  reg                 logits_cfg_rData_last;
  reg        [31:0]   logits_cfg_rData_fragment;
  wire                logits_cfg_fire;
  reg        [3:0]    headCnt;
  wire                headCntOvf;
  wire                enHeadCntInc;
  reg        [4:0]    layerCnt;
  wire                layerCntOvf;
  reg                 enLayerCntInc;
  wire                enTokenCnt;
  wire                attnKV_cfgPipe_fire;
  wire                kvDone;
  wire                attnQKV_cfgPipe_fire;
  wire                qkvDone;
  wire                mlpSparse_cfgPipe_fire;
  wire                sparseMlpDone;
  wire                mlpDense_cfgPipe_fire;
  wire                denseMlpDone;
  wire                mlpDone;
  wire                logits_cfgPipe_fire;
  wire                logitsDone;
  wire                prefillIn_valid;
  wire                prefillIn_ready;
  wire                prefillIn_payload;
  reg        [2:0]    select_1;
  reg        [2:0]    selectNext;
  wire                attnLn_fire;
  wire                attnO_fire;
  wire                cfg_valid;
  reg                 cfg_ready;
  wire       [31:0]   cfg_payload;
  wire                throwCond;
  reg                 cfg_thrown_valid;
  reg                 cfg_thrown_ready;
  wire       [31:0]   cfg_thrown_payload;
  wire                cfg_thrown_m2sPipe_valid;
  wire                cfg_thrown_m2sPipe_ready;
  wire       [31:0]   cfg_thrown_m2sPipe_payload;
  reg                 cfg_thrown_rValid;
  reg        [31:0]   cfg_thrown_rData;

  assign t_kCacheCfg_1 = (token - 10'h001);
  assign t_kCacheCfg = {6'd0, t_kCacheCfg_1};
  assign t_vCacheCfg_1 = (t_vCacheCfg_2 - 10'h001);
  assign t_vCacheCfg = {6'd0, t_vCacheCfg_1};
  assign t_vCacheCfg_2 = (token + 10'h001);
  StreamMux_19 mux (
    .io_select                    (select_1[2:0]                           ), //i
    .io_inputs_0_valid            (attnLn_valid                            ), //i
    .io_inputs_0_ready            (mux_io_inputs_0_ready                   ), //o
    .io_inputs_0_payload_last     (attnLn_payload_last                     ), //i
    .io_inputs_0_payload_fragment (attnLn_payload_fragment[31:0]           ), //i
    .io_inputs_1_valid            (attnKV_cfgPipe_valid                    ), //i
    .io_inputs_1_ready            (mux_io_inputs_1_ready                   ), //o
    .io_inputs_1_payload_last     (attnKV_cfgPipe_payload_last             ), //i
    .io_inputs_1_payload_fragment (attnKV_cfgPipe_payload_fragment[31:0]   ), //i
    .io_inputs_2_valid            (attnQKV_cfgPipe_valid                   ), //i
    .io_inputs_2_ready            (mux_io_inputs_2_ready                   ), //o
    .io_inputs_2_payload_last     (attnQKV_cfgPipe_payload_last            ), //i
    .io_inputs_2_payload_fragment (attnQKV_cfgPipe_payload_fragment[31:0]  ), //i
    .io_inputs_3_valid            (attnO_valid                             ), //i
    .io_inputs_3_ready            (mux_io_inputs_3_ready                   ), //o
    .io_inputs_3_payload_last     (attnO_payload_last                      ), //i
    .io_inputs_3_payload_fragment (attnO_payload_fragment[31:0]            ), //i
    .io_inputs_4_valid            (mlpSparse_cfgPipe_valid                 ), //i
    .io_inputs_4_ready            (mux_io_inputs_4_ready                   ), //o
    .io_inputs_4_payload_last     (mlpSparse_cfgPipe_payload_last          ), //i
    .io_inputs_4_payload_fragment (mlpSparse_cfgPipe_payload_fragment[31:0]), //i
    .io_inputs_5_valid            (mlpDense_cfgPipe_valid                  ), //i
    .io_inputs_5_ready            (mux_io_inputs_5_ready                   ), //o
    .io_inputs_5_payload_last     (mlpDense_cfgPipe_payload_last           ), //i
    .io_inputs_5_payload_fragment (mlpDense_cfgPipe_payload_fragment[31:0] ), //i
    .io_inputs_6_valid            (logits_cfgPipe_valid                    ), //i
    .io_inputs_6_ready            (mux_io_inputs_6_ready                   ), //o
    .io_inputs_6_payload_last     (logits_cfgPipe_payload_last             ), //i
    .io_inputs_6_payload_fragment (logits_cfgPipe_payload_fragment[31:0]   ), //i
    .io_output_valid              (mux_io_output_valid                     ), //o
    .io_output_ready              (cfg_ready                               ), //i
    .io_output_payload_last       (mux_io_output_payload_last              ), //o
    .io_output_payload_fragment   (mux_io_output_payload_fragment[31:0]    )  //o
  );
  StreamFifo_69 prefillIn_fifo (
    .io_push_valid   (prefillIn_valid                    ), //i
    .io_push_ready   (prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (prefillIn_payload                  ), //i
    .io_pop_valid    (prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (enTokenCnt                         ), //i
    .io_pop_payload  (prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                          ), //i
    .clk_1_resetn    (clk_1_resetn                       )  //i
  );
  always @(*) begin
    case(attnKV_cnt)
      1'b0 : t_attnKV_cfg_payload_fragment = kNoAttnCfg;
      default : t_attnKV_cfg_payload_fragment = vNoAttnCfg;
    endcase
  end

  always @(*) begin
    case(attnQKV_cnt)
      3'b000 : t_attnQKV_cfg_payload_fragment = qCfg;
      3'b001 : t_attnQKV_cfg_payload_fragment = kCfg;
      3'b010 : t_attnQKV_cfg_payload_fragment = kCacheCfg;
      3'b011 : t_attnQKV_cfg_payload_fragment = vCfg;
      default : t_attnQKV_cfg_payload_fragment = vCacheCfg;
    endcase
  end

  always @(*) begin
    case(mlpDense_cnt)
      2'b00 : t_mlpDense_cfg_payload_fragment = mlpGDenseCfg;
      2'b01 : t_mlpDense_cfg_payload_fragment = mlpUCfg;
      default : t_mlpDense_cfg_payload_fragment = mlpDCfg;
    endcase
  end

  always @(*) begin
    case(logits_cnt)
      1'b0 : t_logits_cfg_payload_fragment = logitsLnCfg;
      default : t_logits_cfg_payload_fragment = logitsOutCfg;
    endcase
  end

  assign firstToken = (token == 10'h0);
  assign attnLnCfg = {{8'h0c,8'h0f},16'h0};
  assign kNoAttnCfg = {{8'h44,8'h1f},16'h007f};
  assign vNoAttnCfg = {{8'h4c,8'h1f},16'h007f};
  assign qCfg = {{8'h14,8'h1f},16'h007f};
  assign kCfg = {{8'h18,8'h1f},16'h007f};
  assign vCfg = {{8'h1c,8'h1f},16'h007f};
  assign kCacheCfg = {{8'h34,8'h0},t_kCacheCfg};
  assign vCacheCfg = {{8'h3d,8'h0},t_vCacheCfg};
  assign attnOCfg = {{8'h40,8'h0f},16'h0fff};
  assign mlpPredUCfg = {{8'h6c,8'h0f},16'h03ff};
  assign mlpPredDCfg = {{8'h71,8'h2a},16'h0};
  assign mlpGDenseCfg = {{8'h58,8'h0f},16'h2aff};
  assign mlpGSparseCfg = {{8'h58,8'h0f},16'h0};
  assign mlpUCfg = {{8'h60,8'h0f},16'h0};
  assign mlpDCfg = {{8'h7f,8'h0f},16'h0};
  assign logitsLnCfg = {{8'h80,8'h0f},16'h0};
  assign logitsOutCfg = {{8'h8c,8'h0f},16'h7cff};
  assign attnLn_valid = 1'b1;
  assign attnLn_payload_fragment = attnLnCfg;
  assign attnLn_payload_last = 1'b1;
  assign attnO_valid = 1'b1;
  assign attnO_payload_fragment = attnOCfg;
  assign attnO_payload_last = 1'b1;
  assign attnKV_cntOvf = (attnKV_cnt == 1'b1);
  always @(*) begin
    attnKV_cfg_ready = attnKV_cfgPipe_ready;
    if((! attnKV_cfgPipe_valid)) begin
      attnKV_cfg_ready = 1'b1;
    end
  end

  assign attnKV_cfgPipe_valid = attnKV_cfg_rValid;
  assign attnKV_cfgPipe_payload_last = attnKV_cfg_rData_last;
  assign attnKV_cfgPipe_payload_fragment = attnKV_cfg_rData_fragment;
  assign attnKV_cfg_valid = 1'b1;
  assign attnKV_cfg_payload_fragment = t_attnKV_cfg_payload_fragment;
  assign attnKV_cfg_payload_last = attnKV_cntOvf;
  assign attnKV_cfg_fire = (attnKV_cfg_valid && attnKV_cfg_ready);
  assign attnQKV_cntOvf = (attnQKV_cnt == 3'b100);
  always @(*) begin
    attnQKV_cfg_ready = attnQKV_cfgPipe_ready;
    if((! attnQKV_cfgPipe_valid)) begin
      attnQKV_cfg_ready = 1'b1;
    end
  end

  assign attnQKV_cfgPipe_valid = attnQKV_cfg_rValid;
  assign attnQKV_cfgPipe_payload_last = attnQKV_cfg_rData_last;
  assign attnQKV_cfgPipe_payload_fragment = attnQKV_cfg_rData_fragment;
  assign attnQKV_cfg_valid = 1'b1;
  assign attnQKV_cfg_payload_fragment = t_attnQKV_cfg_payload_fragment;
  assign attnQKV_cfg_payload_last = attnQKV_cntOvf;
  assign attnQKV_cfg_fire = (attnQKV_cfg_valid && attnQKV_cfg_ready);
  assign mlpSparse_cfgPipe_valid = 1'b0;
  assign t_mlpSparse_cfgPipe_payload_last = 33'h0;
  assign mlpSparse_cfgPipe_payload_last = t_mlpSparse_cfgPipe_payload_last[0];
  assign mlpSparse_cfgPipe_payload_fragment = t_mlpSparse_cfgPipe_payload_last[32 : 1];
  assign mlpDense_cntOvf = (mlpDense_cnt == 2'b10);
  always @(*) begin
    mlpDense_cfg_ready = mlpDense_cfgPipe_ready;
    if((! mlpDense_cfgPipe_valid)) begin
      mlpDense_cfg_ready = 1'b1;
    end
  end

  assign mlpDense_cfgPipe_valid = mlpDense_cfg_rValid;
  assign mlpDense_cfgPipe_payload_last = mlpDense_cfg_rData_last;
  assign mlpDense_cfgPipe_payload_fragment = mlpDense_cfg_rData_fragment;
  assign mlpDense_cfg_valid = 1'b1;
  assign mlpDense_cfg_payload_fragment = t_mlpDense_cfg_payload_fragment;
  assign mlpDense_cfg_payload_last = mlpDense_cntOvf;
  assign mlpDense_cfg_fire = (mlpDense_cfg_valid && mlpDense_cfg_ready);
  assign logits_cntOvf = (logits_cnt == 1'b1);
  always @(*) begin
    logits_cfg_ready = logits_cfgPipe_ready;
    if((! logits_cfgPipe_valid)) begin
      logits_cfg_ready = 1'b1;
    end
  end

  assign logits_cfgPipe_valid = logits_cfg_rValid;
  assign logits_cfgPipe_payload_last = logits_cfg_rData_last;
  assign logits_cfgPipe_payload_fragment = logits_cfg_rData_fragment;
  assign logits_cfg_valid = 1'b1;
  assign logits_cfg_payload_fragment = t_logits_cfg_payload_fragment;
  assign logits_cfg_payload_last = logits_cntOvf;
  assign logits_cfg_fire = (logits_cfg_valid && logits_cfg_ready);
  assign attnLn_ready = mux_io_inputs_0_ready;
  assign attnKV_cfgPipe_ready = mux_io_inputs_1_ready;
  assign attnQKV_cfgPipe_ready = mux_io_inputs_2_ready;
  assign attnO_ready = mux_io_inputs_3_ready;
  assign mlpSparse_cfgPipe_ready = mux_io_inputs_4_ready;
  assign mlpDense_cfgPipe_ready = mux_io_inputs_5_ready;
  assign logits_cfgPipe_ready = mux_io_inputs_6_ready;
  assign headCntOvf = (headCnt == 4'b1111);
  assign layerCntOvf = (layerCnt == 5'h1f);
  assign enTokenCnt = (enLayerCntInc && layerCntOvf);
  assign attnKV_cfgPipe_fire = (attnKV_cfgPipe_valid && attnKV_cfgPipe_ready);
  assign kvDone = (attnKV_cfgPipe_fire && attnKV_cfgPipe_payload_last);
  assign attnQKV_cfgPipe_fire = (attnQKV_cfgPipe_valid && attnQKV_cfgPipe_ready);
  assign qkvDone = (attnQKV_cfgPipe_fire && attnQKV_cfgPipe_payload_last);
  assign mlpSparse_cfgPipe_fire = (mlpSparse_cfgPipe_valid && mlpSparse_cfgPipe_ready);
  assign sparseMlpDone = (mlpSparse_cfgPipe_fire && mlpSparse_cfgPipe_payload_last);
  assign mlpDense_cfgPipe_fire = (mlpDense_cfgPipe_valid && mlpDense_cfgPipe_ready);
  assign denseMlpDone = (mlpDense_cfgPipe_fire && mlpDense_cfgPipe_payload_last);
  assign mlpDone = (sparseMlpDone || denseMlpDone);
  assign logits_cfgPipe_fire = (logits_cfgPipe_valid && logits_cfgPipe_ready);
  assign logitsDone = (logits_cfgPipe_fire && logits_cfgPipe_payload_last);
  assign prefillIn_valid = status_tokenIndexFlow_valid;
  assign prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign prefillIn_ready = prefillIn_fifo_io_push_ready;
  assign enHeadCntInc = (kvDone || qkvDone);
  always @(*) begin
    enLayerCntInc = mlpDone;
    if((prefillIn_fifo_io_pop_payload && layerCntOvf)) begin
      enLayerCntInc = (kvDone && headCntOvf);
    end
  end

  always @(*) begin
    selectNext = select_1;
    if(((select_1 == 3'b000) && attnLn_fire)) begin
      if((firstToken || (prefillIn_fifo_io_pop_payload && layerCntOvf))) begin
        selectNext = 3'b001;
      end else begin
        selectNext = 3'b010;
      end
    end
    if((((select_1 == 3'b001) && kvDone) && headCntOvf)) begin
      if(layerCntOvf) begin
        selectNext = 3'b000;
      end else begin
        selectNext = 3'b011;
      end
    end
    if((((select_1 == 3'b010) && qkvDone) && headCntOvf)) begin
      selectNext = 3'b011;
    end
    if(((select_1 == 3'b011) && attnO_fire)) begin
      if(status_enPredictor) begin
        selectNext = 3'b100;
      end else begin
        selectNext = 3'b101;
      end
    end
    if(((select_1 == 3'b100) && sparseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b110;
      end else begin
        selectNext = 3'b000;
      end
    end
    if(((select_1 == 3'b101) && denseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b110;
      end else begin
        selectNext = 3'b000;
      end
    end
    if(((select_1 == 3'b110) && logitsDone)) begin
      selectNext = 3'b000;
    end
  end

  assign attnLn_fire = (attnLn_valid && attnLn_ready);
  assign attnO_fire = (attnO_valid && attnO_ready);
  assign cfg_valid = mux_io_output_valid;
  assign cfg_payload = mux_io_output_payload_fragment;
  assign throwCond = ((cfg_payload == attnLnCfg) || (cfg_payload == logitsLnCfg));
  always @(*) begin
    cfg_thrown_valid = cfg_valid;
    if(throwCond) begin
      cfg_thrown_valid = 1'b0;
    end
  end

  always @(*) begin
    cfg_ready = cfg_thrown_ready;
    if(throwCond) begin
      cfg_ready = 1'b1;
    end
  end

  assign cfg_thrown_payload = cfg_payload;
  always @(*) begin
    cfg_thrown_ready = cfg_thrown_m2sPipe_ready;
    if((! cfg_thrown_m2sPipe_valid)) begin
      cfg_thrown_ready = 1'b1;
    end
  end

  assign cfg_thrown_m2sPipe_valid = cfg_thrown_rValid;
  assign cfg_thrown_m2sPipe_payload = cfg_thrown_rData;
  assign io_cfg_valid = cfg_thrown_m2sPipe_valid;
  assign cfg_thrown_m2sPipe_ready = io_cfg_ready;
  assign io_cfg_payload = cfg_thrown_m2sPipe_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      token <= 10'h0;
      attnKV_cnt <= 1'b0;
      attnKV_cfg_rValid <= 1'b0;
      attnQKV_cnt <= 3'b000;
      attnQKV_cfg_rValid <= 1'b0;
      mlpDense_cnt <= 2'b00;
      mlpDense_cfg_rValid <= 1'b0;
      logits_cnt <= 1'b0;
      logits_cfg_rValid <= 1'b0;
      headCnt <= 4'b0000;
      layerCnt <= 5'h0;
      select_1 <= 3'b000;
      cfg_thrown_rValid <= 1'b0;
    end else begin
      if(attnKV_cfg_ready) begin
        attnKV_cfg_rValid <= attnKV_cfg_valid;
      end
      if(attnKV_cfg_fire) begin
        attnKV_cnt <= (attnKV_cnt + 1'b1);
        if(attnKV_cntOvf) begin
          attnKV_cnt <= 1'b0;
        end
      end
      if(attnQKV_cfg_ready) begin
        attnQKV_cfg_rValid <= attnQKV_cfg_valid;
      end
      if(attnQKV_cfg_fire) begin
        attnQKV_cnt <= (attnQKV_cnt + 3'b001);
        if(attnQKV_cntOvf) begin
          attnQKV_cnt <= 3'b000;
        end
      end
      if(mlpDense_cfg_ready) begin
        mlpDense_cfg_rValid <= mlpDense_cfg_valid;
      end
      if(mlpDense_cfg_fire) begin
        mlpDense_cnt <= (mlpDense_cnt + 2'b01);
        if(mlpDense_cntOvf) begin
          mlpDense_cnt <= 2'b00;
        end
      end
      if(logits_cfg_ready) begin
        logits_cfg_rValid <= logits_cfg_valid;
      end
      if(logits_cfg_fire) begin
        logits_cnt <= (logits_cnt + 1'b1);
        if(logits_cntOvf) begin
          logits_cnt <= 1'b0;
        end
      end
      if(enHeadCntInc) begin
        headCnt <= (headCnt + 4'b0001);
        if(headCntOvf) begin
          headCnt <= 4'b0000;
        end
      end
      if(enLayerCntInc) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntOvf) begin
          layerCnt <= 5'h0;
        end
      end
      if(enTokenCnt) begin
        token <= (token + 10'h001);
      end
      select_1 <= selectNext;
      if(cfg_thrown_ready) begin
        cfg_thrown_rValid <= cfg_thrown_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(attnKV_cfg_ready) begin
      attnKV_cfg_rData_last <= attnKV_cfg_payload_last;
      attnKV_cfg_rData_fragment <= attnKV_cfg_payload_fragment;
    end
    if(attnQKV_cfg_ready) begin
      attnQKV_cfg_rData_last <= attnQKV_cfg_payload_last;
      attnQKV_cfg_rData_fragment <= attnQKV_cfg_payload_fragment;
    end
    if(mlpDense_cfg_ready) begin
      mlpDense_cfg_rData_last <= mlpDense_cfg_payload_last;
      mlpDense_cfg_rData_fragment <= mlpDense_cfg_payload_fragment;
    end
    if(logits_cfg_ready) begin
      logits_cfg_rData_last <= logits_cfg_payload_last;
      logits_cfg_rData_fragment <= logits_cfg_payload_fragment;
    end
    if(cfg_thrown_ready) begin
      cfg_thrown_rData <= cfg_thrown_payload;
    end
  end


endmodule

module KvScaleZeroPacker (
  input  wire          io_qScale_valid,
  input  wire [15:0]   io_qScale_payload,
  input  wire          io_qZero_valid,
  input  wire [7:0]    io_qZero_payload,
  input  wire          io_qOut_valid,
  input  wire          io_qOut_payload_last,
  input  wire [7:0]    io_qOut_payload_fragment,
  output wire          io_kvBus_valid,
  input  wire          io_kvBus_ready,
  output wire          io_kvBus_payload_last,
  output wire [511:0]  io_kvBus_payload_fragment,
  output wire          io_kSzOut_valid,
  input  wire          io_kSzOut_ready,
  output wire [31:0]   io_kSzOut_payload,
  output wire          io_vSzOut_valid,
  input  wire          io_vSzOut_ready,
  output wire [31:0]   io_vSzOut_payload,
  input  wire          io_nextLayer,
  input  wire          io_tokenIndexFlow_valid,
  input  wire [5:0]    io_tokenIndexFlow_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg                 k_prefillIn_fifo_io_pop_ready;
  wire                k_fifo_io_push_valid;
  reg                 k_fifo_io_pop_ready;
  reg                 v_prefillIn_fifo_io_pop_ready;
  wire                v_fifo_io_push_valid;
  reg                 v_fifo_io_pop_ready;
  wire                k_prefillIn_fifo_io_push_ready;
  wire                k_prefillIn_fifo_io_pop_valid;
  wire                k_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    k_prefillIn_fifo_io_occupancy;
  wire       [6:0]    k_prefillIn_fifo_io_availability;
  wire                k_fifo_io_push_ready;
  wire                k_fifo_io_pop_valid;
  wire       [511:0]  k_fifo_io_pop_payload;
  wire                v_prefillIn_fifo_io_push_ready;
  wire                v_prefillIn_fifo_io_pop_valid;
  wire                v_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    v_prefillIn_fifo_io_occupancy;
  wire       [6:0]    v_prefillIn_fifo_io_availability;
  wire                v_fifo_io_push_ready;
  wire                v_fifo_io_pop_valid;
  wire       [511:0]  v_fifo_io_pop_payload;
  wire                busFifo_io_push_ready;
  wire                busFifo_io_pop_valid;
  wire                busFifo_io_pop_payload_last;
  wire       [511:0]  busFifo_io_pop_payload_fragment;
  wire       [5:0]    busFifo_io_occupancy;
  wire       [5:0]    busFifo_io_availability;
  wire                busMux_io_inputs_0_ready;
  wire                busMux_io_inputs_1_ready;
  wire                busMux_io_inputs_2_ready;
  wire                busMux_io_output_valid;
  wire                busMux_io_output_payload_last;
  wire       [511:0]  busMux_io_output_payload_fragment;
  wire       [4:0]    t_kScale_payload;
  wire       [5:0]    t_kScale_payload_1;
  wire       [4:0]    t_vScale_payload;
  wire       [5:0]    t_vScale_payload_1;
  wire       [3:0]    t_k_outCntOvf;
  wire                t_when;
  reg        [31:0]   t_k_sOut_payload;
  wire       [3:0]    t_v_outCntOvf;
  wire                t_when_1;
  reg        [31:0]   t_v_sOut_payload;
  wire       [383:0]  t_qOutAdapt_64;
  wire       [255:0]  t_qOutAdapt_65;
  wire       [127:0]  t_qOutAdapt_66;
  wire                t_when_2;
  wire                t_when_3;
  reg                 scaleIsV;
  reg                 zeroIsV;
  wire                kScale_valid;
  reg                 kScale_ready;
  wire       [15:0]   kScale_payload;
  wire                kScalePipe_valid;
  wire                kScalePipe_ready;
  wire       [15:0]   kScalePipe_payload;
  reg                 kScale_rValid;
  reg        [15:0]   kScale_rData;
  wire                kZero_valid;
  reg                 kZero_ready;
  wire       [7:0]    kZero_payload;
  wire                kZeroPipe_valid;
  wire                kZeroPipe_ready;
  wire       [7:0]    kZeroPipe_payload;
  reg                 kZero_rValid;
  reg        [7:0]    kZero_rData;
  wire                vScale_valid;
  reg                 vScale_ready;
  wire       [15:0]   vScale_payload;
  wire                vScalePipe_valid;
  wire                vScalePipe_ready;
  wire       [15:0]   vScalePipe_payload;
  reg                 vScale_rValid;
  reg        [15:0]   vScale_rData;
  wire                vZero_valid;
  reg                 vZero_ready;
  wire       [7:0]    vZero_payload;
  wire                vZeroPipe_valid;
  wire                vZeroPipe_ready;
  wire       [7:0]    vZeroPipe_payload;
  reg                 vZero_rValid;
  reg        [7:0]    vZero_rData;
  wire                kJoinEvent_valid;
  wire                kJoinEvent_ready;
  wire                kJoinEvent_fire;
  wire                kSz_valid;
  wire                kSz_ready;
  wire       [31:0]   kSz_payload;
  wire                vJoinEvent_valid;
  wire                vJoinEvent_ready;
  wire                vJoinEvent_fire;
  wire                vSz_valid;
  wire                vSz_ready;
  wire       [31:0]   vSz_payload;
  reg        [15:0]   tokenIndexCnt;
  wire                firstTokenIndex;
  wire                k_prefillIn_valid;
  wire                k_prefillIn_ready;
  wire                k_prefillIn_payload;
  wire                k_data_valid;
  wire                k_data_ready;
  wire       [31:0]   k_data_payload;
  wire                k_dataFire;
  wire                k_fifoPop_valid;
  wire                k_fifoPop_ready;
  wire       [511:0]  k_fifoPop_payload;
  reg                 szPacker_k_fifo_io_pop_rValid;
  reg        [511:0]  szPacker_k_fifo_io_pop_rData;
  reg        [3:0]    k_tokenCnt;
  reg        [8:0]    k_depthCnt;
  wire                k_tokenCntAbout2Ovf;
  wire                k_depthCntOvf;
  (* max_fanout = "100" *) reg                 k_isTokenZero;
  reg                 k_tokenCntOvfReg;
  reg        [31:0]   k_pushVec_0;
  reg        [31:0]   k_pushVec_1;
  reg        [31:0]   k_pushVec_2;
  reg        [31:0]   k_pushVec_3;
  reg        [31:0]   k_pushVec_4;
  reg        [31:0]   k_pushVec_5;
  reg        [31:0]   k_pushVec_6;
  reg        [31:0]   k_pushVec_7;
  reg        [31:0]   k_pushVec_8;
  reg        [31:0]   k_pushVec_9;
  reg        [31:0]   k_pushVec_10;
  reg        [31:0]   k_pushVec_11;
  reg        [31:0]   k_pushVec_12;
  reg        [31:0]   k_pushVec_13;
  reg        [31:0]   k_pushVec_14;
  reg        [31:0]   k_pushVec_15;
  wire       [15:0]   t_1;
  wire       [511:0]  k_pushVecBits;
  wire                k_toBus_valid;
  reg                 k_toBus_ready;
  wire                k_toBus_payload_last;
  wire       [511:0]  k_toBus_payload_fragment;
  (* max_fanout = "100" *) reg                 k_flag;
  wire                k_fifoPop_fire;
  (* max_fanout = "100" *) reg                 k_vld;
  wire                k_sOut_valid;
  reg                 k_sOut_ready;
  wire       [31:0]   k_sOut_payload;
  reg        [3:0]    k_outCnt;
  wire                k_outCntOvf;
  reg        [3:0]    k_headCnt;
  reg        [4:0]    k_layerCnt;
  wire                k_lastLayer;
  wire                k_sOutFire;
  wire       [31:0]   k_dataSplit_0;
  wire       [31:0]   k_dataSplit_1;
  wire       [31:0]   k_dataSplit_2;
  wire       [31:0]   k_dataSplit_3;
  wire       [31:0]   k_dataSplit_4;
  wire       [31:0]   k_dataSplit_5;
  wire       [31:0]   k_dataSplit_6;
  wire       [31:0]   k_dataSplit_7;
  wire       [31:0]   k_dataSplit_8;
  wire       [31:0]   k_dataSplit_9;
  wire       [31:0]   k_dataSplit_10;
  wire       [31:0]   k_dataSplit_11;
  wire       [31:0]   k_dataSplit_12;
  wire       [31:0]   k_dataSplit_13;
  wire       [31:0]   k_dataSplit_14;
  wire       [31:0]   k_dataSplit_15;
  wire                k_throwCond;
  reg                 k_sOutThrow_valid;
  reg                 k_sOutThrow_ready;
  wire       [31:0]   k_sOutThrow_payload;
  wire                v_prefillIn_valid;
  wire                v_prefillIn_ready;
  wire                v_prefillIn_payload;
  wire                v_data_valid;
  wire                v_data_ready;
  wire       [31:0]   v_data_payload;
  wire                v_dataFire;
  wire                v_fifoPop_valid;
  wire                v_fifoPop_ready;
  wire       [511:0]  v_fifoPop_payload;
  reg                 szPacker_v_fifo_io_pop_rValid;
  reg        [511:0]  szPacker_v_fifo_io_pop_rData;
  reg        [3:0]    v_tokenCnt;
  reg        [8:0]    v_depthCnt;
  wire                v_tokenCntAbout2Ovf;
  wire                v_depthCntOvf;
  (* max_fanout = "100" *) reg                 v_isTokenZero;
  reg                 v_tokenCntOvfReg;
  reg        [31:0]   v_pushVec_0;
  reg        [31:0]   v_pushVec_1;
  reg        [31:0]   v_pushVec_2;
  reg        [31:0]   v_pushVec_3;
  reg        [31:0]   v_pushVec_4;
  reg        [31:0]   v_pushVec_5;
  reg        [31:0]   v_pushVec_6;
  reg        [31:0]   v_pushVec_7;
  reg        [31:0]   v_pushVec_8;
  reg        [31:0]   v_pushVec_9;
  reg        [31:0]   v_pushVec_10;
  reg        [31:0]   v_pushVec_11;
  reg        [31:0]   v_pushVec_12;
  reg        [31:0]   v_pushVec_13;
  reg        [31:0]   v_pushVec_14;
  reg        [31:0]   v_pushVec_15;
  wire       [15:0]   t_2;
  wire       [511:0]  v_pushVecBits;
  wire                v_toBus_valid;
  reg                 v_toBus_ready;
  wire                v_toBus_payload_last;
  wire       [511:0]  v_toBus_payload_fragment;
  (* max_fanout = "100" *) reg                 v_flag;
  wire                v_fifoPop_fire;
  (* max_fanout = "100" *) reg                 v_vld;
  wire                v_sOut_valid;
  reg                 v_sOut_ready;
  wire       [31:0]   v_sOut_payload;
  reg        [3:0]    v_outCnt;
  wire                v_outCntOvf;
  reg        [3:0]    v_headCnt;
  reg        [4:0]    v_layerCnt;
  wire                v_lastLayer;
  wire                v_sOutFire;
  wire       [31:0]   v_dataSplit_0;
  wire       [31:0]   v_dataSplit_1;
  wire       [31:0]   v_dataSplit_2;
  wire       [31:0]   v_dataSplit_3;
  wire       [31:0]   v_dataSplit_4;
  wire       [31:0]   v_dataSplit_5;
  wire       [31:0]   v_dataSplit_6;
  wire       [31:0]   v_dataSplit_7;
  wire       [31:0]   v_dataSplit_8;
  wire       [31:0]   v_dataSplit_9;
  wire       [31:0]   v_dataSplit_10;
  wire       [31:0]   v_dataSplit_11;
  wire       [31:0]   v_dataSplit_12;
  wire       [31:0]   v_dataSplit_13;
  wire       [31:0]   v_dataSplit_14;
  wire       [31:0]   v_dataSplit_15;
  wire                v_throwCond;
  reg                 v_sOutThrow_valid;
  reg                 v_sOutThrow_ready;
  wire       [31:0]   v_sOutThrow_payload;
  wire       [7:0]    t_qOutAdapt;
  reg        [7:0]    t_qOutAdapt_1;
  reg        [7:0]    t_qOutAdapt_2;
  reg        [7:0]    t_qOutAdapt_3;
  reg        [7:0]    t_qOutAdapt_4;
  reg        [7:0]    t_qOutAdapt_5;
  reg        [7:0]    t_qOutAdapt_6;
  reg        [7:0]    t_qOutAdapt_7;
  reg        [7:0]    t_qOutAdapt_8;
  reg        [7:0]    t_qOutAdapt_9;
  reg        [7:0]    t_qOutAdapt_10;
  reg        [7:0]    t_qOutAdapt_11;
  reg        [7:0]    t_qOutAdapt_12;
  reg        [7:0]    t_qOutAdapt_13;
  reg        [7:0]    t_qOutAdapt_14;
  reg        [7:0]    t_qOutAdapt_15;
  reg        [7:0]    t_qOutAdapt_16;
  reg        [7:0]    t_qOutAdapt_17;
  reg        [7:0]    t_qOutAdapt_18;
  reg        [7:0]    t_qOutAdapt_19;
  reg        [7:0]    t_qOutAdapt_20;
  reg        [7:0]    t_qOutAdapt_21;
  reg        [7:0]    t_qOutAdapt_22;
  reg        [7:0]    t_qOutAdapt_23;
  reg        [7:0]    t_qOutAdapt_24;
  reg        [7:0]    t_qOutAdapt_25;
  reg        [7:0]    t_qOutAdapt_26;
  reg        [7:0]    t_qOutAdapt_27;
  reg        [7:0]    t_qOutAdapt_28;
  reg        [7:0]    t_qOutAdapt_29;
  reg        [7:0]    t_qOutAdapt_30;
  reg        [7:0]    t_qOutAdapt_31;
  reg        [7:0]    t_qOutAdapt_32;
  reg        [7:0]    t_qOutAdapt_33;
  reg        [7:0]    t_qOutAdapt_34;
  reg        [7:0]    t_qOutAdapt_35;
  reg        [7:0]    t_qOutAdapt_36;
  reg        [7:0]    t_qOutAdapt_37;
  reg        [7:0]    t_qOutAdapt_38;
  reg        [7:0]    t_qOutAdapt_39;
  reg        [7:0]    t_qOutAdapt_40;
  reg        [7:0]    t_qOutAdapt_41;
  reg        [7:0]    t_qOutAdapt_42;
  reg        [7:0]    t_qOutAdapt_43;
  reg        [7:0]    t_qOutAdapt_44;
  reg        [7:0]    t_qOutAdapt_45;
  reg        [7:0]    t_qOutAdapt_46;
  reg        [7:0]    t_qOutAdapt_47;
  reg        [7:0]    t_qOutAdapt_48;
  reg        [7:0]    t_qOutAdapt_49;
  reg        [7:0]    t_qOutAdapt_50;
  reg        [7:0]    t_qOutAdapt_51;
  reg        [7:0]    t_qOutAdapt_52;
  reg        [7:0]    t_qOutAdapt_53;
  reg        [7:0]    t_qOutAdapt_54;
  reg        [7:0]    t_qOutAdapt_55;
  reg        [7:0]    t_qOutAdapt_56;
  reg        [7:0]    t_qOutAdapt_57;
  reg        [7:0]    t_qOutAdapt_58;
  reg        [7:0]    t_qOutAdapt_59;
  reg        [7:0]    t_qOutAdapt_60;
  reg        [7:0]    t_qOutAdapt_61;
  reg        [7:0]    t_qOutAdapt_62;
  reg        [7:0]    t_qOutAdapt_63;
  wire       [511:0]  qOutAdapt;
  reg        [5:0]    qOutCnt;
  wire                qOutCntOvf;
  wire                qOutBus_valid;
  reg                 qOutBus_ready;
  wire                qOutBus_payload_last;
  wire       [511:0]  qOutBus_payload_fragment;
  wire                k_sOutThrow_m2sPipe_valid;
  reg                 k_sOutThrow_m2sPipe_ready;
  wire       [31:0]   k_sOutThrow_m2sPipe_payload;
  reg                 k_sOutThrow_rValid;
  reg        [31:0]   k_sOutThrow_rData;
  wire                k_sOutThrow_m2sPipe_m2sPipe_valid;
  wire                k_sOutThrow_m2sPipe_m2sPipe_ready;
  wire       [31:0]   k_sOutThrow_m2sPipe_m2sPipe_payload;
  reg                 k_sOutThrow_m2sPipe_rValid;
  reg        [31:0]   k_sOutThrow_m2sPipe_rData;
  wire                v_sOutThrow_m2sPipe_valid;
  reg                 v_sOutThrow_m2sPipe_ready;
  wire       [31:0]   v_sOutThrow_m2sPipe_payload;
  reg                 v_sOutThrow_rValid;
  reg        [31:0]   v_sOutThrow_rData;
  wire                v_sOutThrow_m2sPipe_m2sPipe_valid;
  wire                v_sOutThrow_m2sPipe_m2sPipe_ready;
  wire       [31:0]   v_sOutThrow_m2sPipe_m2sPipe_payload;
  reg                 v_sOutThrow_m2sPipe_rValid;
  reg        [31:0]   v_sOutThrow_m2sPipe_rData;
  wire                qOutBus_m2sPipe_valid;
  reg                 qOutBus_m2sPipe_ready;
  wire                qOutBus_m2sPipe_payload_last;
  wire       [511:0]  qOutBus_m2sPipe_payload_fragment;
  reg                 qOutBus_rValid;
  reg                 qOutBus_rData_last;
  reg        [511:0]  qOutBus_rData_fragment;
  wire                qOutBusPipe_valid;
  wire                qOutBusPipe_ready;
  wire                qOutBusPipe_payload_last;
  wire       [511:0]  qOutBusPipe_payload_fragment;
  reg                 qOutBus_m2sPipe_rValid;
  reg                 qOutBus_m2sPipe_rData_last;
  reg        [511:0]  qOutBus_m2sPipe_rData_fragment;
  wire                kToBusPipe_valid;
  wire                kToBusPipe_ready;
  wire                kToBusPipe_payload_last;
  wire       [511:0]  kToBusPipe_payload_fragment;
  reg                 k_toBus_rValid;
  reg                 k_toBus_rData_last;
  reg        [511:0]  k_toBus_rData_fragment;
  wire                vToBusPipe_valid;
  wire                vToBusPipe_ready;
  wire                vToBusPipe_payload_last;
  wire       [511:0]  vToBusPipe_payload_fragment;
  reg                 v_toBus_rValid;
  reg                 v_toBus_rData_last;
  reg        [511:0]  v_toBus_rData_fragment;
  wire                enInc;
  reg        [4:0]    headCnt;
  reg        [4:0]    layerCnt;
  reg        [3:0]    tokenCnt;
  reg                 szToMem;
  reg                 szToMemNext;
  wire                enStateCntInc;
  reg        [1:0]    stateCnt;
  reg        [1:0]    stateCntNext;
  wire                qOutBusPipe_fire;
  wire                szPacker_busMux_io_output_fire;
  (* max_fanout = 100 *) reg        [1:0]    select_1;
  reg        [1:0]    selectNext;

  assign t_when = (k_headCnt == 4'b1111);
  assign t_when_1 = (v_headCnt == 4'b1111);
  assign t_when_2 = (headCnt == 5'h1f);
  assign t_when_3 = (layerCnt == 5'h1f);
  assign t_kScale_payload = (t_kScale_payload_1[4 : 0] + 5'h02);
  assign t_kScale_payload_1 = io_qScale_payload[15 : 10];
  assign t_vScale_payload = (t_vScale_payload_1[4 : 0] + 5'h02);
  assign t_vScale_payload_1 = io_qScale_payload[15 : 10];
  assign t_k_outCntOvf = (k_tokenCnt - 4'b0001);
  assign t_v_outCntOvf = (v_tokenCnt - 4'b0001);
  assign t_qOutAdapt_64 = {t_qOutAdapt_16,{t_qOutAdapt_17,{t_qOutAdapt_18,{t_qOutAdapt_19,{t_qOutAdapt_20,{t_qOutAdapt_21,{t_qOutAdapt_22,{t_qOutAdapt_23,{t_qOutAdapt_24,{t_qOutAdapt_25,{t_qOutAdapt_26,{t_qOutAdapt_27,{t_qOutAdapt_28,{t_qOutAdapt_29,{t_qOutAdapt_30,{t_qOutAdapt_31,t_qOutAdapt_65}}}}}}}}}}}}}}}};
  assign t_qOutAdapt_65 = {t_qOutAdapt_32,{t_qOutAdapt_33,{t_qOutAdapt_34,{t_qOutAdapt_35,{t_qOutAdapt_36,{t_qOutAdapt_37,{t_qOutAdapt_38,{t_qOutAdapt_39,{t_qOutAdapt_40,{t_qOutAdapt_41,{t_qOutAdapt_42,{t_qOutAdapt_43,{t_qOutAdapt_44,{t_qOutAdapt_45,{t_qOutAdapt_46,{t_qOutAdapt_47,t_qOutAdapt_66}}}}}}}}}}}}}}}};
  assign t_qOutAdapt_66 = {t_qOutAdapt_48,{t_qOutAdapt_49,{t_qOutAdapt_50,{t_qOutAdapt_51,{t_qOutAdapt_52,{t_qOutAdapt_53,{t_qOutAdapt_54,{t_qOutAdapt_55,{t_qOutAdapt_56,{t_qOutAdapt_57,{t_qOutAdapt_58,{t_qOutAdapt_59,{t_qOutAdapt_60,{t_qOutAdapt_61,{t_qOutAdapt_62,t_qOutAdapt_63}}}}}}}}}}}}}}};
  StreamFifo_69 k_prefillIn_fifo (
    .io_push_valid   (k_prefillIn_valid                    ), //i
    .io_push_ready   (k_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (k_prefillIn_payload                  ), //i
    .io_pop_valid    (k_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (k_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (k_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (k_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (k_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                            ), //i
    .clk_1_resetn    (clk_1_resetn                         )  //i
  );
  BottleNeckFifo k_fifo (
    .io_push_valid   (k_fifo_io_push_valid        ), //i
    .io_push_ready   (k_fifo_io_push_ready        ), //o
    .io_push_payload (k_pushVecBits[511:0]        ), //i
    .io_pop_valid    (k_fifo_io_pop_valid         ), //o
    .io_pop_ready    (k_fifo_io_pop_ready         ), //i
    .io_pop_payload  (k_fifo_io_pop_payload[511:0]), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_69 v_prefillIn_fifo (
    .io_push_valid   (v_prefillIn_valid                    ), //i
    .io_push_ready   (v_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (v_prefillIn_payload                  ), //i
    .io_pop_valid    (v_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (v_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (v_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (v_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (v_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                            ), //i
    .clk_1_resetn    (clk_1_resetn                         )  //i
  );
  BottleNeckFifo_1 v_fifo (
    .io_push_valid   (v_fifo_io_push_valid        ), //i
    .io_push_ready   (v_fifo_io_push_ready        ), //o
    .io_push_payload (v_pushVecBits[511:0]        ), //i
    .io_pop_valid    (v_fifo_io_pop_valid         ), //o
    .io_pop_ready    (v_fifo_io_pop_ready         ), //i
    .io_pop_payload  (v_fifo_io_pop_payload[511:0]), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_8 busFifo (
    .io_push_valid            (busMux_io_output_valid                  ), //i
    .io_push_ready            (busFifo_io_push_ready                   ), //o
    .io_push_payload_last     (busMux_io_output_payload_last           ), //i
    .io_push_payload_fragment (busMux_io_output_payload_fragment[511:0]), //i
    .io_pop_valid             (busFifo_io_pop_valid                    ), //o
    .io_pop_ready             (io_kvBus_ready                          ), //i
    .io_pop_payload_last      (busFifo_io_pop_payload_last             ), //o
    .io_pop_payload_fragment  (busFifo_io_pop_payload_fragment[511:0]  ), //o
    .io_flush                 (1'b0                                    ), //i
    .io_occupancy             (busFifo_io_occupancy[5:0]               ), //o
    .io_availability          (busFifo_io_availability[5:0]            ), //o
    .clk_1_clk                (clk_1_clk                               ), //i
    .clk_1_resetn             (clk_1_resetn                            )  //i
  );
  StreamMux_20 busMux (
    .io_select                    (select_1[1:0]                           ), //i
    .io_inputs_0_valid            (kToBusPipe_valid                        ), //i
    .io_inputs_0_ready            (busMux_io_inputs_0_ready                ), //o
    .io_inputs_0_payload_last     (kToBusPipe_payload_last                 ), //i
    .io_inputs_0_payload_fragment (kToBusPipe_payload_fragment[511:0]      ), //i
    .io_inputs_1_valid            (vToBusPipe_valid                        ), //i
    .io_inputs_1_ready            (busMux_io_inputs_1_ready                ), //o
    .io_inputs_1_payload_last     (vToBusPipe_payload_last                 ), //i
    .io_inputs_1_payload_fragment (vToBusPipe_payload_fragment[511:0]      ), //i
    .io_inputs_2_valid            (qOutBusPipe_valid                       ), //i
    .io_inputs_2_ready            (busMux_io_inputs_2_ready                ), //o
    .io_inputs_2_payload_last     (qOutBusPipe_payload_last                ), //i
    .io_inputs_2_payload_fragment (qOutBusPipe_payload_fragment[511:0]     ), //i
    .io_output_valid              (busMux_io_output_valid                  ), //o
    .io_output_ready              (busFifo_io_push_ready                   ), //i
    .io_output_payload_last       (busMux_io_output_payload_last           ), //o
    .io_output_payload_fragment   (busMux_io_output_payload_fragment[511:0])  //o
  );
  always @(*) begin
    case(k_outCnt)
      4'b0000 : t_k_sOut_payload = k_dataSplit_0;
      4'b0001 : t_k_sOut_payload = k_dataSplit_1;
      4'b0010 : t_k_sOut_payload = k_dataSplit_2;
      4'b0011 : t_k_sOut_payload = k_dataSplit_3;
      4'b0100 : t_k_sOut_payload = k_dataSplit_4;
      4'b0101 : t_k_sOut_payload = k_dataSplit_5;
      4'b0110 : t_k_sOut_payload = k_dataSplit_6;
      4'b0111 : t_k_sOut_payload = k_dataSplit_7;
      4'b1000 : t_k_sOut_payload = k_dataSplit_8;
      4'b1001 : t_k_sOut_payload = k_dataSplit_9;
      4'b1010 : t_k_sOut_payload = k_dataSplit_10;
      4'b1011 : t_k_sOut_payload = k_dataSplit_11;
      4'b1100 : t_k_sOut_payload = k_dataSplit_12;
      4'b1101 : t_k_sOut_payload = k_dataSplit_13;
      4'b1110 : t_k_sOut_payload = k_dataSplit_14;
      default : t_k_sOut_payload = k_dataSplit_15;
    endcase
  end

  always @(*) begin
    case(v_outCnt)
      4'b0000 : t_v_sOut_payload = v_dataSplit_0;
      4'b0001 : t_v_sOut_payload = v_dataSplit_1;
      4'b0010 : t_v_sOut_payload = v_dataSplit_2;
      4'b0011 : t_v_sOut_payload = v_dataSplit_3;
      4'b0100 : t_v_sOut_payload = v_dataSplit_4;
      4'b0101 : t_v_sOut_payload = v_dataSplit_5;
      4'b0110 : t_v_sOut_payload = v_dataSplit_6;
      4'b0111 : t_v_sOut_payload = v_dataSplit_7;
      4'b1000 : t_v_sOut_payload = v_dataSplit_8;
      4'b1001 : t_v_sOut_payload = v_dataSplit_9;
      4'b1010 : t_v_sOut_payload = v_dataSplit_10;
      4'b1011 : t_v_sOut_payload = v_dataSplit_11;
      4'b1100 : t_v_sOut_payload = v_dataSplit_12;
      4'b1101 : t_v_sOut_payload = v_dataSplit_13;
      4'b1110 : t_v_sOut_payload = v_dataSplit_14;
      default : t_v_sOut_payload = v_dataSplit_15;
    endcase
  end

  always @(*) begin
    kScale_ready = kScalePipe_ready;
    if((! kScalePipe_valid)) begin
      kScale_ready = 1'b1;
    end
  end

  assign kScalePipe_valid = kScale_rValid;
  assign kScalePipe_payload = kScale_rData;
  assign kScale_valid = (io_qScale_valid && (! scaleIsV));
  assign kScale_payload = {{io_qScale_payload[15],t_kScale_payload},io_qScale_payload[9 : 0]};
  always @(*) begin
    kZero_ready = kZeroPipe_ready;
    if((! kZeroPipe_valid)) begin
      kZero_ready = 1'b1;
    end
  end

  assign kZeroPipe_valid = kZero_rValid;
  assign kZeroPipe_payload = kZero_rData;
  assign kZero_valid = (io_qZero_valid && (! zeroIsV));
  assign kZero_payload = io_qZero_payload;
  always @(*) begin
    vScale_ready = vScalePipe_ready;
    if((! vScalePipe_valid)) begin
      vScale_ready = 1'b1;
    end
  end

  assign vScalePipe_valid = vScale_rValid;
  assign vScalePipe_payload = vScale_rData;
  assign vScale_valid = (io_qScale_valid && scaleIsV);
  assign vScale_payload = {{io_qScale_payload[15],t_vScale_payload},io_qScale_payload[9 : 0]};
  always @(*) begin
    vZero_ready = vZeroPipe_ready;
    if((! vZeroPipe_valid)) begin
      vZero_ready = 1'b1;
    end
  end

  assign vZeroPipe_valid = vZero_rValid;
  assign vZeroPipe_payload = vZero_rData;
  assign vZero_valid = (io_qZero_valid && zeroIsV);
  assign vZero_payload = io_qZero_payload;
  assign kScalePipe_ready = kJoinEvent_fire;
  assign kZeroPipe_ready = kJoinEvent_fire;
  assign kJoinEvent_valid = (kScalePipe_valid && kZeroPipe_valid);
  assign kJoinEvent_fire = (kJoinEvent_valid && kJoinEvent_ready);
  assign kSz_valid = kJoinEvent_valid;
  assign kJoinEvent_ready = kSz_ready;
  assign kSz_payload = {{8'h0,kZeroPipe_payload},kScalePipe_payload};
  assign vScalePipe_ready = vJoinEvent_fire;
  assign vZeroPipe_ready = vJoinEvent_fire;
  assign vJoinEvent_valid = (vScalePipe_valid && vZeroPipe_valid);
  assign vJoinEvent_fire = (vJoinEvent_valid && vJoinEvent_ready);
  assign vSz_valid = vJoinEvent_valid;
  assign vJoinEvent_ready = vSz_ready;
  assign vSz_payload = {{8'h0,vZeroPipe_payload},vScalePipe_payload};
  assign firstTokenIndex = (tokenIndexCnt[3 : 0] == 4'b0000);
  assign k_prefillIn_valid = (io_tokenIndexFlow_valid && (! firstTokenIndex));
  assign k_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign k_prefillIn_ready = k_prefillIn_fifo_io_push_ready;
  always @(*) begin
    k_prefillIn_fifo_io_pop_ready = 1'b0;
    if(k_sOutFire) begin
      if(k_outCntOvf) begin
        if(t_when) begin
          if(k_lastLayer) begin
            k_prefillIn_fifo_io_pop_ready = 1'b1;
          end
        end
      end
    end
  end

  assign k_dataFire = (k_data_valid && k_data_ready);
  always @(*) begin
    k_fifo_io_pop_ready = k_fifoPop_ready;
    if((! k_fifoPop_valid)) begin
      k_fifo_io_pop_ready = 1'b1;
    end
  end

  assign k_fifoPop_valid = szPacker_k_fifo_io_pop_rValid;
  assign k_fifoPop_payload = szPacker_k_fifo_io_pop_rData;
  assign k_tokenCntAbout2Ovf = (k_tokenCnt == 4'b1110);
  assign k_depthCntOvf = (k_depthCnt == 9'h1ff);
  always @(*) begin
    k_pushVec_0 = k_fifoPop_payload[31 : 0];
    if(t_1[0]) begin
      k_pushVec_0 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_1 = k_fifoPop_payload[63 : 32];
    if(t_1[1]) begin
      k_pushVec_1 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_2 = k_fifoPop_payload[95 : 64];
    if(t_1[2]) begin
      k_pushVec_2 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_3 = k_fifoPop_payload[127 : 96];
    if(t_1[3]) begin
      k_pushVec_3 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_4 = k_fifoPop_payload[159 : 128];
    if(t_1[4]) begin
      k_pushVec_4 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_5 = k_fifoPop_payload[191 : 160];
    if(t_1[5]) begin
      k_pushVec_5 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_6 = k_fifoPop_payload[223 : 192];
    if(t_1[6]) begin
      k_pushVec_6 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_7 = k_fifoPop_payload[255 : 224];
    if(t_1[7]) begin
      k_pushVec_7 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_8 = k_fifoPop_payload[287 : 256];
    if(t_1[8]) begin
      k_pushVec_8 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_9 = k_fifoPop_payload[319 : 288];
    if(t_1[9]) begin
      k_pushVec_9 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_10 = k_fifoPop_payload[351 : 320];
    if(t_1[10]) begin
      k_pushVec_10 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_11 = k_fifoPop_payload[383 : 352];
    if(t_1[11]) begin
      k_pushVec_11 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_12 = k_fifoPop_payload[415 : 384];
    if(t_1[12]) begin
      k_pushVec_12 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_13 = k_fifoPop_payload[447 : 416];
    if(t_1[13]) begin
      k_pushVec_13 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_14 = k_fifoPop_payload[479 : 448];
    if(t_1[14]) begin
      k_pushVec_14 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_15 = k_fifoPop_payload[511 : 480];
    if(t_1[15]) begin
      k_pushVec_15 = k_data_payload;
    end
  end

  assign t_1 = ({15'd0,1'b1} <<< k_tokenCnt);
  assign k_pushVecBits = {k_pushVec_15,{k_pushVec_14,{k_pushVec_13,{k_pushVec_12,{k_pushVec_11,{k_pushVec_10,{k_pushVec_9,{k_pushVec_8,{k_pushVec_7,{k_pushVec_6,{k_pushVec_5,{k_pushVec_4,{k_pushVec_3,{k_pushVec_2,{k_pushVec_1,k_pushVec_0}}}}}}}}}}}}}}};
  assign k_fifo_io_push_valid = (k_dataFire && (! k_tokenCntOvfReg));
  assign k_fifoPop_ready = (k_dataFire && (! k_isTokenZero));
  assign k_toBus_valid = (k_dataFire && k_tokenCntOvfReg);
  assign k_toBus_payload_last = 1'b1;
  assign k_toBus_payload_fragment = k_pushVecBits;
  assign k_fifoPop_fire = (k_fifoPop_valid && k_fifoPop_ready);
  assign k_sOut_valid = (((k_fifoPop_valid && k_flag) && (! k_isTokenZero)) && k_vld);
  assign k_outCntOvf = (k_outCnt == t_k_outCntOvf);
  assign k_lastLayer = (k_layerCnt == 5'h1f);
  assign k_sOutFire = (k_sOut_valid && k_sOut_ready);
  assign k_data_valid = kSz_valid;
  assign kSz_ready = k_data_ready;
  assign k_data_payload = kSz_payload;
  assign k_data_ready = (! k_sOut_valid);
  assign k_dataSplit_0 = k_fifoPop_payload[31 : 0];
  assign k_dataSplit_1 = k_fifoPop_payload[63 : 32];
  assign k_dataSplit_2 = k_fifoPop_payload[95 : 64];
  assign k_dataSplit_3 = k_fifoPop_payload[127 : 96];
  assign k_dataSplit_4 = k_fifoPop_payload[159 : 128];
  assign k_dataSplit_5 = k_fifoPop_payload[191 : 160];
  assign k_dataSplit_6 = k_fifoPop_payload[223 : 192];
  assign k_dataSplit_7 = k_fifoPop_payload[255 : 224];
  assign k_dataSplit_8 = k_fifoPop_payload[287 : 256];
  assign k_dataSplit_9 = k_fifoPop_payload[319 : 288];
  assign k_dataSplit_10 = k_fifoPop_payload[351 : 320];
  assign k_dataSplit_11 = k_fifoPop_payload[383 : 352];
  assign k_dataSplit_12 = k_fifoPop_payload[415 : 384];
  assign k_dataSplit_13 = k_fifoPop_payload[447 : 416];
  assign k_dataSplit_14 = k_fifoPop_payload[479 : 448];
  assign k_dataSplit_15 = k_fifoPop_payload[511 : 480];
  assign k_sOut_payload = t_k_sOut_payload;
  assign k_throwCond = (k_prefillIn_fifo_io_pop_payload && k_lastLayer);
  always @(*) begin
    k_sOutThrow_valid = k_sOut_valid;
    if(k_throwCond) begin
      k_sOutThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    k_sOut_ready = k_sOutThrow_ready;
    if(k_throwCond) begin
      k_sOut_ready = 1'b1;
    end
  end

  assign k_sOutThrow_payload = k_sOut_payload;
  assign v_prefillIn_valid = (io_tokenIndexFlow_valid && (! firstTokenIndex));
  assign v_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign v_prefillIn_ready = v_prefillIn_fifo_io_push_ready;
  always @(*) begin
    v_prefillIn_fifo_io_pop_ready = 1'b0;
    if(v_sOutFire) begin
      if(v_outCntOvf) begin
        if(t_when_1) begin
          if(v_lastLayer) begin
            v_prefillIn_fifo_io_pop_ready = 1'b1;
          end
        end
      end
    end
  end

  assign v_dataFire = (v_data_valid && v_data_ready);
  always @(*) begin
    v_fifo_io_pop_ready = v_fifoPop_ready;
    if((! v_fifoPop_valid)) begin
      v_fifo_io_pop_ready = 1'b1;
    end
  end

  assign v_fifoPop_valid = szPacker_v_fifo_io_pop_rValid;
  assign v_fifoPop_payload = szPacker_v_fifo_io_pop_rData;
  assign v_tokenCntAbout2Ovf = (v_tokenCnt == 4'b1110);
  assign v_depthCntOvf = (v_depthCnt == 9'h1ff);
  always @(*) begin
    v_pushVec_0 = v_fifoPop_payload[31 : 0];
    if(t_2[0]) begin
      v_pushVec_0 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_1 = v_fifoPop_payload[63 : 32];
    if(t_2[1]) begin
      v_pushVec_1 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_2 = v_fifoPop_payload[95 : 64];
    if(t_2[2]) begin
      v_pushVec_2 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_3 = v_fifoPop_payload[127 : 96];
    if(t_2[3]) begin
      v_pushVec_3 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_4 = v_fifoPop_payload[159 : 128];
    if(t_2[4]) begin
      v_pushVec_4 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_5 = v_fifoPop_payload[191 : 160];
    if(t_2[5]) begin
      v_pushVec_5 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_6 = v_fifoPop_payload[223 : 192];
    if(t_2[6]) begin
      v_pushVec_6 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_7 = v_fifoPop_payload[255 : 224];
    if(t_2[7]) begin
      v_pushVec_7 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_8 = v_fifoPop_payload[287 : 256];
    if(t_2[8]) begin
      v_pushVec_8 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_9 = v_fifoPop_payload[319 : 288];
    if(t_2[9]) begin
      v_pushVec_9 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_10 = v_fifoPop_payload[351 : 320];
    if(t_2[10]) begin
      v_pushVec_10 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_11 = v_fifoPop_payload[383 : 352];
    if(t_2[11]) begin
      v_pushVec_11 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_12 = v_fifoPop_payload[415 : 384];
    if(t_2[12]) begin
      v_pushVec_12 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_13 = v_fifoPop_payload[447 : 416];
    if(t_2[13]) begin
      v_pushVec_13 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_14 = v_fifoPop_payload[479 : 448];
    if(t_2[14]) begin
      v_pushVec_14 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_15 = v_fifoPop_payload[511 : 480];
    if(t_2[15]) begin
      v_pushVec_15 = v_data_payload;
    end
  end

  assign t_2 = ({15'd0,1'b1} <<< v_tokenCnt);
  assign v_pushVecBits = {v_pushVec_15,{v_pushVec_14,{v_pushVec_13,{v_pushVec_12,{v_pushVec_11,{v_pushVec_10,{v_pushVec_9,{v_pushVec_8,{v_pushVec_7,{v_pushVec_6,{v_pushVec_5,{v_pushVec_4,{v_pushVec_3,{v_pushVec_2,{v_pushVec_1,v_pushVec_0}}}}}}}}}}}}}}};
  assign v_fifo_io_push_valid = (v_dataFire && (! v_tokenCntOvfReg));
  assign v_fifoPop_ready = (v_dataFire && (! v_isTokenZero));
  assign v_toBus_valid = (v_dataFire && v_tokenCntOvfReg);
  assign v_toBus_payload_last = 1'b1;
  assign v_toBus_payload_fragment = v_pushVecBits;
  assign v_fifoPop_fire = (v_fifoPop_valid && v_fifoPop_ready);
  assign v_sOut_valid = (((v_fifoPop_valid && v_flag) && (! v_isTokenZero)) && v_vld);
  assign v_outCntOvf = (v_outCnt == t_v_outCntOvf);
  assign v_lastLayer = (v_layerCnt == 5'h1f);
  assign v_sOutFire = (v_sOut_valid && v_sOut_ready);
  assign v_data_valid = vSz_valid;
  assign vSz_ready = v_data_ready;
  assign v_data_payload = vSz_payload;
  assign v_data_ready = (! v_sOut_valid);
  assign v_dataSplit_0 = v_fifoPop_payload[31 : 0];
  assign v_dataSplit_1 = v_fifoPop_payload[63 : 32];
  assign v_dataSplit_2 = v_fifoPop_payload[95 : 64];
  assign v_dataSplit_3 = v_fifoPop_payload[127 : 96];
  assign v_dataSplit_4 = v_fifoPop_payload[159 : 128];
  assign v_dataSplit_5 = v_fifoPop_payload[191 : 160];
  assign v_dataSplit_6 = v_fifoPop_payload[223 : 192];
  assign v_dataSplit_7 = v_fifoPop_payload[255 : 224];
  assign v_dataSplit_8 = v_fifoPop_payload[287 : 256];
  assign v_dataSplit_9 = v_fifoPop_payload[319 : 288];
  assign v_dataSplit_10 = v_fifoPop_payload[351 : 320];
  assign v_dataSplit_11 = v_fifoPop_payload[383 : 352];
  assign v_dataSplit_12 = v_fifoPop_payload[415 : 384];
  assign v_dataSplit_13 = v_fifoPop_payload[447 : 416];
  assign v_dataSplit_14 = v_fifoPop_payload[479 : 448];
  assign v_dataSplit_15 = v_fifoPop_payload[511 : 480];
  assign v_sOut_payload = t_v_sOut_payload;
  assign v_throwCond = (v_prefillIn_fifo_io_pop_payload && v_lastLayer);
  always @(*) begin
    v_sOutThrow_valid = v_sOut_valid;
    if(v_throwCond) begin
      v_sOutThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    v_sOut_ready = v_sOutThrow_ready;
    if(v_throwCond) begin
      v_sOut_ready = 1'b1;
    end
  end

  assign v_sOutThrow_payload = v_sOut_payload;
  assign t_qOutAdapt = io_qOut_payload_fragment;
  assign qOutAdapt = {t_qOutAdapt,{t_qOutAdapt_1,{t_qOutAdapt_2,{t_qOutAdapt_3,{t_qOutAdapt_4,{t_qOutAdapt_5,{t_qOutAdapt_6,{t_qOutAdapt_7,{t_qOutAdapt_8,{t_qOutAdapt_9,{t_qOutAdapt_10,{t_qOutAdapt_11,{t_qOutAdapt_12,{t_qOutAdapt_13,{t_qOutAdapt_14,{t_qOutAdapt_15,t_qOutAdapt_64}}}}}}}}}}}}}}}};
  assign qOutCntOvf = (qOutCnt == 6'h3f);
  assign qOutBus_valid = (io_qOut_valid && qOutCntOvf);
  assign qOutBus_payload_last = io_qOut_payload_last;
  assign qOutBus_payload_fragment = qOutAdapt;
  always @(*) begin
    k_sOutThrow_ready = k_sOutThrow_m2sPipe_ready;
    if((! k_sOutThrow_m2sPipe_valid)) begin
      k_sOutThrow_ready = 1'b1;
    end
  end

  assign k_sOutThrow_m2sPipe_valid = k_sOutThrow_rValid;
  assign k_sOutThrow_m2sPipe_payload = k_sOutThrow_rData;
  always @(*) begin
    k_sOutThrow_m2sPipe_ready = k_sOutThrow_m2sPipe_m2sPipe_ready;
    if((! k_sOutThrow_m2sPipe_m2sPipe_valid)) begin
      k_sOutThrow_m2sPipe_ready = 1'b1;
    end
  end

  assign k_sOutThrow_m2sPipe_m2sPipe_valid = k_sOutThrow_m2sPipe_rValid;
  assign k_sOutThrow_m2sPipe_m2sPipe_payload = k_sOutThrow_m2sPipe_rData;
  assign io_kSzOut_valid = k_sOutThrow_m2sPipe_m2sPipe_valid;
  assign k_sOutThrow_m2sPipe_m2sPipe_ready = io_kSzOut_ready;
  assign io_kSzOut_payload = k_sOutThrow_m2sPipe_m2sPipe_payload;
  always @(*) begin
    v_sOutThrow_ready = v_sOutThrow_m2sPipe_ready;
    if((! v_sOutThrow_m2sPipe_valid)) begin
      v_sOutThrow_ready = 1'b1;
    end
  end

  assign v_sOutThrow_m2sPipe_valid = v_sOutThrow_rValid;
  assign v_sOutThrow_m2sPipe_payload = v_sOutThrow_rData;
  always @(*) begin
    v_sOutThrow_m2sPipe_ready = v_sOutThrow_m2sPipe_m2sPipe_ready;
    if((! v_sOutThrow_m2sPipe_m2sPipe_valid)) begin
      v_sOutThrow_m2sPipe_ready = 1'b1;
    end
  end

  assign v_sOutThrow_m2sPipe_m2sPipe_valid = v_sOutThrow_m2sPipe_rValid;
  assign v_sOutThrow_m2sPipe_m2sPipe_payload = v_sOutThrow_m2sPipe_rData;
  assign io_vSzOut_valid = v_sOutThrow_m2sPipe_m2sPipe_valid;
  assign v_sOutThrow_m2sPipe_m2sPipe_ready = io_vSzOut_ready;
  assign io_vSzOut_payload = v_sOutThrow_m2sPipe_m2sPipe_payload;
  always @(*) begin
    qOutBus_ready = qOutBus_m2sPipe_ready;
    if((! qOutBus_m2sPipe_valid)) begin
      qOutBus_ready = 1'b1;
    end
  end

  assign qOutBus_m2sPipe_valid = qOutBus_rValid;
  assign qOutBus_m2sPipe_payload_last = qOutBus_rData_last;
  assign qOutBus_m2sPipe_payload_fragment = qOutBus_rData_fragment;
  always @(*) begin
    qOutBus_m2sPipe_ready = qOutBusPipe_ready;
    if((! qOutBusPipe_valid)) begin
      qOutBus_m2sPipe_ready = 1'b1;
    end
  end

  assign qOutBusPipe_valid = qOutBus_m2sPipe_rValid;
  assign qOutBusPipe_payload_last = qOutBus_m2sPipe_rData_last;
  assign qOutBusPipe_payload_fragment = qOutBus_m2sPipe_rData_fragment;
  always @(*) begin
    k_toBus_ready = kToBusPipe_ready;
    if((! kToBusPipe_valid)) begin
      k_toBus_ready = 1'b1;
    end
  end

  assign kToBusPipe_valid = k_toBus_rValid;
  assign kToBusPipe_payload_last = k_toBus_rData_last;
  assign kToBusPipe_payload_fragment = k_toBus_rData_fragment;
  always @(*) begin
    v_toBus_ready = vToBusPipe_ready;
    if((! vToBusPipe_valid)) begin
      v_toBus_ready = 1'b1;
    end
  end

  assign vToBusPipe_valid = v_toBus_rValid;
  assign vToBusPipe_payload_last = v_toBus_rData_last;
  assign vToBusPipe_payload_fragment = v_toBus_rData_fragment;
  assign kToBusPipe_ready = busMux_io_inputs_0_ready;
  assign vToBusPipe_ready = busMux_io_inputs_1_ready;
  assign qOutBusPipe_ready = busMux_io_inputs_2_ready;
  assign io_kvBus_valid = busFifo_io_pop_valid;
  assign io_kvBus_payload_last = busFifo_io_pop_payload_last;
  assign io_kvBus_payload_fragment = busFifo_io_pop_payload_fragment;
  always @(*) begin
    szToMemNext = szToMem;
    if(enInc) begin
      if(t_when_2) begin
        if(t_when_3) begin
          if((tokenCnt == 4'b1110)) begin
            szToMemNext = 1'b1;
          end
          if(szToMem) begin
            szToMemNext = 1'b0;
          end
        end
      end
    end
  end

  always @(*) begin
    stateCntNext = stateCnt;
    if(enStateCntInc) begin
      stateCntNext = (stateCnt + 2'b01);
    end
  end

  assign qOutBusPipe_fire = (qOutBusPipe_valid && qOutBusPipe_ready);
  assign enInc = (qOutBusPipe_fire && qOutBusPipe_payload_last);
  assign szPacker_busMux_io_output_fire = (busMux_io_output_valid && busFifo_io_push_ready);
  assign enStateCntInc = ((szToMem && szPacker_busMux_io_output_fire) && busMux_io_output_payload_last);
  always @(*) begin
    selectNext = 2'b10;
    if((szToMemNext && (stateCntNext == 2'b00))) begin
      selectNext = 2'b00;
    end
    if((szToMemNext && (stateCntNext == 2'b10))) begin
      selectNext = 2'b01;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      scaleIsV <= 1'b0;
      zeroIsV <= 1'b0;
      kScale_rValid <= 1'b0;
      kZero_rValid <= 1'b0;
      vScale_rValid <= 1'b0;
      vZero_rValid <= 1'b0;
      tokenIndexCnt <= 16'h0;
      szPacker_k_fifo_io_pop_rValid <= 1'b0;
      k_tokenCnt <= 4'b0000;
      k_depthCnt <= 9'h0;
      k_isTokenZero <= 1'b1;
      k_tokenCntOvfReg <= 1'b0;
      k_flag <= 1'b1;
      k_vld <= 1'b1;
      k_outCnt <= 4'b0000;
      k_headCnt <= 4'b0000;
      k_layerCnt <= 5'h0;
      szPacker_v_fifo_io_pop_rValid <= 1'b0;
      v_tokenCnt <= 4'b0000;
      v_depthCnt <= 9'h0;
      v_isTokenZero <= 1'b1;
      v_tokenCntOvfReg <= 1'b0;
      v_flag <= 1'b1;
      v_vld <= 1'b1;
      v_outCnt <= 4'b0000;
      v_headCnt <= 4'b0000;
      v_layerCnt <= 5'h0;
      qOutCnt <= 6'h0;
      k_sOutThrow_rValid <= 1'b0;
      k_sOutThrow_m2sPipe_rValid <= 1'b0;
      v_sOutThrow_rValid <= 1'b0;
      v_sOutThrow_m2sPipe_rValid <= 1'b0;
      qOutBus_rValid <= 1'b0;
      qOutBus_m2sPipe_rValid <= 1'b0;
      k_toBus_rValid <= 1'b0;
      v_toBus_rValid <= 1'b0;
      headCnt <= 5'h0;
      layerCnt <= 5'h0;
      tokenCnt <= 4'b0000;
      szToMem <= 1'b0;
      stateCnt <= 2'b00;
      select_1 <= 2'b10;
    end else begin
      if(io_qScale_valid) begin
        scaleIsV <= (! scaleIsV);
      end
      if(io_qZero_valid) begin
        zeroIsV <= (! zeroIsV);
      end
      if(kScale_ready) begin
        kScale_rValid <= kScale_valid;
      end
      if(kZero_ready) begin
        kZero_rValid <= kZero_valid;
      end
      if(vScale_ready) begin
        vScale_rValid <= vScale_valid;
      end
      if(vZero_ready) begin
        vZero_rValid <= vZero_valid;
      end
      if(io_tokenIndexFlow_valid) begin
        tokenIndexCnt <= (tokenIndexCnt + 16'h0001);
      end
      if(k_fifo_io_pop_ready) begin
        szPacker_k_fifo_io_pop_rValid <= k_fifo_io_pop_valid;
      end
      if(k_dataFire) begin
        k_depthCnt <= (k_depthCnt + 9'h001);
        if(k_depthCntOvf) begin
          k_tokenCnt <= (k_tokenCnt + 4'b0001);
          k_isTokenZero <= 1'b0;
          k_depthCnt <= 9'h0;
          if(k_tokenCntAbout2Ovf) begin
            k_tokenCntOvfReg <= 1'b1;
          end
          if(k_tokenCntOvfReg) begin
            k_tokenCnt <= 4'b0000;
            k_isTokenZero <= 1'b1;
            k_tokenCntOvfReg <= 1'b0;
          end
        end
      end
      if(k_fifoPop_fire) begin
        k_flag <= 1'b1;
      end
      if(io_nextLayer) begin
        k_vld <= 1'b1;
      end
      if(k_sOutFire) begin
        k_outCnt <= (k_outCnt + 4'b0001);
        if(k_outCntOvf) begin
          k_outCnt <= 4'b0000;
          k_flag <= 1'b0;
          k_headCnt <= (k_headCnt + 4'b0001);
          if(t_when) begin
            k_headCnt <= 4'b0000;
            k_vld <= 1'b0;
            k_layerCnt <= (k_layerCnt + 5'h01);
            if(k_lastLayer) begin
              k_layerCnt <= 5'h0;
            end
          end
        end
      end
      if(v_fifo_io_pop_ready) begin
        szPacker_v_fifo_io_pop_rValid <= v_fifo_io_pop_valid;
      end
      if(v_dataFire) begin
        v_depthCnt <= (v_depthCnt + 9'h001);
        if(v_depthCntOvf) begin
          v_tokenCnt <= (v_tokenCnt + 4'b0001);
          v_isTokenZero <= 1'b0;
          v_depthCnt <= 9'h0;
          if(v_tokenCntAbout2Ovf) begin
            v_tokenCntOvfReg <= 1'b1;
          end
          if(v_tokenCntOvfReg) begin
            v_tokenCnt <= 4'b0000;
            v_isTokenZero <= 1'b1;
            v_tokenCntOvfReg <= 1'b0;
          end
        end
      end
      if(v_fifoPop_fire) begin
        v_flag <= 1'b1;
      end
      if(io_nextLayer) begin
        v_vld <= 1'b1;
      end
      if(v_sOutFire) begin
        v_outCnt <= (v_outCnt + 4'b0001);
        if(v_outCntOvf) begin
          v_outCnt <= 4'b0000;
          v_flag <= 1'b0;
          v_headCnt <= (v_headCnt + 4'b0001);
          if(t_when_1) begin
            v_headCnt <= 4'b0000;
            v_vld <= 1'b0;
            v_layerCnt <= (v_layerCnt + 5'h01);
            if(v_lastLayer) begin
              v_layerCnt <= 5'h0;
            end
          end
        end
      end
      if(io_qOut_valid) begin
        qOutCnt <= (qOutCnt + 6'h01);
        if(qOutCntOvf) begin
          qOutCnt <= 6'h0;
        end
      end
      if(k_sOutThrow_ready) begin
        k_sOutThrow_rValid <= k_sOutThrow_valid;
      end
      if(k_sOutThrow_m2sPipe_ready) begin
        k_sOutThrow_m2sPipe_rValid <= k_sOutThrow_m2sPipe_valid;
      end
      if(v_sOutThrow_ready) begin
        v_sOutThrow_rValid <= v_sOutThrow_valid;
      end
      if(v_sOutThrow_m2sPipe_ready) begin
        v_sOutThrow_m2sPipe_rValid <= v_sOutThrow_m2sPipe_valid;
      end
      if(qOutBus_ready) begin
        qOutBus_rValid <= qOutBus_valid;
      end
      if(qOutBus_m2sPipe_ready) begin
        qOutBus_m2sPipe_rValid <= qOutBus_m2sPipe_valid;
      end
      if(k_toBus_ready) begin
        k_toBus_rValid <= k_toBus_valid;
      end
      if(v_toBus_ready) begin
        v_toBus_rValid <= v_toBus_valid;
      end
      szToMem <= szToMemNext;
      if(enInc) begin
        headCnt <= (headCnt + 5'h01);
        if(t_when_2) begin
          headCnt <= 5'h0;
          layerCnt <= (layerCnt + 5'h01);
          if(t_when_3) begin
            layerCnt <= 5'h0;
            tokenCnt <= (tokenCnt + 4'b0001);
          end
        end
      end
      stateCnt <= stateCntNext;
      select_1 <= selectNext;
    end
  end

  always @(posedge clk_1_clk) begin
    if(kScale_ready) begin
      kScale_rData <= kScale_payload;
    end
    if(kZero_ready) begin
      kZero_rData <= kZero_payload;
    end
    if(vScale_ready) begin
      vScale_rData <= vScale_payload;
    end
    if(vZero_ready) begin
      vZero_rData <= vZero_payload;
    end
    if(k_fifo_io_pop_ready) begin
      szPacker_k_fifo_io_pop_rData <= k_fifo_io_pop_payload;
    end
    if(v_fifo_io_pop_ready) begin
      szPacker_v_fifo_io_pop_rData <= v_fifo_io_pop_payload;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_1 <= t_qOutAdapt;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_2 <= t_qOutAdapt_1;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_3 <= t_qOutAdapt_2;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_4 <= t_qOutAdapt_3;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_5 <= t_qOutAdapt_4;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_6 <= t_qOutAdapt_5;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_7 <= t_qOutAdapt_6;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_8 <= t_qOutAdapt_7;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_9 <= t_qOutAdapt_8;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_10 <= t_qOutAdapt_9;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_11 <= t_qOutAdapt_10;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_12 <= t_qOutAdapt_11;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_13 <= t_qOutAdapt_12;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_14 <= t_qOutAdapt_13;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_15 <= t_qOutAdapt_14;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_16 <= t_qOutAdapt_15;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_17 <= t_qOutAdapt_16;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_18 <= t_qOutAdapt_17;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_19 <= t_qOutAdapt_18;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_20 <= t_qOutAdapt_19;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_21 <= t_qOutAdapt_20;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_22 <= t_qOutAdapt_21;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_23 <= t_qOutAdapt_22;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_24 <= t_qOutAdapt_23;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_25 <= t_qOutAdapt_24;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_26 <= t_qOutAdapt_25;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_27 <= t_qOutAdapt_26;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_28 <= t_qOutAdapt_27;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_29 <= t_qOutAdapt_28;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_30 <= t_qOutAdapt_29;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_31 <= t_qOutAdapt_30;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_32 <= t_qOutAdapt_31;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_33 <= t_qOutAdapt_32;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_34 <= t_qOutAdapt_33;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_35 <= t_qOutAdapt_34;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_36 <= t_qOutAdapt_35;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_37 <= t_qOutAdapt_36;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_38 <= t_qOutAdapt_37;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_39 <= t_qOutAdapt_38;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_40 <= t_qOutAdapt_39;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_41 <= t_qOutAdapt_40;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_42 <= t_qOutAdapt_41;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_43 <= t_qOutAdapt_42;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_44 <= t_qOutAdapt_43;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_45 <= t_qOutAdapt_44;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_46 <= t_qOutAdapt_45;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_47 <= t_qOutAdapt_46;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_48 <= t_qOutAdapt_47;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_49 <= t_qOutAdapt_48;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_50 <= t_qOutAdapt_49;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_51 <= t_qOutAdapt_50;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_52 <= t_qOutAdapt_51;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_53 <= t_qOutAdapt_52;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_54 <= t_qOutAdapt_53;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_55 <= t_qOutAdapt_54;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_56 <= t_qOutAdapt_55;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_57 <= t_qOutAdapt_56;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_58 <= t_qOutAdapt_57;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_59 <= t_qOutAdapt_58;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_60 <= t_qOutAdapt_59;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_61 <= t_qOutAdapt_60;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_62 <= t_qOutAdapt_61;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_63 <= t_qOutAdapt_62;
    end
    if(k_sOutThrow_ready) begin
      k_sOutThrow_rData <= k_sOutThrow_payload;
    end
    if(k_sOutThrow_m2sPipe_ready) begin
      k_sOutThrow_m2sPipe_rData <= k_sOutThrow_m2sPipe_payload;
    end
    if(v_sOutThrow_ready) begin
      v_sOutThrow_rData <= v_sOutThrow_payload;
    end
    if(v_sOutThrow_m2sPipe_ready) begin
      v_sOutThrow_m2sPipe_rData <= v_sOutThrow_m2sPipe_payload;
    end
    if(qOutBus_ready) begin
      qOutBus_rData_last <= qOutBus_payload_last;
      qOutBus_rData_fragment <= qOutBus_payload_fragment;
    end
    if(qOutBus_m2sPipe_ready) begin
      qOutBus_m2sPipe_rData_last <= qOutBus_m2sPipe_payload_last;
      qOutBus_m2sPipe_rData_fragment <= qOutBus_m2sPipe_payload_fragment;
    end
    if(k_toBus_ready) begin
      k_toBus_rData_last <= k_toBus_payload_last;
      k_toBus_rData_fragment <= k_toBus_payload_fragment;
    end
    if(v_toBus_ready) begin
      v_toBus_rData_last <= v_toBus_payload_last;
      v_toBus_rData_fragment <= v_toBus_payload_fragment;
    end
  end


endmodule

module SiluFp32 (
  input  wire          io_in_valid,
  input  wire [15:0]   io_in_payload,
  output wire          io_out_valid,
  output wire [15:0]   io_out_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                io_in_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_in_to_ip_m_axis_result_tdata;
  wire                ipFlowIO_m_axis_result_tvalid;
  wire       [31:0]   ipFlowIO_m_axis_result_tdata;
  wire                fp32One_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32One_add_ip_m_axis_result_tdata;
  wire                inDly_div_ip_m_axis_result_tvalid;
  wire       [31:0]   inDly_div_ip_m_axis_result_tdata;
  wire                siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [15:0]   siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata;
  reg        [31:0]   t_s_axis_a_tdata;
  wire                fp32One_valid;
  wire       [31:0]   fp32One_payload;
  wire                inDly_valid;
  wire       [31:0]   inDly_payload;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_1;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_2;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_3;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_4;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_5;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_6;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_7;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_8;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_9;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_10;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_11;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_12;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_13;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_14;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_15;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_16;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_17;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_18;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_19;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_20;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_21;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_22;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_23;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_24;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_25;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_26;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_27;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_28;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_29;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_30;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_31;

  fp16toFp32 io_in_to_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (io_in_valid                          ), //i
    .s_axis_a_tdata       (io_in_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_in_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (io_in_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32exp20 ipFlowIO (
    .aclk                 (clk_1_clk                         ), //i
    .s_axis_a_tvalid      (io_in_to_ip_m_axis_result_tvalid  ), //i
    .s_axis_a_tdata       (t_s_axis_a_tdata[31:0]            ), //i
    .m_axis_result_tvalid (ipFlowIO_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (ipFlowIO_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32One_add_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (fp32One_valid                           ), //i
    .s_axis_a_tdata       (fp32One_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (ipFlowIO_m_axis_result_tvalid           ), //i
    .s_axis_b_tdata       (ipFlowIO_m_axis_result_tdata[31:0]      ), //i
    .m_axis_result_tvalid (fp32One_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32One_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32div28 inDly_div_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (inDly_valid                             ), //i
    .s_axis_a_tdata       (inDly_payload[31:0]                     ), //i
    .s_axis_b_tvalid      (fp32One_add_ip_m_axis_result_tvalid     ), //i
    .s_axis_b_tdata       (fp32One_add_ip_m_axis_result_tdata[31:0]), //i
    .m_axis_result_tvalid (inDly_div_ip_m_axis_result_tvalid       ), //o
    .m_axis_result_tdata  (inDly_div_ip_m_axis_result_tdata[31:0]  )  //o
  );
  fp32toFp16 siluAct_inDly_div_ip_m_axis_result_to_ip (
    .aclk                 (clk_1_clk                                                         ), //i
    .s_axis_a_tvalid      (inDly_div_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (inDly_div_ip_m_axis_result_tdata[31:0]                            ), //i
    .m_axis_result_tvalid (siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    t_s_axis_a_tdata = io_in_to_ip_m_axis_result_tdata;
    t_s_axis_a_tdata[31] = (! io_in_to_ip_m_axis_result_tdata[31]);
  end

  assign fp32One_valid = 1'b1;
  assign fp32One_payload = 32'h3f800000;
  assign inDly_payload = siluAct_io_in_to_ip_m_axis_result_tdata_delay_31;
  assign inDly_valid = fp32One_add_ip_m_axis_result_tvalid;
  assign io_out_valid = siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  assign io_out_payload = siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata;
  always @(posedge clk_1_clk) begin
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_1 <= io_in_to_ip_m_axis_result_tdata;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_2 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_1;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_3 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_2;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_4 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_3;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_5 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_4;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_6 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_5;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_7 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_6;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_8 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_7;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_9 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_8;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_10 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_9;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_11 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_10;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_12 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_11;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_13 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_12;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_14 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_13;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_15 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_14;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_16 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_15;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_17 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_16;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_18 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_17;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_19 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_18;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_20 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_19;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_21 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_20;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_22 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_21;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_23 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_22;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_24 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_23;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_25 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_24;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_26 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_25;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_27 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_26;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_28 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_27;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_29 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_28;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_30 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_29;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_31 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_30;
  end


endmodule

module GreedySampler (
  input  wire          logits_valid,
  input  wire [15:0]   logits_tdata,
  input  wire [5:0]    logits_tuser,
  output wire          argmax_tvalid,
  output wire [15:0]   argmax_tdata,
  output wire          endOfDecode,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                maxFlow_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    maxFlow_lt_async_ip_m_axis_result_tdata;
  wire       [15:0]   t_indexDly;
  wire                logitsIn_valid;
  wire       [15:0]   logitsIn_payload;
  wire                maxFlow_valid;
  reg        [15:0]   maxFlow_payload;
  reg        [14:0]   cnt;
  wire                cntOvf;
  wire                logitsProbe_tvalid;
  wire                logitsProbe_tlast;
  wire       [15:0]   logitsProbe_tdata;
  wire                xGreaterThanMax_valid;
  wire                xGreaterThanMax_payload;
  reg        [14:0]   index;
  reg        [14:0]   indexNext;
  reg        [15:0]   maxNext;
  wire                vld;
  reg                 vldDly;
  reg        [15:0]   indexDly;
  wire                argmax_valid;
  wire       [15:0]   argmax_payload;

  assign t_indexDly = {1'd0, indexNext};
  fp16lt0 maxFlow_lt_async_ip (
    .s_axis_a_tvalid      (maxFlow_valid                               ), //i
    .s_axis_a_tdata       (maxFlow_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (logitsIn_valid                              ), //i
    .s_axis_b_tdata       (logitsIn_payload[15:0]                      ), //i
    .m_axis_result_tvalid (maxFlow_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (maxFlow_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  assign logitsIn_valid = (logits_valid && (logits_tuser == 6'h23));
  assign logitsIn_payload = logits_tdata;
  assign maxFlow_valid = logitsIn_valid;
  assign cntOvf = (cnt == 15'h7cff);
  assign logitsProbe_tvalid = logitsIn_valid;
  assign logitsProbe_tlast = cntOvf;
  assign logitsProbe_tdata = logitsIn_payload;
  assign xGreaterThanMax_valid = maxFlow_lt_async_ip_m_axis_result_tvalid;
  assign xGreaterThanMax_payload = maxFlow_lt_async_ip_m_axis_result_tdata[0];
  always @(*) begin
    indexNext = index;
    if(logitsIn_valid) begin
      if(xGreaterThanMax_payload) begin
        indexNext = cnt;
      end
    end
  end

  always @(*) begin
    maxNext = maxFlow_payload;
    if(logitsIn_valid) begin
      if(xGreaterThanMax_payload) begin
        maxNext = logitsIn_payload;
      end
    end
  end

  assign vld = (logitsIn_valid && cntOvf);
  assign argmax_valid = vldDly;
  assign argmax_payload = indexDly;
  assign argmax_tvalid = argmax_valid;
  assign argmax_tdata = argmax_payload;
  assign endOfDecode = 1'b0;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      maxFlow_payload <= 16'hfc00;
      cnt <= 15'h0;
      index <= 15'h0;
      vldDly <= 1'b0;
    end else begin
      if(logitsIn_valid) begin
        cnt <= (cnt + 15'h0001);
        if(cntOvf) begin
          cnt <= 15'h0;
        end
      end
      if(logitsIn_valid) begin
        maxFlow_payload <= maxNext;
        index <= indexNext;
        if(cntOvf) begin
          maxFlow_payload <= 16'hfc00;
          index <= 15'h0;
        end
      end
      vldDly <= vld;
    end
  end

  always @(posedge clk_1_clk) begin
    indexDly <= t_indexDly;
  end


endmodule

module InsertCfg (
  input  wire          io_cfgIn_valid,
  output wire          io_cfgIn_ready,
  input  wire [31:0]   io_cfgIn_payload,
  output wire          io_cfgOut_valid,
  input  wire          io_cfgOut_ready,
  output wire [31:0]   io_cfgOut_payload,
  output wire          io_gtCnt_valid,
  output wire [15:0]   io_gtCnt_payload,
  input  wire          io_index_valid,
  input  wire          io_index_payload_last,
  input  wire [15:0]   io_index_payload_tdata,
  input  wire [5:0]    io_index_payload_tuser,
  input  wire          status_enPredictor,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                cnt_io_output_valid;
  wire       [15:0]   cnt_io_output_tdata;
  wire       [5:0]    cnt_io_output_tuser;
  wire                gtZeroCnt_valid;
  wire                gtZeroCnt_ready;
  wire       [15:0]   gtZeroCnt_tdata;
  wire       [5:0]    gtZeroCnt_tuser;
  wire       [5:0]    tag;
  wire                hit;
  wire       [31:0]   insertCfg_2;
  wire       [31:0]   cfg;
  wire                io_cfgIn_fire;
  wire                t_io_cfgIn_ready;
  wire                cfgInHalt_valid;
  wire                cfgInHalt_ready;
  wire       [31:0]   cfgInHalt_payload;
  wire                cfgInHalt_s2mPipe_valid;
  reg                 cfgInHalt_s2mPipe_ready;
  wire       [31:0]   cfgInHalt_s2mPipe_payload;
  reg                 cfgInHalt_rValidN;
  reg        [31:0]   cfgInHalt_rData;
  wire                cfgInHalt_s2mPipe_m2sPipe_valid;
  wire                cfgInHalt_s2mPipe_m2sPipe_ready;
  wire       [31:0]   cfgInHalt_s2mPipe_m2sPipe_payload;
  reg                 cfgInHalt_s2mPipe_rValid;
  reg        [31:0]   cfgInHalt_s2mPipe_rData;
  wire                gtZeroCnt_fire;

  GtZeroCnt cnt (
    .io_index_valid         (io_index_valid              ), //i
    .io_index_payload_last  (io_index_payload_last       ), //i
    .io_index_payload_tdata (io_index_payload_tdata[15:0]), //i
    .io_index_payload_tuser (io_index_payload_tuser[5:0] ), //i
    .io_output_valid        (cnt_io_output_valid         ), //o
    .io_output_ready        (gtZeroCnt_ready             ), //i
    .io_output_tdata        (cnt_io_output_tdata[15:0]   ), //o
    .io_output_tuser        (cnt_io_output_tuser[5:0]    ), //o
    .clk_1_clk              (clk_1_clk                   ), //i
    .clk_1_resetn           (clk_1_resetn                )  //i
  );
  assign gtZeroCnt_valid = cnt_io_output_valid;
  assign gtZeroCnt_tdata = cnt_io_output_tdata;
  assign gtZeroCnt_tuser = cnt_io_output_tuser;
  assign tag = io_cfgIn_payload[31 : 26];
  assign hit = ((((tag == 6'h1c) || (tag == 6'h18)) || (tag == 6'h1f)) || (status_enPredictor ? (tag == 6'h16) : 1'b0));
  assign insertCfg_2 = {io_cfgIn_payload[31 : 16],gtZeroCnt_tdata};
  assign cfg = (hit ? insertCfg_2 : io_cfgIn_payload);
  assign io_cfgIn_fire = (io_cfgIn_valid && io_cfgIn_ready);
  assign gtZeroCnt_ready = (hit && io_cfgIn_fire);
  assign t_io_cfgIn_ready = (! (hit && (! gtZeroCnt_valid)));
  assign io_cfgIn_ready = (cfgInHalt_ready && t_io_cfgIn_ready);
  assign cfgInHalt_valid = (io_cfgIn_valid && t_io_cfgIn_ready);
  assign cfgInHalt_payload = cfg;
  assign cfgInHalt_ready = cfgInHalt_rValidN;
  assign cfgInHalt_s2mPipe_valid = (cfgInHalt_valid || (! cfgInHalt_rValidN));
  assign cfgInHalt_s2mPipe_payload = (cfgInHalt_rValidN ? cfgInHalt_payload : cfgInHalt_rData);
  always @(*) begin
    cfgInHalt_s2mPipe_ready = cfgInHalt_s2mPipe_m2sPipe_ready;
    if((! cfgInHalt_s2mPipe_m2sPipe_valid)) begin
      cfgInHalt_s2mPipe_ready = 1'b1;
    end
  end

  assign cfgInHalt_s2mPipe_m2sPipe_valid = cfgInHalt_s2mPipe_rValid;
  assign cfgInHalt_s2mPipe_m2sPipe_payload = cfgInHalt_s2mPipe_rData;
  assign io_cfgOut_valid = cfgInHalt_s2mPipe_m2sPipe_valid;
  assign cfgInHalt_s2mPipe_m2sPipe_ready = io_cfgOut_ready;
  assign io_cfgOut_payload = cfgInHalt_s2mPipe_m2sPipe_payload;
  assign gtZeroCnt_fire = (gtZeroCnt_valid && gtZeroCnt_ready);
  assign io_gtCnt_valid = gtZeroCnt_fire;
  assign io_gtCnt_payload = gtZeroCnt_tdata;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cfgInHalt_rValidN <= 1'b1;
      cfgInHalt_s2mPipe_rValid <= 1'b0;
    end else begin
      if(cfgInHalt_valid) begin
        cfgInHalt_rValidN <= 1'b0;
      end
      if(cfgInHalt_s2mPipe_ready) begin
        cfgInHalt_rValidN <= 1'b1;
      end
      if(cfgInHalt_s2mPipe_ready) begin
        cfgInHalt_s2mPipe_rValid <= cfgInHalt_s2mPipe_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(cfgInHalt_ready) begin
      cfgInHalt_rData <= cfgInHalt_payload;
    end
    if(cfgInHalt_s2mPipe_ready) begin
      cfgInHalt_s2mPipe_rData <= cfgInHalt_s2mPipe_payload;
    end
  end


endmodule

module AllGatherSubModNew (
  input  wire          dotOut_valid,
  input  wire [15:0]   dotOut_tdata,
  input  wire [5:0]    dotOut_tuser,
  input  wire          resOut_valid,
  input  wire          resOut_payload_last,
  input  wire [15:0]   resOut_payload_tdata,
  input  wire [5:0]    resOut_payload_tuser,
  input  wire          p2sOut_valid,
  input  wire          p2sOut_payload_last,
  input  wire [15:0]   p2sOut_payload_tdata,
  input  wire [5:0]    p2sOut_payload_tuser,
  output wire          allGatherOut_tvalid,
  output wire [15:0]   allGatherOut_tdata,
  output wire [5:0]    allGatherOut_tuser,
  output wire          allReduceOut_tvalid,
  output wire [15:0]   allReduceOut_tdata,
  output wire [5:0]    allReduceOut_tuser,
  input  wire          indexIn_valid,
  input  wire          indexIn_payload_last,
  input  wire [15:0]   indexIn_payload_tdata,
  input  wire [5:0]    indexIn_payload_tuser,
  input  wire          gateIndexIn_valid,
  input  wire          gateIndexIn_payload_last,
  input  wire [15:0]   gateIndexIn_payload_tdata,
  input  wire [5:0]    gateIndexIn_payload_tuser,
  input  wire          ugIndexIn_valid,
  input  wire          ugIndexIn_payload_last,
  input  wire [15:0]   ugIndexIn_payload_tdata,
  input  wire [5:0]    ugIndexIn_payload_tuser,
  output wire          indexOut_tvalid,
  output wire          indexOut_tlast,
  output wire [15:0]   indexOut_tdata,
  output wire [5:0]    indexOut_tuser,
  input  wire          c2c_from_valid,
  output wire          c2c_from_ready,
  input  wire          c2c_from_payload_last,
  input  wire [15:0]   c2c_from_payload_tdata,
  input  wire [5:0]    c2c_from_payload_tuser,
  input  wire [0:0]    c2c_from_payload_tdest,
  output wire          c2c_to_valid,
  output wire          c2c_to_payload_last,
  output wire [15:0]   c2c_to_payload_tdata,
  output wire [5:0]    c2c_to_payload_tuser,
  output wire [0:0]    c2c_to_payload_tdest,
  input  wire          clk_1_resetn,
  input  wire          clk_1_clk
);

  wire                node_io_output_valid;
  wire                node_io_output_payload_last;
  wire       [15:0]   node_io_output_payload_tdata;
  wire       [5:0]    node_io_output_payload_tuser;
  wire       [0:0]    node_io_output_payload_tdest;
  wire                node_io_to_valid;
  wire                node_io_to_payload_last;
  wire       [15:0]   node_io_to_payload_tdata;
  wire       [5:0]    node_io_to_payload_tuser;
  wire       [0:0]    node_io_to_payload_tdest;
  wire                reduce_output_tvalid;
  wire       [15:0]   reduce_output_tdata;
  wire       [5:0]    reduce_output_tuser;
  reg                 t_nodeIn_payload_last_1;
  reg        [15:0]   t_nodeIn_payload_tdata;
  reg        [5:0]    t_nodeIn_payload_tuser;
  reg                 t_indexOut_payload_last_4;
  reg        [15:0]   t_indexOut_payload_tdata_3;
  reg        [5:0]    t_indexOut_payload_tuser_3;
  wire       [5:0]    t_dotOut_valid;
  wire                dotOut_valid_1;
  wire                dotOut_payload_last;
  wire       [15:0]   dotOut_payload_tdata;
  wire       [5:0]    dotOut_payload_tuser;
  wire                resOut_valid_1;
  wire                resOut_payload_last_1;
  wire       [15:0]   resOut_payload_tdata_1;
  wire       [5:0]    resOut_payload_tuser_1;
  wire                p2sOut_valid_1;
  wire                p2sOut_payload_last_1;
  wire       [15:0]   p2sOut_payload_tdata_1;
  wire       [5:0]    p2sOut_payload_tuser_1;
  wire                nodeIn_valid;
  wire                nodeIn_payload_last;
  wire       [15:0]   nodeIn_payload_tdata;
  wire       [5:0]    nodeIn_payload_tuser;
  wire       [1:0]    t_nodeIn_payload_last;
  reg                 nodeIn_regNext_valid;
  reg                 nodeIn_regNext_payload_last;
  reg        [15:0]   nodeIn_regNext_payload_tdata;
  reg        [5:0]    nodeIn_regNext_payload_tuser;
  reg                 t_io_from_valid;
  reg                 t_io_from_payload_last;
  reg        [15:0]   t_io_from_payload_tdata;
  reg        [5:0]    t_io_from_payload_tuser;
  reg        [0:0]    t_io_from_payload_tdest;
  wire                nodeOutNoLast_valid;
  wire       [15:0]   nodeOutNoLast_tdata;
  wire       [5:0]    nodeOutNoLast_tuser;
  wire       [0:0]    nodeOutNoLast_tdest;
  reg                 node_reduce_output_regNext_valid;
  reg        [15:0]   node_reduce_output_regNext_tdata;
  reg        [5:0]    node_reduce_output_regNext_tuser;
  reg                 nodeOutNoLast_regNext_valid;
  reg        [15:0]   nodeOutNoLast_regNext_tdata;
  reg        [5:0]    nodeOutNoLast_regNext_tuser;
  reg        [0:0]    nodeOutNoLast_regNext_tdest;
  wire                directIndex_valid;
  wire                directIndex_payload_last;
  wire       [15:0]   directIndex_payload_tdata;
  wire       [5:0]    directIndex_payload_tuser;
  reg                 t_indexOut_valid;
  reg                 t_indexOut_payload_last;
  reg        [15:0]   t_indexOut_payload_tdata;
  reg        [5:0]    t_indexOut_payload_tuser;
  reg                 t_indexOut_valid_1;
  reg                 t_indexOut_payload_last_1;
  reg        [15:0]   t_indexOut_payload_tdata_1;
  reg        [5:0]    t_indexOut_payload_tuser_1;
  reg                 t_indexOut_valid_2;
  reg                 t_indexOut_payload_last_2;
  reg        [15:0]   t_indexOut_payload_tdata_2;
  reg        [5:0]    t_indexOut_payload_tuser_2;
  wire                indexOut_valid;
  wire                indexOut_payload_last;
  wire       [15:0]   indexOut_payload_tdata;
  wire       [5:0]    indexOut_payload_tuser;
  wire       [1:0]    t_indexOut_payload_last_3;

  AllGatherNode node (
    .io_input_valid          (nodeIn_regNext_valid              ), //i
    .io_input_payload_last   (nodeIn_regNext_payload_last       ), //i
    .io_input_payload_tdata  (nodeIn_regNext_payload_tdata[15:0]), //i
    .io_input_payload_tuser  (nodeIn_regNext_payload_tuser[5:0] ), //i
    .io_output_valid         (node_io_output_valid              ), //o
    .io_output_payload_last  (node_io_output_payload_last       ), //o
    .io_output_payload_tdata (node_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (node_io_output_payload_tuser[5:0] ), //o
    .io_output_payload_tdest (node_io_output_payload_tdest      ), //o
    .io_from_valid           (t_io_from_valid                   ), //i
    .io_from_payload_last    (t_io_from_payload_last            ), //i
    .io_from_payload_tdata   (t_io_from_payload_tdata[15:0]     ), //i
    .io_from_payload_tuser   (t_io_from_payload_tuser[5:0]      ), //i
    .io_from_payload_tdest   (t_io_from_payload_tdest           ), //i
    .io_to_valid             (node_io_to_valid                  ), //o
    .io_to_payload_last      (node_io_to_payload_last           ), //o
    .io_to_payload_tdata     (node_io_to_payload_tdata[15:0]    ), //o
    .io_to_payload_tuser     (node_io_to_payload_tuser[5:0]     ), //o
    .io_to_payload_tdest     (node_io_to_payload_tdest          ), //o
    .clk_1_clk               (clk_1_clk                         ), //i
    .clk_1_resetn            (clk_1_resetn                      )  //i
  );
  AllReduce reduce (
    .input_valid   (nodeOutNoLast_valid      ), //i
    .input_tdata   (nodeOutNoLast_tdata[15:0]), //i
    .input_tuser   (nodeOutNoLast_tuser[5:0] ), //i
    .input_tdest   (nodeOutNoLast_tdest      ), //i
    .output_tvalid (reduce_output_tvalid     ), //o
    .output_tdata  (reduce_output_tdata[15:0]), //o
    .output_tuser  (reduce_output_tuser[5:0] ), //o
    .clk_1_resetn  (clk_1_resetn             ), //i
    .clk_1_clk     (clk_1_clk                )  //i
  );
  always @(*) begin
    case(t_nodeIn_payload_last)
      2'b00 : begin
        t_nodeIn_payload_last_1 = resOut_payload_last_1;
        t_nodeIn_payload_tdata = resOut_payload_tdata_1;
        t_nodeIn_payload_tuser = resOut_payload_tuser_1;
      end
      2'b01 : begin
        t_nodeIn_payload_last_1 = dotOut_payload_last;
        t_nodeIn_payload_tdata = dotOut_payload_tdata;
        t_nodeIn_payload_tuser = dotOut_payload_tuser;
      end
      default : begin
        t_nodeIn_payload_last_1 = p2sOut_payload_last_1;
        t_nodeIn_payload_tdata = p2sOut_payload_tdata_1;
        t_nodeIn_payload_tuser = p2sOut_payload_tuser_1;
      end
    endcase
  end

  always @(*) begin
    case(t_indexOut_payload_last_3)
      2'b00 : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser;
      end
      2'b01 : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last_1;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata_1;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser_1;
      end
      default : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last_2;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata_2;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser_2;
      end
    endcase
  end

  assign t_dotOut_valid = dotOut_tuser;
  assign dotOut_valid_1 = (dotOut_valid && (((((t_dotOut_valid == 6'h1b) || (t_dotOut_valid == 6'h18)) || (t_dotOut_valid == 6'h16)) || (t_dotOut_valid == 6'h20)) || (t_dotOut_valid == 6'h23)));
  assign dotOut_payload_tdata = dotOut_tdata;
  assign dotOut_payload_last = 1'b1;
  assign dotOut_payload_tuser = t_dotOut_valid;
  assign resOut_valid_1 = (resOut_valid && (resOut_payload_tuser == 6'h10));
  assign resOut_payload_tdata_1 = resOut_payload_tdata;
  assign resOut_payload_last_1 = resOut_payload_last;
  assign resOut_payload_tuser_1 = resOut_payload_tuser;
  assign p2sOut_valid_1 = (p2sOut_valid && ((((p2sOut_payload_tuser == 6'h1f) || (p2sOut_payload_tuser == 6'h0)) || (p2sOut_payload_tuser == 6'h01)) || (p2sOut_payload_tuser == 6'h02)));
  assign p2sOut_payload_tdata_1 = p2sOut_payload_tdata;
  assign p2sOut_payload_last_1 = p2sOut_payload_last;
  assign p2sOut_payload_tuser_1 = p2sOut_payload_tuser;
  assign nodeIn_valid = (|{p2sOut_valid_1,{dotOut_valid_1,resOut_valid_1}});
  assign t_nodeIn_payload_last = {p2sOut_valid_1,dotOut_valid_1};
  assign nodeIn_payload_last = t_nodeIn_payload_last_1;
  assign nodeIn_payload_tdata = t_nodeIn_payload_tdata;
  assign nodeIn_payload_tuser = t_nodeIn_payload_tuser;
  assign c2c_to_valid = node_io_to_valid;
  assign c2c_to_payload_last = node_io_to_payload_last;
  assign c2c_to_payload_tdata = node_io_to_payload_tdata;
  assign c2c_to_payload_tuser = node_io_to_payload_tuser;
  assign c2c_to_payload_tdest = node_io_to_payload_tdest;
  assign c2c_from_ready = 1'b1;
  assign nodeOutNoLast_valid = node_io_output_valid;
  assign nodeOutNoLast_tdata = node_io_output_payload_tdata;
  assign nodeOutNoLast_tuser = node_io_output_payload_tuser;
  assign nodeOutNoLast_tdest = node_io_output_payload_tdest;
  assign allReduceOut_tvalid = node_reduce_output_regNext_valid;
  assign allReduceOut_tdata = node_reduce_output_regNext_tdata;
  assign allReduceOut_tuser = node_reduce_output_regNext_tuser;
  assign allGatherOut_tvalid = nodeOutNoLast_regNext_valid;
  assign allGatherOut_tdata = nodeOutNoLast_regNext_tdata;
  assign allGatherOut_tuser = nodeOutNoLast_regNext_tuser;
  assign directIndex_valid = (indexIn_valid && (indexIn_payload_tuser != 6'h1e));
  assign directIndex_payload_tdata = indexIn_payload_tdata;
  assign directIndex_payload_tuser = indexIn_payload_tuser;
  assign directIndex_payload_last = indexIn_payload_last;
  assign indexOut_valid = (|{t_indexOut_valid_2,{t_indexOut_valid_1,t_indexOut_valid}});
  assign t_indexOut_payload_last_3 = {t_indexOut_valid_2,t_indexOut_valid_1};
  assign indexOut_payload_last = t_indexOut_payload_last_4;
  assign indexOut_payload_tdata = t_indexOut_payload_tdata_3;
  assign indexOut_payload_tuser = t_indexOut_payload_tuser_3;
  assign indexOut_tvalid = indexOut_valid;
  assign indexOut_tlast = indexOut_payload_last;
  assign indexOut_tdata = indexOut_payload_tdata;
  assign indexOut_tuser = indexOut_payload_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      nodeIn_regNext_valid <= 1'b0;
      t_io_from_valid <= 1'b0;
      node_reduce_output_regNext_valid <= 1'b0;
      nodeOutNoLast_regNext_valid <= 1'b0;
      t_indexOut_valid <= 1'b0;
      t_indexOut_valid_1 <= 1'b0;
      t_indexOut_valid_2 <= 1'b0;
    end else begin
      nodeIn_regNext_valid <= nodeIn_valid;
      t_io_from_valid <= c2c_from_valid;
      node_reduce_output_regNext_valid <= reduce_output_tvalid;
      nodeOutNoLast_regNext_valid <= nodeOutNoLast_valid;
      t_indexOut_valid <= gateIndexIn_valid;
      t_indexOut_valid_1 <= ugIndexIn_valid;
      t_indexOut_valid_2 <= directIndex_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    nodeIn_regNext_payload_last <= nodeIn_payload_last;
    nodeIn_regNext_payload_tdata <= nodeIn_payload_tdata;
    nodeIn_regNext_payload_tuser <= nodeIn_payload_tuser;
    t_io_from_payload_last <= c2c_from_payload_last;
    t_io_from_payload_tdata <= c2c_from_payload_tdata;
    t_io_from_payload_tuser <= c2c_from_payload_tuser;
    t_io_from_payload_tdest <= c2c_from_payload_tdest;
    node_reduce_output_regNext_tdata <= reduce_output_tdata;
    node_reduce_output_regNext_tuser <= reduce_output_tuser;
    nodeOutNoLast_regNext_tdata <= nodeOutNoLast_tdata;
    nodeOutNoLast_regNext_tuser <= nodeOutNoLast_tuser;
    nodeOutNoLast_regNext_tdest <= nodeOutNoLast_tdest;
    t_indexOut_payload_last <= gateIndexIn_payload_last;
    t_indexOut_payload_tdata <= gateIndexIn_payload_tdata;
    t_indexOut_payload_tuser <= gateIndexIn_payload_tuser;
    t_indexOut_payload_last_1 <= ugIndexIn_payload_last;
    t_indexOut_payload_tdata_1 <= ugIndexIn_payload_tdata;
    t_indexOut_payload_tuser_1 <= ugIndexIn_payload_tuser;
    t_indexOut_payload_last_2 <= directIndex_payload_last;
    t_indexOut_payload_tdata_2 <= directIndex_payload_tdata;
    t_indexOut_payload_tuser_2 <= directIndex_payload_tuser;
  end


endmodule

module MulAddSGNew (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [2047:0] wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [2047:0] dotIn_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [2047:0] resAdd_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          preScale_tvalid,
  output wire          preScale_tready,
  input  wire [15:0]   preScale_tdata,
  input  wire          postScale_tvalid,
  output wire          postScale_tready,
  input  wire [31:0]   postScale_tdata,
  output wire          vecOut_tvalid,
  output wire [2047:0] vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [5:0]    postCfgTag,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                banks_0_wkvIn_tready;
  wire                banks_0_dotIn_tready;
  wire                banks_0_axpyIn_tready;
  wire                banks_0_preScale_tready;
  wire                banks_0_resAdd_tready;
  wire                banks_0_vecOut_tvalid;
  wire       [511:0]  banks_0_vecOut_tdata;
  wire       [5:0]    banks_0_vecOut_tuser;
  wire                banks_0_scalarOut_tvalid;
  wire                banks_0_scalarOut_tlast;
  wire       [15:0]   banks_0_scalarOut_tdata;
  wire       [5:0]    banks_0_scalarOut_tuser;
  wire                banks_0_cfg_tready;
  wire       [5:0]    banks_0_preCfgTag;
  wire       [5:0]    banks_0_postCfgTag;
  wire                banks_1_wkvIn_tready;
  wire                banks_1_dotIn_tready;
  wire                banks_1_axpyIn_tready;
  wire                banks_1_preScale_tready;
  wire                banks_1_resAdd_tready;
  wire                banks_1_vecOut_tvalid;
  wire       [511:0]  banks_1_vecOut_tdata;
  wire       [5:0]    banks_1_vecOut_tuser;
  wire                banks_1_scalarOut_tvalid;
  wire                banks_1_scalarOut_tlast;
  wire       [15:0]   banks_1_scalarOut_tdata;
  wire       [5:0]    banks_1_scalarOut_tuser;
  wire                banks_1_cfg_tready;
  wire       [5:0]    banks_1_preCfgTag;
  wire       [5:0]    banks_1_postCfgTag;
  wire                banks_2_wkvIn_tready;
  wire                banks_2_dotIn_tready;
  wire                banks_2_axpyIn_tready;
  wire                banks_2_preScale_tready;
  wire                banks_2_resAdd_tready;
  wire                banks_2_vecOut_tvalid;
  wire       [511:0]  banks_2_vecOut_tdata;
  wire       [5:0]    banks_2_vecOut_tuser;
  wire                banks_2_scalarOut_tvalid;
  wire                banks_2_scalarOut_tlast;
  wire       [15:0]   banks_2_scalarOut_tdata;
  wire       [5:0]    banks_2_scalarOut_tuser;
  wire                banks_2_cfg_tready;
  wire       [5:0]    banks_2_preCfgTag;
  wire       [5:0]    banks_2_postCfgTag;
  wire                banks_3_wkvIn_tready;
  wire                banks_3_dotIn_tready;
  wire                banks_3_axpyIn_tready;
  wire                banks_3_preScale_tready;
  wire                banks_3_resAdd_tready;
  wire                banks_3_vecOut_tvalid;
  wire       [511:0]  banks_3_vecOut_tdata;
  wire       [5:0]    banks_3_vecOut_tuser;
  wire                banks_3_scalarOut_tvalid;
  wire                banks_3_scalarOut_tlast;
  wire       [15:0]   banks_3_scalarOut_tdata;
  wire       [5:0]    banks_3_scalarOut_tuser;
  wire                banks_3_cfg_tready;
  wire       [5:0]    banks_3_preCfgTag;
  wire       [5:0]    banks_3_postCfgTag;
  wire                fp32Acc_io_postScale_ready;
  wire                fp32Acc_io_output_valid;
  wire       [15:0]   fp32Acc_io_output_tdata;
  wire       [5:0]    fp32Acc_io_output_tuser;
  wire       [511:0]  wkvInSplit_0;
  wire       [511:0]  wkvInSplit_1;
  wire       [511:0]  wkvInSplit_2;
  wire       [511:0]  wkvInSplit_3;
  wire       [511:0]  dotInSplit_0;
  wire       [511:0]  dotInSplit_1;
  wire       [511:0]  dotInSplit_2;
  wire       [511:0]  dotInSplit_3;
  wire       [511:0]  resAddSplit_0;
  wire       [511:0]  resAddSplit_1;
  wire       [511:0]  resAddSplit_2;
  wire       [511:0]  resAddSplit_3;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_1;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_2;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_3;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_4;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_5;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_6;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_7;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_8;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_9;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_10;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_11;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_12;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_13;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_14;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_15;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_16;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_17;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_18;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_19;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_20;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_21;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_22;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_23;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_24;
  reg                 engine_banks_0_vecOut_tvalid_regNext;
  reg        [2047:0] t_vecOut_tdata;
  reg        [5:0]    engine_banks_0_vecOut_tuser_regNext;

  MulAddEngineNew banks_0 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_0_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_0[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_0_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_0[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_0_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_0_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_0_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_0[511:0]         ), //i
    .vecOut_tvalid    (banks_0_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_0_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_0_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_0_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_0_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_0_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_0_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_0_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_0_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_0_postCfgTag[5:0]      ), //o
    .clk_1_clk        (clk_1_clk                    ), //i
    .clk_1_resetn     (clk_1_resetn                 )  //i
  );
  MulAddEngineNew banks_1 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_1_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_1[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_1_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_1[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_1_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_1_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_1_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_1[511:0]         ), //i
    .vecOut_tvalid    (banks_1_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_1_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_1_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_1_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_1_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_1_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_1_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_1_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_1_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_1_postCfgTag[5:0]      ), //o
    .clk_1_clk        (clk_1_clk                    ), //i
    .clk_1_resetn     (clk_1_resetn                 )  //i
  );
  MulAddEngineNew banks_2 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_2_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_2[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_2_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_2[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_2_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_2_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_2_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_2[511:0]         ), //i
    .vecOut_tvalid    (banks_2_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_2_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_2_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_2_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_2_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_2_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_2_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_2_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_2_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_2_postCfgTag[5:0]      ), //o
    .clk_1_clk        (clk_1_clk                    ), //i
    .clk_1_resetn     (clk_1_resetn                 )  //i
  );
  MulAddEngineNew banks_3 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_3_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_3[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_3_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_3[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_3_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_3_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_3_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_3[511:0]         ), //i
    .vecOut_tvalid    (banks_3_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_3_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_3_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_3_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_3_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_3_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_3_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_3_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_3_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_3_postCfgTag[5:0]      ), //o
    .clk_1_clk        (clk_1_clk                    ), //i
    .clk_1_resetn     (clk_1_resetn                 )  //i
  );
  Fp32AccEngine fp32Acc (
    .io_inputs_0_valid         (banks_0_scalarOut_tvalid     ), //i
    .io_inputs_0_payload_last  (banks_0_scalarOut_tlast      ), //i
    .io_inputs_0_payload_tdata (banks_0_scalarOut_tdata[15:0]), //i
    .io_inputs_0_payload_tuser (banks_0_scalarOut_tuser[5:0] ), //i
    .io_inputs_1_valid         (banks_1_scalarOut_tvalid     ), //i
    .io_inputs_1_payload_last  (banks_1_scalarOut_tlast      ), //i
    .io_inputs_1_payload_tdata (banks_1_scalarOut_tdata[15:0]), //i
    .io_inputs_1_payload_tuser (banks_1_scalarOut_tuser[5:0] ), //i
    .io_inputs_2_valid         (banks_2_scalarOut_tvalid     ), //i
    .io_inputs_2_payload_last  (banks_2_scalarOut_tlast      ), //i
    .io_inputs_2_payload_tdata (banks_2_scalarOut_tdata[15:0]), //i
    .io_inputs_2_payload_tuser (banks_2_scalarOut_tuser[5:0] ), //i
    .io_inputs_3_valid         (banks_3_scalarOut_tvalid     ), //i
    .io_inputs_3_payload_last  (banks_3_scalarOut_tlast      ), //i
    .io_inputs_3_payload_tdata (banks_3_scalarOut_tdata[15:0]), //i
    .io_inputs_3_payload_tuser (banks_3_scalarOut_tuser[5:0] ), //i
    .io_postScale_valid        (postScale_tvalid             ), //i
    .io_postScale_ready        (fp32Acc_io_postScale_ready   ), //o
    .io_postScale_payload      (postScale_tdata[31:0]        ), //i
    .io_output_valid           (fp32Acc_io_output_valid      ), //o
    .io_output_tdata           (fp32Acc_io_output_tdata[15:0]), //o
    .io_output_tuser           (fp32Acc_io_output_tuser[5:0] ), //o
    .clk_1_clk                 (clk_1_clk                    ), //i
    .clk_1_resetn              (clk_1_resetn                 )  //i
  );
  assign wkvInSplit_0 = wkvIn_tdata[511 : 0];
  assign wkvInSplit_1 = wkvIn_tdata[1023 : 512];
  assign wkvInSplit_2 = wkvIn_tdata[1535 : 1024];
  assign wkvInSplit_3 = wkvIn_tdata[2047 : 1536];
  assign dotInSplit_0 = dotIn_tdata[511 : 0];
  assign dotInSplit_1 = dotIn_tdata[1023 : 512];
  assign dotInSplit_2 = dotIn_tdata[1535 : 1024];
  assign dotInSplit_3 = dotIn_tdata[2047 : 1536];
  assign resAddSplit_0 = resAdd_tdata[511 : 0];
  assign resAddSplit_1 = resAdd_tdata[1023 : 512];
  assign resAddSplit_2 = resAdd_tdata[1535 : 1024];
  assign resAddSplit_3 = resAdd_tdata[2047 : 1536];
  assign preCfgTag = banks_0_preCfgTag;
  assign wkvIn_tready = banks_0_wkvIn_tready;
  assign dotIn_tready = banks_0_dotIn_tready;
  assign axpyIn_tready = banks_0_axpyIn_tready;
  assign preScale_tready = banks_0_preScale_tready;
  assign resAdd_tready = banks_0_resAdd_tready;
  assign cfg_tready = banks_0_cfg_tready;
  assign postScale_tready = fp32Acc_io_postScale_ready;
  assign scalarOut_tvalid = fp32Acc_io_output_valid;
  assign scalarOut_tdata = fp32Acc_io_output_tdata;
  assign scalarOut_tuser = fp32Acc_io_output_tuser;
  assign postCfgTag = engine_banks_0_postCfgTag_delay_24;
  assign vecOut_tvalid = engine_banks_0_vecOut_tvalid_regNext;
  assign vecOut_tdata = t_vecOut_tdata;
  assign vecOut_tuser = engine_banks_0_vecOut_tuser_regNext;
  always @(posedge clk_1_clk) begin
    engine_banks_0_postCfgTag_delay_1 <= banks_0_postCfgTag;
    engine_banks_0_postCfgTag_delay_2 <= engine_banks_0_postCfgTag_delay_1;
    engine_banks_0_postCfgTag_delay_3 <= engine_banks_0_postCfgTag_delay_2;
    engine_banks_0_postCfgTag_delay_4 <= engine_banks_0_postCfgTag_delay_3;
    engine_banks_0_postCfgTag_delay_5 <= engine_banks_0_postCfgTag_delay_4;
    engine_banks_0_postCfgTag_delay_6 <= engine_banks_0_postCfgTag_delay_5;
    engine_banks_0_postCfgTag_delay_7 <= engine_banks_0_postCfgTag_delay_6;
    engine_banks_0_postCfgTag_delay_8 <= engine_banks_0_postCfgTag_delay_7;
    engine_banks_0_postCfgTag_delay_9 <= engine_banks_0_postCfgTag_delay_8;
    engine_banks_0_postCfgTag_delay_10 <= engine_banks_0_postCfgTag_delay_9;
    engine_banks_0_postCfgTag_delay_11 <= engine_banks_0_postCfgTag_delay_10;
    engine_banks_0_postCfgTag_delay_12 <= engine_banks_0_postCfgTag_delay_11;
    engine_banks_0_postCfgTag_delay_13 <= engine_banks_0_postCfgTag_delay_12;
    engine_banks_0_postCfgTag_delay_14 <= engine_banks_0_postCfgTag_delay_13;
    engine_banks_0_postCfgTag_delay_15 <= engine_banks_0_postCfgTag_delay_14;
    engine_banks_0_postCfgTag_delay_16 <= engine_banks_0_postCfgTag_delay_15;
    engine_banks_0_postCfgTag_delay_17 <= engine_banks_0_postCfgTag_delay_16;
    engine_banks_0_postCfgTag_delay_18 <= engine_banks_0_postCfgTag_delay_17;
    engine_banks_0_postCfgTag_delay_19 <= engine_banks_0_postCfgTag_delay_18;
    engine_banks_0_postCfgTag_delay_20 <= engine_banks_0_postCfgTag_delay_19;
    engine_banks_0_postCfgTag_delay_21 <= engine_banks_0_postCfgTag_delay_20;
    engine_banks_0_postCfgTag_delay_22 <= engine_banks_0_postCfgTag_delay_21;
    engine_banks_0_postCfgTag_delay_23 <= engine_banks_0_postCfgTag_delay_22;
    engine_banks_0_postCfgTag_delay_24 <= engine_banks_0_postCfgTag_delay_23;
    t_vecOut_tdata <= {banks_3_vecOut_tdata,{banks_2_vecOut_tdata,{banks_1_vecOut_tdata,banks_0_vecOut_tdata}}};
    engine_banks_0_vecOut_tuser_regNext <= banks_0_vecOut_tuser;
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      engine_banks_0_vecOut_tvalid_regNext <= 1'b0;
    end else begin
      engine_banks_0_vecOut_tvalid_regNext <= banks_0_vecOut_tvalid;
    end
  end


endmodule

module SerialResAdd (
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          io_fromAllReduce_valid,
  input  wire [15:0]   io_fromAllReduce_tdata,
  input  wire [5:0]    io_fromAllReduce_tuser,
  input  wire          io_fromResBuf_valid,
  output wire          io_fromResBuf_ready,
  input  wire [15:0]   io_fromResBuf_payload,
  output wire          io_toResBuf_valid,
  output wire [15:0]   io_toResBuf_payload,
  input  wire          clk_1_clk,
  output wire          multiCore2Res_resAddProbe_valid,
  output wire [15:0]   multiCore2Res_resAddProbe_payload,
  input  wire          clk_1_resetn
);

  wire                io_fromResBuf_fifo_io_pop_ready;
  wire                io_fromResBuf_fifo_io_push_ready;
  wire                io_fromResBuf_fifo_io_pop_valid;
  wire       [15:0]   io_fromResBuf_fifo_io_pop_payload;
  wire       [5:0]    io_fromResBuf_fifo_io_occupancy;
  wire       [5:0]    io_fromResBuf_fifo_io_availability;
  wire                input_add_ip_m_axis_result_tvalid;
  wire       [15:0]   input_add_ip_m_axis_result_tdata;
  wire                input_valid;
  wire       [15:0]   input_payload;
  reg        [5:0]    io_dotOut_tuser_delay_1;
  reg        [5:0]    io_dotOut_tuser_delay_2;
  reg        [5:0]    io_dotOut_tuser_delay_3;
  reg        [5:0]    io_dotOut_tuser_delay_4;
  reg        [5:0]    io_dotOut_tuser_delay_5;
  reg        [5:0]    tuser;
  reg        [0:0]    multiCore_idCnt;
  reg        [15:0]   multiCore_bankCnt;
  wire                multiCore_idOvf;
  wire                multiCore_bankOvf;
  wire                multiCore_tobeAdded_valid;
  wire       [15:0]   multiCore_tobeAdded_payload;
  wire                multiCore_flag;
  wire                multiCore2Res_allReduce_valid;
  wire       [15:0]   multiCore2Res_allReduce_payload;
  reg        [0:0]    multiCore2Res_idCnt;
  reg        [15:0]   multiCore2Res_bankCnt;
  wire                multiCore2Res_idOvf;
  wire                multiCore2Res_bankOvf;
  wire                multiCore2Res_flag;
  (* max_fanout = 100 *) reg                 multiCore2Res_toResBuf_valid;
  wire       [15:0]   multiCore2Res_toResBuf_payload;
  reg        [15:0]   multiCore2Res_allReduce_payload_regNext;

  StreamFifo_9 io_fromResBuf_fifo (
    .io_push_valid   (io_fromResBuf_valid                    ), //i
    .io_push_ready   (io_fromResBuf_fifo_io_push_ready       ), //o
    .io_push_payload (io_fromResBuf_payload[15:0]            ), //i
    .io_pop_valid    (io_fromResBuf_fifo_io_pop_valid        ), //o
    .io_pop_ready    (io_fromResBuf_fifo_io_pop_ready        ), //i
    .io_pop_payload  (io_fromResBuf_fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                                   ), //i
    .io_occupancy    (io_fromResBuf_fifo_io_occupancy[5:0]   ), //o
    .io_availability (io_fromResBuf_fifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                              ), //i
    .clk_1_resetn    (clk_1_resetn                           )  //i
  );
  fp16add6 input_add_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (input_valid                           ), //i
    .s_axis_a_tdata       (input_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (multiCore_tobeAdded_valid             ), //i
    .s_axis_b_tdata       (multiCore_tobeAdded_payload[15:0]     ), //i
    .m_axis_result_tvalid (input_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (input_add_ip_m_axis_result_tdata[15:0])  //o
  );
  assign io_fromResBuf_ready = io_fromResBuf_fifo_io_push_ready;
  assign input_valid = (io_dotOut_valid && (io_dotOut_tuser == 6'h10));
  assign input_payload = io_dotOut_tdata;
  assign multiCore_idOvf = (multiCore_idCnt == 1'b1);
  assign multiCore_bankOvf = (multiCore_bankCnt == 16'h07ff);
  assign io_output_valid = input_add_ip_m_axis_result_tvalid;
  assign io_output_payload_tdata = input_add_ip_m_axis_result_tdata;
  assign io_output_payload_tuser = tuser;
  assign io_output_payload_last = 1'b1;
  assign multiCore_flag = (multiCore_idCnt == 1'b1);
  assign multiCore_tobeAdded_valid = input_valid;
  assign multiCore_tobeAdded_payload = (multiCore_flag ? io_fromResBuf_fifo_io_pop_payload : 16'h0);
  assign io_fromResBuf_fifo_io_pop_ready = (input_valid && multiCore_flag);
  assign multiCore2Res_allReduce_valid = (io_fromAllReduce_valid && (io_fromAllReduce_tuser == 6'h10));
  assign multiCore2Res_allReduce_payload = io_fromAllReduce_tdata;
  assign multiCore2Res_idOvf = (multiCore2Res_idCnt == 1'b1);
  assign multiCore2Res_bankOvf = (multiCore2Res_bankCnt == 16'h07ff);
  assign multiCore2Res_flag = (multiCore2Res_idCnt == 1'b1);
  assign multiCore2Res_toResBuf_payload = multiCore2Res_allReduce_payload_regNext;
  assign io_toResBuf_valid = multiCore2Res_toResBuf_valid;
  assign io_toResBuf_payload = multiCore2Res_toResBuf_payload;
  assign multiCore2Res_resAddProbe_valid = ((multiCore2Res_allReduce_valid && (multiCore2Res_bankCnt == 16'h0)) && multiCore2Res_flag);
  assign multiCore2Res_resAddProbe_payload = multiCore2Res_allReduce_payload;
  always @(posedge clk_1_clk) begin
    io_dotOut_tuser_delay_1 <= io_dotOut_tuser;
    io_dotOut_tuser_delay_2 <= io_dotOut_tuser_delay_1;
    io_dotOut_tuser_delay_3 <= io_dotOut_tuser_delay_2;
    io_dotOut_tuser_delay_4 <= io_dotOut_tuser_delay_3;
    io_dotOut_tuser_delay_5 <= io_dotOut_tuser_delay_4;
    tuser <= io_dotOut_tuser_delay_5;
    multiCore2Res_allReduce_payload_regNext <= multiCore2Res_allReduce_payload;
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      multiCore_idCnt <= 1'b0;
      multiCore_bankCnt <= 16'h0;
      multiCore2Res_idCnt <= 1'b0;
      multiCore2Res_bankCnt <= 16'h0;
      multiCore2Res_toResBuf_valid <= 1'b0;
    end else begin
      if(input_valid) begin
        multiCore_bankCnt <= (multiCore_bankCnt + 16'h0001);
        if(multiCore_bankOvf) begin
          multiCore_bankCnt <= 16'h0;
          multiCore_idCnt <= (multiCore_idCnt + 1'b1);
          if(multiCore_idOvf) begin
            multiCore_idCnt <= 1'b0;
          end
        end
      end
      if(multiCore2Res_allReduce_valid) begin
        multiCore2Res_bankCnt <= (multiCore2Res_bankCnt + 16'h0001);
        if(multiCore2Res_bankOvf) begin
          multiCore2Res_bankCnt <= 16'h0;
          multiCore2Res_idCnt <= (multiCore2Res_idCnt + 1'b1);
          if(multiCore2Res_idOvf) begin
            multiCore2Res_idCnt <= 1'b0;
          end
        end
      end
      multiCore2Res_toResBuf_valid <= (multiCore2Res_allReduce_valid && multiCore2Res_flag);
    end
  end


endmodule

module ResidualBuffer (
  input  wire          serialIn_tvalid,
  input  wire [15:0]   serialIn_tdata,
  input  wire          parallelIn_tvalid,
  input  wire [2047:0] parallelIn_tdata,
  output wire          serialOut_tvalid,
  input  wire          serialOut_tready,
  output wire [15:0]   serialOut_tdata,
  output wire          parallelOut_tvalid,
  input  wire          parallelOut_tready,
  output wire [2047:0] parallelOut_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                resBuf_io_push_valid;
  wire       [2047:0] resBuf_io_push_payload;
  wire       [0:0]    deMux_io_select;
  wire                deMux_io_outputs_0_ready;
  wire                resBuf_io_push_ready;
  wire                resBuf_io_pop_valid;
  wire       [2047:0] resBuf_io_pop_payload;
  wire       [4:0]    resBuf_io_occupancy;
  wire       [4:0]    resBuf_io_availability;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire       [2047:0] deMux_io_outputs_0_payload;
  wire                deMux_io_outputs_1_valid;
  wire       [2047:0] deMux_io_outputs_1_payload;
  wire       [1791:0] t_adaptedSerial_payload_128;
  wire       [1535:0] t_adaptedSerial_payload_129;
  wire       [1279:0] t_adaptedSerial_payload_130;
  wire       [1023:0] t_adaptedSerial_payload_131;
  wire       [767:0]  t_adaptedSerial_payload_132;
  wire       [511:0]  t_adaptedSerial_payload_133;
  wire       [255:0]  t_adaptedSerial_payload_134;
  wire       [6:0]    t_t_serialOut_payload_1;
  wire       [0:0]    t_t_serialOut_payload_1_1;
  reg        [15:0]   t_serialOut_payload_4;
  (* max_fanout = 100 *) reg                 serialIn_valid;
  reg        [15:0]   serialIn_payload;
  (* max_fanout = 100 *) reg                 parallelIn_valid;
  reg        [2047:0] parallelIn_payload;
  reg                 inMuxSel;
  reg                 outMuxSel;
  reg        [7:0]    cnt;
  wire                cntAbout2Ovf;
  reg                 cntOvfReg;
  wire                adaptedSerial_valid;
  wire       [2047:0] adaptedSerial_payload;
  wire       [15:0]   t_adaptedSerial_payload;
  reg        [15:0]   t_adaptedSerial_payload_1;
  reg        [15:0]   t_adaptedSerial_payload_2;
  reg        [15:0]   t_adaptedSerial_payload_3;
  reg        [15:0]   t_adaptedSerial_payload_4;
  reg        [15:0]   t_adaptedSerial_payload_5;
  reg        [15:0]   t_adaptedSerial_payload_6;
  reg        [15:0]   t_adaptedSerial_payload_7;
  reg        [15:0]   t_adaptedSerial_payload_8;
  reg        [15:0]   t_adaptedSerial_payload_9;
  reg        [15:0]   t_adaptedSerial_payload_10;
  reg        [15:0]   t_adaptedSerial_payload_11;
  reg        [15:0]   t_adaptedSerial_payload_12;
  reg        [15:0]   t_adaptedSerial_payload_13;
  reg        [15:0]   t_adaptedSerial_payload_14;
  reg        [15:0]   t_adaptedSerial_payload_15;
  reg        [15:0]   t_adaptedSerial_payload_16;
  reg        [15:0]   t_adaptedSerial_payload_17;
  reg        [15:0]   t_adaptedSerial_payload_18;
  reg        [15:0]   t_adaptedSerial_payload_19;
  reg        [15:0]   t_adaptedSerial_payload_20;
  reg        [15:0]   t_adaptedSerial_payload_21;
  reg        [15:0]   t_adaptedSerial_payload_22;
  reg        [15:0]   t_adaptedSerial_payload_23;
  reg        [15:0]   t_adaptedSerial_payload_24;
  reg        [15:0]   t_adaptedSerial_payload_25;
  reg        [15:0]   t_adaptedSerial_payload_26;
  reg        [15:0]   t_adaptedSerial_payload_27;
  reg        [15:0]   t_adaptedSerial_payload_28;
  reg        [15:0]   t_adaptedSerial_payload_29;
  reg        [15:0]   t_adaptedSerial_payload_30;
  reg        [15:0]   t_adaptedSerial_payload_31;
  reg        [15:0]   t_adaptedSerial_payload_32;
  reg        [15:0]   t_adaptedSerial_payload_33;
  reg        [15:0]   t_adaptedSerial_payload_34;
  reg        [15:0]   t_adaptedSerial_payload_35;
  reg        [15:0]   t_adaptedSerial_payload_36;
  reg        [15:0]   t_adaptedSerial_payload_37;
  reg        [15:0]   t_adaptedSerial_payload_38;
  reg        [15:0]   t_adaptedSerial_payload_39;
  reg        [15:0]   t_adaptedSerial_payload_40;
  reg        [15:0]   t_adaptedSerial_payload_41;
  reg        [15:0]   t_adaptedSerial_payload_42;
  reg        [15:0]   t_adaptedSerial_payload_43;
  reg        [15:0]   t_adaptedSerial_payload_44;
  reg        [15:0]   t_adaptedSerial_payload_45;
  reg        [15:0]   t_adaptedSerial_payload_46;
  reg        [15:0]   t_adaptedSerial_payload_47;
  reg        [15:0]   t_adaptedSerial_payload_48;
  reg        [15:0]   t_adaptedSerial_payload_49;
  reg        [15:0]   t_adaptedSerial_payload_50;
  reg        [15:0]   t_adaptedSerial_payload_51;
  reg        [15:0]   t_adaptedSerial_payload_52;
  reg        [15:0]   t_adaptedSerial_payload_53;
  reg        [15:0]   t_adaptedSerial_payload_54;
  reg        [15:0]   t_adaptedSerial_payload_55;
  reg        [15:0]   t_adaptedSerial_payload_56;
  reg        [15:0]   t_adaptedSerial_payload_57;
  reg        [15:0]   t_adaptedSerial_payload_58;
  reg        [15:0]   t_adaptedSerial_payload_59;
  reg        [15:0]   t_adaptedSerial_payload_60;
  reg        [15:0]   t_adaptedSerial_payload_61;
  reg        [15:0]   t_adaptedSerial_payload_62;
  reg        [15:0]   t_adaptedSerial_payload_63;
  reg        [15:0]   t_adaptedSerial_payload_64;
  reg        [15:0]   t_adaptedSerial_payload_65;
  reg        [15:0]   t_adaptedSerial_payload_66;
  reg        [15:0]   t_adaptedSerial_payload_67;
  reg        [15:0]   t_adaptedSerial_payload_68;
  reg        [15:0]   t_adaptedSerial_payload_69;
  reg        [15:0]   t_adaptedSerial_payload_70;
  reg        [15:0]   t_adaptedSerial_payload_71;
  reg        [15:0]   t_adaptedSerial_payload_72;
  reg        [15:0]   t_adaptedSerial_payload_73;
  reg        [15:0]   t_adaptedSerial_payload_74;
  reg        [15:0]   t_adaptedSerial_payload_75;
  reg        [15:0]   t_adaptedSerial_payload_76;
  reg        [15:0]   t_adaptedSerial_payload_77;
  reg        [15:0]   t_adaptedSerial_payload_78;
  reg        [15:0]   t_adaptedSerial_payload_79;
  reg        [15:0]   t_adaptedSerial_payload_80;
  reg        [15:0]   t_adaptedSerial_payload_81;
  reg        [15:0]   t_adaptedSerial_payload_82;
  reg        [15:0]   t_adaptedSerial_payload_83;
  reg        [15:0]   t_adaptedSerial_payload_84;
  reg        [15:0]   t_adaptedSerial_payload_85;
  reg        [15:0]   t_adaptedSerial_payload_86;
  reg        [15:0]   t_adaptedSerial_payload_87;
  reg        [15:0]   t_adaptedSerial_payload_88;
  reg        [15:0]   t_adaptedSerial_payload_89;
  reg        [15:0]   t_adaptedSerial_payload_90;
  reg        [15:0]   t_adaptedSerial_payload_91;
  reg        [15:0]   t_adaptedSerial_payload_92;
  reg        [15:0]   t_adaptedSerial_payload_93;
  reg        [15:0]   t_adaptedSerial_payload_94;
  reg        [15:0]   t_adaptedSerial_payload_95;
  reg        [15:0]   t_adaptedSerial_payload_96;
  reg        [15:0]   t_adaptedSerial_payload_97;
  reg        [15:0]   t_adaptedSerial_payload_98;
  reg        [15:0]   t_adaptedSerial_payload_99;
  reg        [15:0]   t_adaptedSerial_payload_100;
  reg        [15:0]   t_adaptedSerial_payload_101;
  reg        [15:0]   t_adaptedSerial_payload_102;
  reg        [15:0]   t_adaptedSerial_payload_103;
  reg        [15:0]   t_adaptedSerial_payload_104;
  reg        [15:0]   t_adaptedSerial_payload_105;
  reg        [15:0]   t_adaptedSerial_payload_106;
  reg        [15:0]   t_adaptedSerial_payload_107;
  reg        [15:0]   t_adaptedSerial_payload_108;
  reg        [15:0]   t_adaptedSerial_payload_109;
  reg        [15:0]   t_adaptedSerial_payload_110;
  reg        [15:0]   t_adaptedSerial_payload_111;
  reg        [15:0]   t_adaptedSerial_payload_112;
  reg        [15:0]   t_adaptedSerial_payload_113;
  reg        [15:0]   t_adaptedSerial_payload_114;
  reg        [15:0]   t_adaptedSerial_payload_115;
  reg        [15:0]   t_adaptedSerial_payload_116;
  reg        [15:0]   t_adaptedSerial_payload_117;
  reg        [15:0]   t_adaptedSerial_payload_118;
  reg        [15:0]   t_adaptedSerial_payload_119;
  reg        [15:0]   t_adaptedSerial_payload_120;
  reg        [15:0]   t_adaptedSerial_payload_121;
  reg        [15:0]   t_adaptedSerial_payload_122;
  reg        [15:0]   t_adaptedSerial_payload_123;
  reg        [15:0]   t_adaptedSerial_payload_124;
  reg        [15:0]   t_adaptedSerial_payload_125;
  reg        [15:0]   t_adaptedSerial_payload_126;
  reg        [15:0]   t_adaptedSerial_payload_127;
  wire                serialOut_valid;
  wire                serialOut_ready;
  wire       [15:0]   serialOut_payload;
  wire                parallelOut_valid;
  wire                parallelOut_ready;
  wire       [2047:0] parallelOut_payload;
  wire                serialOut_fire;
  reg                 t_serialOut_payload;
  reg        [6:0]    t_serialOut_payload_1;
  reg        [6:0]    t_serialOut_payload_2;
  wire                t_io_outputs_0_ready;
  wire       [2047:0] t_serialOut_payload_3;
  reg        [3:0]    bufInCnt;
  wire                bufInCntOvf;
  wire                resBuf_resBuf_io_push_fire;
  reg        [3:0]    bufOutCnt;
  wire                bufOutCntOvf;
  wire                resBuf_resBuf_io_pop_fire;

  assign t_t_serialOut_payload_1_1 = t_serialOut_payload;
  assign t_t_serialOut_payload_1 = {6'd0, t_t_serialOut_payload_1_1};
  assign t_adaptedSerial_payload_128 = {t_adaptedSerial_payload_16,{t_adaptedSerial_payload_17,{t_adaptedSerial_payload_18,{t_adaptedSerial_payload_19,{t_adaptedSerial_payload_20,{t_adaptedSerial_payload_21,{t_adaptedSerial_payload_22,{t_adaptedSerial_payload_23,{t_adaptedSerial_payload_24,{t_adaptedSerial_payload_25,{t_adaptedSerial_payload_26,{t_adaptedSerial_payload_27,{t_adaptedSerial_payload_28,{t_adaptedSerial_payload_29,{t_adaptedSerial_payload_30,{t_adaptedSerial_payload_31,t_adaptedSerial_payload_129}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_129 = {t_adaptedSerial_payload_32,{t_adaptedSerial_payload_33,{t_adaptedSerial_payload_34,{t_adaptedSerial_payload_35,{t_adaptedSerial_payload_36,{t_adaptedSerial_payload_37,{t_adaptedSerial_payload_38,{t_adaptedSerial_payload_39,{t_adaptedSerial_payload_40,{t_adaptedSerial_payload_41,{t_adaptedSerial_payload_42,{t_adaptedSerial_payload_43,{t_adaptedSerial_payload_44,{t_adaptedSerial_payload_45,{t_adaptedSerial_payload_46,{t_adaptedSerial_payload_47,t_adaptedSerial_payload_130}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_130 = {t_adaptedSerial_payload_48,{t_adaptedSerial_payload_49,{t_adaptedSerial_payload_50,{t_adaptedSerial_payload_51,{t_adaptedSerial_payload_52,{t_adaptedSerial_payload_53,{t_adaptedSerial_payload_54,{t_adaptedSerial_payload_55,{t_adaptedSerial_payload_56,{t_adaptedSerial_payload_57,{t_adaptedSerial_payload_58,{t_adaptedSerial_payload_59,{t_adaptedSerial_payload_60,{t_adaptedSerial_payload_61,{t_adaptedSerial_payload_62,{t_adaptedSerial_payload_63,t_adaptedSerial_payload_131}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_131 = {t_adaptedSerial_payload_64,{t_adaptedSerial_payload_65,{t_adaptedSerial_payload_66,{t_adaptedSerial_payload_67,{t_adaptedSerial_payload_68,{t_adaptedSerial_payload_69,{t_adaptedSerial_payload_70,{t_adaptedSerial_payload_71,{t_adaptedSerial_payload_72,{t_adaptedSerial_payload_73,{t_adaptedSerial_payload_74,{t_adaptedSerial_payload_75,{t_adaptedSerial_payload_76,{t_adaptedSerial_payload_77,{t_adaptedSerial_payload_78,{t_adaptedSerial_payload_79,t_adaptedSerial_payload_132}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_132 = {t_adaptedSerial_payload_80,{t_adaptedSerial_payload_81,{t_adaptedSerial_payload_82,{t_adaptedSerial_payload_83,{t_adaptedSerial_payload_84,{t_adaptedSerial_payload_85,{t_adaptedSerial_payload_86,{t_adaptedSerial_payload_87,{t_adaptedSerial_payload_88,{t_adaptedSerial_payload_89,{t_adaptedSerial_payload_90,{t_adaptedSerial_payload_91,{t_adaptedSerial_payload_92,{t_adaptedSerial_payload_93,{t_adaptedSerial_payload_94,{t_adaptedSerial_payload_95,t_adaptedSerial_payload_133}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_133 = {t_adaptedSerial_payload_96,{t_adaptedSerial_payload_97,{t_adaptedSerial_payload_98,{t_adaptedSerial_payload_99,{t_adaptedSerial_payload_100,{t_adaptedSerial_payload_101,{t_adaptedSerial_payload_102,{t_adaptedSerial_payload_103,{t_adaptedSerial_payload_104,{t_adaptedSerial_payload_105,{t_adaptedSerial_payload_106,{t_adaptedSerial_payload_107,{t_adaptedSerial_payload_108,{t_adaptedSerial_payload_109,{t_adaptedSerial_payload_110,{t_adaptedSerial_payload_111,t_adaptedSerial_payload_134}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_134 = {t_adaptedSerial_payload_112,{t_adaptedSerial_payload_113,{t_adaptedSerial_payload_114,{t_adaptedSerial_payload_115,{t_adaptedSerial_payload_116,{t_adaptedSerial_payload_117,{t_adaptedSerial_payload_118,{t_adaptedSerial_payload_119,{t_adaptedSerial_payload_120,{t_adaptedSerial_payload_121,{t_adaptedSerial_payload_122,{t_adaptedSerial_payload_123,{t_adaptedSerial_payload_124,{t_adaptedSerial_payload_125,{t_adaptedSerial_payload_126,t_adaptedSerial_payload_127}}}}}}}}}}}}}}};
  LargeBankFifo resBuf (
    .io_push_valid   (resBuf_io_push_valid          ), //i
    .io_push_ready   (resBuf_io_push_ready          ), //o
    .io_push_payload (resBuf_io_push_payload[2047:0]), //i
    .io_pop_valid    (resBuf_io_pop_valid           ), //o
    .io_pop_ready    (deMux_io_input_ready          ), //i
    .io_pop_payload  (resBuf_io_pop_payload[2047:0] ), //o
    .io_occupancy    (resBuf_io_occupancy[4:0]      ), //o
    .io_availability (resBuf_io_availability[4:0]   ), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  StreamDemux_6 deMux (
    .io_select            (deMux_io_select                   ), //i
    .io_input_valid       (resBuf_io_pop_valid               ), //i
    .io_input_ready       (deMux_io_input_ready              ), //o
    .io_input_payload     (resBuf_io_pop_payload[2047:0]     ), //i
    .io_outputs_0_valid   (deMux_io_outputs_0_valid          ), //o
    .io_outputs_0_ready   (deMux_io_outputs_0_ready          ), //i
    .io_outputs_0_payload (deMux_io_outputs_0_payload[2047:0]), //o
    .io_outputs_1_valid   (deMux_io_outputs_1_valid          ), //o
    .io_outputs_1_ready   (parallelOut_ready                 ), //i
    .io_outputs_1_payload (deMux_io_outputs_1_payload[2047:0])  //o
  );
  always @(*) begin
    case(t_serialOut_payload_2)
      7'b0000000 : t_serialOut_payload_4 = t_serialOut_payload_3[15 : 0];
      7'b0000001 : t_serialOut_payload_4 = t_serialOut_payload_3[31 : 16];
      7'b0000010 : t_serialOut_payload_4 = t_serialOut_payload_3[47 : 32];
      7'b0000011 : t_serialOut_payload_4 = t_serialOut_payload_3[63 : 48];
      7'b0000100 : t_serialOut_payload_4 = t_serialOut_payload_3[79 : 64];
      7'b0000101 : t_serialOut_payload_4 = t_serialOut_payload_3[95 : 80];
      7'b0000110 : t_serialOut_payload_4 = t_serialOut_payload_3[111 : 96];
      7'b0000111 : t_serialOut_payload_4 = t_serialOut_payload_3[127 : 112];
      7'b0001000 : t_serialOut_payload_4 = t_serialOut_payload_3[143 : 128];
      7'b0001001 : t_serialOut_payload_4 = t_serialOut_payload_3[159 : 144];
      7'b0001010 : t_serialOut_payload_4 = t_serialOut_payload_3[175 : 160];
      7'b0001011 : t_serialOut_payload_4 = t_serialOut_payload_3[191 : 176];
      7'b0001100 : t_serialOut_payload_4 = t_serialOut_payload_3[207 : 192];
      7'b0001101 : t_serialOut_payload_4 = t_serialOut_payload_3[223 : 208];
      7'b0001110 : t_serialOut_payload_4 = t_serialOut_payload_3[239 : 224];
      7'b0001111 : t_serialOut_payload_4 = t_serialOut_payload_3[255 : 240];
      7'b0010000 : t_serialOut_payload_4 = t_serialOut_payload_3[271 : 256];
      7'b0010001 : t_serialOut_payload_4 = t_serialOut_payload_3[287 : 272];
      7'b0010010 : t_serialOut_payload_4 = t_serialOut_payload_3[303 : 288];
      7'b0010011 : t_serialOut_payload_4 = t_serialOut_payload_3[319 : 304];
      7'b0010100 : t_serialOut_payload_4 = t_serialOut_payload_3[335 : 320];
      7'b0010101 : t_serialOut_payload_4 = t_serialOut_payload_3[351 : 336];
      7'b0010110 : t_serialOut_payload_4 = t_serialOut_payload_3[367 : 352];
      7'b0010111 : t_serialOut_payload_4 = t_serialOut_payload_3[383 : 368];
      7'b0011000 : t_serialOut_payload_4 = t_serialOut_payload_3[399 : 384];
      7'b0011001 : t_serialOut_payload_4 = t_serialOut_payload_3[415 : 400];
      7'b0011010 : t_serialOut_payload_4 = t_serialOut_payload_3[431 : 416];
      7'b0011011 : t_serialOut_payload_4 = t_serialOut_payload_3[447 : 432];
      7'b0011100 : t_serialOut_payload_4 = t_serialOut_payload_3[463 : 448];
      7'b0011101 : t_serialOut_payload_4 = t_serialOut_payload_3[479 : 464];
      7'b0011110 : t_serialOut_payload_4 = t_serialOut_payload_3[495 : 480];
      7'b0011111 : t_serialOut_payload_4 = t_serialOut_payload_3[511 : 496];
      7'b0100000 : t_serialOut_payload_4 = t_serialOut_payload_3[527 : 512];
      7'b0100001 : t_serialOut_payload_4 = t_serialOut_payload_3[543 : 528];
      7'b0100010 : t_serialOut_payload_4 = t_serialOut_payload_3[559 : 544];
      7'b0100011 : t_serialOut_payload_4 = t_serialOut_payload_3[575 : 560];
      7'b0100100 : t_serialOut_payload_4 = t_serialOut_payload_3[591 : 576];
      7'b0100101 : t_serialOut_payload_4 = t_serialOut_payload_3[607 : 592];
      7'b0100110 : t_serialOut_payload_4 = t_serialOut_payload_3[623 : 608];
      7'b0100111 : t_serialOut_payload_4 = t_serialOut_payload_3[639 : 624];
      7'b0101000 : t_serialOut_payload_4 = t_serialOut_payload_3[655 : 640];
      7'b0101001 : t_serialOut_payload_4 = t_serialOut_payload_3[671 : 656];
      7'b0101010 : t_serialOut_payload_4 = t_serialOut_payload_3[687 : 672];
      7'b0101011 : t_serialOut_payload_4 = t_serialOut_payload_3[703 : 688];
      7'b0101100 : t_serialOut_payload_4 = t_serialOut_payload_3[719 : 704];
      7'b0101101 : t_serialOut_payload_4 = t_serialOut_payload_3[735 : 720];
      7'b0101110 : t_serialOut_payload_4 = t_serialOut_payload_3[751 : 736];
      7'b0101111 : t_serialOut_payload_4 = t_serialOut_payload_3[767 : 752];
      7'b0110000 : t_serialOut_payload_4 = t_serialOut_payload_3[783 : 768];
      7'b0110001 : t_serialOut_payload_4 = t_serialOut_payload_3[799 : 784];
      7'b0110010 : t_serialOut_payload_4 = t_serialOut_payload_3[815 : 800];
      7'b0110011 : t_serialOut_payload_4 = t_serialOut_payload_3[831 : 816];
      7'b0110100 : t_serialOut_payload_4 = t_serialOut_payload_3[847 : 832];
      7'b0110101 : t_serialOut_payload_4 = t_serialOut_payload_3[863 : 848];
      7'b0110110 : t_serialOut_payload_4 = t_serialOut_payload_3[879 : 864];
      7'b0110111 : t_serialOut_payload_4 = t_serialOut_payload_3[895 : 880];
      7'b0111000 : t_serialOut_payload_4 = t_serialOut_payload_3[911 : 896];
      7'b0111001 : t_serialOut_payload_4 = t_serialOut_payload_3[927 : 912];
      7'b0111010 : t_serialOut_payload_4 = t_serialOut_payload_3[943 : 928];
      7'b0111011 : t_serialOut_payload_4 = t_serialOut_payload_3[959 : 944];
      7'b0111100 : t_serialOut_payload_4 = t_serialOut_payload_3[975 : 960];
      7'b0111101 : t_serialOut_payload_4 = t_serialOut_payload_3[991 : 976];
      7'b0111110 : t_serialOut_payload_4 = t_serialOut_payload_3[1007 : 992];
      7'b0111111 : t_serialOut_payload_4 = t_serialOut_payload_3[1023 : 1008];
      7'b1000000 : t_serialOut_payload_4 = t_serialOut_payload_3[1039 : 1024];
      7'b1000001 : t_serialOut_payload_4 = t_serialOut_payload_3[1055 : 1040];
      7'b1000010 : t_serialOut_payload_4 = t_serialOut_payload_3[1071 : 1056];
      7'b1000011 : t_serialOut_payload_4 = t_serialOut_payload_3[1087 : 1072];
      7'b1000100 : t_serialOut_payload_4 = t_serialOut_payload_3[1103 : 1088];
      7'b1000101 : t_serialOut_payload_4 = t_serialOut_payload_3[1119 : 1104];
      7'b1000110 : t_serialOut_payload_4 = t_serialOut_payload_3[1135 : 1120];
      7'b1000111 : t_serialOut_payload_4 = t_serialOut_payload_3[1151 : 1136];
      7'b1001000 : t_serialOut_payload_4 = t_serialOut_payload_3[1167 : 1152];
      7'b1001001 : t_serialOut_payload_4 = t_serialOut_payload_3[1183 : 1168];
      7'b1001010 : t_serialOut_payload_4 = t_serialOut_payload_3[1199 : 1184];
      7'b1001011 : t_serialOut_payload_4 = t_serialOut_payload_3[1215 : 1200];
      7'b1001100 : t_serialOut_payload_4 = t_serialOut_payload_3[1231 : 1216];
      7'b1001101 : t_serialOut_payload_4 = t_serialOut_payload_3[1247 : 1232];
      7'b1001110 : t_serialOut_payload_4 = t_serialOut_payload_3[1263 : 1248];
      7'b1001111 : t_serialOut_payload_4 = t_serialOut_payload_3[1279 : 1264];
      7'b1010000 : t_serialOut_payload_4 = t_serialOut_payload_3[1295 : 1280];
      7'b1010001 : t_serialOut_payload_4 = t_serialOut_payload_3[1311 : 1296];
      7'b1010010 : t_serialOut_payload_4 = t_serialOut_payload_3[1327 : 1312];
      7'b1010011 : t_serialOut_payload_4 = t_serialOut_payload_3[1343 : 1328];
      7'b1010100 : t_serialOut_payload_4 = t_serialOut_payload_3[1359 : 1344];
      7'b1010101 : t_serialOut_payload_4 = t_serialOut_payload_3[1375 : 1360];
      7'b1010110 : t_serialOut_payload_4 = t_serialOut_payload_3[1391 : 1376];
      7'b1010111 : t_serialOut_payload_4 = t_serialOut_payload_3[1407 : 1392];
      7'b1011000 : t_serialOut_payload_4 = t_serialOut_payload_3[1423 : 1408];
      7'b1011001 : t_serialOut_payload_4 = t_serialOut_payload_3[1439 : 1424];
      7'b1011010 : t_serialOut_payload_4 = t_serialOut_payload_3[1455 : 1440];
      7'b1011011 : t_serialOut_payload_4 = t_serialOut_payload_3[1471 : 1456];
      7'b1011100 : t_serialOut_payload_4 = t_serialOut_payload_3[1487 : 1472];
      7'b1011101 : t_serialOut_payload_4 = t_serialOut_payload_3[1503 : 1488];
      7'b1011110 : t_serialOut_payload_4 = t_serialOut_payload_3[1519 : 1504];
      7'b1011111 : t_serialOut_payload_4 = t_serialOut_payload_3[1535 : 1520];
      7'b1100000 : t_serialOut_payload_4 = t_serialOut_payload_3[1551 : 1536];
      7'b1100001 : t_serialOut_payload_4 = t_serialOut_payload_3[1567 : 1552];
      7'b1100010 : t_serialOut_payload_4 = t_serialOut_payload_3[1583 : 1568];
      7'b1100011 : t_serialOut_payload_4 = t_serialOut_payload_3[1599 : 1584];
      7'b1100100 : t_serialOut_payload_4 = t_serialOut_payload_3[1615 : 1600];
      7'b1100101 : t_serialOut_payload_4 = t_serialOut_payload_3[1631 : 1616];
      7'b1100110 : t_serialOut_payload_4 = t_serialOut_payload_3[1647 : 1632];
      7'b1100111 : t_serialOut_payload_4 = t_serialOut_payload_3[1663 : 1648];
      7'b1101000 : t_serialOut_payload_4 = t_serialOut_payload_3[1679 : 1664];
      7'b1101001 : t_serialOut_payload_4 = t_serialOut_payload_3[1695 : 1680];
      7'b1101010 : t_serialOut_payload_4 = t_serialOut_payload_3[1711 : 1696];
      7'b1101011 : t_serialOut_payload_4 = t_serialOut_payload_3[1727 : 1712];
      7'b1101100 : t_serialOut_payload_4 = t_serialOut_payload_3[1743 : 1728];
      7'b1101101 : t_serialOut_payload_4 = t_serialOut_payload_3[1759 : 1744];
      7'b1101110 : t_serialOut_payload_4 = t_serialOut_payload_3[1775 : 1760];
      7'b1101111 : t_serialOut_payload_4 = t_serialOut_payload_3[1791 : 1776];
      7'b1110000 : t_serialOut_payload_4 = t_serialOut_payload_3[1807 : 1792];
      7'b1110001 : t_serialOut_payload_4 = t_serialOut_payload_3[1823 : 1808];
      7'b1110010 : t_serialOut_payload_4 = t_serialOut_payload_3[1839 : 1824];
      7'b1110011 : t_serialOut_payload_4 = t_serialOut_payload_3[1855 : 1840];
      7'b1110100 : t_serialOut_payload_4 = t_serialOut_payload_3[1871 : 1856];
      7'b1110101 : t_serialOut_payload_4 = t_serialOut_payload_3[1887 : 1872];
      7'b1110110 : t_serialOut_payload_4 = t_serialOut_payload_3[1903 : 1888];
      7'b1110111 : t_serialOut_payload_4 = t_serialOut_payload_3[1919 : 1904];
      7'b1111000 : t_serialOut_payload_4 = t_serialOut_payload_3[1935 : 1920];
      7'b1111001 : t_serialOut_payload_4 = t_serialOut_payload_3[1951 : 1936];
      7'b1111010 : t_serialOut_payload_4 = t_serialOut_payload_3[1967 : 1952];
      7'b1111011 : t_serialOut_payload_4 = t_serialOut_payload_3[1983 : 1968];
      7'b1111100 : t_serialOut_payload_4 = t_serialOut_payload_3[1999 : 1984];
      7'b1111101 : t_serialOut_payload_4 = t_serialOut_payload_3[2015 : 2000];
      7'b1111110 : t_serialOut_payload_4 = t_serialOut_payload_3[2031 : 2016];
      default : t_serialOut_payload_4 = t_serialOut_payload_3[2047 : 2032];
    endcase
  end

  assign cntAbout2Ovf = (cnt == 8'h7e);
  assign adaptedSerial_valid = (serialIn_valid && cntOvfReg);
  assign t_adaptedSerial_payload = serialIn_payload;
  assign adaptedSerial_payload = {t_adaptedSerial_payload,{t_adaptedSerial_payload_1,{t_adaptedSerial_payload_2,{t_adaptedSerial_payload_3,{t_adaptedSerial_payload_4,{t_adaptedSerial_payload_5,{t_adaptedSerial_payload_6,{t_adaptedSerial_payload_7,{t_adaptedSerial_payload_8,{t_adaptedSerial_payload_9,{t_adaptedSerial_payload_10,{t_adaptedSerial_payload_11,{t_adaptedSerial_payload_12,{t_adaptedSerial_payload_13,{t_adaptedSerial_payload_14,{t_adaptedSerial_payload_15,t_adaptedSerial_payload_128}}}}}}}}}}}}}}}};
  assign resBuf_io_push_valid = (inMuxSel ? adaptedSerial_valid : parallelIn_valid);
  assign resBuf_io_push_payload = (inMuxSel ? adaptedSerial_payload : parallelIn_payload);
  assign deMux_io_select = outMuxSel;
  assign serialOut_fire = (serialOut_valid && serialOut_ready);
  always @(*) begin
    t_serialOut_payload = 1'b0;
    if(serialOut_fire) begin
      t_serialOut_payload = 1'b1;
    end
  end

  assign t_io_outputs_0_ready = (t_serialOut_payload_2 == 7'h7f);
  always @(*) begin
    t_serialOut_payload_1 = (t_serialOut_payload_2 + t_t_serialOut_payload_1);
    if(1'b0) begin
      t_serialOut_payload_1 = 7'h0;
    end
  end

  assign serialOut_valid = deMux_io_outputs_0_valid;
  assign t_serialOut_payload_3 = deMux_io_outputs_0_payload;
  assign serialOut_payload = t_serialOut_payload_4;
  assign deMux_io_outputs_0_ready = (serialOut_ready && t_io_outputs_0_ready);
  assign parallelOut_valid = deMux_io_outputs_1_valid;
  assign parallelOut_payload = deMux_io_outputs_1_payload;
  assign serialOut_tvalid = serialOut_valid;
  assign serialOut_ready = serialOut_tready;
  assign serialOut_tdata = serialOut_payload;
  assign parallelOut_tvalid = parallelOut_valid;
  assign parallelOut_ready = parallelOut_tready;
  assign parallelOut_tdata = parallelOut_payload;
  assign bufInCntOvf = (bufInCnt == 4'b1111);
  assign resBuf_resBuf_io_push_fire = (resBuf_io_push_valid && resBuf_io_push_ready);
  assign bufOutCntOvf = (bufOutCnt == 4'b1111);
  assign resBuf_resBuf_io_pop_fire = (resBuf_io_pop_valid && deMux_io_input_ready);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      serialIn_valid <= 1'b0;
      parallelIn_valid <= 1'b0;
      inMuxSel <= 1'b0;
      outMuxSel <= 1'b0;
      cnt <= 8'h0;
      cntOvfReg <= 1'b0;
      t_serialOut_payload_2 <= 7'h0;
      bufInCnt <= 4'b0000;
      bufOutCnt <= 4'b0000;
    end else begin
      serialIn_valid <= serialIn_tvalid;
      parallelIn_valid <= parallelIn_tvalid;
      if(serialIn_valid) begin
        cnt <= (cnt + 8'h01);
        if(cntAbout2Ovf) begin
          cntOvfReg <= 1'b1;
        end
        if(cntOvfReg) begin
          cnt <= 8'h0;
          cntOvfReg <= 1'b0;
        end
      end
      t_serialOut_payload_2 <= t_serialOut_payload_1;
      if(resBuf_resBuf_io_push_fire) begin
        bufInCnt <= (bufInCnt + 4'b0001);
        if(bufInCntOvf) begin
          bufInCnt <= 4'b0000;
          inMuxSel <= (! inMuxSel);
        end
      end
      if(resBuf_resBuf_io_pop_fire) begin
        bufOutCnt <= (bufOutCnt + 4'b0001);
        if(bufOutCntOvf) begin
          bufOutCnt <= 4'b0000;
          outMuxSel <= (! outMuxSel);
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    serialIn_payload <= serialIn_tdata;
    parallelIn_payload <= parallelIn_tdata;
    if(serialIn_valid) begin
      t_adaptedSerial_payload_1 <= t_adaptedSerial_payload;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_2 <= t_adaptedSerial_payload_1;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_3 <= t_adaptedSerial_payload_2;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_4 <= t_adaptedSerial_payload_3;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_5 <= t_adaptedSerial_payload_4;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_6 <= t_adaptedSerial_payload_5;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_7 <= t_adaptedSerial_payload_6;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_8 <= t_adaptedSerial_payload_7;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_9 <= t_adaptedSerial_payload_8;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_10 <= t_adaptedSerial_payload_9;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_11 <= t_adaptedSerial_payload_10;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_12 <= t_adaptedSerial_payload_11;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_13 <= t_adaptedSerial_payload_12;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_14 <= t_adaptedSerial_payload_13;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_15 <= t_adaptedSerial_payload_14;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_16 <= t_adaptedSerial_payload_15;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_17 <= t_adaptedSerial_payload_16;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_18 <= t_adaptedSerial_payload_17;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_19 <= t_adaptedSerial_payload_18;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_20 <= t_adaptedSerial_payload_19;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_21 <= t_adaptedSerial_payload_20;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_22 <= t_adaptedSerial_payload_21;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_23 <= t_adaptedSerial_payload_22;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_24 <= t_adaptedSerial_payload_23;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_25 <= t_adaptedSerial_payload_24;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_26 <= t_adaptedSerial_payload_25;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_27 <= t_adaptedSerial_payload_26;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_28 <= t_adaptedSerial_payload_27;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_29 <= t_adaptedSerial_payload_28;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_30 <= t_adaptedSerial_payload_29;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_31 <= t_adaptedSerial_payload_30;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_32 <= t_adaptedSerial_payload_31;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_33 <= t_adaptedSerial_payload_32;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_34 <= t_adaptedSerial_payload_33;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_35 <= t_adaptedSerial_payload_34;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_36 <= t_adaptedSerial_payload_35;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_37 <= t_adaptedSerial_payload_36;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_38 <= t_adaptedSerial_payload_37;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_39 <= t_adaptedSerial_payload_38;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_40 <= t_adaptedSerial_payload_39;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_41 <= t_adaptedSerial_payload_40;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_42 <= t_adaptedSerial_payload_41;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_43 <= t_adaptedSerial_payload_42;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_44 <= t_adaptedSerial_payload_43;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_45 <= t_adaptedSerial_payload_44;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_46 <= t_adaptedSerial_payload_45;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_47 <= t_adaptedSerial_payload_46;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_48 <= t_adaptedSerial_payload_47;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_49 <= t_adaptedSerial_payload_48;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_50 <= t_adaptedSerial_payload_49;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_51 <= t_adaptedSerial_payload_50;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_52 <= t_adaptedSerial_payload_51;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_53 <= t_adaptedSerial_payload_52;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_54 <= t_adaptedSerial_payload_53;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_55 <= t_adaptedSerial_payload_54;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_56 <= t_adaptedSerial_payload_55;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_57 <= t_adaptedSerial_payload_56;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_58 <= t_adaptedSerial_payload_57;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_59 <= t_adaptedSerial_payload_58;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_60 <= t_adaptedSerial_payload_59;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_61 <= t_adaptedSerial_payload_60;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_62 <= t_adaptedSerial_payload_61;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_63 <= t_adaptedSerial_payload_62;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_64 <= t_adaptedSerial_payload_63;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_65 <= t_adaptedSerial_payload_64;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_66 <= t_adaptedSerial_payload_65;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_67 <= t_adaptedSerial_payload_66;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_68 <= t_adaptedSerial_payload_67;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_69 <= t_adaptedSerial_payload_68;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_70 <= t_adaptedSerial_payload_69;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_71 <= t_adaptedSerial_payload_70;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_72 <= t_adaptedSerial_payload_71;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_73 <= t_adaptedSerial_payload_72;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_74 <= t_adaptedSerial_payload_73;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_75 <= t_adaptedSerial_payload_74;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_76 <= t_adaptedSerial_payload_75;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_77 <= t_adaptedSerial_payload_76;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_78 <= t_adaptedSerial_payload_77;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_79 <= t_adaptedSerial_payload_78;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_80 <= t_adaptedSerial_payload_79;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_81 <= t_adaptedSerial_payload_80;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_82 <= t_adaptedSerial_payload_81;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_83 <= t_adaptedSerial_payload_82;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_84 <= t_adaptedSerial_payload_83;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_85 <= t_adaptedSerial_payload_84;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_86 <= t_adaptedSerial_payload_85;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_87 <= t_adaptedSerial_payload_86;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_88 <= t_adaptedSerial_payload_87;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_89 <= t_adaptedSerial_payload_88;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_90 <= t_adaptedSerial_payload_89;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_91 <= t_adaptedSerial_payload_90;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_92 <= t_adaptedSerial_payload_91;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_93 <= t_adaptedSerial_payload_92;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_94 <= t_adaptedSerial_payload_93;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_95 <= t_adaptedSerial_payload_94;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_96 <= t_adaptedSerial_payload_95;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_97 <= t_adaptedSerial_payload_96;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_98 <= t_adaptedSerial_payload_97;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_99 <= t_adaptedSerial_payload_98;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_100 <= t_adaptedSerial_payload_99;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_101 <= t_adaptedSerial_payload_100;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_102 <= t_adaptedSerial_payload_101;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_103 <= t_adaptedSerial_payload_102;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_104 <= t_adaptedSerial_payload_103;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_105 <= t_adaptedSerial_payload_104;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_106 <= t_adaptedSerial_payload_105;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_107 <= t_adaptedSerial_payload_106;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_108 <= t_adaptedSerial_payload_107;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_109 <= t_adaptedSerial_payload_108;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_110 <= t_adaptedSerial_payload_109;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_111 <= t_adaptedSerial_payload_110;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_112 <= t_adaptedSerial_payload_111;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_113 <= t_adaptedSerial_payload_112;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_114 <= t_adaptedSerial_payload_113;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_115 <= t_adaptedSerial_payload_114;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_116 <= t_adaptedSerial_payload_115;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_117 <= t_adaptedSerial_payload_116;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_118 <= t_adaptedSerial_payload_117;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_119 <= t_adaptedSerial_payload_118;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_120 <= t_adaptedSerial_payload_119;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_121 <= t_adaptedSerial_payload_120;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_122 <= t_adaptedSerial_payload_121;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_123 <= t_adaptedSerial_payload_122;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_124 <= t_adaptedSerial_payload_123;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_125 <= t_adaptedSerial_payload_124;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_126 <= t_adaptedSerial_payload_125;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_127 <= t_adaptedSerial_payload_126;
    end
  end


endmodule

module VecOutSubMod (
  input  wire          io_lnOut_valid,
  input  wire [15:0]   io_lnOut_tdata,
  input  wire [5:0]    io_lnOut_tuser,
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  input  wire          io_ropeOut_valid,
  input  wire [15:0]   io_ropeOut_tdata,
  input  wire [5:0]    io_ropeOut_tuser,
  input  wire          io_busVecIn_valid,
  input  wire [2047:0] io_busVecIn_tdata,
  input  wire [5:0]    io_busVecIn_tuser,
  input  wire          io_engineVecIn_valid,
  input  wire [2047:0] io_engineVecIn_tdata,
  input  wire [5:0]    io_engineVecIn_tuser,
  output wire          io_vLocal_valid,
  output wire [2047:0] io_vLocal_tdata,
  output wire [5:0]    io_vLocal_tuser,
  output wire          io_vecOut_valid,
  input  wire          io_vecOut_ready,
  output wire [2047:0] io_vecOut_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                prefillIn_fifo_io_pop_ready;
  wire                vecBuf_io_output_valid;
  wire       [2047:0] vecBuf_io_output_payload;
  wire                prefillIn_fifo_io_push_ready;
  wire                prefillIn_fifo_io_pop_valid;
  wire                prefillIn_fifo_io_pop_payload;
  wire       [6:0]    prefillIn_fifo_io_occupancy;
  wire       [6:0]    prefillIn_fifo_io_availability;
  wire                ropeOut_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   ropeOut_mul_ip_m_axis_result_tdata;
  wire                s2p_output_tvalid;
  wire       [2047:0] s2p_output_tdata;
  wire       [5:0]    s2p_output_tuser;
  reg        [15:0]   t_s2pInMux_tdata_1;
  reg        [5:0]    t_s2pInMux_tuser;
  reg        [2047:0] t_toBuf_tdata_1;
  reg        [5:0]    t_toBuf_tuser;
  wire                cond;
  wire                lnOut_valid;
  wire       [15:0]   lnOut_tdata;
  wire       [5:0]    lnOut_tuser;
  wire                dotOutPre_valid;
  wire       [15:0]   dotOutPre_tdata;
  wire       [5:0]    dotOutPre_tuser;
  wire                dotOut_valid;
  wire       [15:0]   dotOut_tdata;
  wire       [5:0]    dotOut_tuser;
  wire                ropeOut_valid;
  wire       [15:0]   ropeOut_payload;
  wire                prefillIn_valid;
  wire                prefillIn_ready;
  wire                prefillIn_payload;
  reg        [4:0]    layerCnt;
  reg                 lastLayer;
  wire                layerCntAbout2Ovf;
  wire                enLayerCntInc;
  reg        [10:0]   vCnt;
  wire                vCntOvf;
  wire                vCntVld;
  wire                sqrtD_valid;
  wire       [15:0]   sqrtD_payload;
  wire                rope2s2p_valid;
  wire       [15:0]   rope2s2p_tdata;
  wire       [5:0]    rope2s2p_tuser;
  wire                s2pInMux_valid;
  wire       [15:0]   s2pInMux_tdata;
  wire       [5:0]    s2pInMux_tuser;
  wire                s2pInErr;
  wire       [1:0]    t_s2pInMux_tdata;
  reg                 s2pIn_valid;
  reg        [15:0]   s2pIn_tdata;
  reg        [5:0]    s2pIn_tuser;
  wire                vLocalStream_valid;
  wire                vLocalStream_ready;
  wire       [2047:0] vLocalStream_tdata;
  wire       [5:0]    vLocalStream_tuser;
  wire                vLocal_valid;
  wire       [2047:0] vLocal_tdata;
  wire       [5:0]    vLocal_tuser;
  reg                 s2pToFifo_valid;
  reg        [2047:0] s2pToFifo_tdata;
  reg        [5:0]    s2pToFifo_tuser;
  wire                busVecInToFifo_valid;
  wire       [2047:0] busVecInToFifo_tdata;
  wire       [5:0]    busVecInToFifo_tuser;
  reg                 engineVecInToFifo_valid;
  reg        [2047:0] engineVecInToFifo_tdata;
  reg        [5:0]    engineVecInToFifo_tuser;
  wire                toBuf_valid;
  wire       [2047:0] toBuf_tdata;
  wire       [5:0]    toBuf_tuser;
  wire                toBufErr;
  wire       [1:0]    t_toBuf_tdata;
  reg                 toBuf_regNext_valid;
  reg        [2047:0] toBuf_regNext_tdata;
  reg        [5:0]    toBuf_regNext_tuser;

  VecOutBuf vecBuf (
    .io_input_valid                (toBuf_regNext_valid               ), //i
    .io_input_tdata                (toBuf_regNext_tdata[2047:0]       ), //i
    .io_input_tuser                (toBuf_regNext_tuser[5:0]          ), //i
    .io_output_valid               (vecBuf_io_output_valid            ), //o
    .io_output_ready               (io_vecOut_ready                   ), //i
    .io_output_payload             (vecBuf_io_output_payload[2047:0]  ), //o
    .status_tokenIndexFlow_valid   (status_tokenIndexFlow_valid       ), //i
    .status_tokenIndexFlow_payload (status_tokenIndexFlow_payload[5:0]), //i
    .status_enPredictor            (status_enPredictor                ), //i
    .clk_1_clk                     (clk_1_clk                         ), //i
    .clk_1_resetn                  (clk_1_resetn                      )  //i
  );
  StreamFifo_69 prefillIn_fifo (
    .io_push_valid   (prefillIn_valid                    ), //i
    .io_push_ready   (prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (prefillIn_payload                  ), //i
    .io_pop_valid    (prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                          ), //i
    .clk_1_resetn    (clk_1_resetn                       )  //i
  );
  fp16mul6 ropeOut_mul_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (ropeOut_valid                           ), //i
    .s_axis_a_tdata       (ropeOut_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (sqrtD_valid                             ), //i
    .s_axis_b_tdata       (sqrtD_payload[15:0]                     ), //i
    .m_axis_result_tvalid (ropeOut_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (ropeOut_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  Serial2Parallel s2p (
    .input_valid   (s2pIn_valid             ), //i
    .input_tdata   (s2pIn_tdata[15:0]       ), //i
    .input_tuser   (s2pIn_tuser[5:0]        ), //i
    .output_tvalid (s2p_output_tvalid       ), //o
    .output_tdata  (s2p_output_tdata[2047:0]), //o
    .output_tuser  (s2p_output_tuser[5:0]   ), //o
    .clk_1_clk     (clk_1_clk               ), //i
    .clk_1_resetn  (clk_1_resetn            )  //i
  );
  always @(*) begin
    case(t_s2pInMux_tdata)
      2'b00 : begin
        t_s2pInMux_tdata_1 = lnOut_tdata;
        t_s2pInMux_tuser = lnOut_tuser;
      end
      2'b01 : begin
        t_s2pInMux_tdata_1 = dotOut_tdata;
        t_s2pInMux_tuser = dotOut_tuser;
      end
      default : begin
        t_s2pInMux_tdata_1 = rope2s2p_tdata;
        t_s2pInMux_tuser = rope2s2p_tuser;
      end
    endcase
  end

  always @(*) begin
    case(t_toBuf_tdata)
      2'b00 : begin
        t_toBuf_tdata_1 = s2pToFifo_tdata;
        t_toBuf_tuser = s2pToFifo_tuser;
      end
      2'b01 : begin
        t_toBuf_tdata_1 = busVecInToFifo_tdata;
        t_toBuf_tuser = busVecInToFifo_tuser;
      end
      default : begin
        t_toBuf_tdata_1 = engineVecInToFifo_tdata;
        t_toBuf_tuser = engineVecInToFifo_tuser;
      end
    endcase
  end

  assign lnOut_valid = (io_lnOut_valid && (((io_lnOut_tuser == 6'h15) || (io_lnOut_tuser == 6'h22)) || (io_lnOut_tuser == 6'h04)));
  assign lnOut_tdata = io_lnOut_tdata;
  assign lnOut_tuser = io_lnOut_tuser;
  assign dotOutPre_valid = (io_dotOut_valid && ((io_dotOut_tuser == 6'h07) || (io_dotOut_tuser == 6'h13)));
  assign dotOutPre_tdata = io_dotOut_tdata;
  assign dotOutPre_tuser = io_dotOut_tuser;
  assign dotOut_valid = (dotOutPre_valid && (! cond));
  assign dotOut_tdata = dotOutPre_tdata;
  assign dotOut_tuser = dotOutPre_tuser;
  assign ropeOut_valid = (io_ropeOut_valid && (io_ropeOut_tuser == 6'h08));
  assign ropeOut_payload = io_ropeOut_tdata;
  assign prefillIn_valid = status_tokenIndexFlow_valid;
  assign prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign prefillIn_ready = prefillIn_fifo_io_push_ready;
  assign layerCntAbout2Ovf = (layerCnt == 5'h1e);
  assign vCntOvf = (vCnt == 11'h7ff);
  assign vCntVld = dotOutPre_valid;
  assign enLayerCntInc = (vCntVld && vCntOvf);
  assign prefillIn_fifo_io_pop_ready = (enLayerCntInc && lastLayer);
  assign cond = (prefillIn_fifo_io_pop_payload && lastLayer);
  assign sqrtD_payload = 16'h2da8;
  assign sqrtD_valid = 1'b1;
  assign rope2s2p_valid = ropeOut_mul_ip_m_axis_result_tvalid;
  assign rope2s2p_tdata = ropeOut_mul_ip_m_axis_result_tdata;
  assign rope2s2p_tuser = 6'h08;
  assign s2pInErr = 1'b0;
  assign s2pInMux_valid = (|{rope2s2p_valid,{dotOut_valid,lnOut_valid}});
  assign t_s2pInMux_tdata = {rope2s2p_valid,dotOut_valid};
  assign s2pInMux_tdata = t_s2pInMux_tdata_1;
  assign s2pInMux_tuser = t_s2pInMux_tuser;
  assign vLocal_valid = (s2p_output_tvalid && (s2p_output_tuser == 6'h07));
  assign vLocal_tdata = s2p_output_tdata;
  assign vLocal_tuser = s2p_output_tuser;
  assign io_vLocal_valid = vLocal_valid;
  assign io_vLocal_tdata = vLocal_tdata;
  assign io_vLocal_tuser = vLocal_tuser;
  assign busVecInToFifo_valid = (io_busVecIn_valid && ((((io_busVecIn_tuser == 6'h1f) || (io_busVecIn_tuser == 6'h0)) || (io_busVecIn_tuser == 6'h01)) || (io_busVecIn_tuser == 6'h02)));
  assign busVecInToFifo_tdata = io_busVecIn_tdata;
  assign busVecInToFifo_tuser = io_busVecIn_tuser;
  assign toBufErr = 1'b0;
  assign toBuf_valid = (|{engineVecInToFifo_valid,{busVecInToFifo_valid,s2pToFifo_valid}});
  assign t_toBuf_tdata = {engineVecInToFifo_valid,busVecInToFifo_valid};
  assign toBuf_tdata = t_toBuf_tdata_1;
  assign toBuf_tuser = t_toBuf_tuser;
  assign io_vecOut_valid = vecBuf_io_output_valid;
  assign io_vecOut_payload = vecBuf_io_output_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      layerCnt <= 5'h0;
      lastLayer <= 1'b0;
      vCnt <= 11'h0;
      s2pIn_valid <= 1'b0;
      s2pToFifo_valid <= 1'b0;
      engineVecInToFifo_valid <= 1'b0;
      toBuf_regNext_valid <= 1'b0;
    end else begin
      if(enLayerCntInc) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntAbout2Ovf) begin
          lastLayer <= 1'b1;
        end
        if(lastLayer) begin
          layerCnt <= 5'h0;
          lastLayer <= 1'b0;
        end
      end
      if(vCntVld) begin
        vCnt <= (vCnt + 11'h001);
        if(vCntOvf) begin
          vCnt <= 11'h0;
        end
      end
      s2pIn_valid <= s2pInMux_valid;
      s2pToFifo_valid <= (s2p_output_tvalid && (((((s2p_output_tuser == 6'h04) || (s2p_output_tuser == 6'h15)) || (s2p_output_tuser == 6'h22)) || (s2p_output_tuser == 6'h08)) || (s2p_output_tuser == 6'h13)));
      engineVecInToFifo_valid <= (io_engineVecIn_valid && (io_engineVecIn_tuser == 6'h0f));
      toBuf_regNext_valid <= toBuf_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    s2pIn_tdata <= s2pInMux_tdata;
    s2pIn_tuser <= s2pInMux_tuser;
    s2pToFifo_tdata <= s2p_output_tdata;
    s2pToFifo_tuser <= s2p_output_tuser;
    engineVecInToFifo_tdata <= io_engineVecIn_tdata;
    engineVecInToFifo_tuser <= io_engineVecIn_tuser;
    toBuf_regNext_tdata <= toBuf_tdata;
    toBuf_regNext_tuser <= toBuf_tuser;
  end


endmodule

module BusInSubModNew (
  input  wire          io_bus_valid,
  output reg           io_bus_ready,
  input  wire          io_bus_payload_last,
  input  wire [511:0]  io_bus_payload_tdata,
  input  wire [5:0]    io_bus_payload_tuser,
  input  wire          io_vecIn_valid,
  input  wire [2047:0] io_vecIn_tdata,
  input  wire [5:0]    io_vecIn_tuser,
  input  wire          io_vLocal_valid,
  input  wire [2047:0] io_vLocal_tdata,
  input  wire [5:0]    io_vLocal_tuser,
  input  wire          io_zeroInt4_valid,
  output wire          io_zeroInt4_ready,
  input  wire [7:0]    io_zeroInt4_payload,
  input  wire          io_zeroInt8_valid,
  output wire          io_zeroInt8_ready,
  input  wire [7:0]    io_zeroInt8_payload,
  output wire          io_wkv_valid,
  input  wire          io_wkv_ready,
  output wire [2047:0] io_wkv_payload,
  output wire          io_p2sOut_valid,
  output wire          io_p2sOut_payload_last,
  output wire [15:0]   io_p2sOut_payload_tdata,
  output wire [5:0]    io_p2sOut_payload_tuser,
  output wire          io_toResBuf_valid,
  output wire [2047:0] io_toResBuf_payload,
  output wire          io_directOut_valid,
  output wire [2047:0] io_directOut_tdata,
  output wire [5:0]    io_directOut_tuser,
  input  wire          status_tokenNextHit,
  input  wire          status_mlpNextHit,
  input  wire          status_vNextHit,
  input  wire          status_flushRes,
  input  wire          status_logitsGen,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                s2p_input_valid;
  wire                conv_inputData_tvalid;
  wire                s2p_output_tvalid;
  wire       [2047:0] s2p_output_tdata;
  wire       [5:0]    s2p_output_tuser;
  wire                conv_zeroInt4_tready;
  wire                conv_zeroInt8_tready;
  wire                conv_output_tvalid;
  wire       [2047:0] conv_output_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [2047:0] fifo_io_pop_payload;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire                p2sBuf_io_input_ready;
  wire                p2sBuf_io_output_valid;
  wire       [2047:0] p2sBuf_io_output_tdata;
  wire       [5:0]    p2sBuf_io_output_tuser;
  wire                p2s_io_input_ready;
  wire                p2s_io_output_valid;
  wire       [15:0]   p2s_io_output_tdata;
  wire       [5:0]    p2s_io_output_tuser;
  reg                 t_pushVld;
  reg        [255:0]  t_toFifo_0;
  reg        [255:0]  t_toFifo_1;
  reg        [255:0]  t_toFifo_2;
  reg        [255:0]  t_toFifo_3;
  reg        [255:0]  t_toFifo_4;
  reg        [255:0]  t_toFifo_5;
  reg        [255:0]  t_toFifo_6;
  reg        [255:0]  t_toFifo_7;
  wire                kvHit;
  wire                wkvFire;
  reg                 selExtTokenSqr;
  (* max_fanout = 100 *) reg                 selVLocal;
  wire                en;
  wire                vLocalVec_0_valid;
  reg                 vLocalVec_0_ready;
  wire       [255:0]  vLocalVec_0_payload;
  wire                vLocalVec_1_valid;
  reg                 vLocalVec_1_ready;
  wire       [255:0]  vLocalVec_1_payload;
  wire                vLocalVec_2_valid;
  reg                 vLocalVec_2_ready;
  wire       [255:0]  vLocalVec_2_payload;
  wire                vLocalVec_3_valid;
  reg                 vLocalVec_3_ready;
  wire       [255:0]  vLocalVec_3_payload;
  wire                vLocalVec_4_valid;
  reg                 vLocalVec_4_ready;
  wire       [255:0]  vLocalVec_4_payload;
  wire                vLocalVec_5_valid;
  reg                 vLocalVec_5_ready;
  wire       [255:0]  vLocalVec_5_payload;
  wire                vLocalVec_6_valid;
  reg                 vLocalVec_6_ready;
  wire       [255:0]  vLocalVec_6_payload;
  wire                vLocalVec_7_valid;
  reg                 vLocalVec_7_ready;
  wire       [255:0]  vLocalVec_7_payload;
  wire       [255:0]  vLocalPayload_0;
  wire       [255:0]  vLocalPayload_1;
  wire       [255:0]  vLocalPayload_2;
  wire       [255:0]  vLocalPayload_3;
  wire       [255:0]  vLocalPayload_4;
  wire       [255:0]  vLocalPayload_5;
  wire       [255:0]  vLocalPayload_6;
  wire       [255:0]  vLocalPayload_7;
  (* keep = "true" *) wire                vLocalLockVec_0_valid;
  wire                vLocalLockVec_0_ready;
  wire       [255:0]  vLocalLockVec_0_payload;
  reg                 vLocalVec_0_rValid;
  reg        [255:0]  vLocalVec_0_rData;
  (* keep = "true" *) wire                vLocalLockVec_1_valid;
  wire                vLocalLockVec_1_ready;
  wire       [255:0]  vLocalLockVec_1_payload;
  reg                 vLocalVec_1_rValid;
  reg        [255:0]  vLocalVec_1_rData;
  (* keep = "true" *) wire                vLocalLockVec_2_valid;
  wire                vLocalLockVec_2_ready;
  wire       [255:0]  vLocalLockVec_2_payload;
  reg                 vLocalVec_2_rValid;
  reg        [255:0]  vLocalVec_2_rData;
  (* keep = "true" *) wire                vLocalLockVec_3_valid;
  wire                vLocalLockVec_3_ready;
  wire       [255:0]  vLocalLockVec_3_payload;
  reg                 vLocalVec_3_rValid;
  reg        [255:0]  vLocalVec_3_rData;
  (* keep = "true" *) wire                vLocalLockVec_4_valid;
  wire                vLocalLockVec_4_ready;
  wire       [255:0]  vLocalLockVec_4_payload;
  reg                 vLocalVec_4_rValid;
  reg        [255:0]  vLocalVec_4_rData;
  (* keep = "true" *) wire                vLocalLockVec_5_valid;
  wire                vLocalLockVec_5_ready;
  wire       [255:0]  vLocalLockVec_5_payload;
  reg                 vLocalVec_5_rValid;
  reg        [255:0]  vLocalVec_5_rData;
  (* keep = "true" *) wire                vLocalLockVec_6_valid;
  wire                vLocalLockVec_6_ready;
  wire       [255:0]  vLocalLockVec_6_payload;
  reg                 vLocalVec_6_rValid;
  reg        [255:0]  vLocalVec_6_rData;
  (* keep = "true" *) wire                vLocalLockVec_7_valid;
  wire                vLocalLockVec_7_ready;
  wire       [255:0]  vLocalLockVec_7_payload;
  reg                 vLocalVec_7_rValid;
  reg        [255:0]  vLocalVec_7_rData;
  (* keep = "true" *) reg                 selVLocalVec_0;
  (* keep = "true" *) reg                 selVLocalVec_1;
  (* keep = "true" *) reg                 selVLocalVec_2;
  (* keep = "true" *) reg                 selVLocalVec_3;
  (* keep = "true" *) reg                 selVLocalVec_4;
  (* keep = "true" *) reg                 selVLocalVec_5;
  (* keep = "true" *) reg                 selVLocalVec_6;
  (* keep = "true" *) reg                 selVLocalVec_7;
  wire                vLocal_valid;
  reg                 vLocal_ready;
  (* max_fanout = 100 *) wire                vLocalLock_valid;
  wire                vLocalLock_ready;
  reg                 vLocal_rValid;
  reg        [0:0]    select_1;
  reg        [0:0]    select_1_delay_1;
  reg        [0:0]    select_1_delay_2;
  reg        [0:0]    select_1_delay_3;
  reg        [0:0]    selectPreDly;
  reg        [0:0]    selectDly;
  wire                pushVld;
  wire       [255:0]  convOutSlice_0;
  wire       [255:0]  convOutSlice_1;
  wire       [255:0]  convOutSlice_2;
  wire       [255:0]  convOutSlice_3;
  wire       [255:0]  convOutSlice_4;
  wire       [255:0]  convOutSlice_5;
  wire       [255:0]  convOutSlice_6;
  wire       [255:0]  convOutSlice_7;
  (* keep = "true" *) reg        [0:0]    selectCopy_0;
  (* keep = "true" *) reg        [0:0]    selectCopy_1;
  (* keep = "true" *) reg        [0:0]    selectCopy_2;
  (* keep = "true" *) reg        [0:0]    selectCopy_3;
  (* keep = "true" *) reg        [0:0]    selectCopy_4;
  (* keep = "true" *) reg        [0:0]    selectCopy_5;
  (* keep = "true" *) reg        [0:0]    selectCopy_6;
  (* keep = "true" *) reg        [0:0]    selectCopy_7;
  wire       [255:0]  toFifo_0;
  wire       [255:0]  toFifo_1;
  wire       [255:0]  toFifo_2;
  wire       [255:0]  toFifo_3;
  wire       [255:0]  toFifo_4;
  wire       [255:0]  toFifo_5;
  wire       [255:0]  toFifo_6;
  wire       [255:0]  toFifo_7;
  wire       [2047:0] pushPayload;
  reg                 pushVld_regNext;
  reg        [2047:0] pushPayload_regNext;
  reg                 ready;
  reg                 muxOut_valid;
  reg        [2047:0] muxOut_tdata;
  reg        [5:0]    muxOut_tuser;
  wire                muxOutFlow_valid;
  wire       [5:0]    muxOutFlow_tuser;
  wire                toResFlow_valid;
  wire                p2sInFlow_valid;
  wire       [5:0]    p2sInFlow_tuser;
  reg        [2047:0] payloadDly;
  reg        [5:0]    tagDly;
  reg                 selPrefillSqrDly;
  reg        [3:0]    tensorCnt;
  wire                tensorOvf;
  reg        [4:0]    layerCnt;
  reg        [4:0]    layerBound;
  wire                layerOvf;
  wire                prefillLayerCond;
  reg                 p2sInFlow_valid_regNext;
  reg                 t_io_toResBuf_valid;
  reg        [3:0]    vecInCnt;
  wire                vecInCntOvf;
  (* max_fanout = 100 *) reg                 directOutVld;
  reg        [10:0]   p2sOutCnt;
  wire                p2sOutCntOvf;
  wire                p2sOut_valid;
  wire                p2sOut_payload_last;
  wire       [15:0]   p2sOut_payload_tdata;
  wire       [5:0]    p2sOut_payload_tuser;
  reg                 p2sOut_regNext_valid;
  reg                 p2sOut_regNext_payload_last;
  reg        [15:0]   p2sOut_regNext_payload_tdata;
  reg        [5:0]    p2sOut_regNext_payload_tuser;

  Serial2Parallel_1 s2p (
    .input_valid   (s2p_input_valid            ), //i
    .input_tdata   (io_bus_payload_tdata[511:0]), //i
    .input_tuser   (io_bus_payload_tuser[5:0]  ), //i
    .output_tvalid (s2p_output_tvalid          ), //o
    .output_tdata  (s2p_output_tdata[2047:0]   ), //o
    .output_tuser  (s2p_output_tuser[5:0]      ), //o
    .clk_1_clk     (clk_1_clk                  ), //i
    .clk_1_resetn  (clk_1_resetn               )  //i
  );
  Int4Int8FP16Conv conv (
    .selInt8          (kvHit                      ), //i
    .inputData_tvalid (conv_inputData_tvalid      ), //i
    .inputData_tdata  (io_bus_payload_tdata[511:0]), //i
    .zeroInt4_tvalid  (io_zeroInt4_valid          ), //i
    .zeroInt4_tready  (conv_zeroInt4_tready       ), //o
    .zeroInt4_tdata   (io_zeroInt4_payload[7:0]   ), //i
    .zeroInt8_tvalid  (io_zeroInt8_valid          ), //i
    .zeroInt8_tready  (conv_zeroInt8_tready       ), //o
    .zeroInt8_tdata   (io_zeroInt8_payload[7:0]   ), //i
    .output_tvalid    (conv_output_tvalid         ), //o
    .output_tdata     (conv_output_tdata[2047:0]  ), //o
    .clk_1_clk        (clk_1_clk                  ), //i
    .clk_1_resetn     (clk_1_resetn               )  //i
  );
  LargeBankFifo_10 fifo (
    .io_push_valid   (pushVld_regNext            ), //i
    .io_push_ready   (fifo_io_push_ready         ), //o
    .io_push_payload (pushPayload_regNext[2047:0]), //i
    .io_pop_valid    (fifo_io_pop_valid          ), //o
    .io_pop_ready    (io_wkv_ready               ), //i
    .io_pop_payload  (fifo_io_pop_payload[2047:0]), //o
    .io_occupancy    (fifo_io_occupancy[5:0]     ), //o
    .io_availability (fifo_io_availability[5:0]  ), //o
    .clk_1_clk       (clk_1_clk                  ), //i
    .clk_1_resetn    (clk_1_resetn               )  //i
  );
  StreamAxiFrameFifo p2sBuf (
    .io_input_valid  (p2sInFlow_valid_regNext       ), //i
    .io_input_ready  (p2sBuf_io_input_ready         ), //o
    .io_input_tdata  (payloadDly[2047:0]            ), //i
    .io_input_tuser  (tagDly[5:0]                   ), //i
    .io_output_valid (p2sBuf_io_output_valid        ), //o
    .io_output_ready (p2s_io_input_ready            ), //i
    .io_output_tdata (p2sBuf_io_output_tdata[2047:0]), //o
    .io_output_tuser (p2sBuf_io_output_tuser[5:0]   ), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  Parallel2Serial p2s (
    .io_input_valid  (p2sBuf_io_output_valid        ), //i
    .io_input_ready  (p2s_io_input_ready            ), //o
    .io_input_tdata  (p2sBuf_io_output_tdata[2047:0]), //i
    .io_input_tuser  (p2sBuf_io_output_tuser[5:0]   ), //i
    .io_output_valid (p2s_io_output_valid           ), //o
    .io_output_tdata (p2s_io_output_tdata[15:0]     ), //o
    .io_output_tuser (p2s_io_output_tuser[5:0]      ), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  always @(*) begin
    case(selectDly)
      1'b0 : t_pushVld = conv_output_tvalid;
      default : t_pushVld = (vLocalLock_valid && vLocalLock_ready);
    endcase
  end

  always @(*) begin
    case(selectCopy_0)
      1'b0 : t_toFifo_0 = convOutSlice_0;
      default : t_toFifo_0 = vLocalLockVec_0_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_1)
      1'b0 : t_toFifo_1 = convOutSlice_1;
      default : t_toFifo_1 = vLocalLockVec_1_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_2)
      1'b0 : t_toFifo_2 = convOutSlice_2;
      default : t_toFifo_2 = vLocalLockVec_2_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_3)
      1'b0 : t_toFifo_3 = convOutSlice_3;
      default : t_toFifo_3 = vLocalLockVec_3_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_4)
      1'b0 : t_toFifo_4 = convOutSlice_4;
      default : t_toFifo_4 = vLocalLockVec_4_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_5)
      1'b0 : t_toFifo_5 = convOutSlice_5;
      default : t_toFifo_5 = vLocalLockVec_5_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_6)
      1'b0 : t_toFifo_6 = convOutSlice_6;
      default : t_toFifo_6 = vLocalLockVec_6_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_7)
      1'b0 : t_toFifo_7 = convOutSlice_7;
      default : t_toFifo_7 = vLocalLockVec_7_payload;
    endcase
  end

  assign kvHit = ((6'h06 == io_bus_payload_tuser) || (6'h08 == io_bus_payload_tuser));
  assign wkvFire = (io_bus_valid && io_bus_ready);
  assign en = (wkvFire && io_bus_payload_last);
  assign vLocalPayload_0 = io_vLocal_tdata[255 : 0];
  assign vLocalPayload_1 = io_vLocal_tdata[511 : 256];
  assign vLocalPayload_2 = io_vLocal_tdata[767 : 512];
  assign vLocalPayload_3 = io_vLocal_tdata[1023 : 768];
  assign vLocalPayload_4 = io_vLocal_tdata[1279 : 1024];
  assign vLocalPayload_5 = io_vLocal_tdata[1535 : 1280];
  assign vLocalPayload_6 = io_vLocal_tdata[1791 : 1536];
  assign vLocalPayload_7 = io_vLocal_tdata[2047 : 1792];
  assign vLocalVec_0_valid = io_vLocal_valid;
  assign vLocalVec_1_valid = io_vLocal_valid;
  assign vLocalVec_2_valid = io_vLocal_valid;
  assign vLocalVec_3_valid = io_vLocal_valid;
  assign vLocalVec_4_valid = io_vLocal_valid;
  assign vLocalVec_5_valid = io_vLocal_valid;
  assign vLocalVec_6_valid = io_vLocal_valid;
  assign vLocalVec_7_valid = io_vLocal_valid;
  assign vLocalVec_0_payload = vLocalPayload_0;
  assign vLocalVec_1_payload = vLocalPayload_1;
  assign vLocalVec_2_payload = vLocalPayload_2;
  assign vLocalVec_3_payload = vLocalPayload_3;
  assign vLocalVec_4_payload = vLocalPayload_4;
  assign vLocalVec_5_payload = vLocalPayload_5;
  assign vLocalVec_6_payload = vLocalPayload_6;
  assign vLocalVec_7_payload = vLocalPayload_7;
  always @(*) begin
    vLocalVec_0_ready = vLocalLockVec_0_ready;
    if((! vLocalLockVec_0_valid)) begin
      vLocalVec_0_ready = 1'b1;
    end
  end

  assign vLocalLockVec_0_valid = vLocalVec_0_rValid;
  assign vLocalLockVec_0_payload = vLocalVec_0_rData;
  always @(*) begin
    vLocalVec_1_ready = vLocalLockVec_1_ready;
    if((! vLocalLockVec_1_valid)) begin
      vLocalVec_1_ready = 1'b1;
    end
  end

  assign vLocalLockVec_1_valid = vLocalVec_1_rValid;
  assign vLocalLockVec_1_payload = vLocalVec_1_rData;
  always @(*) begin
    vLocalVec_2_ready = vLocalLockVec_2_ready;
    if((! vLocalLockVec_2_valid)) begin
      vLocalVec_2_ready = 1'b1;
    end
  end

  assign vLocalLockVec_2_valid = vLocalVec_2_rValid;
  assign vLocalLockVec_2_payload = vLocalVec_2_rData;
  always @(*) begin
    vLocalVec_3_ready = vLocalLockVec_3_ready;
    if((! vLocalLockVec_3_valid)) begin
      vLocalVec_3_ready = 1'b1;
    end
  end

  assign vLocalLockVec_3_valid = vLocalVec_3_rValid;
  assign vLocalLockVec_3_payload = vLocalVec_3_rData;
  always @(*) begin
    vLocalVec_4_ready = vLocalLockVec_4_ready;
    if((! vLocalLockVec_4_valid)) begin
      vLocalVec_4_ready = 1'b1;
    end
  end

  assign vLocalLockVec_4_valid = vLocalVec_4_rValid;
  assign vLocalLockVec_4_payload = vLocalVec_4_rData;
  always @(*) begin
    vLocalVec_5_ready = vLocalLockVec_5_ready;
    if((! vLocalLockVec_5_valid)) begin
      vLocalVec_5_ready = 1'b1;
    end
  end

  assign vLocalLockVec_5_valid = vLocalVec_5_rValid;
  assign vLocalLockVec_5_payload = vLocalVec_5_rData;
  always @(*) begin
    vLocalVec_6_ready = vLocalLockVec_6_ready;
    if((! vLocalLockVec_6_valid)) begin
      vLocalVec_6_ready = 1'b1;
    end
  end

  assign vLocalLockVec_6_valid = vLocalVec_6_rValid;
  assign vLocalLockVec_6_payload = vLocalVec_6_rData;
  always @(*) begin
    vLocalVec_7_ready = vLocalLockVec_7_ready;
    if((! vLocalLockVec_7_valid)) begin
      vLocalVec_7_ready = 1'b1;
    end
  end

  assign vLocalLockVec_7_valid = vLocalVec_7_rValid;
  assign vLocalLockVec_7_payload = vLocalVec_7_rData;
  assign vLocalLockVec_0_ready = selVLocalVec_0;
  assign vLocalLockVec_1_ready = selVLocalVec_1;
  assign vLocalLockVec_2_ready = selVLocalVec_2;
  assign vLocalLockVec_3_ready = selVLocalVec_3;
  assign vLocalLockVec_4_ready = selVLocalVec_4;
  assign vLocalLockVec_5_ready = selVLocalVec_5;
  assign vLocalLockVec_6_ready = selVLocalVec_6;
  assign vLocalLockVec_7_ready = selVLocalVec_7;
  assign vLocal_valid = io_vLocal_valid;
  always @(*) begin
    vLocal_ready = vLocalLock_ready;
    if((! vLocalLock_valid)) begin
      vLocal_ready = 1'b1;
    end
  end

  assign vLocalLock_valid = vLocal_rValid;
  assign vLocalLock_ready = selVLocal;
  assign s2p_input_valid = (wkvFire && selExtTokenSqr);
  assign conv_inputData_tvalid = (wkvFire && (! selExtTokenSqr));
  assign io_zeroInt4_ready = conv_zeroInt4_tready;
  assign io_zeroInt8_ready = conv_zeroInt8_tready;
  assign io_wkv_valid = fifo_io_pop_valid;
  assign io_wkv_payload = fifo_io_pop_payload;
  assign pushVld = t_pushVld;
  assign convOutSlice_0 = conv_output_tdata[255 : 0];
  assign convOutSlice_1 = conv_output_tdata[511 : 256];
  assign convOutSlice_2 = conv_output_tdata[767 : 512];
  assign convOutSlice_3 = conv_output_tdata[1023 : 768];
  assign convOutSlice_4 = conv_output_tdata[1279 : 1024];
  assign convOutSlice_5 = conv_output_tdata[1535 : 1280];
  assign convOutSlice_6 = conv_output_tdata[1791 : 1536];
  assign convOutSlice_7 = conv_output_tdata[2047 : 1792];
  assign toFifo_0 = t_toFifo_0;
  assign toFifo_1 = t_toFifo_1;
  assign toFifo_2 = t_toFifo_2;
  assign toFifo_3 = t_toFifo_3;
  assign toFifo_4 = t_toFifo_4;
  assign toFifo_5 = t_toFifo_5;
  assign toFifo_6 = t_toFifo_6;
  assign toFifo_7 = t_toFifo_7;
  assign pushPayload = {toFifo_7,{toFifo_6,{toFifo_5,{toFifo_4,{toFifo_3,{toFifo_2,{toFifo_1,toFifo_0}}}}}}};
  always @(*) begin
    select_1 = 1'b0;
    if(selVLocal) begin
      select_1 = 1'b1;
    end
  end

  always @(*) begin
    io_bus_ready = ready;
    if(selVLocal) begin
      io_bus_ready = 1'b0;
    end
    if(selExtTokenSqr) begin
      io_bus_ready = (! status_logitsGen);
    end
  end

  assign toResFlow_valid = (muxOutFlow_valid && ((((muxOutFlow_tuser == 6'h1f) || (muxOutFlow_tuser == 6'h0)) || (muxOutFlow_tuser == 6'h01)) || (muxOutFlow_tuser == 6'h02)));
  assign p2sInFlow_valid = (muxOutFlow_valid && (((((muxOutFlow_tuser == 6'h1f) || (muxOutFlow_tuser == 6'h1c)) || (muxOutFlow_tuser == 6'h0)) || (muxOutFlow_tuser == 6'h01)) || (muxOutFlow_tuser == 6'h02)));
  assign p2sInFlow_tuser = muxOutFlow_tuser;
  assign muxOutFlow_valid = muxOut_valid;
  assign muxOutFlow_tuser = muxOut_tuser;
  always @(*) begin
    muxOut_valid = (io_vecIn_valid && (io_vecIn_tuser == 6'h1f));
    if(selPrefillSqrDly) begin
      muxOut_valid = s2p_output_tvalid;
    end
  end

  always @(*) begin
    muxOut_tdata = io_vecIn_tdata;
    if(selPrefillSqrDly) begin
      muxOut_tdata = s2p_output_tdata;
    end
  end

  always @(*) begin
    muxOut_tuser = 6'h1f;
    if(selPrefillSqrDly) begin
      muxOut_tuser = s2p_output_tuser;
    end
  end

  assign tensorOvf = (tensorCnt == 4'b1111);
  assign layerOvf = (layerCnt == layerBound);
  assign prefillLayerCond = (muxOut_tuser == 6'h0);
  assign io_toResBuf_valid = t_io_toResBuf_valid;
  assign io_toResBuf_payload = payloadDly;
  assign vecInCntOvf = (vecInCnt == 4'b1111);
  assign io_directOut_valid = directOutVld;
  assign io_directOut_tuser = 6'h0;
  assign io_directOut_tdata = 2048'h0;
  assign p2sOutCntOvf = (p2sOutCnt == 11'h7ff);
  assign p2sOut_valid = p2s_io_output_valid;
  assign p2sOut_payload_tdata = p2s_io_output_tdata;
  assign p2sOut_payload_tuser = p2s_io_output_tuser;
  assign p2sOut_payload_last = p2sOutCntOvf;
  assign io_p2sOut_valid = p2sOut_regNext_valid;
  assign io_p2sOut_payload_last = p2sOut_regNext_payload_last;
  assign io_p2sOut_payload_tdata = p2sOut_regNext_payload_tdata;
  assign io_p2sOut_payload_tuser = p2sOut_regNext_payload_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      selExtTokenSqr <= 1'b1;
      selVLocal <= 1'b0;
      vLocalVec_0_rValid <= 1'b0;
      vLocalVec_1_rValid <= 1'b0;
      vLocalVec_2_rValid <= 1'b0;
      vLocalVec_3_rValid <= 1'b0;
      vLocalVec_4_rValid <= 1'b0;
      vLocalVec_5_rValid <= 1'b0;
      vLocalVec_6_rValid <= 1'b0;
      vLocalVec_7_rValid <= 1'b0;
      selVLocalVec_0 <= 1'b0;
      selVLocalVec_1 <= 1'b0;
      selVLocalVec_2 <= 1'b0;
      selVLocalVec_3 <= 1'b0;
      selVLocalVec_4 <= 1'b0;
      selVLocalVec_5 <= 1'b0;
      selVLocalVec_6 <= 1'b0;
      selVLocalVec_7 <= 1'b0;
      vLocal_rValid <= 1'b0;
      select_1_delay_1 <= 1'b0;
      select_1_delay_2 <= 1'b0;
      select_1_delay_3 <= 1'b0;
      selectPreDly <= 1'b0;
      selectDly <= 1'b0;
      selectCopy_0 <= 1'b0;
      selectCopy_1 <= 1'b0;
      selectCopy_2 <= 1'b0;
      selectCopy_3 <= 1'b0;
      selectCopy_4 <= 1'b0;
      selectCopy_5 <= 1'b0;
      selectCopy_6 <= 1'b0;
      selectCopy_7 <= 1'b0;
      pushVld_regNext <= 1'b0;
      ready <= 1'b0;
      selPrefillSqrDly <= 1'b0;
      tensorCnt <= 4'b0000;
      layerCnt <= 5'h0;
      layerBound <= 5'h1f;
      p2sInFlow_valid_regNext <= 1'b0;
      t_io_toResBuf_valid <= 1'b0;
      vecInCnt <= 4'b0000;
      directOutVld <= 1'b0;
      p2sOutCnt <= 11'h0;
      p2sOut_regNext_valid <= 1'b0;
    end else begin
      if(en) begin
        if(status_tokenNextHit) begin
          selExtTokenSqr <= 1'b1;
        end
        if(status_vNextHit) begin
          selVLocal <= 1'b1;
        end
      end
      if(((wkvFire && io_bus_payload_last) && selExtTokenSqr)) begin
        selExtTokenSqr <= 1'b0;
      end
      if(vLocalVec_0_ready) begin
        vLocalVec_0_rValid <= vLocalVec_0_valid;
      end
      if(vLocalVec_1_ready) begin
        vLocalVec_1_rValid <= vLocalVec_1_valid;
      end
      if(vLocalVec_2_ready) begin
        vLocalVec_2_rValid <= vLocalVec_2_valid;
      end
      if(vLocalVec_3_ready) begin
        vLocalVec_3_rValid <= vLocalVec_3_valid;
      end
      if(vLocalVec_4_ready) begin
        vLocalVec_4_rValid <= vLocalVec_4_valid;
      end
      if(vLocalVec_5_ready) begin
        vLocalVec_5_rValid <= vLocalVec_5_valid;
      end
      if(vLocalVec_6_ready) begin
        vLocalVec_6_rValid <= vLocalVec_6_valid;
      end
      if(vLocalVec_7_ready) begin
        vLocalVec_7_rValid <= vLocalVec_7_valid;
      end
      if(en) begin
        if(status_vNextHit) begin
          selVLocalVec_0 <= 1'b1;
          selVLocalVec_1 <= 1'b1;
          selVLocalVec_2 <= 1'b1;
          selVLocalVec_3 <= 1'b1;
          selVLocalVec_4 <= 1'b1;
          selVLocalVec_5 <= 1'b1;
          selVLocalVec_6 <= 1'b1;
          selVLocalVec_7 <= 1'b1;
        end
      end
      if(vLocalLockVec_0_valid) begin
        selVLocalVec_0 <= 1'b0;
      end
      if(vLocalLockVec_1_valid) begin
        selVLocalVec_1 <= 1'b0;
      end
      if(vLocalLockVec_2_valid) begin
        selVLocalVec_2 <= 1'b0;
      end
      if(vLocalLockVec_3_valid) begin
        selVLocalVec_3 <= 1'b0;
      end
      if(vLocalLockVec_4_valid) begin
        selVLocalVec_4 <= 1'b0;
      end
      if(vLocalLockVec_5_valid) begin
        selVLocalVec_5 <= 1'b0;
      end
      if(vLocalLockVec_6_valid) begin
        selVLocalVec_6 <= 1'b0;
      end
      if(vLocalLockVec_7_valid) begin
        selVLocalVec_7 <= 1'b0;
      end
      if(vLocal_ready) begin
        vLocal_rValid <= vLocal_valid;
      end
      if(vLocalLock_valid) begin
        selVLocal <= 1'b0;
      end
      select_1_delay_1 <= select_1;
      select_1_delay_2 <= select_1_delay_1;
      select_1_delay_3 <= select_1_delay_2;
      selectPreDly <= select_1_delay_3;
      selectDly <= selectPreDly;
      selectCopy_0 <= selectPreDly;
      selectCopy_1 <= selectPreDly;
      selectCopy_2 <= selectPreDly;
      selectCopy_3 <= selectPreDly;
      selectCopy_4 <= selectPreDly;
      selectCopy_5 <= selectPreDly;
      selectCopy_6 <= selectPreDly;
      selectCopy_7 <= selectPreDly;
      pushVld_regNext <= pushVld;
      ready <= (6'h08 <= fifo_io_availability);
      selPrefillSqrDly <= selExtTokenSqr;
      if(toResFlow_valid) begin
        tensorCnt <= (tensorCnt + 4'b0001);
        if(tensorOvf) begin
          tensorCnt <= 4'b0000;
          if((muxOut_tuser != 6'h1f)) begin
            layerBound <= (prefillLayerCond ? 5'h1e : 5'h1f);
          end
          if((muxOut_tuser == 6'h1f)) begin
            layerCnt <= (layerCnt + 5'h01);
          end
          if(layerOvf) begin
            layerCnt <= 5'h0;
          end
        end
      end
      p2sInFlow_valid_regNext <= p2sInFlow_valid;
      t_io_toResBuf_valid <= (toResFlow_valid && (! layerOvf));
      if(muxOut_valid) begin
        vecInCnt <= (vecInCnt + 4'b0001);
        if(vecInCntOvf) begin
          vecInCnt <= 4'b0000;
        end
      end
      directOutVld <= (muxOut_valid && (vecInCnt == 4'b0000));
      if(p2s_io_output_valid) begin
        p2sOutCnt <= (p2sOutCnt + 11'h001);
        if(p2sOutCntOvf) begin
          p2sOutCnt <= 11'h0;
        end
      end
      p2sOut_regNext_valid <= p2sOut_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    if(vLocalVec_0_ready) begin
      vLocalVec_0_rData <= vLocalVec_0_payload;
    end
    if(vLocalVec_1_ready) begin
      vLocalVec_1_rData <= vLocalVec_1_payload;
    end
    if(vLocalVec_2_ready) begin
      vLocalVec_2_rData <= vLocalVec_2_payload;
    end
    if(vLocalVec_3_ready) begin
      vLocalVec_3_rData <= vLocalVec_3_payload;
    end
    if(vLocalVec_4_ready) begin
      vLocalVec_4_rData <= vLocalVec_4_payload;
    end
    if(vLocalVec_5_ready) begin
      vLocalVec_5_rData <= vLocalVec_5_payload;
    end
    if(vLocalVec_6_ready) begin
      vLocalVec_6_rData <= vLocalVec_6_payload;
    end
    if(vLocalVec_7_ready) begin
      vLocalVec_7_rData <= vLocalVec_7_payload;
    end
    pushPayload_regNext <= pushPayload;
    payloadDly <= muxOut_tdata;
    tagDly <= muxOut_tuser;
    p2sOut_regNext_payload_last <= p2sOut_payload_last;
    p2sOut_regNext_payload_tdata <= p2sOut_payload_tdata;
    p2sOut_regNext_payload_tuser <= p2sOut_payload_tuser;
  end


endmodule

module ScalarOutSubMod (
  input  wire          io_p2sOut_valid,
  input  wire [15:0]   io_p2sOut_tdata,
  input  wire [5:0]    io_p2sOut_tuser,
  input  wire          io_allReduceOut_valid,
  input  wire [15:0]   io_allReduceOut_tdata,
  input  wire [5:0]    io_allReduceOut_tuser,
  input  wire          io_softmaxOut_valid,
  input  wire          io_softmaxOut_payload_last,
  input  wire [15:0]   io_softmaxOut_payload_tdata,
  input  wire [5:0]    io_softmaxOut_payload_tuser,
  output wire          io_scalarOut_valid,
  input  wire          io_scalarOut_ready,
  output wire [15:0]   io_scalarOut_payload,
  input  wire          io_allGatherIndexIn_valid,
  input  wire          io_allGatherIndexIn_payload_last,
  input  wire [15:0]   io_allGatherIndexIn_payload_tdata,
  input  wire [5:0]    io_allGatherIndexIn_payload_tuser,
  output wire          io_zfIndexOut_valid,
  output wire          io_zfIndexOut_payload_last,
  output wire [15:0]   io_zfIndexOut_payload_tdata,
  output wire [5:0]    io_zfIndexOut_payload_tuser,
  output wire          io_gateIndexOut_valid,
  output wire          io_gateIndexOut_payload_last,
  output wire [15:0]   io_gateIndexOut_payload_tdata,
  output wire [5:0]    io_gateIndexOut_payload_tuser,
  output wire          io_ugIndexOut_valid,
  output wire          io_ugIndexOut_payload_last,
  output wire [15:0]   io_ugIndexOut_payload_tdata,
  output wire [5:0]    io_ugIndexOut_payload_tuser,
  input  wire          clk_1_clk,
  input  wire          status_enPredictor,
  input  wire          status_enFatRelu,
  output wire          silu_to_valid,
  output wire [15:0]   silu_to_payload,
  input  wire          silu_from_valid,
  input  wire [15:0]   silu_from_payload,
  input  wire          clk_1_resetn
);

  wire                ug_gateIndexOut_valid;
  wire                ug_gateIndexOut_payload_last;
  wire       [15:0]   ug_gateIndexOut_payload_tdata;
  wire       [5:0]    ug_gateIndexOut_payload_tuser;
  wire                ug_ugIndexOut_valid;
  wire                ug_ugIndexOut_payload_last;
  wire       [15:0]   ug_ugIndexOut_payload_tdata;
  wire       [5:0]    ug_ugIndexOut_payload_tuser;
  wire                ug_ugOut_tvalid;
  wire                ug_ugOut_tlast;
  wire       [15:0]   ug_ugOut_tdata;
  wire       [5:0]    ug_ugOut_tuser;
  wire                ug_silu_to_valid;
  wire       [15:0]   ug_silu_to_payload;
  wire                scalarFifo_io_push_ready;
  wire                scalarFifo_io_pop_valid;
  wire                scalarFifo_io_pop_payload_last;
  wire       [15:0]   scalarFifo_io_pop_payload_fragment;
  wire       [23:0]   t_io_zfIndexOut_valid;
  wire       [22:0]   t_io_zfIndexOut_payload_last;
  wire       [21:0]   t_io_zfIndexOut_payload_tdata;
  reg                 sOut_ug_gateIndexOut_regNext_valid;
  reg                 sOut_ug_gateIndexOut_regNext_payload_last;
  reg        [15:0]   sOut_ug_gateIndexOut_regNext_payload_tdata;
  reg        [5:0]    sOut_ug_gateIndexOut_regNext_payload_tuser;
  reg                 sOut_ug_ugIndexOut_regNext_valid;
  reg                 sOut_ug_ugIndexOut_regNext_payload_last;
  reg        [15:0]   sOut_ug_ugIndexOut_regNext_payload_tdata;
  reg        [5:0]    sOut_ug_ugIndexOut_regNext_payload_tuser;
  wire                ug2Axpy_valid;
  wire                ug2Axpy_payload_last;
  wire       [15:0]   ug2Axpy_payload_fragment;
  wire                softmax2Axpy_valid;
  wire                softmax2Axpy_payload_last;
  wire       [15:0]   softmax2Axpy_payload_fragment;
  wire                axpyInMux_valid;
  wire                axpyInMux_payload_last;
  wire       [15:0]   axpyInMux_payload_fragment;
  wire                axpyErr;
  reg                 axpyIn_tvalid;
  reg                 axpyIn_tlast;
  reg        [15:0]   axpyIn_tdata;

  UGMul ug (
    .predIndexIn_valid          (io_allGatherIndexIn_valid              ), //i
    .predIndexIn_payload_last   (io_allGatherIndexIn_payload_last       ), //i
    .predIndexIn_payload_tdata  (io_allGatherIndexIn_payload_tdata[15:0]), //i
    .predIndexIn_payload_tuser  (io_allGatherIndexIn_payload_tuser[5:0] ), //i
    .gateIndexOut_valid         (ug_gateIndexOut_valid                  ), //o
    .gateIndexOut_payload_last  (ug_gateIndexOut_payload_last           ), //o
    .gateIndexOut_payload_tdata (ug_gateIndexOut_payload_tdata[15:0]    ), //o
    .gateIndexOut_payload_tuser (ug_gateIndexOut_payload_tuser[5:0]     ), //o
    .ugIndexOut_valid           (ug_ugIndexOut_valid                    ), //o
    .ugIndexOut_payload_last    (ug_ugIndexOut_payload_last             ), //o
    .ugIndexOut_payload_tdata   (ug_ugIndexOut_payload_tdata[15:0]      ), //o
    .ugIndexOut_payload_tuser   (ug_ugIndexOut_payload_tuser[5:0]       ), //o
    .allReduceOut_valid         (io_allReduceOut_valid                  ), //i
    .allReduceOut_tdata         (io_allReduceOut_tdata[15:0]            ), //i
    .allReduceOut_tuser         (io_allReduceOut_tuser[5:0]             ), //i
    .ugOut_tvalid               (ug_ugOut_tvalid                        ), //o
    .ugOut_tlast                (ug_ugOut_tlast                         ), //o
    .ugOut_tdata                (ug_ugOut_tdata[15:0]                   ), //o
    .ugOut_tuser                (ug_ugOut_tuser[5:0]                    ), //o
    .status_enPredictor         (status_enPredictor                     ), //i
    .status_enFatRelu           (status_enFatRelu                       ), //i
    .silu_to_valid              (ug_silu_to_valid                       ), //o
    .silu_to_payload            (ug_silu_to_payload[15:0]               ), //o
    .silu_from_valid            (silu_from_valid                        ), //i
    .silu_from_payload          (silu_from_payload[15:0]                ), //i
    .clk_1_clk                  (clk_1_clk                              ), //i
    .clk_1_resetn               (clk_1_resetn                           )  //i
  );
  URAM16x16384Fifo_2 scalarFifo (
    .io_push_valid            (axpyIn_tvalid                           ), //i
    .io_push_ready            (scalarFifo_io_push_ready                ), //o
    .io_push_payload_last     (axpyIn_tlast                            ), //i
    .io_push_payload_fragment (axpyIn_tdata[15:0]                      ), //i
    .io_pop_valid             (scalarFifo_io_pop_valid                 ), //o
    .io_pop_ready             (io_scalarOut_ready                      ), //i
    .io_pop_payload_last      (scalarFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (scalarFifo_io_pop_payload_fragment[15:0]), //o
    .clk_1_clk                (clk_1_clk                               ), //i
    .clk_1_resetn             (clk_1_resetn                            )  //i
  );
  assign silu_to_valid = ug_silu_to_valid;
  assign silu_to_payload = ug_silu_to_payload;
  assign t_io_zfIndexOut_valid = 24'h0;
  assign io_zfIndexOut_valid = t_io_zfIndexOut_valid[0];
  assign t_io_zfIndexOut_payload_last = t_io_zfIndexOut_valid[23 : 1];
  assign io_zfIndexOut_payload_last = t_io_zfIndexOut_payload_last[0];
  assign t_io_zfIndexOut_payload_tdata = t_io_zfIndexOut_payload_last[22 : 1];
  assign io_zfIndexOut_payload_tdata = t_io_zfIndexOut_payload_tdata[15 : 0];
  assign io_zfIndexOut_payload_tuser = t_io_zfIndexOut_payload_tdata[21 : 16];
  assign io_gateIndexOut_valid = sOut_ug_gateIndexOut_regNext_valid;
  assign io_gateIndexOut_payload_last = sOut_ug_gateIndexOut_regNext_payload_last;
  assign io_gateIndexOut_payload_tdata = sOut_ug_gateIndexOut_regNext_payload_tdata;
  assign io_gateIndexOut_payload_tuser = sOut_ug_gateIndexOut_regNext_payload_tuser;
  assign io_ugIndexOut_valid = sOut_ug_ugIndexOut_regNext_valid;
  assign io_ugIndexOut_payload_last = sOut_ug_ugIndexOut_regNext_payload_last;
  assign io_ugIndexOut_payload_tdata = sOut_ug_ugIndexOut_regNext_payload_tdata;
  assign io_ugIndexOut_payload_tuser = sOut_ug_ugIndexOut_regNext_payload_tuser;
  assign ug2Axpy_valid = (ug_ugOut_tvalid && (ug_ugOut_tuser == 6'h19));
  assign ug2Axpy_payload_fragment = ug_ugOut_tdata;
  assign ug2Axpy_payload_last = ug_ugOut_tlast;
  assign softmax2Axpy_valid = (io_softmaxOut_valid && (io_softmaxOut_payload_tuser == 6'h0e));
  assign softmax2Axpy_payload_fragment = io_softmaxOut_payload_tdata;
  assign softmax2Axpy_payload_last = io_softmaxOut_payload_last;
  assign axpyErr = 1'b0;
  assign axpyInMux_valid = (|{softmax2Axpy_valid,ug2Axpy_valid});
  assign axpyInMux_payload_last = (ug2Axpy_valid ? ug2Axpy_payload_last : softmax2Axpy_payload_last);
  assign axpyInMux_payload_fragment = (ug2Axpy_valid ? ug2Axpy_payload_fragment : softmax2Axpy_payload_fragment);
  assign io_scalarOut_valid = scalarFifo_io_pop_valid;
  assign io_scalarOut_payload = scalarFifo_io_pop_payload_fragment;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      sOut_ug_gateIndexOut_regNext_valid <= 1'b0;
      sOut_ug_ugIndexOut_regNext_valid <= 1'b0;
      axpyIn_tvalid <= 1'b0;
    end else begin
      sOut_ug_gateIndexOut_regNext_valid <= ug_gateIndexOut_valid;
      sOut_ug_ugIndexOut_regNext_valid <= ug_ugIndexOut_valid;
      axpyIn_tvalid <= axpyInMux_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    sOut_ug_gateIndexOut_regNext_payload_last <= ug_gateIndexOut_payload_last;
    sOut_ug_gateIndexOut_regNext_payload_tdata <= ug_gateIndexOut_payload_tdata;
    sOut_ug_gateIndexOut_regNext_payload_tuser <= ug_gateIndexOut_payload_tuser;
    sOut_ug_ugIndexOut_regNext_payload_last <= ug_ugIndexOut_payload_last;
    sOut_ug_ugIndexOut_regNext_payload_tdata <= ug_ugIndexOut_payload_tdata;
    sOut_ug_ugIndexOut_regNext_payload_tuser <= ug_ugIndexOut_payload_tuser;
    axpyIn_tlast <= axpyInMux_payload_last;
    axpyIn_tdata <= axpyInMux_payload_fragment;
  end


endmodule

module NormSubModNew (
  input  wire          io_allGatherOut_valid,
  input  wire [15:0]   io_allGatherOut_tdata,
  input  wire [5:0]    io_allGatherOut_tuser,
  input  wire          io_allReduceOut_valid,
  input  wire [15:0]   io_allReduceOut_tdata,
  input  wire [5:0]    io_allReduceOut_tuser,
  input  wire          io_lnScale_valid,
  output wire          io_lnScale_ready,
  input  wire [15:0]   io_lnScale_payload,
  output wire          io_lnOut_valid,
  output wire [15:0]   io_lnOut_tdata,
  output wire [5:0]    io_lnOut_tuser,
  input  wire          status_toLogitsGen,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn,
  output wire          mlpNormOutProbe_valid,
  output wire [15:0]   mlpNormOutProbe_payload,
  output wire          attnNormOutProbe_valid,
  output wire [15:0]   attnNormOutProbe_payload
);

  wire                rmsNorm_io_scale_ready;
  wire                rmsNorm_io_normOut_valid;
  wire       [15:0]   rmsNorm_io_normOut_payload;
  wire                allReduceOut_valid;
  wire       [15:0]   allReduceOut_tdata;
  wire       [5:0]    allReduceOut_tuser;
  wire                allGatherOut_valid;
  wire       [15:0]   allGatherOut_tdata;
  wire       [5:0]    allGatherOut_tuser;
  wire                inputTagMap_valid;
  wire       [15:0]   inputTagMap_tdata;
  wire       [5:0]    inputTagMap_tuser;
  reg                 inputVld;
  reg        [15:0]   inputData;
  wire       [5:0]    tag;
  reg        [11:0]   inCnt;
  wire                inCntOvf;
  wire                userStream_valid;
  reg                 userStream_ready;
  wire       [5:0]    userStream_payload;
  wire                userStreamPipe_valid;
  wire                userStreamPipe_ready;
  wire       [5:0]    userStreamPipe_payload;
  reg                 userStream_rValid;
  reg        [5:0]    userStream_rData;
  wire                isAttnLn;
  wire                isLmHeadLn;
  reg        [11:0]   outCnt;
  wire                outCntOvf;
  wire                output_valid;
  wire       [15:0]   output_tdata;
  wire       [5:0]    output_tuser;
  reg                 output_regNext_valid;
  reg        [15:0]   output_regNext_tdata;
  reg        [5:0]    output_regNext_tuser;

  RMSNormFp32 rmsNorm (
    .io_toBeNorm_valid   (inputVld                        ), //i
    .io_toBeNorm_payload (inputData[15:0]                 ), //i
    .io_scale_valid      (io_lnScale_valid                ), //i
    .io_scale_ready      (rmsNorm_io_scale_ready          ), //o
    .io_scale_payload    (io_lnScale_payload[15:0]        ), //i
    .io_normOut_valid    (rmsNorm_io_normOut_valid        ), //o
    .io_normOut_payload  (rmsNorm_io_normOut_payload[15:0]), //o
    .isAttnLn            (isAttnLn                        ), //i
    .isLmHeadLn          (isLmHeadLn                      ), //i
    .clk_1_clk           (clk_1_clk                       ), //i
    .clk_1_resetn        (clk_1_resetn                    )  //i
  );
  assign allReduceOut_valid = (io_allReduceOut_valid && (io_allReduceOut_tuser == 6'h10));
  assign allReduceOut_tdata = io_allReduceOut_tdata;
  assign allGatherOut_valid = (io_allGatherOut_valid && ((((io_allGatherOut_tuser == 6'h0) || (io_allGatherOut_tuser == 6'h01)) || (io_allGatherOut_tuser == 6'h02)) || (io_allGatherOut_tuser == 6'h1f)));
  assign allGatherOut_tdata = io_allGatherOut_tdata;
  assign allReduceOut_tuser = 6'h15;
  assign allGatherOut_tuser = 6'h04;
  assign inputTagMap_valid = (|{allGatherOut_valid,allReduceOut_valid});
  assign inputTagMap_tdata = (allReduceOut_valid ? allReduceOut_tdata : allGatherOut_tdata);
  assign inputTagMap_tuser = (allReduceOut_valid ? allReduceOut_tuser : allGatherOut_tuser);
  assign tag = ((status_toLogitsGen && (inputTagMap_tuser == 6'h04)) ? 6'h22 : inputTagMap_tuser);
  assign inCntOvf = (inCnt == 12'hfff);
  always @(*) begin
    userStream_ready = userStreamPipe_ready;
    if((! userStreamPipe_valid)) begin
      userStream_ready = 1'b1;
    end
  end

  assign userStreamPipe_valid = userStream_rValid;
  assign userStreamPipe_payload = userStream_rData;
  assign userStream_valid = ((inCnt == 12'h0) && inputTagMap_valid);
  assign userStream_payload = tag;
  assign isAttnLn = (userStreamPipe_payload == 6'h04);
  assign isLmHeadLn = (userStreamPipe_payload == 6'h22);
  assign io_lnScale_ready = rmsNorm_io_scale_ready;
  assign outCntOvf = (outCnt == (isAttnLn ? 12'hfff : 12'h7ff));
  assign output_valid = rmsNorm_io_normOut_valid;
  assign output_tdata = rmsNorm_io_normOut_payload;
  assign output_tuser = userStreamPipe_payload;
  assign userStreamPipe_ready = (output_valid && outCntOvf);
  assign io_lnOut_valid = output_regNext_valid;
  assign io_lnOut_tdata = output_regNext_tdata;
  assign io_lnOut_tuser = output_regNext_tuser;
  assign mlpNormOutProbe_valid = ((rmsNorm_io_normOut_valid && (outCnt == 12'h7ff)) && ((! isAttnLn) && (! isLmHeadLn)));
  assign mlpNormOutProbe_payload = rmsNorm_io_normOut_payload;
  assign attnNormOutProbe_valid = ((rmsNorm_io_normOut_valid && (outCnt == 12'h7ff)) && isAttnLn);
  assign attnNormOutProbe_payload = rmsNorm_io_normOut_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      inputVld <= 1'b0;
      inCnt <= 12'h0;
      userStream_rValid <= 1'b0;
      outCnt <= 12'h0;
      output_regNext_valid <= 1'b0;
    end else begin
      inputVld <= inputTagMap_valid;
      if(inputTagMap_valid) begin
        inCnt <= (inCnt + 12'h001);
        if(inCntOvf) begin
          inCnt <= 12'h0;
        end
      end
      if(userStream_ready) begin
        userStream_rValid <= userStream_valid;
      end
      if(rmsNorm_io_normOut_valid) begin
        outCnt <= (outCnt + 12'h001);
        if(outCntOvf) begin
          outCnt <= 12'h0;
        end
      end
      output_regNext_valid <= output_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    inputData <= inputTagMap_tdata;
    if(userStream_ready) begin
      userStream_rData <= userStream_payload;
    end
    output_regNext_tdata <= output_tdata;
    output_regNext_tuser <= output_tuser;
  end


endmodule

module AttnSubMod (
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  output wire          io_ropeOut_valid,
  output wire [15:0]   io_ropeOut_tdata,
  output wire [5:0]    io_ropeOut_tuser,
  output wire          io_softmaxOut_valid,
  output wire          io_softmaxOut_payload_last,
  output wire [15:0]   io_softmaxOut_payload_tdata,
  output wire [5:0]    io_softmaxOut_payload_tuser,
  output wire          io_quantZero_valid,
  output wire [7:0]    io_quantZero_payload,
  output wire          io_quantScale_valid,
  output wire [15:0]   io_quantScale_payload,
  output wire          io_afterQuant_valid,
  output wire          io_afterQuant_payload_last,
  output wire [7:0]    io_afterQuant_payload_fragment,
  input  wire [9:0]    status_token,
  output wire          exp_to_valid,
  output wire [15:0]   exp_to_payload,
  input  wire          exp_from_valid,
  input  wire [15:0]   exp_from_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [15:0]   rope_io_pos;
  wire       [9:0]    softmax_io_seqLen_payload;
  wire                rope_output_tvalid;
  wire       [15:0]   rope_output_tdata;
  wire       [5:0]    rope_output_tuser;
  wire                quant_io_quantZero_valid;
  wire       [7:0]    quant_io_quantZero_payload;
  wire                quant_io_quantScale_valid;
  wire       [15:0]   quant_io_quantScale_payload;
  wire                quant_io_afterQuant_valid;
  wire                quant_io_afterQuant_payload_last;
  wire       [7:0]    quant_io_afterQuant_payload_fragment;
  wire                qk_io_output_valid;
  wire       [15:0]   qk_io_output_tdata;
  wire       [5:0]    qk_io_output_tuser;
  wire                qk_qProbe_valid;
  wire       [15:0]   qk_qProbe_payload;
  wire                softmax_io_output_valid;
  wire                softmax_io_output_payload_last;
  wire       [15:0]   softmax_io_output_payload_tdata;
  wire       [5:0]    softmax_io_output_payload_tuser;
  wire                softmax_io_seqLen_ready;
  wire       [15:0]   t_io_pos;
  reg                 io_dotOut_valid_delay_1;
  reg                 io_dotOut_valid_delay_2;
  reg                 io_dotOut_valid_delay_3;
  reg                 io_dotOut_valid_delay_4;
  reg                 io_dotOut_valid_delay_5;
  reg                 io_dotOut_valid_delay_6;
  reg                 io_dotOut_valid_delay_7;
  reg                 io_dotOut_valid_delay_8;
  reg                 io_dotOut_valid_delay_9;
  reg                 io_dotOut_valid_delay_10;
  reg                 io_dotOut_valid_delay_11;
  reg                 io_dotOut_valid_delay_12;
  reg                 io_dotOut_valid_delay_13;
  reg                 io_dotOut_valid_delay_14;
  reg                 io_dotOut_valid_delay_15;
  reg                 io_dotOut_valid_delay_16;
  reg                 io_dotOut_valid_delay_17;
  reg                 io_dotOut_valid_delay_18;
  reg                 io_dotOut_valid_delay_19;
  reg                 io_dotOut_valid_delay_20;
  reg                 io_dotOut_valid_delay_21;
  reg                 io_dotOut_valid_delay_22;
  reg                 io_dotOut_valid_delay_23;
  reg                 io_dotOut_valid_delay_24;
  reg                 io_dotOut_valid_delay_25;
  reg                 io_dotOut_valid_delay_26;
  reg                 io_dotOut_valid_delay_27;
  reg                 io_dotOut_valid_delay_28;
  reg                 io_dotOut_valid_delay_29;
  reg                 io_dotOut_valid_delay_30;
  reg                 io_dotOut_valid_delay_31;
  reg                 io_dotOut_valid_delay_32;
  reg                 io_dotOut_valid_delay_33;
  reg                 io_dotOut_valid_delay_34;
  reg                 io_dotOut_valid_delay_35;
  reg                 io_dotOut_valid_delay_36;
  reg                 io_dotOut_valid_delay_37;
  reg                 io_dotOut_valid_delay_38;
  reg                 io_dotOut_valid_delay_39;
  reg                 io_dotOut_valid_delay_40;
  reg                 io_dotOut_valid_delay_41;
  reg                 io_dotOut_valid_delay_42;
  reg                 io_dotOut_valid_delay_43;
  reg                 io_dotOut_valid_delay_44;
  reg                 io_dotOut_valid_delay_45;
  reg                 io_dotOut_valid_delay_46;
  reg                 io_dotOut_valid_delay_47;
  reg                 io_dotOut_valid_delay_48;
  reg                 io_dotOut_valid_delay_49;
  reg                 io_dotOut_valid_delay_50;
  reg                 io_dotOut_valid_delay_51;
  reg                 io_dotOut_valid_delay_52;
  reg                 io_dotOut_valid_delay_53;
  reg                 io_dotOut_valid_delay_54;
  reg                 io_dotOut_valid_delay_55;
  reg                 io_dotOut_valid_delay_56;
  reg                 io_dotOut_valid_delay_57;
  reg                 io_dotOut_valid_delay_58;
  reg                 io_dotOut_valid_delay_59;
  reg                 io_dotOut_valid_delay_60;
  reg                 io_dotOut_valid_delay_61;
  reg                 io_dotOut_valid_delay_62;
  reg                 io_dotOut_valid_delay_63;
  reg                 dotOutVldDly;
  reg        [15:0]   io_dotOut_delay_1_tdata;
  reg        [5:0]    io_dotOut_delay_1_tuser;
  reg        [15:0]   io_dotOut_delay_2_tdata;
  reg        [5:0]    io_dotOut_delay_2_tuser;
  reg        [15:0]   io_dotOut_delay_3_tdata;
  reg        [5:0]    io_dotOut_delay_3_tuser;
  reg        [15:0]   io_dotOut_delay_4_tdata;
  reg        [5:0]    io_dotOut_delay_4_tuser;
  reg        [15:0]   io_dotOut_delay_5_tdata;
  reg        [5:0]    io_dotOut_delay_5_tuser;
  reg        [15:0]   io_dotOut_delay_6_tdata;
  reg        [5:0]    io_dotOut_delay_6_tuser;
  reg        [15:0]   io_dotOut_delay_7_tdata;
  reg        [5:0]    io_dotOut_delay_7_tuser;
  reg        [15:0]   io_dotOut_delay_8_tdata;
  reg        [5:0]    io_dotOut_delay_8_tuser;
  reg        [15:0]   io_dotOut_delay_9_tdata;
  reg        [5:0]    io_dotOut_delay_9_tuser;
  reg        [15:0]   io_dotOut_delay_10_tdata;
  reg        [5:0]    io_dotOut_delay_10_tuser;
  reg        [15:0]   io_dotOut_delay_11_tdata;
  reg        [5:0]    io_dotOut_delay_11_tuser;
  reg        [15:0]   io_dotOut_delay_12_tdata;
  reg        [5:0]    io_dotOut_delay_12_tuser;
  reg        [15:0]   io_dotOut_delay_13_tdata;
  reg        [5:0]    io_dotOut_delay_13_tuser;
  reg        [15:0]   io_dotOut_delay_14_tdata;
  reg        [5:0]    io_dotOut_delay_14_tuser;
  reg        [15:0]   io_dotOut_delay_15_tdata;
  reg        [5:0]    io_dotOut_delay_15_tuser;
  reg        [15:0]   io_dotOut_delay_16_tdata;
  reg        [5:0]    io_dotOut_delay_16_tuser;
  reg        [15:0]   io_dotOut_delay_17_tdata;
  reg        [5:0]    io_dotOut_delay_17_tuser;
  reg        [15:0]   io_dotOut_delay_18_tdata;
  reg        [5:0]    io_dotOut_delay_18_tuser;
  reg        [15:0]   io_dotOut_delay_19_tdata;
  reg        [5:0]    io_dotOut_delay_19_tuser;
  reg        [15:0]   io_dotOut_delay_20_tdata;
  reg        [5:0]    io_dotOut_delay_20_tuser;
  reg        [15:0]   io_dotOut_delay_21_tdata;
  reg        [5:0]    io_dotOut_delay_21_tuser;
  reg        [15:0]   io_dotOut_delay_22_tdata;
  reg        [5:0]    io_dotOut_delay_22_tuser;
  reg        [15:0]   io_dotOut_delay_23_tdata;
  reg        [5:0]    io_dotOut_delay_23_tuser;
  reg        [15:0]   io_dotOut_delay_24_tdata;
  reg        [5:0]    io_dotOut_delay_24_tuser;
  reg        [15:0]   io_dotOut_delay_25_tdata;
  reg        [5:0]    io_dotOut_delay_25_tuser;
  reg        [15:0]   io_dotOut_delay_26_tdata;
  reg        [5:0]    io_dotOut_delay_26_tuser;
  reg        [15:0]   io_dotOut_delay_27_tdata;
  reg        [5:0]    io_dotOut_delay_27_tuser;
  reg        [15:0]   io_dotOut_delay_28_tdata;
  reg        [5:0]    io_dotOut_delay_28_tuser;
  reg        [15:0]   io_dotOut_delay_29_tdata;
  reg        [5:0]    io_dotOut_delay_29_tuser;
  reg        [15:0]   io_dotOut_delay_30_tdata;
  reg        [5:0]    io_dotOut_delay_30_tuser;
  reg        [15:0]   io_dotOut_delay_31_tdata;
  reg        [5:0]    io_dotOut_delay_31_tuser;
  reg        [15:0]   io_dotOut_delay_32_tdata;
  reg        [5:0]    io_dotOut_delay_32_tuser;
  reg        [15:0]   io_dotOut_delay_33_tdata;
  reg        [5:0]    io_dotOut_delay_33_tuser;
  reg        [15:0]   io_dotOut_delay_34_tdata;
  reg        [5:0]    io_dotOut_delay_34_tuser;
  reg        [15:0]   io_dotOut_delay_35_tdata;
  reg        [5:0]    io_dotOut_delay_35_tuser;
  reg        [15:0]   io_dotOut_delay_36_tdata;
  reg        [5:0]    io_dotOut_delay_36_tuser;
  reg        [15:0]   io_dotOut_delay_37_tdata;
  reg        [5:0]    io_dotOut_delay_37_tuser;
  reg        [15:0]   io_dotOut_delay_38_tdata;
  reg        [5:0]    io_dotOut_delay_38_tuser;
  reg        [15:0]   io_dotOut_delay_39_tdata;
  reg        [5:0]    io_dotOut_delay_39_tuser;
  reg        [15:0]   io_dotOut_delay_40_tdata;
  reg        [5:0]    io_dotOut_delay_40_tuser;
  reg        [15:0]   io_dotOut_delay_41_tdata;
  reg        [5:0]    io_dotOut_delay_41_tuser;
  reg        [15:0]   io_dotOut_delay_42_tdata;
  reg        [5:0]    io_dotOut_delay_42_tuser;
  reg        [15:0]   io_dotOut_delay_43_tdata;
  reg        [5:0]    io_dotOut_delay_43_tuser;
  reg        [15:0]   io_dotOut_delay_44_tdata;
  reg        [5:0]    io_dotOut_delay_44_tuser;
  reg        [15:0]   io_dotOut_delay_45_tdata;
  reg        [5:0]    io_dotOut_delay_45_tuser;
  reg        [15:0]   io_dotOut_delay_46_tdata;
  reg        [5:0]    io_dotOut_delay_46_tuser;
  reg        [15:0]   io_dotOut_delay_47_tdata;
  reg        [5:0]    io_dotOut_delay_47_tuser;
  reg        [15:0]   io_dotOut_delay_48_tdata;
  reg        [5:0]    io_dotOut_delay_48_tuser;
  reg        [15:0]   io_dotOut_delay_49_tdata;
  reg        [5:0]    io_dotOut_delay_49_tuser;
  reg        [15:0]   io_dotOut_delay_50_tdata;
  reg        [5:0]    io_dotOut_delay_50_tuser;
  reg        [15:0]   io_dotOut_delay_51_tdata;
  reg        [5:0]    io_dotOut_delay_51_tuser;
  reg        [15:0]   io_dotOut_delay_52_tdata;
  reg        [5:0]    io_dotOut_delay_52_tuser;
  reg        [15:0]   io_dotOut_delay_53_tdata;
  reg        [5:0]    io_dotOut_delay_53_tuser;
  reg        [15:0]   io_dotOut_delay_54_tdata;
  reg        [5:0]    io_dotOut_delay_54_tuser;
  reg        [15:0]   io_dotOut_delay_55_tdata;
  reg        [5:0]    io_dotOut_delay_55_tuser;
  reg        [15:0]   io_dotOut_delay_56_tdata;
  reg        [5:0]    io_dotOut_delay_56_tuser;
  reg        [15:0]   io_dotOut_delay_57_tdata;
  reg        [5:0]    io_dotOut_delay_57_tuser;
  reg        [15:0]   io_dotOut_delay_58_tdata;
  reg        [5:0]    io_dotOut_delay_58_tuser;
  reg        [15:0]   io_dotOut_delay_59_tdata;
  reg        [5:0]    io_dotOut_delay_59_tuser;
  reg        [15:0]   io_dotOut_delay_60_tdata;
  reg        [5:0]    io_dotOut_delay_60_tuser;
  reg        [15:0]   io_dotOut_delay_61_tdata;
  reg        [5:0]    io_dotOut_delay_61_tuser;
  reg        [15:0]   io_dotOut_delay_62_tdata;
  reg        [5:0]    io_dotOut_delay_62_tuser;
  reg        [15:0]   io_dotOut_delay_63_tdata;
  reg        [5:0]    io_dotOut_delay_63_tuser;
  reg        [15:0]   dotOutDly_tdata;
  reg        [5:0]    dotOutDly_tuser;
  reg                 dotOutVldDly_delay_1;
  reg                 dotOutVldDly_delay_2;
  reg                 dotOutVldDly_delay_3;
  reg                 dotOutVldDly_delay_4;
  reg                 dotOutVldDly_delay_5;
  reg                 dotOutVldDly_delay_6;
  reg                 dotOutVldDly_delay_7;
  reg                 dotOutVldDly_delay_8;
  reg                 dotOutVldDly_delay_9;
  reg                 dotOutVldDly_delay_10;
  reg                 dotOutVldDly_delay_11;
  reg                 dotOutVldDly_delay_12;
  reg                 dotOutVldDly_delay_13;
  reg                 dotOutVldDly_delay_14;
  reg                 dotOutVldDly_delay_15;
  reg                 dotOutVldDly_delay_16;
  reg                 dotOutVldDly_delay_17;
  reg                 dotOutVldDly_delay_18;
  reg                 dotOutVldDly_delay_19;
  reg                 dotOutVldDly_delay_20;
  reg                 dotOutVldDly_delay_21;
  reg                 dotOutVldDly_delay_22;
  reg                 dotOutVldDly_delay_23;
  reg                 dotOutVldDly_delay_24;
  reg                 dotOutVldDly_delay_25;
  reg                 dotOutVldDly_delay_26;
  reg                 dotOutVldDly_delay_27;
  reg                 dotOutVldDly_delay_28;
  reg                 dotOutVldDly_delay_29;
  reg                 dotOutVldDly_delay_30;
  reg                 dotOutVldDly_delay_31;
  reg                 dotOutVldDly_delay_32;
  reg                 dotOutVldDly_delay_33;
  reg                 dotOutVldDly_delay_34;
  reg                 dotOutVldDly_delay_35;
  reg                 dotOutVldDly_delay_36;
  reg                 dotOutVldDly_delay_37;
  reg                 dotOutVldDly_delay_38;
  reg                 dotOutVldDly_delay_39;
  reg                 dotOutVldDly_delay_40;
  reg                 dotOutVldDly_delay_41;
  reg                 dotOutVldDly_delay_42;
  reg                 dotOutVldDly_delay_43;
  reg                 dotOutVldDly_delay_44;
  reg                 dotOutVldDly_delay_45;
  reg                 dotOutVldDly_delay_46;
  reg                 dotOutVldDly_delay_47;
  reg                 dotOutVldDly_delay_48;
  reg                 dotOutVldDly_delay_49;
  reg                 dotOutVldDly_delay_50;
  reg                 dotOutVldDly_delay_51;
  reg                 dotOutVldDly_delay_52;
  reg                 dotOutVldDly_delay_53;
  reg                 dotOutVldDly_delay_54;
  reg                 dotOutVldDly_delay_55;
  reg                 dotOutVldDly_delay_56;
  reg                 dotOutVldDly_delay_57;
  reg                 dotOutVldDly_delay_58;
  reg                 dotOutVldDly_delay_59;
  reg                 dotOutVldDly_delay_60;
  reg                 dotOutVldDly_delay_61;
  reg                 dotOutVldDly_delay_62;
  reg                 dotOutVldDly_delay_63;
  reg                 dotOutVldDly2;
  reg        [15:0]   dotOutDly_delay_1_tdata;
  reg        [5:0]    dotOutDly_delay_1_tuser;
  reg        [15:0]   dotOutDly_delay_2_tdata;
  reg        [5:0]    dotOutDly_delay_2_tuser;
  reg        [15:0]   dotOutDly_delay_3_tdata;
  reg        [5:0]    dotOutDly_delay_3_tuser;
  reg        [15:0]   dotOutDly_delay_4_tdata;
  reg        [5:0]    dotOutDly_delay_4_tuser;
  reg        [15:0]   dotOutDly_delay_5_tdata;
  reg        [5:0]    dotOutDly_delay_5_tuser;
  reg        [15:0]   dotOutDly_delay_6_tdata;
  reg        [5:0]    dotOutDly_delay_6_tuser;
  reg        [15:0]   dotOutDly_delay_7_tdata;
  reg        [5:0]    dotOutDly_delay_7_tuser;
  reg        [15:0]   dotOutDly_delay_8_tdata;
  reg        [5:0]    dotOutDly_delay_8_tuser;
  reg        [15:0]   dotOutDly_delay_9_tdata;
  reg        [5:0]    dotOutDly_delay_9_tuser;
  reg        [15:0]   dotOutDly_delay_10_tdata;
  reg        [5:0]    dotOutDly_delay_10_tuser;
  reg        [15:0]   dotOutDly_delay_11_tdata;
  reg        [5:0]    dotOutDly_delay_11_tuser;
  reg        [15:0]   dotOutDly_delay_12_tdata;
  reg        [5:0]    dotOutDly_delay_12_tuser;
  reg        [15:0]   dotOutDly_delay_13_tdata;
  reg        [5:0]    dotOutDly_delay_13_tuser;
  reg        [15:0]   dotOutDly_delay_14_tdata;
  reg        [5:0]    dotOutDly_delay_14_tuser;
  reg        [15:0]   dotOutDly_delay_15_tdata;
  reg        [5:0]    dotOutDly_delay_15_tuser;
  reg        [15:0]   dotOutDly_delay_16_tdata;
  reg        [5:0]    dotOutDly_delay_16_tuser;
  reg        [15:0]   dotOutDly_delay_17_tdata;
  reg        [5:0]    dotOutDly_delay_17_tuser;
  reg        [15:0]   dotOutDly_delay_18_tdata;
  reg        [5:0]    dotOutDly_delay_18_tuser;
  reg        [15:0]   dotOutDly_delay_19_tdata;
  reg        [5:0]    dotOutDly_delay_19_tuser;
  reg        [15:0]   dotOutDly_delay_20_tdata;
  reg        [5:0]    dotOutDly_delay_20_tuser;
  reg        [15:0]   dotOutDly_delay_21_tdata;
  reg        [5:0]    dotOutDly_delay_21_tuser;
  reg        [15:0]   dotOutDly_delay_22_tdata;
  reg        [5:0]    dotOutDly_delay_22_tuser;
  reg        [15:0]   dotOutDly_delay_23_tdata;
  reg        [5:0]    dotOutDly_delay_23_tuser;
  reg        [15:0]   dotOutDly_delay_24_tdata;
  reg        [5:0]    dotOutDly_delay_24_tuser;
  reg        [15:0]   dotOutDly_delay_25_tdata;
  reg        [5:0]    dotOutDly_delay_25_tuser;
  reg        [15:0]   dotOutDly_delay_26_tdata;
  reg        [5:0]    dotOutDly_delay_26_tuser;
  reg        [15:0]   dotOutDly_delay_27_tdata;
  reg        [5:0]    dotOutDly_delay_27_tuser;
  reg        [15:0]   dotOutDly_delay_28_tdata;
  reg        [5:0]    dotOutDly_delay_28_tuser;
  reg        [15:0]   dotOutDly_delay_29_tdata;
  reg        [5:0]    dotOutDly_delay_29_tuser;
  reg        [15:0]   dotOutDly_delay_30_tdata;
  reg        [5:0]    dotOutDly_delay_30_tuser;
  reg        [15:0]   dotOutDly_delay_31_tdata;
  reg        [5:0]    dotOutDly_delay_31_tuser;
  reg        [15:0]   dotOutDly_delay_32_tdata;
  reg        [5:0]    dotOutDly_delay_32_tuser;
  reg        [15:0]   dotOutDly_delay_33_tdata;
  reg        [5:0]    dotOutDly_delay_33_tuser;
  reg        [15:0]   dotOutDly_delay_34_tdata;
  reg        [5:0]    dotOutDly_delay_34_tuser;
  reg        [15:0]   dotOutDly_delay_35_tdata;
  reg        [5:0]    dotOutDly_delay_35_tuser;
  reg        [15:0]   dotOutDly_delay_36_tdata;
  reg        [5:0]    dotOutDly_delay_36_tuser;
  reg        [15:0]   dotOutDly_delay_37_tdata;
  reg        [5:0]    dotOutDly_delay_37_tuser;
  reg        [15:0]   dotOutDly_delay_38_tdata;
  reg        [5:0]    dotOutDly_delay_38_tuser;
  reg        [15:0]   dotOutDly_delay_39_tdata;
  reg        [5:0]    dotOutDly_delay_39_tuser;
  reg        [15:0]   dotOutDly_delay_40_tdata;
  reg        [5:0]    dotOutDly_delay_40_tuser;
  reg        [15:0]   dotOutDly_delay_41_tdata;
  reg        [5:0]    dotOutDly_delay_41_tuser;
  reg        [15:0]   dotOutDly_delay_42_tdata;
  reg        [5:0]    dotOutDly_delay_42_tuser;
  reg        [15:0]   dotOutDly_delay_43_tdata;
  reg        [5:0]    dotOutDly_delay_43_tuser;
  reg        [15:0]   dotOutDly_delay_44_tdata;
  reg        [5:0]    dotOutDly_delay_44_tuser;
  reg        [15:0]   dotOutDly_delay_45_tdata;
  reg        [5:0]    dotOutDly_delay_45_tuser;
  reg        [15:0]   dotOutDly_delay_46_tdata;
  reg        [5:0]    dotOutDly_delay_46_tuser;
  reg        [15:0]   dotOutDly_delay_47_tdata;
  reg        [5:0]    dotOutDly_delay_47_tuser;
  reg        [15:0]   dotOutDly_delay_48_tdata;
  reg        [5:0]    dotOutDly_delay_48_tuser;
  reg        [15:0]   dotOutDly_delay_49_tdata;
  reg        [5:0]    dotOutDly_delay_49_tuser;
  reg        [15:0]   dotOutDly_delay_50_tdata;
  reg        [5:0]    dotOutDly_delay_50_tuser;
  reg        [15:0]   dotOutDly_delay_51_tdata;
  reg        [5:0]    dotOutDly_delay_51_tuser;
  reg        [15:0]   dotOutDly_delay_52_tdata;
  reg        [5:0]    dotOutDly_delay_52_tuser;
  reg        [15:0]   dotOutDly_delay_53_tdata;
  reg        [5:0]    dotOutDly_delay_53_tuser;
  reg        [15:0]   dotOutDly_delay_54_tdata;
  reg        [5:0]    dotOutDly_delay_54_tuser;
  reg        [15:0]   dotOutDly_delay_55_tdata;
  reg        [5:0]    dotOutDly_delay_55_tuser;
  reg        [15:0]   dotOutDly_delay_56_tdata;
  reg        [5:0]    dotOutDly_delay_56_tuser;
  reg        [15:0]   dotOutDly_delay_57_tdata;
  reg        [5:0]    dotOutDly_delay_57_tuser;
  reg        [15:0]   dotOutDly_delay_58_tdata;
  reg        [5:0]    dotOutDly_delay_58_tuser;
  reg        [15:0]   dotOutDly_delay_59_tdata;
  reg        [5:0]    dotOutDly_delay_59_tuser;
  reg        [15:0]   dotOutDly_delay_60_tdata;
  reg        [5:0]    dotOutDly_delay_60_tuser;
  reg        [15:0]   dotOutDly_delay_61_tdata;
  reg        [5:0]    dotOutDly_delay_61_tuser;
  reg        [15:0]   dotOutDly_delay_62_tdata;
  reg        [5:0]    dotOutDly_delay_62_tuser;
  reg        [15:0]   dotOutDly_delay_63_tdata;
  reg        [5:0]    dotOutDly_delay_63_tuser;
  reg        [15:0]   dotOutDly2_tdata;
  reg        [5:0]    dotOutDly2_tuser;

  assign t_io_pos = {6'd0, status_token};
  SerialRoPE rope (
    .io_pos           (rope_io_pos[15:0]      ), //i
    .io_input_0_valid (io_dotOut_valid        ), //i
    .io_input_0_tdata (io_dotOut_tdata[15:0]  ), //i
    .io_input_0_tuser (io_dotOut_tuser[5:0]   ), //i
    .output_tvalid    (rope_output_tvalid     ), //o
    .output_tdata     (rope_output_tdata[15:0]), //o
    .output_tuser     (rope_output_tuser[5:0] ), //o
    .clk_1_clk        (clk_1_clk              ), //i
    .clk_1_resetn     (clk_1_resetn           )  //i
  );
  QuantWrapper quant (
    .io_toBeQuant_0_valid           (rope_output_tvalid                       ), //i
    .io_toBeQuant_0_tdata           (rope_output_tdata[15:0]                  ), //i
    .io_toBeQuant_0_tuser           (rope_output_tuser[5:0]                   ), //i
    .io_toBeQuant_1_valid           (dotOutVldDly                             ), //i
    .io_toBeQuant_1_tdata           (dotOutDly_tdata[15:0]                    ), //i
    .io_toBeQuant_1_tuser           (dotOutDly_tuser[5:0]                     ), //i
    .io_quantZero_valid             (quant_io_quantZero_valid                 ), //o
    .io_quantZero_payload           (quant_io_quantZero_payload[7:0]          ), //o
    .io_quantScale_valid            (quant_io_quantScale_valid                ), //o
    .io_quantScale_payload          (quant_io_quantScale_payload[15:0]        ), //o
    .io_afterQuant_valid            (quant_io_afterQuant_valid                ), //o
    .io_afterQuant_payload_last     (quant_io_afterQuant_payload_last         ), //o
    .io_afterQuant_payload_fragment (quant_io_afterQuant_payload_fragment[7:0]), //o
    .clk_1_clk                      (clk_1_clk                                ), //i
    .clk_1_resetn                   (clk_1_resetn                             )  //i
  );
  QKMul qk (
    .io_input_valid  (rope_output_tvalid      ), //i
    .io_input_tdata  (rope_output_tdata[15:0] ), //i
    .io_input_tuser  (rope_output_tuser[5:0]  ), //i
    .io_output_valid (qk_io_output_valid      ), //o
    .io_output_tdata (qk_io_output_tdata[15:0]), //o
    .io_output_tuser (qk_io_output_tuser[5:0] ), //o
    .qProbe_valid    (qk_qProbe_valid         ), //o
    .qProbe_payload  (qk_qProbe_payload[15:0] ), //o
    .clk_1_clk       (clk_1_clk               ), //i
    .clk_1_resetn    (clk_1_resetn            )  //i
  );
  SerialSafeSoftmax softmax (
    .io_input_0_valid        (dotOutVldDly2                        ), //i
    .io_input_0_tdata        (dotOutDly2_tdata[15:0]               ), //i
    .io_input_0_tuser        (dotOutDly2_tuser[5:0]                ), //i
    .io_input_1_valid        (qk_io_output_valid                   ), //i
    .io_input_1_tdata        (qk_io_output_tdata[15:0]             ), //i
    .io_input_1_tuser        (qk_io_output_tuser[5:0]              ), //i
    .io_output_valid         (softmax_io_output_valid              ), //o
    .io_output_payload_last  (softmax_io_output_payload_last       ), //o
    .io_output_payload_tdata (softmax_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (softmax_io_output_payload_tuser[5:0] ), //o
    .io_seqLen_valid         (1'b1                                 ), //i
    .io_seqLen_ready         (softmax_io_seqLen_ready              ), //o
    .io_seqLen_payload       (softmax_io_seqLen_payload[9:0]       ), //i
    .clk_1_clk               (clk_1_clk                            ), //i
    .clk_1_resetn            (clk_1_resetn                         )  //i
  );
  assign io_quantZero_valid = quant_io_quantZero_valid;
  assign io_quantZero_payload = quant_io_quantZero_payload;
  assign io_quantScale_valid = quant_io_quantScale_valid;
  assign io_quantScale_payload = quant_io_quantScale_payload;
  assign io_afterQuant_valid = quant_io_afterQuant_valid;
  assign io_afterQuant_payload_last = quant_io_afterQuant_payload_last;
  assign io_afterQuant_payload_fragment = quant_io_afterQuant_payload_fragment;
  assign softmax_io_seqLen_payload = status_token;
  assign io_softmaxOut_valid = softmax_io_output_valid;
  assign io_softmaxOut_payload_last = softmax_io_output_payload_last;
  assign io_softmaxOut_payload_tdata = softmax_io_output_payload_tdata;
  assign io_softmaxOut_payload_tuser = softmax_io_output_payload_tuser;
  assign rope_io_pos = t_io_pos;
  assign io_ropeOut_valid = rope_output_tvalid;
  assign io_ropeOut_tdata = rope_output_tdata;
  assign io_ropeOut_tuser = rope_output_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      io_dotOut_valid_delay_1 <= 1'b0;
      io_dotOut_valid_delay_2 <= 1'b0;
      io_dotOut_valid_delay_3 <= 1'b0;
      io_dotOut_valid_delay_4 <= 1'b0;
      io_dotOut_valid_delay_5 <= 1'b0;
      io_dotOut_valid_delay_6 <= 1'b0;
      io_dotOut_valid_delay_7 <= 1'b0;
      io_dotOut_valid_delay_8 <= 1'b0;
      io_dotOut_valid_delay_9 <= 1'b0;
      io_dotOut_valid_delay_10 <= 1'b0;
      io_dotOut_valid_delay_11 <= 1'b0;
      io_dotOut_valid_delay_12 <= 1'b0;
      io_dotOut_valid_delay_13 <= 1'b0;
      io_dotOut_valid_delay_14 <= 1'b0;
      io_dotOut_valid_delay_15 <= 1'b0;
      io_dotOut_valid_delay_16 <= 1'b0;
      io_dotOut_valid_delay_17 <= 1'b0;
      io_dotOut_valid_delay_18 <= 1'b0;
      io_dotOut_valid_delay_19 <= 1'b0;
      io_dotOut_valid_delay_20 <= 1'b0;
      io_dotOut_valid_delay_21 <= 1'b0;
      io_dotOut_valid_delay_22 <= 1'b0;
      io_dotOut_valid_delay_23 <= 1'b0;
      io_dotOut_valid_delay_24 <= 1'b0;
      io_dotOut_valid_delay_25 <= 1'b0;
      io_dotOut_valid_delay_26 <= 1'b0;
      io_dotOut_valid_delay_27 <= 1'b0;
      io_dotOut_valid_delay_28 <= 1'b0;
      io_dotOut_valid_delay_29 <= 1'b0;
      io_dotOut_valid_delay_30 <= 1'b0;
      io_dotOut_valid_delay_31 <= 1'b0;
      io_dotOut_valid_delay_32 <= 1'b0;
      io_dotOut_valid_delay_33 <= 1'b0;
      io_dotOut_valid_delay_34 <= 1'b0;
      io_dotOut_valid_delay_35 <= 1'b0;
      io_dotOut_valid_delay_36 <= 1'b0;
      io_dotOut_valid_delay_37 <= 1'b0;
      io_dotOut_valid_delay_38 <= 1'b0;
      io_dotOut_valid_delay_39 <= 1'b0;
      io_dotOut_valid_delay_40 <= 1'b0;
      io_dotOut_valid_delay_41 <= 1'b0;
      io_dotOut_valid_delay_42 <= 1'b0;
      io_dotOut_valid_delay_43 <= 1'b0;
      io_dotOut_valid_delay_44 <= 1'b0;
      io_dotOut_valid_delay_45 <= 1'b0;
      io_dotOut_valid_delay_46 <= 1'b0;
      io_dotOut_valid_delay_47 <= 1'b0;
      io_dotOut_valid_delay_48 <= 1'b0;
      io_dotOut_valid_delay_49 <= 1'b0;
      io_dotOut_valid_delay_50 <= 1'b0;
      io_dotOut_valid_delay_51 <= 1'b0;
      io_dotOut_valid_delay_52 <= 1'b0;
      io_dotOut_valid_delay_53 <= 1'b0;
      io_dotOut_valid_delay_54 <= 1'b0;
      io_dotOut_valid_delay_55 <= 1'b0;
      io_dotOut_valid_delay_56 <= 1'b0;
      io_dotOut_valid_delay_57 <= 1'b0;
      io_dotOut_valid_delay_58 <= 1'b0;
      io_dotOut_valid_delay_59 <= 1'b0;
      io_dotOut_valid_delay_60 <= 1'b0;
      io_dotOut_valid_delay_61 <= 1'b0;
      io_dotOut_valid_delay_62 <= 1'b0;
      io_dotOut_valid_delay_63 <= 1'b0;
      dotOutVldDly <= 1'b0;
      dotOutVldDly_delay_1 <= 1'b0;
      dotOutVldDly_delay_2 <= 1'b0;
      dotOutVldDly_delay_3 <= 1'b0;
      dotOutVldDly_delay_4 <= 1'b0;
      dotOutVldDly_delay_5 <= 1'b0;
      dotOutVldDly_delay_6 <= 1'b0;
      dotOutVldDly_delay_7 <= 1'b0;
      dotOutVldDly_delay_8 <= 1'b0;
      dotOutVldDly_delay_9 <= 1'b0;
      dotOutVldDly_delay_10 <= 1'b0;
      dotOutVldDly_delay_11 <= 1'b0;
      dotOutVldDly_delay_12 <= 1'b0;
      dotOutVldDly_delay_13 <= 1'b0;
      dotOutVldDly_delay_14 <= 1'b0;
      dotOutVldDly_delay_15 <= 1'b0;
      dotOutVldDly_delay_16 <= 1'b0;
      dotOutVldDly_delay_17 <= 1'b0;
      dotOutVldDly_delay_18 <= 1'b0;
      dotOutVldDly_delay_19 <= 1'b0;
      dotOutVldDly_delay_20 <= 1'b0;
      dotOutVldDly_delay_21 <= 1'b0;
      dotOutVldDly_delay_22 <= 1'b0;
      dotOutVldDly_delay_23 <= 1'b0;
      dotOutVldDly_delay_24 <= 1'b0;
      dotOutVldDly_delay_25 <= 1'b0;
      dotOutVldDly_delay_26 <= 1'b0;
      dotOutVldDly_delay_27 <= 1'b0;
      dotOutVldDly_delay_28 <= 1'b0;
      dotOutVldDly_delay_29 <= 1'b0;
      dotOutVldDly_delay_30 <= 1'b0;
      dotOutVldDly_delay_31 <= 1'b0;
      dotOutVldDly_delay_32 <= 1'b0;
      dotOutVldDly_delay_33 <= 1'b0;
      dotOutVldDly_delay_34 <= 1'b0;
      dotOutVldDly_delay_35 <= 1'b0;
      dotOutVldDly_delay_36 <= 1'b0;
      dotOutVldDly_delay_37 <= 1'b0;
      dotOutVldDly_delay_38 <= 1'b0;
      dotOutVldDly_delay_39 <= 1'b0;
      dotOutVldDly_delay_40 <= 1'b0;
      dotOutVldDly_delay_41 <= 1'b0;
      dotOutVldDly_delay_42 <= 1'b0;
      dotOutVldDly_delay_43 <= 1'b0;
      dotOutVldDly_delay_44 <= 1'b0;
      dotOutVldDly_delay_45 <= 1'b0;
      dotOutVldDly_delay_46 <= 1'b0;
      dotOutVldDly_delay_47 <= 1'b0;
      dotOutVldDly_delay_48 <= 1'b0;
      dotOutVldDly_delay_49 <= 1'b0;
      dotOutVldDly_delay_50 <= 1'b0;
      dotOutVldDly_delay_51 <= 1'b0;
      dotOutVldDly_delay_52 <= 1'b0;
      dotOutVldDly_delay_53 <= 1'b0;
      dotOutVldDly_delay_54 <= 1'b0;
      dotOutVldDly_delay_55 <= 1'b0;
      dotOutVldDly_delay_56 <= 1'b0;
      dotOutVldDly_delay_57 <= 1'b0;
      dotOutVldDly_delay_58 <= 1'b0;
      dotOutVldDly_delay_59 <= 1'b0;
      dotOutVldDly_delay_60 <= 1'b0;
      dotOutVldDly_delay_61 <= 1'b0;
      dotOutVldDly_delay_62 <= 1'b0;
      dotOutVldDly_delay_63 <= 1'b0;
      dotOutVldDly2 <= 1'b0;
    end else begin
      io_dotOut_valid_delay_1 <= io_dotOut_valid;
      io_dotOut_valid_delay_2 <= io_dotOut_valid_delay_1;
      io_dotOut_valid_delay_3 <= io_dotOut_valid_delay_2;
      io_dotOut_valid_delay_4 <= io_dotOut_valid_delay_3;
      io_dotOut_valid_delay_5 <= io_dotOut_valid_delay_4;
      io_dotOut_valid_delay_6 <= io_dotOut_valid_delay_5;
      io_dotOut_valid_delay_7 <= io_dotOut_valid_delay_6;
      io_dotOut_valid_delay_8 <= io_dotOut_valid_delay_7;
      io_dotOut_valid_delay_9 <= io_dotOut_valid_delay_8;
      io_dotOut_valid_delay_10 <= io_dotOut_valid_delay_9;
      io_dotOut_valid_delay_11 <= io_dotOut_valid_delay_10;
      io_dotOut_valid_delay_12 <= io_dotOut_valid_delay_11;
      io_dotOut_valid_delay_13 <= io_dotOut_valid_delay_12;
      io_dotOut_valid_delay_14 <= io_dotOut_valid_delay_13;
      io_dotOut_valid_delay_15 <= io_dotOut_valid_delay_14;
      io_dotOut_valid_delay_16 <= io_dotOut_valid_delay_15;
      io_dotOut_valid_delay_17 <= io_dotOut_valid_delay_16;
      io_dotOut_valid_delay_18 <= io_dotOut_valid_delay_17;
      io_dotOut_valid_delay_19 <= io_dotOut_valid_delay_18;
      io_dotOut_valid_delay_20 <= io_dotOut_valid_delay_19;
      io_dotOut_valid_delay_21 <= io_dotOut_valid_delay_20;
      io_dotOut_valid_delay_22 <= io_dotOut_valid_delay_21;
      io_dotOut_valid_delay_23 <= io_dotOut_valid_delay_22;
      io_dotOut_valid_delay_24 <= io_dotOut_valid_delay_23;
      io_dotOut_valid_delay_25 <= io_dotOut_valid_delay_24;
      io_dotOut_valid_delay_26 <= io_dotOut_valid_delay_25;
      io_dotOut_valid_delay_27 <= io_dotOut_valid_delay_26;
      io_dotOut_valid_delay_28 <= io_dotOut_valid_delay_27;
      io_dotOut_valid_delay_29 <= io_dotOut_valid_delay_28;
      io_dotOut_valid_delay_30 <= io_dotOut_valid_delay_29;
      io_dotOut_valid_delay_31 <= io_dotOut_valid_delay_30;
      io_dotOut_valid_delay_32 <= io_dotOut_valid_delay_31;
      io_dotOut_valid_delay_33 <= io_dotOut_valid_delay_32;
      io_dotOut_valid_delay_34 <= io_dotOut_valid_delay_33;
      io_dotOut_valid_delay_35 <= io_dotOut_valid_delay_34;
      io_dotOut_valid_delay_36 <= io_dotOut_valid_delay_35;
      io_dotOut_valid_delay_37 <= io_dotOut_valid_delay_36;
      io_dotOut_valid_delay_38 <= io_dotOut_valid_delay_37;
      io_dotOut_valid_delay_39 <= io_dotOut_valid_delay_38;
      io_dotOut_valid_delay_40 <= io_dotOut_valid_delay_39;
      io_dotOut_valid_delay_41 <= io_dotOut_valid_delay_40;
      io_dotOut_valid_delay_42 <= io_dotOut_valid_delay_41;
      io_dotOut_valid_delay_43 <= io_dotOut_valid_delay_42;
      io_dotOut_valid_delay_44 <= io_dotOut_valid_delay_43;
      io_dotOut_valid_delay_45 <= io_dotOut_valid_delay_44;
      io_dotOut_valid_delay_46 <= io_dotOut_valid_delay_45;
      io_dotOut_valid_delay_47 <= io_dotOut_valid_delay_46;
      io_dotOut_valid_delay_48 <= io_dotOut_valid_delay_47;
      io_dotOut_valid_delay_49 <= io_dotOut_valid_delay_48;
      io_dotOut_valid_delay_50 <= io_dotOut_valid_delay_49;
      io_dotOut_valid_delay_51 <= io_dotOut_valid_delay_50;
      io_dotOut_valid_delay_52 <= io_dotOut_valid_delay_51;
      io_dotOut_valid_delay_53 <= io_dotOut_valid_delay_52;
      io_dotOut_valid_delay_54 <= io_dotOut_valid_delay_53;
      io_dotOut_valid_delay_55 <= io_dotOut_valid_delay_54;
      io_dotOut_valid_delay_56 <= io_dotOut_valid_delay_55;
      io_dotOut_valid_delay_57 <= io_dotOut_valid_delay_56;
      io_dotOut_valid_delay_58 <= io_dotOut_valid_delay_57;
      io_dotOut_valid_delay_59 <= io_dotOut_valid_delay_58;
      io_dotOut_valid_delay_60 <= io_dotOut_valid_delay_59;
      io_dotOut_valid_delay_61 <= io_dotOut_valid_delay_60;
      io_dotOut_valid_delay_62 <= io_dotOut_valid_delay_61;
      io_dotOut_valid_delay_63 <= io_dotOut_valid_delay_62;
      dotOutVldDly <= io_dotOut_valid_delay_63;
      dotOutVldDly_delay_1 <= dotOutVldDly;
      dotOutVldDly_delay_2 <= dotOutVldDly_delay_1;
      dotOutVldDly_delay_3 <= dotOutVldDly_delay_2;
      dotOutVldDly_delay_4 <= dotOutVldDly_delay_3;
      dotOutVldDly_delay_5 <= dotOutVldDly_delay_4;
      dotOutVldDly_delay_6 <= dotOutVldDly_delay_5;
      dotOutVldDly_delay_7 <= dotOutVldDly_delay_6;
      dotOutVldDly_delay_8 <= dotOutVldDly_delay_7;
      dotOutVldDly_delay_9 <= dotOutVldDly_delay_8;
      dotOutVldDly_delay_10 <= dotOutVldDly_delay_9;
      dotOutVldDly_delay_11 <= dotOutVldDly_delay_10;
      dotOutVldDly_delay_12 <= dotOutVldDly_delay_11;
      dotOutVldDly_delay_13 <= dotOutVldDly_delay_12;
      dotOutVldDly_delay_14 <= dotOutVldDly_delay_13;
      dotOutVldDly_delay_15 <= dotOutVldDly_delay_14;
      dotOutVldDly_delay_16 <= dotOutVldDly_delay_15;
      dotOutVldDly_delay_17 <= dotOutVldDly_delay_16;
      dotOutVldDly_delay_18 <= dotOutVldDly_delay_17;
      dotOutVldDly_delay_19 <= dotOutVldDly_delay_18;
      dotOutVldDly_delay_20 <= dotOutVldDly_delay_19;
      dotOutVldDly_delay_21 <= dotOutVldDly_delay_20;
      dotOutVldDly_delay_22 <= dotOutVldDly_delay_21;
      dotOutVldDly_delay_23 <= dotOutVldDly_delay_22;
      dotOutVldDly_delay_24 <= dotOutVldDly_delay_23;
      dotOutVldDly_delay_25 <= dotOutVldDly_delay_24;
      dotOutVldDly_delay_26 <= dotOutVldDly_delay_25;
      dotOutVldDly_delay_27 <= dotOutVldDly_delay_26;
      dotOutVldDly_delay_28 <= dotOutVldDly_delay_27;
      dotOutVldDly_delay_29 <= dotOutVldDly_delay_28;
      dotOutVldDly_delay_30 <= dotOutVldDly_delay_29;
      dotOutVldDly_delay_31 <= dotOutVldDly_delay_30;
      dotOutVldDly_delay_32 <= dotOutVldDly_delay_31;
      dotOutVldDly_delay_33 <= dotOutVldDly_delay_32;
      dotOutVldDly_delay_34 <= dotOutVldDly_delay_33;
      dotOutVldDly_delay_35 <= dotOutVldDly_delay_34;
      dotOutVldDly_delay_36 <= dotOutVldDly_delay_35;
      dotOutVldDly_delay_37 <= dotOutVldDly_delay_36;
      dotOutVldDly_delay_38 <= dotOutVldDly_delay_37;
      dotOutVldDly_delay_39 <= dotOutVldDly_delay_38;
      dotOutVldDly_delay_40 <= dotOutVldDly_delay_39;
      dotOutVldDly_delay_41 <= dotOutVldDly_delay_40;
      dotOutVldDly_delay_42 <= dotOutVldDly_delay_41;
      dotOutVldDly_delay_43 <= dotOutVldDly_delay_42;
      dotOutVldDly_delay_44 <= dotOutVldDly_delay_43;
      dotOutVldDly_delay_45 <= dotOutVldDly_delay_44;
      dotOutVldDly_delay_46 <= dotOutVldDly_delay_45;
      dotOutVldDly_delay_47 <= dotOutVldDly_delay_46;
      dotOutVldDly_delay_48 <= dotOutVldDly_delay_47;
      dotOutVldDly_delay_49 <= dotOutVldDly_delay_48;
      dotOutVldDly_delay_50 <= dotOutVldDly_delay_49;
      dotOutVldDly_delay_51 <= dotOutVldDly_delay_50;
      dotOutVldDly_delay_52 <= dotOutVldDly_delay_51;
      dotOutVldDly_delay_53 <= dotOutVldDly_delay_52;
      dotOutVldDly_delay_54 <= dotOutVldDly_delay_53;
      dotOutVldDly_delay_55 <= dotOutVldDly_delay_54;
      dotOutVldDly_delay_56 <= dotOutVldDly_delay_55;
      dotOutVldDly_delay_57 <= dotOutVldDly_delay_56;
      dotOutVldDly_delay_58 <= dotOutVldDly_delay_57;
      dotOutVldDly_delay_59 <= dotOutVldDly_delay_58;
      dotOutVldDly_delay_60 <= dotOutVldDly_delay_59;
      dotOutVldDly_delay_61 <= dotOutVldDly_delay_60;
      dotOutVldDly_delay_62 <= dotOutVldDly_delay_61;
      dotOutVldDly_delay_63 <= dotOutVldDly_delay_62;
      dotOutVldDly2 <= dotOutVldDly_delay_63;
    end
  end

  always @(posedge clk_1_clk) begin
    io_dotOut_delay_1_tdata <= io_dotOut_tdata;
    io_dotOut_delay_1_tuser <= io_dotOut_tuser;
    io_dotOut_delay_2_tdata <= io_dotOut_delay_1_tdata;
    io_dotOut_delay_2_tuser <= io_dotOut_delay_1_tuser;
    io_dotOut_delay_3_tdata <= io_dotOut_delay_2_tdata;
    io_dotOut_delay_3_tuser <= io_dotOut_delay_2_tuser;
    io_dotOut_delay_4_tdata <= io_dotOut_delay_3_tdata;
    io_dotOut_delay_4_tuser <= io_dotOut_delay_3_tuser;
    io_dotOut_delay_5_tdata <= io_dotOut_delay_4_tdata;
    io_dotOut_delay_5_tuser <= io_dotOut_delay_4_tuser;
    io_dotOut_delay_6_tdata <= io_dotOut_delay_5_tdata;
    io_dotOut_delay_6_tuser <= io_dotOut_delay_5_tuser;
    io_dotOut_delay_7_tdata <= io_dotOut_delay_6_tdata;
    io_dotOut_delay_7_tuser <= io_dotOut_delay_6_tuser;
    io_dotOut_delay_8_tdata <= io_dotOut_delay_7_tdata;
    io_dotOut_delay_8_tuser <= io_dotOut_delay_7_tuser;
    io_dotOut_delay_9_tdata <= io_dotOut_delay_8_tdata;
    io_dotOut_delay_9_tuser <= io_dotOut_delay_8_tuser;
    io_dotOut_delay_10_tdata <= io_dotOut_delay_9_tdata;
    io_dotOut_delay_10_tuser <= io_dotOut_delay_9_tuser;
    io_dotOut_delay_11_tdata <= io_dotOut_delay_10_tdata;
    io_dotOut_delay_11_tuser <= io_dotOut_delay_10_tuser;
    io_dotOut_delay_12_tdata <= io_dotOut_delay_11_tdata;
    io_dotOut_delay_12_tuser <= io_dotOut_delay_11_tuser;
    io_dotOut_delay_13_tdata <= io_dotOut_delay_12_tdata;
    io_dotOut_delay_13_tuser <= io_dotOut_delay_12_tuser;
    io_dotOut_delay_14_tdata <= io_dotOut_delay_13_tdata;
    io_dotOut_delay_14_tuser <= io_dotOut_delay_13_tuser;
    io_dotOut_delay_15_tdata <= io_dotOut_delay_14_tdata;
    io_dotOut_delay_15_tuser <= io_dotOut_delay_14_tuser;
    io_dotOut_delay_16_tdata <= io_dotOut_delay_15_tdata;
    io_dotOut_delay_16_tuser <= io_dotOut_delay_15_tuser;
    io_dotOut_delay_17_tdata <= io_dotOut_delay_16_tdata;
    io_dotOut_delay_17_tuser <= io_dotOut_delay_16_tuser;
    io_dotOut_delay_18_tdata <= io_dotOut_delay_17_tdata;
    io_dotOut_delay_18_tuser <= io_dotOut_delay_17_tuser;
    io_dotOut_delay_19_tdata <= io_dotOut_delay_18_tdata;
    io_dotOut_delay_19_tuser <= io_dotOut_delay_18_tuser;
    io_dotOut_delay_20_tdata <= io_dotOut_delay_19_tdata;
    io_dotOut_delay_20_tuser <= io_dotOut_delay_19_tuser;
    io_dotOut_delay_21_tdata <= io_dotOut_delay_20_tdata;
    io_dotOut_delay_21_tuser <= io_dotOut_delay_20_tuser;
    io_dotOut_delay_22_tdata <= io_dotOut_delay_21_tdata;
    io_dotOut_delay_22_tuser <= io_dotOut_delay_21_tuser;
    io_dotOut_delay_23_tdata <= io_dotOut_delay_22_tdata;
    io_dotOut_delay_23_tuser <= io_dotOut_delay_22_tuser;
    io_dotOut_delay_24_tdata <= io_dotOut_delay_23_tdata;
    io_dotOut_delay_24_tuser <= io_dotOut_delay_23_tuser;
    io_dotOut_delay_25_tdata <= io_dotOut_delay_24_tdata;
    io_dotOut_delay_25_tuser <= io_dotOut_delay_24_tuser;
    io_dotOut_delay_26_tdata <= io_dotOut_delay_25_tdata;
    io_dotOut_delay_26_tuser <= io_dotOut_delay_25_tuser;
    io_dotOut_delay_27_tdata <= io_dotOut_delay_26_tdata;
    io_dotOut_delay_27_tuser <= io_dotOut_delay_26_tuser;
    io_dotOut_delay_28_tdata <= io_dotOut_delay_27_tdata;
    io_dotOut_delay_28_tuser <= io_dotOut_delay_27_tuser;
    io_dotOut_delay_29_tdata <= io_dotOut_delay_28_tdata;
    io_dotOut_delay_29_tuser <= io_dotOut_delay_28_tuser;
    io_dotOut_delay_30_tdata <= io_dotOut_delay_29_tdata;
    io_dotOut_delay_30_tuser <= io_dotOut_delay_29_tuser;
    io_dotOut_delay_31_tdata <= io_dotOut_delay_30_tdata;
    io_dotOut_delay_31_tuser <= io_dotOut_delay_30_tuser;
    io_dotOut_delay_32_tdata <= io_dotOut_delay_31_tdata;
    io_dotOut_delay_32_tuser <= io_dotOut_delay_31_tuser;
    io_dotOut_delay_33_tdata <= io_dotOut_delay_32_tdata;
    io_dotOut_delay_33_tuser <= io_dotOut_delay_32_tuser;
    io_dotOut_delay_34_tdata <= io_dotOut_delay_33_tdata;
    io_dotOut_delay_34_tuser <= io_dotOut_delay_33_tuser;
    io_dotOut_delay_35_tdata <= io_dotOut_delay_34_tdata;
    io_dotOut_delay_35_tuser <= io_dotOut_delay_34_tuser;
    io_dotOut_delay_36_tdata <= io_dotOut_delay_35_tdata;
    io_dotOut_delay_36_tuser <= io_dotOut_delay_35_tuser;
    io_dotOut_delay_37_tdata <= io_dotOut_delay_36_tdata;
    io_dotOut_delay_37_tuser <= io_dotOut_delay_36_tuser;
    io_dotOut_delay_38_tdata <= io_dotOut_delay_37_tdata;
    io_dotOut_delay_38_tuser <= io_dotOut_delay_37_tuser;
    io_dotOut_delay_39_tdata <= io_dotOut_delay_38_tdata;
    io_dotOut_delay_39_tuser <= io_dotOut_delay_38_tuser;
    io_dotOut_delay_40_tdata <= io_dotOut_delay_39_tdata;
    io_dotOut_delay_40_tuser <= io_dotOut_delay_39_tuser;
    io_dotOut_delay_41_tdata <= io_dotOut_delay_40_tdata;
    io_dotOut_delay_41_tuser <= io_dotOut_delay_40_tuser;
    io_dotOut_delay_42_tdata <= io_dotOut_delay_41_tdata;
    io_dotOut_delay_42_tuser <= io_dotOut_delay_41_tuser;
    io_dotOut_delay_43_tdata <= io_dotOut_delay_42_tdata;
    io_dotOut_delay_43_tuser <= io_dotOut_delay_42_tuser;
    io_dotOut_delay_44_tdata <= io_dotOut_delay_43_tdata;
    io_dotOut_delay_44_tuser <= io_dotOut_delay_43_tuser;
    io_dotOut_delay_45_tdata <= io_dotOut_delay_44_tdata;
    io_dotOut_delay_45_tuser <= io_dotOut_delay_44_tuser;
    io_dotOut_delay_46_tdata <= io_dotOut_delay_45_tdata;
    io_dotOut_delay_46_tuser <= io_dotOut_delay_45_tuser;
    io_dotOut_delay_47_tdata <= io_dotOut_delay_46_tdata;
    io_dotOut_delay_47_tuser <= io_dotOut_delay_46_tuser;
    io_dotOut_delay_48_tdata <= io_dotOut_delay_47_tdata;
    io_dotOut_delay_48_tuser <= io_dotOut_delay_47_tuser;
    io_dotOut_delay_49_tdata <= io_dotOut_delay_48_tdata;
    io_dotOut_delay_49_tuser <= io_dotOut_delay_48_tuser;
    io_dotOut_delay_50_tdata <= io_dotOut_delay_49_tdata;
    io_dotOut_delay_50_tuser <= io_dotOut_delay_49_tuser;
    io_dotOut_delay_51_tdata <= io_dotOut_delay_50_tdata;
    io_dotOut_delay_51_tuser <= io_dotOut_delay_50_tuser;
    io_dotOut_delay_52_tdata <= io_dotOut_delay_51_tdata;
    io_dotOut_delay_52_tuser <= io_dotOut_delay_51_tuser;
    io_dotOut_delay_53_tdata <= io_dotOut_delay_52_tdata;
    io_dotOut_delay_53_tuser <= io_dotOut_delay_52_tuser;
    io_dotOut_delay_54_tdata <= io_dotOut_delay_53_tdata;
    io_dotOut_delay_54_tuser <= io_dotOut_delay_53_tuser;
    io_dotOut_delay_55_tdata <= io_dotOut_delay_54_tdata;
    io_dotOut_delay_55_tuser <= io_dotOut_delay_54_tuser;
    io_dotOut_delay_56_tdata <= io_dotOut_delay_55_tdata;
    io_dotOut_delay_56_tuser <= io_dotOut_delay_55_tuser;
    io_dotOut_delay_57_tdata <= io_dotOut_delay_56_tdata;
    io_dotOut_delay_57_tuser <= io_dotOut_delay_56_tuser;
    io_dotOut_delay_58_tdata <= io_dotOut_delay_57_tdata;
    io_dotOut_delay_58_tuser <= io_dotOut_delay_57_tuser;
    io_dotOut_delay_59_tdata <= io_dotOut_delay_58_tdata;
    io_dotOut_delay_59_tuser <= io_dotOut_delay_58_tuser;
    io_dotOut_delay_60_tdata <= io_dotOut_delay_59_tdata;
    io_dotOut_delay_60_tuser <= io_dotOut_delay_59_tuser;
    io_dotOut_delay_61_tdata <= io_dotOut_delay_60_tdata;
    io_dotOut_delay_61_tuser <= io_dotOut_delay_60_tuser;
    io_dotOut_delay_62_tdata <= io_dotOut_delay_61_tdata;
    io_dotOut_delay_62_tuser <= io_dotOut_delay_61_tuser;
    io_dotOut_delay_63_tdata <= io_dotOut_delay_62_tdata;
    io_dotOut_delay_63_tuser <= io_dotOut_delay_62_tuser;
    dotOutDly_tdata <= io_dotOut_delay_63_tdata;
    dotOutDly_tuser <= io_dotOut_delay_63_tuser;
    dotOutDly_delay_1_tdata <= dotOutDly_tdata;
    dotOutDly_delay_1_tuser <= dotOutDly_tuser;
    dotOutDly_delay_2_tdata <= dotOutDly_delay_1_tdata;
    dotOutDly_delay_2_tuser <= dotOutDly_delay_1_tuser;
    dotOutDly_delay_3_tdata <= dotOutDly_delay_2_tdata;
    dotOutDly_delay_3_tuser <= dotOutDly_delay_2_tuser;
    dotOutDly_delay_4_tdata <= dotOutDly_delay_3_tdata;
    dotOutDly_delay_4_tuser <= dotOutDly_delay_3_tuser;
    dotOutDly_delay_5_tdata <= dotOutDly_delay_4_tdata;
    dotOutDly_delay_5_tuser <= dotOutDly_delay_4_tuser;
    dotOutDly_delay_6_tdata <= dotOutDly_delay_5_tdata;
    dotOutDly_delay_6_tuser <= dotOutDly_delay_5_tuser;
    dotOutDly_delay_7_tdata <= dotOutDly_delay_6_tdata;
    dotOutDly_delay_7_tuser <= dotOutDly_delay_6_tuser;
    dotOutDly_delay_8_tdata <= dotOutDly_delay_7_tdata;
    dotOutDly_delay_8_tuser <= dotOutDly_delay_7_tuser;
    dotOutDly_delay_9_tdata <= dotOutDly_delay_8_tdata;
    dotOutDly_delay_9_tuser <= dotOutDly_delay_8_tuser;
    dotOutDly_delay_10_tdata <= dotOutDly_delay_9_tdata;
    dotOutDly_delay_10_tuser <= dotOutDly_delay_9_tuser;
    dotOutDly_delay_11_tdata <= dotOutDly_delay_10_tdata;
    dotOutDly_delay_11_tuser <= dotOutDly_delay_10_tuser;
    dotOutDly_delay_12_tdata <= dotOutDly_delay_11_tdata;
    dotOutDly_delay_12_tuser <= dotOutDly_delay_11_tuser;
    dotOutDly_delay_13_tdata <= dotOutDly_delay_12_tdata;
    dotOutDly_delay_13_tuser <= dotOutDly_delay_12_tuser;
    dotOutDly_delay_14_tdata <= dotOutDly_delay_13_tdata;
    dotOutDly_delay_14_tuser <= dotOutDly_delay_13_tuser;
    dotOutDly_delay_15_tdata <= dotOutDly_delay_14_tdata;
    dotOutDly_delay_15_tuser <= dotOutDly_delay_14_tuser;
    dotOutDly_delay_16_tdata <= dotOutDly_delay_15_tdata;
    dotOutDly_delay_16_tuser <= dotOutDly_delay_15_tuser;
    dotOutDly_delay_17_tdata <= dotOutDly_delay_16_tdata;
    dotOutDly_delay_17_tuser <= dotOutDly_delay_16_tuser;
    dotOutDly_delay_18_tdata <= dotOutDly_delay_17_tdata;
    dotOutDly_delay_18_tuser <= dotOutDly_delay_17_tuser;
    dotOutDly_delay_19_tdata <= dotOutDly_delay_18_tdata;
    dotOutDly_delay_19_tuser <= dotOutDly_delay_18_tuser;
    dotOutDly_delay_20_tdata <= dotOutDly_delay_19_tdata;
    dotOutDly_delay_20_tuser <= dotOutDly_delay_19_tuser;
    dotOutDly_delay_21_tdata <= dotOutDly_delay_20_tdata;
    dotOutDly_delay_21_tuser <= dotOutDly_delay_20_tuser;
    dotOutDly_delay_22_tdata <= dotOutDly_delay_21_tdata;
    dotOutDly_delay_22_tuser <= dotOutDly_delay_21_tuser;
    dotOutDly_delay_23_tdata <= dotOutDly_delay_22_tdata;
    dotOutDly_delay_23_tuser <= dotOutDly_delay_22_tuser;
    dotOutDly_delay_24_tdata <= dotOutDly_delay_23_tdata;
    dotOutDly_delay_24_tuser <= dotOutDly_delay_23_tuser;
    dotOutDly_delay_25_tdata <= dotOutDly_delay_24_tdata;
    dotOutDly_delay_25_tuser <= dotOutDly_delay_24_tuser;
    dotOutDly_delay_26_tdata <= dotOutDly_delay_25_tdata;
    dotOutDly_delay_26_tuser <= dotOutDly_delay_25_tuser;
    dotOutDly_delay_27_tdata <= dotOutDly_delay_26_tdata;
    dotOutDly_delay_27_tuser <= dotOutDly_delay_26_tuser;
    dotOutDly_delay_28_tdata <= dotOutDly_delay_27_tdata;
    dotOutDly_delay_28_tuser <= dotOutDly_delay_27_tuser;
    dotOutDly_delay_29_tdata <= dotOutDly_delay_28_tdata;
    dotOutDly_delay_29_tuser <= dotOutDly_delay_28_tuser;
    dotOutDly_delay_30_tdata <= dotOutDly_delay_29_tdata;
    dotOutDly_delay_30_tuser <= dotOutDly_delay_29_tuser;
    dotOutDly_delay_31_tdata <= dotOutDly_delay_30_tdata;
    dotOutDly_delay_31_tuser <= dotOutDly_delay_30_tuser;
    dotOutDly_delay_32_tdata <= dotOutDly_delay_31_tdata;
    dotOutDly_delay_32_tuser <= dotOutDly_delay_31_tuser;
    dotOutDly_delay_33_tdata <= dotOutDly_delay_32_tdata;
    dotOutDly_delay_33_tuser <= dotOutDly_delay_32_tuser;
    dotOutDly_delay_34_tdata <= dotOutDly_delay_33_tdata;
    dotOutDly_delay_34_tuser <= dotOutDly_delay_33_tuser;
    dotOutDly_delay_35_tdata <= dotOutDly_delay_34_tdata;
    dotOutDly_delay_35_tuser <= dotOutDly_delay_34_tuser;
    dotOutDly_delay_36_tdata <= dotOutDly_delay_35_tdata;
    dotOutDly_delay_36_tuser <= dotOutDly_delay_35_tuser;
    dotOutDly_delay_37_tdata <= dotOutDly_delay_36_tdata;
    dotOutDly_delay_37_tuser <= dotOutDly_delay_36_tuser;
    dotOutDly_delay_38_tdata <= dotOutDly_delay_37_tdata;
    dotOutDly_delay_38_tuser <= dotOutDly_delay_37_tuser;
    dotOutDly_delay_39_tdata <= dotOutDly_delay_38_tdata;
    dotOutDly_delay_39_tuser <= dotOutDly_delay_38_tuser;
    dotOutDly_delay_40_tdata <= dotOutDly_delay_39_tdata;
    dotOutDly_delay_40_tuser <= dotOutDly_delay_39_tuser;
    dotOutDly_delay_41_tdata <= dotOutDly_delay_40_tdata;
    dotOutDly_delay_41_tuser <= dotOutDly_delay_40_tuser;
    dotOutDly_delay_42_tdata <= dotOutDly_delay_41_tdata;
    dotOutDly_delay_42_tuser <= dotOutDly_delay_41_tuser;
    dotOutDly_delay_43_tdata <= dotOutDly_delay_42_tdata;
    dotOutDly_delay_43_tuser <= dotOutDly_delay_42_tuser;
    dotOutDly_delay_44_tdata <= dotOutDly_delay_43_tdata;
    dotOutDly_delay_44_tuser <= dotOutDly_delay_43_tuser;
    dotOutDly_delay_45_tdata <= dotOutDly_delay_44_tdata;
    dotOutDly_delay_45_tuser <= dotOutDly_delay_44_tuser;
    dotOutDly_delay_46_tdata <= dotOutDly_delay_45_tdata;
    dotOutDly_delay_46_tuser <= dotOutDly_delay_45_tuser;
    dotOutDly_delay_47_tdata <= dotOutDly_delay_46_tdata;
    dotOutDly_delay_47_tuser <= dotOutDly_delay_46_tuser;
    dotOutDly_delay_48_tdata <= dotOutDly_delay_47_tdata;
    dotOutDly_delay_48_tuser <= dotOutDly_delay_47_tuser;
    dotOutDly_delay_49_tdata <= dotOutDly_delay_48_tdata;
    dotOutDly_delay_49_tuser <= dotOutDly_delay_48_tuser;
    dotOutDly_delay_50_tdata <= dotOutDly_delay_49_tdata;
    dotOutDly_delay_50_tuser <= dotOutDly_delay_49_tuser;
    dotOutDly_delay_51_tdata <= dotOutDly_delay_50_tdata;
    dotOutDly_delay_51_tuser <= dotOutDly_delay_50_tuser;
    dotOutDly_delay_52_tdata <= dotOutDly_delay_51_tdata;
    dotOutDly_delay_52_tuser <= dotOutDly_delay_51_tuser;
    dotOutDly_delay_53_tdata <= dotOutDly_delay_52_tdata;
    dotOutDly_delay_53_tuser <= dotOutDly_delay_52_tuser;
    dotOutDly_delay_54_tdata <= dotOutDly_delay_53_tdata;
    dotOutDly_delay_54_tuser <= dotOutDly_delay_53_tuser;
    dotOutDly_delay_55_tdata <= dotOutDly_delay_54_tdata;
    dotOutDly_delay_55_tuser <= dotOutDly_delay_54_tuser;
    dotOutDly_delay_56_tdata <= dotOutDly_delay_55_tdata;
    dotOutDly_delay_56_tuser <= dotOutDly_delay_55_tuser;
    dotOutDly_delay_57_tdata <= dotOutDly_delay_56_tdata;
    dotOutDly_delay_57_tuser <= dotOutDly_delay_56_tuser;
    dotOutDly_delay_58_tdata <= dotOutDly_delay_57_tdata;
    dotOutDly_delay_58_tuser <= dotOutDly_delay_57_tuser;
    dotOutDly_delay_59_tdata <= dotOutDly_delay_58_tdata;
    dotOutDly_delay_59_tuser <= dotOutDly_delay_58_tuser;
    dotOutDly_delay_60_tdata <= dotOutDly_delay_59_tdata;
    dotOutDly_delay_60_tuser <= dotOutDly_delay_59_tuser;
    dotOutDly_delay_61_tdata <= dotOutDly_delay_60_tdata;
    dotOutDly_delay_61_tuser <= dotOutDly_delay_60_tuser;
    dotOutDly_delay_62_tdata <= dotOutDly_delay_61_tdata;
    dotOutDly_delay_62_tuser <= dotOutDly_delay_61_tuser;
    dotOutDly_delay_63_tdata <= dotOutDly_delay_62_tdata;
    dotOutDly_delay_63_tuser <= dotOutDly_delay_62_tuser;
    dotOutDly2_tdata <= dotOutDly_delay_63_tdata;
    dotOutDly2_tuser <= dotOutDly_delay_63_tuser;
  end


endmodule

module AxiBusDistributor (
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  input  wire [511:0]  io_bus_payload_data,
  input  wire [63:0]   io_bus_payload_keep,
  input  wire          io_bus_payload_last,
  input  wire [5:0]    io_bus_payload_dest,
  input  wire [9:0]    io_token,
  input  wire [5:0]    io_preCfgTag,
  input  wire [5:0]    io_postCfgTag,
  input  wire          io_enPredictor,
  input  wire          io_kSzOut_valid,
  output wire          io_kSzOut_ready,
  input  wire [31:0]   io_kSzOut_payload,
  input  wire          io_vSzOut_valid,
  output wire          io_vSzOut_ready,
  input  wire [31:0]   io_vSzOut_payload,
  output wire          int_bus_valid,
  input  wire          int_bus_ready,
  output wire          int_bus_payload_last,
  output wire [511:0]  int_bus_payload_tdata,
  output wire [5:0]    int_bus_payload_tuser,
  output wire          int_lnScale_valid,
  input  wire          int_lnScale_ready,
  output wire [15:0]   int_lnScale_payload,
  output wire          int_zeroInt4_valid,
  input  wire          int_zeroInt4_ready,
  output wire [7:0]    int_zeroInt4_payload,
  output wire          int_zeroInt8_valid,
  input  wire          int_zeroInt8_ready,
  output wire [7:0]    int_zeroInt8_payload,
  output wire          int_preScale_valid,
  input  wire          int_preScale_ready,
  output wire [15:0]   int_preScale_payload,
  output wire          int_postScale_valid,
  input  wire          int_postScale_ready,
  output wire [31:0]   int_postScale_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [5:0]    busLinkFifo_io_push_payload_fragment;
  wire       [9:0]    tagFifo_io_push_payload;
  wire       [1:0]    miscOutDeMux_io_select;
  wire       [127:0]  ln_buf_io_push_payload;
  wire                ln_buf_io_pop_ready;
  wire       [0:0]    dense_deMux_io_select;
  wire                dense_scaleFifo_io_pop_ready;
  wire       [5:0]    sparse_gen_io_tag;
  wire                sparse_preScaleFifo_io_push_valid;
  wire       [15:0]   sparse_preScaleFifo_io_push_payload;
  wire                sparse_postScaleFifo_io_push_valid;
  wire       [15:0]   sparse_postScaleFifo_io_push_payload;
  wire       [3:0]    sparse_zeroFifo_io_push_payload;
  wire       [0:0]    kv_extPackDeMux_io_select;
  wire       [0:0]    kv_kMux_io_select;
  wire       [0:0]    kv_vMux_io_select;
  wire       [0:0]    kv_vScaleMux_io_select;
  wire       [0:0]    zeroInt4Mux_io_select;
  reg        [1:0]    zeroInt8Mux_io_select;
  wire                busDeMux_io_input_ready;
  wire                busDeMux_io_outputs_0_valid;
  wire                busDeMux_io_outputs_1_valid;
  wire                busDeMux_io_outputs_2_valid;
  wire                busDeMux_io_outputs_3_valid;
  wire                busDeMux_io_outputs_4_valid;
  wire                busMux_io_inputs_0_ready;
  wire                busMux_io_inputs_1_ready;
  wire                busMux_io_inputs_2_ready;
  wire                busMux_io_inputs_3_ready;
  wire                busMux_io_output_valid;
  wire                miscInMux_io_inputs_0_ready;
  wire                miscInMux_io_inputs_1_ready;
  wire                miscInMux_io_inputs_2_ready;
  wire                miscInMux_io_output_valid;
  wire                busDataFifo_io_push_ready;
  wire                busDataFifo_io_pop_valid;
  wire       [511:0]  busDataFifo_io_pop_payload;
  wire       [5:0]    busDataFifo_io_occupancy;
  wire       [5:0]    busDataFifo_io_availability;
  wire                busLinkFifo_io_push_ready;
  wire                busLinkFifo_io_pop_valid;
  wire                busLinkFifo_io_pop_payload_last;
  wire       [5:0]    busLinkFifo_io_pop_payload_fragment;
  wire       [5:0]    busLinkFifo_io_occupancy;
  wire       [5:0]    busLinkFifo_io_availability;
  wire                miscFifo_io_push_ready;
  wire                miscFifo_io_pop_valid;
  wire       [511:0]  miscFifo_io_pop_payload;
  wire       [6:0]    miscFifo_io_occupancy;
  wire       [6:0]    miscFifo_io_availability;
  wire                tagFifo_io_push_ready;
  wire                tagFifo_io_pop_valid;
  wire       [9:0]    tagFifo_io_pop_payload;
  wire       [6:0]    tagFifo_io_occupancy;
  wire       [6:0]    tagFifo_io_availability;
  wire                miscOutDeMux_io_input_ready;
  wire                miscOutDeMux_io_outputs_0_valid;
  wire                miscOutDeMux_io_outputs_1_valid;
  wire                miscOutDeMux_io_outputs_2_valid;
  wire                ln_buf_io_push_ready;
  wire                ln_buf_io_pop_valid;
  wire       [127:0]  ln_buf_io_pop_payload;
  wire       [9:0]    ln_buf_io_occupancy;
  wire       [9:0]    ln_buf_io_availability;
  wire                ln_scaleOut_fifo_io_push_ready;
  wire                ln_scaleOut_fifo_io_pop_valid;
  wire       [15:0]   ln_scaleOut_fifo_io_pop_payload;
  wire       [5:0]    ln_scaleOut_fifo_io_occupancy;
  wire       [5:0]    ln_scaleOut_fifo_io_availability;
  wire                dense_gen_io_bus_ready;
  wire                dense_gen_io_main_valid;
  wire                dense_gen_io_misc_valid;
  wire                dense_deMux_io_input_ready;
  wire                dense_deMux_io_outputs_0_valid;
  wire                dense_deMux_io_outputs_1_valid;
  wire                dense_scaleFifo_io_push_ready;
  wire                dense_scaleFifo_io_pop_valid;
  wire       [511:0]  dense_scaleFifo_io_pop_payload;
  wire       [3:0]    dense_scaleFifo_io_occupancy;
  wire       [3:0]    dense_scaleFifo_io_availability;
  wire                sparse_gen_io_bus_ready;
  wire                sparse_gen_io_main_valid;
  wire                sparse_gen_io_misc_valid;
  wire                sparse_preScaleFifo_io_push_ready;
  wire                sparse_preScaleFifo_io_pop_valid;
  wire       [15:0]   sparse_preScaleFifo_io_pop_payload;
  wire       [5:0]    sparse_preScaleFifo_io_occupancy;
  wire       [5:0]    sparse_preScaleFifo_io_availability;
  wire                sparse_postScaleFifo_io_push_ready;
  wire                sparse_postScaleFifo_io_pop_valid;
  wire       [15:0]   sparse_postScaleFifo_io_pop_payload;
  wire       [5:0]    sparse_postScaleFifo_io_occupancy;
  wire       [5:0]    sparse_postScaleFifo_io_availability;
  wire                sparse_zeroFifo_io_push_ready;
  wire                sparse_zeroFifo_io_pop_valid;
  wire       [3:0]    sparse_zeroFifo_io_pop_payload;
  wire       [6:0]    sparse_zeroFifo_io_occupancy;
  wire       [6:0]    sparse_zeroFifo_io_availability;
  wire                kv_gen_io_bus_ready;
  wire                kv_gen_io_main_valid;
  wire                kv_gen_io_misc_valid;
  wire                kv_extPackDeMux_io_input_ready;
  wire                kv_extPackDeMux_io_outputs_0_valid;
  wire       [31:0]   kv_extPackDeMux_io_outputs_0_payload;
  wire                kv_extPackDeMux_io_outputs_1_valid;
  wire       [31:0]   kv_extPackDeMux_io_outputs_1_payload;
  wire                kv_kMux_io_inputs_0_ready;
  wire                kv_kMux_io_inputs_1_ready;
  wire                kv_kMux_io_output_valid;
  wire       [31:0]   kv_kMux_io_output_payload;
  wire                kv_vMux_io_inputs_0_ready;
  wire                kv_vMux_io_inputs_1_ready;
  wire                kv_vMux_io_output_valid;
  wire       [31:0]   kv_vMux_io_output_payload;
  wire                kv_kFork_io_input_ready;
  wire                kv_kFork_io_outputs_0_valid;
  wire                kv_kFork_io_outputs_1_valid;
  wire                kv_vFork_io_input_ready;
  wire                kv_vFork_io_outputs_0_valid;
  wire                kv_vFork_io_outputs_1_valid;
  wire                kv_vScaleMux_io_inputs_0_ready;
  wire                kv_vScaleMux_io_inputs_1_ready;
  wire                kv_vScaleMux_io_output_valid;
  wire       [15:0]   kv_vScaleMux_io_output_payload;
  wire                zeroInt4Mux_io_inputs_0_ready;
  wire                zeroInt4Mux_io_inputs_1_ready;
  wire                zeroInt4Mux_io_output_valid;
  wire       [7:0]    zeroInt4Mux_io_output_payload;
  wire                vZeroFifo_io_push_ready;
  wire                vZeroFifo_io_pop_valid;
  wire       [7:0]    vZeroFifo_io_pop_payload;
  wire       [9:0]    vZeroFifo_io_occupancy;
  wire       [9:0]    vZeroFifo_io_availability;
  wire                vScaleFifo_io_push_ready;
  wire                vScaleFifo_io_pop_valid;
  wire       [15:0]   vScaleFifo_io_pop_payload;
  wire       [9:0]    vScaleFifo_io_occupancy;
  wire       [9:0]    vScaleFifo_io_availability;
  wire                zeroInt8Mux_io_inputs_0_ready;
  wire                zeroInt8Mux_io_inputs_1_ready;
  wire                zeroInt8Mux_io_inputs_2_ready;
  wire                zeroInt8Mux_io_output_valid;
  wire       [7:0]    zeroInt8Mux_io_output_payload;
  wire                denseScaleFifo_io_push_ready;
  wire                denseScaleFifo_io_pop_valid;
  wire       [31:0]   denseScaleFifo_io_pop_payload;
  wire       [9:0]    denseScaleFifo_io_occupancy;
  wire       [9:0]    denseScaleFifo_io_availability;
  wire                sparseScaleFifo_io_push_ready;
  wire                sparseScaleFifo_io_pop_valid;
  wire       [31:0]   sparseScaleFifo_io_pop_payload;
  wire       [9:0]    sparseScaleFifo_io_occupancy;
  wire       [9:0]    sparseScaleFifo_io_availability;
  wire                kScaleFifo_io_push_ready;
  wire                kScaleFifo_io_pop_valid;
  wire       [31:0]   kScaleFifo_io_pop_payload;
  wire       [9:0]    kScaleFifo_io_occupancy;
  wire       [9:0]    kScaleFifo_io_availability;
  wire                dense_scale_to_ip_s_axis_a_tready;
  wire                dense_scale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   dense_scale_to_ip_m_axis_result_tdata;
  wire                axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready;
  wire                axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid;
  wire       [31:0]   axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata;
  wire                kv_kScale_to_ip_s_axis_a_tready;
  wire                kv_kScale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   kv_kScale_to_ip_m_axis_result_tdata;
  wire                postScaleMux_io_inputs_0_ready;
  wire                postScaleMux_io_inputs_1_ready;
  wire                postScaleMux_io_inputs_2_ready;
  wire                postScaleMux_io_inputs_3_ready;
  wire                postScaleMux_io_output_valid;
  wire       [31:0]   postScaleMux_io_output_payload;
  wire                sparsePreScaleFifo_io_push_ready;
  wire                sparsePreScaleFifo_io_pop_valid;
  wire       [15:0]   sparsePreScaleFifo_io_pop_payload;
  wire       [9:0]    sparsePreScaleFifo_io_occupancy;
  wire       [9:0]    sparsePreScaleFifo_io_availability;
  wire                preScaleMux_io_inputs_0_ready;
  wire                preScaleMux_io_inputs_1_ready;
  wire                preScaleMux_io_inputs_2_ready;
  wire                preScaleMux_io_output_valid;
  wire       [15:0]   preScaleMux_io_output_payload;
  wire       [3:0]    t_tagFifoSel;
  wire       [3:0]    t_io_select;
  wire       [1:0]    t_t_io_push_payload_1;
  wire       [0:0]    t_t_io_push_payload_1_1;
  reg        [127:0]  t_io_push_payload_4;
  wire       [2:0]    t_t_ln_scaleOut_payload_1;
  wire       [0:0]    t_t_ln_scaleOut_payload_1_1;
  reg        [15:0]   t_ln_scaleOut_payload_4;
  wire       [4:0]    t_t_dense_scale_payload_1;
  wire       [0:0]    t_t_dense_scale_payload_1_1;
  reg        [15:0]   t_dense_scale_payload_4;
  wire       [6:0]    t_t_dense_zero_payload_1;
  wire       [0:0]    t_t_dense_zero_payload_1_1;
  reg        [3:0]    t_dense_zero_payload_4;
  wire       [7:0]    t_sparse_cntLv2Ovf;
  reg        [19:0]   t_sparse_packOut_payload;
  wire       [4:0]    t_sparse_packOut_payload_1;
  wire       [3:0]    t_t_kv_extPack_payload_1;
  wire       [0:0]    t_t_kv_extPack_payload_1_1;
  reg        [31:0]   t_kv_extPack_payload_4;
  wire       [9:0]    t_kv_kCntOvf;
  wire       [9:0]    t_kv_vCntOvf;
  wire       [5:0]    t_when;
  wire       [5:0]    t_when_1;
  wire       [15:0]   t_kv_kZero_payload;
  wire       [15:0]   t_kv_vZero_payload;
  wire       [5:0]    t_postCfgDenseHit;
  wire       [5:0]    t_postCfgDenseHit_1;
  wire       [5:0]    busTag;
  wire                mlpGBusHitNotSparse;
  wire                lnScaleHit;
  wire                denseHit;
  wire                sparseHit;
  wire                kvHit;
  reg        [2:0]    busDeMuxSel;
  reg        [1:0]    busMuxSel;
  reg        [1:0]    miscInMuxSel;
  wire                axi_busDataFifo_io_push_fire;
  wire                axi_busDataFifo_io_pop_fire;
  wire                isVOut;
  wire                axpyHit;
  wire                axi_miscFifo_io_push_fire;
  wire       [5:0]    tagFifoDest;
  wire       [1:0]    tagFifoSel;
  wire                axi_tagFifo_io_pop_fire;
  wire                ln_bufIn_valid;
  wire                ln_bufIn_ready;
  wire       [511:0]  ln_bufIn_payload;
  wire                axi_ln_buf_io_push_fire;
  reg                 t_io_push_payload;
  reg        [1:0]    t_io_push_payload_1;
  reg        [1:0]    t_io_push_payload_2;
  wire                t_ln_bufIn_ready;
  wire       [511:0]  t_io_push_payload_3;
  wire                ln_scaleOut_valid;
  wire                ln_scaleOut_ready;
  wire       [15:0]   ln_scaleOut_payload;
  wire                ln_scaleOut_fire;
  reg                 t_ln_scaleOut_payload;
  reg        [2:0]    t_ln_scaleOut_payload_1;
  reg        [2:0]    t_ln_scaleOut_payload_2;
  wire                t_io_pop_ready;
  wire       [127:0]  t_ln_scaleOut_payload_3;
  wire                dense_bus_valid;
  wire                dense_bus_ready;
  wire       [511:0]  dense_bus_payload;
  reg        [2:0]    dense_cnt;
  reg                 dense_cntIsZero;
  wire                dense_cntOvf;
  wire                dense_bus_fire;
  wire                dense_toScale_valid;
  wire                dense_toScale_ready;
  wire       [511:0]  dense_toScale_payload;
  wire                dense_toZero_valid;
  reg                 dense_toZero_ready;
  wire       [511:0]  dense_toZero_payload;
  wire                dense_scale_valid;
  wire                dense_scale_ready;
  wire       [15:0]   dense_scale_payload;
  wire                dense_scale_fire;
  reg                 t_dense_scale_payload;
  reg        [4:0]    t_dense_scale_payload_1;
  reg        [4:0]    t_dense_scale_payload_2;
  wire                t_io_pop_ready_1;
  wire       [511:0]  t_dense_scale_payload_3;
  wire                dense_zero_valid;
  reg                 dense_zero_ready;
  wire       [3:0]    dense_zero_payload;
  wire                dense_zeroPipe_valid;
  wire                dense_zeroPipe_ready;
  wire       [3:0]    dense_zeroPipe_payload;
  reg                 dense_zero_rValid;
  reg        [3:0]    dense_zero_rData;
  wire                dense_zeroAlign_valid;
  wire                dense_zeroAlign_ready;
  wire       [7:0]    dense_zeroAlign_payload;
  wire                dense_toZero_m2sPipe_valid;
  wire                dense_toZero_m2sPipe_ready;
  wire       [511:0]  dense_toZero_m2sPipe_payload;
  reg                 dense_toZero_rValid;
  reg        [511:0]  dense_toZero_rData;
  wire                dense_zero_fire;
  reg                 t_dense_zero_payload;
  reg        [6:0]    t_dense_zero_payload_1;
  reg        [6:0]    t_dense_zero_payload_2;
  wire                t_dense_toZero_m2sPipe_ready;
  wire       [511:0]  t_dense_zero_payload_3;
  wire                sparse_bus_valid;
  reg                 sparse_bus_ready;
  wire       [499:0]  sparse_bus_tdata;
  wire       [5:0]    sparse_bus_tuser;
  wire       [1:0]    sparse_tagHit;
  wire       [7:0]    sparse_packVec_0;
  wire       [7:0]    sparse_packVec_1;
  wire       [7:0]    sparse_packCnt;
  wire                sparse_packOut_valid;
  wire                sparse_packOut_ready;
  wire       [19:0]   sparse_packOut_payload;
  (* max_fanout = 100 *) reg        [7:0]    sparse_cntLv1;
  reg        [7:0]    sparse_cntLv2;
  wire                sparse_cntLv1Ovf;
  wire                sparse_cntLv2Ovf;
  wire                sparse_packOut_fire;
  wire       [19:0]   sparse_busPayloadSubDiv_0;
  wire       [19:0]   sparse_busPayloadSubDiv_1;
  wire       [19:0]   sparse_busPayloadSubDiv_2;
  wire       [19:0]   sparse_busPayloadSubDiv_3;
  wire       [19:0]   sparse_busPayloadSubDiv_4;
  wire       [19:0]   sparse_busPayloadSubDiv_5;
  wire       [19:0]   sparse_busPayloadSubDiv_6;
  wire       [19:0]   sparse_busPayloadSubDiv_7;
  wire       [19:0]   sparse_busPayloadSubDiv_8;
  wire       [19:0]   sparse_busPayloadSubDiv_9;
  wire       [19:0]   sparse_busPayloadSubDiv_10;
  wire       [19:0]   sparse_busPayloadSubDiv_11;
  wire       [19:0]   sparse_busPayloadSubDiv_12;
  wire       [19:0]   sparse_busPayloadSubDiv_13;
  wire       [19:0]   sparse_busPayloadSubDiv_14;
  wire       [19:0]   sparse_busPayloadSubDiv_15;
  wire       [19:0]   sparse_busPayloadSubDiv_16;
  wire       [19:0]   sparse_busPayloadSubDiv_17;
  wire       [19:0]   sparse_busPayloadSubDiv_18;
  wire       [19:0]   sparse_busPayloadSubDiv_19;
  wire       [19:0]   sparse_busPayloadSubDiv_20;
  wire       [19:0]   sparse_busPayloadSubDiv_21;
  wire       [19:0]   sparse_busPayloadSubDiv_22;
  wire       [19:0]   sparse_busPayloadSubDiv_23;
  wire       [19:0]   sparse_busPayloadSubDiv_24;
  wire                sparse_selAxpy;
  wire                sparse_zeroQueue_valid;
  wire                sparse_zeroQueue_ready;
  wire       [7:0]    sparse_zeroQueue_payload;
  wire                kv_bus_valid;
  wire                kv_bus_ready;
  wire       [511:0]  kv_bus_payload;
  wire                kv_extPack_valid;
  reg                 kv_extPack_ready;
  wire       [31:0]   kv_extPack_payload;
  wire                kv_extPack_fire;
  reg                 t_kv_extPack_payload;
  reg        [3:0]    t_kv_extPack_payload_1;
  reg        [3:0]    t_kv_extPack_payload_2;
  wire                t_kv_bus_ready;
  wire       [511:0]  t_kv_extPack_payload_3;
  wire                kv_kPack_valid;
  wire                kv_kPack_ready;
  wire       [31:0]   kv_kPack_payload;
  wire                kv_vPack_valid;
  wire                kv_vPack_ready;
  wire       [31:0]   kv_vPack_payload;
  wire                kv_isVOut;
  reg        [9:0]    kv_kCnt;
  wire                kv_kCntOvf;
  reg        [9:0]    kv_vCnt;
  wire                kv_vCntOvf;
  wire       [5:0]    kv_tokenHigh;
  wire       [5:0]    kv_kCntHigh;
  wire       [5:0]    kv_vCntHigh;
  wire       [3:0]    kv_kCntLow;
  wire       [3:0]    kv_vCntLow;
  reg                 kv_tokenHighZeroDly;
  reg                 kv_kCntHighMatch;
  wire                kv_kPack_fire;
  reg                 kv_vCntHighMatch;
  wire                kv_vPack_fire;
  wire                kv_kSelLocal;
  wire                kv_vSelLocal;
  wire                kv_extPack_m2sPipe_valid;
  wire                kv_extPack_m2sPipe_ready;
  wire       [31:0]   kv_extPack_m2sPipe_payload;
  reg                 kv_extPack_rValid;
  reg        [31:0]   kv_extPack_rData;
  wire                kv_kScale_valid;
  wire                kv_kScale_ready;
  wire       [15:0]   kv_kScale_payload;
  wire                kv_kZero_valid;
  wire                kv_kZero_ready;
  wire       [7:0]    kv_kZero_payload;
  wire                kv_vScalePreInsert_valid;
  wire                kv_vScalePreInsert_ready;
  wire       [15:0]   kv_vScalePreInsert_payload;
  wire                kv_vZero_valid;
  wire                kv_vZero_ready;
  wire       [7:0]    kv_vZero_payload;
  wire                kv_vScale_valid;
  wire                kv_vScale_ready;
  wire       [15:0]   kv_vScale_payload;
  wire                kv_vScaleOne_valid;
  wire                kv_vScaleOne_ready;
  wire       [15:0]   kv_vScaleOne_payload;
  reg        [9:0]    kv_vScaleCnt;
  reg                 kv_vScaleCntIsZero;
  wire                kv_vScale_fire;
  wire                postMlpGBusHitNotSparse;
  wire                postSparseHit;
  wire                postKHit;
  wire                postVHit;
  wire                postMlpCfgHitNotSparse;
  wire                postCfgDenseHit;
  wire                postCfgSparseHit;
  wire                postCfgKvHit;
  reg        [1:0]    postSel;
  wire                preCfgSparseHit;
  wire                preCfgKvHit;
  reg        [1:0]    preSel;

  assign t_tagFifoSel = tagFifo_io_pop_payload[9 : 6];
  assign t_io_select = tagFifo_io_pop_payload[9 : 6];
  assign t_t_io_push_payload_1_1 = t_io_push_payload;
  assign t_t_io_push_payload_1 = {1'd0, t_t_io_push_payload_1_1};
  assign t_t_ln_scaleOut_payload_1_1 = t_ln_scaleOut_payload;
  assign t_t_ln_scaleOut_payload_1 = {2'd0, t_t_ln_scaleOut_payload_1_1};
  assign t_t_dense_scale_payload_1_1 = t_dense_scale_payload;
  assign t_t_dense_scale_payload_1 = {4'd0, t_t_dense_scale_payload_1_1};
  assign t_t_dense_zero_payload_1_1 = t_dense_zero_payload;
  assign t_t_dense_zero_payload_1 = {6'd0, t_t_dense_zero_payload_1_1};
  assign t_sparse_cntLv2Ovf = (sparse_packCnt - 8'h01);
  assign t_sparse_packOut_payload_1 = sparse_cntLv1[4:0];
  assign t_t_kv_extPack_payload_1_1 = t_kv_extPack_payload;
  assign t_t_kv_extPack_payload_1 = {3'd0, t_t_kv_extPack_payload_1_1};
  assign t_kv_kCntOvf = (io_token - 10'h001);
  assign t_kv_vCntOvf = (io_token - 10'h001);
  assign t_when = (kv_tokenHigh - 6'h01);
  assign t_when_1 = (kv_tokenHigh - 6'h01);
  assign t_kv_kZero_payload = kv_kPack_payload[31 : 16];
  assign t_kv_vZero_payload = kv_vPack_payload[31 : 16];
  assign t_postCfgDenseHit = 6'h05;
  assign t_postCfgDenseHit_1 = 6'h06;
  StreamDemux_7 busDeMux (
    .io_select          (busDeMuxSel[2:0]           ), //i
    .io_input_valid     (io_bus_valid               ), //i
    .io_input_ready     (busDeMux_io_input_ready    ), //o
    .io_outputs_0_valid (busDeMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (busMux_io_inputs_0_ready   ), //i
    .io_outputs_1_valid (busDeMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (dense_gen_io_bus_ready     ), //i
    .io_outputs_2_valid (busDeMux_io_outputs_2_valid), //o
    .io_outputs_2_ready (sparse_gen_io_bus_ready    ), //i
    .io_outputs_3_valid (busDeMux_io_outputs_3_valid), //o
    .io_outputs_3_ready (kv_gen_io_bus_ready        ), //i
    .io_outputs_4_valid (busDeMux_io_outputs_4_valid), //o
    .io_outputs_4_ready (ln_bufIn_ready             )  //i
  );
  StreamMux_21 busMux (
    .io_select         (busMuxSel[1:0]             ), //i
    .io_inputs_0_valid (busDeMux_io_outputs_0_valid), //i
    .io_inputs_0_ready (busMux_io_inputs_0_ready   ), //o
    .io_inputs_1_valid (dense_gen_io_main_valid    ), //i
    .io_inputs_1_ready (busMux_io_inputs_1_ready   ), //o
    .io_inputs_2_valid (sparse_gen_io_main_valid   ), //i
    .io_inputs_2_ready (busMux_io_inputs_2_ready   ), //o
    .io_inputs_3_valid (kv_gen_io_main_valid       ), //i
    .io_inputs_3_ready (busMux_io_inputs_3_ready   ), //o
    .io_output_valid   (busMux_io_output_valid     ), //o
    .io_output_ready   (busDataFifo_io_push_ready  )  //i
  );
  StreamMux_22 miscInMux (
    .io_select         (miscInMuxSel[1:0]          ), //i
    .io_inputs_0_valid (dense_gen_io_misc_valid    ), //i
    .io_inputs_0_ready (miscInMux_io_inputs_0_ready), //o
    .io_inputs_1_valid (sparse_gen_io_misc_valid   ), //i
    .io_inputs_1_ready (miscInMux_io_inputs_1_ready), //o
    .io_inputs_2_valid (kv_gen_io_misc_valid       ), //i
    .io_inputs_2_ready (miscInMux_io_inputs_2_ready), //o
    .io_output_valid   (miscInMux_io_output_valid  ), //o
    .io_output_ready   (miscFifo_io_push_ready     )  //i
  );
  LargeBankFifo_2 busDataFifo (
    .io_push_valid   (busMux_io_output_valid           ), //i
    .io_push_ready   (busDataFifo_io_push_ready        ), //o
    .io_push_payload (io_bus_payload_data[511:0]       ), //i
    .io_pop_valid    (busDataFifo_io_pop_valid         ), //o
    .io_pop_ready    (int_bus_ready                    ), //i
    .io_pop_payload  (busDataFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (busDataFifo_io_occupancy[5:0]    ), //o
    .io_availability (busDataFifo_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                        ), //i
    .clk_1_resetn    (clk_1_resetn                     )  //i
  );
  StreamFifo_11 busLinkFifo (
    .io_push_valid            (axi_busDataFifo_io_push_fire             ), //i
    .io_push_ready            (busLinkFifo_io_push_ready                ), //o
    .io_push_payload_last     (io_bus_payload_last                      ), //i
    .io_push_payload_fragment (busLinkFifo_io_push_payload_fragment[5:0]), //i
    .io_pop_valid             (busLinkFifo_io_pop_valid                 ), //o
    .io_pop_ready             (axi_busDataFifo_io_pop_fire              ), //i
    .io_pop_payload_last      (busLinkFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (busLinkFifo_io_pop_payload_fragment[5:0] ), //o
    .io_flush                 (1'b0                                     ), //i
    .io_occupancy             (busLinkFifo_io_occupancy[5:0]            ), //o
    .io_availability          (busLinkFifo_io_availability[5:0]         ), //o
    .clk_1_clk                (clk_1_clk                                ), //i
    .clk_1_resetn             (clk_1_resetn                             )  //i
  );
  LargeBankFifo_3 miscFifo (
    .io_push_valid   (miscInMux_io_output_valid     ), //i
    .io_push_ready   (miscFifo_io_push_ready        ), //o
    .io_push_payload (io_bus_payload_data[511:0]    ), //i
    .io_pop_valid    (miscFifo_io_pop_valid         ), //o
    .io_pop_ready    (axi_tagFifo_io_pop_fire       ), //i
    .io_pop_payload  (miscFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (miscFifo_io_occupancy[6:0]    ), //o
    .io_availability (miscFifo_io_availability[6:0] ), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  StreamFifo_12 tagFifo (
    .io_push_valid   (axi_miscFifo_io_push_fire   ), //i
    .io_push_ready   (tagFifo_io_push_ready       ), //o
    .io_push_payload (tagFifo_io_push_payload[9:0]), //i
    .io_pop_valid    (tagFifo_io_pop_valid        ), //o
    .io_pop_ready    (miscOutDeMux_io_input_ready ), //i
    .io_pop_payload  (tagFifo_io_pop_payload[9:0] ), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (tagFifo_io_occupancy[6:0]   ), //o
    .io_availability (tagFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamDemux_8 miscOutDeMux (
    .io_select          (miscOutDeMux_io_select[1:0]    ), //i
    .io_input_valid     (tagFifo_io_pop_valid           ), //i
    .io_input_ready     (miscOutDeMux_io_input_ready    ), //o
    .io_outputs_0_valid (miscOutDeMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (dense_bus_ready                ), //i
    .io_outputs_1_valid (miscOutDeMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (sparse_bus_ready               ), //i
    .io_outputs_2_valid (miscOutDeMux_io_outputs_2_valid), //o
    .io_outputs_2_ready (kv_bus_ready                   )  //i
  );
  StreamFifo_13 ln_buf (
    .io_push_valid   (ln_bufIn_valid               ), //i
    .io_push_ready   (ln_buf_io_push_ready         ), //o
    .io_push_payload (ln_buf_io_push_payload[127:0]), //i
    .io_pop_valid    (ln_buf_io_pop_valid          ), //o
    .io_pop_ready    (ln_buf_io_pop_ready          ), //i
    .io_pop_payload  (ln_buf_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (ln_buf_io_occupancy[9:0]     ), //o
    .io_availability (ln_buf_io_availability[9:0]  ), //o
    .clk_1_clk       (clk_1_clk                    ), //i
    .clk_1_resetn    (clk_1_resetn                 )  //i
  );
  StreamFifo_80 ln_scaleOut_fifo (
    .io_push_valid   (ln_scaleOut_valid                    ), //i
    .io_push_ready   (ln_scaleOut_fifo_io_push_ready       ), //o
    .io_push_payload (ln_scaleOut_payload[15:0]            ), //i
    .io_pop_valid    (ln_scaleOut_fifo_io_pop_valid        ), //o
    .io_pop_ready    (int_lnScale_ready                    ), //i
    .io_pop_payload  (ln_scaleOut_fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (ln_scaleOut_fifo_io_occupancy[5:0]   ), //o
    .io_availability (ln_scaleOut_fifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                            ), //i
    .clk_1_resetn    (clk_1_resetn                         )  //i
  );
  DenseCase dense_gen (
    .io_bus_valid  (busDeMux_io_outputs_1_valid), //i
    .io_bus_ready  (dense_gen_io_bus_ready     ), //o
    .io_main_valid (dense_gen_io_main_valid    ), //o
    .io_main_ready (busMux_io_inputs_1_ready   ), //i
    .io_misc_valid (dense_gen_io_misc_valid    ), //o
    .io_misc_ready (miscInMux_io_inputs_0_ready), //i
    .clk_1_clk     (clk_1_clk                  ), //i
    .clk_1_resetn  (clk_1_resetn               )  //i
  );
  StreamDemux_17 dense_deMux (
    .io_select          (dense_deMux_io_select         ), //i
    .io_input_valid     (dense_bus_valid               ), //i
    .io_input_ready     (dense_deMux_io_input_ready    ), //o
    .io_outputs_0_valid (dense_deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (dense_toScale_ready           ), //i
    .io_outputs_1_valid (dense_deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (dense_toZero_ready            )  //i
  );
  LargeBankFifo_4 dense_scaleFifo (
    .io_push_valid   (dense_toScale_valid                  ), //i
    .io_push_ready   (dense_scaleFifo_io_push_ready        ), //o
    .io_push_payload (dense_toScale_payload[511:0]         ), //i
    .io_pop_valid    (dense_scaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (dense_scaleFifo_io_pop_ready         ), //i
    .io_pop_payload  (dense_scaleFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (dense_scaleFifo_io_occupancy[3:0]    ), //o
    .io_availability (dense_scaleFifo_io_availability[3:0] ), //o
    .clk_1_clk       (clk_1_clk                            ), //i
    .clk_1_resetn    (clk_1_resetn                         )  //i
  );
  SparseCase sparse_gen (
    .io_tag        (sparse_gen_io_tag[5:0]     ), //i
    .io_bus_valid  (busDeMux_io_outputs_2_valid), //i
    .io_bus_ready  (sparse_gen_io_bus_ready    ), //o
    .io_main_valid (sparse_gen_io_main_valid   ), //o
    .io_main_ready (busMux_io_inputs_2_ready   ), //i
    .io_misc_valid (sparse_gen_io_misc_valid   ), //o
    .io_misc_ready (miscInMux_io_inputs_1_ready), //i
    .clk_1_clk     (clk_1_clk                  ), //i
    .clk_1_resetn  (clk_1_resetn               )  //i
  );
  StreamFifo_80 sparse_preScaleFifo (
    .io_push_valid   (sparse_preScaleFifo_io_push_valid        ), //i
    .io_push_ready   (sparse_preScaleFifo_io_push_ready        ), //o
    .io_push_payload (sparse_preScaleFifo_io_push_payload[15:0]), //i
    .io_pop_valid    (sparse_preScaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (sparsePreScaleFifo_io_push_ready         ), //i
    .io_pop_payload  (sparse_preScaleFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (sparse_preScaleFifo_io_occupancy[5:0]    ), //o
    .io_availability (sparse_preScaleFifo_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                                ), //i
    .clk_1_resetn    (clk_1_resetn                             )  //i
  );
  StreamFifo_80 sparse_postScaleFifo (
    .io_push_valid   (sparse_postScaleFifo_io_push_valid                   ), //i
    .io_push_ready   (sparse_postScaleFifo_io_push_ready                   ), //o
    .io_push_payload (sparse_postScaleFifo_io_push_payload[15:0]           ), //i
    .io_pop_valid    (sparse_postScaleFifo_io_pop_valid                    ), //o
    .io_pop_ready    (axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready), //i
    .io_pop_payload  (sparse_postScaleFifo_io_pop_payload[15:0]            ), //o
    .io_flush        (1'b0                                                 ), //i
    .io_occupancy    (sparse_postScaleFifo_io_occupancy[5:0]               ), //o
    .io_availability (sparse_postScaleFifo_io_availability[5:0]            ), //o
    .clk_1_clk       (clk_1_clk                                            ), //i
    .clk_1_resetn    (clk_1_resetn                                         )  //i
  );
  StreamFifo_17 sparse_zeroFifo (
    .io_push_valid   (sparse_packOut_valid                ), //i
    .io_push_ready   (sparse_zeroFifo_io_push_ready       ), //o
    .io_push_payload (sparse_zeroFifo_io_push_payload[3:0]), //i
    .io_pop_valid    (sparse_zeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (sparse_zeroQueue_ready              ), //i
    .io_pop_payload  (sparse_zeroFifo_io_pop_payload[3:0] ), //o
    .io_flush        (1'b0                                ), //i
    .io_occupancy    (sparse_zeroFifo_io_occupancy[6:0]   ), //o
    .io_availability (sparse_zeroFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                           ), //i
    .clk_1_resetn    (clk_1_resetn                        )  //i
  );
  KvCacheCase kv_gen (
    .io_token      (io_token[9:0]              ), //i
    .io_bus_valid  (busDeMux_io_outputs_3_valid), //i
    .io_bus_ready  (kv_gen_io_bus_ready        ), //o
    .io_main_valid (kv_gen_io_main_valid       ), //o
    .io_main_ready (busMux_io_inputs_3_ready   ), //i
    .io_misc_valid (kv_gen_io_misc_valid       ), //o
    .io_misc_ready (miscInMux_io_inputs_2_ready), //i
    .clk_1_clk     (clk_1_clk                  ), //i
    .clk_1_resetn  (clk_1_resetn               )  //i
  );
  StreamDemux_25 kv_extPackDeMux (
    .io_select            (kv_extPackDeMux_io_select                 ), //i
    .io_input_valid       (kv_extPack_m2sPipe_valid                  ), //i
    .io_input_ready       (kv_extPackDeMux_io_input_ready            ), //o
    .io_input_payload     (kv_extPack_m2sPipe_payload[31:0]          ), //i
    .io_outputs_0_valid   (kv_extPackDeMux_io_outputs_0_valid        ), //o
    .io_outputs_0_ready   (kv_kMux_io_inputs_0_ready                 ), //i
    .io_outputs_0_payload (kv_extPackDeMux_io_outputs_0_payload[31:0]), //o
    .io_outputs_1_valid   (kv_extPackDeMux_io_outputs_1_valid        ), //o
    .io_outputs_1_ready   (kv_vMux_io_inputs_0_ready                 ), //i
    .io_outputs_1_payload (kv_extPackDeMux_io_outputs_1_payload[31:0])  //o
  );
  StreamMux_23 kv_kMux (
    .io_select           (kv_kMux_io_select                         ), //i
    .io_inputs_0_valid   (kv_extPackDeMux_io_outputs_0_valid        ), //i
    .io_inputs_0_ready   (kv_kMux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload (kv_extPackDeMux_io_outputs_0_payload[31:0]), //i
    .io_inputs_1_valid   (io_kSzOut_valid                           ), //i
    .io_inputs_1_ready   (kv_kMux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload (io_kSzOut_payload[31:0]                   ), //i
    .io_output_valid     (kv_kMux_io_output_valid                   ), //o
    .io_output_ready     (kv_kPack_ready                            ), //i
    .io_output_payload   (kv_kMux_io_output_payload[31:0]           )  //o
  );
  StreamMux_23 kv_vMux (
    .io_select           (kv_vMux_io_select                         ), //i
    .io_inputs_0_valid   (kv_extPackDeMux_io_outputs_1_valid        ), //i
    .io_inputs_0_ready   (kv_vMux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload (kv_extPackDeMux_io_outputs_1_payload[31:0]), //i
    .io_inputs_1_valid   (io_vSzOut_valid                           ), //i
    .io_inputs_1_ready   (kv_vMux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload (io_vSzOut_payload[31:0]                   ), //i
    .io_output_valid     (kv_vMux_io_output_valid                   ), //o
    .io_output_ready     (kv_vPack_ready                            ), //i
    .io_output_payload   (kv_vMux_io_output_payload[31:0]           )  //o
  );
  StreamFork kv_kFork (
    .io_input_valid     (kv_kPack_valid             ), //i
    .io_input_ready     (kv_kFork_io_input_ready    ), //o
    .io_outputs_0_valid (kv_kFork_io_outputs_0_valid), //o
    .io_outputs_0_ready (kv_kScale_ready            ), //i
    .io_outputs_1_valid (kv_kFork_io_outputs_1_valid), //o
    .io_outputs_1_ready (kv_kZero_ready             ), //i
    .clk_1_clk          (clk_1_clk                  ), //i
    .clk_1_resetn       (clk_1_resetn               )  //i
  );
  StreamFork kv_vFork (
    .io_input_valid     (kv_vPack_valid             ), //i
    .io_input_ready     (kv_vFork_io_input_ready    ), //o
    .io_outputs_0_valid (kv_vFork_io_outputs_0_valid), //o
    .io_outputs_0_ready (kv_vScalePreInsert_ready   ), //i
    .io_outputs_1_valid (kv_vFork_io_outputs_1_valid), //o
    .io_outputs_1_ready (kv_vZero_ready             ), //i
    .clk_1_clk          (clk_1_clk                  ), //i
    .clk_1_resetn       (clk_1_resetn               )  //i
  );
  StreamMux_25 kv_vScaleMux (
    .io_select           (kv_vScaleMux_io_select              ), //i
    .io_inputs_0_valid   (kv_vScalePreInsert_valid            ), //i
    .io_inputs_0_ready   (kv_vScaleMux_io_inputs_0_ready      ), //o
    .io_inputs_0_payload (kv_vScalePreInsert_payload[15:0]    ), //i
    .io_inputs_1_valid   (kv_vScaleOne_valid                  ), //i
    .io_inputs_1_ready   (kv_vScaleMux_io_inputs_1_ready      ), //o
    .io_inputs_1_payload (kv_vScaleOne_payload[15:0]          ), //i
    .io_output_valid     (kv_vScaleMux_io_output_valid        ), //o
    .io_output_ready     (kv_vScale_ready                     ), //i
    .io_output_payload   (kv_vScaleMux_io_output_payload[15:0])  //o
  );
  StreamMux_41 zeroInt4Mux (
    .io_select           (zeroInt4Mux_io_select             ), //i
    .io_inputs_0_valid   (dense_zeroAlign_valid             ), //i
    .io_inputs_0_ready   (zeroInt4Mux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (dense_zeroAlign_payload[7:0]      ), //i
    .io_inputs_1_valid   (sparse_zeroQueue_valid            ), //i
    .io_inputs_1_ready   (zeroInt4Mux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (sparse_zeroQueue_payload[7:0]     ), //i
    .io_output_valid     (zeroInt4Mux_io_output_valid       ), //o
    .io_output_ready     (int_zeroInt4_ready                ), //i
    .io_output_payload   (zeroInt4Mux_io_output_payload[7:0])  //o
  );
  StreamFifo_18 vZeroFifo (
    .io_push_valid   (kv_vZero_valid                ), //i
    .io_push_ready   (vZeroFifo_io_push_ready       ), //o
    .io_push_payload (kv_vZero_payload[7:0]         ), //i
    .io_pop_valid    (vZeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (zeroInt8Mux_io_inputs_2_ready ), //i
    .io_pop_payload  (vZeroFifo_io_pop_payload[7:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (vZeroFifo_io_occupancy[9:0]   ), //o
    .io_availability (vZeroFifo_io_availability[9:0]), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  StreamFifo_19 vScaleFifo (
    .io_push_valid   (kv_vScale_valid                ), //i
    .io_push_ready   (vScaleFifo_io_push_ready       ), //o
    .io_push_payload (kv_vScale_payload[15:0]        ), //i
    .io_pop_valid    (vScaleFifo_io_pop_valid        ), //o
    .io_pop_ready    (preScaleMux_io_inputs_1_ready  ), //i
    .io_pop_payload  (vScaleFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (vScaleFifo_io_occupancy[9:0]   ), //o
    .io_availability (vScaleFifo_io_availability[9:0]), //o
    .clk_1_clk       (clk_1_clk                      ), //i
    .clk_1_resetn    (clk_1_resetn                   )  //i
  );
  StreamMux_27 zeroInt8Mux (
    .io_select           (zeroInt8Mux_io_select[1:0]        ), //i
    .io_inputs_0_valid   (1'b0                              ), //i
    .io_inputs_0_ready   (zeroInt8Mux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (8'h0                              ), //i
    .io_inputs_1_valid   (kv_kZero_valid                    ), //i
    .io_inputs_1_ready   (zeroInt8Mux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (kv_kZero_payload[7:0]             ), //i
    .io_inputs_2_valid   (vZeroFifo_io_pop_valid            ), //i
    .io_inputs_2_ready   (zeroInt8Mux_io_inputs_2_ready     ), //o
    .io_inputs_2_payload (vZeroFifo_io_pop_payload[7:0]     ), //i
    .io_output_valid     (zeroInt8Mux_io_output_valid       ), //o
    .io_output_ready     (int_zeroInt8_ready                ), //i
    .io_output_payload   (zeroInt8Mux_io_output_payload[7:0])  //o
  );
  StreamFifo_20 denseScaleFifo (
    .io_push_valid   (dense_scale_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (denseScaleFifo_io_push_ready               ), //o
    .io_push_payload (dense_scale_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (denseScaleFifo_io_pop_valid                ), //o
    .io_pop_ready    (postScaleMux_io_inputs_0_ready             ), //i
    .io_pop_payload  (denseScaleFifo_io_pop_payload[31:0]        ), //o
    .io_flush        (1'b0                                       ), //i
    .io_occupancy    (denseScaleFifo_io_occupancy[9:0]           ), //o
    .io_availability (denseScaleFifo_io_availability[9:0]        ), //o
    .clk_1_clk       (clk_1_clk                                  ), //i
    .clk_1_resetn    (clk_1_resetn                               )  //i
  );
  StreamFifo_20 sparseScaleFifo (
    .io_push_valid   (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (sparseScaleFifo_io_push_ready                                  ), //o
    .io_push_payload (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (sparseScaleFifo_io_pop_valid                                   ), //o
    .io_pop_ready    (postScaleMux_io_inputs_1_ready                                 ), //i
    .io_pop_payload  (sparseScaleFifo_io_pop_payload[31:0]                           ), //o
    .io_flush        (1'b0                                                           ), //i
    .io_occupancy    (sparseScaleFifo_io_occupancy[9:0]                              ), //o
    .io_availability (sparseScaleFifo_io_availability[9:0]                           ), //o
    .clk_1_clk       (clk_1_clk                                                      ), //i
    .clk_1_resetn    (clk_1_resetn                                                   )  //i
  );
  StreamFifo_20 kScaleFifo (
    .io_push_valid   (kv_kScale_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (kScaleFifo_io_push_ready                 ), //o
    .io_push_payload (kv_kScale_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (kScaleFifo_io_pop_valid                  ), //o
    .io_pop_ready    (postScaleMux_io_inputs_2_ready           ), //i
    .io_pop_payload  (kScaleFifo_io_pop_payload[31:0]          ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (kScaleFifo_io_occupancy[9:0]             ), //o
    .io_availability (kScaleFifo_io_availability[9:0]          ), //o
    .clk_1_clk       (clk_1_clk                                ), //i
    .clk_1_resetn    (clk_1_resetn                             )  //i
  );
  fp16toFp32s dense_scale_to_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (dense_scale_valid                          ), //i
    .s_axis_a_tready      (dense_scale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (dense_scale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (dense_scale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (denseScaleFifo_io_push_ready               ), //i
    .m_axis_result_tdata  (dense_scale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s axi_sparse_postScaleFifo_io_pop_to_ip (
    .aclk                 (clk_1_clk                                                      ), //i
    .s_axis_a_tvalid      (sparse_postScaleFifo_io_pop_valid                              ), //i
    .s_axis_a_tready      (axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (sparse_postScaleFifo_io_pop_payload[15:0]                      ), //i
    .m_axis_result_tvalid (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (sparseScaleFifo_io_push_ready                                  ), //i
    .m_axis_result_tdata  (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s kv_kScale_to_ip (
    .aclk                 (clk_1_clk                                ), //i
    .s_axis_a_tvalid      (kv_kScale_valid                          ), //i
    .s_axis_a_tready      (kv_kScale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (kv_kScale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (kv_kScale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (kScaleFifo_io_push_ready                 ), //i
    .m_axis_result_tdata  (kv_kScale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamMux_28 postScaleMux (
    .io_select           (postSel[1:0]                        ), //i
    .io_inputs_0_valid   (denseScaleFifo_io_pop_valid         ), //i
    .io_inputs_0_ready   (postScaleMux_io_inputs_0_ready      ), //o
    .io_inputs_0_payload (denseScaleFifo_io_pop_payload[31:0] ), //i
    .io_inputs_1_valid   (sparseScaleFifo_io_pop_valid        ), //i
    .io_inputs_1_ready   (postScaleMux_io_inputs_1_ready      ), //o
    .io_inputs_1_payload (sparseScaleFifo_io_pop_payload[31:0]), //i
    .io_inputs_2_valid   (kScaleFifo_io_pop_valid             ), //i
    .io_inputs_2_ready   (postScaleMux_io_inputs_2_ready      ), //o
    .io_inputs_2_payload (kScaleFifo_io_pop_payload[31:0]     ), //i
    .io_inputs_3_valid   (1'b0                                ), //i
    .io_inputs_3_ready   (postScaleMux_io_inputs_3_ready      ), //o
    .io_inputs_3_payload (32'h0                               ), //i
    .io_output_valid     (postScaleMux_io_output_valid        ), //o
    .io_output_ready     (int_postScale_ready                 ), //i
    .io_output_payload   (postScaleMux_io_output_payload[31:0])  //o
  );
  StreamFifo_19 sparsePreScaleFifo (
    .io_push_valid   (sparse_preScaleFifo_io_pop_valid        ), //i
    .io_push_ready   (sparsePreScaleFifo_io_push_ready        ), //o
    .io_push_payload (sparse_preScaleFifo_io_pop_payload[15:0]), //i
    .io_pop_valid    (sparsePreScaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (preScaleMux_io_inputs_0_ready           ), //i
    .io_pop_payload  (sparsePreScaleFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                                    ), //i
    .io_occupancy    (sparsePreScaleFifo_io_occupancy[9:0]    ), //o
    .io_availability (sparsePreScaleFifo_io_availability[9:0] ), //o
    .clk_1_clk       (clk_1_clk                               ), //i
    .clk_1_resetn    (clk_1_resetn                            )  //i
  );
  StreamMux_29 preScaleMux (
    .io_select           (preSel[1:0]                            ), //i
    .io_inputs_0_valid   (sparsePreScaleFifo_io_pop_valid        ), //i
    .io_inputs_0_ready   (preScaleMux_io_inputs_0_ready          ), //o
    .io_inputs_0_payload (sparsePreScaleFifo_io_pop_payload[15:0]), //i
    .io_inputs_1_valid   (vScaleFifo_io_pop_valid                ), //i
    .io_inputs_1_ready   (preScaleMux_io_inputs_1_ready          ), //o
    .io_inputs_1_payload (vScaleFifo_io_pop_payload[15:0]        ), //i
    .io_inputs_2_valid   (1'b0                                   ), //i
    .io_inputs_2_ready   (preScaleMux_io_inputs_2_ready          ), //o
    .io_inputs_2_payload (16'h0                                  ), //i
    .io_output_valid     (preScaleMux_io_output_valid            ), //o
    .io_output_ready     (int_preScale_ready                     ), //i
    .io_output_payload   (preScaleMux_io_output_payload[15:0]    )  //o
  );
  always @(*) begin
    case(t_io_push_payload_2)
      2'b00 : t_io_push_payload_4 = t_io_push_payload_3[127 : 0];
      2'b01 : t_io_push_payload_4 = t_io_push_payload_3[255 : 128];
      2'b10 : t_io_push_payload_4 = t_io_push_payload_3[383 : 256];
      default : t_io_push_payload_4 = t_io_push_payload_3[511 : 384];
    endcase
  end

  always @(*) begin
    case(t_ln_scaleOut_payload_2)
      3'b000 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[15 : 0];
      3'b001 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[31 : 16];
      3'b010 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[47 : 32];
      3'b011 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[63 : 48];
      3'b100 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[79 : 64];
      3'b101 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[95 : 80];
      3'b110 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[111 : 96];
      default : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[127 : 112];
    endcase
  end

  always @(*) begin
    case(t_dense_scale_payload_2)
      5'b00000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[15 : 0];
      5'b00001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[31 : 16];
      5'b00010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[47 : 32];
      5'b00011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[63 : 48];
      5'b00100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[79 : 64];
      5'b00101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[95 : 80];
      5'b00110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[111 : 96];
      5'b00111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[127 : 112];
      5'b01000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[143 : 128];
      5'b01001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[159 : 144];
      5'b01010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[175 : 160];
      5'b01011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[191 : 176];
      5'b01100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[207 : 192];
      5'b01101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[223 : 208];
      5'b01110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[239 : 224];
      5'b01111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[255 : 240];
      5'b10000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[271 : 256];
      5'b10001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[287 : 272];
      5'b10010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[303 : 288];
      5'b10011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[319 : 304];
      5'b10100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[335 : 320];
      5'b10101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[351 : 336];
      5'b10110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[367 : 352];
      5'b10111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[383 : 368];
      5'b11000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[399 : 384];
      5'b11001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[415 : 400];
      5'b11010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[431 : 416];
      5'b11011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[447 : 432];
      5'b11100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[463 : 448];
      5'b11101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[479 : 464];
      5'b11110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[495 : 480];
      default : t_dense_scale_payload_4 = t_dense_scale_payload_3[511 : 496];
    endcase
  end

  always @(*) begin
    case(t_dense_zero_payload_2)
      7'b0000000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[3 : 0];
      7'b0000001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[7 : 4];
      7'b0000010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[11 : 8];
      7'b0000011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[15 : 12];
      7'b0000100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[19 : 16];
      7'b0000101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[23 : 20];
      7'b0000110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[27 : 24];
      7'b0000111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[31 : 28];
      7'b0001000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[35 : 32];
      7'b0001001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[39 : 36];
      7'b0001010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[43 : 40];
      7'b0001011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[47 : 44];
      7'b0001100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[51 : 48];
      7'b0001101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[55 : 52];
      7'b0001110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[59 : 56];
      7'b0001111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[63 : 60];
      7'b0010000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[67 : 64];
      7'b0010001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[71 : 68];
      7'b0010010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[75 : 72];
      7'b0010011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[79 : 76];
      7'b0010100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[83 : 80];
      7'b0010101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[87 : 84];
      7'b0010110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[91 : 88];
      7'b0010111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[95 : 92];
      7'b0011000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[99 : 96];
      7'b0011001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[103 : 100];
      7'b0011010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[107 : 104];
      7'b0011011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[111 : 108];
      7'b0011100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[115 : 112];
      7'b0011101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[119 : 116];
      7'b0011110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[123 : 120];
      7'b0011111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[127 : 124];
      7'b0100000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[131 : 128];
      7'b0100001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[135 : 132];
      7'b0100010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[139 : 136];
      7'b0100011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[143 : 140];
      7'b0100100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[147 : 144];
      7'b0100101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[151 : 148];
      7'b0100110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[155 : 152];
      7'b0100111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[159 : 156];
      7'b0101000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[163 : 160];
      7'b0101001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[167 : 164];
      7'b0101010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[171 : 168];
      7'b0101011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[175 : 172];
      7'b0101100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[179 : 176];
      7'b0101101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[183 : 180];
      7'b0101110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[187 : 184];
      7'b0101111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[191 : 188];
      7'b0110000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[195 : 192];
      7'b0110001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[199 : 196];
      7'b0110010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[203 : 200];
      7'b0110011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[207 : 204];
      7'b0110100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[211 : 208];
      7'b0110101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[215 : 212];
      7'b0110110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[219 : 216];
      7'b0110111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[223 : 220];
      7'b0111000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[227 : 224];
      7'b0111001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[231 : 228];
      7'b0111010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[235 : 232];
      7'b0111011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[239 : 236];
      7'b0111100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[243 : 240];
      7'b0111101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[247 : 244];
      7'b0111110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[251 : 248];
      7'b0111111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[255 : 252];
      7'b1000000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[259 : 256];
      7'b1000001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[263 : 260];
      7'b1000010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[267 : 264];
      7'b1000011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[271 : 268];
      7'b1000100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[275 : 272];
      7'b1000101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[279 : 276];
      7'b1000110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[283 : 280];
      7'b1000111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[287 : 284];
      7'b1001000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[291 : 288];
      7'b1001001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[295 : 292];
      7'b1001010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[299 : 296];
      7'b1001011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[303 : 300];
      7'b1001100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[307 : 304];
      7'b1001101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[311 : 308];
      7'b1001110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[315 : 312];
      7'b1001111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[319 : 316];
      7'b1010000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[323 : 320];
      7'b1010001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[327 : 324];
      7'b1010010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[331 : 328];
      7'b1010011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[335 : 332];
      7'b1010100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[339 : 336];
      7'b1010101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[343 : 340];
      7'b1010110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[347 : 344];
      7'b1010111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[351 : 348];
      7'b1011000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[355 : 352];
      7'b1011001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[359 : 356];
      7'b1011010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[363 : 360];
      7'b1011011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[367 : 364];
      7'b1011100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[371 : 368];
      7'b1011101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[375 : 372];
      7'b1011110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[379 : 376];
      7'b1011111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[383 : 380];
      7'b1100000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[387 : 384];
      7'b1100001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[391 : 388];
      7'b1100010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[395 : 392];
      7'b1100011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[399 : 396];
      7'b1100100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[403 : 400];
      7'b1100101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[407 : 404];
      7'b1100110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[411 : 408];
      7'b1100111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[415 : 412];
      7'b1101000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[419 : 416];
      7'b1101001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[423 : 420];
      7'b1101010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[427 : 424];
      7'b1101011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[431 : 428];
      7'b1101100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[435 : 432];
      7'b1101101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[439 : 436];
      7'b1101110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[443 : 440];
      7'b1101111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[447 : 444];
      7'b1110000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[451 : 448];
      7'b1110001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[455 : 452];
      7'b1110010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[459 : 456];
      7'b1110011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[463 : 460];
      7'b1110100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[467 : 464];
      7'b1110101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[471 : 468];
      7'b1110110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[475 : 472];
      7'b1110111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[479 : 476];
      7'b1111000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[483 : 480];
      7'b1111001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[487 : 484];
      7'b1111010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[491 : 488];
      7'b1111011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[495 : 492];
      7'b1111100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[499 : 496];
      7'b1111101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[503 : 500];
      7'b1111110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[507 : 504];
      default : t_dense_zero_payload_4 = t_dense_zero_payload_3[511 : 508];
    endcase
  end

  always @(*) begin
    case(t_sparse_packOut_payload_1)
      5'b00000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_0;
      5'b00001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_1;
      5'b00010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_2;
      5'b00011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_3;
      5'b00100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_4;
      5'b00101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_5;
      5'b00110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_6;
      5'b00111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_7;
      5'b01000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_8;
      5'b01001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_9;
      5'b01010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_10;
      5'b01011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_11;
      5'b01100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_12;
      5'b01101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_13;
      5'b01110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_14;
      5'b01111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_15;
      5'b10000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_16;
      5'b10001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_17;
      5'b10010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_18;
      5'b10011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_19;
      5'b10100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_20;
      5'b10101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_21;
      5'b10110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_22;
      5'b10111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_23;
      default : t_sparse_packOut_payload = sparse_busPayloadSubDiv_24;
    endcase
  end

  always @(*) begin
    case(t_kv_extPack_payload_2)
      4'b0000 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[31 : 0];
      4'b0001 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[63 : 32];
      4'b0010 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[95 : 64];
      4'b0011 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[127 : 96];
      4'b0100 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[159 : 128];
      4'b0101 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[191 : 160];
      4'b0110 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[223 : 192];
      4'b0111 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[255 : 224];
      4'b1000 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[287 : 256];
      4'b1001 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[319 : 288];
      4'b1010 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[351 : 320];
      4'b1011 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[383 : 352];
      4'b1100 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[415 : 384];
      4'b1101 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[447 : 416];
      4'b1110 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[479 : 448];
      default : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[511 : 480];
    endcase
  end

  assign io_bus_ready = busDeMux_io_input_ready;
  assign busTag = io_bus_payload_dest;
  assign mlpGBusHitNotSparse = ((busTag == 6'h0f) && (! io_enPredictor));
  assign lnScaleHit = (((6'h03 == busTag) || (6'h0c == busTag)) || (6'h12 == busTag));
  assign denseHit = (((((((6'h04 == busTag) || (6'h05 == busTag)) || (6'h07 == busTag)) || (6'h0b == busTag)) || (6'h0d == busTag)) || (6'h13 == busTag)) || mlpGBusHitNotSparse);
  assign sparseHit = (((6'h10 == busTag) || (6'h11 == busTag)) && (! mlpGBusHitNotSparse));
  assign kvHit = ((6'h06 == busTag) || (6'h08 == busTag));
  always @(*) begin
    busDeMuxSel = 3'b000;
    if(denseHit) begin
      busDeMuxSel = 3'b001;
    end else begin
      if(sparseHit) begin
        busDeMuxSel = 3'b010;
      end else begin
        if(kvHit) begin
          busDeMuxSel = 3'b011;
        end else begin
          if(lnScaleHit) begin
            busDeMuxSel = 3'b100;
          end
        end
      end
    end
  end

  always @(*) begin
    busMuxSel = 2'b00;
    if(denseHit) begin
      busMuxSel = 2'b01;
    end else begin
      if(sparseHit) begin
        busMuxSel = 2'b10;
      end else begin
        if(kvHit) begin
          busMuxSel = 2'b11;
        end
      end
    end
  end

  always @(*) begin
    miscInMuxSel = 2'b00;
    if(sparseHit) begin
      miscInMuxSel = 2'b01;
    end else begin
      if(kvHit) begin
        miscInMuxSel = 2'b10;
      end
    end
  end

  assign axi_busDataFifo_io_push_fire = (busMux_io_output_valid && busDataFifo_io_push_ready);
  assign busLinkFifo_io_push_payload_fragment = io_bus_payload_dest;
  assign axi_busDataFifo_io_pop_fire = (busDataFifo_io_pop_valid && int_bus_ready);
  assign int_bus_valid = busDataFifo_io_pop_valid;
  assign int_bus_payload_last = busLinkFifo_io_pop_payload_last;
  assign int_bus_payload_tuser = busLinkFifo_io_pop_payload_fragment;
  assign int_bus_payload_tdata = busDataFifo_io_pop_payload;
  assign isVOut = (io_bus_payload_dest == 6'h08);
  assign axpyHit = (6'h11 == io_bus_payload_dest);
  assign axi_miscFifo_io_push_fire = (miscInMux_io_output_valid && miscFifo_io_push_ready);
  assign tagFifo_io_push_payload = {{{axpyHit,isVOut},miscInMuxSel},io_bus_payload_dest};
  assign tagFifoDest = tagFifo_io_pop_payload[5 : 0];
  assign tagFifoSel = t_tagFifoSel[1 : 0];
  assign miscOutDeMux_io_select = t_io_select[1 : 0];
  assign axi_tagFifo_io_pop_fire = (tagFifo_io_pop_valid && miscOutDeMux_io_input_ready);
  assign ln_bufIn_valid = busDeMux_io_outputs_4_valid;
  assign ln_bufIn_payload = io_bus_payload_data;
  assign axi_ln_buf_io_push_fire = (ln_bufIn_valid && ln_buf_io_push_ready);
  always @(*) begin
    t_io_push_payload = 1'b0;
    if(axi_ln_buf_io_push_fire) begin
      t_io_push_payload = 1'b1;
    end
  end

  assign t_ln_bufIn_ready = (t_io_push_payload_2 == 2'b11);
  always @(*) begin
    t_io_push_payload_1 = (t_io_push_payload_2 + t_t_io_push_payload_1);
    if(1'b0) begin
      t_io_push_payload_1 = 2'b00;
    end
  end

  assign t_io_push_payload_3 = ln_bufIn_payload;
  assign ln_buf_io_push_payload = t_io_push_payload_4;
  assign ln_bufIn_ready = (ln_buf_io_push_ready && t_ln_bufIn_ready);
  assign ln_scaleOut_fire = (ln_scaleOut_valid && ln_scaleOut_ready);
  always @(*) begin
    t_ln_scaleOut_payload = 1'b0;
    if(ln_scaleOut_fire) begin
      t_ln_scaleOut_payload = 1'b1;
    end
  end

  assign t_io_pop_ready = (t_ln_scaleOut_payload_2 == 3'b111);
  always @(*) begin
    t_ln_scaleOut_payload_1 = (t_ln_scaleOut_payload_2 + t_t_ln_scaleOut_payload_1);
    if(1'b0) begin
      t_ln_scaleOut_payload_1 = 3'b000;
    end
  end

  assign ln_scaleOut_valid = ln_buf_io_pop_valid;
  assign t_ln_scaleOut_payload_3 = ln_buf_io_pop_payload;
  assign ln_scaleOut_payload = t_ln_scaleOut_payload_4;
  assign ln_buf_io_pop_ready = (ln_scaleOut_ready && t_io_pop_ready);
  assign ln_scaleOut_ready = ln_scaleOut_fifo_io_push_ready;
  assign int_lnScale_valid = ln_scaleOut_fifo_io_pop_valid;
  assign int_lnScale_payload = ln_scaleOut_fifo_io_pop_payload;
  assign dense_bus_valid = miscOutDeMux_io_outputs_0_valid;
  assign dense_bus_payload = miscFifo_io_pop_payload;
  assign dense_cntOvf = (dense_cnt == 3'b100);
  assign dense_bus_fire = (dense_bus_valid && dense_bus_ready);
  assign dense_bus_ready = dense_deMux_io_input_ready;
  assign dense_deMux_io_select = dense_cntIsZero;
  assign dense_toScale_valid = dense_deMux_io_outputs_0_valid;
  assign dense_toScale_payload = dense_bus_payload;
  assign dense_toZero_valid = dense_deMux_io_outputs_1_valid;
  assign dense_toZero_payload = dense_bus_payload;
  assign dense_toScale_ready = dense_scaleFifo_io_push_ready;
  assign dense_scale_fire = (dense_scale_valid && dense_scale_ready);
  always @(*) begin
    t_dense_scale_payload = 1'b0;
    if(dense_scale_fire) begin
      t_dense_scale_payload = 1'b1;
    end
  end

  assign t_io_pop_ready_1 = (t_dense_scale_payload_2 == 5'h1f);
  always @(*) begin
    t_dense_scale_payload_1 = (t_dense_scale_payload_2 + t_t_dense_scale_payload_1);
    if(1'b0) begin
      t_dense_scale_payload_1 = 5'h0;
    end
  end

  assign dense_scale_valid = dense_scaleFifo_io_pop_valid;
  assign t_dense_scale_payload_3 = dense_scaleFifo_io_pop_payload;
  assign dense_scale_payload = t_dense_scale_payload_4;
  assign dense_scaleFifo_io_pop_ready = (dense_scale_ready && t_io_pop_ready_1);
  always @(*) begin
    dense_zero_ready = dense_zeroPipe_ready;
    if((! dense_zeroPipe_valid)) begin
      dense_zero_ready = 1'b1;
    end
  end

  assign dense_zeroPipe_valid = dense_zero_rValid;
  assign dense_zeroPipe_payload = dense_zero_rData;
  always @(*) begin
    dense_toZero_ready = dense_toZero_m2sPipe_ready;
    if((! dense_toZero_m2sPipe_valid)) begin
      dense_toZero_ready = 1'b1;
    end
  end

  assign dense_toZero_m2sPipe_valid = dense_toZero_rValid;
  assign dense_toZero_m2sPipe_payload = dense_toZero_rData;
  assign dense_zero_fire = (dense_zero_valid && dense_zero_ready);
  always @(*) begin
    t_dense_zero_payload = 1'b0;
    if(dense_zero_fire) begin
      t_dense_zero_payload = 1'b1;
    end
  end

  assign t_dense_toZero_m2sPipe_ready = (t_dense_zero_payload_2 == 7'h7f);
  always @(*) begin
    t_dense_zero_payload_1 = (t_dense_zero_payload_2 + t_t_dense_zero_payload_1);
    if(1'b0) begin
      t_dense_zero_payload_1 = 7'h0;
    end
  end

  assign dense_zero_valid = dense_toZero_m2sPipe_valid;
  assign t_dense_zero_payload_3 = dense_toZero_m2sPipe_payload;
  assign dense_zero_payload = t_dense_zero_payload_4;
  assign dense_toZero_m2sPipe_ready = (dense_zero_ready && t_dense_toZero_m2sPipe_ready);
  assign dense_zeroAlign_valid = dense_zeroPipe_valid;
  assign dense_zeroPipe_ready = dense_zeroAlign_ready;
  assign dense_zeroAlign_payload = {4'd0, dense_zeroPipe_payload};
  assign sparse_gen_io_tag = io_bus_payload_dest;
  assign sparse_bus_valid = miscOutDeMux_io_outputs_1_valid;
  assign sparse_bus_tdata = miscFifo_io_pop_payload[499 : 0];
  assign sparse_bus_tuser = tagFifo_io_pop_payload[5 : 0];
  assign sparse_tagHit = {(6'h11 == sparse_bus_tuser),(6'h10 == sparse_bus_tuser)};
  assign sparse_packVec_0 = 8'h10;
  assign sparse_packVec_1 = 8'h10;
  assign sparse_packCnt = (sparse_tagHit[0] ? sparse_packVec_0 : sparse_packVec_1);
  assign sparse_cntLv1Ovf = (sparse_cntLv1 == 8'h18);
  assign sparse_cntLv2Ovf = (sparse_cntLv2 == t_sparse_cntLv2Ovf);
  always @(*) begin
    sparse_bus_ready = 1'b0;
    if(sparse_packOut_fire) begin
      if(sparse_cntLv1Ovf) begin
        sparse_bus_ready = 1'b1;
      end
      if(sparse_cntLv2Ovf) begin
        sparse_bus_ready = 1'b1;
      end
    end
  end

  assign sparse_packOut_fire = (sparse_packOut_valid && sparse_packOut_ready);
  assign sparse_busPayloadSubDiv_0 = sparse_bus_tdata[19 : 0];
  assign sparse_busPayloadSubDiv_1 = sparse_bus_tdata[39 : 20];
  assign sparse_busPayloadSubDiv_2 = sparse_bus_tdata[59 : 40];
  assign sparse_busPayloadSubDiv_3 = sparse_bus_tdata[79 : 60];
  assign sparse_busPayloadSubDiv_4 = sparse_bus_tdata[99 : 80];
  assign sparse_busPayloadSubDiv_5 = sparse_bus_tdata[119 : 100];
  assign sparse_busPayloadSubDiv_6 = sparse_bus_tdata[139 : 120];
  assign sparse_busPayloadSubDiv_7 = sparse_bus_tdata[159 : 140];
  assign sparse_busPayloadSubDiv_8 = sparse_bus_tdata[179 : 160];
  assign sparse_busPayloadSubDiv_9 = sparse_bus_tdata[199 : 180];
  assign sparse_busPayloadSubDiv_10 = sparse_bus_tdata[219 : 200];
  assign sparse_busPayloadSubDiv_11 = sparse_bus_tdata[239 : 220];
  assign sparse_busPayloadSubDiv_12 = sparse_bus_tdata[259 : 240];
  assign sparse_busPayloadSubDiv_13 = sparse_bus_tdata[279 : 260];
  assign sparse_busPayloadSubDiv_14 = sparse_bus_tdata[299 : 280];
  assign sparse_busPayloadSubDiv_15 = sparse_bus_tdata[319 : 300];
  assign sparse_busPayloadSubDiv_16 = sparse_bus_tdata[339 : 320];
  assign sparse_busPayloadSubDiv_17 = sparse_bus_tdata[359 : 340];
  assign sparse_busPayloadSubDiv_18 = sparse_bus_tdata[379 : 360];
  assign sparse_busPayloadSubDiv_19 = sparse_bus_tdata[399 : 380];
  assign sparse_busPayloadSubDiv_20 = sparse_bus_tdata[419 : 400];
  assign sparse_busPayloadSubDiv_21 = sparse_bus_tdata[439 : 420];
  assign sparse_busPayloadSubDiv_22 = sparse_bus_tdata[459 : 440];
  assign sparse_busPayloadSubDiv_23 = sparse_bus_tdata[479 : 460];
  assign sparse_busPayloadSubDiv_24 = sparse_bus_tdata[499 : 480];
  assign sparse_packOut_valid = sparse_bus_valid;
  assign sparse_packOut_payload = t_sparse_packOut_payload;
  assign sparse_packOut_ready = 1'b1;
  assign sparse_preScaleFifo_io_push_payload = sparse_packOut_payload[19 : 4];
  assign sparse_postScaleFifo_io_push_payload = sparse_packOut_payload[19 : 4];
  assign sparse_zeroFifo_io_push_payload = sparse_packOut_payload[3 : 0];
  assign sparse_selAxpy = tagFifo_io_pop_payload[9];
  assign sparse_preScaleFifo_io_push_valid = (sparse_packOut_valid && sparse_selAxpy);
  assign sparse_postScaleFifo_io_push_valid = (sparse_packOut_valid && (! sparse_selAxpy));
  assign sparse_zeroQueue_valid = sparse_zeroFifo_io_pop_valid;
  assign sparse_zeroQueue_payload = {4'b0000,sparse_zeroFifo_io_pop_payload};
  assign kv_bus_valid = miscOutDeMux_io_outputs_2_valid;
  assign kv_bus_payload = miscFifo_io_pop_payload;
  assign kv_extPack_fire = (kv_extPack_valid && kv_extPack_ready);
  always @(*) begin
    t_kv_extPack_payload = 1'b0;
    if(kv_extPack_fire) begin
      t_kv_extPack_payload = 1'b1;
    end
  end

  assign t_kv_bus_ready = (t_kv_extPack_payload_2 == 4'b1111);
  always @(*) begin
    t_kv_extPack_payload_1 = (t_kv_extPack_payload_2 + t_t_kv_extPack_payload_1);
    if(1'b0) begin
      t_kv_extPack_payload_1 = 4'b0000;
    end
  end

  assign kv_extPack_valid = kv_bus_valid;
  assign t_kv_extPack_payload_3 = kv_bus_payload;
  assign kv_extPack_payload = t_kv_extPack_payload_4;
  assign kv_bus_ready = (kv_extPack_ready && t_kv_bus_ready);
  assign kv_isVOut = tagFifo_io_pop_payload[8];
  assign kv_kCntOvf = (kv_kCnt == t_kv_kCntOvf);
  assign kv_vCntOvf = (kv_vCnt == t_kv_vCntOvf);
  assign kv_tokenHigh = io_token[9 : 4];
  assign kv_kCntHigh = kv_kCnt[9 : 4];
  assign kv_vCntHigh = kv_vCnt[9 : 4];
  assign kv_kCntLow = kv_kCnt[3 : 0];
  assign kv_vCntLow = kv_vCnt[3 : 0];
  assign kv_kPack_fire = (kv_kPack_valid && kv_kPack_ready);
  assign kv_vPack_fire = (kv_vPack_valid && kv_vPack_ready);
  assign kv_kSelLocal = (kv_tokenHighZeroDly || kv_kCntHighMatch);
  assign kv_vSelLocal = (kv_tokenHighZeroDly || kv_vCntHighMatch);
  always @(*) begin
    kv_extPack_ready = kv_extPack_m2sPipe_ready;
    if((! kv_extPack_m2sPipe_valid)) begin
      kv_extPack_ready = 1'b1;
    end
  end

  assign kv_extPack_m2sPipe_valid = kv_extPack_rValid;
  assign kv_extPack_m2sPipe_payload = kv_extPack_rData;
  assign kv_extPack_m2sPipe_ready = kv_extPackDeMux_io_input_ready;
  assign kv_extPackDeMux_io_select = kv_isVOut;
  assign io_kSzOut_ready = kv_kMux_io_inputs_1_ready;
  assign kv_kMux_io_select = kv_kSelLocal;
  assign kv_kPack_valid = kv_kMux_io_output_valid;
  assign kv_kPack_payload = kv_kMux_io_output_payload;
  assign io_vSzOut_ready = kv_vMux_io_inputs_1_ready;
  assign kv_vMux_io_select = kv_vSelLocal;
  assign kv_vPack_valid = kv_vMux_io_output_valid;
  assign kv_vPack_payload = kv_vMux_io_output_payload;
  assign kv_kPack_ready = kv_kFork_io_input_ready;
  assign kv_kScale_valid = kv_kFork_io_outputs_0_valid;
  assign kv_kScale_payload = kv_kPack_payload[15 : 0];
  assign kv_kZero_valid = kv_kFork_io_outputs_1_valid;
  assign kv_kZero_payload = t_kv_kZero_payload[7 : 0];
  assign kv_vPack_ready = kv_vFork_io_input_ready;
  assign kv_vScalePreInsert_valid = kv_vFork_io_outputs_0_valid;
  assign kv_vScalePreInsert_payload = kv_vPack_payload[15 : 0];
  assign kv_vZero_valid = kv_vFork_io_outputs_1_valid;
  assign kv_vZero_payload = t_kv_vZero_payload[7 : 0];
  assign kv_vScale_fire = (kv_vScale_valid && kv_vScale_ready);
  assign kv_vScaleOne_valid = (kv_vScalePreInsert_valid && kv_vScaleCntIsZero);
  assign kv_vScaleOne_payload = 16'h3c00;
  assign kv_vScalePreInsert_ready = kv_vScaleMux_io_inputs_0_ready;
  assign kv_vScaleOne_ready = kv_vScaleMux_io_inputs_1_ready;
  assign kv_vScaleMux_io_select = kv_vScaleCntIsZero;
  assign kv_vScale_valid = kv_vScaleMux_io_output_valid;
  assign kv_vScale_payload = kv_vScaleMux_io_output_payload;
  assign postMlpGBusHitNotSparse = ((int_bus_payload_tuser == 6'h0f) && (! io_enPredictor));
  assign postSparseHit = (((6'h10 == int_bus_payload_tuser) || (6'h11 == int_bus_payload_tuser)) && (! postMlpGBusHitNotSparse));
  assign postKHit = (int_bus_payload_tuser == 6'h06);
  assign postVHit = (int_bus_payload_tuser == 6'h08);
  assign dense_zeroAlign_ready = zeroInt4Mux_io_inputs_0_ready;
  assign sparse_zeroQueue_ready = zeroInt4Mux_io_inputs_1_ready;
  assign zeroInt4Mux_io_select = postSparseHit;
  assign int_zeroInt4_valid = zeroInt4Mux_io_output_valid;
  assign int_zeroInt4_payload = zeroInt4Mux_io_output_payload;
  assign kv_vZero_ready = vZeroFifo_io_push_ready;
  assign kv_vScale_ready = vScaleFifo_io_push_ready;
  assign kv_kZero_ready = zeroInt8Mux_io_inputs_1_ready;
  always @(*) begin
    zeroInt8Mux_io_select = 2'b00;
    if(postKHit) begin
      zeroInt8Mux_io_select = 2'b01;
    end
    if(postVHit) begin
      zeroInt8Mux_io_select = 2'b10;
    end
  end

  assign int_zeroInt8_valid = zeroInt8Mux_io_output_valid;
  assign int_zeroInt8_payload = zeroInt8Mux_io_output_payload;
  assign dense_scale_ready = dense_scale_to_ip_s_axis_a_tready;
  assign kv_kScale_ready = kv_kScale_to_ip_s_axis_a_tready;
  assign int_postScale_valid = postScaleMux_io_output_valid;
  assign int_postScale_payload = postScaleMux_io_output_payload;
  assign postMlpCfgHitNotSparse = ((io_postCfgTag == 6'h16) && (! io_enPredictor));
  assign postCfgDenseHit = (((((((((t_postCfgDenseHit == io_postCfgTag) || (t_postCfgDenseHit_1 == io_postCfgTag)) || (6'h07 == io_postCfgTag)) || (6'h10 == io_postCfgTag)) || (6'h11 == io_postCfgTag)) || (6'h13 == io_postCfgTag)) || (6'h1b == io_postCfgTag)) || (6'h23 == io_postCfgTag)) || postMlpCfgHitNotSparse);
  assign postCfgSparseHit = (((((6'h1c == io_postCfgTag) || (6'h16 == io_postCfgTag)) || (6'h18 == io_postCfgTag)) || (6'h1f == io_postCfgTag)) && (! postMlpCfgHitNotSparse));
  assign postCfgKvHit = (io_postCfgTag == 6'h0d);
  always @(*) begin
    postSel = 2'b11;
    if(postCfgDenseHit) begin
      postSel = 2'b00;
    end
    if(postCfgSparseHit) begin
      postSel = 2'b01;
    end
    if(postCfgKvHit) begin
      postSel = 2'b10;
    end
  end

  assign int_preScale_valid = preScaleMux_io_output_valid;
  assign int_preScale_payload = preScaleMux_io_output_payload;
  assign preCfgSparseHit = ((((6'h1c == io_preCfgTag) || (6'h16 == io_preCfgTag)) || (6'h18 == io_preCfgTag)) || (6'h1f == io_preCfgTag));
  assign preCfgKvHit = (io_preCfgTag == 6'h0f);
  always @(*) begin
    preSel = 2'b10;
    if(preCfgSparseHit) begin
      preSel = 2'b00;
    end
    if(preCfgKvHit) begin
      preSel = 2'b01;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      t_io_push_payload_2 <= 2'b00;
      t_ln_scaleOut_payload_2 <= 3'b000;
      dense_cnt <= 3'b000;
      dense_cntIsZero <= 1'b1;
      t_dense_scale_payload_2 <= 5'h0;
      dense_zero_rValid <= 1'b0;
      dense_toZero_rValid <= 1'b0;
      t_dense_zero_payload_2 <= 7'h0;
      sparse_cntLv1 <= 8'h0;
      sparse_cntLv2 <= 8'h0;
      t_kv_extPack_payload_2 <= 4'b0000;
      kv_kCnt <= 10'h0;
      kv_vCnt <= 10'h0;
      kv_tokenHighZeroDly <= 1'b1;
      kv_kCntHighMatch <= 1'b0;
      kv_vCntHighMatch <= 1'b0;
      kv_extPack_rValid <= 1'b0;
      kv_vScaleCnt <= 10'h0;
      kv_vScaleCntIsZero <= 1'b1;
    end else begin
      t_io_push_payload_2 <= t_io_push_payload_1;
      t_ln_scaleOut_payload_2 <= t_ln_scaleOut_payload_1;
      if(dense_bus_fire) begin
        dense_cnt <= (dense_cnt + 3'b001);
        dense_cntIsZero <= 1'b0;
        if(dense_cntOvf) begin
          dense_cnt <= 3'b000;
          dense_cntIsZero <= 1'b1;
        end
      end
      t_dense_scale_payload_2 <= t_dense_scale_payload_1;
      if(dense_zero_ready) begin
        dense_zero_rValid <= dense_zero_valid;
      end
      if(dense_toZero_ready) begin
        dense_toZero_rValid <= dense_toZero_valid;
      end
      t_dense_zero_payload_2 <= t_dense_zero_payload_1;
      if(sparse_packOut_fire) begin
        sparse_cntLv1 <= (sparse_cntLv1 + 8'h01);
        sparse_cntLv2 <= (sparse_cntLv2 + 8'h01);
        if(sparse_cntLv1Ovf) begin
          sparse_cntLv1 <= 8'h0;
        end
        if(sparse_cntLv2Ovf) begin
          sparse_cntLv1 <= 8'h0;
          sparse_cntLv2 <= 8'h0;
        end
      end
      t_kv_extPack_payload_2 <= t_kv_extPack_payload_1;
      kv_tokenHighZeroDly <= (kv_tokenHigh == 6'h0);
      if(kv_kPack_fire) begin
        kv_kCnt <= (kv_kCnt + 10'h001);
        if(((&kv_kCntLow) && (kv_kCntHigh == t_when))) begin
          kv_kCntHighMatch <= 1'b1;
        end
        if(kv_kCntOvf) begin
          kv_kCnt <= 10'h0;
          kv_kCntHighMatch <= 1'b0;
        end
      end
      if(kv_vPack_fire) begin
        kv_vCnt <= (kv_vCnt + 10'h001);
        if(((&kv_vCntLow) && (kv_vCntHigh == t_when_1))) begin
          kv_vCntHighMatch <= 1'b1;
        end
        if(kv_vCntOvf) begin
          kv_vCnt <= 10'h0;
          kv_vCntHighMatch <= 1'b0;
        end
      end
      if(kv_extPack_ready) begin
        kv_extPack_rValid <= kv_extPack_valid;
      end
      if(kv_vScale_fire) begin
        kv_vScaleCnt <= (kv_vScaleCnt + 10'h001);
        kv_vScaleCntIsZero <= 1'b0;
        if((kv_vScaleCnt == io_token)) begin
          kv_vScaleCnt <= 10'h0;
          kv_vScaleCntIsZero <= 1'b1;
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(dense_zero_ready) begin
      dense_zero_rData <= dense_zero_payload;
    end
    if(dense_toZero_ready) begin
      dense_toZero_rData <= dense_toZero_payload;
    end
    if(kv_extPack_ready) begin
      kv_extPack_rData <= kv_extPack_payload;
    end
  end


endmodule

module StreamFifo_1 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload_data,
  input  wire [63:0]   io_push_payload_keep,
  input  wire          io_push_payload_last,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload_data,
  output wire [63:0]   io_pop_payload_keep,
  output wire          io_pop_payload_last,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [576:0]  logic_ram_spinal_port1;
  wire       [576:0]  t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data_data;
  wire       [63:0]   logic_push_onRam_write_payload_data_keep;
  wire                logic_push_onRam_write_payload_data_last;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp_data;
  wire       [63:0]   logic_pop_sync_readPort_rsp_keep;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [576:0]  t_logic_pop_sync_readPort_rsp_data;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload_data;
  wire       [63:0]   logic_pop_sync_readArbitation_translated_payload_keep;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [576:0] logic_ram [0:511];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_last,{logic_push_onRam_write_payload_data_keep,logic_push_onRam_write_payload_data_data}};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data_data = io_push_payload_data;
  assign logic_push_onRam_write_payload_data_keep = io_push_payload_keep;
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_data = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_data = t_logic_pop_sync_readPort_rsp_data[511 : 0];
  assign logic_pop_sync_readPort_rsp_keep = t_logic_pop_sync_readPort_rsp_data[575 : 512];
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_data[576];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_data = logic_pop_sync_readPort_rsp_data;
  assign logic_pop_sync_readArbitation_translated_payload_keep = logic_pop_sync_readPort_rsp_keep;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_data = logic_pop_sync_readArbitation_translated_payload_data;
  assign io_pop_payload_keep = logic_pop_sync_readArbitation_translated_payload_keep;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_tdata,
  input  wire [5:0]    io_push_tuser,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_tdata,
  output wire [5:0]    io_pop_tuser,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [21:0]   logic_ram_spinal_port1;
  wire       [21:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_tuser;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_tdata;
  wire       [5:0]    logic_pop_sync_readPort_tuser;
  wire       [21:0]   t_logic_pop_sync_readPort_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_tuser;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [21:0] logic_ram [0:63];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_tuser,logic_push_onRam_write_payload_tdata};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_tdata = io_push_tdata;
  assign logic_push_onRam_write_payload_tuser = io_push_tuser;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_tdata = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_tdata = t_logic_pop_sync_readPort_tdata[15 : 0];
  assign logic_pop_sync_readPort_tuser = t_logic_pop_sync_readPort_tdata[21 : 16];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_tdata = logic_pop_sync_readPort_tdata;
  assign logic_pop_sync_readArbitation_translated_tuser = logic_pop_sync_readPort_tuser;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_tdata = logic_pop_sync_readArbitation_translated_tdata;
  assign io_pop_tuser = logic_pop_sync_readArbitation_translated_tuser;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module GenMemCmdLenAlign (
  input  wire          io_tokenIndex_valid,
  output wire          io_tokenIndex_ready,
  input  wire [15:0]   io_tokenIndex_tdata,
  input  wire [5:0]    io_tokenIndex_tuser,
  input  wire          io_mm2s_valid,
  output wire          io_mm2s_ready,
  input  wire [511:0]  io_mm2s_payload_data,
  input  wire [63:0]   io_mm2s_payload_keep,
  input  wire          io_mm2s_payload_last,
  output wire          io_s2mm_valid,
  input  wire          io_s2mm_ready,
  output wire [511:0]  io_s2mm_payload_data,
  output wire [63:0]   io_s2mm_payload_keep,
  output wire          io_s2mm_payload_last,
  output wire          io_mm2sCmd_valid,
  input  wire          io_mm2sCmd_ready,
  output wire [71:0]   io_mm2sCmd_payload,
  output wire          io_s2mmCmd_valid,
  input  wire          io_s2mmCmd_ready,
  output wire [71:0]   io_s2mmCmd_payload,
  output wire          local_bus_valid,
  input  wire          local_bus_ready,
  output wire [511:0]  local_bus_payload_data,
  output wire          local_bus_payload_last,
  output wire [5:0]    local_bus_payload_dest,
  input  wire          local_kvBus_valid,
  output wire          local_kvBus_ready,
  input  wire [511:0]  local_kvBus_payload_data,
  input  wire          local_kvBus_payload_last,
  input  wire [5:0]    local_kvBus_payload_dest,
  input  wire          local_index_valid,
  input  wire          local_index_payload_last,
  input  wire [15:0]   local_index_payload_tdata,
  input  wire [5:0]    local_index_payload_tuser,
  input  wire          status_enPredictor,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                indexCmdGen_indexMux_io_output_ready;
  wire       [0:0]    indexCmdGen_deMux_io_select;
  wire       [1:0]    logits_mux_io_select;
  wire                logits_mux_io_inputs_2_payload_last;
  wire       [71:0]   logits_mux_io_inputs_2_payload_fragment;
  wire                logits_mux_io_inputs_3_payload_last;
  wire       [71:0]   logits_mux_io_inputs_3_payload_fragment;
  wire                tagFifo_io_pop_ready;
  reg                 s2mm_tokenEnFifo_io_pop_ready;
  wire                indexCmdGen_indexMux_io_inputs_0_ready;
  wire                indexCmdGen_indexMux_io_inputs_1_ready;
  wire                indexCmdGen_indexMux_io_output_valid;
  wire                indexCmdGen_indexMux_io_output_payload_last;
  wire       [71:0]   indexCmdGen_indexMux_io_output_payload_fragment;
  wire                indexCmdGen_indexCmdFifo_io_push_ready;
  wire                indexCmdGen_indexCmdFifo_io_pop_valid;
  wire       [71:0]   indexCmdGen_indexCmdFifo_io_pop_payload;
  wire       [12:0]   indexCmdGen_indexCmdFifo_io_occupancy;
  wire       [12:0]   indexCmdGen_indexCmdFifo_io_availability;
  wire                indexCmdGen_indexLastFifo_io_push_ready;
  wire                indexCmdGen_indexLastFifo_io_pop_valid;
  wire                indexCmdGen_indexLastFifo_io_pop_payload;
  wire       [12:0]   indexCmdGen_indexLastFifo_io_occupancy;
  wire       [12:0]   indexCmdGen_indexLastFifo_io_availability;
  wire                indexCmdGen_deMux_io_input_ready;
  wire                indexCmdGen_deMux_io_outputs_0_valid;
  wire                indexCmdGen_deMux_io_outputs_0_payload_last;
  wire       [71:0]   indexCmdGen_deMux_io_outputs_0_payload_fragment;
  wire                indexCmdGen_deMux_io_outputs_1_valid;
  wire                indexCmdGen_deMux_io_outputs_1_payload_last;
  wire       [71:0]   indexCmdGen_deMux_io_outputs_1_payload_fragment;
  wire                attnKV_mux_io_inputs_0_ready;
  wire                attnKV_mux_io_inputs_1_ready;
  wire                attnKV_mux_io_output_valid;
  wire                attnKV_mux_io_output_payload_last;
  wire       [71:0]   attnKV_mux_io_output_payload_fragment;
  wire                attnQKVNoSz_mux_io_inputs_0_ready;
  wire                attnQKVNoSz_mux_io_inputs_1_ready;
  wire                attnQKVNoSz_mux_io_inputs_2_ready;
  wire                attnQKVNoSz_mux_io_inputs_3_ready;
  wire                attnQKVNoSz_mux_io_inputs_4_ready;
  wire                attnQKVNoSz_mux_io_output_valid;
  wire                attnQKVNoSz_mux_io_output_payload_last;
  wire       [71:0]   attnQKVNoSz_mux_io_output_payload_fragment;
  wire                attnQKVWithSz_mux_io_inputs_0_ready;
  wire                attnQKVWithSz_mux_io_inputs_1_ready;
  wire                attnQKVWithSz_mux_io_inputs_2_ready;
  wire                attnQKVWithSz_mux_io_inputs_3_ready;
  wire                attnQKVWithSz_mux_io_inputs_4_ready;
  wire                attnQKVWithSz_mux_io_inputs_5_ready;
  wire                attnQKVWithSz_mux_io_inputs_6_ready;
  wire                attnQKVWithSz_mux_io_output_valid;
  wire                attnQKVWithSz_mux_io_output_payload_last;
  wire       [71:0]   attnQKVWithSz_mux_io_output_payload_fragment;
  wire                mlpDense_mux_io_inputs_0_ready;
  wire                mlpDense_mux_io_inputs_1_ready;
  wire                mlpDense_mux_io_inputs_2_ready;
  wire                mlpDense_mux_io_inputs_3_ready;
  wire                mlpDense_mux_io_output_valid;
  wire                mlpDense_mux_io_output_payload_last;
  wire       [71:0]   mlpDense_mux_io_output_payload_fragment;
  wire                logits_mux_io_inputs_0_ready;
  wire                logits_mux_io_inputs_1_ready;
  wire                logits_mux_io_inputs_2_ready;
  wire                logits_mux_io_inputs_3_ready;
  wire                logits_mux_io_output_valid;
  wire                logits_mux_io_output_payload_last;
  wire       [71:0]   logits_mux_io_output_payload_fragment;
  wire                mm2sCmdMux_io_inputs_0_ready;
  wire                mm2sCmdMux_io_inputs_1_ready;
  wire                mm2sCmdMux_io_inputs_2_ready;
  wire                mm2sCmdMux_io_inputs_3_ready;
  wire                mm2sCmdMux_io_inputs_4_ready;
  wire                mm2sCmdMux_io_inputs_5_ready;
  wire                mm2sCmdMux_io_inputs_6_ready;
  wire                mm2sCmdMux_io_inputs_7_ready;
  wire                mm2sCmdMux_io_output_valid;
  wire                mm2sCmdMux_io_output_payload_last;
  wire       [71:0]   mm2sCmdMux_io_output_payload_fragment;
  wire                busTagMux_io_inputs_0_ready;
  wire                busTagMux_io_inputs_1_ready;
  wire                busTagMux_io_inputs_2_ready;
  wire                busTagMux_io_inputs_3_ready;
  wire                busTagMux_io_inputs_4_ready;
  wire                busTagMux_io_inputs_5_ready;
  wire                busTagMux_io_inputs_6_ready;
  wire                busTagMux_io_inputs_7_ready;
  wire                busTagMux_io_output_valid;
  wire       [5:0]    busTagMux_io_output_payload;
  wire                tagFifo_io_push_ready;
  wire                tagFifo_io_pop_valid;
  wire       [5:0]    tagFifo_io_pop_payload;
  wire       [6:0]    tagFifo_io_occupancy;
  wire       [6:0]    tagFifo_io_availability;
  wire                s2mm_tokenEnFifo_io_push_ready;
  wire                s2mm_tokenEnFifo_io_pop_valid;
  wire       [6:0]    s2mm_tokenEnFifo_io_occupancy;
  wire       [6:0]    s2mm_tokenEnFifo_io_availability;
  wire                s2mm_cmdFifo_io_push_ready;
  wire                s2mm_cmdFifo_io_pop_valid;
  wire       [71:0]   s2mm_cmdFifo_io_pop_payload;
  wire       [5:0]    s2mm_cmdFifo_io_occupancy;
  wire       [5:0]    s2mm_cmdFifo_io_availability;
  wire       [31:0]   t_headBaseNext;
  wire       [31:0]   t_layerBaseNext;
  wire       [31:0]   t_tokenIn_payload_fragment;
  wire       [28:0]   t_tokenIn_payload_fragment_1;
  wire       [28:0]   t_tokenIn_payload_fragment_2;
  wire       [22:0]   t_tokenIn_payload_fragment_3;
  wire       [12:0]   t_tokenIn_payload_fragment_4;
  wire       [31:0]   t_attnLn_payload_fragment;
  wire       [22:0]   t_attnLn_payload_fragment_1;
  wire       [13:0]   t_attnLn_payload_fragment_2;
  reg        [25:0]   t_indexCmdGen_selDenseBaseAddr;
  reg        [10:0]   t_indexCmdGen_selDenseLen;
  reg        [3:0]    t_indexCmdGen_selDenseTag;
  wire       [13:0]   t_t_indexCmdGen_denseU_payload_fragment_2;
  wire       [31:0]   t_indexCmdGen_denseU_payload_fragment_3;
  wire       [13:0]   t_t_indexCmdGen_denseD_payload_fragment_2;
  wire       [31:0]   t_indexCmdGen_denseD_payload_fragment_3;
  wire       [13:0]   t_t_attnKV_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnKV_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnKV_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnKV_attnVCmdVec_payload_fragment_3;
  reg        [5:0]    t_attnKV_tag_payload;
  wire       [13:0]   t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_3;
  wire       [31:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2;
  reg        [5:0]    t_attnQKVNoSz_tag_payload;
  wire       [13:0]   t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_3;
  wire       [31:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment_1;
  wire       [11:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment_1;
  wire       [11:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2;
  reg        [5:0]    t_attnQKVWithSz_tag_payload;
  wire       [31:0]   t_mlpDense_mlpLnCmd_payload_fragment;
  wire       [22:0]   t_mlpDense_mlpLnCmd_payload_fragment_1;
  wire       [12:0]   t_mlpDense_mlpLnCmd_payload_fragment_2;
  wire       [13:0]   t_t_mlpDense_attnOCmdVec_payload_fragment_2;
  wire       [31:0]   t_mlpDense_attnOCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2;
  wire       [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_3;
  reg        [5:0]    t_mlpDense_tag_payload;
  wire       [31:0]   t_logits_lgDenseScale_payload_fragment;
  wire       [30:0]   t_logits_lgDenseScale_payload_fragment_1;
  wire       [22:0]   t_logits_lgDenseScale_payload_fragment_2;
  wire       [12:0]   t_logits_lgDenseScale_payload_fragment_3;
  wire       [13:0]   t_t_logits_lgDenseHeadVec_payload_fragment_2;
  wire       [31:0]   t_logits_lgDenseHeadVec_payload_fragment_3;
  reg        [5:0]    t_logits_tag_payload;
  wire       [31:0]   t_s2mm_headBaseNext;
  wire       [31:0]   t_s2mm_layerBaseNext;
  wire       [31:0]   t_s2mm_kCacheCmd;
  wire       [31:0]   t_s2mm_kCacheCmd_1;
  wire       [16:0]   t_s2mm_kCacheCmd_2;
  wire       [31:0]   t_s2mm_kCacheCmd_3;
  wire       [22:0]   t_s2mm_kCacheCmd_4;
  wire       [7:0]    t_s2mm_kCacheCmd_5;
  wire       [31:0]   t_s2mm_vCacheCmd;
  wire       [31:0]   t_s2mm_vCacheCmd_1;
  wire       [16:0]   t_s2mm_vCacheCmd_2;
  wire       [31:0]   t_s2mm_vCacheCmd_3;
  wire       [22:0]   t_s2mm_vCacheCmd_4;
  wire       [7:0]    t_s2mm_vCacheCmd_5;
  wire       [31:0]   t_s2mm_kSzCmd;
  wire       [31:0]   t_s2mm_kSzCmd_1;
  wire       [11:0]   t_s2mm_kSzCmd_2;
  wire       [31:0]   t_s2mm_kSzCmd_3;
  wire       [22:0]   t_s2mm_kSzCmd_4;
  wire       [6:0]    t_s2mm_kSzCmd_5;
  wire       [31:0]   t_s2mm_vSzCmd;
  wire       [31:0]   t_s2mm_vSzCmd_1;
  wire       [11:0]   t_s2mm_vSzCmd_2;
  wire       [31:0]   t_s2mm_vSzCmd_3;
  wire       [22:0]   t_s2mm_vSzCmd_4;
  wire       [6:0]    t_s2mm_vSzCmd_5;
  reg        [71:0]   t_s2mm_s2mmCmd_payload;
  wire                t_when;
  reg        [9:0]    token;
  wire       [5:0]    tokenHigh;
  wire       [3:0]    tokenLow;
  wire                firstToken;
  wire                noSzFromMem;
  wire       [20:0]   mallocPerHead;
  reg        [31:0]   headBase;
  reg        [31:0]   headBaseNext;
  wire                enIncHead;
  reg        [3:0]    headCnt;
  wire                headCntAbout2Ovf;
  reg                 headCntOvf;
  wire       [25:0]   mallocPerLayer;
  reg        [31:0]   layerBase;
  reg        [31:0]   layerBaseNext;
  reg                 enIncLayer;
  reg        [4:0]    layerCnt;
  wire                layerCntAbout2Ovf;
  reg                 layerCntOvf;
  reg        [31:0]   attnHeadBase;
  wire       [31:0]   attnHeadBaseNext;
  wire                tokenIn_valid;
  wire                tokenIn_ready;
  wire                tokenIn_payload_last;
  wire       [71:0]   tokenIn_payload_fragment;
  wire                tokenTag_valid;
  wire                tokenTag_ready;
  wire       [5:0]    tokenTag_payload;
  wire                tokenIn_fire;
  wire                attnLn_valid;
  wire                attnLn_ready;
  wire                attnLn_payload_last;
  wire       [71:0]   attnLn_payload_fragment;
  wire                attnLnTag_valid;
  wire                attnLnTag_ready;
  wire       [5:0]    attnLnTag_payload;
  wire                attnLn_fire;
  wire       [25:0]   indexCmdGen_denseBaseAddrOs_0;
  wire       [25:0]   indexCmdGen_denseBaseAddrOs_1;
  wire       [10:0]   indexCmdGen_denseLen_0;
  wire       [10:0]   indexCmdGen_denseLen_1;
  wire       [3:0]    indexCmdGen_denseTag_0;
  wire       [3:0]    indexCmdGen_denseTag_1;
  reg        [0:0]    indexCmdGen_denseLastCnt;
  wire       [25:0]   indexCmdGen_selDenseBaseAddr;
  wire       [10:0]   indexCmdGen_selDenseLen;
  wire       [3:0]    indexCmdGen_selDenseTag;
  reg        [25:0]   indexCmdGen_selBaseAddr;
  reg        [10:0]   indexCmdGen_selLen;
  reg        [3:0]    indexCmdGen_selTag;
  wire                indexCmdGen_indexFlow_valid;
  wire                indexCmdGen_indexFlow_payload_last;
  wire       [15:0]   indexCmdGen_indexFlow_payload_fragment;
  reg                 local_index_valid_regNext;
  reg                 local_index_payload_last_regNext;
  reg        [15:0]   t_indexCmdGen_indexFlow_payload_fragment;
  reg        [10:0]   t_indexCmdGen_denseU_payload_last;
  reg        [10:0]   t_indexCmdGen_denseU_payload_last_1;
  reg                 t_indexCmdGen_denseU_payload_last_2;
  wire                t_indexCmdGen_denseU_payload_last_3;
  reg        [31:0]   t_indexCmdGen_denseU_payload_fragment;
  reg        [31:0]   t_indexCmdGen_denseU_payload_fragment_1;
  reg        [22:0]   t_indexCmdGen_denseU_payload_fragment_2;
  wire                indexCmdGen_denseU_valid;
  wire                indexCmdGen_denseU_ready;
  wire                indexCmdGen_denseU_payload_last;
  wire       [71:0]   indexCmdGen_denseU_payload_fragment;
  wire                indexCmdGen_denseU_fire;
  reg        [10:0]   t_indexCmdGen_denseD_payload_last;
  reg        [10:0]   t_indexCmdGen_denseD_payload_last_1;
  reg                 t_indexCmdGen_denseD_payload_last_2;
  wire                t_indexCmdGen_denseD_payload_last_3;
  reg        [31:0]   t_indexCmdGen_denseD_payload_fragment;
  reg        [31:0]   t_indexCmdGen_denseD_payload_fragment_1;
  reg        [22:0]   t_indexCmdGen_denseD_payload_fragment_2;
  wire                indexCmdGen_denseD_valid;
  wire                indexCmdGen_denseD_ready;
  wire                indexCmdGen_denseD_payload_last;
  wire       [71:0]   indexCmdGen_denseD_payload_fragment;
  wire                indexCmdGen_denseD_fire;
  reg                 indexCmdGen_enDenseUD;
  reg                 indexCmdGen_indexFlow_payload_first;
  wire                indexCmdGen_indexCmd_valid;
  wire                indexCmdGen_indexCmd_payload_last;
  wire       [71:0]   indexCmdGen_indexCmd_payload_fragment;
  wire                cmdGen_indexCmdGen_indexCmdFifo_io_push_fire;
  wire                cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire;
  wire                indexCmdGen_indexCmdOut_valid;
  wire                indexCmdGen_indexCmdOut_ready;
  wire                indexCmdGen_indexCmdOut_payload_last;
  wire       [71:0]   indexCmdGen_indexCmdOut_payload_fragment;
  reg        [5:0]    t_attnKV_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnKV_attnKCmdVec_payload_last_1;
  reg                 t_attnKV_attnKCmdVec_payload_last_2;
  wire                t_attnKV_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnKV_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnKV_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnKV_attnKCmdVec_payload_fragment_2;
  wire                attnKV_attnKCmdVec_valid;
  wire                attnKV_attnKCmdVec_ready;
  wire                attnKV_attnKCmdVec_payload_last;
  wire       [71:0]   attnKV_attnKCmdVec_payload_fragment;
  wire                attnKV_attnKCmdVec_fire;
  reg        [5:0]    t_attnKV_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnKV_attnVCmdVec_payload_last_1;
  reg                 t_attnKV_attnVCmdVec_payload_last_2;
  wire                t_attnKV_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnKV_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnKV_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnKV_attnVCmdVec_payload_fragment_2;
  wire                attnKV_attnVCmdVec_valid;
  wire                attnKV_attnVCmdVec_ready;
  wire                attnKV_attnVCmdVec_payload_last;
  wire       [71:0]   attnKV_attnVCmdVec_payload_fragment;
  wire                attnKV_attnVCmdVec_fire;
  reg        [0:0]    attnKV_sel;
  wire                attnKV_muxOutFire;
  reg                 cmdGen_attnKV_mux_io_output_payload_first;
  wire                attnKV_muxOutIsFirst;
  wire                attnKV_selOvf;
  wire       [5:0]    attnKV_tagVec_0;
  wire       [5:0]    attnKV_tagVec_1;
  reg        [0:0]    attnKV_tagSel;
  wire                attnKV_tagFire;
  wire                attnKV_tag_valid;
  wire                attnKV_tag_ready;
  wire       [5:0]    attnKV_tag_payload;
  wire                attnKV_cmd_valid;
  wire                attnKV_cmd_ready;
  wire                attnKV_cmd_payload_last;
  wire       [71:0]   attnKV_cmd_payload_fragment;
  reg        [5:0]    t_attnQKVNoSz_attnQCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnQCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnQCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnQCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnQCmdVec_valid;
  wire                attnQKVNoSz_attnQCmdVec_ready;
  wire                attnQKVNoSz_attnQCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnQCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnQCmdVec_fire;
  reg        [5:0]    t_attnQKVNoSz_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnKCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnKCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnKCmdVec_valid;
  wire                attnQKVNoSz_attnKCmdVec_ready;
  wire                attnQKVNoSz_attnKCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnKCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnKCmdVec_fire;
  reg        [5:0]    t_attnQKVNoSz_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnVCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnVCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnVCmdVec_valid;
  wire                attnQKVNoSz_attnVCmdVec_ready;
  wire                attnQKVNoSz_attnVCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnVCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnVCmdVec_fire;
  wire                attnQKVNoSz_attnKCacheCmd_valid;
  wire                attnQKVNoSz_attnKCacheCmd_ready;
  wire                attnQKVNoSz_attnKCacheCmd_payload_last;
  wire       [71:0]   attnQKVNoSz_attnKCacheCmd_payload_fragment;
  wire                attnQKVNoSz_attnVCacheCmd_valid;
  wire                attnQKVNoSz_attnVCacheCmd_ready;
  wire                attnQKVNoSz_attnVCacheCmd_payload_last;
  wire       [71:0]   attnQKVNoSz_attnVCacheCmd_payload_fragment;
  reg        [2:0]    attnQKVNoSz_sel;
  wire                attnQKVNoSz_muxOutFire;
  reg                 cmdGen_attnQKVNoSz_mux_io_output_payload_first;
  wire                attnQKVNoSz_muxOutIsFirst;
  wire                attnQKVNoSz_selOvf;
  wire       [5:0]    attnQKVNoSz_tagVec_0;
  wire       [5:0]    attnQKVNoSz_tagVec_1;
  wire       [5:0]    attnQKVNoSz_tagVec_2;
  wire       [5:0]    attnQKVNoSz_tagVec_3;
  wire       [5:0]    attnQKVNoSz_tagVec_4;
  reg        [2:0]    attnQKVNoSz_tagSel;
  wire                attnQKVNoSz_tagFire;
  wire                attnQKVNoSz_tag_valid;
  wire                attnQKVNoSz_tag_ready;
  wire       [5:0]    attnQKVNoSz_tag_payload;
  wire                attnQKVNoSz_cmd_valid;
  wire                attnQKVNoSz_cmd_ready;
  wire                attnQKVNoSz_cmd_payload_last;
  wire       [71:0]   attnQKVNoSz_cmd_payload_fragment;
  reg        [5:0]    t_attnQKVWithSz_attnQCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnQCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnQCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnQCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnQCmdVec_valid;
  wire                attnQKVWithSz_attnQCmdVec_ready;
  wire                attnQKVWithSz_attnQCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnQCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnQCmdVec_fire;
  reg        [5:0]    t_attnQKVWithSz_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnKCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnKCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnKCmdVec_valid;
  wire                attnQKVWithSz_attnKCmdVec_ready;
  wire                attnQKVWithSz_attnKCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnKCmdVec_fire;
  reg        [5:0]    t_attnQKVWithSz_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnVCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnVCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnVCmdVec_valid;
  wire                attnQKVWithSz_attnVCmdVec_ready;
  wire                attnQKVWithSz_attnVCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnVCmdVec_fire;
  wire                attnQKVWithSz_attnKszCmd_valid;
  wire                attnQKVWithSz_attnKszCmd_ready;
  wire                attnQKVWithSz_attnKszCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKszCmd_payload_fragment;
  wire                attnQKVWithSz_attnVszCmd_valid;
  wire                attnQKVWithSz_attnVszCmd_ready;
  wire                attnQKVWithSz_attnVszCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVszCmd_payload_fragment;
  wire                attnQKVWithSz_attnKCacheCmd_valid;
  wire                attnQKVWithSz_attnKCacheCmd_ready;
  wire                attnQKVWithSz_attnKCacheCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKCacheCmd_payload_fragment;
  wire                attnQKVWithSz_attnVCacheCmd_valid;
  wire                attnQKVWithSz_attnVCacheCmd_ready;
  wire                attnQKVWithSz_attnVCacheCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVCacheCmd_payload_fragment;
  reg        [2:0]    attnQKVWithSz_sel;
  wire                attnQKVWithSz_muxOutFire;
  reg                 cmdGen_attnQKVWithSz_mux_io_output_payload_first;
  wire                attnQKVWithSz_muxOutIsFirst;
  wire                attnQKVWithSz_selOvf;
  wire       [5:0]    attnQKVWithSz_tagVec_0;
  wire       [5:0]    attnQKVWithSz_tagVec_1;
  wire       [5:0]    attnQKVWithSz_tagVec_2;
  wire       [5:0]    attnQKVWithSz_tagVec_3;
  wire       [5:0]    attnQKVWithSz_tagVec_4;
  wire       [5:0]    attnQKVWithSz_tagVec_5;
  wire       [5:0]    attnQKVWithSz_tagVec_6;
  reg        [2:0]    attnQKVWithSz_tagSel;
  wire                attnQKVWithSz_tagFire;
  wire                attnQKVWithSz_tag_valid;
  wire                attnQKVWithSz_tag_ready;
  wire       [5:0]    attnQKVWithSz_tag_payload;
  wire                attnQKVWithSz_cmd_valid;
  wire                attnQKVWithSz_cmd_ready;
  wire                attnQKVWithSz_cmd_payload_last;
  wire       [71:0]   attnQKVWithSz_cmd_payload_fragment;
  wire                mlpWithPredict_cmd_valid;
  wire                mlpWithPredict_cmd_ready;
  wire                mlpWithPredict_cmd_payload_last;
  wire       [71:0]   mlpWithPredict_cmd_payload_fragment;
  wire       [72:0]   t_mlpWithPredict_cmd_payload_last;
  wire                mlpWithPredict_tag_valid;
  wire                mlpWithPredict_tag_ready;
  wire       [5:0]    mlpWithPredict_tag_payload;
  wire                mlpDense_mlpLnCmd_valid;
  wire                mlpDense_mlpLnCmd_ready;
  wire                mlpDense_mlpLnCmd_payload_last;
  wire       [71:0]   mlpDense_mlpLnCmd_payload_fragment;
  reg        [9:0]    t_mlpDense_attnOCmdVec_payload_last;
  reg        [9:0]    t_mlpDense_attnOCmdVec_payload_last_1;
  reg                 t_mlpDense_attnOCmdVec_payload_last_2;
  wire                t_mlpDense_attnOCmdVec_payload_last_3;
  reg        [31:0]   t_mlpDense_attnOCmdVec_payload_fragment;
  reg        [31:0]   t_mlpDense_attnOCmdVec_payload_fragment_1;
  reg        [22:0]   t_mlpDense_attnOCmdVec_payload_fragment_2;
  wire                mlpDense_attnOCmdVec_valid;
  wire                mlpDense_attnOCmdVec_ready;
  wire                mlpDense_attnOCmdVec_payload_last;
  wire       [71:0]   mlpDense_attnOCmdVec_payload_fragment;
  wire                mlpDense_attnOCmdVec_fire;
  reg        [10:0]   t_mlpDense_mlpDenseGCmdVec_payload_last;
  reg        [10:0]   t_mlpDense_mlpDenseGCmdVec_payload_last_1;
  reg                 t_mlpDense_mlpDenseGCmdVec_payload_last_2;
  wire                t_mlpDense_mlpDenseGCmdVec_payload_last_3;
  reg        [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment;
  reg        [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_1;
  reg        [22:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_2;
  wire                mlpDense_mlpDenseGCmdVec_valid;
  wire                mlpDense_mlpDenseGCmdVec_ready;
  wire                mlpDense_mlpDenseGCmdVec_payload_last;
  wire       [71:0]   mlpDense_mlpDenseGCmdVec_payload_fragment;
  wire                mlpDense_mlpDenseGCmdVec_fire;
  reg        [2:0]    mlpDense_sel;
  wire                mlpDense_muxOutFire;
  reg                 cmdGen_mlpDense_mux_io_output_payload_first;
  wire                mlpDense_muxOutIsFirst;
  wire                mlpDense_selOvf;
  reg        [1:0]    mlpDense_muxSel;
  wire       [5:0]    mlpDense_tagVec_0;
  wire       [5:0]    mlpDense_tagVec_1;
  wire       [5:0]    mlpDense_tagVec_2;
  wire       [5:0]    mlpDense_tagVec_3;
  wire       [5:0]    mlpDense_tagVec_4;
  reg        [2:0]    mlpDense_tagSel;
  wire                mlpDense_tagFire;
  wire                mlpDense_tag_valid;
  wire                mlpDense_tag_ready;
  wire       [5:0]    mlpDense_tag_payload;
  wire                mlpDense_cmd_valid;
  wire                mlpDense_cmd_ready;
  wire                mlpDense_cmd_payload_last;
  wire       [71:0]   mlpDense_cmd_payload_fragment;
  wire                logits_lgDenseScale_valid;
  wire                logits_lgDenseScale_ready;
  wire                logits_lgDenseScale_payload_last;
  wire       [71:0]   logits_lgDenseScale_payload_fragment;
  reg        [12:0]   t_logits_lgDenseHeadVec_payload_last;
  reg        [12:0]   t_logits_lgDenseHeadVec_payload_last_1;
  reg                 t_logits_lgDenseHeadVec_payload_last_2;
  wire                t_logits_lgDenseHeadVec_payload_last_3;
  reg        [31:0]   t_logits_lgDenseHeadVec_payload_fragment;
  reg        [31:0]   t_logits_lgDenseHeadVec_payload_fragment_1;
  reg        [22:0]   t_logits_lgDenseHeadVec_payload_fragment_2;
  wire                logits_lgDenseHeadVec_valid;
  wire                logits_lgDenseHeadVec_ready;
  wire                logits_lgDenseHeadVec_payload_last;
  wire       [71:0]   logits_lgDenseHeadVec_payload_fragment;
  wire                logits_lgDenseHeadVec_fire;
  wire       [72:0]   t_io_inputs_2_payload_last;
  wire       [72:0]   t_io_inputs_3_payload_last;
  reg        [0:0]    logits_sel;
  wire                logits_muxOutFire;
  reg                 cmdGen_logits_mux_io_output_payload_first;
  wire                logits_muxOutIsFirst;
  wire                logits_selOvf;
  wire       [5:0]    logits_tagVec_0;
  wire       [5:0]    logits_tagVec_1;
  reg        [0:0]    logits_tagSel;
  wire                logits_tagFire;
  wire                logits_tag_valid;
  wire                logits_tag_ready;
  wire       [5:0]    logits_tag_payload;
  wire                logits_cmd_valid;
  wire                logits_cmd_ready;
  wire                logits_cmd_payload_last;
  wire       [71:0]   logits_cmd_payload_fragment;
  wire                attnKV_cmd_fire;
  wire                kvDone;
  wire                attnQKVNoSz_cmd_fire;
  wire                qkvNoSzDone;
  wire                attnQKVWithSz_cmd_fire;
  wire                qkvDone;
  wire                mlpWithPredict_cmd_fire;
  wire                sparseMlpDone;
  wire                mlpDense_cmd_fire;
  wire                denseMlpDone;
  wire                mlpDone;
  wire                logits_cmd_fire;
  wire                logitsDone;
  wire                io_mm2s_fire;
  reg                 prefill;
  wire                tokenTag_fire;
  wire                mm2sCmd_valid;
  wire                mm2sCmd_ready;
  wire       [71:0]   mm2sCmd_payload;
  wire                mm2sCmd_s2mPipe_valid;
  reg                 mm2sCmd_s2mPipe_ready;
  wire       [71:0]   mm2sCmd_s2mPipe_payload;
  reg                 mm2sCmd_rValidN;
  reg        [71:0]   mm2sCmd_rData;
  wire                mm2sCmd_s2mPipe_m2sPipe_valid;
  wire                mm2sCmd_s2mPipe_m2sPipe_ready;
  wire       [71:0]   mm2sCmd_s2mPipe_m2sPipe_payload;
  reg                 mm2sCmd_s2mPipe_rValid;
  reg        [71:0]   mm2sCmd_s2mPipe_rData;
  wire                enTokenCnt;
  (* max_fanout = 100 *) reg        [2:0]    select_1;
  reg        [2:0]    selectNext;
  wire                io_tokenIndex_fire;
  wire       [20:0]   s2mm_mallocPerHead;
  reg        [31:0]   s2mm_headBase;
  reg        [31:0]   s2mm_headBaseNext;
  wire                s2mm_enIncHead;
  reg        [3:0]    s2mm_headCnt;
  wire                s2mm_headCntAbout2Ovf;
  reg                 s2mm_headCntOvf;
  wire       [25:0]   s2mm_mallocPerLayer;
  reg        [31:0]   s2mm_layerBase;
  reg        [31:0]   s2mm_layerBaseNext;
  wire                s2mm_enIncLayer;
  reg        [4:0]    s2mm_layerCnt;
  wire                s2mm_layerCntAbout2Ovf;
  reg                 s2mm_layerCntOvf;
  reg        [9:0]    s2mm_s2mmTokenCnt;
  reg        [31:0]   s2mm_attnHeadBase;
  wire       [31:0]   s2mm_attnHeadBaseNext;
  wire       [3:0]    s2mm_s2mmTokenCntLow;
  wire       [5:0]    s2mm_s2mmTokenHigh;
  wire                s2mm_s2mSzToMem;
  wire       [71:0]   s2mm_kCacheCmd;
  wire       [71:0]   s2mm_vCacheCmd;
  wire       [71:0]   s2mm_kSzCmd;
  wire       [71:0]   s2mm_vSzCmd;
  wire                s2mm_s2mmCmd_valid;
  reg                 s2mm_s2mmCmd_ready;
  wire       [71:0]   s2mm_s2mmCmd_payload;
  wire       [1:0]    s2mm_toMemSel;
  reg        [1:0]    s2mm_cnt;
  wire                s2mm_s2mmCmd_fire;
  reg                 s2mm_s2mmCmdThrow_valid;
  wire                s2mm_s2mmCmdThrow_ready;
  wire       [71:0]   s2mm_s2mmCmdThrow_payload;

  assign t_when = ((! s2mm_s2mSzToMem) && (s2mm_cnt[0] == 1'b0));
  assign t_headBaseNext = {11'd0, mallocPerHead};
  assign t_layerBaseNext = {6'd0, mallocPerLayer};
  assign t_tokenIn_payload_fragment_1 = (t_tokenIn_payload_fragment_2 + 29'h0);
  assign t_tokenIn_payload_fragment = {3'd0, t_tokenIn_payload_fragment_1};
  assign t_tokenIn_payload_fragment_2 = (io_tokenIndex_tdata * 13'h1000);
  assign t_tokenIn_payload_fragment_4 = 13'h1000;
  assign t_tokenIn_payload_fragment_3 = {10'd0, t_tokenIn_payload_fragment_4};
  assign t_attnLn_payload_fragment = (32'h0 + layerBase);
  assign t_attnLn_payload_fragment_2 = 14'h2000;
  assign t_attnLn_payload_fragment_1 = {9'd0, t_attnLn_payload_fragment_2};
  assign t_t_indexCmdGen_denseU_payload_fragment_2 = (t_indexCmdGen_denseU_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_indexCmdGen_denseU_payload_fragment_3 = (t_indexCmdGen_denseU_payload_fragment + layerBase);
  assign t_t_indexCmdGen_denseD_payload_fragment_2 = (t_indexCmdGen_denseD_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_indexCmdGen_denseD_payload_fragment_3 = (t_indexCmdGen_denseD_payload_fragment + layerBase);
  assign t_t_attnKV_attnKCmdVec_payload_fragment_2 = (t_attnKV_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnKV_attnKCmdVec_payload_fragment_3 = (t_attnKV_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnKV_attnVCmdVec_payload_fragment_2 = (t_attnKV_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnKV_attnVCmdVec_payload_fragment_3 = (t_attnKV_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnQCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnQCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnQCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnKCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnVCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment = (32'h000cc000 + attnHeadBase);
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2};
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment = (32'h000ec000 + attnHeadBase);
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2};
  assign t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnQCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnQCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnQCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnKCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnVCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment = (32'h0010c000 + attnHeadBase);
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment_2 = {token[9 : 4],6'h0};
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment_1 = {11'd0, t_attnQKVWithSz_attnKszCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment = (32'h0010d000 + attnHeadBase);
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment_2 = {token[9 : 4],6'h0};
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment_1 = {11'd0, t_attnQKVWithSz_attnVszCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment = (32'h000cc000 + attnHeadBase);
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment = (32'h000ec000 + attnHeadBase);
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2};
  assign t_mlpDense_mlpLnCmd_payload_fragment = (32'h0150a000 + layerBase);
  assign t_mlpDense_mlpLnCmd_payload_fragment_2 = 13'h1000;
  assign t_mlpDense_mlpLnCmd_payload_fragment_1 = {10'd0, t_mlpDense_mlpLnCmd_payload_fragment_2};
  assign t_t_mlpDense_attnOCmdVec_payload_fragment_2 = (t_mlpDense_attnOCmdVec_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_mlpDense_attnOCmdVec_payload_fragment_3 = (t_mlpDense_attnOCmdVec_payload_fragment + layerBase);
  assign t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 = (t_mlpDense_mlpDenseGCmdVec_payload_last_3 ? 14'h1800 : 14'h2000);
  assign t_mlpDense_mlpDenseGCmdVec_payload_fragment_3 = (t_mlpDense_mlpDenseGCmdVec_payload_fragment + layerBase);
  assign t_logits_lgDenseScale_payload_fragment_1 = (31'h75f00000 + 31'h0);
  assign t_logits_lgDenseScale_payload_fragment = {1'd0, t_logits_lgDenseScale_payload_fragment_1};
  assign t_logits_lgDenseScale_payload_fragment_3 = 13'h1000;
  assign t_logits_lgDenseScale_payload_fragment_2 = {10'd0, t_logits_lgDenseScale_payload_fragment_3};
  assign t_t_logits_lgDenseHeadVec_payload_fragment_2 = (t_logits_lgDenseHeadVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_logits_lgDenseHeadVec_payload_fragment_3 = (t_logits_lgDenseHeadVec_payload_fragment + 32'h0);
  assign t_s2mm_headBaseNext = {11'd0, s2mm_mallocPerHead};
  assign t_s2mm_layerBaseNext = {6'd0, s2mm_mallocPerLayer};
  assign t_s2mm_kCacheCmd = (t_s2mm_kCacheCmd_1 + t_s2mm_kCacheCmd_3);
  assign t_s2mm_kCacheCmd_2 = {s2mm_s2mmTokenCnt,7'h0};
  assign t_s2mm_kCacheCmd_1 = {15'd0, t_s2mm_kCacheCmd_2};
  assign t_s2mm_kCacheCmd_3 = (s2mm_attnHeadBase + 32'h000cc000);
  assign t_s2mm_kCacheCmd_5 = 8'h80;
  assign t_s2mm_kCacheCmd_4 = {15'd0, t_s2mm_kCacheCmd_5};
  assign t_s2mm_vCacheCmd = (t_s2mm_vCacheCmd_1 + t_s2mm_vCacheCmd_3);
  assign t_s2mm_vCacheCmd_2 = {s2mm_s2mmTokenCnt,7'h0};
  assign t_s2mm_vCacheCmd_1 = {15'd0, t_s2mm_vCacheCmd_2};
  assign t_s2mm_vCacheCmd_3 = (s2mm_attnHeadBase + 32'h000ec000);
  assign t_s2mm_vCacheCmd_5 = 8'h80;
  assign t_s2mm_vCacheCmd_4 = {15'd0, t_s2mm_vCacheCmd_5};
  assign t_s2mm_kSzCmd = (t_s2mm_kSzCmd_1 + t_s2mm_kSzCmd_3);
  assign t_s2mm_kSzCmd_2 = {s2mm_s2mmTokenHigh,6'h0};
  assign t_s2mm_kSzCmd_1 = {20'd0, t_s2mm_kSzCmd_2};
  assign t_s2mm_kSzCmd_3 = (s2mm_attnHeadBase + 32'h0010c000);
  assign t_s2mm_kSzCmd_5 = 7'h40;
  assign t_s2mm_kSzCmd_4 = {16'd0, t_s2mm_kSzCmd_5};
  assign t_s2mm_vSzCmd = (t_s2mm_vSzCmd_1 + t_s2mm_vSzCmd_3);
  assign t_s2mm_vSzCmd_2 = {s2mm_s2mmTokenHigh,6'h0};
  assign t_s2mm_vSzCmd_1 = {20'd0, t_s2mm_vSzCmd_2};
  assign t_s2mm_vSzCmd_3 = (s2mm_attnHeadBase + 32'h0010d000);
  assign t_s2mm_vSzCmd_5 = 7'h40;
  assign t_s2mm_vSzCmd_4 = {16'd0, t_s2mm_vSzCmd_5};
  StreamMux_30 indexCmdGen_indexMux (
    .io_select                    (indexCmdGen_denseLastCnt                             ), //i
    .io_inputs_0_valid            (indexCmdGen_denseU_valid                             ), //i
    .io_inputs_0_ready            (indexCmdGen_indexMux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (indexCmdGen_denseU_payload_last                      ), //i
    .io_inputs_0_payload_fragment (indexCmdGen_denseU_payload_fragment[71:0]            ), //i
    .io_inputs_1_valid            (indexCmdGen_denseD_valid                             ), //i
    .io_inputs_1_ready            (indexCmdGen_indexMux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (indexCmdGen_denseD_payload_last                      ), //i
    .io_inputs_1_payload_fragment (indexCmdGen_denseD_payload_fragment[71:0]            ), //i
    .io_output_valid              (indexCmdGen_indexMux_io_output_valid                 ), //o
    .io_output_ready              (indexCmdGen_indexMux_io_output_ready                 ), //i
    .io_output_payload_last       (indexCmdGen_indexMux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (indexCmdGen_indexMux_io_output_payload_fragment[71:0])  //o
  );
  StreamFifoPipe_7 indexCmdGen_indexCmdFifo (
    .io_push_valid   (indexCmdGen_indexCmd_valid                    ), //i
    .io_push_ready   (indexCmdGen_indexCmdFifo_io_push_ready        ), //o
    .io_push_payload (indexCmdGen_indexCmd_payload_fragment[71:0]   ), //i
    .io_pop_valid    (indexCmdGen_indexCmdFifo_io_pop_valid         ), //o
    .io_pop_ready    (indexCmdGen_indexCmdOut_ready                 ), //i
    .io_pop_payload  (indexCmdGen_indexCmdFifo_io_pop_payload[71:0] ), //o
    .io_flush        (1'b0                                          ), //i
    .io_occupancy    (indexCmdGen_indexCmdFifo_io_occupancy[12:0]   ), //o
    .io_availability (indexCmdGen_indexCmdFifo_io_availability[12:0]), //o
    .clk_1_clk       (clk_1_clk                                     ), //i
    .clk_1_resetn    (clk_1_resetn                                  )  //i
  );
  StreamFifoPipe_1 indexCmdGen_indexLastFifo (
    .io_push_valid   (cmdGen_indexCmdGen_indexCmdFifo_io_push_fire   ), //i
    .io_push_ready   (indexCmdGen_indexLastFifo_io_push_ready        ), //o
    .io_push_payload (indexCmdGen_indexCmd_payload_last              ), //i
    .io_pop_valid    (indexCmdGen_indexLastFifo_io_pop_valid         ), //o
    .io_pop_ready    (cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire    ), //i
    .io_pop_payload  (indexCmdGen_indexLastFifo_io_pop_payload       ), //o
    .io_flush        (1'b0                                           ), //i
    .io_occupancy    (indexCmdGen_indexLastFifo_io_occupancy[12:0]   ), //o
    .io_availability (indexCmdGen_indexLastFifo_io_availability[12:0]), //o
    .clk_1_clk       (clk_1_clk                                      ), //i
    .clk_1_resetn    (clk_1_resetn                                   )  //i
  );
  StreamDemux_11 indexCmdGen_deMux (
    .io_select                     (indexCmdGen_deMux_io_select                          ), //i
    .io_input_valid                (indexCmdGen_indexCmdOut_valid                        ), //i
    .io_input_ready                (indexCmdGen_deMux_io_input_ready                     ), //o
    .io_input_payload_last         (indexCmdGen_indexCmdOut_payload_last                 ), //i
    .io_input_payload_fragment     (indexCmdGen_indexCmdOut_payload_fragment[71:0]       ), //i
    .io_outputs_0_valid            (indexCmdGen_deMux_io_outputs_0_valid                 ), //o
    .io_outputs_0_ready            (mlpDense_mux_io_inputs_3_ready                       ), //i
    .io_outputs_0_payload_last     (indexCmdGen_deMux_io_outputs_0_payload_last          ), //o
    .io_outputs_0_payload_fragment (indexCmdGen_deMux_io_outputs_0_payload_fragment[71:0]), //o
    .io_outputs_1_valid            (indexCmdGen_deMux_io_outputs_1_valid                 ), //o
    .io_outputs_1_ready            (1'b1                                                 ), //i
    .io_outputs_1_payload_last     (indexCmdGen_deMux_io_outputs_1_payload_last          ), //o
    .io_outputs_1_payload_fragment (indexCmdGen_deMux_io_outputs_1_payload_fragment[71:0])  //o
  );
  StreamMux_30 attnKV_mux (
    .io_select                    (attnKV_sel                                 ), //i
    .io_inputs_0_valid            (attnKV_attnKCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnKV_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnKV_attnKCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnKV_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnKV_attnVCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnKV_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnKV_attnVCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnKV_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_output_valid              (attnKV_mux_io_output_valid                 ), //o
    .io_output_ready              (attnKV_cmd_ready                           ), //i
    .io_output_payload_last       (attnKV_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnKV_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_32 attnQKVNoSz_mux (
    .io_select                    (attnQKVNoSz_sel[2:0]                            ), //i
    .io_inputs_0_valid            (attnQKVNoSz_attnQCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnQKVNoSz_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnQKVNoSz_attnQCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnQKVNoSz_attnQCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnQKVNoSz_attnKCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnQKVNoSz_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnQKVNoSz_attnKCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnQKVNoSz_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_2_valid            (attnQKVNoSz_attnKCacheCmd_valid                 ), //i
    .io_inputs_2_ready            (attnQKVNoSz_mux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnQKVNoSz_attnKCacheCmd_payload_last          ), //i
    .io_inputs_2_payload_fragment (attnQKVNoSz_attnKCacheCmd_payload_fragment[71:0]), //i
    .io_inputs_3_valid            (attnQKVNoSz_attnVCmdVec_valid                   ), //i
    .io_inputs_3_ready            (attnQKVNoSz_mux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVNoSz_attnVCmdVec_payload_last            ), //i
    .io_inputs_3_payload_fragment (attnQKVNoSz_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_4_valid            (attnQKVNoSz_attnVCacheCmd_valid                 ), //i
    .io_inputs_4_ready            (attnQKVNoSz_mux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVNoSz_attnVCacheCmd_payload_last          ), //i
    .io_inputs_4_payload_fragment (attnQKVNoSz_attnVCacheCmd_payload_fragment[71:0]), //i
    .io_output_valid              (attnQKVNoSz_mux_io_output_valid                 ), //o
    .io_output_ready              (attnQKVNoSz_cmd_ready                           ), //i
    .io_output_payload_last       (attnQKVNoSz_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnQKVNoSz_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_33 attnQKVWithSz_mux (
    .io_select                    (attnQKVWithSz_sel[2:0]                            ), //i
    .io_inputs_0_valid            (attnQKVWithSz_attnQCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnQKVWithSz_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnQKVWithSz_attnQCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnQKVWithSz_attnQCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnQKVWithSz_attnKCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnQKVWithSz_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnQKVWithSz_attnKCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnQKVWithSz_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_2_valid            (attnQKVWithSz_attnKszCmd_valid                    ), //i
    .io_inputs_2_ready            (attnQKVWithSz_mux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnQKVWithSz_attnKszCmd_payload_last             ), //i
    .io_inputs_2_payload_fragment (attnQKVWithSz_attnKszCmd_payload_fragment[71:0]   ), //i
    .io_inputs_3_valid            (attnQKVWithSz_attnKCacheCmd_valid                 ), //i
    .io_inputs_3_ready            (attnQKVWithSz_mux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVWithSz_attnKCacheCmd_payload_last          ), //i
    .io_inputs_3_payload_fragment (attnQKVWithSz_attnKCacheCmd_payload_fragment[71:0]), //i
    .io_inputs_4_valid            (attnQKVWithSz_attnVCmdVec_valid                   ), //i
    .io_inputs_4_ready            (attnQKVWithSz_mux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVWithSz_attnVCmdVec_payload_last            ), //i
    .io_inputs_4_payload_fragment (attnQKVWithSz_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_5_valid            (attnQKVWithSz_attnVszCmd_valid                    ), //i
    .io_inputs_5_ready            (attnQKVWithSz_mux_io_inputs_5_ready               ), //o
    .io_inputs_5_payload_last     (attnQKVWithSz_attnVszCmd_payload_last             ), //i
    .io_inputs_5_payload_fragment (attnQKVWithSz_attnVszCmd_payload_fragment[71:0]   ), //i
    .io_inputs_6_valid            (attnQKVWithSz_attnVCacheCmd_valid                 ), //i
    .io_inputs_6_ready            (attnQKVWithSz_mux_io_inputs_6_ready               ), //o
    .io_inputs_6_payload_last     (attnQKVWithSz_attnVCacheCmd_payload_last          ), //i
    .io_inputs_6_payload_fragment (attnQKVWithSz_attnVCacheCmd_payload_fragment[71:0]), //i
    .io_output_valid              (attnQKVWithSz_mux_io_output_valid                 ), //o
    .io_output_ready              (attnQKVWithSz_cmd_ready                           ), //i
    .io_output_payload_last       (attnQKVWithSz_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnQKVWithSz_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_34 mlpDense_mux (
    .io_select                    (mlpDense_muxSel[1:0]                                 ), //i
    .io_inputs_0_valid            (mlpDense_attnOCmdVec_valid                           ), //i
    .io_inputs_0_ready            (mlpDense_mux_io_inputs_0_ready                       ), //o
    .io_inputs_0_payload_last     (mlpDense_attnOCmdVec_payload_last                    ), //i
    .io_inputs_0_payload_fragment (mlpDense_attnOCmdVec_payload_fragment[71:0]          ), //i
    .io_inputs_1_valid            (mlpDense_mlpLnCmd_valid                              ), //i
    .io_inputs_1_ready            (mlpDense_mux_io_inputs_1_ready                       ), //o
    .io_inputs_1_payload_last     (mlpDense_mlpLnCmd_payload_last                       ), //i
    .io_inputs_1_payload_fragment (mlpDense_mlpLnCmd_payload_fragment[71:0]             ), //i
    .io_inputs_2_valid            (mlpDense_mlpDenseGCmdVec_valid                       ), //i
    .io_inputs_2_ready            (mlpDense_mux_io_inputs_2_ready                       ), //o
    .io_inputs_2_payload_last     (mlpDense_mlpDenseGCmdVec_payload_last                ), //i
    .io_inputs_2_payload_fragment (mlpDense_mlpDenseGCmdVec_payload_fragment[71:0]      ), //i
    .io_inputs_3_valid            (indexCmdGen_deMux_io_outputs_0_valid                 ), //i
    .io_inputs_3_ready            (mlpDense_mux_io_inputs_3_ready                       ), //o
    .io_inputs_3_payload_last     (indexCmdGen_deMux_io_outputs_0_payload_last          ), //i
    .io_inputs_3_payload_fragment (indexCmdGen_deMux_io_outputs_0_payload_fragment[71:0]), //i
    .io_output_valid              (mlpDense_mux_io_output_valid                         ), //o
    .io_output_ready              (mlpDense_cmd_ready                                   ), //i
    .io_output_payload_last       (mlpDense_mux_io_output_payload_last                  ), //o
    .io_output_payload_fragment   (mlpDense_mux_io_output_payload_fragment[71:0]        )  //o
  );
  StreamMux_34 logits_mux (
    .io_select                    (logits_mux_io_select[1:0]                    ), //i
    .io_inputs_0_valid            (logits_lgDenseScale_valid                    ), //i
    .io_inputs_0_ready            (logits_mux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload_last     (logits_lgDenseScale_payload_last             ), //i
    .io_inputs_0_payload_fragment (logits_lgDenseScale_payload_fragment[71:0]   ), //i
    .io_inputs_1_valid            (logits_lgDenseHeadVec_valid                  ), //i
    .io_inputs_1_ready            (logits_mux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload_last     (logits_lgDenseHeadVec_payload_last           ), //i
    .io_inputs_1_payload_fragment (logits_lgDenseHeadVec_payload_fragment[71:0] ), //i
    .io_inputs_2_valid            (1'b0                                         ), //i
    .io_inputs_2_ready            (logits_mux_io_inputs_2_ready                 ), //o
    .io_inputs_2_payload_last     (logits_mux_io_inputs_2_payload_last          ), //i
    .io_inputs_2_payload_fragment (logits_mux_io_inputs_2_payload_fragment[71:0]), //i
    .io_inputs_3_valid            (1'b0                                         ), //i
    .io_inputs_3_ready            (logits_mux_io_inputs_3_ready                 ), //o
    .io_inputs_3_payload_last     (logits_mux_io_inputs_3_payload_last          ), //i
    .io_inputs_3_payload_fragment (logits_mux_io_inputs_3_payload_fragment[71:0]), //i
    .io_output_valid              (logits_mux_io_output_valid                   ), //o
    .io_output_ready              (logits_cmd_ready                             ), //i
    .io_output_payload_last       (logits_mux_io_output_payload_last            ), //o
    .io_output_payload_fragment   (logits_mux_io_output_payload_fragment[71:0]  )  //o
  );
  StreamMux_36 mm2sCmdMux (
    .io_select                    (select_1[2:0]                              ), //i
    .io_inputs_0_valid            (tokenIn_valid                              ), //i
    .io_inputs_0_ready            (mm2sCmdMux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (tokenIn_payload_last                       ), //i
    .io_inputs_0_payload_fragment (tokenIn_payload_fragment[71:0]             ), //i
    .io_inputs_1_valid            (attnLn_valid                               ), //i
    .io_inputs_1_ready            (mm2sCmdMux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnLn_payload_last                        ), //i
    .io_inputs_1_payload_fragment (attnLn_payload_fragment[71:0]              ), //i
    .io_inputs_2_valid            (attnKV_cmd_valid                           ), //i
    .io_inputs_2_ready            (mm2sCmdMux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnKV_cmd_payload_last                    ), //i
    .io_inputs_2_payload_fragment (attnKV_cmd_payload_fragment[71:0]          ), //i
    .io_inputs_3_valid            (attnQKVNoSz_cmd_valid                      ), //i
    .io_inputs_3_ready            (mm2sCmdMux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVNoSz_cmd_payload_last               ), //i
    .io_inputs_3_payload_fragment (attnQKVNoSz_cmd_payload_fragment[71:0]     ), //i
    .io_inputs_4_valid            (attnQKVWithSz_cmd_valid                    ), //i
    .io_inputs_4_ready            (mm2sCmdMux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVWithSz_cmd_payload_last             ), //i
    .io_inputs_4_payload_fragment (attnQKVWithSz_cmd_payload_fragment[71:0]   ), //i
    .io_inputs_5_valid            (mlpWithPredict_cmd_valid                   ), //i
    .io_inputs_5_ready            (mm2sCmdMux_io_inputs_5_ready               ), //o
    .io_inputs_5_payload_last     (mlpWithPredict_cmd_payload_last            ), //i
    .io_inputs_5_payload_fragment (mlpWithPredict_cmd_payload_fragment[71:0]  ), //i
    .io_inputs_6_valid            (mlpDense_cmd_valid                         ), //i
    .io_inputs_6_ready            (mm2sCmdMux_io_inputs_6_ready               ), //o
    .io_inputs_6_payload_last     (mlpDense_cmd_payload_last                  ), //i
    .io_inputs_6_payload_fragment (mlpDense_cmd_payload_fragment[71:0]        ), //i
    .io_inputs_7_valid            (logits_cmd_valid                           ), //i
    .io_inputs_7_ready            (mm2sCmdMux_io_inputs_7_ready               ), //o
    .io_inputs_7_payload_last     (logits_cmd_payload_last                    ), //i
    .io_inputs_7_payload_fragment (logits_cmd_payload_fragment[71:0]          ), //i
    .io_output_valid              (mm2sCmdMux_io_output_valid                 ), //o
    .io_output_ready              (mm2sCmd_ready                              ), //i
    .io_output_payload_last       (mm2sCmdMux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (mm2sCmdMux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_37 busTagMux (
    .io_select           (select_1[2:0]                   ), //i
    .io_inputs_0_valid   (tokenTag_valid                  ), //i
    .io_inputs_0_ready   (busTagMux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (tokenTag_payload[5:0]           ), //i
    .io_inputs_1_valid   (attnLnTag_valid                 ), //i
    .io_inputs_1_ready   (busTagMux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (attnLnTag_payload[5:0]          ), //i
    .io_inputs_2_valid   (attnKV_tag_valid                ), //i
    .io_inputs_2_ready   (busTagMux_io_inputs_2_ready     ), //o
    .io_inputs_2_payload (attnKV_tag_payload[5:0]         ), //i
    .io_inputs_3_valid   (attnQKVNoSz_tag_valid           ), //i
    .io_inputs_3_ready   (busTagMux_io_inputs_3_ready     ), //o
    .io_inputs_3_payload (attnQKVNoSz_tag_payload[5:0]    ), //i
    .io_inputs_4_valid   (attnQKVWithSz_tag_valid         ), //i
    .io_inputs_4_ready   (busTagMux_io_inputs_4_ready     ), //o
    .io_inputs_4_payload (attnQKVWithSz_tag_payload[5:0]  ), //i
    .io_inputs_5_valid   (mlpWithPredict_tag_valid        ), //i
    .io_inputs_5_ready   (busTagMux_io_inputs_5_ready     ), //o
    .io_inputs_5_payload (mlpWithPredict_tag_payload[5:0] ), //i
    .io_inputs_6_valid   (mlpDense_tag_valid              ), //i
    .io_inputs_6_ready   (busTagMux_io_inputs_6_ready     ), //o
    .io_inputs_6_payload (mlpDense_tag_payload[5:0]       ), //i
    .io_inputs_7_valid   (logits_tag_valid                ), //i
    .io_inputs_7_ready   (busTagMux_io_inputs_7_ready     ), //o
    .io_inputs_7_payload (logits_tag_payload[5:0]         ), //i
    .io_output_valid     (busTagMux_io_output_valid       ), //o
    .io_output_ready     (tagFifo_io_push_ready           ), //i
    .io_output_payload   (busTagMux_io_output_payload[5:0])  //o
  );
  StreamFifo_24 tagFifo (
    .io_push_valid   (busTagMux_io_output_valid       ), //i
    .io_push_ready   (tagFifo_io_push_ready           ), //o
    .io_push_payload (busTagMux_io_output_payload[5:0]), //i
    .io_pop_valid    (tagFifo_io_pop_valid            ), //o
    .io_pop_ready    (tagFifo_io_pop_ready            ), //i
    .io_pop_payload  (tagFifo_io_pop_payload[5:0]     ), //o
    .io_flush        (1'b0                            ), //i
    .io_occupancy    (tagFifo_io_occupancy[6:0]       ), //o
    .io_availability (tagFifo_io_availability[6:0]    ), //o
    .clk_1_clk       (clk_1_clk                       ), //i
    .clk_1_resetn    (clk_1_resetn                    )  //i
  );
  StreamFifo_25 s2mm_tokenEnFifo (
    .io_push_valid   (io_tokenIndex_fire                   ), //i
    .io_push_ready   (s2mm_tokenEnFifo_io_push_ready       ), //o
    .io_pop_valid    (s2mm_tokenEnFifo_io_pop_valid        ), //o
    .io_pop_ready    (s2mm_tokenEnFifo_io_pop_ready        ), //i
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (s2mm_tokenEnFifo_io_occupancy[6:0]   ), //o
    .io_availability (s2mm_tokenEnFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                            ), //i
    .clk_1_resetn    (clk_1_resetn                         )  //i
  );
  StreamFifo_26 s2mm_cmdFifo (
    .io_push_valid   (s2mm_s2mmCmdThrow_valid          ), //i
    .io_push_ready   (s2mm_cmdFifo_io_push_ready       ), //o
    .io_push_payload (s2mm_s2mmCmdThrow_payload[71:0]  ), //i
    .io_pop_valid    (s2mm_cmdFifo_io_pop_valid        ), //o
    .io_pop_ready    (io_s2mmCmd_ready                 ), //i
    .io_pop_payload  (s2mm_cmdFifo_io_pop_payload[71:0]), //o
    .io_flush        (1'b0                             ), //i
    .io_occupancy    (s2mm_cmdFifo_io_occupancy[5:0]   ), //o
    .io_availability (s2mm_cmdFifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                        ), //i
    .clk_1_resetn    (clk_1_resetn                     )  //i
  );
  always @(*) begin
    case(indexCmdGen_denseLastCnt)
      1'b0 : begin
        t_indexCmdGen_selDenseBaseAddr = indexCmdGen_denseBaseAddrOs_0;
        t_indexCmdGen_selDenseLen = indexCmdGen_denseLen_0;
        t_indexCmdGen_selDenseTag = indexCmdGen_denseTag_0;
      end
      default : begin
        t_indexCmdGen_selDenseBaseAddr = indexCmdGen_denseBaseAddrOs_1;
        t_indexCmdGen_selDenseLen = indexCmdGen_denseLen_1;
        t_indexCmdGen_selDenseTag = indexCmdGen_denseTag_1;
      end
    endcase
  end

  always @(*) begin
    case(attnKV_tagSel)
      1'b0 : t_attnKV_tag_payload = attnKV_tagVec_0;
      default : t_attnKV_tag_payload = attnKV_tagVec_1;
    endcase
  end

  always @(*) begin
    case(attnQKVNoSz_tagSel)
      3'b000 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_0;
      3'b001 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_1;
      3'b010 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_2;
      3'b011 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_3;
      default : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_4;
    endcase
  end

  always @(*) begin
    case(attnQKVWithSz_tagSel)
      3'b000 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_0;
      3'b001 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_1;
      3'b010 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_2;
      3'b011 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_3;
      3'b100 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_4;
      3'b101 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_5;
      default : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_6;
    endcase
  end

  always @(*) begin
    case(mlpDense_tagSel)
      3'b000 : t_mlpDense_tag_payload = mlpDense_tagVec_0;
      3'b001 : t_mlpDense_tag_payload = mlpDense_tagVec_1;
      3'b010 : t_mlpDense_tag_payload = mlpDense_tagVec_2;
      3'b011 : t_mlpDense_tag_payload = mlpDense_tagVec_3;
      default : t_mlpDense_tag_payload = mlpDense_tagVec_4;
    endcase
  end

  always @(*) begin
    case(logits_tagSel)
      1'b0 : t_logits_tag_payload = logits_tagVec_0;
      default : t_logits_tag_payload = logits_tagVec_1;
    endcase
  end

  always @(*) begin
    case(s2mm_toMemSel)
      2'b00 : t_s2mm_s2mmCmd_payload = s2mm_kSzCmd;
      2'b01 : t_s2mm_s2mmCmd_payload = s2mm_kCacheCmd;
      2'b10 : t_s2mm_s2mmCmd_payload = s2mm_vSzCmd;
      default : t_s2mm_s2mmCmd_payload = s2mm_vCacheCmd;
    endcase
  end

  assign tokenHigh = token[9 : 4];
  assign tokenLow = token[3 : 0];
  assign firstToken = (token == 10'h0);
  assign noSzFromMem = (tokenHigh == 6'h0);
  assign mallocPerHead = 21'h10e000;
  assign headCntAbout2Ovf = (headCnt == 4'b1110);
  always @(*) begin
    headBaseNext = headBase;
    if(enIncHead) begin
      headBaseNext = (headBase + t_headBaseNext);
      if(headCntOvf) begin
        headBaseNext = 32'h00002000;
      end
    end
  end

  assign mallocPerLayer = (status_enPredictor ? 26'h3b29000 : 26'h3710000);
  assign layerCntAbout2Ovf = (layerCnt == 5'h1e);
  always @(*) begin
    layerBaseNext = layerBase;
    if(enIncLayer) begin
      layerBaseNext = (layerBase + t_layerBaseNext);
      if(layerCntOvf) begin
        layerBaseNext = 32'h07d00000;
      end
    end
  end

  assign attnHeadBaseNext = (layerBaseNext + headBaseNext);
  assign tokenIn_valid = io_tokenIndex_valid;
  assign io_tokenIndex_ready = tokenIn_ready;
  assign tokenIn_payload_last = 1'b1;
  assign tokenIn_payload_fragment = {{{{{{{4'b0000,4'b0000},t_tokenIn_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_tokenIn_payload_fragment_3};
  assign tokenIn_fire = (tokenIn_valid && tokenIn_ready);
  assign tokenTag_valid = tokenIn_fire;
  assign tokenTag_payload = io_tokenIndex_tuser;
  assign attnLn_valid = 1'b1;
  assign attnLn_payload_last = 1'b1;
  assign attnLn_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnLn_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnLn_payload_fragment_1};
  assign attnLn_fire = (attnLn_valid && attnLn_ready);
  assign attnLnTag_valid = attnLn_fire;
  assign attnLnTag_payload = 6'h03;
  assign indexCmdGen_denseBaseAddrOs_0 = 26'h2038000;
  assign indexCmdGen_denseBaseAddrOs_1 = 26'h2ba4000;
  assign indexCmdGen_denseLen_0 = 11'h440;
  assign indexCmdGen_denseLen_1 = 11'h440;
  assign indexCmdGen_denseTag_0 = 4'b0100;
  assign indexCmdGen_denseTag_1 = 4'b0101;
  assign indexCmdGen_selDenseBaseAddr = t_indexCmdGen_selDenseBaseAddr;
  assign indexCmdGen_selDenseLen = t_indexCmdGen_selDenseLen;
  assign indexCmdGen_selDenseTag = t_indexCmdGen_selDenseTag;
  assign indexCmdGen_indexFlow_valid = local_index_valid_regNext;
  assign indexCmdGen_indexFlow_payload_last = local_index_payload_last_regNext;
  assign indexCmdGen_indexFlow_payload_fragment = t_indexCmdGen_indexFlow_payload_fragment;
  assign t_indexCmdGen_denseU_payload_last_3 = (t_indexCmdGen_denseU_payload_last_1 == 11'h5b5);
  always @(*) begin
    t_indexCmdGen_denseU_payload_last_1 = t_indexCmdGen_denseU_payload_last;
    if(indexCmdGen_denseU_fire) begin
      t_indexCmdGen_denseU_payload_last_1 = (t_indexCmdGen_denseU_payload_last + 11'h001);
      if(t_indexCmdGen_denseU_payload_last_2) begin
        t_indexCmdGen_denseU_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_indexCmdGen_denseU_payload_fragment_1 = t_indexCmdGen_denseU_payload_fragment;
    if(indexCmdGen_denseU_fire) begin
      t_indexCmdGen_denseU_payload_fragment_1 = (t_indexCmdGen_denseU_payload_fragment + 32'h00002000);
      if(t_indexCmdGen_denseU_payload_last_2) begin
        t_indexCmdGen_denseU_payload_fragment_1 = 32'h02038000;
      end
    end
  end

  assign indexCmdGen_denseU_valid = 1'b1;
  assign indexCmdGen_denseU_payload_fragment = {{{{{{{4'b0000,4'b0000},t_indexCmdGen_denseU_payload_fragment_3},1'b0},t_indexCmdGen_denseU_payload_last_2},6'h0},1'b1},t_indexCmdGen_denseU_payload_fragment_2};
  assign indexCmdGen_denseU_payload_last = t_indexCmdGen_denseU_payload_last_2;
  assign indexCmdGen_denseU_fire = (indexCmdGen_denseU_valid && indexCmdGen_denseU_ready);
  assign t_indexCmdGen_denseD_payload_last_3 = (t_indexCmdGen_denseD_payload_last_1 == 11'h5b5);
  always @(*) begin
    t_indexCmdGen_denseD_payload_last_1 = t_indexCmdGen_denseD_payload_last;
    if(indexCmdGen_denseD_fire) begin
      t_indexCmdGen_denseD_payload_last_1 = (t_indexCmdGen_denseD_payload_last + 11'h001);
      if(t_indexCmdGen_denseD_payload_last_2) begin
        t_indexCmdGen_denseD_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_indexCmdGen_denseD_payload_fragment_1 = t_indexCmdGen_denseD_payload_fragment;
    if(indexCmdGen_denseD_fire) begin
      t_indexCmdGen_denseD_payload_fragment_1 = (t_indexCmdGen_denseD_payload_fragment + 32'h00002000);
      if(t_indexCmdGen_denseD_payload_last_2) begin
        t_indexCmdGen_denseD_payload_fragment_1 = 32'h02ba4000;
      end
    end
  end

  assign indexCmdGen_denseD_valid = 1'b1;
  assign indexCmdGen_denseD_payload_fragment = {{{{{{{4'b0000,4'b0000},t_indexCmdGen_denseD_payload_fragment_3},1'b0},t_indexCmdGen_denseD_payload_last_2},6'h0},1'b1},t_indexCmdGen_denseD_payload_fragment_2};
  assign indexCmdGen_denseD_payload_last = t_indexCmdGen_denseD_payload_last_2;
  assign indexCmdGen_denseD_fire = (indexCmdGen_denseD_valid && indexCmdGen_denseD_ready);
  assign indexCmdGen_denseU_ready = indexCmdGen_indexMux_io_inputs_0_ready;
  assign indexCmdGen_denseD_ready = indexCmdGen_indexMux_io_inputs_1_ready;
  assign indexCmdGen_indexMux_io_output_ready = (1'b1 && indexCmdGen_enDenseUD);
  assign indexCmdGen_indexCmd_valid = (indexCmdGen_indexMux_io_output_valid && indexCmdGen_enDenseUD);
  assign indexCmdGen_indexCmd_payload_last = indexCmdGen_indexMux_io_output_payload_last;
  assign indexCmdGen_indexCmd_payload_fragment = indexCmdGen_indexMux_io_output_payload_fragment;
  assign cmdGen_indexCmdGen_indexCmdFifo_io_push_fire = (indexCmdGen_indexCmd_valid && indexCmdGen_indexCmdFifo_io_push_ready);
  assign cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire = (indexCmdGen_indexCmdFifo_io_pop_valid && indexCmdGen_indexCmdOut_ready);
  assign indexCmdGen_indexCmdOut_valid = indexCmdGen_indexCmdFifo_io_pop_valid;
  assign indexCmdGen_indexCmdOut_payload_fragment = indexCmdGen_indexCmdFifo_io_pop_payload;
  assign indexCmdGen_indexCmdOut_payload_last = indexCmdGen_indexLastFifo_io_pop_payload;
  assign indexCmdGen_indexCmdOut_ready = indexCmdGen_deMux_io_input_ready;
  assign indexCmdGen_deMux_io_select = status_enPredictor;
  assign t_attnKV_attnKCmdVec_payload_last_3 = (t_attnKV_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnKV_attnKCmdVec_payload_last_1 = t_attnKV_attnKCmdVec_payload_last;
    if(attnKV_attnKCmdVec_fire) begin
      t_attnKV_attnKCmdVec_payload_last_1 = (t_attnKV_attnKCmdVec_payload_last + 6'h01);
      if(t_attnKV_attnKCmdVec_payload_last_2) begin
        t_attnKV_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnKV_attnKCmdVec_payload_fragment_1 = t_attnKV_attnKCmdVec_payload_fragment;
    if(attnKV_attnKCmdVec_fire) begin
      t_attnKV_attnKCmdVec_payload_fragment_1 = (t_attnKV_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnKV_attnKCmdVec_payload_last_2) begin
        t_attnKV_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnKV_attnKCmdVec_valid = 1'b1;
  assign attnKV_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnKV_attnKCmdVec_payload_fragment_3},1'b0},t_attnKV_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnKV_attnKCmdVec_payload_fragment_2};
  assign attnKV_attnKCmdVec_payload_last = t_attnKV_attnKCmdVec_payload_last_2;
  assign attnKV_attnKCmdVec_fire = (attnKV_attnKCmdVec_valid && attnKV_attnKCmdVec_ready);
  assign t_attnKV_attnVCmdVec_payload_last_3 = (t_attnKV_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnKV_attnVCmdVec_payload_last_1 = t_attnKV_attnVCmdVec_payload_last;
    if(attnKV_attnVCmdVec_fire) begin
      t_attnKV_attnVCmdVec_payload_last_1 = (t_attnKV_attnVCmdVec_payload_last + 6'h01);
      if(t_attnKV_attnVCmdVec_payload_last_2) begin
        t_attnKV_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnKV_attnVCmdVec_payload_fragment_1 = t_attnKV_attnVCmdVec_payload_fragment;
    if(attnKV_attnVCmdVec_fire) begin
      t_attnKV_attnVCmdVec_payload_fragment_1 = (t_attnKV_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnKV_attnVCmdVec_payload_last_2) begin
        t_attnKV_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnKV_attnVCmdVec_valid = 1'b1;
  assign attnKV_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnKV_attnVCmdVec_payload_fragment_3},1'b0},t_attnKV_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnKV_attnVCmdVec_payload_fragment_2};
  assign attnKV_attnVCmdVec_payload_last = t_attnKV_attnVCmdVec_payload_last_2;
  assign attnKV_attnVCmdVec_fire = (attnKV_attnVCmdVec_valid && attnKV_attnVCmdVec_ready);
  assign attnKV_attnKCmdVec_ready = attnKV_mux_io_inputs_0_ready;
  assign attnKV_attnVCmdVec_ready = attnKV_mux_io_inputs_1_ready;
  assign attnKV_muxOutFire = (attnKV_mux_io_output_valid && attnKV_cmd_ready);
  assign attnKV_muxOutIsFirst = (attnKV_mux_io_output_valid && cmdGen_attnKV_mux_io_output_payload_first);
  assign attnKV_selOvf = (attnKV_sel == 1'b1);
  assign attnKV_tagVec_0 = 6'h05;
  assign attnKV_tagVec_1 = 6'h07;
  assign attnKV_tagFire = (attnKV_muxOutFire && attnKV_muxOutIsFirst);
  assign attnKV_tag_valid = attnKV_tagFire;
  assign attnKV_tag_payload = t_attnKV_tag_payload;
  assign attnKV_cmd_valid = attnKV_mux_io_output_valid;
  assign attnKV_cmd_payload_fragment = attnKV_mux_io_output_payload_fragment;
  assign attnKV_cmd_payload_last = (attnKV_mux_io_output_payload_last && attnKV_selOvf);
  assign t_attnQKVNoSz_attnQCmdVec_payload_last_3 = (t_attnQKVNoSz_attnQCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnQCmdVec_payload_last_1 = t_attnQKVNoSz_attnQCmdVec_payload_last;
    if(attnQKVNoSz_attnQCmdVec_fire) begin
      t_attnQKVNoSz_attnQCmdVec_payload_last_1 = (t_attnQKVNoSz_attnQCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnQCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnQCmdVec_payload_fragment;
    if(attnQKVNoSz_attnQCmdVec_fire) begin
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnQCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = 32'h0;
      end
    end
  end

  assign attnQKVNoSz_attnQCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnQCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnQCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnQCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnQCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnQCmdVec_payload_last = t_attnQKVNoSz_attnQCmdVec_payload_last_2;
  assign attnQKVNoSz_attnQCmdVec_fire = (attnQKVNoSz_attnQCmdVec_valid && attnQKVNoSz_attnQCmdVec_ready);
  assign t_attnQKVNoSz_attnKCmdVec_payload_last_3 = (t_attnQKVNoSz_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnKCmdVec_payload_last_1 = t_attnQKVNoSz_attnKCmdVec_payload_last;
    if(attnQKVNoSz_attnKCmdVec_fire) begin
      t_attnQKVNoSz_attnKCmdVec_payload_last_1 = (t_attnQKVNoSz_attnKCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnKCmdVec_payload_fragment;
    if(attnQKVNoSz_attnKCmdVec_fire) begin
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnQKVNoSz_attnKCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnKCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnKCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnKCmdVec_payload_last = t_attnQKVNoSz_attnKCmdVec_payload_last_2;
  assign attnQKVNoSz_attnKCmdVec_fire = (attnQKVNoSz_attnKCmdVec_valid && attnQKVNoSz_attnKCmdVec_ready);
  assign t_attnQKVNoSz_attnVCmdVec_payload_last_3 = (t_attnQKVNoSz_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnVCmdVec_payload_last_1 = t_attnQKVNoSz_attnVCmdVec_payload_last;
    if(attnQKVNoSz_attnVCmdVec_fire) begin
      t_attnQKVNoSz_attnVCmdVec_payload_last_1 = (t_attnQKVNoSz_attnVCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnVCmdVec_payload_fragment;
    if(attnQKVNoSz_attnVCmdVec_fire) begin
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnQKVNoSz_attnVCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnVCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnVCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnVCmdVec_payload_last = t_attnQKVNoSz_attnVCmdVec_payload_last_2;
  assign attnQKVNoSz_attnVCmdVec_fire = (attnQKVNoSz_attnVCmdVec_valid && attnQKVNoSz_attnVCmdVec_ready);
  assign attnQKVNoSz_attnKCacheCmd_valid = 1'b1;
  assign attnQKVNoSz_attnKCacheCmd_payload_last = 1'b1;
  assign attnQKVNoSz_attnKCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVNoSz_attnKCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1};
  assign attnQKVNoSz_attnVCacheCmd_valid = 1'b1;
  assign attnQKVNoSz_attnVCacheCmd_payload_last = 1'b1;
  assign attnQKVNoSz_attnVCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVNoSz_attnVCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1};
  assign attnQKVNoSz_attnQCmdVec_ready = attnQKVNoSz_mux_io_inputs_0_ready;
  assign attnQKVNoSz_attnKCmdVec_ready = attnQKVNoSz_mux_io_inputs_1_ready;
  assign attnQKVNoSz_attnKCacheCmd_ready = attnQKVNoSz_mux_io_inputs_2_ready;
  assign attnQKVNoSz_attnVCmdVec_ready = attnQKVNoSz_mux_io_inputs_3_ready;
  assign attnQKVNoSz_attnVCacheCmd_ready = attnQKVNoSz_mux_io_inputs_4_ready;
  assign attnQKVNoSz_muxOutFire = (attnQKVNoSz_mux_io_output_valid && attnQKVNoSz_cmd_ready);
  assign attnQKVNoSz_muxOutIsFirst = (attnQKVNoSz_mux_io_output_valid && cmdGen_attnQKVNoSz_mux_io_output_payload_first);
  assign attnQKVNoSz_selOvf = (attnQKVNoSz_sel == 3'b100);
  assign attnQKVNoSz_tagVec_0 = 6'h04;
  assign attnQKVNoSz_tagVec_1 = 6'h05;
  assign attnQKVNoSz_tagVec_2 = 6'h06;
  assign attnQKVNoSz_tagVec_3 = 6'h07;
  assign attnQKVNoSz_tagVec_4 = 6'h08;
  assign attnQKVNoSz_tagFire = (attnQKVNoSz_muxOutFire && attnQKVNoSz_muxOutIsFirst);
  assign attnQKVNoSz_tag_valid = attnQKVNoSz_tagFire;
  assign attnQKVNoSz_tag_payload = t_attnQKVNoSz_tag_payload;
  assign attnQKVNoSz_cmd_valid = attnQKVNoSz_mux_io_output_valid;
  assign attnQKVNoSz_cmd_payload_fragment = attnQKVNoSz_mux_io_output_payload_fragment;
  assign attnQKVNoSz_cmd_payload_last = (attnQKVNoSz_mux_io_output_payload_last && attnQKVNoSz_selOvf);
  assign t_attnQKVWithSz_attnQCmdVec_payload_last_3 = (t_attnQKVWithSz_attnQCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnQCmdVec_payload_last_1 = t_attnQKVWithSz_attnQCmdVec_payload_last;
    if(attnQKVWithSz_attnQCmdVec_fire) begin
      t_attnQKVWithSz_attnQCmdVec_payload_last_1 = (t_attnQKVWithSz_attnQCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnQCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnQCmdVec_payload_fragment;
    if(attnQKVWithSz_attnQCmdVec_fire) begin
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnQCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = 32'h0;
      end
    end
  end

  assign attnQKVWithSz_attnQCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnQCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnQCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnQCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnQCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnQCmdVec_payload_last = t_attnQKVWithSz_attnQCmdVec_payload_last_2;
  assign attnQKVWithSz_attnQCmdVec_fire = (attnQKVWithSz_attnQCmdVec_valid && attnQKVWithSz_attnQCmdVec_ready);
  assign t_attnQKVWithSz_attnKCmdVec_payload_last_3 = (t_attnQKVWithSz_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnKCmdVec_payload_last_1 = t_attnQKVWithSz_attnKCmdVec_payload_last;
    if(attnQKVWithSz_attnKCmdVec_fire) begin
      t_attnQKVWithSz_attnKCmdVec_payload_last_1 = (t_attnQKVWithSz_attnKCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnKCmdVec_payload_fragment;
    if(attnQKVWithSz_attnKCmdVec_fire) begin
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnQKVWithSz_attnKCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnKCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnKCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnKCmdVec_payload_last = t_attnQKVWithSz_attnKCmdVec_payload_last_2;
  assign attnQKVWithSz_attnKCmdVec_fire = (attnQKVWithSz_attnKCmdVec_valid && attnQKVWithSz_attnKCmdVec_ready);
  assign t_attnQKVWithSz_attnVCmdVec_payload_last_3 = (t_attnQKVWithSz_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnVCmdVec_payload_last_1 = t_attnQKVWithSz_attnVCmdVec_payload_last;
    if(attnQKVWithSz_attnVCmdVec_fire) begin
      t_attnQKVWithSz_attnVCmdVec_payload_last_1 = (t_attnQKVWithSz_attnVCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnVCmdVec_payload_fragment;
    if(attnQKVWithSz_attnVCmdVec_fire) begin
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnQKVWithSz_attnVCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnVCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnVCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnVCmdVec_payload_last = t_attnQKVWithSz_attnVCmdVec_payload_last_2;
  assign attnQKVWithSz_attnVCmdVec_fire = (attnQKVWithSz_attnVCmdVec_valid && attnQKVWithSz_attnVCmdVec_ready);
  assign attnQKVWithSz_attnKszCmd_valid = 1'b1;
  assign attnQKVWithSz_attnKszCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnKszCmd_payload_fragment = {{{{{{{4'b0000,4'b0010},t_attnQKVWithSz_attnKszCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnKszCmd_payload_fragment_1};
  assign attnQKVWithSz_attnVszCmd_valid = 1'b1;
  assign attnQKVWithSz_attnVszCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnVszCmd_payload_fragment = {{{{{{{4'b0000,4'b0010},t_attnQKVWithSz_attnVszCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnVszCmd_payload_fragment_1};
  assign attnQKVWithSz_attnKCacheCmd_valid = 1'b1;
  assign attnQKVWithSz_attnKCacheCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnKCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVWithSz_attnKCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1};
  assign attnQKVWithSz_attnVCacheCmd_valid = 1'b1;
  assign attnQKVWithSz_attnVCacheCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnVCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVWithSz_attnVCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1};
  assign attnQKVWithSz_attnQCmdVec_ready = attnQKVWithSz_mux_io_inputs_0_ready;
  assign attnQKVWithSz_attnKCmdVec_ready = attnQKVWithSz_mux_io_inputs_1_ready;
  assign attnQKVWithSz_attnKszCmd_ready = attnQKVWithSz_mux_io_inputs_2_ready;
  assign attnQKVWithSz_attnKCacheCmd_ready = attnQKVWithSz_mux_io_inputs_3_ready;
  assign attnQKVWithSz_attnVCmdVec_ready = attnQKVWithSz_mux_io_inputs_4_ready;
  assign attnQKVWithSz_attnVszCmd_ready = attnQKVWithSz_mux_io_inputs_5_ready;
  assign attnQKVWithSz_attnVCacheCmd_ready = attnQKVWithSz_mux_io_inputs_6_ready;
  assign attnQKVWithSz_muxOutFire = (attnQKVWithSz_mux_io_output_valid && attnQKVWithSz_cmd_ready);
  assign attnQKVWithSz_muxOutIsFirst = (attnQKVWithSz_mux_io_output_valid && cmdGen_attnQKVWithSz_mux_io_output_payload_first);
  assign attnQKVWithSz_selOvf = (attnQKVWithSz_sel == 3'b110);
  assign attnQKVWithSz_tagVec_0 = 6'h04;
  assign attnQKVWithSz_tagVec_1 = 6'h05;
  assign attnQKVWithSz_tagVec_2 = 6'h06;
  assign attnQKVWithSz_tagVec_3 = 6'h06;
  assign attnQKVWithSz_tagVec_4 = 6'h07;
  assign attnQKVWithSz_tagVec_5 = 6'h08;
  assign attnQKVWithSz_tagVec_6 = 6'h08;
  assign attnQKVWithSz_tagFire = (attnQKVWithSz_muxOutFire && attnQKVWithSz_muxOutIsFirst);
  assign attnQKVWithSz_tag_valid = attnQKVWithSz_tagFire;
  assign attnQKVWithSz_tag_payload = t_attnQKVWithSz_tag_payload;
  assign attnQKVWithSz_cmd_valid = attnQKVWithSz_mux_io_output_valid;
  assign attnQKVWithSz_cmd_payload_fragment = attnQKVWithSz_mux_io_output_payload_fragment;
  assign attnQKVWithSz_cmd_payload_last = (attnQKVWithSz_mux_io_output_payload_last && attnQKVWithSz_selOvf);
  assign mlpWithPredict_cmd_valid = 1'b0;
  assign t_mlpWithPredict_cmd_payload_last = 73'h0;
  assign mlpWithPredict_cmd_payload_last = t_mlpWithPredict_cmd_payload_last[0];
  assign mlpWithPredict_cmd_payload_fragment = t_mlpWithPredict_cmd_payload_last[72 : 1];
  assign mlpWithPredict_tag_valid = 1'b0;
  assign mlpWithPredict_tag_payload = 6'h0;
  assign mlpDense_mlpLnCmd_valid = 1'b1;
  assign mlpDense_mlpLnCmd_payload_last = 1'b1;
  assign mlpDense_mlpLnCmd_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_mlpLnCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_mlpDense_mlpLnCmd_payload_fragment_1};
  assign t_mlpDense_attnOCmdVec_payload_last_3 = (t_mlpDense_attnOCmdVec_payload_last_1 == 10'h213);
  always @(*) begin
    t_mlpDense_attnOCmdVec_payload_last_1 = t_mlpDense_attnOCmdVec_payload_last;
    if(mlpDense_attnOCmdVec_fire) begin
      t_mlpDense_attnOCmdVec_payload_last_1 = (t_mlpDense_attnOCmdVec_payload_last + 10'h001);
      if(t_mlpDense_attnOCmdVec_payload_last_2) begin
        t_mlpDense_attnOCmdVec_payload_last_1 = 10'h0;
      end
    end
  end

  always @(*) begin
    t_mlpDense_attnOCmdVec_payload_fragment_1 = t_mlpDense_attnOCmdVec_payload_fragment;
    if(mlpDense_attnOCmdVec_fire) begin
      t_mlpDense_attnOCmdVec_payload_fragment_1 = (t_mlpDense_attnOCmdVec_payload_fragment + 32'h00002000);
      if(t_mlpDense_attnOCmdVec_payload_last_2) begin
        t_mlpDense_attnOCmdVec_payload_fragment_1 = 32'h010e2000;
      end
    end
  end

  assign mlpDense_attnOCmdVec_valid = 1'b1;
  assign mlpDense_attnOCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_attnOCmdVec_payload_fragment_3},1'b0},t_mlpDense_attnOCmdVec_payload_last_2},6'h0},1'b1},t_mlpDense_attnOCmdVec_payload_fragment_2};
  assign mlpDense_attnOCmdVec_payload_last = t_mlpDense_attnOCmdVec_payload_last_2;
  assign mlpDense_attnOCmdVec_fire = (mlpDense_attnOCmdVec_valid && mlpDense_attnOCmdVec_ready);
  assign t_mlpDense_mlpDenseGCmdVec_payload_last_3 = (t_mlpDense_mlpDenseGCmdVec_payload_last_1 == 11'h595);
  always @(*) begin
    t_mlpDense_mlpDenseGCmdVec_payload_last_1 = t_mlpDense_mlpDenseGCmdVec_payload_last;
    if(mlpDense_mlpDenseGCmdVec_fire) begin
      t_mlpDense_mlpDenseGCmdVec_payload_last_1 = (t_mlpDense_mlpDenseGCmdVec_payload_last + 11'h001);
      if(t_mlpDense_mlpDenseGCmdVec_payload_last_2) begin
        t_mlpDense_mlpDenseGCmdVec_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = t_mlpDense_mlpDenseGCmdVec_payload_fragment;
    if(mlpDense_mlpDenseGCmdVec_fire) begin
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = (t_mlpDense_mlpDenseGCmdVec_payload_fragment + 32'h00002000);
      if(t_mlpDense_mlpDenseGCmdVec_payload_last_2) begin
        t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = 32'h0150c000;
      end
    end
  end

  assign mlpDense_mlpDenseGCmdVec_valid = 1'b1;
  assign mlpDense_mlpDenseGCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_mlpDenseGCmdVec_payload_fragment_3},1'b0},t_mlpDense_mlpDenseGCmdVec_payload_last_2},6'h0},1'b1},t_mlpDense_mlpDenseGCmdVec_payload_fragment_2};
  assign mlpDense_mlpDenseGCmdVec_payload_last = t_mlpDense_mlpDenseGCmdVec_payload_last_2;
  assign mlpDense_mlpDenseGCmdVec_fire = (mlpDense_mlpDenseGCmdVec_valid && mlpDense_mlpDenseGCmdVec_ready);
  assign mlpDense_attnOCmdVec_ready = mlpDense_mux_io_inputs_0_ready;
  assign mlpDense_mlpLnCmd_ready = mlpDense_mux_io_inputs_1_ready;
  assign mlpDense_mlpDenseGCmdVec_ready = mlpDense_mux_io_inputs_2_ready;
  assign mlpDense_muxOutFire = (mlpDense_mux_io_output_valid && mlpDense_cmd_ready);
  assign mlpDense_muxOutIsFirst = (mlpDense_mux_io_output_valid && cmdGen_mlpDense_mux_io_output_payload_first);
  assign mlpDense_selOvf = (mlpDense_sel == 3'b100);
  assign mlpDense_tagVec_0 = 6'h0b;
  assign mlpDense_tagVec_1 = 6'h0c;
  assign mlpDense_tagVec_2 = 6'h0f;
  assign mlpDense_tagVec_3 = 6'h10;
  assign mlpDense_tagVec_4 = 6'h11;
  assign mlpDense_tagFire = (mlpDense_muxOutFire && mlpDense_muxOutIsFirst);
  assign mlpDense_tag_valid = mlpDense_tagFire;
  assign mlpDense_tag_payload = t_mlpDense_tag_payload;
  assign mlpDense_cmd_valid = mlpDense_mux_io_output_valid;
  assign mlpDense_cmd_payload_fragment = mlpDense_mux_io_output_payload_fragment;
  assign mlpDense_cmd_payload_last = (mlpDense_mux_io_output_payload_last && mlpDense_selOvf);
  assign logits_lgDenseScale_valid = 1'b1;
  assign logits_lgDenseScale_payload_last = 1'b1;
  assign logits_lgDenseScale_payload_fragment = {{{{{{{4'b0000,4'b0000},t_logits_lgDenseScale_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_logits_lgDenseScale_payload_fragment_2};
  assign t_logits_lgDenseHeadVec_payload_last_3 = (t_logits_lgDenseHeadVec_payload_last_1 == 13'h103c);
  always @(*) begin
    t_logits_lgDenseHeadVec_payload_last_1 = t_logits_lgDenseHeadVec_payload_last;
    if(logits_lgDenseHeadVec_fire) begin
      t_logits_lgDenseHeadVec_payload_last_1 = (t_logits_lgDenseHeadVec_payload_last + 13'h0001);
      if(t_logits_lgDenseHeadVec_payload_last_2) begin
        t_logits_lgDenseHeadVec_payload_last_1 = 13'h0;
      end
    end
  end

  always @(*) begin
    t_logits_lgDenseHeadVec_payload_fragment_1 = t_logits_lgDenseHeadVec_payload_fragment;
    if(logits_lgDenseHeadVec_fire) begin
      t_logits_lgDenseHeadVec_payload_fragment_1 = (t_logits_lgDenseHeadVec_payload_fragment + 32'h00002000);
      if(t_logits_lgDenseHeadVec_payload_last_2) begin
        t_logits_lgDenseHeadVec_payload_fragment_1 = 32'h75f02000;
      end
    end
  end

  assign logits_lgDenseHeadVec_valid = 1'b1;
  assign logits_lgDenseHeadVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_logits_lgDenseHeadVec_payload_fragment_3},1'b0},t_logits_lgDenseHeadVec_payload_last_2},6'h0},1'b1},t_logits_lgDenseHeadVec_payload_fragment_2};
  assign logits_lgDenseHeadVec_payload_last = t_logits_lgDenseHeadVec_payload_last_2;
  assign logits_lgDenseHeadVec_fire = (logits_lgDenseHeadVec_valid && logits_lgDenseHeadVec_ready);
  assign logits_lgDenseScale_ready = logits_mux_io_inputs_0_ready;
  assign logits_lgDenseHeadVec_ready = logits_mux_io_inputs_1_ready;
  assign t_io_inputs_2_payload_last = 73'h0;
  assign logits_mux_io_inputs_2_payload_last = t_io_inputs_2_payload_last[0];
  assign logits_mux_io_inputs_2_payload_fragment = t_io_inputs_2_payload_last[72 : 1];
  assign t_io_inputs_3_payload_last = 73'h0;
  assign logits_mux_io_inputs_3_payload_last = t_io_inputs_3_payload_last[0];
  assign logits_mux_io_inputs_3_payload_fragment = t_io_inputs_3_payload_last[72 : 1];
  assign logits_muxOutFire = (logits_mux_io_output_valid && logits_cmd_ready);
  assign logits_muxOutIsFirst = (logits_mux_io_output_valid && cmdGen_logits_mux_io_output_payload_first);
  assign logits_selOvf = (logits_sel == 1'b1);
  assign logits_mux_io_select = {status_enPredictor,logits_sel};
  assign logits_tagVec_0 = 6'h12;
  assign logits_tagVec_1 = 6'h13;
  assign logits_tagFire = (logits_muxOutFire && logits_muxOutIsFirst);
  assign logits_tag_valid = logits_tagFire;
  assign logits_tag_payload = t_logits_tag_payload;
  assign logits_cmd_valid = logits_mux_io_output_valid;
  assign logits_cmd_payload_fragment = logits_mux_io_output_payload_fragment;
  assign logits_cmd_payload_last = (logits_mux_io_output_payload_last && logits_selOvf);
  assign attnKV_cmd_fire = (attnKV_cmd_valid && attnKV_cmd_ready);
  assign kvDone = (attnKV_cmd_fire && attnKV_cmd_payload_last);
  assign attnQKVNoSz_cmd_fire = (attnQKVNoSz_cmd_valid && attnQKVNoSz_cmd_ready);
  assign qkvNoSzDone = (attnQKVNoSz_cmd_fire && attnQKVNoSz_cmd_payload_last);
  assign attnQKVWithSz_cmd_fire = (attnQKVWithSz_cmd_valid && attnQKVWithSz_cmd_ready);
  assign qkvDone = (attnQKVWithSz_cmd_fire && attnQKVWithSz_cmd_payload_last);
  assign mlpWithPredict_cmd_fire = (mlpWithPredict_cmd_valid && mlpWithPredict_cmd_ready);
  assign sparseMlpDone = (mlpWithPredict_cmd_fire && mlpWithPredict_cmd_payload_last);
  assign mlpDense_cmd_fire = (mlpDense_cmd_valid && mlpDense_cmd_ready);
  assign denseMlpDone = (mlpDense_cmd_fire && mlpDense_cmd_payload_last);
  assign mlpDone = (sparseMlpDone || denseMlpDone);
  assign logits_cmd_fire = (logits_cmd_valid && logits_cmd_ready);
  assign logitsDone = (logits_cmd_fire && logits_cmd_payload_last);
  assign tokenIn_ready = mm2sCmdMux_io_inputs_0_ready;
  assign attnLn_ready = mm2sCmdMux_io_inputs_1_ready;
  assign attnKV_cmd_ready = mm2sCmdMux_io_inputs_2_ready;
  assign attnQKVNoSz_cmd_ready = mm2sCmdMux_io_inputs_3_ready;
  assign attnQKVWithSz_cmd_ready = mm2sCmdMux_io_inputs_4_ready;
  assign mlpWithPredict_cmd_ready = mm2sCmdMux_io_inputs_5_ready;
  assign mlpDense_cmd_ready = mm2sCmdMux_io_inputs_6_ready;
  assign logits_cmd_ready = mm2sCmdMux_io_inputs_7_ready;
  assign tokenTag_ready = busTagMux_io_inputs_0_ready;
  assign attnLnTag_ready = busTagMux_io_inputs_1_ready;
  assign attnKV_tag_ready = busTagMux_io_inputs_2_ready;
  assign attnQKVNoSz_tag_ready = busTagMux_io_inputs_3_ready;
  assign attnQKVWithSz_tag_ready = busTagMux_io_inputs_4_ready;
  assign mlpWithPredict_tag_ready = busTagMux_io_inputs_5_ready;
  assign mlpDense_tag_ready = busTagMux_io_inputs_6_ready;
  assign logits_tag_ready = busTagMux_io_inputs_7_ready;
  assign local_bus_valid = io_mm2s_valid;
  assign io_mm2s_ready = local_bus_ready;
  assign local_bus_payload_data = io_mm2s_payload_data;
  assign local_bus_payload_dest = tagFifo_io_pop_payload[5 : 0];
  assign local_bus_payload_last = io_mm2s_payload_last;
  assign io_mm2s_fire = (io_mm2s_valid && io_mm2s_ready);
  assign tagFifo_io_pop_ready = (io_mm2s_fire && io_mm2s_payload_last);
  assign tokenTag_fire = (tokenTag_valid && tokenTag_ready);
  assign io_s2mm_valid = local_kvBus_valid;
  assign local_kvBus_ready = io_s2mm_ready;
  assign io_s2mm_payload_data = local_kvBus_payload_data;
  assign io_s2mm_payload_last = local_kvBus_payload_last;
  assign io_s2mm_payload_keep = 64'hffffffffffffffff;
  assign mm2sCmd_valid = mm2sCmdMux_io_output_valid;
  assign mm2sCmd_payload = mm2sCmdMux_io_output_payload_fragment;
  assign mm2sCmd_ready = mm2sCmd_rValidN;
  assign mm2sCmd_s2mPipe_valid = (mm2sCmd_valid || (! mm2sCmd_rValidN));
  assign mm2sCmd_s2mPipe_payload = (mm2sCmd_rValidN ? mm2sCmd_payload : mm2sCmd_rData);
  always @(*) begin
    mm2sCmd_s2mPipe_ready = mm2sCmd_s2mPipe_m2sPipe_ready;
    if((! mm2sCmd_s2mPipe_m2sPipe_valid)) begin
      mm2sCmd_s2mPipe_ready = 1'b1;
    end
  end

  assign mm2sCmd_s2mPipe_m2sPipe_valid = mm2sCmd_s2mPipe_rValid;
  assign mm2sCmd_s2mPipe_m2sPipe_payload = mm2sCmd_s2mPipe_rData;
  assign io_mm2sCmd_valid = mm2sCmd_s2mPipe_m2sPipe_valid;
  assign mm2sCmd_s2mPipe_m2sPipe_ready = io_mm2sCmd_ready;
  assign io_mm2sCmd_payload = mm2sCmd_s2mPipe_m2sPipe_payload;
  assign enIncHead = ((kvDone || qkvNoSzDone) || qkvDone);
  always @(*) begin
    enIncLayer = mlpDone;
    if((prefill && layerCntOvf)) begin
      enIncLayer = (kvDone && headCntOvf);
    end
  end

  assign enTokenCnt = (enIncLayer && layerCntOvf);
  always @(*) begin
    selectNext = select_1;
    if(((select_1 == 3'b000) && tokenIn_fire)) begin
      selectNext = 3'b001;
    end
    if(((select_1 == 3'b001) && attnLn_fire)) begin
      if((firstToken || (prefill && layerCntOvf))) begin
        selectNext = 3'b010;
      end else begin
        if(noSzFromMem) begin
          selectNext = 3'b011;
        end else begin
          selectNext = 3'b100;
        end
      end
    end
    if((((select_1 == 3'b010) && kvDone) && headCntOvf)) begin
      if(layerCntOvf) begin
        selectNext = 3'b000;
      end else begin
        if(status_enPredictor) begin
          selectNext = 3'b101;
        end else begin
          selectNext = 3'b110;
        end
      end
    end
    if((((select_1 == 3'b011) && qkvNoSzDone) && headCntOvf)) begin
      if(status_enPredictor) begin
        selectNext = 3'b101;
      end else begin
        selectNext = 3'b110;
      end
    end
    if((((select_1 == 3'b100) && qkvDone) && headCntOvf)) begin
      if(status_enPredictor) begin
        selectNext = 3'b101;
      end else begin
        selectNext = 3'b110;
      end
    end
    if(((select_1 == 3'b101) && sparseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b111;
      end else begin
        selectNext = 3'b001;
      end
    end
    if(((select_1 == 3'b110) && denseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b111;
      end else begin
        selectNext = 3'b001;
      end
    end
    if(((select_1 == 3'b111) && logitsDone)) begin
      selectNext = 3'b000;
    end
  end

  assign io_tokenIndex_fire = (io_tokenIndex_valid && io_tokenIndex_ready);
  always @(*) begin
    s2mm_tokenEnFifo_io_pop_ready = 1'b0;
    if(s2mm_enIncLayer) begin
      if(s2mm_layerCntOvf) begin
        s2mm_tokenEnFifo_io_pop_ready = 1'b1;
      end
    end
  end

  assign s2mm_mallocPerHead = 21'h10e000;
  assign s2mm_headCntAbout2Ovf = (s2mm_headCnt == 4'b1110);
  always @(*) begin
    s2mm_headBaseNext = s2mm_headBase;
    if(s2mm_enIncHead) begin
      s2mm_headBaseNext = (s2mm_headBase + t_s2mm_headBaseNext);
      if(s2mm_headCntOvf) begin
        s2mm_headBaseNext = 32'h00002000;
      end
    end
  end

  assign s2mm_mallocPerLayer = (status_enPredictor ? 26'h3b29000 : 26'h3710000);
  assign s2mm_layerCntAbout2Ovf = (s2mm_layerCnt == 5'h1e);
  always @(*) begin
    s2mm_layerBaseNext = s2mm_layerBase;
    if(s2mm_enIncLayer) begin
      s2mm_layerBaseNext = (s2mm_layerBase + t_s2mm_layerBaseNext);
      if(s2mm_layerCntOvf) begin
        s2mm_layerBaseNext = 32'h07d00000;
      end
    end
  end

  assign s2mm_attnHeadBaseNext = (s2mm_layerBaseNext + s2mm_headBaseNext);
  assign s2mm_s2mmTokenCntLow = s2mm_s2mmTokenCnt[3 : 0];
  assign s2mm_s2mmTokenHigh = s2mm_s2mmTokenCnt[9 : 4];
  assign s2mm_s2mSzToMem = (&s2mm_s2mmTokenCntLow);
  assign s2mm_kCacheCmd = {{{{{{{4'b0000,4'b0001},t_s2mm_kCacheCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_kCacheCmd_4};
  assign s2mm_vCacheCmd = {{{{{{{4'b0000,4'b0001},t_s2mm_vCacheCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_vCacheCmd_4};
  assign s2mm_kSzCmd = {{{{{{{4'b0000,4'b0010},t_s2mm_kSzCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_kSzCmd_4};
  assign s2mm_vSzCmd = {{{{{{{4'b0000,4'b0010},t_s2mm_vSzCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_vSzCmd_4};
  assign s2mm_s2mmCmd_payload = t_s2mm_s2mmCmd_payload;
  assign s2mm_s2mmCmd_valid = s2mm_tokenEnFifo_io_pop_valid;
  assign s2mm_s2mmCmd_fire = (s2mm_s2mmCmd_valid && s2mm_s2mmCmd_ready);
  assign s2mm_enIncHead = (s2mm_s2mmCmd_fire && (&s2mm_cnt));
  assign s2mm_enIncLayer = (s2mm_enIncHead && s2mm_headCntOvf);
  assign s2mm_toMemSel = s2mm_cnt;
  always @(*) begin
    s2mm_s2mmCmdThrow_valid = s2mm_s2mmCmd_valid;
    if(t_when) begin
      s2mm_s2mmCmdThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    s2mm_s2mmCmd_ready = s2mm_s2mmCmdThrow_ready;
    if(t_when) begin
      s2mm_s2mmCmd_ready = 1'b1;
    end
  end

  assign s2mm_s2mmCmdThrow_payload = s2mm_s2mmCmd_payload;
  assign s2mm_s2mmCmdThrow_ready = s2mm_cmdFifo_io_push_ready;
  assign io_s2mmCmd_valid = s2mm_cmdFifo_io_pop_valid;
  assign io_s2mmCmd_payload = s2mm_cmdFifo_io_pop_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      token <= 10'h0;
      headBase <= 32'h00002000;
      headCnt <= 4'b0000;
      headCntOvf <= 1'b0;
      layerBase <= 32'h07d00000;
      layerCnt <= 5'h0;
      layerCntOvf <= 1'b0;
      attnHeadBase <= 32'h0;
      indexCmdGen_denseLastCnt <= 1'b0;
      indexCmdGen_selBaseAddr <= 26'h0;
      indexCmdGen_selLen <= 11'h0;
      local_index_valid_regNext <= 1'b0;
      local_index_payload_last_regNext <= 1'b0;
      t_indexCmdGen_denseU_payload_last <= 11'h0;
      t_indexCmdGen_denseU_payload_last_2 <= 1'b0;
      t_indexCmdGen_denseU_payload_fragment <= 32'h02038000;
      t_indexCmdGen_denseU_payload_fragment_2 <= 23'h002000;
      t_indexCmdGen_denseD_payload_last <= 11'h0;
      t_indexCmdGen_denseD_payload_last_2 <= 1'b0;
      t_indexCmdGen_denseD_payload_fragment <= 32'h02ba4000;
      t_indexCmdGen_denseD_payload_fragment_2 <= 23'h002000;
      indexCmdGen_enDenseUD <= 1'b0;
      indexCmdGen_indexFlow_payload_first <= 1'b1;
      t_attnKV_attnKCmdVec_payload_last <= 6'h0;
      t_attnKV_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnKV_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnKV_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnKV_attnVCmdVec_payload_last <= 6'h0;
      t_attnKV_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnKV_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnKV_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnKV_sel <= 1'b0;
      cmdGen_attnKV_mux_io_output_payload_first <= 1'b1;
      attnKV_tagSel <= 1'b0;
      t_attnQKVNoSz_attnQCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnQCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment <= 32'h0;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVNoSz_attnKCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVNoSz_attnVCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnQKVNoSz_sel <= 3'b000;
      cmdGen_attnQKVNoSz_mux_io_output_payload_first <= 1'b1;
      attnQKVNoSz_tagSel <= 3'b000;
      t_attnQKVWithSz_attnQCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnQCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment <= 32'h0;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVWithSz_attnKCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVWithSz_attnVCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnQKVWithSz_sel <= 3'b000;
      cmdGen_attnQKVWithSz_mux_io_output_payload_first <= 1'b1;
      attnQKVWithSz_tagSel <= 3'b000;
      t_mlpDense_attnOCmdVec_payload_last <= 10'h0;
      t_mlpDense_attnOCmdVec_payload_last_2 <= 1'b0;
      t_mlpDense_attnOCmdVec_payload_fragment <= 32'h010e2000;
      t_mlpDense_attnOCmdVec_payload_fragment_2 <= 23'h002000;
      t_mlpDense_mlpDenseGCmdVec_payload_last <= 11'h0;
      t_mlpDense_mlpDenseGCmdVec_payload_last_2 <= 1'b0;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment <= 32'h0150c000;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 <= 23'h002000;
      mlpDense_sel <= 3'b000;
      cmdGen_mlpDense_mux_io_output_payload_first <= 1'b1;
      mlpDense_muxSel <= 2'b00;
      mlpDense_tagSel <= 3'b000;
      t_logits_lgDenseHeadVec_payload_last <= 13'h0;
      t_logits_lgDenseHeadVec_payload_last_2 <= 1'b0;
      t_logits_lgDenseHeadVec_payload_fragment <= 32'h75f02000;
      t_logits_lgDenseHeadVec_payload_fragment_2 <= 23'h002000;
      logits_sel <= 1'b0;
      cmdGen_logits_mux_io_output_payload_first <= 1'b1;
      logits_tagSel <= 1'b0;
      prefill <= 1'b1;
      mm2sCmd_rValidN <= 1'b1;
      mm2sCmd_s2mPipe_rValid <= 1'b0;
      select_1 <= 3'b000;
      s2mm_headBase <= 32'h00002000;
      s2mm_headCnt <= 4'b0000;
      s2mm_headCntOvf <= 1'b0;
      s2mm_layerBase <= 32'h07d00000;
      s2mm_layerCnt <= 5'h0;
      s2mm_layerCntOvf <= 1'b0;
      s2mm_s2mmTokenCnt <= 10'h0;
      s2mm_attnHeadBase <= 32'h0;
      s2mm_cnt <= 2'b00;
    end else begin
      headBase <= headBaseNext;
      if(enIncHead) begin
        headCnt <= (headCnt + 4'b0001);
        if(headCntAbout2Ovf) begin
          headCntOvf <= 1'b1;
        end
        if(headCntOvf) begin
          headCnt <= 4'b0000;
          headCntOvf <= 1'b0;
        end
      end
      layerBase <= layerBaseNext;
      if(enIncLayer) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntAbout2Ovf) begin
          layerCntOvf <= 1'b1;
        end
        if(layerCntOvf) begin
          layerCnt <= 5'h0;
          layerCntOvf <= 1'b0;
        end
      end
      attnHeadBase <= attnHeadBaseNext;
      if(((local_index_valid && local_index_payload_last) && (! status_enPredictor))) begin
        indexCmdGen_denseLastCnt <= (indexCmdGen_denseLastCnt + 1'b1);
        if((indexCmdGen_denseLastCnt == 1'b1)) begin
          indexCmdGen_denseLastCnt <= 1'b0;
        end
      end
      indexCmdGen_selBaseAddr <= indexCmdGen_selDenseBaseAddr;
      indexCmdGen_selLen <= indexCmdGen_selDenseLen;
      local_index_valid_regNext <= local_index_valid;
      local_index_payload_last_regNext <= local_index_payload_last;
      t_indexCmdGen_denseU_payload_last <= t_indexCmdGen_denseU_payload_last_1;
      t_indexCmdGen_denseU_payload_last_2 <= t_indexCmdGen_denseU_payload_last_3;
      t_indexCmdGen_denseU_payload_fragment <= t_indexCmdGen_denseU_payload_fragment_1;
      t_indexCmdGen_denseU_payload_fragment_2 <= {9'd0, t_t_indexCmdGen_denseU_payload_fragment_2};
      t_indexCmdGen_denseD_payload_last <= t_indexCmdGen_denseD_payload_last_1;
      t_indexCmdGen_denseD_payload_last_2 <= t_indexCmdGen_denseD_payload_last_3;
      t_indexCmdGen_denseD_payload_fragment <= t_indexCmdGen_denseD_payload_fragment_1;
      t_indexCmdGen_denseD_payload_fragment_2 <= {9'd0, t_t_indexCmdGen_denseD_payload_fragment_2};
      if(indexCmdGen_indexFlow_valid) begin
        indexCmdGen_indexFlow_payload_first <= indexCmdGen_indexFlow_payload_last;
      end
      if((indexCmdGen_indexFlow_valid && indexCmdGen_indexFlow_payload_first)) begin
        indexCmdGen_enDenseUD <= 1'b1;
      end
      if((indexCmdGen_indexMux_io_output_valid && indexCmdGen_indexMux_io_output_payload_last)) begin
        indexCmdGen_enDenseUD <= 1'b0;
      end
      t_attnKV_attnKCmdVec_payload_last <= t_attnKV_attnKCmdVec_payload_last_1;
      t_attnKV_attnKCmdVec_payload_last_2 <= t_attnKV_attnKCmdVec_payload_last_3;
      t_attnKV_attnKCmdVec_payload_fragment <= t_attnKV_attnKCmdVec_payload_fragment_1;
      t_attnKV_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnKV_attnKCmdVec_payload_fragment_2};
      t_attnKV_attnVCmdVec_payload_last <= t_attnKV_attnVCmdVec_payload_last_1;
      t_attnKV_attnVCmdVec_payload_last_2 <= t_attnKV_attnVCmdVec_payload_last_3;
      t_attnKV_attnVCmdVec_payload_fragment <= t_attnKV_attnVCmdVec_payload_fragment_1;
      t_attnKV_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnKV_attnVCmdVec_payload_fragment_2};
      if(attnKV_muxOutFire) begin
        cmdGen_attnKV_mux_io_output_payload_first <= attnKV_mux_io_output_payload_last;
      end
      if((attnKV_muxOutFire && attnKV_mux_io_output_payload_last)) begin
        attnKV_sel <= (attnKV_sel + 1'b1);
        if(attnKV_selOvf) begin
          attnKV_sel <= 1'b0;
        end
      end
      if((attnKV_muxOutFire && attnKV_muxOutIsFirst)) begin
        attnKV_tagSel <= (attnKV_tagSel + 1'b1);
        if((attnKV_tagSel == 1'b1)) begin
          attnKV_tagSel <= 1'b0;
        end
      end
      t_attnQKVNoSz_attnQCmdVec_payload_last <= t_attnQKVNoSz_attnQCmdVec_payload_last_1;
      t_attnQKVNoSz_attnQCmdVec_payload_last_2 <= t_attnQKVNoSz_attnQCmdVec_payload_last_3;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment <= t_attnQKVNoSz_attnQCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2};
      t_attnQKVNoSz_attnKCmdVec_payload_last <= t_attnQKVNoSz_attnKCmdVec_payload_last_1;
      t_attnQKVNoSz_attnKCmdVec_payload_last_2 <= t_attnQKVNoSz_attnKCmdVec_payload_last_3;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment <= t_attnQKVNoSz_attnKCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2};
      t_attnQKVNoSz_attnVCmdVec_payload_last <= t_attnQKVNoSz_attnVCmdVec_payload_last_1;
      t_attnQKVNoSz_attnVCmdVec_payload_last_2 <= t_attnQKVNoSz_attnVCmdVec_payload_last_3;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment <= t_attnQKVNoSz_attnVCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2};
      if(attnQKVNoSz_muxOutFire) begin
        cmdGen_attnQKVNoSz_mux_io_output_payload_first <= attnQKVNoSz_mux_io_output_payload_last;
      end
      if((attnQKVNoSz_muxOutFire && attnQKVNoSz_mux_io_output_payload_last)) begin
        attnQKVNoSz_sel <= (attnQKVNoSz_sel + 3'b001);
        if(attnQKVNoSz_selOvf) begin
          attnQKVNoSz_sel <= 3'b000;
        end
      end
      if((attnQKVNoSz_muxOutFire && attnQKVNoSz_muxOutIsFirst)) begin
        attnQKVNoSz_tagSel <= (attnQKVNoSz_tagSel + 3'b001);
        if((attnQKVNoSz_tagSel == 3'b100)) begin
          attnQKVNoSz_tagSel <= 3'b000;
        end
      end
      t_attnQKVWithSz_attnQCmdVec_payload_last <= t_attnQKVWithSz_attnQCmdVec_payload_last_1;
      t_attnQKVWithSz_attnQCmdVec_payload_last_2 <= t_attnQKVWithSz_attnQCmdVec_payload_last_3;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment <= t_attnQKVWithSz_attnQCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2};
      t_attnQKVWithSz_attnKCmdVec_payload_last <= t_attnQKVWithSz_attnKCmdVec_payload_last_1;
      t_attnQKVWithSz_attnKCmdVec_payload_last_2 <= t_attnQKVWithSz_attnKCmdVec_payload_last_3;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment <= t_attnQKVWithSz_attnKCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2};
      t_attnQKVWithSz_attnVCmdVec_payload_last <= t_attnQKVWithSz_attnVCmdVec_payload_last_1;
      t_attnQKVWithSz_attnVCmdVec_payload_last_2 <= t_attnQKVWithSz_attnVCmdVec_payload_last_3;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment <= t_attnQKVWithSz_attnVCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2};
      if(attnQKVWithSz_muxOutFire) begin
        cmdGen_attnQKVWithSz_mux_io_output_payload_first <= attnQKVWithSz_mux_io_output_payload_last;
      end
      if((attnQKVWithSz_muxOutFire && attnQKVWithSz_mux_io_output_payload_last)) begin
        attnQKVWithSz_sel <= (attnQKVWithSz_sel + 3'b001);
        if(attnQKVWithSz_selOvf) begin
          attnQKVWithSz_sel <= 3'b000;
        end
      end
      if((attnQKVWithSz_muxOutFire && attnQKVWithSz_muxOutIsFirst)) begin
        attnQKVWithSz_tagSel <= (attnQKVWithSz_tagSel + 3'b001);
        if((attnQKVWithSz_tagSel == 3'b110)) begin
          attnQKVWithSz_tagSel <= 3'b000;
        end
      end
      t_mlpDense_attnOCmdVec_payload_last <= t_mlpDense_attnOCmdVec_payload_last_1;
      t_mlpDense_attnOCmdVec_payload_last_2 <= t_mlpDense_attnOCmdVec_payload_last_3;
      t_mlpDense_attnOCmdVec_payload_fragment <= t_mlpDense_attnOCmdVec_payload_fragment_1;
      t_mlpDense_attnOCmdVec_payload_fragment_2 <= {9'd0, t_t_mlpDense_attnOCmdVec_payload_fragment_2};
      t_mlpDense_mlpDenseGCmdVec_payload_last <= t_mlpDense_mlpDenseGCmdVec_payload_last_1;
      t_mlpDense_mlpDenseGCmdVec_payload_last_2 <= t_mlpDense_mlpDenseGCmdVec_payload_last_3;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment <= t_mlpDense_mlpDenseGCmdVec_payload_fragment_1;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 <= {9'd0, t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2};
      if(mlpDense_muxOutFire) begin
        cmdGen_mlpDense_mux_io_output_payload_first <= mlpDense_mux_io_output_payload_last;
      end
      if((mlpDense_muxOutFire && mlpDense_mux_io_output_payload_last)) begin
        if((mlpDense_muxSel != 2'b11)) begin
          mlpDense_muxSel <= (mlpDense_muxSel + 2'b01);
        end
        mlpDense_sel <= (mlpDense_sel + 3'b001);
        if(mlpDense_selOvf) begin
          mlpDense_sel <= 3'b000;
          mlpDense_muxSel <= 2'b00;
        end
      end
      if((mlpDense_muxOutFire && mlpDense_muxOutIsFirst)) begin
        mlpDense_tagSel <= (mlpDense_tagSel + 3'b001);
        if((mlpDense_tagSel == 3'b100)) begin
          mlpDense_tagSel <= 3'b000;
        end
      end
      t_logits_lgDenseHeadVec_payload_last <= t_logits_lgDenseHeadVec_payload_last_1;
      t_logits_lgDenseHeadVec_payload_last_2 <= t_logits_lgDenseHeadVec_payload_last_3;
      t_logits_lgDenseHeadVec_payload_fragment <= t_logits_lgDenseHeadVec_payload_fragment_1;
      t_logits_lgDenseHeadVec_payload_fragment_2 <= {9'd0, t_t_logits_lgDenseHeadVec_payload_fragment_2};
      if(logits_muxOutFire) begin
        cmdGen_logits_mux_io_output_payload_first <= logits_mux_io_output_payload_last;
      end
      if((logits_muxOutFire && logits_mux_io_output_payload_last)) begin
        logits_sel <= (logits_sel + 1'b1);
        if((logits_sel == 1'b1)) begin
          logits_sel <= 1'b0;
        end
      end
      if((logits_muxOutFire && logits_muxOutIsFirst)) begin
        logits_tagSel <= (logits_tagSel + 1'b1);
        if((logits_tagSel == 1'b1)) begin
          logits_tagSel <= 1'b0;
        end
      end
      if((tokenTag_fire && (tokenTag_payload == 6'h01))) begin
        prefill <= 1'b0;
      end
      if(mm2sCmd_valid) begin
        mm2sCmd_rValidN <= 1'b0;
      end
      if(mm2sCmd_s2mPipe_ready) begin
        mm2sCmd_rValidN <= 1'b1;
      end
      if(mm2sCmd_s2mPipe_ready) begin
        mm2sCmd_s2mPipe_rValid <= mm2sCmd_s2mPipe_valid;
      end
      if(enTokenCnt) begin
        token <= (token + 10'h001);
      end
      select_1 <= selectNext;
      s2mm_headBase <= s2mm_headBaseNext;
      if(s2mm_enIncHead) begin
        s2mm_headCnt <= (s2mm_headCnt + 4'b0001);
        if(s2mm_headCntAbout2Ovf) begin
          s2mm_headCntOvf <= 1'b1;
        end
        if(s2mm_headCntOvf) begin
          s2mm_headCnt <= 4'b0000;
          s2mm_headCntOvf <= 1'b0;
        end
      end
      s2mm_layerBase <= s2mm_layerBaseNext;
      if(s2mm_enIncLayer) begin
        s2mm_layerCnt <= (s2mm_layerCnt + 5'h01);
        if(s2mm_layerCntAbout2Ovf) begin
          s2mm_layerCntOvf <= 1'b1;
        end
        if(s2mm_layerCntOvf) begin
          s2mm_layerCnt <= 5'h0;
          s2mm_layerCntOvf <= 1'b0;
          s2mm_s2mmTokenCnt <= (s2mm_s2mmTokenCnt + 10'h001);
        end
      end
      s2mm_attnHeadBase <= s2mm_attnHeadBaseNext;
      if(s2mm_s2mmCmd_fire) begin
        s2mm_cnt <= (s2mm_cnt + 2'b01);
      end
    end
  end

  always @(posedge clk_1_clk) begin
    indexCmdGen_selTag <= indexCmdGen_selDenseTag;
    t_indexCmdGen_indexFlow_payload_fragment <= local_index_payload_tdata;
    if(mm2sCmd_ready) begin
      mm2sCmd_rData <= mm2sCmd_payload;
    end
    if(mm2sCmd_s2mPipe_ready) begin
      mm2sCmd_s2mPipe_rData <= mm2sCmd_s2mPipe_payload;
    end
  end


endmodule

module StateGen_1 (
  input  wire          io_busIn_valid,
  input  wire          io_busIn_payload_last,
  input  wire [5:0]    io_busIn_payload_fragment,
  input  wire          io_engineOut_valid,
  input  wire [5:0]    io_engineOut_payload,
  input  wire          io_dotOut_valid,
  input  wire [5:0]    io_dotOut_payload,
  input  wire          io_gtCnt_valid,
  input  wire [15:0]   io_gtCnt_payload,
  input  wire          io_tokenIndexFlow_valid,
  input  wire [5:0]    io_tokenIndexFlow_payload,
  input  wire          status_argmaxVld,
  input  wire          status_endOfDecode,
  output wire          status_enPredictor,
  output wire          status_enProSparse,
  output wire          status_tokenNextHit,
  output wire          status_mlpNextHit,
  output wire          status_vNextHit,
  output wire          status_prefill,
  output wire          status_flushRes,
  output wire          status_nextLayer,
  output wire [15:0]   status_nonZeroCnt,
  output wire          status_logitsGen,
  output wire          status_toLogitsGen,
  output wire [9:0]    status_token,
  output wire [4:0]    status_layerCnt,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                busAlign_prefillIn_fifo_io_pop_ready;
  wire                dataAlign_prefillIn_fifo_io_pop_ready;
  wire                busAlign_prefillIn_fifo_io_push_ready;
  wire                busAlign_prefillIn_fifo_io_pop_valid;
  wire                busAlign_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    busAlign_prefillIn_fifo_io_occupancy;
  wire       [6:0]    busAlign_prefillIn_fifo_io_availability;
  wire                dataAlign_prefillIn_fifo_io_push_ready;
  wire                dataAlign_prefillIn_fifo_io_pop_valid;
  wire                dataAlign_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    dataAlign_prefillIn_fifo_io_occupancy;
  wire       [6:0]    dataAlign_prefillIn_fifo_io_availability;
  wire                busAlign_prefillIn_valid;
  wire                busAlign_prefillIn_ready;
  wire                busAlign_prefillIn_payload;
  wire                busAlign_prefillLastHit;
  wire                busAlign_prefillHit;
  wire                busAlign_attnVHit;
  wire                busAlign_mlpDHit;
  wire                busAlign_lmHeadHit;
  reg        [3:0]    busAlign_headCnt;
  wire                busAlign_headCntOvf;
  reg                 busAlign_lastHead;
  wire                busAlign_headVld;
  reg        [4:0]    busAlign_layerCnt;
  reg                 busAlign_lastLayer;
  wire                busAlign_layerCntAbout2Ovf;
  reg                 busAlign_enLayerCntInc;
  reg                 busAlign_prefillFirstToken;
  wire                stateGen_2_busAlign_prefillIn_fifo_io_pop_fire;
  wire                busAlign_noAttn;
  wire                busAlign_tokenNextHit;
  wire                busAlign_vNextHit;
  wire                dataAlign_prefillIn_valid;
  wire                dataAlign_prefillIn_ready;
  wire                dataAlign_prefillIn_payload;
  wire                dataAlign_mlpHit;
  wire                dataAlign_vHit;
  reg        [3:0]    dataAlign_engineOutCnt;
  wire                dataAlign_engineOutCntOvf;
  wire                dataAlign_engineOutVld;
  reg        [10:0]   dataAlign_dotOutCnt;
  wire                dataAlign_dotOutCntOvf;
  wire                dataAlign_dotOutVld;
  wire                dataAlign_mlpDone;
  wire                dataAlign_vDone;
  reg                 dataAlign_prefillFirstToken;
  reg                 dataAlign_lastLayer;
  reg                 dataAlign_enInc;
  reg        [4:0]    dataAlign_layerCnt;
  reg        [9:0]    dataAlign_tokenCnt;
  wire                dataAlign_layerOvf;
  wire                dataAlign_beforeLastLayer;
  reg        [15:0]   dataAlign_nonZeroCnt;
  wire                dataAlign_flushRes;
  reg                 dataAlign_logitsGen;

  StreamFifo_103 busAlign_prefillIn_fifo (
    .io_push_valid   (busAlign_prefillIn_valid                    ), //i
    .io_push_ready   (busAlign_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (busAlign_prefillIn_payload                  ), //i
    .io_pop_valid    (busAlign_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (busAlign_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (busAlign_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                        ), //i
    .io_occupancy    (busAlign_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (busAlign_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                                   ), //i
    .clk_0_resetn    (clk_0_resetn                                )  //i
  );
  StreamFifo_103 dataAlign_prefillIn_fifo (
    .io_push_valid   (dataAlign_prefillIn_valid                    ), //i
    .io_push_ready   (dataAlign_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (dataAlign_prefillIn_payload                  ), //i
    .io_pop_valid    (dataAlign_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (dataAlign_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (dataAlign_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                         ), //i
    .io_occupancy    (dataAlign_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (dataAlign_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                                    ), //i
    .clk_0_resetn    (clk_0_resetn                                 )  //i
  );
  assign status_enPredictor = 1'b0;
  assign status_enProSparse = 1'b0;
  assign busAlign_prefillIn_valid = io_tokenIndexFlow_valid;
  assign busAlign_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign busAlign_prefillIn_ready = busAlign_prefillIn_fifo_io_push_ready;
  assign busAlign_prefillLastHit = (io_busIn_payload_fragment == 6'h01);
  assign busAlign_prefillHit = ((io_busIn_payload_fragment == 6'h0) || busAlign_prefillLastHit);
  assign busAlign_attnVHit = (io_busIn_payload_fragment == 6'h07);
  assign busAlign_mlpDHit = (io_busIn_payload_fragment == 6'h11);
  assign busAlign_lmHeadHit = (io_busIn_payload_fragment == 6'h13);
  assign busAlign_headCntOvf = (busAlign_headCnt == 4'b1111);
  assign busAlign_layerCntAbout2Ovf = (busAlign_layerCnt == 5'h1e);
  assign busAlign_prefillIn_fifo_io_pop_ready = (busAlign_enLayerCntInc && busAlign_lastLayer);
  assign stateGen_2_busAlign_prefillIn_fifo_io_pop_fire = (busAlign_prefillIn_fifo_io_pop_valid && busAlign_prefillIn_fifo_io_pop_ready);
  assign busAlign_headVld = ((io_busIn_valid && io_busIn_payload_last) && busAlign_attnVHit);
  always @(*) begin
    busAlign_enLayerCntInc = ((io_busIn_valid && io_busIn_payload_last) && busAlign_mlpDHit);
    if((busAlign_prefillIn_fifo_io_pop_payload && busAlign_lastLayer)) begin
      busAlign_enLayerCntInc = (busAlign_headVld && busAlign_headCntOvf);
    end
  end

  assign busAlign_noAttn = (busAlign_prefillFirstToken || (busAlign_prefillIn_fifo_io_pop_payload && busAlign_lastLayer));
  assign busAlign_tokenNextHit = ((((busAlign_attnVHit && busAlign_prefillIn_fifo_io_pop_payload) && busAlign_lastLayer) && busAlign_lastHead) || busAlign_lmHeadHit);
  assign busAlign_vNextHit = (busAlign_attnVHit && (! busAlign_noAttn));
  assign status_tokenNextHit = busAlign_tokenNextHit;
  assign status_vNextHit = busAlign_vNextHit;
  assign status_mlpNextHit = busAlign_mlpDHit;
  assign status_prefill = busAlign_prefillIn_fifo_io_pop_payload;
  assign dataAlign_prefillIn_valid = io_tokenIndexFlow_valid;
  assign dataAlign_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign dataAlign_prefillIn_ready = dataAlign_prefillIn_fifo_io_push_ready;
  assign dataAlign_mlpHit = (io_engineOut_payload == 6'h1f);
  assign dataAlign_vHit = ((io_dotOut_payload == 6'h07) || (io_dotOut_payload == 6'h13));
  assign dataAlign_engineOutCntOvf = (dataAlign_engineOutCnt == 4'b1111);
  assign dataAlign_dotOutCntOvf = (dataAlign_dotOutCnt == 11'h7ff);
  assign dataAlign_mlpDone = (dataAlign_engineOutVld && dataAlign_engineOutCntOvf);
  assign dataAlign_vDone = (dataAlign_dotOutVld && dataAlign_dotOutCntOvf);
  assign dataAlign_engineOutVld = (io_engineOut_valid && dataAlign_mlpHit);
  assign dataAlign_dotOutVld = (io_dotOut_valid && dataAlign_vHit);
  assign dataAlign_layerOvf = (dataAlign_layerCnt == 5'h1f);
  assign dataAlign_beforeLastLayer = (dataAlign_layerCnt == 5'h1e);
  always @(*) begin
    dataAlign_enInc = dataAlign_mlpDone;
    if((dataAlign_prefillIn_fifo_io_pop_payload && dataAlign_lastLayer)) begin
      dataAlign_enInc = dataAlign_vDone;
    end
  end

  assign dataAlign_prefillIn_fifo_io_pop_ready = (dataAlign_enInc && dataAlign_lastLayer);
  assign dataAlign_flushRes = ((dataAlign_prefillIn_fifo_io_pop_payload ? dataAlign_beforeLastLayer : dataAlign_lastLayer) && dataAlign_engineOutVld);
  assign status_flushRes = dataAlign_flushRes;
  assign status_nextLayer = dataAlign_enInc;
  assign status_nonZeroCnt = dataAlign_nonZeroCnt;
  assign status_logitsGen = dataAlign_logitsGen;
  assign status_toLogitsGen = ((! dataAlign_prefillIn_fifo_io_pop_payload) && dataAlign_lastLayer);
  assign status_token = dataAlign_tokenCnt;
  assign status_layerCnt = dataAlign_layerCnt;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      busAlign_headCnt <= 4'b0000;
      busAlign_lastHead <= 1'b0;
      busAlign_layerCnt <= 5'h0;
      busAlign_lastLayer <= 1'b0;
      busAlign_prefillFirstToken <= 1'b1;
      dataAlign_engineOutCnt <= 4'b0000;
      dataAlign_dotOutCnt <= 11'h0;
      dataAlign_prefillFirstToken <= 1'b1;
      dataAlign_lastLayer <= 1'b0;
      dataAlign_layerCnt <= 5'h0;
      dataAlign_tokenCnt <= 10'h0;
      dataAlign_nonZeroCnt <= 16'hffff;
      dataAlign_logitsGen <= 1'b0;
    end else begin
      if(busAlign_headVld) begin
        busAlign_headCnt <= (busAlign_headCnt + 4'b0001);
        if((busAlign_headCnt == 4'b1110)) begin
          busAlign_lastHead <= 1'b1;
        end
        if(busAlign_headCntOvf) begin
          busAlign_lastHead <= 1'b0;
          busAlign_headCnt <= 4'b0000;
        end
      end
      if(busAlign_enLayerCntInc) begin
        busAlign_layerCnt <= (busAlign_layerCnt + 5'h01);
        if(busAlign_layerCntAbout2Ovf) begin
          busAlign_lastLayer <= 1'b1;
        end
        if(busAlign_lastLayer) begin
          busAlign_layerCnt <= 5'h0;
          busAlign_lastLayer <= 1'b0;
        end
      end
      if(stateGen_2_busAlign_prefillIn_fifo_io_pop_fire) begin
        busAlign_prefillFirstToken <= 1'b0;
      end
      if(dataAlign_engineOutVld) begin
        dataAlign_engineOutCnt <= (dataAlign_engineOutCnt + 4'b0001);
        if(dataAlign_engineOutCntOvf) begin
          dataAlign_engineOutCnt <= 4'b0000;
        end
      end
      if(dataAlign_dotOutVld) begin
        dataAlign_dotOutCnt <= (dataAlign_dotOutCnt + 11'h001);
        if(dataAlign_dotOutCntOvf) begin
          dataAlign_dotOutCnt <= 11'h0;
        end
      end
      if(dataAlign_enInc) begin
        dataAlign_layerCnt <= (dataAlign_layerCnt + 5'h01);
        if(dataAlign_beforeLastLayer) begin
          dataAlign_lastLayer <= 1'b1;
        end
        if(dataAlign_layerOvf) begin
          dataAlign_layerCnt <= 5'h0;
          dataAlign_lastLayer <= 1'b0;
          dataAlign_prefillFirstToken <= 1'b0;
          dataAlign_tokenCnt <= (dataAlign_tokenCnt + 10'h001);
          if((dataAlign_tokenCnt == 10'h3ff)) begin
            dataAlign_tokenCnt <= 10'h0;
          end
        end
      end
      if(io_gtCnt_valid) begin
        dataAlign_nonZeroCnt <= io_gtCnt_payload;
      end
      if(dataAlign_enInc) begin
        dataAlign_nonZeroCnt <= 16'hffff;
      end
      if((((! dataAlign_prefillIn_fifo_io_pop_payload) && dataAlign_mlpDone) && dataAlign_lastLayer)) begin
        dataAlign_logitsGen <= 1'b1;
      end
      if(status_argmaxVld) begin
        dataAlign_logitsGen <= 1'b0;
      end
    end
  end


endmodule

module GenCfg_1 (
  output wire          io_cfg_valid,
  input  wire          io_cfg_ready,
  output wire [31:0]   io_cfg_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                mux_io_inputs_0_ready;
  wire                mux_io_inputs_1_ready;
  wire                mux_io_inputs_2_ready;
  wire                mux_io_inputs_3_ready;
  wire                mux_io_inputs_4_ready;
  wire                mux_io_inputs_5_ready;
  wire                mux_io_inputs_6_ready;
  wire                mux_io_output_valid;
  wire                mux_io_output_payload_last;
  wire       [31:0]   mux_io_output_payload_fragment;
  wire                prefillIn_fifo_io_push_ready;
  wire                prefillIn_fifo_io_pop_valid;
  wire                prefillIn_fifo_io_pop_payload;
  wire       [6:0]    prefillIn_fifo_io_occupancy;
  wire       [6:0]    prefillIn_fifo_io_availability;
  wire       [15:0]   t_kCacheCfg;
  wire       [9:0]    t_kCacheCfg_1;
  wire       [15:0]   t_vCacheCfg;
  wire       [9:0]    t_vCacheCfg_1;
  wire       [9:0]    t_vCacheCfg_2;
  reg        [31:0]   t_attnKV_cfg_payload_fragment;
  reg        [31:0]   t_attnQKV_cfg_payload_fragment;
  reg        [31:0]   t_mlpDense_cfg_payload_fragment;
  reg        [31:0]   t_logits_cfg_payload_fragment;
  reg        [9:0]    token;
  wire                firstToken;
  wire       [31:0]   attnLnCfg;
  wire       [31:0]   kNoAttnCfg;
  wire       [31:0]   vNoAttnCfg;
  wire       [31:0]   qCfg;
  wire       [31:0]   kCfg;
  wire       [31:0]   vCfg;
  wire       [31:0]   kCacheCfg;
  wire       [31:0]   vCacheCfg;
  wire       [31:0]   attnOCfg;
  wire       [31:0]   mlpPredUCfg;
  wire       [31:0]   mlpPredDCfg;
  wire       [31:0]   mlpGDenseCfg;
  wire       [31:0]   mlpGSparseCfg;
  wire       [31:0]   mlpUCfg;
  wire       [31:0]   mlpDCfg;
  wire       [31:0]   logitsLnCfg;
  wire       [31:0]   logitsOutCfg;
  wire                attnLn_valid;
  wire                attnLn_ready;
  wire                attnLn_payload_last;
  wire       [31:0]   attnLn_payload_fragment;
  wire                attnO_valid;
  wire                attnO_ready;
  wire                attnO_payload_last;
  wire       [31:0]   attnO_payload_fragment;
  reg        [0:0]    attnKV_cnt;
  wire                attnKV_cntOvf;
  wire                attnKV_cfg_valid;
  reg                 attnKV_cfg_ready;
  wire                attnKV_cfg_payload_last;
  wire       [31:0]   attnKV_cfg_payload_fragment;
  wire                attnKV_cfgPipe_valid;
  wire                attnKV_cfgPipe_ready;
  wire                attnKV_cfgPipe_payload_last;
  wire       [31:0]   attnKV_cfgPipe_payload_fragment;
  reg                 attnKV_cfg_rValid;
  reg                 attnKV_cfg_rData_last;
  reg        [31:0]   attnKV_cfg_rData_fragment;
  wire                attnKV_cfg_fire;
  reg        [2:0]    attnQKV_cnt;
  wire                attnQKV_cntOvf;
  wire                attnQKV_cfg_valid;
  reg                 attnQKV_cfg_ready;
  wire                attnQKV_cfg_payload_last;
  wire       [31:0]   attnQKV_cfg_payload_fragment;
  wire                attnQKV_cfgPipe_valid;
  wire                attnQKV_cfgPipe_ready;
  wire                attnQKV_cfgPipe_payload_last;
  wire       [31:0]   attnQKV_cfgPipe_payload_fragment;
  reg                 attnQKV_cfg_rValid;
  reg                 attnQKV_cfg_rData_last;
  reg        [31:0]   attnQKV_cfg_rData_fragment;
  wire                attnQKV_cfg_fire;
  wire                mlpSparse_cfgPipe_valid;
  wire                mlpSparse_cfgPipe_ready;
  wire                mlpSparse_cfgPipe_payload_last;
  wire       [31:0]   mlpSparse_cfgPipe_payload_fragment;
  wire       [32:0]   t_mlpSparse_cfgPipe_payload_last;
  reg        [1:0]    mlpDense_cnt;
  wire                mlpDense_cntOvf;
  wire                mlpDense_cfg_valid;
  reg                 mlpDense_cfg_ready;
  wire                mlpDense_cfg_payload_last;
  wire       [31:0]   mlpDense_cfg_payload_fragment;
  wire                mlpDense_cfgPipe_valid;
  wire                mlpDense_cfgPipe_ready;
  wire                mlpDense_cfgPipe_payload_last;
  wire       [31:0]   mlpDense_cfgPipe_payload_fragment;
  reg                 mlpDense_cfg_rValid;
  reg                 mlpDense_cfg_rData_last;
  reg        [31:0]   mlpDense_cfg_rData_fragment;
  wire                mlpDense_cfg_fire;
  reg        [0:0]    logits_cnt;
  wire                logits_cntOvf;
  wire                logits_cfg_valid;
  reg                 logits_cfg_ready;
  wire                logits_cfg_payload_last;
  wire       [31:0]   logits_cfg_payload_fragment;
  wire                logits_cfgPipe_valid;
  wire                logits_cfgPipe_ready;
  wire                logits_cfgPipe_payload_last;
  wire       [31:0]   logits_cfgPipe_payload_fragment;
  reg                 logits_cfg_rValid;
  reg                 logits_cfg_rData_last;
  reg        [31:0]   logits_cfg_rData_fragment;
  wire                logits_cfg_fire;
  reg        [3:0]    headCnt;
  wire                headCntOvf;
  wire                enHeadCntInc;
  reg        [4:0]    layerCnt;
  wire                layerCntOvf;
  reg                 enLayerCntInc;
  wire                enTokenCnt;
  wire                attnKV_cfgPipe_fire;
  wire                kvDone;
  wire                attnQKV_cfgPipe_fire;
  wire                qkvDone;
  wire                mlpSparse_cfgPipe_fire;
  wire                sparseMlpDone;
  wire                mlpDense_cfgPipe_fire;
  wire                denseMlpDone;
  wire                mlpDone;
  wire                logits_cfgPipe_fire;
  wire                logitsDone;
  wire                prefillIn_valid;
  wire                prefillIn_ready;
  wire                prefillIn_payload;
  reg        [2:0]    select_1;
  reg        [2:0]    selectNext;
  wire                attnLn_fire;
  wire                attnO_fire;
  wire                cfg_valid;
  reg                 cfg_ready;
  wire       [31:0]   cfg_payload;
  wire                throwCond;
  reg                 cfg_thrown_valid;
  reg                 cfg_thrown_ready;
  wire       [31:0]   cfg_thrown_payload;
  wire                cfg_thrown_m2sPipe_valid;
  wire                cfg_thrown_m2sPipe_ready;
  wire       [31:0]   cfg_thrown_m2sPipe_payload;
  reg                 cfg_thrown_rValid;
  reg        [31:0]   cfg_thrown_rData;

  assign t_kCacheCfg_1 = (token - 10'h001);
  assign t_kCacheCfg = {6'd0, t_kCacheCfg_1};
  assign t_vCacheCfg_1 = (t_vCacheCfg_2 - 10'h001);
  assign t_vCacheCfg = {6'd0, t_vCacheCfg_1};
  assign t_vCacheCfg_2 = (token + 10'h001);
  StreamMux_19 mux (
    .io_select                    (select_1[2:0]                           ), //i
    .io_inputs_0_valid            (attnLn_valid                            ), //i
    .io_inputs_0_ready            (mux_io_inputs_0_ready                   ), //o
    .io_inputs_0_payload_last     (attnLn_payload_last                     ), //i
    .io_inputs_0_payload_fragment (attnLn_payload_fragment[31:0]           ), //i
    .io_inputs_1_valid            (attnKV_cfgPipe_valid                    ), //i
    .io_inputs_1_ready            (mux_io_inputs_1_ready                   ), //o
    .io_inputs_1_payload_last     (attnKV_cfgPipe_payload_last             ), //i
    .io_inputs_1_payload_fragment (attnKV_cfgPipe_payload_fragment[31:0]   ), //i
    .io_inputs_2_valid            (attnQKV_cfgPipe_valid                   ), //i
    .io_inputs_2_ready            (mux_io_inputs_2_ready                   ), //o
    .io_inputs_2_payload_last     (attnQKV_cfgPipe_payload_last            ), //i
    .io_inputs_2_payload_fragment (attnQKV_cfgPipe_payload_fragment[31:0]  ), //i
    .io_inputs_3_valid            (attnO_valid                             ), //i
    .io_inputs_3_ready            (mux_io_inputs_3_ready                   ), //o
    .io_inputs_3_payload_last     (attnO_payload_last                      ), //i
    .io_inputs_3_payload_fragment (attnO_payload_fragment[31:0]            ), //i
    .io_inputs_4_valid            (mlpSparse_cfgPipe_valid                 ), //i
    .io_inputs_4_ready            (mux_io_inputs_4_ready                   ), //o
    .io_inputs_4_payload_last     (mlpSparse_cfgPipe_payload_last          ), //i
    .io_inputs_4_payload_fragment (mlpSparse_cfgPipe_payload_fragment[31:0]), //i
    .io_inputs_5_valid            (mlpDense_cfgPipe_valid                  ), //i
    .io_inputs_5_ready            (mux_io_inputs_5_ready                   ), //o
    .io_inputs_5_payload_last     (mlpDense_cfgPipe_payload_last           ), //i
    .io_inputs_5_payload_fragment (mlpDense_cfgPipe_payload_fragment[31:0] ), //i
    .io_inputs_6_valid            (logits_cfgPipe_valid                    ), //i
    .io_inputs_6_ready            (mux_io_inputs_6_ready                   ), //o
    .io_inputs_6_payload_last     (logits_cfgPipe_payload_last             ), //i
    .io_inputs_6_payload_fragment (logits_cfgPipe_payload_fragment[31:0]   ), //i
    .io_output_valid              (mux_io_output_valid                     ), //o
    .io_output_ready              (cfg_ready                               ), //i
    .io_output_payload_last       (mux_io_output_payload_last              ), //o
    .io_output_payload_fragment   (mux_io_output_payload_fragment[31:0]    )  //o
  );
  StreamFifo_103 prefillIn_fifo (
    .io_push_valid   (prefillIn_valid                    ), //i
    .io_push_ready   (prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (prefillIn_payload                  ), //i
    .io_pop_valid    (prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (enTokenCnt                         ), //i
    .io_pop_payload  (prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                          ), //i
    .clk_0_resetn    (clk_0_resetn                       )  //i
  );
  always @(*) begin
    case(attnKV_cnt)
      1'b0 : t_attnKV_cfg_payload_fragment = kNoAttnCfg;
      default : t_attnKV_cfg_payload_fragment = vNoAttnCfg;
    endcase
  end

  always @(*) begin
    case(attnQKV_cnt)
      3'b000 : t_attnQKV_cfg_payload_fragment = qCfg;
      3'b001 : t_attnQKV_cfg_payload_fragment = kCfg;
      3'b010 : t_attnQKV_cfg_payload_fragment = kCacheCfg;
      3'b011 : t_attnQKV_cfg_payload_fragment = vCfg;
      default : t_attnQKV_cfg_payload_fragment = vCacheCfg;
    endcase
  end

  always @(*) begin
    case(mlpDense_cnt)
      2'b00 : t_mlpDense_cfg_payload_fragment = mlpGDenseCfg;
      2'b01 : t_mlpDense_cfg_payload_fragment = mlpUCfg;
      default : t_mlpDense_cfg_payload_fragment = mlpDCfg;
    endcase
  end

  always @(*) begin
    case(logits_cnt)
      1'b0 : t_logits_cfg_payload_fragment = logitsLnCfg;
      default : t_logits_cfg_payload_fragment = logitsOutCfg;
    endcase
  end

  assign firstToken = (token == 10'h0);
  assign attnLnCfg = {{8'h0c,8'h0f},16'h0};
  assign kNoAttnCfg = {{8'h44,8'h1f},16'h007f};
  assign vNoAttnCfg = {{8'h4c,8'h1f},16'h007f};
  assign qCfg = {{8'h14,8'h1f},16'h007f};
  assign kCfg = {{8'h18,8'h1f},16'h007f};
  assign vCfg = {{8'h1c,8'h1f},16'h007f};
  assign kCacheCfg = {{8'h34,8'h0},t_kCacheCfg};
  assign vCacheCfg = {{8'h3d,8'h0},t_vCacheCfg};
  assign attnOCfg = {{8'h40,8'h0f},16'h0fff};
  assign mlpPredUCfg = {{8'h6c,8'h0f},16'h03ff};
  assign mlpPredDCfg = {{8'h71,8'h2a},16'h0};
  assign mlpGDenseCfg = {{8'h58,8'h0f},16'h2aff};
  assign mlpGSparseCfg = {{8'h58,8'h0f},16'h0};
  assign mlpUCfg = {{8'h60,8'h0f},16'h0};
  assign mlpDCfg = {{8'h7f,8'h0f},16'h0};
  assign logitsLnCfg = {{8'h80,8'h0f},16'h0};
  assign logitsOutCfg = {{8'h8c,8'h0f},16'h7cff};
  assign attnLn_valid = 1'b1;
  assign attnLn_payload_fragment = attnLnCfg;
  assign attnLn_payload_last = 1'b1;
  assign attnO_valid = 1'b1;
  assign attnO_payload_fragment = attnOCfg;
  assign attnO_payload_last = 1'b1;
  assign attnKV_cntOvf = (attnKV_cnt == 1'b1);
  always @(*) begin
    attnKV_cfg_ready = attnKV_cfgPipe_ready;
    if((! attnKV_cfgPipe_valid)) begin
      attnKV_cfg_ready = 1'b1;
    end
  end

  assign attnKV_cfgPipe_valid = attnKV_cfg_rValid;
  assign attnKV_cfgPipe_payload_last = attnKV_cfg_rData_last;
  assign attnKV_cfgPipe_payload_fragment = attnKV_cfg_rData_fragment;
  assign attnKV_cfg_valid = 1'b1;
  assign attnKV_cfg_payload_fragment = t_attnKV_cfg_payload_fragment;
  assign attnKV_cfg_payload_last = attnKV_cntOvf;
  assign attnKV_cfg_fire = (attnKV_cfg_valid && attnKV_cfg_ready);
  assign attnQKV_cntOvf = (attnQKV_cnt == 3'b100);
  always @(*) begin
    attnQKV_cfg_ready = attnQKV_cfgPipe_ready;
    if((! attnQKV_cfgPipe_valid)) begin
      attnQKV_cfg_ready = 1'b1;
    end
  end

  assign attnQKV_cfgPipe_valid = attnQKV_cfg_rValid;
  assign attnQKV_cfgPipe_payload_last = attnQKV_cfg_rData_last;
  assign attnQKV_cfgPipe_payload_fragment = attnQKV_cfg_rData_fragment;
  assign attnQKV_cfg_valid = 1'b1;
  assign attnQKV_cfg_payload_fragment = t_attnQKV_cfg_payload_fragment;
  assign attnQKV_cfg_payload_last = attnQKV_cntOvf;
  assign attnQKV_cfg_fire = (attnQKV_cfg_valid && attnQKV_cfg_ready);
  assign mlpSparse_cfgPipe_valid = 1'b0;
  assign t_mlpSparse_cfgPipe_payload_last = 33'h0;
  assign mlpSparse_cfgPipe_payload_last = t_mlpSparse_cfgPipe_payload_last[0];
  assign mlpSparse_cfgPipe_payload_fragment = t_mlpSparse_cfgPipe_payload_last[32 : 1];
  assign mlpDense_cntOvf = (mlpDense_cnt == 2'b10);
  always @(*) begin
    mlpDense_cfg_ready = mlpDense_cfgPipe_ready;
    if((! mlpDense_cfgPipe_valid)) begin
      mlpDense_cfg_ready = 1'b1;
    end
  end

  assign mlpDense_cfgPipe_valid = mlpDense_cfg_rValid;
  assign mlpDense_cfgPipe_payload_last = mlpDense_cfg_rData_last;
  assign mlpDense_cfgPipe_payload_fragment = mlpDense_cfg_rData_fragment;
  assign mlpDense_cfg_valid = 1'b1;
  assign mlpDense_cfg_payload_fragment = t_mlpDense_cfg_payload_fragment;
  assign mlpDense_cfg_payload_last = mlpDense_cntOvf;
  assign mlpDense_cfg_fire = (mlpDense_cfg_valid && mlpDense_cfg_ready);
  assign logits_cntOvf = (logits_cnt == 1'b1);
  always @(*) begin
    logits_cfg_ready = logits_cfgPipe_ready;
    if((! logits_cfgPipe_valid)) begin
      logits_cfg_ready = 1'b1;
    end
  end

  assign logits_cfgPipe_valid = logits_cfg_rValid;
  assign logits_cfgPipe_payload_last = logits_cfg_rData_last;
  assign logits_cfgPipe_payload_fragment = logits_cfg_rData_fragment;
  assign logits_cfg_valid = 1'b1;
  assign logits_cfg_payload_fragment = t_logits_cfg_payload_fragment;
  assign logits_cfg_payload_last = logits_cntOvf;
  assign logits_cfg_fire = (logits_cfg_valid && logits_cfg_ready);
  assign attnLn_ready = mux_io_inputs_0_ready;
  assign attnKV_cfgPipe_ready = mux_io_inputs_1_ready;
  assign attnQKV_cfgPipe_ready = mux_io_inputs_2_ready;
  assign attnO_ready = mux_io_inputs_3_ready;
  assign mlpSparse_cfgPipe_ready = mux_io_inputs_4_ready;
  assign mlpDense_cfgPipe_ready = mux_io_inputs_5_ready;
  assign logits_cfgPipe_ready = mux_io_inputs_6_ready;
  assign headCntOvf = (headCnt == 4'b1111);
  assign layerCntOvf = (layerCnt == 5'h1f);
  assign enTokenCnt = (enLayerCntInc && layerCntOvf);
  assign attnKV_cfgPipe_fire = (attnKV_cfgPipe_valid && attnKV_cfgPipe_ready);
  assign kvDone = (attnKV_cfgPipe_fire && attnKV_cfgPipe_payload_last);
  assign attnQKV_cfgPipe_fire = (attnQKV_cfgPipe_valid && attnQKV_cfgPipe_ready);
  assign qkvDone = (attnQKV_cfgPipe_fire && attnQKV_cfgPipe_payload_last);
  assign mlpSparse_cfgPipe_fire = (mlpSparse_cfgPipe_valid && mlpSparse_cfgPipe_ready);
  assign sparseMlpDone = (mlpSparse_cfgPipe_fire && mlpSparse_cfgPipe_payload_last);
  assign mlpDense_cfgPipe_fire = (mlpDense_cfgPipe_valid && mlpDense_cfgPipe_ready);
  assign denseMlpDone = (mlpDense_cfgPipe_fire && mlpDense_cfgPipe_payload_last);
  assign mlpDone = (sparseMlpDone || denseMlpDone);
  assign logits_cfgPipe_fire = (logits_cfgPipe_valid && logits_cfgPipe_ready);
  assign logitsDone = (logits_cfgPipe_fire && logits_cfgPipe_payload_last);
  assign prefillIn_valid = status_tokenIndexFlow_valid;
  assign prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign prefillIn_ready = prefillIn_fifo_io_push_ready;
  assign enHeadCntInc = (kvDone || qkvDone);
  always @(*) begin
    enLayerCntInc = mlpDone;
    if((prefillIn_fifo_io_pop_payload && layerCntOvf)) begin
      enLayerCntInc = (kvDone && headCntOvf);
    end
  end

  always @(*) begin
    selectNext = select_1;
    if(((select_1 == 3'b000) && attnLn_fire)) begin
      if((firstToken || (prefillIn_fifo_io_pop_payload && layerCntOvf))) begin
        selectNext = 3'b001;
      end else begin
        selectNext = 3'b010;
      end
    end
    if((((select_1 == 3'b001) && kvDone) && headCntOvf)) begin
      if(layerCntOvf) begin
        selectNext = 3'b000;
      end else begin
        selectNext = 3'b011;
      end
    end
    if((((select_1 == 3'b010) && qkvDone) && headCntOvf)) begin
      selectNext = 3'b011;
    end
    if(((select_1 == 3'b011) && attnO_fire)) begin
      if(status_enPredictor) begin
        selectNext = 3'b100;
      end else begin
        selectNext = 3'b101;
      end
    end
    if(((select_1 == 3'b100) && sparseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b110;
      end else begin
        selectNext = 3'b000;
      end
    end
    if(((select_1 == 3'b101) && denseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b110;
      end else begin
        selectNext = 3'b000;
      end
    end
    if(((select_1 == 3'b110) && logitsDone)) begin
      selectNext = 3'b000;
    end
  end

  assign attnLn_fire = (attnLn_valid && attnLn_ready);
  assign attnO_fire = (attnO_valid && attnO_ready);
  assign cfg_valid = mux_io_output_valid;
  assign cfg_payload = mux_io_output_payload_fragment;
  assign throwCond = ((cfg_payload == attnLnCfg) || (cfg_payload == logitsLnCfg));
  always @(*) begin
    cfg_thrown_valid = cfg_valid;
    if(throwCond) begin
      cfg_thrown_valid = 1'b0;
    end
  end

  always @(*) begin
    cfg_ready = cfg_thrown_ready;
    if(throwCond) begin
      cfg_ready = 1'b1;
    end
  end

  assign cfg_thrown_payload = cfg_payload;
  always @(*) begin
    cfg_thrown_ready = cfg_thrown_m2sPipe_ready;
    if((! cfg_thrown_m2sPipe_valid)) begin
      cfg_thrown_ready = 1'b1;
    end
  end

  assign cfg_thrown_m2sPipe_valid = cfg_thrown_rValid;
  assign cfg_thrown_m2sPipe_payload = cfg_thrown_rData;
  assign io_cfg_valid = cfg_thrown_m2sPipe_valid;
  assign cfg_thrown_m2sPipe_ready = io_cfg_ready;
  assign io_cfg_payload = cfg_thrown_m2sPipe_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      token <= 10'h0;
      attnKV_cnt <= 1'b0;
      attnKV_cfg_rValid <= 1'b0;
      attnQKV_cnt <= 3'b000;
      attnQKV_cfg_rValid <= 1'b0;
      mlpDense_cnt <= 2'b00;
      mlpDense_cfg_rValid <= 1'b0;
      logits_cnt <= 1'b0;
      logits_cfg_rValid <= 1'b0;
      headCnt <= 4'b0000;
      layerCnt <= 5'h0;
      select_1 <= 3'b000;
      cfg_thrown_rValid <= 1'b0;
    end else begin
      if(attnKV_cfg_ready) begin
        attnKV_cfg_rValid <= attnKV_cfg_valid;
      end
      if(attnKV_cfg_fire) begin
        attnKV_cnt <= (attnKV_cnt + 1'b1);
        if(attnKV_cntOvf) begin
          attnKV_cnt <= 1'b0;
        end
      end
      if(attnQKV_cfg_ready) begin
        attnQKV_cfg_rValid <= attnQKV_cfg_valid;
      end
      if(attnQKV_cfg_fire) begin
        attnQKV_cnt <= (attnQKV_cnt + 3'b001);
        if(attnQKV_cntOvf) begin
          attnQKV_cnt <= 3'b000;
        end
      end
      if(mlpDense_cfg_ready) begin
        mlpDense_cfg_rValid <= mlpDense_cfg_valid;
      end
      if(mlpDense_cfg_fire) begin
        mlpDense_cnt <= (mlpDense_cnt + 2'b01);
        if(mlpDense_cntOvf) begin
          mlpDense_cnt <= 2'b00;
        end
      end
      if(logits_cfg_ready) begin
        logits_cfg_rValid <= logits_cfg_valid;
      end
      if(logits_cfg_fire) begin
        logits_cnt <= (logits_cnt + 1'b1);
        if(logits_cntOvf) begin
          logits_cnt <= 1'b0;
        end
      end
      if(enHeadCntInc) begin
        headCnt <= (headCnt + 4'b0001);
        if(headCntOvf) begin
          headCnt <= 4'b0000;
        end
      end
      if(enLayerCntInc) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntOvf) begin
          layerCnt <= 5'h0;
        end
      end
      if(enTokenCnt) begin
        token <= (token + 10'h001);
      end
      select_1 <= selectNext;
      if(cfg_thrown_ready) begin
        cfg_thrown_rValid <= cfg_thrown_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(attnKV_cfg_ready) begin
      attnKV_cfg_rData_last <= attnKV_cfg_payload_last;
      attnKV_cfg_rData_fragment <= attnKV_cfg_payload_fragment;
    end
    if(attnQKV_cfg_ready) begin
      attnQKV_cfg_rData_last <= attnQKV_cfg_payload_last;
      attnQKV_cfg_rData_fragment <= attnQKV_cfg_payload_fragment;
    end
    if(mlpDense_cfg_ready) begin
      mlpDense_cfg_rData_last <= mlpDense_cfg_payload_last;
      mlpDense_cfg_rData_fragment <= mlpDense_cfg_payload_fragment;
    end
    if(logits_cfg_ready) begin
      logits_cfg_rData_last <= logits_cfg_payload_last;
      logits_cfg_rData_fragment <= logits_cfg_payload_fragment;
    end
    if(cfg_thrown_ready) begin
      cfg_thrown_rData <= cfg_thrown_payload;
    end
  end


endmodule

module KvScaleZeroPacker_1 (
  input  wire          io_qScale_valid,
  input  wire [15:0]   io_qScale_payload,
  input  wire          io_qZero_valid,
  input  wire [7:0]    io_qZero_payload,
  input  wire          io_qOut_valid,
  input  wire          io_qOut_payload_last,
  input  wire [7:0]    io_qOut_payload_fragment,
  output wire          io_kvBus_valid,
  input  wire          io_kvBus_ready,
  output wire          io_kvBus_payload_last,
  output wire [511:0]  io_kvBus_payload_fragment,
  output wire          io_kSzOut_valid,
  input  wire          io_kSzOut_ready,
  output wire [31:0]   io_kSzOut_payload,
  output wire          io_vSzOut_valid,
  input  wire          io_vSzOut_ready,
  output wire [31:0]   io_vSzOut_payload,
  input  wire          io_nextLayer,
  input  wire          io_tokenIndexFlow_valid,
  input  wire [5:0]    io_tokenIndexFlow_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg                 k_prefillIn_fifo_io_pop_ready;
  wire                k_fifo_io_push_valid;
  reg                 k_fifo_io_pop_ready;
  reg                 v_prefillIn_fifo_io_pop_ready;
  wire                v_fifo_io_push_valid;
  reg                 v_fifo_io_pop_ready;
  wire                k_prefillIn_fifo_io_push_ready;
  wire                k_prefillIn_fifo_io_pop_valid;
  wire                k_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    k_prefillIn_fifo_io_occupancy;
  wire       [6:0]    k_prefillIn_fifo_io_availability;
  wire                k_fifo_io_push_ready;
  wire                k_fifo_io_pop_valid;
  wire       [511:0]  k_fifo_io_pop_payload;
  wire                v_prefillIn_fifo_io_push_ready;
  wire                v_prefillIn_fifo_io_pop_valid;
  wire                v_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    v_prefillIn_fifo_io_occupancy;
  wire       [6:0]    v_prefillIn_fifo_io_availability;
  wire                v_fifo_io_push_ready;
  wire                v_fifo_io_pop_valid;
  wire       [511:0]  v_fifo_io_pop_payload;
  wire                busFifo_io_push_ready;
  wire                busFifo_io_pop_valid;
  wire                busFifo_io_pop_payload_last;
  wire       [511:0]  busFifo_io_pop_payload_fragment;
  wire       [5:0]    busFifo_io_occupancy;
  wire       [5:0]    busFifo_io_availability;
  wire                busMux_io_inputs_0_ready;
  wire                busMux_io_inputs_1_ready;
  wire                busMux_io_inputs_2_ready;
  wire                busMux_io_output_valid;
  wire                busMux_io_output_payload_last;
  wire       [511:0]  busMux_io_output_payload_fragment;
  wire       [4:0]    t_kScale_payload;
  wire       [5:0]    t_kScale_payload_1;
  wire       [4:0]    t_vScale_payload;
  wire       [5:0]    t_vScale_payload_1;
  wire       [3:0]    t_k_outCntOvf;
  wire                t_when;
  reg        [31:0]   t_k_sOut_payload;
  wire       [3:0]    t_v_outCntOvf;
  wire                t_when_1;
  reg        [31:0]   t_v_sOut_payload;
  wire       [383:0]  t_qOutAdapt_64;
  wire       [255:0]  t_qOutAdapt_65;
  wire       [127:0]  t_qOutAdapt_66;
  wire                t_when_2;
  wire                t_when_3;
  reg                 scaleIsV;
  reg                 zeroIsV;
  wire                kScale_valid;
  reg                 kScale_ready;
  wire       [15:0]   kScale_payload;
  wire                kScalePipe_valid;
  wire                kScalePipe_ready;
  wire       [15:0]   kScalePipe_payload;
  reg                 kScale_rValid;
  reg        [15:0]   kScale_rData;
  wire                kZero_valid;
  reg                 kZero_ready;
  wire       [7:0]    kZero_payload;
  wire                kZeroPipe_valid;
  wire                kZeroPipe_ready;
  wire       [7:0]    kZeroPipe_payload;
  reg                 kZero_rValid;
  reg        [7:0]    kZero_rData;
  wire                vScale_valid;
  reg                 vScale_ready;
  wire       [15:0]   vScale_payload;
  wire                vScalePipe_valid;
  wire                vScalePipe_ready;
  wire       [15:0]   vScalePipe_payload;
  reg                 vScale_rValid;
  reg        [15:0]   vScale_rData;
  wire                vZero_valid;
  reg                 vZero_ready;
  wire       [7:0]    vZero_payload;
  wire                vZeroPipe_valid;
  wire                vZeroPipe_ready;
  wire       [7:0]    vZeroPipe_payload;
  reg                 vZero_rValid;
  reg        [7:0]    vZero_rData;
  wire                kJoinEvent_valid;
  wire                kJoinEvent_ready;
  wire                kJoinEvent_fire;
  wire                kSz_valid;
  wire                kSz_ready;
  wire       [31:0]   kSz_payload;
  wire                vJoinEvent_valid;
  wire                vJoinEvent_ready;
  wire                vJoinEvent_fire;
  wire                vSz_valid;
  wire                vSz_ready;
  wire       [31:0]   vSz_payload;
  reg        [15:0]   tokenIndexCnt;
  wire                firstTokenIndex;
  wire                k_prefillIn_valid;
  wire                k_prefillIn_ready;
  wire                k_prefillIn_payload;
  wire                k_data_valid;
  wire                k_data_ready;
  wire       [31:0]   k_data_payload;
  wire                k_dataFire;
  wire                k_fifoPop_valid;
  wire                k_fifoPop_ready;
  wire       [511:0]  k_fifoPop_payload;
  reg                 szPacker_k_fifo_io_pop_rValid;
  reg        [511:0]  szPacker_k_fifo_io_pop_rData;
  reg        [3:0]    k_tokenCnt;
  reg        [8:0]    k_depthCnt;
  wire                k_tokenCntAbout2Ovf;
  wire                k_depthCntOvf;
  (* max_fanout = "100" *) reg                 k_isTokenZero;
  reg                 k_tokenCntOvfReg;
  reg        [31:0]   k_pushVec_0;
  reg        [31:0]   k_pushVec_1;
  reg        [31:0]   k_pushVec_2;
  reg        [31:0]   k_pushVec_3;
  reg        [31:0]   k_pushVec_4;
  reg        [31:0]   k_pushVec_5;
  reg        [31:0]   k_pushVec_6;
  reg        [31:0]   k_pushVec_7;
  reg        [31:0]   k_pushVec_8;
  reg        [31:0]   k_pushVec_9;
  reg        [31:0]   k_pushVec_10;
  reg        [31:0]   k_pushVec_11;
  reg        [31:0]   k_pushVec_12;
  reg        [31:0]   k_pushVec_13;
  reg        [31:0]   k_pushVec_14;
  reg        [31:0]   k_pushVec_15;
  wire       [15:0]   t_1;
  wire       [511:0]  k_pushVecBits;
  wire                k_toBus_valid;
  reg                 k_toBus_ready;
  wire                k_toBus_payload_last;
  wire       [511:0]  k_toBus_payload_fragment;
  (* max_fanout = "100" *) reg                 k_flag;
  wire                k_fifoPop_fire;
  (* max_fanout = "100" *) reg                 k_vld;
  wire                k_sOut_valid;
  reg                 k_sOut_ready;
  wire       [31:0]   k_sOut_payload;
  reg        [3:0]    k_outCnt;
  wire                k_outCntOvf;
  reg        [3:0]    k_headCnt;
  reg        [4:0]    k_layerCnt;
  wire                k_lastLayer;
  wire                k_sOutFire;
  wire       [31:0]   k_dataSplit_0;
  wire       [31:0]   k_dataSplit_1;
  wire       [31:0]   k_dataSplit_2;
  wire       [31:0]   k_dataSplit_3;
  wire       [31:0]   k_dataSplit_4;
  wire       [31:0]   k_dataSplit_5;
  wire       [31:0]   k_dataSplit_6;
  wire       [31:0]   k_dataSplit_7;
  wire       [31:0]   k_dataSplit_8;
  wire       [31:0]   k_dataSplit_9;
  wire       [31:0]   k_dataSplit_10;
  wire       [31:0]   k_dataSplit_11;
  wire       [31:0]   k_dataSplit_12;
  wire       [31:0]   k_dataSplit_13;
  wire       [31:0]   k_dataSplit_14;
  wire       [31:0]   k_dataSplit_15;
  wire                k_throwCond;
  reg                 k_sOutThrow_valid;
  reg                 k_sOutThrow_ready;
  wire       [31:0]   k_sOutThrow_payload;
  wire                v_prefillIn_valid;
  wire                v_prefillIn_ready;
  wire                v_prefillIn_payload;
  wire                v_data_valid;
  wire                v_data_ready;
  wire       [31:0]   v_data_payload;
  wire                v_dataFire;
  wire                v_fifoPop_valid;
  wire                v_fifoPop_ready;
  wire       [511:0]  v_fifoPop_payload;
  reg                 szPacker_v_fifo_io_pop_rValid;
  reg        [511:0]  szPacker_v_fifo_io_pop_rData;
  reg        [3:0]    v_tokenCnt;
  reg        [8:0]    v_depthCnt;
  wire                v_tokenCntAbout2Ovf;
  wire                v_depthCntOvf;
  (* max_fanout = "100" *) reg                 v_isTokenZero;
  reg                 v_tokenCntOvfReg;
  reg        [31:0]   v_pushVec_0;
  reg        [31:0]   v_pushVec_1;
  reg        [31:0]   v_pushVec_2;
  reg        [31:0]   v_pushVec_3;
  reg        [31:0]   v_pushVec_4;
  reg        [31:0]   v_pushVec_5;
  reg        [31:0]   v_pushVec_6;
  reg        [31:0]   v_pushVec_7;
  reg        [31:0]   v_pushVec_8;
  reg        [31:0]   v_pushVec_9;
  reg        [31:0]   v_pushVec_10;
  reg        [31:0]   v_pushVec_11;
  reg        [31:0]   v_pushVec_12;
  reg        [31:0]   v_pushVec_13;
  reg        [31:0]   v_pushVec_14;
  reg        [31:0]   v_pushVec_15;
  wire       [15:0]   t_2;
  wire       [511:0]  v_pushVecBits;
  wire                v_toBus_valid;
  reg                 v_toBus_ready;
  wire                v_toBus_payload_last;
  wire       [511:0]  v_toBus_payload_fragment;
  (* max_fanout = "100" *) reg                 v_flag;
  wire                v_fifoPop_fire;
  (* max_fanout = "100" *) reg                 v_vld;
  wire                v_sOut_valid;
  reg                 v_sOut_ready;
  wire       [31:0]   v_sOut_payload;
  reg        [3:0]    v_outCnt;
  wire                v_outCntOvf;
  reg        [3:0]    v_headCnt;
  reg        [4:0]    v_layerCnt;
  wire                v_lastLayer;
  wire                v_sOutFire;
  wire       [31:0]   v_dataSplit_0;
  wire       [31:0]   v_dataSplit_1;
  wire       [31:0]   v_dataSplit_2;
  wire       [31:0]   v_dataSplit_3;
  wire       [31:0]   v_dataSplit_4;
  wire       [31:0]   v_dataSplit_5;
  wire       [31:0]   v_dataSplit_6;
  wire       [31:0]   v_dataSplit_7;
  wire       [31:0]   v_dataSplit_8;
  wire       [31:0]   v_dataSplit_9;
  wire       [31:0]   v_dataSplit_10;
  wire       [31:0]   v_dataSplit_11;
  wire       [31:0]   v_dataSplit_12;
  wire       [31:0]   v_dataSplit_13;
  wire       [31:0]   v_dataSplit_14;
  wire       [31:0]   v_dataSplit_15;
  wire                v_throwCond;
  reg                 v_sOutThrow_valid;
  reg                 v_sOutThrow_ready;
  wire       [31:0]   v_sOutThrow_payload;
  wire       [7:0]    t_qOutAdapt;
  reg        [7:0]    t_qOutAdapt_1;
  reg        [7:0]    t_qOutAdapt_2;
  reg        [7:0]    t_qOutAdapt_3;
  reg        [7:0]    t_qOutAdapt_4;
  reg        [7:0]    t_qOutAdapt_5;
  reg        [7:0]    t_qOutAdapt_6;
  reg        [7:0]    t_qOutAdapt_7;
  reg        [7:0]    t_qOutAdapt_8;
  reg        [7:0]    t_qOutAdapt_9;
  reg        [7:0]    t_qOutAdapt_10;
  reg        [7:0]    t_qOutAdapt_11;
  reg        [7:0]    t_qOutAdapt_12;
  reg        [7:0]    t_qOutAdapt_13;
  reg        [7:0]    t_qOutAdapt_14;
  reg        [7:0]    t_qOutAdapt_15;
  reg        [7:0]    t_qOutAdapt_16;
  reg        [7:0]    t_qOutAdapt_17;
  reg        [7:0]    t_qOutAdapt_18;
  reg        [7:0]    t_qOutAdapt_19;
  reg        [7:0]    t_qOutAdapt_20;
  reg        [7:0]    t_qOutAdapt_21;
  reg        [7:0]    t_qOutAdapt_22;
  reg        [7:0]    t_qOutAdapt_23;
  reg        [7:0]    t_qOutAdapt_24;
  reg        [7:0]    t_qOutAdapt_25;
  reg        [7:0]    t_qOutAdapt_26;
  reg        [7:0]    t_qOutAdapt_27;
  reg        [7:0]    t_qOutAdapt_28;
  reg        [7:0]    t_qOutAdapt_29;
  reg        [7:0]    t_qOutAdapt_30;
  reg        [7:0]    t_qOutAdapt_31;
  reg        [7:0]    t_qOutAdapt_32;
  reg        [7:0]    t_qOutAdapt_33;
  reg        [7:0]    t_qOutAdapt_34;
  reg        [7:0]    t_qOutAdapt_35;
  reg        [7:0]    t_qOutAdapt_36;
  reg        [7:0]    t_qOutAdapt_37;
  reg        [7:0]    t_qOutAdapt_38;
  reg        [7:0]    t_qOutAdapt_39;
  reg        [7:0]    t_qOutAdapt_40;
  reg        [7:0]    t_qOutAdapt_41;
  reg        [7:0]    t_qOutAdapt_42;
  reg        [7:0]    t_qOutAdapt_43;
  reg        [7:0]    t_qOutAdapt_44;
  reg        [7:0]    t_qOutAdapt_45;
  reg        [7:0]    t_qOutAdapt_46;
  reg        [7:0]    t_qOutAdapt_47;
  reg        [7:0]    t_qOutAdapt_48;
  reg        [7:0]    t_qOutAdapt_49;
  reg        [7:0]    t_qOutAdapt_50;
  reg        [7:0]    t_qOutAdapt_51;
  reg        [7:0]    t_qOutAdapt_52;
  reg        [7:0]    t_qOutAdapt_53;
  reg        [7:0]    t_qOutAdapt_54;
  reg        [7:0]    t_qOutAdapt_55;
  reg        [7:0]    t_qOutAdapt_56;
  reg        [7:0]    t_qOutAdapt_57;
  reg        [7:0]    t_qOutAdapt_58;
  reg        [7:0]    t_qOutAdapt_59;
  reg        [7:0]    t_qOutAdapt_60;
  reg        [7:0]    t_qOutAdapt_61;
  reg        [7:0]    t_qOutAdapt_62;
  reg        [7:0]    t_qOutAdapt_63;
  wire       [511:0]  qOutAdapt;
  reg        [5:0]    qOutCnt;
  wire                qOutCntOvf;
  wire                qOutBus_valid;
  reg                 qOutBus_ready;
  wire                qOutBus_payload_last;
  wire       [511:0]  qOutBus_payload_fragment;
  wire                k_sOutThrow_m2sPipe_valid;
  reg                 k_sOutThrow_m2sPipe_ready;
  wire       [31:0]   k_sOutThrow_m2sPipe_payload;
  reg                 k_sOutThrow_rValid;
  reg        [31:0]   k_sOutThrow_rData;
  wire                k_sOutThrow_m2sPipe_m2sPipe_valid;
  wire                k_sOutThrow_m2sPipe_m2sPipe_ready;
  wire       [31:0]   k_sOutThrow_m2sPipe_m2sPipe_payload;
  reg                 k_sOutThrow_m2sPipe_rValid;
  reg        [31:0]   k_sOutThrow_m2sPipe_rData;
  wire                v_sOutThrow_m2sPipe_valid;
  reg                 v_sOutThrow_m2sPipe_ready;
  wire       [31:0]   v_sOutThrow_m2sPipe_payload;
  reg                 v_sOutThrow_rValid;
  reg        [31:0]   v_sOutThrow_rData;
  wire                v_sOutThrow_m2sPipe_m2sPipe_valid;
  wire                v_sOutThrow_m2sPipe_m2sPipe_ready;
  wire       [31:0]   v_sOutThrow_m2sPipe_m2sPipe_payload;
  reg                 v_sOutThrow_m2sPipe_rValid;
  reg        [31:0]   v_sOutThrow_m2sPipe_rData;
  wire                qOutBus_m2sPipe_valid;
  reg                 qOutBus_m2sPipe_ready;
  wire                qOutBus_m2sPipe_payload_last;
  wire       [511:0]  qOutBus_m2sPipe_payload_fragment;
  reg                 qOutBus_rValid;
  reg                 qOutBus_rData_last;
  reg        [511:0]  qOutBus_rData_fragment;
  wire                qOutBusPipe_valid;
  wire                qOutBusPipe_ready;
  wire                qOutBusPipe_payload_last;
  wire       [511:0]  qOutBusPipe_payload_fragment;
  reg                 qOutBus_m2sPipe_rValid;
  reg                 qOutBus_m2sPipe_rData_last;
  reg        [511:0]  qOutBus_m2sPipe_rData_fragment;
  wire                kToBusPipe_valid;
  wire                kToBusPipe_ready;
  wire                kToBusPipe_payload_last;
  wire       [511:0]  kToBusPipe_payload_fragment;
  reg                 k_toBus_rValid;
  reg                 k_toBus_rData_last;
  reg        [511:0]  k_toBus_rData_fragment;
  wire                vToBusPipe_valid;
  wire                vToBusPipe_ready;
  wire                vToBusPipe_payload_last;
  wire       [511:0]  vToBusPipe_payload_fragment;
  reg                 v_toBus_rValid;
  reg                 v_toBus_rData_last;
  reg        [511:0]  v_toBus_rData_fragment;
  wire                enInc;
  reg        [4:0]    headCnt;
  reg        [4:0]    layerCnt;
  reg        [3:0]    tokenCnt;
  reg                 szToMem;
  reg                 szToMemNext;
  wire                enStateCntInc;
  reg        [1:0]    stateCnt;
  reg        [1:0]    stateCntNext;
  wire                qOutBusPipe_fire;
  wire                szPacker_busMux_io_output_fire;
  (* max_fanout = 100 *) reg        [1:0]    select_1;
  reg        [1:0]    selectNext;

  assign t_when = (k_headCnt == 4'b1111);
  assign t_when_1 = (v_headCnt == 4'b1111);
  assign t_when_2 = (headCnt == 5'h1f);
  assign t_when_3 = (layerCnt == 5'h1f);
  assign t_kScale_payload = (t_kScale_payload_1[4 : 0] + 5'h02);
  assign t_kScale_payload_1 = io_qScale_payload[15 : 10];
  assign t_vScale_payload = (t_vScale_payload_1[4 : 0] + 5'h02);
  assign t_vScale_payload_1 = io_qScale_payload[15 : 10];
  assign t_k_outCntOvf = (k_tokenCnt - 4'b0001);
  assign t_v_outCntOvf = (v_tokenCnt - 4'b0001);
  assign t_qOutAdapt_64 = {t_qOutAdapt_16,{t_qOutAdapt_17,{t_qOutAdapt_18,{t_qOutAdapt_19,{t_qOutAdapt_20,{t_qOutAdapt_21,{t_qOutAdapt_22,{t_qOutAdapt_23,{t_qOutAdapt_24,{t_qOutAdapt_25,{t_qOutAdapt_26,{t_qOutAdapt_27,{t_qOutAdapt_28,{t_qOutAdapt_29,{t_qOutAdapt_30,{t_qOutAdapt_31,t_qOutAdapt_65}}}}}}}}}}}}}}}};
  assign t_qOutAdapt_65 = {t_qOutAdapt_32,{t_qOutAdapt_33,{t_qOutAdapt_34,{t_qOutAdapt_35,{t_qOutAdapt_36,{t_qOutAdapt_37,{t_qOutAdapt_38,{t_qOutAdapt_39,{t_qOutAdapt_40,{t_qOutAdapt_41,{t_qOutAdapt_42,{t_qOutAdapt_43,{t_qOutAdapt_44,{t_qOutAdapt_45,{t_qOutAdapt_46,{t_qOutAdapt_47,t_qOutAdapt_66}}}}}}}}}}}}}}}};
  assign t_qOutAdapt_66 = {t_qOutAdapt_48,{t_qOutAdapt_49,{t_qOutAdapt_50,{t_qOutAdapt_51,{t_qOutAdapt_52,{t_qOutAdapt_53,{t_qOutAdapt_54,{t_qOutAdapt_55,{t_qOutAdapt_56,{t_qOutAdapt_57,{t_qOutAdapt_58,{t_qOutAdapt_59,{t_qOutAdapt_60,{t_qOutAdapt_61,{t_qOutAdapt_62,t_qOutAdapt_63}}}}}}}}}}}}}}};
  StreamFifo_103 k_prefillIn_fifo (
    .io_push_valid   (k_prefillIn_valid                    ), //i
    .io_push_ready   (k_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (k_prefillIn_payload                  ), //i
    .io_pop_valid    (k_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (k_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (k_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (k_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (k_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                            ), //i
    .clk_0_resetn    (clk_0_resetn                         )  //i
  );
  BottleNeckFifo_2 k_fifo (
    .io_push_valid   (k_fifo_io_push_valid        ), //i
    .io_push_ready   (k_fifo_io_push_ready        ), //o
    .io_push_payload (k_pushVecBits[511:0]        ), //i
    .io_pop_valid    (k_fifo_io_pop_valid         ), //o
    .io_pop_ready    (k_fifo_io_pop_ready         ), //i
    .io_pop_payload  (k_fifo_io_pop_payload[511:0]), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_103 v_prefillIn_fifo (
    .io_push_valid   (v_prefillIn_valid                    ), //i
    .io_push_ready   (v_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (v_prefillIn_payload                  ), //i
    .io_pop_valid    (v_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (v_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (v_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (v_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (v_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                            ), //i
    .clk_0_resetn    (clk_0_resetn                         )  //i
  );
  BottleNeckFifo_3 v_fifo (
    .io_push_valid   (v_fifo_io_push_valid        ), //i
    .io_push_ready   (v_fifo_io_push_ready        ), //o
    .io_push_payload (v_pushVecBits[511:0]        ), //i
    .io_pop_valid    (v_fifo_io_pop_valid         ), //o
    .io_pop_ready    (v_fifo_io_pop_ready         ), //i
    .io_pop_payload  (v_fifo_io_pop_payload[511:0]), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_32 busFifo (
    .io_push_valid            (busMux_io_output_valid                  ), //i
    .io_push_ready            (busFifo_io_push_ready                   ), //o
    .io_push_payload_last     (busMux_io_output_payload_last           ), //i
    .io_push_payload_fragment (busMux_io_output_payload_fragment[511:0]), //i
    .io_pop_valid             (busFifo_io_pop_valid                    ), //o
    .io_pop_ready             (io_kvBus_ready                          ), //i
    .io_pop_payload_last      (busFifo_io_pop_payload_last             ), //o
    .io_pop_payload_fragment  (busFifo_io_pop_payload_fragment[511:0]  ), //o
    .io_flush                 (1'b0                                    ), //i
    .io_occupancy             (busFifo_io_occupancy[5:0]               ), //o
    .io_availability          (busFifo_io_availability[5:0]            ), //o
    .clk_0_clk                (clk_0_clk                               ), //i
    .clk_0_resetn             (clk_0_resetn                            )  //i
  );
  StreamMux_20 busMux (
    .io_select                    (select_1[1:0]                           ), //i
    .io_inputs_0_valid            (kToBusPipe_valid                        ), //i
    .io_inputs_0_ready            (busMux_io_inputs_0_ready                ), //o
    .io_inputs_0_payload_last     (kToBusPipe_payload_last                 ), //i
    .io_inputs_0_payload_fragment (kToBusPipe_payload_fragment[511:0]      ), //i
    .io_inputs_1_valid            (vToBusPipe_valid                        ), //i
    .io_inputs_1_ready            (busMux_io_inputs_1_ready                ), //o
    .io_inputs_1_payload_last     (vToBusPipe_payload_last                 ), //i
    .io_inputs_1_payload_fragment (vToBusPipe_payload_fragment[511:0]      ), //i
    .io_inputs_2_valid            (qOutBusPipe_valid                       ), //i
    .io_inputs_2_ready            (busMux_io_inputs_2_ready                ), //o
    .io_inputs_2_payload_last     (qOutBusPipe_payload_last                ), //i
    .io_inputs_2_payload_fragment (qOutBusPipe_payload_fragment[511:0]     ), //i
    .io_output_valid              (busMux_io_output_valid                  ), //o
    .io_output_ready              (busFifo_io_push_ready                   ), //i
    .io_output_payload_last       (busMux_io_output_payload_last           ), //o
    .io_output_payload_fragment   (busMux_io_output_payload_fragment[511:0])  //o
  );
  always @(*) begin
    case(k_outCnt)
      4'b0000 : t_k_sOut_payload = k_dataSplit_0;
      4'b0001 : t_k_sOut_payload = k_dataSplit_1;
      4'b0010 : t_k_sOut_payload = k_dataSplit_2;
      4'b0011 : t_k_sOut_payload = k_dataSplit_3;
      4'b0100 : t_k_sOut_payload = k_dataSplit_4;
      4'b0101 : t_k_sOut_payload = k_dataSplit_5;
      4'b0110 : t_k_sOut_payload = k_dataSplit_6;
      4'b0111 : t_k_sOut_payload = k_dataSplit_7;
      4'b1000 : t_k_sOut_payload = k_dataSplit_8;
      4'b1001 : t_k_sOut_payload = k_dataSplit_9;
      4'b1010 : t_k_sOut_payload = k_dataSplit_10;
      4'b1011 : t_k_sOut_payload = k_dataSplit_11;
      4'b1100 : t_k_sOut_payload = k_dataSplit_12;
      4'b1101 : t_k_sOut_payload = k_dataSplit_13;
      4'b1110 : t_k_sOut_payload = k_dataSplit_14;
      default : t_k_sOut_payload = k_dataSplit_15;
    endcase
  end

  always @(*) begin
    case(v_outCnt)
      4'b0000 : t_v_sOut_payload = v_dataSplit_0;
      4'b0001 : t_v_sOut_payload = v_dataSplit_1;
      4'b0010 : t_v_sOut_payload = v_dataSplit_2;
      4'b0011 : t_v_sOut_payload = v_dataSplit_3;
      4'b0100 : t_v_sOut_payload = v_dataSplit_4;
      4'b0101 : t_v_sOut_payload = v_dataSplit_5;
      4'b0110 : t_v_sOut_payload = v_dataSplit_6;
      4'b0111 : t_v_sOut_payload = v_dataSplit_7;
      4'b1000 : t_v_sOut_payload = v_dataSplit_8;
      4'b1001 : t_v_sOut_payload = v_dataSplit_9;
      4'b1010 : t_v_sOut_payload = v_dataSplit_10;
      4'b1011 : t_v_sOut_payload = v_dataSplit_11;
      4'b1100 : t_v_sOut_payload = v_dataSplit_12;
      4'b1101 : t_v_sOut_payload = v_dataSplit_13;
      4'b1110 : t_v_sOut_payload = v_dataSplit_14;
      default : t_v_sOut_payload = v_dataSplit_15;
    endcase
  end

  always @(*) begin
    kScale_ready = kScalePipe_ready;
    if((! kScalePipe_valid)) begin
      kScale_ready = 1'b1;
    end
  end

  assign kScalePipe_valid = kScale_rValid;
  assign kScalePipe_payload = kScale_rData;
  assign kScale_valid = (io_qScale_valid && (! scaleIsV));
  assign kScale_payload = {{io_qScale_payload[15],t_kScale_payload},io_qScale_payload[9 : 0]};
  always @(*) begin
    kZero_ready = kZeroPipe_ready;
    if((! kZeroPipe_valid)) begin
      kZero_ready = 1'b1;
    end
  end

  assign kZeroPipe_valid = kZero_rValid;
  assign kZeroPipe_payload = kZero_rData;
  assign kZero_valid = (io_qZero_valid && (! zeroIsV));
  assign kZero_payload = io_qZero_payload;
  always @(*) begin
    vScale_ready = vScalePipe_ready;
    if((! vScalePipe_valid)) begin
      vScale_ready = 1'b1;
    end
  end

  assign vScalePipe_valid = vScale_rValid;
  assign vScalePipe_payload = vScale_rData;
  assign vScale_valid = (io_qScale_valid && scaleIsV);
  assign vScale_payload = {{io_qScale_payload[15],t_vScale_payload},io_qScale_payload[9 : 0]};
  always @(*) begin
    vZero_ready = vZeroPipe_ready;
    if((! vZeroPipe_valid)) begin
      vZero_ready = 1'b1;
    end
  end

  assign vZeroPipe_valid = vZero_rValid;
  assign vZeroPipe_payload = vZero_rData;
  assign vZero_valid = (io_qZero_valid && zeroIsV);
  assign vZero_payload = io_qZero_payload;
  assign kScalePipe_ready = kJoinEvent_fire;
  assign kZeroPipe_ready = kJoinEvent_fire;
  assign kJoinEvent_valid = (kScalePipe_valid && kZeroPipe_valid);
  assign kJoinEvent_fire = (kJoinEvent_valid && kJoinEvent_ready);
  assign kSz_valid = kJoinEvent_valid;
  assign kJoinEvent_ready = kSz_ready;
  assign kSz_payload = {{8'h0,kZeroPipe_payload},kScalePipe_payload};
  assign vScalePipe_ready = vJoinEvent_fire;
  assign vZeroPipe_ready = vJoinEvent_fire;
  assign vJoinEvent_valid = (vScalePipe_valid && vZeroPipe_valid);
  assign vJoinEvent_fire = (vJoinEvent_valid && vJoinEvent_ready);
  assign vSz_valid = vJoinEvent_valid;
  assign vJoinEvent_ready = vSz_ready;
  assign vSz_payload = {{8'h0,vZeroPipe_payload},vScalePipe_payload};
  assign firstTokenIndex = (tokenIndexCnt[3 : 0] == 4'b0000);
  assign k_prefillIn_valid = (io_tokenIndexFlow_valid && (! firstTokenIndex));
  assign k_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign k_prefillIn_ready = k_prefillIn_fifo_io_push_ready;
  always @(*) begin
    k_prefillIn_fifo_io_pop_ready = 1'b0;
    if(k_sOutFire) begin
      if(k_outCntOvf) begin
        if(t_when) begin
          if(k_lastLayer) begin
            k_prefillIn_fifo_io_pop_ready = 1'b1;
          end
        end
      end
    end
  end

  assign k_dataFire = (k_data_valid && k_data_ready);
  always @(*) begin
    k_fifo_io_pop_ready = k_fifoPop_ready;
    if((! k_fifoPop_valid)) begin
      k_fifo_io_pop_ready = 1'b1;
    end
  end

  assign k_fifoPop_valid = szPacker_k_fifo_io_pop_rValid;
  assign k_fifoPop_payload = szPacker_k_fifo_io_pop_rData;
  assign k_tokenCntAbout2Ovf = (k_tokenCnt == 4'b1110);
  assign k_depthCntOvf = (k_depthCnt == 9'h1ff);
  always @(*) begin
    k_pushVec_0 = k_fifoPop_payload[31 : 0];
    if(t_1[0]) begin
      k_pushVec_0 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_1 = k_fifoPop_payload[63 : 32];
    if(t_1[1]) begin
      k_pushVec_1 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_2 = k_fifoPop_payload[95 : 64];
    if(t_1[2]) begin
      k_pushVec_2 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_3 = k_fifoPop_payload[127 : 96];
    if(t_1[3]) begin
      k_pushVec_3 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_4 = k_fifoPop_payload[159 : 128];
    if(t_1[4]) begin
      k_pushVec_4 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_5 = k_fifoPop_payload[191 : 160];
    if(t_1[5]) begin
      k_pushVec_5 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_6 = k_fifoPop_payload[223 : 192];
    if(t_1[6]) begin
      k_pushVec_6 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_7 = k_fifoPop_payload[255 : 224];
    if(t_1[7]) begin
      k_pushVec_7 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_8 = k_fifoPop_payload[287 : 256];
    if(t_1[8]) begin
      k_pushVec_8 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_9 = k_fifoPop_payload[319 : 288];
    if(t_1[9]) begin
      k_pushVec_9 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_10 = k_fifoPop_payload[351 : 320];
    if(t_1[10]) begin
      k_pushVec_10 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_11 = k_fifoPop_payload[383 : 352];
    if(t_1[11]) begin
      k_pushVec_11 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_12 = k_fifoPop_payload[415 : 384];
    if(t_1[12]) begin
      k_pushVec_12 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_13 = k_fifoPop_payload[447 : 416];
    if(t_1[13]) begin
      k_pushVec_13 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_14 = k_fifoPop_payload[479 : 448];
    if(t_1[14]) begin
      k_pushVec_14 = k_data_payload;
    end
  end

  always @(*) begin
    k_pushVec_15 = k_fifoPop_payload[511 : 480];
    if(t_1[15]) begin
      k_pushVec_15 = k_data_payload;
    end
  end

  assign t_1 = ({15'd0,1'b1} <<< k_tokenCnt);
  assign k_pushVecBits = {k_pushVec_15,{k_pushVec_14,{k_pushVec_13,{k_pushVec_12,{k_pushVec_11,{k_pushVec_10,{k_pushVec_9,{k_pushVec_8,{k_pushVec_7,{k_pushVec_6,{k_pushVec_5,{k_pushVec_4,{k_pushVec_3,{k_pushVec_2,{k_pushVec_1,k_pushVec_0}}}}}}}}}}}}}}};
  assign k_fifo_io_push_valid = (k_dataFire && (! k_tokenCntOvfReg));
  assign k_fifoPop_ready = (k_dataFire && (! k_isTokenZero));
  assign k_toBus_valid = (k_dataFire && k_tokenCntOvfReg);
  assign k_toBus_payload_last = 1'b1;
  assign k_toBus_payload_fragment = k_pushVecBits;
  assign k_fifoPop_fire = (k_fifoPop_valid && k_fifoPop_ready);
  assign k_sOut_valid = (((k_fifoPop_valid && k_flag) && (! k_isTokenZero)) && k_vld);
  assign k_outCntOvf = (k_outCnt == t_k_outCntOvf);
  assign k_lastLayer = (k_layerCnt == 5'h1f);
  assign k_sOutFire = (k_sOut_valid && k_sOut_ready);
  assign k_data_valid = kSz_valid;
  assign kSz_ready = k_data_ready;
  assign k_data_payload = kSz_payload;
  assign k_data_ready = (! k_sOut_valid);
  assign k_dataSplit_0 = k_fifoPop_payload[31 : 0];
  assign k_dataSplit_1 = k_fifoPop_payload[63 : 32];
  assign k_dataSplit_2 = k_fifoPop_payload[95 : 64];
  assign k_dataSplit_3 = k_fifoPop_payload[127 : 96];
  assign k_dataSplit_4 = k_fifoPop_payload[159 : 128];
  assign k_dataSplit_5 = k_fifoPop_payload[191 : 160];
  assign k_dataSplit_6 = k_fifoPop_payload[223 : 192];
  assign k_dataSplit_7 = k_fifoPop_payload[255 : 224];
  assign k_dataSplit_8 = k_fifoPop_payload[287 : 256];
  assign k_dataSplit_9 = k_fifoPop_payload[319 : 288];
  assign k_dataSplit_10 = k_fifoPop_payload[351 : 320];
  assign k_dataSplit_11 = k_fifoPop_payload[383 : 352];
  assign k_dataSplit_12 = k_fifoPop_payload[415 : 384];
  assign k_dataSplit_13 = k_fifoPop_payload[447 : 416];
  assign k_dataSplit_14 = k_fifoPop_payload[479 : 448];
  assign k_dataSplit_15 = k_fifoPop_payload[511 : 480];
  assign k_sOut_payload = t_k_sOut_payload;
  assign k_throwCond = (k_prefillIn_fifo_io_pop_payload && k_lastLayer);
  always @(*) begin
    k_sOutThrow_valid = k_sOut_valid;
    if(k_throwCond) begin
      k_sOutThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    k_sOut_ready = k_sOutThrow_ready;
    if(k_throwCond) begin
      k_sOut_ready = 1'b1;
    end
  end

  assign k_sOutThrow_payload = k_sOut_payload;
  assign v_prefillIn_valid = (io_tokenIndexFlow_valid && (! firstTokenIndex));
  assign v_prefillIn_payload = (io_tokenIndexFlow_payload == 6'h0);
  assign v_prefillIn_ready = v_prefillIn_fifo_io_push_ready;
  always @(*) begin
    v_prefillIn_fifo_io_pop_ready = 1'b0;
    if(v_sOutFire) begin
      if(v_outCntOvf) begin
        if(t_when_1) begin
          if(v_lastLayer) begin
            v_prefillIn_fifo_io_pop_ready = 1'b1;
          end
        end
      end
    end
  end

  assign v_dataFire = (v_data_valid && v_data_ready);
  always @(*) begin
    v_fifo_io_pop_ready = v_fifoPop_ready;
    if((! v_fifoPop_valid)) begin
      v_fifo_io_pop_ready = 1'b1;
    end
  end

  assign v_fifoPop_valid = szPacker_v_fifo_io_pop_rValid;
  assign v_fifoPop_payload = szPacker_v_fifo_io_pop_rData;
  assign v_tokenCntAbout2Ovf = (v_tokenCnt == 4'b1110);
  assign v_depthCntOvf = (v_depthCnt == 9'h1ff);
  always @(*) begin
    v_pushVec_0 = v_fifoPop_payload[31 : 0];
    if(t_2[0]) begin
      v_pushVec_0 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_1 = v_fifoPop_payload[63 : 32];
    if(t_2[1]) begin
      v_pushVec_1 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_2 = v_fifoPop_payload[95 : 64];
    if(t_2[2]) begin
      v_pushVec_2 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_3 = v_fifoPop_payload[127 : 96];
    if(t_2[3]) begin
      v_pushVec_3 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_4 = v_fifoPop_payload[159 : 128];
    if(t_2[4]) begin
      v_pushVec_4 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_5 = v_fifoPop_payload[191 : 160];
    if(t_2[5]) begin
      v_pushVec_5 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_6 = v_fifoPop_payload[223 : 192];
    if(t_2[6]) begin
      v_pushVec_6 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_7 = v_fifoPop_payload[255 : 224];
    if(t_2[7]) begin
      v_pushVec_7 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_8 = v_fifoPop_payload[287 : 256];
    if(t_2[8]) begin
      v_pushVec_8 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_9 = v_fifoPop_payload[319 : 288];
    if(t_2[9]) begin
      v_pushVec_9 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_10 = v_fifoPop_payload[351 : 320];
    if(t_2[10]) begin
      v_pushVec_10 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_11 = v_fifoPop_payload[383 : 352];
    if(t_2[11]) begin
      v_pushVec_11 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_12 = v_fifoPop_payload[415 : 384];
    if(t_2[12]) begin
      v_pushVec_12 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_13 = v_fifoPop_payload[447 : 416];
    if(t_2[13]) begin
      v_pushVec_13 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_14 = v_fifoPop_payload[479 : 448];
    if(t_2[14]) begin
      v_pushVec_14 = v_data_payload;
    end
  end

  always @(*) begin
    v_pushVec_15 = v_fifoPop_payload[511 : 480];
    if(t_2[15]) begin
      v_pushVec_15 = v_data_payload;
    end
  end

  assign t_2 = ({15'd0,1'b1} <<< v_tokenCnt);
  assign v_pushVecBits = {v_pushVec_15,{v_pushVec_14,{v_pushVec_13,{v_pushVec_12,{v_pushVec_11,{v_pushVec_10,{v_pushVec_9,{v_pushVec_8,{v_pushVec_7,{v_pushVec_6,{v_pushVec_5,{v_pushVec_4,{v_pushVec_3,{v_pushVec_2,{v_pushVec_1,v_pushVec_0}}}}}}}}}}}}}}};
  assign v_fifo_io_push_valid = (v_dataFire && (! v_tokenCntOvfReg));
  assign v_fifoPop_ready = (v_dataFire && (! v_isTokenZero));
  assign v_toBus_valid = (v_dataFire && v_tokenCntOvfReg);
  assign v_toBus_payload_last = 1'b1;
  assign v_toBus_payload_fragment = v_pushVecBits;
  assign v_fifoPop_fire = (v_fifoPop_valid && v_fifoPop_ready);
  assign v_sOut_valid = (((v_fifoPop_valid && v_flag) && (! v_isTokenZero)) && v_vld);
  assign v_outCntOvf = (v_outCnt == t_v_outCntOvf);
  assign v_lastLayer = (v_layerCnt == 5'h1f);
  assign v_sOutFire = (v_sOut_valid && v_sOut_ready);
  assign v_data_valid = vSz_valid;
  assign vSz_ready = v_data_ready;
  assign v_data_payload = vSz_payload;
  assign v_data_ready = (! v_sOut_valid);
  assign v_dataSplit_0 = v_fifoPop_payload[31 : 0];
  assign v_dataSplit_1 = v_fifoPop_payload[63 : 32];
  assign v_dataSplit_2 = v_fifoPop_payload[95 : 64];
  assign v_dataSplit_3 = v_fifoPop_payload[127 : 96];
  assign v_dataSplit_4 = v_fifoPop_payload[159 : 128];
  assign v_dataSplit_5 = v_fifoPop_payload[191 : 160];
  assign v_dataSplit_6 = v_fifoPop_payload[223 : 192];
  assign v_dataSplit_7 = v_fifoPop_payload[255 : 224];
  assign v_dataSplit_8 = v_fifoPop_payload[287 : 256];
  assign v_dataSplit_9 = v_fifoPop_payload[319 : 288];
  assign v_dataSplit_10 = v_fifoPop_payload[351 : 320];
  assign v_dataSplit_11 = v_fifoPop_payload[383 : 352];
  assign v_dataSplit_12 = v_fifoPop_payload[415 : 384];
  assign v_dataSplit_13 = v_fifoPop_payload[447 : 416];
  assign v_dataSplit_14 = v_fifoPop_payload[479 : 448];
  assign v_dataSplit_15 = v_fifoPop_payload[511 : 480];
  assign v_sOut_payload = t_v_sOut_payload;
  assign v_throwCond = (v_prefillIn_fifo_io_pop_payload && v_lastLayer);
  always @(*) begin
    v_sOutThrow_valid = v_sOut_valid;
    if(v_throwCond) begin
      v_sOutThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    v_sOut_ready = v_sOutThrow_ready;
    if(v_throwCond) begin
      v_sOut_ready = 1'b1;
    end
  end

  assign v_sOutThrow_payload = v_sOut_payload;
  assign t_qOutAdapt = io_qOut_payload_fragment;
  assign qOutAdapt = {t_qOutAdapt,{t_qOutAdapt_1,{t_qOutAdapt_2,{t_qOutAdapt_3,{t_qOutAdapt_4,{t_qOutAdapt_5,{t_qOutAdapt_6,{t_qOutAdapt_7,{t_qOutAdapt_8,{t_qOutAdapt_9,{t_qOutAdapt_10,{t_qOutAdapt_11,{t_qOutAdapt_12,{t_qOutAdapt_13,{t_qOutAdapt_14,{t_qOutAdapt_15,t_qOutAdapt_64}}}}}}}}}}}}}}}};
  assign qOutCntOvf = (qOutCnt == 6'h3f);
  assign qOutBus_valid = (io_qOut_valid && qOutCntOvf);
  assign qOutBus_payload_last = io_qOut_payload_last;
  assign qOutBus_payload_fragment = qOutAdapt;
  always @(*) begin
    k_sOutThrow_ready = k_sOutThrow_m2sPipe_ready;
    if((! k_sOutThrow_m2sPipe_valid)) begin
      k_sOutThrow_ready = 1'b1;
    end
  end

  assign k_sOutThrow_m2sPipe_valid = k_sOutThrow_rValid;
  assign k_sOutThrow_m2sPipe_payload = k_sOutThrow_rData;
  always @(*) begin
    k_sOutThrow_m2sPipe_ready = k_sOutThrow_m2sPipe_m2sPipe_ready;
    if((! k_sOutThrow_m2sPipe_m2sPipe_valid)) begin
      k_sOutThrow_m2sPipe_ready = 1'b1;
    end
  end

  assign k_sOutThrow_m2sPipe_m2sPipe_valid = k_sOutThrow_m2sPipe_rValid;
  assign k_sOutThrow_m2sPipe_m2sPipe_payload = k_sOutThrow_m2sPipe_rData;
  assign io_kSzOut_valid = k_sOutThrow_m2sPipe_m2sPipe_valid;
  assign k_sOutThrow_m2sPipe_m2sPipe_ready = io_kSzOut_ready;
  assign io_kSzOut_payload = k_sOutThrow_m2sPipe_m2sPipe_payload;
  always @(*) begin
    v_sOutThrow_ready = v_sOutThrow_m2sPipe_ready;
    if((! v_sOutThrow_m2sPipe_valid)) begin
      v_sOutThrow_ready = 1'b1;
    end
  end

  assign v_sOutThrow_m2sPipe_valid = v_sOutThrow_rValid;
  assign v_sOutThrow_m2sPipe_payload = v_sOutThrow_rData;
  always @(*) begin
    v_sOutThrow_m2sPipe_ready = v_sOutThrow_m2sPipe_m2sPipe_ready;
    if((! v_sOutThrow_m2sPipe_m2sPipe_valid)) begin
      v_sOutThrow_m2sPipe_ready = 1'b1;
    end
  end

  assign v_sOutThrow_m2sPipe_m2sPipe_valid = v_sOutThrow_m2sPipe_rValid;
  assign v_sOutThrow_m2sPipe_m2sPipe_payload = v_sOutThrow_m2sPipe_rData;
  assign io_vSzOut_valid = v_sOutThrow_m2sPipe_m2sPipe_valid;
  assign v_sOutThrow_m2sPipe_m2sPipe_ready = io_vSzOut_ready;
  assign io_vSzOut_payload = v_sOutThrow_m2sPipe_m2sPipe_payload;
  always @(*) begin
    qOutBus_ready = qOutBus_m2sPipe_ready;
    if((! qOutBus_m2sPipe_valid)) begin
      qOutBus_ready = 1'b1;
    end
  end

  assign qOutBus_m2sPipe_valid = qOutBus_rValid;
  assign qOutBus_m2sPipe_payload_last = qOutBus_rData_last;
  assign qOutBus_m2sPipe_payload_fragment = qOutBus_rData_fragment;
  always @(*) begin
    qOutBus_m2sPipe_ready = qOutBusPipe_ready;
    if((! qOutBusPipe_valid)) begin
      qOutBus_m2sPipe_ready = 1'b1;
    end
  end

  assign qOutBusPipe_valid = qOutBus_m2sPipe_rValid;
  assign qOutBusPipe_payload_last = qOutBus_m2sPipe_rData_last;
  assign qOutBusPipe_payload_fragment = qOutBus_m2sPipe_rData_fragment;
  always @(*) begin
    k_toBus_ready = kToBusPipe_ready;
    if((! kToBusPipe_valid)) begin
      k_toBus_ready = 1'b1;
    end
  end

  assign kToBusPipe_valid = k_toBus_rValid;
  assign kToBusPipe_payload_last = k_toBus_rData_last;
  assign kToBusPipe_payload_fragment = k_toBus_rData_fragment;
  always @(*) begin
    v_toBus_ready = vToBusPipe_ready;
    if((! vToBusPipe_valid)) begin
      v_toBus_ready = 1'b1;
    end
  end

  assign vToBusPipe_valid = v_toBus_rValid;
  assign vToBusPipe_payload_last = v_toBus_rData_last;
  assign vToBusPipe_payload_fragment = v_toBus_rData_fragment;
  assign kToBusPipe_ready = busMux_io_inputs_0_ready;
  assign vToBusPipe_ready = busMux_io_inputs_1_ready;
  assign qOutBusPipe_ready = busMux_io_inputs_2_ready;
  assign io_kvBus_valid = busFifo_io_pop_valid;
  assign io_kvBus_payload_last = busFifo_io_pop_payload_last;
  assign io_kvBus_payload_fragment = busFifo_io_pop_payload_fragment;
  always @(*) begin
    szToMemNext = szToMem;
    if(enInc) begin
      if(t_when_2) begin
        if(t_when_3) begin
          if((tokenCnt == 4'b1110)) begin
            szToMemNext = 1'b1;
          end
          if(szToMem) begin
            szToMemNext = 1'b0;
          end
        end
      end
    end
  end

  always @(*) begin
    stateCntNext = stateCnt;
    if(enStateCntInc) begin
      stateCntNext = (stateCnt + 2'b01);
    end
  end

  assign qOutBusPipe_fire = (qOutBusPipe_valid && qOutBusPipe_ready);
  assign enInc = (qOutBusPipe_fire && qOutBusPipe_payload_last);
  assign szPacker_busMux_io_output_fire = (busMux_io_output_valid && busFifo_io_push_ready);
  assign enStateCntInc = ((szToMem && szPacker_busMux_io_output_fire) && busMux_io_output_payload_last);
  always @(*) begin
    selectNext = 2'b10;
    if((szToMemNext && (stateCntNext == 2'b00))) begin
      selectNext = 2'b00;
    end
    if((szToMemNext && (stateCntNext == 2'b10))) begin
      selectNext = 2'b01;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      scaleIsV <= 1'b0;
      zeroIsV <= 1'b0;
      kScale_rValid <= 1'b0;
      kZero_rValid <= 1'b0;
      vScale_rValid <= 1'b0;
      vZero_rValid <= 1'b0;
      tokenIndexCnt <= 16'h0;
      szPacker_k_fifo_io_pop_rValid <= 1'b0;
      k_tokenCnt <= 4'b0000;
      k_depthCnt <= 9'h0;
      k_isTokenZero <= 1'b1;
      k_tokenCntOvfReg <= 1'b0;
      k_flag <= 1'b1;
      k_vld <= 1'b1;
      k_outCnt <= 4'b0000;
      k_headCnt <= 4'b0000;
      k_layerCnt <= 5'h0;
      szPacker_v_fifo_io_pop_rValid <= 1'b0;
      v_tokenCnt <= 4'b0000;
      v_depthCnt <= 9'h0;
      v_isTokenZero <= 1'b1;
      v_tokenCntOvfReg <= 1'b0;
      v_flag <= 1'b1;
      v_vld <= 1'b1;
      v_outCnt <= 4'b0000;
      v_headCnt <= 4'b0000;
      v_layerCnt <= 5'h0;
      qOutCnt <= 6'h0;
      k_sOutThrow_rValid <= 1'b0;
      k_sOutThrow_m2sPipe_rValid <= 1'b0;
      v_sOutThrow_rValid <= 1'b0;
      v_sOutThrow_m2sPipe_rValid <= 1'b0;
      qOutBus_rValid <= 1'b0;
      qOutBus_m2sPipe_rValid <= 1'b0;
      k_toBus_rValid <= 1'b0;
      v_toBus_rValid <= 1'b0;
      headCnt <= 5'h0;
      layerCnt <= 5'h0;
      tokenCnt <= 4'b0000;
      szToMem <= 1'b0;
      stateCnt <= 2'b00;
      select_1 <= 2'b10;
    end else begin
      if(io_qScale_valid) begin
        scaleIsV <= (! scaleIsV);
      end
      if(io_qZero_valid) begin
        zeroIsV <= (! zeroIsV);
      end
      if(kScale_ready) begin
        kScale_rValid <= kScale_valid;
      end
      if(kZero_ready) begin
        kZero_rValid <= kZero_valid;
      end
      if(vScale_ready) begin
        vScale_rValid <= vScale_valid;
      end
      if(vZero_ready) begin
        vZero_rValid <= vZero_valid;
      end
      if(io_tokenIndexFlow_valid) begin
        tokenIndexCnt <= (tokenIndexCnt + 16'h0001);
      end
      if(k_fifo_io_pop_ready) begin
        szPacker_k_fifo_io_pop_rValid <= k_fifo_io_pop_valid;
      end
      if(k_dataFire) begin
        k_depthCnt <= (k_depthCnt + 9'h001);
        if(k_depthCntOvf) begin
          k_tokenCnt <= (k_tokenCnt + 4'b0001);
          k_isTokenZero <= 1'b0;
          k_depthCnt <= 9'h0;
          if(k_tokenCntAbout2Ovf) begin
            k_tokenCntOvfReg <= 1'b1;
          end
          if(k_tokenCntOvfReg) begin
            k_tokenCnt <= 4'b0000;
            k_isTokenZero <= 1'b1;
            k_tokenCntOvfReg <= 1'b0;
          end
        end
      end
      if(k_fifoPop_fire) begin
        k_flag <= 1'b1;
      end
      if(io_nextLayer) begin
        k_vld <= 1'b1;
      end
      if(k_sOutFire) begin
        k_outCnt <= (k_outCnt + 4'b0001);
        if(k_outCntOvf) begin
          k_outCnt <= 4'b0000;
          k_flag <= 1'b0;
          k_headCnt <= (k_headCnt + 4'b0001);
          if(t_when) begin
            k_headCnt <= 4'b0000;
            k_vld <= 1'b0;
            k_layerCnt <= (k_layerCnt + 5'h01);
            if(k_lastLayer) begin
              k_layerCnt <= 5'h0;
            end
          end
        end
      end
      if(v_fifo_io_pop_ready) begin
        szPacker_v_fifo_io_pop_rValid <= v_fifo_io_pop_valid;
      end
      if(v_dataFire) begin
        v_depthCnt <= (v_depthCnt + 9'h001);
        if(v_depthCntOvf) begin
          v_tokenCnt <= (v_tokenCnt + 4'b0001);
          v_isTokenZero <= 1'b0;
          v_depthCnt <= 9'h0;
          if(v_tokenCntAbout2Ovf) begin
            v_tokenCntOvfReg <= 1'b1;
          end
          if(v_tokenCntOvfReg) begin
            v_tokenCnt <= 4'b0000;
            v_isTokenZero <= 1'b1;
            v_tokenCntOvfReg <= 1'b0;
          end
        end
      end
      if(v_fifoPop_fire) begin
        v_flag <= 1'b1;
      end
      if(io_nextLayer) begin
        v_vld <= 1'b1;
      end
      if(v_sOutFire) begin
        v_outCnt <= (v_outCnt + 4'b0001);
        if(v_outCntOvf) begin
          v_outCnt <= 4'b0000;
          v_flag <= 1'b0;
          v_headCnt <= (v_headCnt + 4'b0001);
          if(t_when_1) begin
            v_headCnt <= 4'b0000;
            v_vld <= 1'b0;
            v_layerCnt <= (v_layerCnt + 5'h01);
            if(v_lastLayer) begin
              v_layerCnt <= 5'h0;
            end
          end
        end
      end
      if(io_qOut_valid) begin
        qOutCnt <= (qOutCnt + 6'h01);
        if(qOutCntOvf) begin
          qOutCnt <= 6'h0;
        end
      end
      if(k_sOutThrow_ready) begin
        k_sOutThrow_rValid <= k_sOutThrow_valid;
      end
      if(k_sOutThrow_m2sPipe_ready) begin
        k_sOutThrow_m2sPipe_rValid <= k_sOutThrow_m2sPipe_valid;
      end
      if(v_sOutThrow_ready) begin
        v_sOutThrow_rValid <= v_sOutThrow_valid;
      end
      if(v_sOutThrow_m2sPipe_ready) begin
        v_sOutThrow_m2sPipe_rValid <= v_sOutThrow_m2sPipe_valid;
      end
      if(qOutBus_ready) begin
        qOutBus_rValid <= qOutBus_valid;
      end
      if(qOutBus_m2sPipe_ready) begin
        qOutBus_m2sPipe_rValid <= qOutBus_m2sPipe_valid;
      end
      if(k_toBus_ready) begin
        k_toBus_rValid <= k_toBus_valid;
      end
      if(v_toBus_ready) begin
        v_toBus_rValid <= v_toBus_valid;
      end
      szToMem <= szToMemNext;
      if(enInc) begin
        headCnt <= (headCnt + 5'h01);
        if(t_when_2) begin
          headCnt <= 5'h0;
          layerCnt <= (layerCnt + 5'h01);
          if(t_when_3) begin
            layerCnt <= 5'h0;
            tokenCnt <= (tokenCnt + 4'b0001);
          end
        end
      end
      stateCnt <= stateCntNext;
      select_1 <= selectNext;
    end
  end

  always @(posedge clk_0_clk) begin
    if(kScale_ready) begin
      kScale_rData <= kScale_payload;
    end
    if(kZero_ready) begin
      kZero_rData <= kZero_payload;
    end
    if(vScale_ready) begin
      vScale_rData <= vScale_payload;
    end
    if(vZero_ready) begin
      vZero_rData <= vZero_payload;
    end
    if(k_fifo_io_pop_ready) begin
      szPacker_k_fifo_io_pop_rData <= k_fifo_io_pop_payload;
    end
    if(v_fifo_io_pop_ready) begin
      szPacker_v_fifo_io_pop_rData <= v_fifo_io_pop_payload;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_1 <= t_qOutAdapt;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_2 <= t_qOutAdapt_1;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_3 <= t_qOutAdapt_2;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_4 <= t_qOutAdapt_3;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_5 <= t_qOutAdapt_4;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_6 <= t_qOutAdapt_5;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_7 <= t_qOutAdapt_6;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_8 <= t_qOutAdapt_7;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_9 <= t_qOutAdapt_8;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_10 <= t_qOutAdapt_9;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_11 <= t_qOutAdapt_10;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_12 <= t_qOutAdapt_11;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_13 <= t_qOutAdapt_12;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_14 <= t_qOutAdapt_13;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_15 <= t_qOutAdapt_14;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_16 <= t_qOutAdapt_15;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_17 <= t_qOutAdapt_16;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_18 <= t_qOutAdapt_17;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_19 <= t_qOutAdapt_18;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_20 <= t_qOutAdapt_19;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_21 <= t_qOutAdapt_20;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_22 <= t_qOutAdapt_21;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_23 <= t_qOutAdapt_22;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_24 <= t_qOutAdapt_23;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_25 <= t_qOutAdapt_24;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_26 <= t_qOutAdapt_25;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_27 <= t_qOutAdapt_26;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_28 <= t_qOutAdapt_27;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_29 <= t_qOutAdapt_28;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_30 <= t_qOutAdapt_29;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_31 <= t_qOutAdapt_30;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_32 <= t_qOutAdapt_31;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_33 <= t_qOutAdapt_32;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_34 <= t_qOutAdapt_33;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_35 <= t_qOutAdapt_34;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_36 <= t_qOutAdapt_35;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_37 <= t_qOutAdapt_36;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_38 <= t_qOutAdapt_37;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_39 <= t_qOutAdapt_38;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_40 <= t_qOutAdapt_39;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_41 <= t_qOutAdapt_40;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_42 <= t_qOutAdapt_41;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_43 <= t_qOutAdapt_42;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_44 <= t_qOutAdapt_43;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_45 <= t_qOutAdapt_44;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_46 <= t_qOutAdapt_45;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_47 <= t_qOutAdapt_46;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_48 <= t_qOutAdapt_47;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_49 <= t_qOutAdapt_48;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_50 <= t_qOutAdapt_49;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_51 <= t_qOutAdapt_50;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_52 <= t_qOutAdapt_51;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_53 <= t_qOutAdapt_52;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_54 <= t_qOutAdapt_53;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_55 <= t_qOutAdapt_54;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_56 <= t_qOutAdapt_55;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_57 <= t_qOutAdapt_56;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_58 <= t_qOutAdapt_57;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_59 <= t_qOutAdapt_58;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_60 <= t_qOutAdapt_59;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_61 <= t_qOutAdapt_60;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_62 <= t_qOutAdapt_61;
    end
    if(io_qOut_valid) begin
      t_qOutAdapt_63 <= t_qOutAdapt_62;
    end
    if(k_sOutThrow_ready) begin
      k_sOutThrow_rData <= k_sOutThrow_payload;
    end
    if(k_sOutThrow_m2sPipe_ready) begin
      k_sOutThrow_m2sPipe_rData <= k_sOutThrow_m2sPipe_payload;
    end
    if(v_sOutThrow_ready) begin
      v_sOutThrow_rData <= v_sOutThrow_payload;
    end
    if(v_sOutThrow_m2sPipe_ready) begin
      v_sOutThrow_m2sPipe_rData <= v_sOutThrow_m2sPipe_payload;
    end
    if(qOutBus_ready) begin
      qOutBus_rData_last <= qOutBus_payload_last;
      qOutBus_rData_fragment <= qOutBus_payload_fragment;
    end
    if(qOutBus_m2sPipe_ready) begin
      qOutBus_m2sPipe_rData_last <= qOutBus_m2sPipe_payload_last;
      qOutBus_m2sPipe_rData_fragment <= qOutBus_m2sPipe_payload_fragment;
    end
    if(k_toBus_ready) begin
      k_toBus_rData_last <= k_toBus_payload_last;
      k_toBus_rData_fragment <= k_toBus_payload_fragment;
    end
    if(v_toBus_ready) begin
      v_toBus_rData_last <= v_toBus_payload_last;
      v_toBus_rData_fragment <= v_toBus_payload_fragment;
    end
  end


endmodule

module SiluFp32_1 (
  input  wire          io_in_valid,
  input  wire [15:0]   io_in_payload,
  output wire          io_out_valid,
  output wire [15:0]   io_out_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                io_in_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_in_to_ip_m_axis_result_tdata;
  wire                ipFlowIO_m_axis_result_tvalid;
  wire       [31:0]   ipFlowIO_m_axis_result_tdata;
  wire                fp32One_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32One_add_ip_m_axis_result_tdata;
  wire                inDly_div_ip_m_axis_result_tvalid;
  wire       [31:0]   inDly_div_ip_m_axis_result_tdata;
  wire                siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [15:0]   siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata;
  reg        [31:0]   t_s_axis_a_tdata;
  wire                fp32One_valid;
  wire       [31:0]   fp32One_payload;
  wire                inDly_valid;
  wire       [31:0]   inDly_payload;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_1;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_2;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_3;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_4;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_5;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_6;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_7;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_8;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_9;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_10;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_11;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_12;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_13;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_14;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_15;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_16;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_17;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_18;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_19;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_20;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_21;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_22;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_23;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_24;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_25;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_26;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_27;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_28;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_29;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_30;
  reg        [31:0]   siluAct_io_in_to_ip_m_axis_result_tdata_delay_31;

  fp16toFp32 io_in_to_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (io_in_valid                          ), //i
    .s_axis_a_tdata       (io_in_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_in_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (io_in_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32exp20 ipFlowIO (
    .aclk                 (clk_0_clk                         ), //i
    .s_axis_a_tvalid      (io_in_to_ip_m_axis_result_tvalid  ), //i
    .s_axis_a_tdata       (t_s_axis_a_tdata[31:0]            ), //i
    .m_axis_result_tvalid (ipFlowIO_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (ipFlowIO_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32One_add_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (fp32One_valid                           ), //i
    .s_axis_a_tdata       (fp32One_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (ipFlowIO_m_axis_result_tvalid           ), //i
    .s_axis_b_tdata       (ipFlowIO_m_axis_result_tdata[31:0]      ), //i
    .m_axis_result_tvalid (fp32One_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32One_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32div28 inDly_div_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (inDly_valid                             ), //i
    .s_axis_a_tdata       (inDly_payload[31:0]                     ), //i
    .s_axis_b_tvalid      (fp32One_add_ip_m_axis_result_tvalid     ), //i
    .s_axis_b_tdata       (fp32One_add_ip_m_axis_result_tdata[31:0]), //i
    .m_axis_result_tvalid (inDly_div_ip_m_axis_result_tvalid       ), //o
    .m_axis_result_tdata  (inDly_div_ip_m_axis_result_tdata[31:0]  )  //o
  );
  fp32toFp16 siluAct_inDly_div_ip_m_axis_result_to_ip (
    .aclk                 (clk_0_clk                                                         ), //i
    .s_axis_a_tvalid      (inDly_div_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (inDly_div_ip_m_axis_result_tdata[31:0]                            ), //i
    .m_axis_result_tvalid (siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    t_s_axis_a_tdata = io_in_to_ip_m_axis_result_tdata;
    t_s_axis_a_tdata[31] = (! io_in_to_ip_m_axis_result_tdata[31]);
  end

  assign fp32One_valid = 1'b1;
  assign fp32One_payload = 32'h3f800000;
  assign inDly_payload = siluAct_io_in_to_ip_m_axis_result_tdata_delay_31;
  assign inDly_valid = fp32One_add_ip_m_axis_result_tvalid;
  assign io_out_valid = siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  assign io_out_payload = siluAct_inDly_div_ip_m_axis_result_to_ip_m_axis_result_tdata;
  always @(posedge clk_0_clk) begin
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_1 <= io_in_to_ip_m_axis_result_tdata;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_2 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_1;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_3 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_2;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_4 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_3;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_5 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_4;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_6 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_5;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_7 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_6;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_8 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_7;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_9 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_8;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_10 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_9;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_11 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_10;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_12 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_11;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_13 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_12;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_14 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_13;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_15 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_14;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_16 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_15;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_17 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_16;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_18 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_17;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_19 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_18;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_20 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_19;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_21 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_20;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_22 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_21;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_23 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_22;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_24 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_23;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_25 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_24;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_26 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_25;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_27 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_26;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_28 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_27;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_29 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_28;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_30 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_29;
    siluAct_io_in_to_ip_m_axis_result_tdata_delay_31 <= siluAct_io_in_to_ip_m_axis_result_tdata_delay_30;
  end


endmodule

module GreedySampler_1 (
  input  wire          logits_valid,
  input  wire [15:0]   logits_tdata,
  input  wire [5:0]    logits_tuser,
  output wire          argmax_tvalid,
  output wire [15:0]   argmax_tdata,
  output wire          endOfDecode,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                maxFlow_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    maxFlow_lt_async_ip_m_axis_result_tdata;
  wire       [15:0]   t_indexDly;
  wire                logitsIn_valid;
  wire       [15:0]   logitsIn_payload;
  wire                maxFlow_valid;
  reg        [15:0]   maxFlow_payload;
  reg        [14:0]   cnt;
  wire                cntOvf;
  wire                logitsProbe_tvalid;
  wire                logitsProbe_tlast;
  wire       [15:0]   logitsProbe_tdata;
  wire                xGreaterThanMax_valid;
  wire                xGreaterThanMax_payload;
  reg        [14:0]   index;
  reg        [14:0]   indexNext;
  reg        [15:0]   maxNext;
  wire                vld;
  reg                 vldDly;
  reg        [15:0]   indexDly;
  wire                argmax_valid;
  wire       [15:0]   argmax_payload;

  assign t_indexDly = {1'd0, indexNext};
  fp16lt0 maxFlow_lt_async_ip (
    .s_axis_a_tvalid      (maxFlow_valid                               ), //i
    .s_axis_a_tdata       (maxFlow_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (logitsIn_valid                              ), //i
    .s_axis_b_tdata       (logitsIn_payload[15:0]                      ), //i
    .m_axis_result_tvalid (maxFlow_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (maxFlow_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  assign logitsIn_valid = (logits_valid && (logits_tuser == 6'h23));
  assign logitsIn_payload = logits_tdata;
  assign maxFlow_valid = logitsIn_valid;
  assign cntOvf = (cnt == 15'h7cff);
  assign logitsProbe_tvalid = logitsIn_valid;
  assign logitsProbe_tlast = cntOvf;
  assign logitsProbe_tdata = logitsIn_payload;
  assign xGreaterThanMax_valid = maxFlow_lt_async_ip_m_axis_result_tvalid;
  assign xGreaterThanMax_payload = maxFlow_lt_async_ip_m_axis_result_tdata[0];
  always @(*) begin
    indexNext = index;
    if(logitsIn_valid) begin
      if(xGreaterThanMax_payload) begin
        indexNext = cnt;
      end
    end
  end

  always @(*) begin
    maxNext = maxFlow_payload;
    if(logitsIn_valid) begin
      if(xGreaterThanMax_payload) begin
        maxNext = logitsIn_payload;
      end
    end
  end

  assign vld = (logitsIn_valid && cntOvf);
  assign argmax_valid = vldDly;
  assign argmax_payload = indexDly;
  assign argmax_tvalid = argmax_valid;
  assign argmax_tdata = argmax_payload;
  assign endOfDecode = 1'b0;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      maxFlow_payload <= 16'hfc00;
      cnt <= 15'h0;
      index <= 15'h0;
      vldDly <= 1'b0;
    end else begin
      if(logitsIn_valid) begin
        cnt <= (cnt + 15'h0001);
        if(cntOvf) begin
          cnt <= 15'h0;
        end
      end
      if(logitsIn_valid) begin
        maxFlow_payload <= maxNext;
        index <= indexNext;
        if(cntOvf) begin
          maxFlow_payload <= 16'hfc00;
          index <= 15'h0;
        end
      end
      vldDly <= vld;
    end
  end

  always @(posedge clk_0_clk) begin
    indexDly <= t_indexDly;
  end


endmodule

module InsertCfg_1 (
  input  wire          io_cfgIn_valid,
  output wire          io_cfgIn_ready,
  input  wire [31:0]   io_cfgIn_payload,
  output wire          io_cfgOut_valid,
  input  wire          io_cfgOut_ready,
  output wire [31:0]   io_cfgOut_payload,
  output wire          io_gtCnt_valid,
  output wire [15:0]   io_gtCnt_payload,
  input  wire          io_index_valid,
  input  wire          io_index_payload_last,
  input  wire [15:0]   io_index_payload_tdata,
  input  wire [5:0]    io_index_payload_tuser,
  input  wire          status_enPredictor,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                cnt_io_output_valid;
  wire       [15:0]   cnt_io_output_tdata;
  wire       [5:0]    cnt_io_output_tuser;
  wire                gtZeroCnt_valid;
  wire                gtZeroCnt_ready;
  wire       [15:0]   gtZeroCnt_tdata;
  wire       [5:0]    gtZeroCnt_tuser;
  wire       [5:0]    tag;
  wire                hit;
  wire       [31:0]   insertCfg_2;
  wire       [31:0]   cfg;
  wire                io_cfgIn_fire;
  wire                t_io_cfgIn_ready;
  wire                cfgInHalt_valid;
  wire                cfgInHalt_ready;
  wire       [31:0]   cfgInHalt_payload;
  wire                cfgInHalt_s2mPipe_valid;
  reg                 cfgInHalt_s2mPipe_ready;
  wire       [31:0]   cfgInHalt_s2mPipe_payload;
  reg                 cfgInHalt_rValidN;
  reg        [31:0]   cfgInHalt_rData;
  wire                cfgInHalt_s2mPipe_m2sPipe_valid;
  wire                cfgInHalt_s2mPipe_m2sPipe_ready;
  wire       [31:0]   cfgInHalt_s2mPipe_m2sPipe_payload;
  reg                 cfgInHalt_s2mPipe_rValid;
  reg        [31:0]   cfgInHalt_s2mPipe_rData;
  wire                gtZeroCnt_fire;

  GtZeroCnt_1 cnt (
    .io_index_valid         (io_index_valid              ), //i
    .io_index_payload_last  (io_index_payload_last       ), //i
    .io_index_payload_tdata (io_index_payload_tdata[15:0]), //i
    .io_index_payload_tuser (io_index_payload_tuser[5:0] ), //i
    .io_output_valid        (cnt_io_output_valid         ), //o
    .io_output_ready        (gtZeroCnt_ready             ), //i
    .io_output_tdata        (cnt_io_output_tdata[15:0]   ), //o
    .io_output_tuser        (cnt_io_output_tuser[5:0]    ), //o
    .clk_0_clk              (clk_0_clk                   ), //i
    .clk_0_resetn           (clk_0_resetn                )  //i
  );
  assign gtZeroCnt_valid = cnt_io_output_valid;
  assign gtZeroCnt_tdata = cnt_io_output_tdata;
  assign gtZeroCnt_tuser = cnt_io_output_tuser;
  assign tag = io_cfgIn_payload[31 : 26];
  assign hit = ((((tag == 6'h1c) || (tag == 6'h18)) || (tag == 6'h1f)) || (status_enPredictor ? (tag == 6'h16) : 1'b0));
  assign insertCfg_2 = {io_cfgIn_payload[31 : 16],gtZeroCnt_tdata};
  assign cfg = (hit ? insertCfg_2 : io_cfgIn_payload);
  assign io_cfgIn_fire = (io_cfgIn_valid && io_cfgIn_ready);
  assign gtZeroCnt_ready = (hit && io_cfgIn_fire);
  assign t_io_cfgIn_ready = (! (hit && (! gtZeroCnt_valid)));
  assign io_cfgIn_ready = (cfgInHalt_ready && t_io_cfgIn_ready);
  assign cfgInHalt_valid = (io_cfgIn_valid && t_io_cfgIn_ready);
  assign cfgInHalt_payload = cfg;
  assign cfgInHalt_ready = cfgInHalt_rValidN;
  assign cfgInHalt_s2mPipe_valid = (cfgInHalt_valid || (! cfgInHalt_rValidN));
  assign cfgInHalt_s2mPipe_payload = (cfgInHalt_rValidN ? cfgInHalt_payload : cfgInHalt_rData);
  always @(*) begin
    cfgInHalt_s2mPipe_ready = cfgInHalt_s2mPipe_m2sPipe_ready;
    if((! cfgInHalt_s2mPipe_m2sPipe_valid)) begin
      cfgInHalt_s2mPipe_ready = 1'b1;
    end
  end

  assign cfgInHalt_s2mPipe_m2sPipe_valid = cfgInHalt_s2mPipe_rValid;
  assign cfgInHalt_s2mPipe_m2sPipe_payload = cfgInHalt_s2mPipe_rData;
  assign io_cfgOut_valid = cfgInHalt_s2mPipe_m2sPipe_valid;
  assign cfgInHalt_s2mPipe_m2sPipe_ready = io_cfgOut_ready;
  assign io_cfgOut_payload = cfgInHalt_s2mPipe_m2sPipe_payload;
  assign gtZeroCnt_fire = (gtZeroCnt_valid && gtZeroCnt_ready);
  assign io_gtCnt_valid = gtZeroCnt_fire;
  assign io_gtCnt_payload = gtZeroCnt_tdata;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cfgInHalt_rValidN <= 1'b1;
      cfgInHalt_s2mPipe_rValid <= 1'b0;
    end else begin
      if(cfgInHalt_valid) begin
        cfgInHalt_rValidN <= 1'b0;
      end
      if(cfgInHalt_s2mPipe_ready) begin
        cfgInHalt_rValidN <= 1'b1;
      end
      if(cfgInHalt_s2mPipe_ready) begin
        cfgInHalt_s2mPipe_rValid <= cfgInHalt_s2mPipe_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(cfgInHalt_ready) begin
      cfgInHalt_rData <= cfgInHalt_payload;
    end
    if(cfgInHalt_s2mPipe_ready) begin
      cfgInHalt_s2mPipe_rData <= cfgInHalt_s2mPipe_payload;
    end
  end


endmodule

module AllGatherSubModNew_1 (
  input  wire          dotOut_valid,
  input  wire [15:0]   dotOut_tdata,
  input  wire [5:0]    dotOut_tuser,
  input  wire          resOut_valid,
  input  wire          resOut_payload_last,
  input  wire [15:0]   resOut_payload_tdata,
  input  wire [5:0]    resOut_payload_tuser,
  input  wire          p2sOut_valid,
  input  wire          p2sOut_payload_last,
  input  wire [15:0]   p2sOut_payload_tdata,
  input  wire [5:0]    p2sOut_payload_tuser,
  output wire          allGatherOut_tvalid,
  output wire [15:0]   allGatherOut_tdata,
  output wire [5:0]    allGatherOut_tuser,
  output wire          allReduceOut_tvalid,
  output wire [15:0]   allReduceOut_tdata,
  output wire [5:0]    allReduceOut_tuser,
  input  wire          indexIn_valid,
  input  wire          indexIn_payload_last,
  input  wire [15:0]   indexIn_payload_tdata,
  input  wire [5:0]    indexIn_payload_tuser,
  input  wire          gateIndexIn_valid,
  input  wire          gateIndexIn_payload_last,
  input  wire [15:0]   gateIndexIn_payload_tdata,
  input  wire [5:0]    gateIndexIn_payload_tuser,
  input  wire          ugIndexIn_valid,
  input  wire          ugIndexIn_payload_last,
  input  wire [15:0]   ugIndexIn_payload_tdata,
  input  wire [5:0]    ugIndexIn_payload_tuser,
  output wire          indexOut_tvalid,
  output wire          indexOut_tlast,
  output wire [15:0]   indexOut_tdata,
  output wire [5:0]    indexOut_tuser,
  input  wire          c2c_from_valid,
  output wire          c2c_from_ready,
  input  wire          c2c_from_payload_last,
  input  wire [15:0]   c2c_from_payload_tdata,
  input  wire [5:0]    c2c_from_payload_tuser,
  input  wire [0:0]    c2c_from_payload_tdest,
  output wire          c2c_to_valid,
  output wire          c2c_to_payload_last,
  output wire [15:0]   c2c_to_payload_tdata,
  output wire [5:0]    c2c_to_payload_tuser,
  output wire [0:0]    c2c_to_payload_tdest,
  input  wire          clk_0_resetn,
  input  wire          clk_0_clk
);

  wire                node_io_output_valid;
  wire                node_io_output_payload_last;
  wire       [15:0]   node_io_output_payload_tdata;
  wire       [5:0]    node_io_output_payload_tuser;
  wire       [0:0]    node_io_output_payload_tdest;
  wire                node_io_to_valid;
  wire                node_io_to_payload_last;
  wire       [15:0]   node_io_to_payload_tdata;
  wire       [5:0]    node_io_to_payload_tuser;
  wire       [0:0]    node_io_to_payload_tdest;
  wire                reduce_output_tvalid;
  wire       [15:0]   reduce_output_tdata;
  wire       [5:0]    reduce_output_tuser;
  reg                 t_nodeIn_payload_last_1;
  reg        [15:0]   t_nodeIn_payload_tdata;
  reg        [5:0]    t_nodeIn_payload_tuser;
  reg                 t_indexOut_payload_last_4;
  reg        [15:0]   t_indexOut_payload_tdata_3;
  reg        [5:0]    t_indexOut_payload_tuser_3;
  wire       [5:0]    t_dotOut_valid;
  wire                dotOut_valid_1;
  wire                dotOut_payload_last;
  wire       [15:0]   dotOut_payload_tdata;
  wire       [5:0]    dotOut_payload_tuser;
  wire                resOut_valid_1;
  wire                resOut_payload_last_1;
  wire       [15:0]   resOut_payload_tdata_1;
  wire       [5:0]    resOut_payload_tuser_1;
  wire                p2sOut_valid_1;
  wire                p2sOut_payload_last_1;
  wire       [15:0]   p2sOut_payload_tdata_1;
  wire       [5:0]    p2sOut_payload_tuser_1;
  wire                nodeIn_valid;
  wire                nodeIn_payload_last;
  wire       [15:0]   nodeIn_payload_tdata;
  wire       [5:0]    nodeIn_payload_tuser;
  wire       [1:0]    t_nodeIn_payload_last;
  reg                 nodeIn_regNext_valid;
  reg                 nodeIn_regNext_payload_last;
  reg        [15:0]   nodeIn_regNext_payload_tdata;
  reg        [5:0]    nodeIn_regNext_payload_tuser;
  reg                 t_io_from_valid;
  reg                 t_io_from_payload_last;
  reg        [15:0]   t_io_from_payload_tdata;
  reg        [5:0]    t_io_from_payload_tuser;
  reg        [0:0]    t_io_from_payload_tdest;
  wire                nodeOutNoLast_valid;
  wire       [15:0]   nodeOutNoLast_tdata;
  wire       [5:0]    nodeOutNoLast_tuser;
  wire       [0:0]    nodeOutNoLast_tdest;
  reg                 node_reduce_output_regNext_valid;
  reg        [15:0]   node_reduce_output_regNext_tdata;
  reg        [5:0]    node_reduce_output_regNext_tuser;
  reg                 nodeOutNoLast_regNext_valid;
  reg        [15:0]   nodeOutNoLast_regNext_tdata;
  reg        [5:0]    nodeOutNoLast_regNext_tuser;
  reg        [0:0]    nodeOutNoLast_regNext_tdest;
  wire                directIndex_valid;
  wire                directIndex_payload_last;
  wire       [15:0]   directIndex_payload_tdata;
  wire       [5:0]    directIndex_payload_tuser;
  reg                 t_indexOut_valid;
  reg                 t_indexOut_payload_last;
  reg        [15:0]   t_indexOut_payload_tdata;
  reg        [5:0]    t_indexOut_payload_tuser;
  reg                 t_indexOut_valid_1;
  reg                 t_indexOut_payload_last_1;
  reg        [15:0]   t_indexOut_payload_tdata_1;
  reg        [5:0]    t_indexOut_payload_tuser_1;
  reg                 t_indexOut_valid_2;
  reg                 t_indexOut_payload_last_2;
  reg        [15:0]   t_indexOut_payload_tdata_2;
  reg        [5:0]    t_indexOut_payload_tuser_2;
  wire                indexOut_valid;
  wire                indexOut_payload_last;
  wire       [15:0]   indexOut_payload_tdata;
  wire       [5:0]    indexOut_payload_tuser;
  wire       [1:0]    t_indexOut_payload_last_3;

  AllGatherNode_1 node (
    .io_input_valid          (nodeIn_regNext_valid              ), //i
    .io_input_payload_last   (nodeIn_regNext_payload_last       ), //i
    .io_input_payload_tdata  (nodeIn_regNext_payload_tdata[15:0]), //i
    .io_input_payload_tuser  (nodeIn_regNext_payload_tuser[5:0] ), //i
    .io_output_valid         (node_io_output_valid              ), //o
    .io_output_payload_last  (node_io_output_payload_last       ), //o
    .io_output_payload_tdata (node_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (node_io_output_payload_tuser[5:0] ), //o
    .io_output_payload_tdest (node_io_output_payload_tdest      ), //o
    .io_from_valid           (t_io_from_valid                   ), //i
    .io_from_payload_last    (t_io_from_payload_last            ), //i
    .io_from_payload_tdata   (t_io_from_payload_tdata[15:0]     ), //i
    .io_from_payload_tuser   (t_io_from_payload_tuser[5:0]      ), //i
    .io_from_payload_tdest   (t_io_from_payload_tdest           ), //i
    .io_to_valid             (node_io_to_valid                  ), //o
    .io_to_payload_last      (node_io_to_payload_last           ), //o
    .io_to_payload_tdata     (node_io_to_payload_tdata[15:0]    ), //o
    .io_to_payload_tuser     (node_io_to_payload_tuser[5:0]     ), //o
    .io_to_payload_tdest     (node_io_to_payload_tdest          ), //o
    .clk_0_clk               (clk_0_clk                         ), //i
    .clk_0_resetn            (clk_0_resetn                      )  //i
  );
  AllReduce_1 reduce (
    .input_valid   (nodeOutNoLast_valid      ), //i
    .input_tdata   (nodeOutNoLast_tdata[15:0]), //i
    .input_tuser   (nodeOutNoLast_tuser[5:0] ), //i
    .input_tdest   (nodeOutNoLast_tdest      ), //i
    .output_tvalid (reduce_output_tvalid     ), //o
    .output_tdata  (reduce_output_tdata[15:0]), //o
    .output_tuser  (reduce_output_tuser[5:0] ), //o
    .clk_0_resetn  (clk_0_resetn             ), //i
    .clk_0_clk     (clk_0_clk                )  //i
  );
  always @(*) begin
    case(t_nodeIn_payload_last)
      2'b00 : begin
        t_nodeIn_payload_last_1 = resOut_payload_last_1;
        t_nodeIn_payload_tdata = resOut_payload_tdata_1;
        t_nodeIn_payload_tuser = resOut_payload_tuser_1;
      end
      2'b01 : begin
        t_nodeIn_payload_last_1 = dotOut_payload_last;
        t_nodeIn_payload_tdata = dotOut_payload_tdata;
        t_nodeIn_payload_tuser = dotOut_payload_tuser;
      end
      default : begin
        t_nodeIn_payload_last_1 = p2sOut_payload_last_1;
        t_nodeIn_payload_tdata = p2sOut_payload_tdata_1;
        t_nodeIn_payload_tuser = p2sOut_payload_tuser_1;
      end
    endcase
  end

  always @(*) begin
    case(t_indexOut_payload_last_3)
      2'b00 : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser;
      end
      2'b01 : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last_1;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata_1;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser_1;
      end
      default : begin
        t_indexOut_payload_last_4 = t_indexOut_payload_last_2;
        t_indexOut_payload_tdata_3 = t_indexOut_payload_tdata_2;
        t_indexOut_payload_tuser_3 = t_indexOut_payload_tuser_2;
      end
    endcase
  end

  assign t_dotOut_valid = dotOut_tuser;
  assign dotOut_valid_1 = (dotOut_valid && (((((t_dotOut_valid == 6'h1b) || (t_dotOut_valid == 6'h18)) || (t_dotOut_valid == 6'h16)) || (t_dotOut_valid == 6'h20)) || (t_dotOut_valid == 6'h23)));
  assign dotOut_payload_tdata = dotOut_tdata;
  assign dotOut_payload_last = 1'b1;
  assign dotOut_payload_tuser = t_dotOut_valid;
  assign resOut_valid_1 = (resOut_valid && (resOut_payload_tuser == 6'h10));
  assign resOut_payload_tdata_1 = resOut_payload_tdata;
  assign resOut_payload_last_1 = resOut_payload_last;
  assign resOut_payload_tuser_1 = resOut_payload_tuser;
  assign p2sOut_valid_1 = (p2sOut_valid && ((((p2sOut_payload_tuser == 6'h1f) || (p2sOut_payload_tuser == 6'h0)) || (p2sOut_payload_tuser == 6'h01)) || (p2sOut_payload_tuser == 6'h02)));
  assign p2sOut_payload_tdata_1 = p2sOut_payload_tdata;
  assign p2sOut_payload_last_1 = p2sOut_payload_last;
  assign p2sOut_payload_tuser_1 = p2sOut_payload_tuser;
  assign nodeIn_valid = (|{p2sOut_valid_1,{dotOut_valid_1,resOut_valid_1}});
  assign t_nodeIn_payload_last = {p2sOut_valid_1,dotOut_valid_1};
  assign nodeIn_payload_last = t_nodeIn_payload_last_1;
  assign nodeIn_payload_tdata = t_nodeIn_payload_tdata;
  assign nodeIn_payload_tuser = t_nodeIn_payload_tuser;
  assign c2c_to_valid = node_io_to_valid;
  assign c2c_to_payload_last = node_io_to_payload_last;
  assign c2c_to_payload_tdata = node_io_to_payload_tdata;
  assign c2c_to_payload_tuser = node_io_to_payload_tuser;
  assign c2c_to_payload_tdest = node_io_to_payload_tdest;
  assign c2c_from_ready = 1'b1;
  assign nodeOutNoLast_valid = node_io_output_valid;
  assign nodeOutNoLast_tdata = node_io_output_payload_tdata;
  assign nodeOutNoLast_tuser = node_io_output_payload_tuser;
  assign nodeOutNoLast_tdest = node_io_output_payload_tdest;
  assign allReduceOut_tvalid = node_reduce_output_regNext_valid;
  assign allReduceOut_tdata = node_reduce_output_regNext_tdata;
  assign allReduceOut_tuser = node_reduce_output_regNext_tuser;
  assign allGatherOut_tvalid = nodeOutNoLast_regNext_valid;
  assign allGatherOut_tdata = nodeOutNoLast_regNext_tdata;
  assign allGatherOut_tuser = nodeOutNoLast_regNext_tuser;
  assign directIndex_valid = (indexIn_valid && (indexIn_payload_tuser != 6'h1e));
  assign directIndex_payload_tdata = indexIn_payload_tdata;
  assign directIndex_payload_tuser = indexIn_payload_tuser;
  assign directIndex_payload_last = indexIn_payload_last;
  assign indexOut_valid = (|{t_indexOut_valid_2,{t_indexOut_valid_1,t_indexOut_valid}});
  assign t_indexOut_payload_last_3 = {t_indexOut_valid_2,t_indexOut_valid_1};
  assign indexOut_payload_last = t_indexOut_payload_last_4;
  assign indexOut_payload_tdata = t_indexOut_payload_tdata_3;
  assign indexOut_payload_tuser = t_indexOut_payload_tuser_3;
  assign indexOut_tvalid = indexOut_valid;
  assign indexOut_tlast = indexOut_payload_last;
  assign indexOut_tdata = indexOut_payload_tdata;
  assign indexOut_tuser = indexOut_payload_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      nodeIn_regNext_valid <= 1'b0;
      t_io_from_valid <= 1'b0;
      node_reduce_output_regNext_valid <= 1'b0;
      nodeOutNoLast_regNext_valid <= 1'b0;
      t_indexOut_valid <= 1'b0;
      t_indexOut_valid_1 <= 1'b0;
      t_indexOut_valid_2 <= 1'b0;
    end else begin
      nodeIn_regNext_valid <= nodeIn_valid;
      t_io_from_valid <= c2c_from_valid;
      node_reduce_output_regNext_valid <= reduce_output_tvalid;
      nodeOutNoLast_regNext_valid <= nodeOutNoLast_valid;
      t_indexOut_valid <= gateIndexIn_valid;
      t_indexOut_valid_1 <= ugIndexIn_valid;
      t_indexOut_valid_2 <= directIndex_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    nodeIn_regNext_payload_last <= nodeIn_payload_last;
    nodeIn_regNext_payload_tdata <= nodeIn_payload_tdata;
    nodeIn_regNext_payload_tuser <= nodeIn_payload_tuser;
    t_io_from_payload_last <= c2c_from_payload_last;
    t_io_from_payload_tdata <= c2c_from_payload_tdata;
    t_io_from_payload_tuser <= c2c_from_payload_tuser;
    t_io_from_payload_tdest <= c2c_from_payload_tdest;
    node_reduce_output_regNext_tdata <= reduce_output_tdata;
    node_reduce_output_regNext_tuser <= reduce_output_tuser;
    nodeOutNoLast_regNext_tdata <= nodeOutNoLast_tdata;
    nodeOutNoLast_regNext_tuser <= nodeOutNoLast_tuser;
    nodeOutNoLast_regNext_tdest <= nodeOutNoLast_tdest;
    t_indexOut_payload_last <= gateIndexIn_payload_last;
    t_indexOut_payload_tdata <= gateIndexIn_payload_tdata;
    t_indexOut_payload_tuser <= gateIndexIn_payload_tuser;
    t_indexOut_payload_last_1 <= ugIndexIn_payload_last;
    t_indexOut_payload_tdata_1 <= ugIndexIn_payload_tdata;
    t_indexOut_payload_tuser_1 <= ugIndexIn_payload_tuser;
    t_indexOut_payload_last_2 <= directIndex_payload_last;
    t_indexOut_payload_tdata_2 <= directIndex_payload_tdata;
    t_indexOut_payload_tuser_2 <= directIndex_payload_tuser;
  end


endmodule

module MulAddSGNew_1 (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [2047:0] wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [2047:0] dotIn_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [2047:0] resAdd_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          preScale_tvalid,
  output wire          preScale_tready,
  input  wire [15:0]   preScale_tdata,
  input  wire          postScale_tvalid,
  output wire          postScale_tready,
  input  wire [31:0]   postScale_tdata,
  output wire          vecOut_tvalid,
  output wire [2047:0] vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [5:0]    postCfgTag,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                banks_0_wkvIn_tready;
  wire                banks_0_dotIn_tready;
  wire                banks_0_axpyIn_tready;
  wire                banks_0_preScale_tready;
  wire                banks_0_resAdd_tready;
  wire                banks_0_vecOut_tvalid;
  wire       [511:0]  banks_0_vecOut_tdata;
  wire       [5:0]    banks_0_vecOut_tuser;
  wire                banks_0_scalarOut_tvalid;
  wire                banks_0_scalarOut_tlast;
  wire       [15:0]   banks_0_scalarOut_tdata;
  wire       [5:0]    banks_0_scalarOut_tuser;
  wire                banks_0_cfg_tready;
  wire       [5:0]    banks_0_preCfgTag;
  wire       [5:0]    banks_0_postCfgTag;
  wire                banks_1_wkvIn_tready;
  wire                banks_1_dotIn_tready;
  wire                banks_1_axpyIn_tready;
  wire                banks_1_preScale_tready;
  wire                banks_1_resAdd_tready;
  wire                banks_1_vecOut_tvalid;
  wire       [511:0]  banks_1_vecOut_tdata;
  wire       [5:0]    banks_1_vecOut_tuser;
  wire                banks_1_scalarOut_tvalid;
  wire                banks_1_scalarOut_tlast;
  wire       [15:0]   banks_1_scalarOut_tdata;
  wire       [5:0]    banks_1_scalarOut_tuser;
  wire                banks_1_cfg_tready;
  wire       [5:0]    banks_1_preCfgTag;
  wire       [5:0]    banks_1_postCfgTag;
  wire                banks_2_wkvIn_tready;
  wire                banks_2_dotIn_tready;
  wire                banks_2_axpyIn_tready;
  wire                banks_2_preScale_tready;
  wire                banks_2_resAdd_tready;
  wire                banks_2_vecOut_tvalid;
  wire       [511:0]  banks_2_vecOut_tdata;
  wire       [5:0]    banks_2_vecOut_tuser;
  wire                banks_2_scalarOut_tvalid;
  wire                banks_2_scalarOut_tlast;
  wire       [15:0]   banks_2_scalarOut_tdata;
  wire       [5:0]    banks_2_scalarOut_tuser;
  wire                banks_2_cfg_tready;
  wire       [5:0]    banks_2_preCfgTag;
  wire       [5:0]    banks_2_postCfgTag;
  wire                banks_3_wkvIn_tready;
  wire                banks_3_dotIn_tready;
  wire                banks_3_axpyIn_tready;
  wire                banks_3_preScale_tready;
  wire                banks_3_resAdd_tready;
  wire                banks_3_vecOut_tvalid;
  wire       [511:0]  banks_3_vecOut_tdata;
  wire       [5:0]    banks_3_vecOut_tuser;
  wire                banks_3_scalarOut_tvalid;
  wire                banks_3_scalarOut_tlast;
  wire       [15:0]   banks_3_scalarOut_tdata;
  wire       [5:0]    banks_3_scalarOut_tuser;
  wire                banks_3_cfg_tready;
  wire       [5:0]    banks_3_preCfgTag;
  wire       [5:0]    banks_3_postCfgTag;
  wire                fp32Acc_io_postScale_ready;
  wire                fp32Acc_io_output_valid;
  wire       [15:0]   fp32Acc_io_output_tdata;
  wire       [5:0]    fp32Acc_io_output_tuser;
  wire       [511:0]  wkvInSplit_0;
  wire       [511:0]  wkvInSplit_1;
  wire       [511:0]  wkvInSplit_2;
  wire       [511:0]  wkvInSplit_3;
  wire       [511:0]  dotInSplit_0;
  wire       [511:0]  dotInSplit_1;
  wire       [511:0]  dotInSplit_2;
  wire       [511:0]  dotInSplit_3;
  wire       [511:0]  resAddSplit_0;
  wire       [511:0]  resAddSplit_1;
  wire       [511:0]  resAddSplit_2;
  wire       [511:0]  resAddSplit_3;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_1;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_2;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_3;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_4;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_5;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_6;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_7;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_8;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_9;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_10;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_11;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_12;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_13;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_14;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_15;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_16;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_17;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_18;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_19;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_20;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_21;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_22;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_23;
  reg        [5:0]    engine_banks_0_postCfgTag_delay_24;
  reg                 engine_banks_0_vecOut_tvalid_regNext;
  reg        [2047:0] t_vecOut_tdata;
  reg        [5:0]    engine_banks_0_vecOut_tuser_regNext;

  MulAddEngineNew_4 banks_0 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_0_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_0[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_0_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_0[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_0_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_0_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_0_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_0[511:0]         ), //i
    .vecOut_tvalid    (banks_0_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_0_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_0_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_0_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_0_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_0_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_0_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_0_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_0_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_0_postCfgTag[5:0]      ), //o
    .clk_0_clk        (clk_0_clk                    ), //i
    .clk_0_resetn     (clk_0_resetn                 )  //i
  );
  MulAddEngineNew_4 banks_1 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_1_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_1[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_1_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_1[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_1_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_1_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_1_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_1[511:0]         ), //i
    .vecOut_tvalid    (banks_1_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_1_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_1_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_1_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_1_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_1_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_1_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_1_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_1_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_1_postCfgTag[5:0]      ), //o
    .clk_0_clk        (clk_0_clk                    ), //i
    .clk_0_resetn     (clk_0_resetn                 )  //i
  );
  MulAddEngineNew_4 banks_2 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_2_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_2[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_2_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_2[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_2_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_2_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_2_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_2[511:0]         ), //i
    .vecOut_tvalid    (banks_2_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_2_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_2_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_2_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_2_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_2_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_2_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_2_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_2_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_2_postCfgTag[5:0]      ), //o
    .clk_0_clk        (clk_0_clk                    ), //i
    .clk_0_resetn     (clk_0_resetn                 )  //i
  );
  MulAddEngineNew_4 banks_3 (
    .wkvIn_tvalid     (wkvIn_tvalid                 ), //i
    .wkvIn_tready     (banks_3_wkvIn_tready         ), //o
    .wkvIn_tdata      (wkvInSplit_3[511:0]          ), //i
    .dotIn_tvalid     (dotIn_tvalid                 ), //i
    .dotIn_tready     (banks_3_dotIn_tready         ), //o
    .dotIn_tdata      (dotInSplit_3[511:0]          ), //i
    .axpyIn_tvalid    (axpyIn_tvalid                ), //i
    .axpyIn_tready    (banks_3_axpyIn_tready        ), //o
    .axpyIn_tdata     (axpyIn_tdata[15:0]           ), //i
    .preScale_tvalid  (preScale_tvalid              ), //i
    .preScale_tready  (banks_3_preScale_tready      ), //o
    .preScale_tdata   (preScale_tdata[15:0]         ), //i
    .resAdd_tvalid    (resAdd_tvalid                ), //i
    .resAdd_tready    (banks_3_resAdd_tready        ), //o
    .resAdd_tdata     (resAddSplit_3[511:0]         ), //i
    .vecOut_tvalid    (banks_3_vecOut_tvalid        ), //o
    .vecOut_tdata     (banks_3_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (banks_3_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (banks_3_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (banks_3_scalarOut_tlast      ), //o
    .scalarOut_tdata  (banks_3_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (banks_3_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (cfg_tvalid                   ), //i
    .cfg_tready       (banks_3_cfg_tready           ), //o
    .cfg_tdata        (cfg_tdata[31:0]              ), //i
    .preCfgTag        (banks_3_preCfgTag[5:0]       ), //o
    .postCfgTag       (banks_3_postCfgTag[5:0]      ), //o
    .clk_0_clk        (clk_0_clk                    ), //i
    .clk_0_resetn     (clk_0_resetn                 )  //i
  );
  Fp32AccEngine_1 fp32Acc (
    .io_inputs_0_valid         (banks_0_scalarOut_tvalid     ), //i
    .io_inputs_0_payload_last  (banks_0_scalarOut_tlast      ), //i
    .io_inputs_0_payload_tdata (banks_0_scalarOut_tdata[15:0]), //i
    .io_inputs_0_payload_tuser (banks_0_scalarOut_tuser[5:0] ), //i
    .io_inputs_1_valid         (banks_1_scalarOut_tvalid     ), //i
    .io_inputs_1_payload_last  (banks_1_scalarOut_tlast      ), //i
    .io_inputs_1_payload_tdata (banks_1_scalarOut_tdata[15:0]), //i
    .io_inputs_1_payload_tuser (banks_1_scalarOut_tuser[5:0] ), //i
    .io_inputs_2_valid         (banks_2_scalarOut_tvalid     ), //i
    .io_inputs_2_payload_last  (banks_2_scalarOut_tlast      ), //i
    .io_inputs_2_payload_tdata (banks_2_scalarOut_tdata[15:0]), //i
    .io_inputs_2_payload_tuser (banks_2_scalarOut_tuser[5:0] ), //i
    .io_inputs_3_valid         (banks_3_scalarOut_tvalid     ), //i
    .io_inputs_3_payload_last  (banks_3_scalarOut_tlast      ), //i
    .io_inputs_3_payload_tdata (banks_3_scalarOut_tdata[15:0]), //i
    .io_inputs_3_payload_tuser (banks_3_scalarOut_tuser[5:0] ), //i
    .io_postScale_valid        (postScale_tvalid             ), //i
    .io_postScale_ready        (fp32Acc_io_postScale_ready   ), //o
    .io_postScale_payload      (postScale_tdata[31:0]        ), //i
    .io_output_valid           (fp32Acc_io_output_valid      ), //o
    .io_output_tdata           (fp32Acc_io_output_tdata[15:0]), //o
    .io_output_tuser           (fp32Acc_io_output_tuser[5:0] ), //o
    .clk_0_clk                 (clk_0_clk                    ), //i
    .clk_0_resetn              (clk_0_resetn                 )  //i
  );
  assign wkvInSplit_0 = wkvIn_tdata[511 : 0];
  assign wkvInSplit_1 = wkvIn_tdata[1023 : 512];
  assign wkvInSplit_2 = wkvIn_tdata[1535 : 1024];
  assign wkvInSplit_3 = wkvIn_tdata[2047 : 1536];
  assign dotInSplit_0 = dotIn_tdata[511 : 0];
  assign dotInSplit_1 = dotIn_tdata[1023 : 512];
  assign dotInSplit_2 = dotIn_tdata[1535 : 1024];
  assign dotInSplit_3 = dotIn_tdata[2047 : 1536];
  assign resAddSplit_0 = resAdd_tdata[511 : 0];
  assign resAddSplit_1 = resAdd_tdata[1023 : 512];
  assign resAddSplit_2 = resAdd_tdata[1535 : 1024];
  assign resAddSplit_3 = resAdd_tdata[2047 : 1536];
  assign preCfgTag = banks_0_preCfgTag;
  assign wkvIn_tready = banks_0_wkvIn_tready;
  assign dotIn_tready = banks_0_dotIn_tready;
  assign axpyIn_tready = banks_0_axpyIn_tready;
  assign preScale_tready = banks_0_preScale_tready;
  assign resAdd_tready = banks_0_resAdd_tready;
  assign cfg_tready = banks_0_cfg_tready;
  assign postScale_tready = fp32Acc_io_postScale_ready;
  assign scalarOut_tvalid = fp32Acc_io_output_valid;
  assign scalarOut_tdata = fp32Acc_io_output_tdata;
  assign scalarOut_tuser = fp32Acc_io_output_tuser;
  assign postCfgTag = engine_banks_0_postCfgTag_delay_24;
  assign vecOut_tvalid = engine_banks_0_vecOut_tvalid_regNext;
  assign vecOut_tdata = t_vecOut_tdata;
  assign vecOut_tuser = engine_banks_0_vecOut_tuser_regNext;
  always @(posedge clk_0_clk) begin
    engine_banks_0_postCfgTag_delay_1 <= banks_0_postCfgTag;
    engine_banks_0_postCfgTag_delay_2 <= engine_banks_0_postCfgTag_delay_1;
    engine_banks_0_postCfgTag_delay_3 <= engine_banks_0_postCfgTag_delay_2;
    engine_banks_0_postCfgTag_delay_4 <= engine_banks_0_postCfgTag_delay_3;
    engine_banks_0_postCfgTag_delay_5 <= engine_banks_0_postCfgTag_delay_4;
    engine_banks_0_postCfgTag_delay_6 <= engine_banks_0_postCfgTag_delay_5;
    engine_banks_0_postCfgTag_delay_7 <= engine_banks_0_postCfgTag_delay_6;
    engine_banks_0_postCfgTag_delay_8 <= engine_banks_0_postCfgTag_delay_7;
    engine_banks_0_postCfgTag_delay_9 <= engine_banks_0_postCfgTag_delay_8;
    engine_banks_0_postCfgTag_delay_10 <= engine_banks_0_postCfgTag_delay_9;
    engine_banks_0_postCfgTag_delay_11 <= engine_banks_0_postCfgTag_delay_10;
    engine_banks_0_postCfgTag_delay_12 <= engine_banks_0_postCfgTag_delay_11;
    engine_banks_0_postCfgTag_delay_13 <= engine_banks_0_postCfgTag_delay_12;
    engine_banks_0_postCfgTag_delay_14 <= engine_banks_0_postCfgTag_delay_13;
    engine_banks_0_postCfgTag_delay_15 <= engine_banks_0_postCfgTag_delay_14;
    engine_banks_0_postCfgTag_delay_16 <= engine_banks_0_postCfgTag_delay_15;
    engine_banks_0_postCfgTag_delay_17 <= engine_banks_0_postCfgTag_delay_16;
    engine_banks_0_postCfgTag_delay_18 <= engine_banks_0_postCfgTag_delay_17;
    engine_banks_0_postCfgTag_delay_19 <= engine_banks_0_postCfgTag_delay_18;
    engine_banks_0_postCfgTag_delay_20 <= engine_banks_0_postCfgTag_delay_19;
    engine_banks_0_postCfgTag_delay_21 <= engine_banks_0_postCfgTag_delay_20;
    engine_banks_0_postCfgTag_delay_22 <= engine_banks_0_postCfgTag_delay_21;
    engine_banks_0_postCfgTag_delay_23 <= engine_banks_0_postCfgTag_delay_22;
    engine_banks_0_postCfgTag_delay_24 <= engine_banks_0_postCfgTag_delay_23;
    t_vecOut_tdata <= {banks_3_vecOut_tdata,{banks_2_vecOut_tdata,{banks_1_vecOut_tdata,banks_0_vecOut_tdata}}};
    engine_banks_0_vecOut_tuser_regNext <= banks_0_vecOut_tuser;
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      engine_banks_0_vecOut_tvalid_regNext <= 1'b0;
    end else begin
      engine_banks_0_vecOut_tvalid_regNext <= banks_0_vecOut_tvalid;
    end
  end


endmodule

module SerialResAdd_1 (
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          io_fromAllReduce_valid,
  input  wire [15:0]   io_fromAllReduce_tdata,
  input  wire [5:0]    io_fromAllReduce_tuser,
  input  wire          io_fromResBuf_valid,
  output wire          io_fromResBuf_ready,
  input  wire [15:0]   io_fromResBuf_payload,
  output wire          io_toResBuf_valid,
  output wire [15:0]   io_toResBuf_payload,
  input  wire          clk_0_clk,
  output wire          multiCore2Res_resAddProbe_valid,
  output wire [15:0]   multiCore2Res_resAddProbe_payload,
  input  wire          clk_0_resetn
);

  wire                io_fromResBuf_fifo_io_pop_ready;
  wire                io_fromResBuf_fifo_io_push_ready;
  wire                io_fromResBuf_fifo_io_pop_valid;
  wire       [15:0]   io_fromResBuf_fifo_io_pop_payload;
  wire       [5:0]    io_fromResBuf_fifo_io_occupancy;
  wire       [5:0]    io_fromResBuf_fifo_io_availability;
  wire                input_add_ip_m_axis_result_tvalid;
  wire       [15:0]   input_add_ip_m_axis_result_tdata;
  wire                input_valid;
  wire       [15:0]   input_payload;
  reg        [5:0]    io_dotOut_tuser_delay_1;
  reg        [5:0]    io_dotOut_tuser_delay_2;
  reg        [5:0]    io_dotOut_tuser_delay_3;
  reg        [5:0]    io_dotOut_tuser_delay_4;
  reg        [5:0]    io_dotOut_tuser_delay_5;
  reg        [5:0]    tuser;
  reg        [0:0]    multiCore_idCnt;
  reg        [15:0]   multiCore_bankCnt;
  wire                multiCore_idOvf;
  wire                multiCore_bankOvf;
  wire                multiCore_tobeAdded_valid;
  wire       [15:0]   multiCore_tobeAdded_payload;
  wire                multiCore_flag;
  wire                multiCore2Res_allReduce_valid;
  wire       [15:0]   multiCore2Res_allReduce_payload;
  reg        [0:0]    multiCore2Res_idCnt;
  reg        [15:0]   multiCore2Res_bankCnt;
  wire                multiCore2Res_idOvf;
  wire                multiCore2Res_bankOvf;
  wire                multiCore2Res_flag;
  (* max_fanout = 100 *) reg                 multiCore2Res_toResBuf_valid;
  wire       [15:0]   multiCore2Res_toResBuf_payload;
  reg        [15:0]   multiCore2Res_allReduce_payload_regNext;

  StreamFifo_33 io_fromResBuf_fifo (
    .io_push_valid   (io_fromResBuf_valid                    ), //i
    .io_push_ready   (io_fromResBuf_fifo_io_push_ready       ), //o
    .io_push_payload (io_fromResBuf_payload[15:0]            ), //i
    .io_pop_valid    (io_fromResBuf_fifo_io_pop_valid        ), //o
    .io_pop_ready    (io_fromResBuf_fifo_io_pop_ready        ), //i
    .io_pop_payload  (io_fromResBuf_fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                                   ), //i
    .io_occupancy    (io_fromResBuf_fifo_io_occupancy[5:0]   ), //o
    .io_availability (io_fromResBuf_fifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                              ), //i
    .clk_0_resetn    (clk_0_resetn                           )  //i
  );
  fp16add6 input_add_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (input_valid                           ), //i
    .s_axis_a_tdata       (input_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (multiCore_tobeAdded_valid             ), //i
    .s_axis_b_tdata       (multiCore_tobeAdded_payload[15:0]     ), //i
    .m_axis_result_tvalid (input_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (input_add_ip_m_axis_result_tdata[15:0])  //o
  );
  assign io_fromResBuf_ready = io_fromResBuf_fifo_io_push_ready;
  assign input_valid = (io_dotOut_valid && (io_dotOut_tuser == 6'h10));
  assign input_payload = io_dotOut_tdata;
  assign multiCore_idOvf = (multiCore_idCnt == 1'b1);
  assign multiCore_bankOvf = (multiCore_bankCnt == 16'h07ff);
  assign io_output_valid = input_add_ip_m_axis_result_tvalid;
  assign io_output_payload_tdata = input_add_ip_m_axis_result_tdata;
  assign io_output_payload_tuser = tuser;
  assign io_output_payload_last = 1'b1;
  assign multiCore_flag = (multiCore_idCnt == 1'b0);
  assign multiCore_tobeAdded_valid = input_valid;
  assign multiCore_tobeAdded_payload = (multiCore_flag ? io_fromResBuf_fifo_io_pop_payload : 16'h0);
  assign io_fromResBuf_fifo_io_pop_ready = (input_valid && multiCore_flag);
  assign multiCore2Res_allReduce_valid = (io_fromAllReduce_valid && (io_fromAllReduce_tuser == 6'h10));
  assign multiCore2Res_allReduce_payload = io_fromAllReduce_tdata;
  assign multiCore2Res_idOvf = (multiCore2Res_idCnt == 1'b1);
  assign multiCore2Res_bankOvf = (multiCore2Res_bankCnt == 16'h07ff);
  assign multiCore2Res_flag = (multiCore2Res_idCnt == 1'b0);
  assign multiCore2Res_toResBuf_payload = multiCore2Res_allReduce_payload_regNext;
  assign io_toResBuf_valid = multiCore2Res_toResBuf_valid;
  assign io_toResBuf_payload = multiCore2Res_toResBuf_payload;
  assign multiCore2Res_resAddProbe_valid = ((multiCore2Res_allReduce_valid && (multiCore2Res_bankCnt == 16'h0)) && multiCore2Res_flag);
  assign multiCore2Res_resAddProbe_payload = multiCore2Res_allReduce_payload;
  always @(posedge clk_0_clk) begin
    io_dotOut_tuser_delay_1 <= io_dotOut_tuser;
    io_dotOut_tuser_delay_2 <= io_dotOut_tuser_delay_1;
    io_dotOut_tuser_delay_3 <= io_dotOut_tuser_delay_2;
    io_dotOut_tuser_delay_4 <= io_dotOut_tuser_delay_3;
    io_dotOut_tuser_delay_5 <= io_dotOut_tuser_delay_4;
    tuser <= io_dotOut_tuser_delay_5;
    multiCore2Res_allReduce_payload_regNext <= multiCore2Res_allReduce_payload;
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      multiCore_idCnt <= 1'b0;
      multiCore_bankCnt <= 16'h0;
      multiCore2Res_idCnt <= 1'b0;
      multiCore2Res_bankCnt <= 16'h0;
      multiCore2Res_toResBuf_valid <= 1'b0;
    end else begin
      if(input_valid) begin
        multiCore_bankCnt <= (multiCore_bankCnt + 16'h0001);
        if(multiCore_bankOvf) begin
          multiCore_bankCnt <= 16'h0;
          multiCore_idCnt <= (multiCore_idCnt + 1'b1);
          if(multiCore_idOvf) begin
            multiCore_idCnt <= 1'b0;
          end
        end
      end
      if(multiCore2Res_allReduce_valid) begin
        multiCore2Res_bankCnt <= (multiCore2Res_bankCnt + 16'h0001);
        if(multiCore2Res_bankOvf) begin
          multiCore2Res_bankCnt <= 16'h0;
          multiCore2Res_idCnt <= (multiCore2Res_idCnt + 1'b1);
          if(multiCore2Res_idOvf) begin
            multiCore2Res_idCnt <= 1'b0;
          end
        end
      end
      multiCore2Res_toResBuf_valid <= (multiCore2Res_allReduce_valid && multiCore2Res_flag);
    end
  end


endmodule

module ResidualBuffer_1 (
  input  wire          serialIn_tvalid,
  input  wire [15:0]   serialIn_tdata,
  input  wire          parallelIn_tvalid,
  input  wire [2047:0] parallelIn_tdata,
  output wire          serialOut_tvalid,
  input  wire          serialOut_tready,
  output wire [15:0]   serialOut_tdata,
  output wire          parallelOut_tvalid,
  input  wire          parallelOut_tready,
  output wire [2047:0] parallelOut_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                resBuf_io_push_valid;
  wire       [2047:0] resBuf_io_push_payload;
  wire       [0:0]    deMux_io_select;
  wire                deMux_io_outputs_0_ready;
  wire                resBuf_io_push_ready;
  wire                resBuf_io_pop_valid;
  wire       [2047:0] resBuf_io_pop_payload;
  wire       [4:0]    resBuf_io_occupancy;
  wire       [4:0]    resBuf_io_availability;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire       [2047:0] deMux_io_outputs_0_payload;
  wire                deMux_io_outputs_1_valid;
  wire       [2047:0] deMux_io_outputs_1_payload;
  wire       [1791:0] t_adaptedSerial_payload_128;
  wire       [1535:0] t_adaptedSerial_payload_129;
  wire       [1279:0] t_adaptedSerial_payload_130;
  wire       [1023:0] t_adaptedSerial_payload_131;
  wire       [767:0]  t_adaptedSerial_payload_132;
  wire       [511:0]  t_adaptedSerial_payload_133;
  wire       [255:0]  t_adaptedSerial_payload_134;
  wire       [6:0]    t_t_serialOut_payload_1;
  wire       [0:0]    t_t_serialOut_payload_1_1;
  reg        [15:0]   t_serialOut_payload_4;
  (* max_fanout = 100 *) reg                 serialIn_valid;
  reg        [15:0]   serialIn_payload;
  (* max_fanout = 100 *) reg                 parallelIn_valid;
  reg        [2047:0] parallelIn_payload;
  reg                 inMuxSel;
  reg                 outMuxSel;
  reg        [7:0]    cnt;
  wire                cntAbout2Ovf;
  reg                 cntOvfReg;
  wire                adaptedSerial_valid;
  wire       [2047:0] adaptedSerial_payload;
  wire       [15:0]   t_adaptedSerial_payload;
  reg        [15:0]   t_adaptedSerial_payload_1;
  reg        [15:0]   t_adaptedSerial_payload_2;
  reg        [15:0]   t_adaptedSerial_payload_3;
  reg        [15:0]   t_adaptedSerial_payload_4;
  reg        [15:0]   t_adaptedSerial_payload_5;
  reg        [15:0]   t_adaptedSerial_payload_6;
  reg        [15:0]   t_adaptedSerial_payload_7;
  reg        [15:0]   t_adaptedSerial_payload_8;
  reg        [15:0]   t_adaptedSerial_payload_9;
  reg        [15:0]   t_adaptedSerial_payload_10;
  reg        [15:0]   t_adaptedSerial_payload_11;
  reg        [15:0]   t_adaptedSerial_payload_12;
  reg        [15:0]   t_adaptedSerial_payload_13;
  reg        [15:0]   t_adaptedSerial_payload_14;
  reg        [15:0]   t_adaptedSerial_payload_15;
  reg        [15:0]   t_adaptedSerial_payload_16;
  reg        [15:0]   t_adaptedSerial_payload_17;
  reg        [15:0]   t_adaptedSerial_payload_18;
  reg        [15:0]   t_adaptedSerial_payload_19;
  reg        [15:0]   t_adaptedSerial_payload_20;
  reg        [15:0]   t_adaptedSerial_payload_21;
  reg        [15:0]   t_adaptedSerial_payload_22;
  reg        [15:0]   t_adaptedSerial_payload_23;
  reg        [15:0]   t_adaptedSerial_payload_24;
  reg        [15:0]   t_adaptedSerial_payload_25;
  reg        [15:0]   t_adaptedSerial_payload_26;
  reg        [15:0]   t_adaptedSerial_payload_27;
  reg        [15:0]   t_adaptedSerial_payload_28;
  reg        [15:0]   t_adaptedSerial_payload_29;
  reg        [15:0]   t_adaptedSerial_payload_30;
  reg        [15:0]   t_adaptedSerial_payload_31;
  reg        [15:0]   t_adaptedSerial_payload_32;
  reg        [15:0]   t_adaptedSerial_payload_33;
  reg        [15:0]   t_adaptedSerial_payload_34;
  reg        [15:0]   t_adaptedSerial_payload_35;
  reg        [15:0]   t_adaptedSerial_payload_36;
  reg        [15:0]   t_adaptedSerial_payload_37;
  reg        [15:0]   t_adaptedSerial_payload_38;
  reg        [15:0]   t_adaptedSerial_payload_39;
  reg        [15:0]   t_adaptedSerial_payload_40;
  reg        [15:0]   t_adaptedSerial_payload_41;
  reg        [15:0]   t_adaptedSerial_payload_42;
  reg        [15:0]   t_adaptedSerial_payload_43;
  reg        [15:0]   t_adaptedSerial_payload_44;
  reg        [15:0]   t_adaptedSerial_payload_45;
  reg        [15:0]   t_adaptedSerial_payload_46;
  reg        [15:0]   t_adaptedSerial_payload_47;
  reg        [15:0]   t_adaptedSerial_payload_48;
  reg        [15:0]   t_adaptedSerial_payload_49;
  reg        [15:0]   t_adaptedSerial_payload_50;
  reg        [15:0]   t_adaptedSerial_payload_51;
  reg        [15:0]   t_adaptedSerial_payload_52;
  reg        [15:0]   t_adaptedSerial_payload_53;
  reg        [15:0]   t_adaptedSerial_payload_54;
  reg        [15:0]   t_adaptedSerial_payload_55;
  reg        [15:0]   t_adaptedSerial_payload_56;
  reg        [15:0]   t_adaptedSerial_payload_57;
  reg        [15:0]   t_adaptedSerial_payload_58;
  reg        [15:0]   t_adaptedSerial_payload_59;
  reg        [15:0]   t_adaptedSerial_payload_60;
  reg        [15:0]   t_adaptedSerial_payload_61;
  reg        [15:0]   t_adaptedSerial_payload_62;
  reg        [15:0]   t_adaptedSerial_payload_63;
  reg        [15:0]   t_adaptedSerial_payload_64;
  reg        [15:0]   t_adaptedSerial_payload_65;
  reg        [15:0]   t_adaptedSerial_payload_66;
  reg        [15:0]   t_adaptedSerial_payload_67;
  reg        [15:0]   t_adaptedSerial_payload_68;
  reg        [15:0]   t_adaptedSerial_payload_69;
  reg        [15:0]   t_adaptedSerial_payload_70;
  reg        [15:0]   t_adaptedSerial_payload_71;
  reg        [15:0]   t_adaptedSerial_payload_72;
  reg        [15:0]   t_adaptedSerial_payload_73;
  reg        [15:0]   t_adaptedSerial_payload_74;
  reg        [15:0]   t_adaptedSerial_payload_75;
  reg        [15:0]   t_adaptedSerial_payload_76;
  reg        [15:0]   t_adaptedSerial_payload_77;
  reg        [15:0]   t_adaptedSerial_payload_78;
  reg        [15:0]   t_adaptedSerial_payload_79;
  reg        [15:0]   t_adaptedSerial_payload_80;
  reg        [15:0]   t_adaptedSerial_payload_81;
  reg        [15:0]   t_adaptedSerial_payload_82;
  reg        [15:0]   t_adaptedSerial_payload_83;
  reg        [15:0]   t_adaptedSerial_payload_84;
  reg        [15:0]   t_adaptedSerial_payload_85;
  reg        [15:0]   t_adaptedSerial_payload_86;
  reg        [15:0]   t_adaptedSerial_payload_87;
  reg        [15:0]   t_adaptedSerial_payload_88;
  reg        [15:0]   t_adaptedSerial_payload_89;
  reg        [15:0]   t_adaptedSerial_payload_90;
  reg        [15:0]   t_adaptedSerial_payload_91;
  reg        [15:0]   t_adaptedSerial_payload_92;
  reg        [15:0]   t_adaptedSerial_payload_93;
  reg        [15:0]   t_adaptedSerial_payload_94;
  reg        [15:0]   t_adaptedSerial_payload_95;
  reg        [15:0]   t_adaptedSerial_payload_96;
  reg        [15:0]   t_adaptedSerial_payload_97;
  reg        [15:0]   t_adaptedSerial_payload_98;
  reg        [15:0]   t_adaptedSerial_payload_99;
  reg        [15:0]   t_adaptedSerial_payload_100;
  reg        [15:0]   t_adaptedSerial_payload_101;
  reg        [15:0]   t_adaptedSerial_payload_102;
  reg        [15:0]   t_adaptedSerial_payload_103;
  reg        [15:0]   t_adaptedSerial_payload_104;
  reg        [15:0]   t_adaptedSerial_payload_105;
  reg        [15:0]   t_adaptedSerial_payload_106;
  reg        [15:0]   t_adaptedSerial_payload_107;
  reg        [15:0]   t_adaptedSerial_payload_108;
  reg        [15:0]   t_adaptedSerial_payload_109;
  reg        [15:0]   t_adaptedSerial_payload_110;
  reg        [15:0]   t_adaptedSerial_payload_111;
  reg        [15:0]   t_adaptedSerial_payload_112;
  reg        [15:0]   t_adaptedSerial_payload_113;
  reg        [15:0]   t_adaptedSerial_payload_114;
  reg        [15:0]   t_adaptedSerial_payload_115;
  reg        [15:0]   t_adaptedSerial_payload_116;
  reg        [15:0]   t_adaptedSerial_payload_117;
  reg        [15:0]   t_adaptedSerial_payload_118;
  reg        [15:0]   t_adaptedSerial_payload_119;
  reg        [15:0]   t_adaptedSerial_payload_120;
  reg        [15:0]   t_adaptedSerial_payload_121;
  reg        [15:0]   t_adaptedSerial_payload_122;
  reg        [15:0]   t_adaptedSerial_payload_123;
  reg        [15:0]   t_adaptedSerial_payload_124;
  reg        [15:0]   t_adaptedSerial_payload_125;
  reg        [15:0]   t_adaptedSerial_payload_126;
  reg        [15:0]   t_adaptedSerial_payload_127;
  wire                serialOut_valid;
  wire                serialOut_ready;
  wire       [15:0]   serialOut_payload;
  wire                parallelOut_valid;
  wire                parallelOut_ready;
  wire       [2047:0] parallelOut_payload;
  wire                serialOut_fire;
  reg                 t_serialOut_payload;
  reg        [6:0]    t_serialOut_payload_1;
  reg        [6:0]    t_serialOut_payload_2;
  wire                t_io_outputs_0_ready;
  wire       [2047:0] t_serialOut_payload_3;
  reg        [3:0]    bufInCnt;
  wire                bufInCntOvf;
  wire                resBuf_resBuf_io_push_fire;
  reg        [3:0]    bufOutCnt;
  wire                bufOutCntOvf;
  wire                resBuf_resBuf_io_pop_fire;

  assign t_t_serialOut_payload_1_1 = t_serialOut_payload;
  assign t_t_serialOut_payload_1 = {6'd0, t_t_serialOut_payload_1_1};
  assign t_adaptedSerial_payload_128 = {t_adaptedSerial_payload_16,{t_adaptedSerial_payload_17,{t_adaptedSerial_payload_18,{t_adaptedSerial_payload_19,{t_adaptedSerial_payload_20,{t_adaptedSerial_payload_21,{t_adaptedSerial_payload_22,{t_adaptedSerial_payload_23,{t_adaptedSerial_payload_24,{t_adaptedSerial_payload_25,{t_adaptedSerial_payload_26,{t_adaptedSerial_payload_27,{t_adaptedSerial_payload_28,{t_adaptedSerial_payload_29,{t_adaptedSerial_payload_30,{t_adaptedSerial_payload_31,t_adaptedSerial_payload_129}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_129 = {t_adaptedSerial_payload_32,{t_adaptedSerial_payload_33,{t_adaptedSerial_payload_34,{t_adaptedSerial_payload_35,{t_adaptedSerial_payload_36,{t_adaptedSerial_payload_37,{t_adaptedSerial_payload_38,{t_adaptedSerial_payload_39,{t_adaptedSerial_payload_40,{t_adaptedSerial_payload_41,{t_adaptedSerial_payload_42,{t_adaptedSerial_payload_43,{t_adaptedSerial_payload_44,{t_adaptedSerial_payload_45,{t_adaptedSerial_payload_46,{t_adaptedSerial_payload_47,t_adaptedSerial_payload_130}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_130 = {t_adaptedSerial_payload_48,{t_adaptedSerial_payload_49,{t_adaptedSerial_payload_50,{t_adaptedSerial_payload_51,{t_adaptedSerial_payload_52,{t_adaptedSerial_payload_53,{t_adaptedSerial_payload_54,{t_adaptedSerial_payload_55,{t_adaptedSerial_payload_56,{t_adaptedSerial_payload_57,{t_adaptedSerial_payload_58,{t_adaptedSerial_payload_59,{t_adaptedSerial_payload_60,{t_adaptedSerial_payload_61,{t_adaptedSerial_payload_62,{t_adaptedSerial_payload_63,t_adaptedSerial_payload_131}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_131 = {t_adaptedSerial_payload_64,{t_adaptedSerial_payload_65,{t_adaptedSerial_payload_66,{t_adaptedSerial_payload_67,{t_adaptedSerial_payload_68,{t_adaptedSerial_payload_69,{t_adaptedSerial_payload_70,{t_adaptedSerial_payload_71,{t_adaptedSerial_payload_72,{t_adaptedSerial_payload_73,{t_adaptedSerial_payload_74,{t_adaptedSerial_payload_75,{t_adaptedSerial_payload_76,{t_adaptedSerial_payload_77,{t_adaptedSerial_payload_78,{t_adaptedSerial_payload_79,t_adaptedSerial_payload_132}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_132 = {t_adaptedSerial_payload_80,{t_adaptedSerial_payload_81,{t_adaptedSerial_payload_82,{t_adaptedSerial_payload_83,{t_adaptedSerial_payload_84,{t_adaptedSerial_payload_85,{t_adaptedSerial_payload_86,{t_adaptedSerial_payload_87,{t_adaptedSerial_payload_88,{t_adaptedSerial_payload_89,{t_adaptedSerial_payload_90,{t_adaptedSerial_payload_91,{t_adaptedSerial_payload_92,{t_adaptedSerial_payload_93,{t_adaptedSerial_payload_94,{t_adaptedSerial_payload_95,t_adaptedSerial_payload_133}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_133 = {t_adaptedSerial_payload_96,{t_adaptedSerial_payload_97,{t_adaptedSerial_payload_98,{t_adaptedSerial_payload_99,{t_adaptedSerial_payload_100,{t_adaptedSerial_payload_101,{t_adaptedSerial_payload_102,{t_adaptedSerial_payload_103,{t_adaptedSerial_payload_104,{t_adaptedSerial_payload_105,{t_adaptedSerial_payload_106,{t_adaptedSerial_payload_107,{t_adaptedSerial_payload_108,{t_adaptedSerial_payload_109,{t_adaptedSerial_payload_110,{t_adaptedSerial_payload_111,t_adaptedSerial_payload_134}}}}}}}}}}}}}}}};
  assign t_adaptedSerial_payload_134 = {t_adaptedSerial_payload_112,{t_adaptedSerial_payload_113,{t_adaptedSerial_payload_114,{t_adaptedSerial_payload_115,{t_adaptedSerial_payload_116,{t_adaptedSerial_payload_117,{t_adaptedSerial_payload_118,{t_adaptedSerial_payload_119,{t_adaptedSerial_payload_120,{t_adaptedSerial_payload_121,{t_adaptedSerial_payload_122,{t_adaptedSerial_payload_123,{t_adaptedSerial_payload_124,{t_adaptedSerial_payload_125,{t_adaptedSerial_payload_126,t_adaptedSerial_payload_127}}}}}}}}}}}}}}};
  LargeBankFifo_5 resBuf (
    .io_push_valid   (resBuf_io_push_valid          ), //i
    .io_push_ready   (resBuf_io_push_ready          ), //o
    .io_push_payload (resBuf_io_push_payload[2047:0]), //i
    .io_pop_valid    (resBuf_io_pop_valid           ), //o
    .io_pop_ready    (deMux_io_input_ready          ), //i
    .io_pop_payload  (resBuf_io_pop_payload[2047:0] ), //o
    .io_occupancy    (resBuf_io_occupancy[4:0]      ), //o
    .io_availability (resBuf_io_availability[4:0]   ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamDemux_6 deMux (
    .io_select            (deMux_io_select                   ), //i
    .io_input_valid       (resBuf_io_pop_valid               ), //i
    .io_input_ready       (deMux_io_input_ready              ), //o
    .io_input_payload     (resBuf_io_pop_payload[2047:0]     ), //i
    .io_outputs_0_valid   (deMux_io_outputs_0_valid          ), //o
    .io_outputs_0_ready   (deMux_io_outputs_0_ready          ), //i
    .io_outputs_0_payload (deMux_io_outputs_0_payload[2047:0]), //o
    .io_outputs_1_valid   (deMux_io_outputs_1_valid          ), //o
    .io_outputs_1_ready   (parallelOut_ready                 ), //i
    .io_outputs_1_payload (deMux_io_outputs_1_payload[2047:0])  //o
  );
  always @(*) begin
    case(t_serialOut_payload_2)
      7'b0000000 : t_serialOut_payload_4 = t_serialOut_payload_3[15 : 0];
      7'b0000001 : t_serialOut_payload_4 = t_serialOut_payload_3[31 : 16];
      7'b0000010 : t_serialOut_payload_4 = t_serialOut_payload_3[47 : 32];
      7'b0000011 : t_serialOut_payload_4 = t_serialOut_payload_3[63 : 48];
      7'b0000100 : t_serialOut_payload_4 = t_serialOut_payload_3[79 : 64];
      7'b0000101 : t_serialOut_payload_4 = t_serialOut_payload_3[95 : 80];
      7'b0000110 : t_serialOut_payload_4 = t_serialOut_payload_3[111 : 96];
      7'b0000111 : t_serialOut_payload_4 = t_serialOut_payload_3[127 : 112];
      7'b0001000 : t_serialOut_payload_4 = t_serialOut_payload_3[143 : 128];
      7'b0001001 : t_serialOut_payload_4 = t_serialOut_payload_3[159 : 144];
      7'b0001010 : t_serialOut_payload_4 = t_serialOut_payload_3[175 : 160];
      7'b0001011 : t_serialOut_payload_4 = t_serialOut_payload_3[191 : 176];
      7'b0001100 : t_serialOut_payload_4 = t_serialOut_payload_3[207 : 192];
      7'b0001101 : t_serialOut_payload_4 = t_serialOut_payload_3[223 : 208];
      7'b0001110 : t_serialOut_payload_4 = t_serialOut_payload_3[239 : 224];
      7'b0001111 : t_serialOut_payload_4 = t_serialOut_payload_3[255 : 240];
      7'b0010000 : t_serialOut_payload_4 = t_serialOut_payload_3[271 : 256];
      7'b0010001 : t_serialOut_payload_4 = t_serialOut_payload_3[287 : 272];
      7'b0010010 : t_serialOut_payload_4 = t_serialOut_payload_3[303 : 288];
      7'b0010011 : t_serialOut_payload_4 = t_serialOut_payload_3[319 : 304];
      7'b0010100 : t_serialOut_payload_4 = t_serialOut_payload_3[335 : 320];
      7'b0010101 : t_serialOut_payload_4 = t_serialOut_payload_3[351 : 336];
      7'b0010110 : t_serialOut_payload_4 = t_serialOut_payload_3[367 : 352];
      7'b0010111 : t_serialOut_payload_4 = t_serialOut_payload_3[383 : 368];
      7'b0011000 : t_serialOut_payload_4 = t_serialOut_payload_3[399 : 384];
      7'b0011001 : t_serialOut_payload_4 = t_serialOut_payload_3[415 : 400];
      7'b0011010 : t_serialOut_payload_4 = t_serialOut_payload_3[431 : 416];
      7'b0011011 : t_serialOut_payload_4 = t_serialOut_payload_3[447 : 432];
      7'b0011100 : t_serialOut_payload_4 = t_serialOut_payload_3[463 : 448];
      7'b0011101 : t_serialOut_payload_4 = t_serialOut_payload_3[479 : 464];
      7'b0011110 : t_serialOut_payload_4 = t_serialOut_payload_3[495 : 480];
      7'b0011111 : t_serialOut_payload_4 = t_serialOut_payload_3[511 : 496];
      7'b0100000 : t_serialOut_payload_4 = t_serialOut_payload_3[527 : 512];
      7'b0100001 : t_serialOut_payload_4 = t_serialOut_payload_3[543 : 528];
      7'b0100010 : t_serialOut_payload_4 = t_serialOut_payload_3[559 : 544];
      7'b0100011 : t_serialOut_payload_4 = t_serialOut_payload_3[575 : 560];
      7'b0100100 : t_serialOut_payload_4 = t_serialOut_payload_3[591 : 576];
      7'b0100101 : t_serialOut_payload_4 = t_serialOut_payload_3[607 : 592];
      7'b0100110 : t_serialOut_payload_4 = t_serialOut_payload_3[623 : 608];
      7'b0100111 : t_serialOut_payload_4 = t_serialOut_payload_3[639 : 624];
      7'b0101000 : t_serialOut_payload_4 = t_serialOut_payload_3[655 : 640];
      7'b0101001 : t_serialOut_payload_4 = t_serialOut_payload_3[671 : 656];
      7'b0101010 : t_serialOut_payload_4 = t_serialOut_payload_3[687 : 672];
      7'b0101011 : t_serialOut_payload_4 = t_serialOut_payload_3[703 : 688];
      7'b0101100 : t_serialOut_payload_4 = t_serialOut_payload_3[719 : 704];
      7'b0101101 : t_serialOut_payload_4 = t_serialOut_payload_3[735 : 720];
      7'b0101110 : t_serialOut_payload_4 = t_serialOut_payload_3[751 : 736];
      7'b0101111 : t_serialOut_payload_4 = t_serialOut_payload_3[767 : 752];
      7'b0110000 : t_serialOut_payload_4 = t_serialOut_payload_3[783 : 768];
      7'b0110001 : t_serialOut_payload_4 = t_serialOut_payload_3[799 : 784];
      7'b0110010 : t_serialOut_payload_4 = t_serialOut_payload_3[815 : 800];
      7'b0110011 : t_serialOut_payload_4 = t_serialOut_payload_3[831 : 816];
      7'b0110100 : t_serialOut_payload_4 = t_serialOut_payload_3[847 : 832];
      7'b0110101 : t_serialOut_payload_4 = t_serialOut_payload_3[863 : 848];
      7'b0110110 : t_serialOut_payload_4 = t_serialOut_payload_3[879 : 864];
      7'b0110111 : t_serialOut_payload_4 = t_serialOut_payload_3[895 : 880];
      7'b0111000 : t_serialOut_payload_4 = t_serialOut_payload_3[911 : 896];
      7'b0111001 : t_serialOut_payload_4 = t_serialOut_payload_3[927 : 912];
      7'b0111010 : t_serialOut_payload_4 = t_serialOut_payload_3[943 : 928];
      7'b0111011 : t_serialOut_payload_4 = t_serialOut_payload_3[959 : 944];
      7'b0111100 : t_serialOut_payload_4 = t_serialOut_payload_3[975 : 960];
      7'b0111101 : t_serialOut_payload_4 = t_serialOut_payload_3[991 : 976];
      7'b0111110 : t_serialOut_payload_4 = t_serialOut_payload_3[1007 : 992];
      7'b0111111 : t_serialOut_payload_4 = t_serialOut_payload_3[1023 : 1008];
      7'b1000000 : t_serialOut_payload_4 = t_serialOut_payload_3[1039 : 1024];
      7'b1000001 : t_serialOut_payload_4 = t_serialOut_payload_3[1055 : 1040];
      7'b1000010 : t_serialOut_payload_4 = t_serialOut_payload_3[1071 : 1056];
      7'b1000011 : t_serialOut_payload_4 = t_serialOut_payload_3[1087 : 1072];
      7'b1000100 : t_serialOut_payload_4 = t_serialOut_payload_3[1103 : 1088];
      7'b1000101 : t_serialOut_payload_4 = t_serialOut_payload_3[1119 : 1104];
      7'b1000110 : t_serialOut_payload_4 = t_serialOut_payload_3[1135 : 1120];
      7'b1000111 : t_serialOut_payload_4 = t_serialOut_payload_3[1151 : 1136];
      7'b1001000 : t_serialOut_payload_4 = t_serialOut_payload_3[1167 : 1152];
      7'b1001001 : t_serialOut_payload_4 = t_serialOut_payload_3[1183 : 1168];
      7'b1001010 : t_serialOut_payload_4 = t_serialOut_payload_3[1199 : 1184];
      7'b1001011 : t_serialOut_payload_4 = t_serialOut_payload_3[1215 : 1200];
      7'b1001100 : t_serialOut_payload_4 = t_serialOut_payload_3[1231 : 1216];
      7'b1001101 : t_serialOut_payload_4 = t_serialOut_payload_3[1247 : 1232];
      7'b1001110 : t_serialOut_payload_4 = t_serialOut_payload_3[1263 : 1248];
      7'b1001111 : t_serialOut_payload_4 = t_serialOut_payload_3[1279 : 1264];
      7'b1010000 : t_serialOut_payload_4 = t_serialOut_payload_3[1295 : 1280];
      7'b1010001 : t_serialOut_payload_4 = t_serialOut_payload_3[1311 : 1296];
      7'b1010010 : t_serialOut_payload_4 = t_serialOut_payload_3[1327 : 1312];
      7'b1010011 : t_serialOut_payload_4 = t_serialOut_payload_3[1343 : 1328];
      7'b1010100 : t_serialOut_payload_4 = t_serialOut_payload_3[1359 : 1344];
      7'b1010101 : t_serialOut_payload_4 = t_serialOut_payload_3[1375 : 1360];
      7'b1010110 : t_serialOut_payload_4 = t_serialOut_payload_3[1391 : 1376];
      7'b1010111 : t_serialOut_payload_4 = t_serialOut_payload_3[1407 : 1392];
      7'b1011000 : t_serialOut_payload_4 = t_serialOut_payload_3[1423 : 1408];
      7'b1011001 : t_serialOut_payload_4 = t_serialOut_payload_3[1439 : 1424];
      7'b1011010 : t_serialOut_payload_4 = t_serialOut_payload_3[1455 : 1440];
      7'b1011011 : t_serialOut_payload_4 = t_serialOut_payload_3[1471 : 1456];
      7'b1011100 : t_serialOut_payload_4 = t_serialOut_payload_3[1487 : 1472];
      7'b1011101 : t_serialOut_payload_4 = t_serialOut_payload_3[1503 : 1488];
      7'b1011110 : t_serialOut_payload_4 = t_serialOut_payload_3[1519 : 1504];
      7'b1011111 : t_serialOut_payload_4 = t_serialOut_payload_3[1535 : 1520];
      7'b1100000 : t_serialOut_payload_4 = t_serialOut_payload_3[1551 : 1536];
      7'b1100001 : t_serialOut_payload_4 = t_serialOut_payload_3[1567 : 1552];
      7'b1100010 : t_serialOut_payload_4 = t_serialOut_payload_3[1583 : 1568];
      7'b1100011 : t_serialOut_payload_4 = t_serialOut_payload_3[1599 : 1584];
      7'b1100100 : t_serialOut_payload_4 = t_serialOut_payload_3[1615 : 1600];
      7'b1100101 : t_serialOut_payload_4 = t_serialOut_payload_3[1631 : 1616];
      7'b1100110 : t_serialOut_payload_4 = t_serialOut_payload_3[1647 : 1632];
      7'b1100111 : t_serialOut_payload_4 = t_serialOut_payload_3[1663 : 1648];
      7'b1101000 : t_serialOut_payload_4 = t_serialOut_payload_3[1679 : 1664];
      7'b1101001 : t_serialOut_payload_4 = t_serialOut_payload_3[1695 : 1680];
      7'b1101010 : t_serialOut_payload_4 = t_serialOut_payload_3[1711 : 1696];
      7'b1101011 : t_serialOut_payload_4 = t_serialOut_payload_3[1727 : 1712];
      7'b1101100 : t_serialOut_payload_4 = t_serialOut_payload_3[1743 : 1728];
      7'b1101101 : t_serialOut_payload_4 = t_serialOut_payload_3[1759 : 1744];
      7'b1101110 : t_serialOut_payload_4 = t_serialOut_payload_3[1775 : 1760];
      7'b1101111 : t_serialOut_payload_4 = t_serialOut_payload_3[1791 : 1776];
      7'b1110000 : t_serialOut_payload_4 = t_serialOut_payload_3[1807 : 1792];
      7'b1110001 : t_serialOut_payload_4 = t_serialOut_payload_3[1823 : 1808];
      7'b1110010 : t_serialOut_payload_4 = t_serialOut_payload_3[1839 : 1824];
      7'b1110011 : t_serialOut_payload_4 = t_serialOut_payload_3[1855 : 1840];
      7'b1110100 : t_serialOut_payload_4 = t_serialOut_payload_3[1871 : 1856];
      7'b1110101 : t_serialOut_payload_4 = t_serialOut_payload_3[1887 : 1872];
      7'b1110110 : t_serialOut_payload_4 = t_serialOut_payload_3[1903 : 1888];
      7'b1110111 : t_serialOut_payload_4 = t_serialOut_payload_3[1919 : 1904];
      7'b1111000 : t_serialOut_payload_4 = t_serialOut_payload_3[1935 : 1920];
      7'b1111001 : t_serialOut_payload_4 = t_serialOut_payload_3[1951 : 1936];
      7'b1111010 : t_serialOut_payload_4 = t_serialOut_payload_3[1967 : 1952];
      7'b1111011 : t_serialOut_payload_4 = t_serialOut_payload_3[1983 : 1968];
      7'b1111100 : t_serialOut_payload_4 = t_serialOut_payload_3[1999 : 1984];
      7'b1111101 : t_serialOut_payload_4 = t_serialOut_payload_3[2015 : 2000];
      7'b1111110 : t_serialOut_payload_4 = t_serialOut_payload_3[2031 : 2016];
      default : t_serialOut_payload_4 = t_serialOut_payload_3[2047 : 2032];
    endcase
  end

  assign cntAbout2Ovf = (cnt == 8'h7e);
  assign adaptedSerial_valid = (serialIn_valid && cntOvfReg);
  assign t_adaptedSerial_payload = serialIn_payload;
  assign adaptedSerial_payload = {t_adaptedSerial_payload,{t_adaptedSerial_payload_1,{t_adaptedSerial_payload_2,{t_adaptedSerial_payload_3,{t_adaptedSerial_payload_4,{t_adaptedSerial_payload_5,{t_adaptedSerial_payload_6,{t_adaptedSerial_payload_7,{t_adaptedSerial_payload_8,{t_adaptedSerial_payload_9,{t_adaptedSerial_payload_10,{t_adaptedSerial_payload_11,{t_adaptedSerial_payload_12,{t_adaptedSerial_payload_13,{t_adaptedSerial_payload_14,{t_adaptedSerial_payload_15,t_adaptedSerial_payload_128}}}}}}}}}}}}}}}};
  assign resBuf_io_push_valid = (inMuxSel ? adaptedSerial_valid : parallelIn_valid);
  assign resBuf_io_push_payload = (inMuxSel ? adaptedSerial_payload : parallelIn_payload);
  assign deMux_io_select = outMuxSel;
  assign serialOut_fire = (serialOut_valid && serialOut_ready);
  always @(*) begin
    t_serialOut_payload = 1'b0;
    if(serialOut_fire) begin
      t_serialOut_payload = 1'b1;
    end
  end

  assign t_io_outputs_0_ready = (t_serialOut_payload_2 == 7'h7f);
  always @(*) begin
    t_serialOut_payload_1 = (t_serialOut_payload_2 + t_t_serialOut_payload_1);
    if(1'b0) begin
      t_serialOut_payload_1 = 7'h0;
    end
  end

  assign serialOut_valid = deMux_io_outputs_0_valid;
  assign t_serialOut_payload_3 = deMux_io_outputs_0_payload;
  assign serialOut_payload = t_serialOut_payload_4;
  assign deMux_io_outputs_0_ready = (serialOut_ready && t_io_outputs_0_ready);
  assign parallelOut_valid = deMux_io_outputs_1_valid;
  assign parallelOut_payload = deMux_io_outputs_1_payload;
  assign serialOut_tvalid = serialOut_valid;
  assign serialOut_ready = serialOut_tready;
  assign serialOut_tdata = serialOut_payload;
  assign parallelOut_tvalid = parallelOut_valid;
  assign parallelOut_ready = parallelOut_tready;
  assign parallelOut_tdata = parallelOut_payload;
  assign bufInCntOvf = (bufInCnt == 4'b1111);
  assign resBuf_resBuf_io_push_fire = (resBuf_io_push_valid && resBuf_io_push_ready);
  assign bufOutCntOvf = (bufOutCnt == 4'b1111);
  assign resBuf_resBuf_io_pop_fire = (resBuf_io_pop_valid && deMux_io_input_ready);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      serialIn_valid <= 1'b0;
      parallelIn_valid <= 1'b0;
      inMuxSel <= 1'b0;
      outMuxSel <= 1'b0;
      cnt <= 8'h0;
      cntOvfReg <= 1'b0;
      t_serialOut_payload_2 <= 7'h0;
      bufInCnt <= 4'b0000;
      bufOutCnt <= 4'b0000;
    end else begin
      serialIn_valid <= serialIn_tvalid;
      parallelIn_valid <= parallelIn_tvalid;
      if(serialIn_valid) begin
        cnt <= (cnt + 8'h01);
        if(cntAbout2Ovf) begin
          cntOvfReg <= 1'b1;
        end
        if(cntOvfReg) begin
          cnt <= 8'h0;
          cntOvfReg <= 1'b0;
        end
      end
      t_serialOut_payload_2 <= t_serialOut_payload_1;
      if(resBuf_resBuf_io_push_fire) begin
        bufInCnt <= (bufInCnt + 4'b0001);
        if(bufInCntOvf) begin
          bufInCnt <= 4'b0000;
          inMuxSel <= (! inMuxSel);
        end
      end
      if(resBuf_resBuf_io_pop_fire) begin
        bufOutCnt <= (bufOutCnt + 4'b0001);
        if(bufOutCntOvf) begin
          bufOutCnt <= 4'b0000;
          outMuxSel <= (! outMuxSel);
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    serialIn_payload <= serialIn_tdata;
    parallelIn_payload <= parallelIn_tdata;
    if(serialIn_valid) begin
      t_adaptedSerial_payload_1 <= t_adaptedSerial_payload;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_2 <= t_adaptedSerial_payload_1;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_3 <= t_adaptedSerial_payload_2;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_4 <= t_adaptedSerial_payload_3;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_5 <= t_adaptedSerial_payload_4;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_6 <= t_adaptedSerial_payload_5;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_7 <= t_adaptedSerial_payload_6;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_8 <= t_adaptedSerial_payload_7;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_9 <= t_adaptedSerial_payload_8;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_10 <= t_adaptedSerial_payload_9;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_11 <= t_adaptedSerial_payload_10;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_12 <= t_adaptedSerial_payload_11;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_13 <= t_adaptedSerial_payload_12;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_14 <= t_adaptedSerial_payload_13;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_15 <= t_adaptedSerial_payload_14;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_16 <= t_adaptedSerial_payload_15;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_17 <= t_adaptedSerial_payload_16;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_18 <= t_adaptedSerial_payload_17;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_19 <= t_adaptedSerial_payload_18;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_20 <= t_adaptedSerial_payload_19;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_21 <= t_adaptedSerial_payload_20;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_22 <= t_adaptedSerial_payload_21;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_23 <= t_adaptedSerial_payload_22;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_24 <= t_adaptedSerial_payload_23;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_25 <= t_adaptedSerial_payload_24;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_26 <= t_adaptedSerial_payload_25;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_27 <= t_adaptedSerial_payload_26;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_28 <= t_adaptedSerial_payload_27;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_29 <= t_adaptedSerial_payload_28;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_30 <= t_adaptedSerial_payload_29;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_31 <= t_adaptedSerial_payload_30;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_32 <= t_adaptedSerial_payload_31;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_33 <= t_adaptedSerial_payload_32;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_34 <= t_adaptedSerial_payload_33;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_35 <= t_adaptedSerial_payload_34;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_36 <= t_adaptedSerial_payload_35;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_37 <= t_adaptedSerial_payload_36;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_38 <= t_adaptedSerial_payload_37;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_39 <= t_adaptedSerial_payload_38;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_40 <= t_adaptedSerial_payload_39;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_41 <= t_adaptedSerial_payload_40;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_42 <= t_adaptedSerial_payload_41;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_43 <= t_adaptedSerial_payload_42;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_44 <= t_adaptedSerial_payload_43;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_45 <= t_adaptedSerial_payload_44;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_46 <= t_adaptedSerial_payload_45;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_47 <= t_adaptedSerial_payload_46;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_48 <= t_adaptedSerial_payload_47;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_49 <= t_adaptedSerial_payload_48;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_50 <= t_adaptedSerial_payload_49;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_51 <= t_adaptedSerial_payload_50;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_52 <= t_adaptedSerial_payload_51;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_53 <= t_adaptedSerial_payload_52;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_54 <= t_adaptedSerial_payload_53;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_55 <= t_adaptedSerial_payload_54;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_56 <= t_adaptedSerial_payload_55;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_57 <= t_adaptedSerial_payload_56;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_58 <= t_adaptedSerial_payload_57;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_59 <= t_adaptedSerial_payload_58;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_60 <= t_adaptedSerial_payload_59;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_61 <= t_adaptedSerial_payload_60;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_62 <= t_adaptedSerial_payload_61;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_63 <= t_adaptedSerial_payload_62;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_64 <= t_adaptedSerial_payload_63;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_65 <= t_adaptedSerial_payload_64;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_66 <= t_adaptedSerial_payload_65;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_67 <= t_adaptedSerial_payload_66;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_68 <= t_adaptedSerial_payload_67;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_69 <= t_adaptedSerial_payload_68;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_70 <= t_adaptedSerial_payload_69;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_71 <= t_adaptedSerial_payload_70;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_72 <= t_adaptedSerial_payload_71;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_73 <= t_adaptedSerial_payload_72;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_74 <= t_adaptedSerial_payload_73;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_75 <= t_adaptedSerial_payload_74;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_76 <= t_adaptedSerial_payload_75;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_77 <= t_adaptedSerial_payload_76;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_78 <= t_adaptedSerial_payload_77;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_79 <= t_adaptedSerial_payload_78;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_80 <= t_adaptedSerial_payload_79;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_81 <= t_adaptedSerial_payload_80;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_82 <= t_adaptedSerial_payload_81;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_83 <= t_adaptedSerial_payload_82;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_84 <= t_adaptedSerial_payload_83;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_85 <= t_adaptedSerial_payload_84;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_86 <= t_adaptedSerial_payload_85;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_87 <= t_adaptedSerial_payload_86;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_88 <= t_adaptedSerial_payload_87;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_89 <= t_adaptedSerial_payload_88;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_90 <= t_adaptedSerial_payload_89;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_91 <= t_adaptedSerial_payload_90;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_92 <= t_adaptedSerial_payload_91;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_93 <= t_adaptedSerial_payload_92;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_94 <= t_adaptedSerial_payload_93;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_95 <= t_adaptedSerial_payload_94;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_96 <= t_adaptedSerial_payload_95;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_97 <= t_adaptedSerial_payload_96;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_98 <= t_adaptedSerial_payload_97;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_99 <= t_adaptedSerial_payload_98;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_100 <= t_adaptedSerial_payload_99;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_101 <= t_adaptedSerial_payload_100;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_102 <= t_adaptedSerial_payload_101;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_103 <= t_adaptedSerial_payload_102;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_104 <= t_adaptedSerial_payload_103;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_105 <= t_adaptedSerial_payload_104;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_106 <= t_adaptedSerial_payload_105;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_107 <= t_adaptedSerial_payload_106;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_108 <= t_adaptedSerial_payload_107;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_109 <= t_adaptedSerial_payload_108;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_110 <= t_adaptedSerial_payload_109;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_111 <= t_adaptedSerial_payload_110;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_112 <= t_adaptedSerial_payload_111;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_113 <= t_adaptedSerial_payload_112;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_114 <= t_adaptedSerial_payload_113;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_115 <= t_adaptedSerial_payload_114;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_116 <= t_adaptedSerial_payload_115;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_117 <= t_adaptedSerial_payload_116;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_118 <= t_adaptedSerial_payload_117;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_119 <= t_adaptedSerial_payload_118;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_120 <= t_adaptedSerial_payload_119;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_121 <= t_adaptedSerial_payload_120;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_122 <= t_adaptedSerial_payload_121;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_123 <= t_adaptedSerial_payload_122;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_124 <= t_adaptedSerial_payload_123;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_125 <= t_adaptedSerial_payload_124;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_126 <= t_adaptedSerial_payload_125;
    end
    if(serialIn_valid) begin
      t_adaptedSerial_payload_127 <= t_adaptedSerial_payload_126;
    end
  end


endmodule

module VecOutSubMod_1 (
  input  wire          io_lnOut_valid,
  input  wire [15:0]   io_lnOut_tdata,
  input  wire [5:0]    io_lnOut_tuser,
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  input  wire          io_ropeOut_valid,
  input  wire [15:0]   io_ropeOut_tdata,
  input  wire [5:0]    io_ropeOut_tuser,
  input  wire          io_busVecIn_valid,
  input  wire [2047:0] io_busVecIn_tdata,
  input  wire [5:0]    io_busVecIn_tuser,
  input  wire          io_engineVecIn_valid,
  input  wire [2047:0] io_engineVecIn_tdata,
  input  wire [5:0]    io_engineVecIn_tuser,
  output wire          io_vLocal_valid,
  output wire [2047:0] io_vLocal_tdata,
  output wire [5:0]    io_vLocal_tuser,
  output wire          io_vecOut_valid,
  input  wire          io_vecOut_ready,
  output wire [2047:0] io_vecOut_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                prefillIn_fifo_io_pop_ready;
  wire                vecBuf_io_output_valid;
  wire       [2047:0] vecBuf_io_output_payload;
  wire                prefillIn_fifo_io_push_ready;
  wire                prefillIn_fifo_io_pop_valid;
  wire                prefillIn_fifo_io_pop_payload;
  wire       [6:0]    prefillIn_fifo_io_occupancy;
  wire       [6:0]    prefillIn_fifo_io_availability;
  wire                ropeOut_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   ropeOut_mul_ip_m_axis_result_tdata;
  wire                s2p_output_tvalid;
  wire       [2047:0] s2p_output_tdata;
  wire       [5:0]    s2p_output_tuser;
  reg        [15:0]   t_s2pInMux_tdata_1;
  reg        [5:0]    t_s2pInMux_tuser;
  reg        [2047:0] t_toBuf_tdata_1;
  reg        [5:0]    t_toBuf_tuser;
  wire                cond;
  wire                lnOut_valid;
  wire       [15:0]   lnOut_tdata;
  wire       [5:0]    lnOut_tuser;
  wire                dotOutPre_valid;
  wire       [15:0]   dotOutPre_tdata;
  wire       [5:0]    dotOutPre_tuser;
  wire                dotOut_valid;
  wire       [15:0]   dotOut_tdata;
  wire       [5:0]    dotOut_tuser;
  wire                ropeOut_valid;
  wire       [15:0]   ropeOut_payload;
  wire                prefillIn_valid;
  wire                prefillIn_ready;
  wire                prefillIn_payload;
  reg        [4:0]    layerCnt;
  reg                 lastLayer;
  wire                layerCntAbout2Ovf;
  wire                enLayerCntInc;
  reg        [10:0]   vCnt;
  wire                vCntOvf;
  wire                vCntVld;
  wire                sqrtD_valid;
  wire       [15:0]   sqrtD_payload;
  wire                rope2s2p_valid;
  wire       [15:0]   rope2s2p_tdata;
  wire       [5:0]    rope2s2p_tuser;
  wire                s2pInMux_valid;
  wire       [15:0]   s2pInMux_tdata;
  wire       [5:0]    s2pInMux_tuser;
  wire                s2pInErr;
  wire       [1:0]    t_s2pInMux_tdata;
  reg                 s2pIn_valid;
  reg        [15:0]   s2pIn_tdata;
  reg        [5:0]    s2pIn_tuser;
  wire                vLocalStream_valid;
  wire                vLocalStream_ready;
  wire       [2047:0] vLocalStream_tdata;
  wire       [5:0]    vLocalStream_tuser;
  wire                vLocal_valid;
  wire       [2047:0] vLocal_tdata;
  wire       [5:0]    vLocal_tuser;
  reg                 s2pToFifo_valid;
  reg        [2047:0] s2pToFifo_tdata;
  reg        [5:0]    s2pToFifo_tuser;
  wire                busVecInToFifo_valid;
  wire       [2047:0] busVecInToFifo_tdata;
  wire       [5:0]    busVecInToFifo_tuser;
  reg                 engineVecInToFifo_valid;
  reg        [2047:0] engineVecInToFifo_tdata;
  reg        [5:0]    engineVecInToFifo_tuser;
  wire                toBuf_valid;
  wire       [2047:0] toBuf_tdata;
  wire       [5:0]    toBuf_tuser;
  wire                toBufErr;
  wire       [1:0]    t_toBuf_tdata;
  reg                 toBuf_regNext_valid;
  reg        [2047:0] toBuf_regNext_tdata;
  reg        [5:0]    toBuf_regNext_tuser;

  VecOutBuf_1 vecBuf (
    .io_input_valid                (toBuf_regNext_valid               ), //i
    .io_input_tdata                (toBuf_regNext_tdata[2047:0]       ), //i
    .io_input_tuser                (toBuf_regNext_tuser[5:0]          ), //i
    .io_output_valid               (vecBuf_io_output_valid            ), //o
    .io_output_ready               (io_vecOut_ready                   ), //i
    .io_output_payload             (vecBuf_io_output_payload[2047:0]  ), //o
    .status_tokenIndexFlow_valid   (status_tokenIndexFlow_valid       ), //i
    .status_tokenIndexFlow_payload (status_tokenIndexFlow_payload[5:0]), //i
    .status_enPredictor            (status_enPredictor                ), //i
    .clk_0_clk                     (clk_0_clk                         ), //i
    .clk_0_resetn                  (clk_0_resetn                      )  //i
  );
  StreamFifo_103 prefillIn_fifo (
    .io_push_valid   (prefillIn_valid                    ), //i
    .io_push_ready   (prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (prefillIn_payload                  ), //i
    .io_pop_valid    (prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                          ), //i
    .clk_0_resetn    (clk_0_resetn                       )  //i
  );
  fp16mul6 ropeOut_mul_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (ropeOut_valid                           ), //i
    .s_axis_a_tdata       (ropeOut_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (sqrtD_valid                             ), //i
    .s_axis_b_tdata       (sqrtD_payload[15:0]                     ), //i
    .m_axis_result_tvalid (ropeOut_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (ropeOut_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  Serial2Parallel_2 s2p (
    .input_valid   (s2pIn_valid             ), //i
    .input_tdata   (s2pIn_tdata[15:0]       ), //i
    .input_tuser   (s2pIn_tuser[5:0]        ), //i
    .output_tvalid (s2p_output_tvalid       ), //o
    .output_tdata  (s2p_output_tdata[2047:0]), //o
    .output_tuser  (s2p_output_tuser[5:0]   ), //o
    .clk_0_clk     (clk_0_clk               ), //i
    .clk_0_resetn  (clk_0_resetn            )  //i
  );
  always @(*) begin
    case(t_s2pInMux_tdata)
      2'b00 : begin
        t_s2pInMux_tdata_1 = lnOut_tdata;
        t_s2pInMux_tuser = lnOut_tuser;
      end
      2'b01 : begin
        t_s2pInMux_tdata_1 = dotOut_tdata;
        t_s2pInMux_tuser = dotOut_tuser;
      end
      default : begin
        t_s2pInMux_tdata_1 = rope2s2p_tdata;
        t_s2pInMux_tuser = rope2s2p_tuser;
      end
    endcase
  end

  always @(*) begin
    case(t_toBuf_tdata)
      2'b00 : begin
        t_toBuf_tdata_1 = s2pToFifo_tdata;
        t_toBuf_tuser = s2pToFifo_tuser;
      end
      2'b01 : begin
        t_toBuf_tdata_1 = busVecInToFifo_tdata;
        t_toBuf_tuser = busVecInToFifo_tuser;
      end
      default : begin
        t_toBuf_tdata_1 = engineVecInToFifo_tdata;
        t_toBuf_tuser = engineVecInToFifo_tuser;
      end
    endcase
  end

  assign lnOut_valid = (io_lnOut_valid && (((io_lnOut_tuser == 6'h15) || (io_lnOut_tuser == 6'h22)) || (io_lnOut_tuser == 6'h04)));
  assign lnOut_tdata = io_lnOut_tdata;
  assign lnOut_tuser = io_lnOut_tuser;
  assign dotOutPre_valid = (io_dotOut_valid && ((io_dotOut_tuser == 6'h07) || (io_dotOut_tuser == 6'h13)));
  assign dotOutPre_tdata = io_dotOut_tdata;
  assign dotOutPre_tuser = io_dotOut_tuser;
  assign dotOut_valid = (dotOutPre_valid && (! cond));
  assign dotOut_tdata = dotOutPre_tdata;
  assign dotOut_tuser = dotOutPre_tuser;
  assign ropeOut_valid = (io_ropeOut_valid && (io_ropeOut_tuser == 6'h08));
  assign ropeOut_payload = io_ropeOut_tdata;
  assign prefillIn_valid = status_tokenIndexFlow_valid;
  assign prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign prefillIn_ready = prefillIn_fifo_io_push_ready;
  assign layerCntAbout2Ovf = (layerCnt == 5'h1e);
  assign vCntOvf = (vCnt == 11'h7ff);
  assign vCntVld = dotOutPre_valid;
  assign enLayerCntInc = (vCntVld && vCntOvf);
  assign prefillIn_fifo_io_pop_ready = (enLayerCntInc && lastLayer);
  assign cond = (prefillIn_fifo_io_pop_payload && lastLayer);
  assign sqrtD_payload = 16'h2da8;
  assign sqrtD_valid = 1'b1;
  assign rope2s2p_valid = ropeOut_mul_ip_m_axis_result_tvalid;
  assign rope2s2p_tdata = ropeOut_mul_ip_m_axis_result_tdata;
  assign rope2s2p_tuser = 6'h08;
  assign s2pInErr = 1'b0;
  assign s2pInMux_valid = (|{rope2s2p_valid,{dotOut_valid,lnOut_valid}});
  assign t_s2pInMux_tdata = {rope2s2p_valid,dotOut_valid};
  assign s2pInMux_tdata = t_s2pInMux_tdata_1;
  assign s2pInMux_tuser = t_s2pInMux_tuser;
  assign vLocal_valid = (s2p_output_tvalid && (s2p_output_tuser == 6'h07));
  assign vLocal_tdata = s2p_output_tdata;
  assign vLocal_tuser = s2p_output_tuser;
  assign io_vLocal_valid = vLocal_valid;
  assign io_vLocal_tdata = vLocal_tdata;
  assign io_vLocal_tuser = vLocal_tuser;
  assign busVecInToFifo_valid = (io_busVecIn_valid && ((((io_busVecIn_tuser == 6'h1f) || (io_busVecIn_tuser == 6'h0)) || (io_busVecIn_tuser == 6'h01)) || (io_busVecIn_tuser == 6'h02)));
  assign busVecInToFifo_tdata = io_busVecIn_tdata;
  assign busVecInToFifo_tuser = io_busVecIn_tuser;
  assign toBufErr = 1'b0;
  assign toBuf_valid = (|{engineVecInToFifo_valid,{busVecInToFifo_valid,s2pToFifo_valid}});
  assign t_toBuf_tdata = {engineVecInToFifo_valid,busVecInToFifo_valid};
  assign toBuf_tdata = t_toBuf_tdata_1;
  assign toBuf_tuser = t_toBuf_tuser;
  assign io_vecOut_valid = vecBuf_io_output_valid;
  assign io_vecOut_payload = vecBuf_io_output_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      layerCnt <= 5'h0;
      lastLayer <= 1'b0;
      vCnt <= 11'h0;
      s2pIn_valid <= 1'b0;
      s2pToFifo_valid <= 1'b0;
      engineVecInToFifo_valid <= 1'b0;
      toBuf_regNext_valid <= 1'b0;
    end else begin
      if(enLayerCntInc) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntAbout2Ovf) begin
          lastLayer <= 1'b1;
        end
        if(lastLayer) begin
          layerCnt <= 5'h0;
          lastLayer <= 1'b0;
        end
      end
      if(vCntVld) begin
        vCnt <= (vCnt + 11'h001);
        if(vCntOvf) begin
          vCnt <= 11'h0;
        end
      end
      s2pIn_valid <= s2pInMux_valid;
      s2pToFifo_valid <= (s2p_output_tvalid && (((((s2p_output_tuser == 6'h04) || (s2p_output_tuser == 6'h15)) || (s2p_output_tuser == 6'h22)) || (s2p_output_tuser == 6'h08)) || (s2p_output_tuser == 6'h13)));
      engineVecInToFifo_valid <= (io_engineVecIn_valid && (io_engineVecIn_tuser == 6'h0f));
      toBuf_regNext_valid <= toBuf_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    s2pIn_tdata <= s2pInMux_tdata;
    s2pIn_tuser <= s2pInMux_tuser;
    s2pToFifo_tdata <= s2p_output_tdata;
    s2pToFifo_tuser <= s2p_output_tuser;
    engineVecInToFifo_tdata <= io_engineVecIn_tdata;
    engineVecInToFifo_tuser <= io_engineVecIn_tuser;
    toBuf_regNext_tdata <= toBuf_tdata;
    toBuf_regNext_tuser <= toBuf_tuser;
  end


endmodule

module BusInSubModNew_1 (
  input  wire          io_bus_valid,
  output reg           io_bus_ready,
  input  wire          io_bus_payload_last,
  input  wire [511:0]  io_bus_payload_tdata,
  input  wire [5:0]    io_bus_payload_tuser,
  input  wire          io_vecIn_valid,
  input  wire [2047:0] io_vecIn_tdata,
  input  wire [5:0]    io_vecIn_tuser,
  input  wire          io_vLocal_valid,
  input  wire [2047:0] io_vLocal_tdata,
  input  wire [5:0]    io_vLocal_tuser,
  input  wire          io_zeroInt4_valid,
  output wire          io_zeroInt4_ready,
  input  wire [7:0]    io_zeroInt4_payload,
  input  wire          io_zeroInt8_valid,
  output wire          io_zeroInt8_ready,
  input  wire [7:0]    io_zeroInt8_payload,
  output wire          io_wkv_valid,
  input  wire          io_wkv_ready,
  output wire [2047:0] io_wkv_payload,
  output wire          io_p2sOut_valid,
  output wire          io_p2sOut_payload_last,
  output wire [15:0]   io_p2sOut_payload_tdata,
  output wire [5:0]    io_p2sOut_payload_tuser,
  output wire          io_toResBuf_valid,
  output wire [2047:0] io_toResBuf_payload,
  output wire          io_directOut_valid,
  output wire [2047:0] io_directOut_tdata,
  output wire [5:0]    io_directOut_tuser,
  input  wire          status_tokenNextHit,
  input  wire          status_mlpNextHit,
  input  wire          status_vNextHit,
  input  wire          status_flushRes,
  input  wire          status_logitsGen,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                s2p_input_valid;
  wire                conv_inputData_tvalid;
  wire                s2p_output_tvalid;
  wire       [2047:0] s2p_output_tdata;
  wire       [5:0]    s2p_output_tuser;
  wire                conv_zeroInt4_tready;
  wire                conv_zeroInt8_tready;
  wire                conv_output_tvalid;
  wire       [2047:0] conv_output_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [2047:0] fifo_io_pop_payload;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire                p2sBuf_io_input_ready;
  wire                p2sBuf_io_output_valid;
  wire       [2047:0] p2sBuf_io_output_tdata;
  wire       [5:0]    p2sBuf_io_output_tuser;
  wire                p2s_io_input_ready;
  wire                p2s_io_output_valid;
  wire       [15:0]   p2s_io_output_tdata;
  wire       [5:0]    p2s_io_output_tuser;
  reg                 t_pushVld;
  reg        [255:0]  t_toFifo_0;
  reg        [255:0]  t_toFifo_1;
  reg        [255:0]  t_toFifo_2;
  reg        [255:0]  t_toFifo_3;
  reg        [255:0]  t_toFifo_4;
  reg        [255:0]  t_toFifo_5;
  reg        [255:0]  t_toFifo_6;
  reg        [255:0]  t_toFifo_7;
  wire                kvHit;
  wire                wkvFire;
  reg                 selExtTokenSqr;
  (* max_fanout = 100 *) reg                 selVLocal;
  wire                en;
  wire                vLocalVec_0_valid;
  reg                 vLocalVec_0_ready;
  wire       [255:0]  vLocalVec_0_payload;
  wire                vLocalVec_1_valid;
  reg                 vLocalVec_1_ready;
  wire       [255:0]  vLocalVec_1_payload;
  wire                vLocalVec_2_valid;
  reg                 vLocalVec_2_ready;
  wire       [255:0]  vLocalVec_2_payload;
  wire                vLocalVec_3_valid;
  reg                 vLocalVec_3_ready;
  wire       [255:0]  vLocalVec_3_payload;
  wire                vLocalVec_4_valid;
  reg                 vLocalVec_4_ready;
  wire       [255:0]  vLocalVec_4_payload;
  wire                vLocalVec_5_valid;
  reg                 vLocalVec_5_ready;
  wire       [255:0]  vLocalVec_5_payload;
  wire                vLocalVec_6_valid;
  reg                 vLocalVec_6_ready;
  wire       [255:0]  vLocalVec_6_payload;
  wire                vLocalVec_7_valid;
  reg                 vLocalVec_7_ready;
  wire       [255:0]  vLocalVec_7_payload;
  wire       [255:0]  vLocalPayload_0;
  wire       [255:0]  vLocalPayload_1;
  wire       [255:0]  vLocalPayload_2;
  wire       [255:0]  vLocalPayload_3;
  wire       [255:0]  vLocalPayload_4;
  wire       [255:0]  vLocalPayload_5;
  wire       [255:0]  vLocalPayload_6;
  wire       [255:0]  vLocalPayload_7;
  (* keep = "true" *) wire                vLocalLockVec_0_valid;
  wire                vLocalLockVec_0_ready;
  wire       [255:0]  vLocalLockVec_0_payload;
  reg                 vLocalVec_0_rValid;
  reg        [255:0]  vLocalVec_0_rData;
  (* keep = "true" *) wire                vLocalLockVec_1_valid;
  wire                vLocalLockVec_1_ready;
  wire       [255:0]  vLocalLockVec_1_payload;
  reg                 vLocalVec_1_rValid;
  reg        [255:0]  vLocalVec_1_rData;
  (* keep = "true" *) wire                vLocalLockVec_2_valid;
  wire                vLocalLockVec_2_ready;
  wire       [255:0]  vLocalLockVec_2_payload;
  reg                 vLocalVec_2_rValid;
  reg        [255:0]  vLocalVec_2_rData;
  (* keep = "true" *) wire                vLocalLockVec_3_valid;
  wire                vLocalLockVec_3_ready;
  wire       [255:0]  vLocalLockVec_3_payload;
  reg                 vLocalVec_3_rValid;
  reg        [255:0]  vLocalVec_3_rData;
  (* keep = "true" *) wire                vLocalLockVec_4_valid;
  wire                vLocalLockVec_4_ready;
  wire       [255:0]  vLocalLockVec_4_payload;
  reg                 vLocalVec_4_rValid;
  reg        [255:0]  vLocalVec_4_rData;
  (* keep = "true" *) wire                vLocalLockVec_5_valid;
  wire                vLocalLockVec_5_ready;
  wire       [255:0]  vLocalLockVec_5_payload;
  reg                 vLocalVec_5_rValid;
  reg        [255:0]  vLocalVec_5_rData;
  (* keep = "true" *) wire                vLocalLockVec_6_valid;
  wire                vLocalLockVec_6_ready;
  wire       [255:0]  vLocalLockVec_6_payload;
  reg                 vLocalVec_6_rValid;
  reg        [255:0]  vLocalVec_6_rData;
  (* keep = "true" *) wire                vLocalLockVec_7_valid;
  wire                vLocalLockVec_7_ready;
  wire       [255:0]  vLocalLockVec_7_payload;
  reg                 vLocalVec_7_rValid;
  reg        [255:0]  vLocalVec_7_rData;
  (* keep = "true" *) reg                 selVLocalVec_0;
  (* keep = "true" *) reg                 selVLocalVec_1;
  (* keep = "true" *) reg                 selVLocalVec_2;
  (* keep = "true" *) reg                 selVLocalVec_3;
  (* keep = "true" *) reg                 selVLocalVec_4;
  (* keep = "true" *) reg                 selVLocalVec_5;
  (* keep = "true" *) reg                 selVLocalVec_6;
  (* keep = "true" *) reg                 selVLocalVec_7;
  wire                vLocal_valid;
  reg                 vLocal_ready;
  (* max_fanout = 100 *) wire                vLocalLock_valid;
  wire                vLocalLock_ready;
  reg                 vLocal_rValid;
  reg        [0:0]    select_1;
  reg        [0:0]    select_1_delay_1;
  reg        [0:0]    select_1_delay_2;
  reg        [0:0]    select_1_delay_3;
  reg        [0:0]    selectPreDly;
  reg        [0:0]    selectDly;
  wire                pushVld;
  wire       [255:0]  convOutSlice_0;
  wire       [255:0]  convOutSlice_1;
  wire       [255:0]  convOutSlice_2;
  wire       [255:0]  convOutSlice_3;
  wire       [255:0]  convOutSlice_4;
  wire       [255:0]  convOutSlice_5;
  wire       [255:0]  convOutSlice_6;
  wire       [255:0]  convOutSlice_7;
  (* keep = "true" *) reg        [0:0]    selectCopy_0;
  (* keep = "true" *) reg        [0:0]    selectCopy_1;
  (* keep = "true" *) reg        [0:0]    selectCopy_2;
  (* keep = "true" *) reg        [0:0]    selectCopy_3;
  (* keep = "true" *) reg        [0:0]    selectCopy_4;
  (* keep = "true" *) reg        [0:0]    selectCopy_5;
  (* keep = "true" *) reg        [0:0]    selectCopy_6;
  (* keep = "true" *) reg        [0:0]    selectCopy_7;
  wire       [255:0]  toFifo_0;
  wire       [255:0]  toFifo_1;
  wire       [255:0]  toFifo_2;
  wire       [255:0]  toFifo_3;
  wire       [255:0]  toFifo_4;
  wire       [255:0]  toFifo_5;
  wire       [255:0]  toFifo_6;
  wire       [255:0]  toFifo_7;
  wire       [2047:0] pushPayload;
  reg                 pushVld_regNext;
  reg        [2047:0] pushPayload_regNext;
  reg                 ready;
  reg                 muxOut_valid;
  reg        [2047:0] muxOut_tdata;
  reg        [5:0]    muxOut_tuser;
  wire                muxOutFlow_valid;
  wire       [5:0]    muxOutFlow_tuser;
  wire                toResFlow_valid;
  wire                p2sInFlow_valid;
  wire       [5:0]    p2sInFlow_tuser;
  reg        [2047:0] payloadDly;
  reg        [5:0]    tagDly;
  reg                 selPrefillSqrDly;
  reg        [3:0]    tensorCnt;
  wire                tensorOvf;
  reg        [4:0]    layerCnt;
  reg        [4:0]    layerBound;
  wire                layerOvf;
  wire                prefillLayerCond;
  reg                 p2sInFlow_valid_regNext;
  reg                 t_io_toResBuf_valid;
  reg        [3:0]    vecInCnt;
  wire                vecInCntOvf;
  (* max_fanout = 100 *) reg                 directOutVld;
  reg        [10:0]   p2sOutCnt;
  wire                p2sOutCntOvf;
  wire                p2sOut_valid;
  wire                p2sOut_payload_last;
  wire       [15:0]   p2sOut_payload_tdata;
  wire       [5:0]    p2sOut_payload_tuser;
  reg                 p2sOut_regNext_valid;
  reg                 p2sOut_regNext_payload_last;
  reg        [15:0]   p2sOut_regNext_payload_tdata;
  reg        [5:0]    p2sOut_regNext_payload_tuser;

  Serial2Parallel_3 s2p (
    .input_valid   (s2p_input_valid            ), //i
    .input_tdata   (io_bus_payload_tdata[511:0]), //i
    .input_tuser   (io_bus_payload_tuser[5:0]  ), //i
    .output_tvalid (s2p_output_tvalid          ), //o
    .output_tdata  (s2p_output_tdata[2047:0]   ), //o
    .output_tuser  (s2p_output_tuser[5:0]      ), //o
    .clk_0_clk     (clk_0_clk                  ), //i
    .clk_0_resetn  (clk_0_resetn               )  //i
  );
  Int4Int8FP16Conv_1 conv (
    .selInt8          (kvHit                      ), //i
    .inputData_tvalid (conv_inputData_tvalid      ), //i
    .inputData_tdata  (io_bus_payload_tdata[511:0]), //i
    .zeroInt4_tvalid  (io_zeroInt4_valid          ), //i
    .zeroInt4_tready  (conv_zeroInt4_tready       ), //o
    .zeroInt4_tdata   (io_zeroInt4_payload[7:0]   ), //i
    .zeroInt8_tvalid  (io_zeroInt8_valid          ), //i
    .zeroInt8_tready  (conv_zeroInt8_tready       ), //o
    .zeroInt8_tdata   (io_zeroInt8_payload[7:0]   ), //i
    .output_tvalid    (conv_output_tvalid         ), //o
    .output_tdata     (conv_output_tdata[2047:0]  ), //o
    .clk_0_clk        (clk_0_clk                  ), //i
    .clk_0_resetn     (clk_0_resetn               )  //i
  );
  LargeBankFifo_11 fifo (
    .io_push_valid   (pushVld_regNext            ), //i
    .io_push_ready   (fifo_io_push_ready         ), //o
    .io_push_payload (pushPayload_regNext[2047:0]), //i
    .io_pop_valid    (fifo_io_pop_valid          ), //o
    .io_pop_ready    (io_wkv_ready               ), //i
    .io_pop_payload  (fifo_io_pop_payload[2047:0]), //o
    .io_occupancy    (fifo_io_occupancy[5:0]     ), //o
    .io_availability (fifo_io_availability[5:0]  ), //o
    .clk_0_clk       (clk_0_clk                  ), //i
    .clk_0_resetn    (clk_0_resetn               )  //i
  );
  StreamAxiFrameFifo_1 p2sBuf (
    .io_input_valid  (p2sInFlow_valid_regNext       ), //i
    .io_input_ready  (p2sBuf_io_input_ready         ), //o
    .io_input_tdata  (payloadDly[2047:0]            ), //i
    .io_input_tuser  (tagDly[5:0]                   ), //i
    .io_output_valid (p2sBuf_io_output_valid        ), //o
    .io_output_ready (p2s_io_input_ready            ), //i
    .io_output_tdata (p2sBuf_io_output_tdata[2047:0]), //o
    .io_output_tuser (p2sBuf_io_output_tuser[5:0]   ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  Parallel2Serial_1 p2s (
    .io_input_valid  (p2sBuf_io_output_valid        ), //i
    .io_input_ready  (p2s_io_input_ready            ), //o
    .io_input_tdata  (p2sBuf_io_output_tdata[2047:0]), //i
    .io_input_tuser  (p2sBuf_io_output_tuser[5:0]   ), //i
    .io_output_valid (p2s_io_output_valid           ), //o
    .io_output_tdata (p2s_io_output_tdata[15:0]     ), //o
    .io_output_tuser (p2s_io_output_tuser[5:0]      ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  always @(*) begin
    case(selectDly)
      1'b0 : t_pushVld = conv_output_tvalid;
      default : t_pushVld = (vLocalLock_valid && vLocalLock_ready);
    endcase
  end

  always @(*) begin
    case(selectCopy_0)
      1'b0 : t_toFifo_0 = convOutSlice_0;
      default : t_toFifo_0 = vLocalLockVec_0_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_1)
      1'b0 : t_toFifo_1 = convOutSlice_1;
      default : t_toFifo_1 = vLocalLockVec_1_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_2)
      1'b0 : t_toFifo_2 = convOutSlice_2;
      default : t_toFifo_2 = vLocalLockVec_2_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_3)
      1'b0 : t_toFifo_3 = convOutSlice_3;
      default : t_toFifo_3 = vLocalLockVec_3_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_4)
      1'b0 : t_toFifo_4 = convOutSlice_4;
      default : t_toFifo_4 = vLocalLockVec_4_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_5)
      1'b0 : t_toFifo_5 = convOutSlice_5;
      default : t_toFifo_5 = vLocalLockVec_5_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_6)
      1'b0 : t_toFifo_6 = convOutSlice_6;
      default : t_toFifo_6 = vLocalLockVec_6_payload;
    endcase
  end

  always @(*) begin
    case(selectCopy_7)
      1'b0 : t_toFifo_7 = convOutSlice_7;
      default : t_toFifo_7 = vLocalLockVec_7_payload;
    endcase
  end

  assign kvHit = ((6'h06 == io_bus_payload_tuser) || (6'h08 == io_bus_payload_tuser));
  assign wkvFire = (io_bus_valid && io_bus_ready);
  assign en = (wkvFire && io_bus_payload_last);
  assign vLocalPayload_0 = io_vLocal_tdata[255 : 0];
  assign vLocalPayload_1 = io_vLocal_tdata[511 : 256];
  assign vLocalPayload_2 = io_vLocal_tdata[767 : 512];
  assign vLocalPayload_3 = io_vLocal_tdata[1023 : 768];
  assign vLocalPayload_4 = io_vLocal_tdata[1279 : 1024];
  assign vLocalPayload_5 = io_vLocal_tdata[1535 : 1280];
  assign vLocalPayload_6 = io_vLocal_tdata[1791 : 1536];
  assign vLocalPayload_7 = io_vLocal_tdata[2047 : 1792];
  assign vLocalVec_0_valid = io_vLocal_valid;
  assign vLocalVec_1_valid = io_vLocal_valid;
  assign vLocalVec_2_valid = io_vLocal_valid;
  assign vLocalVec_3_valid = io_vLocal_valid;
  assign vLocalVec_4_valid = io_vLocal_valid;
  assign vLocalVec_5_valid = io_vLocal_valid;
  assign vLocalVec_6_valid = io_vLocal_valid;
  assign vLocalVec_7_valid = io_vLocal_valid;
  assign vLocalVec_0_payload = vLocalPayload_0;
  assign vLocalVec_1_payload = vLocalPayload_1;
  assign vLocalVec_2_payload = vLocalPayload_2;
  assign vLocalVec_3_payload = vLocalPayload_3;
  assign vLocalVec_4_payload = vLocalPayload_4;
  assign vLocalVec_5_payload = vLocalPayload_5;
  assign vLocalVec_6_payload = vLocalPayload_6;
  assign vLocalVec_7_payload = vLocalPayload_7;
  always @(*) begin
    vLocalVec_0_ready = vLocalLockVec_0_ready;
    if((! vLocalLockVec_0_valid)) begin
      vLocalVec_0_ready = 1'b1;
    end
  end

  assign vLocalLockVec_0_valid = vLocalVec_0_rValid;
  assign vLocalLockVec_0_payload = vLocalVec_0_rData;
  always @(*) begin
    vLocalVec_1_ready = vLocalLockVec_1_ready;
    if((! vLocalLockVec_1_valid)) begin
      vLocalVec_1_ready = 1'b1;
    end
  end

  assign vLocalLockVec_1_valid = vLocalVec_1_rValid;
  assign vLocalLockVec_1_payload = vLocalVec_1_rData;
  always @(*) begin
    vLocalVec_2_ready = vLocalLockVec_2_ready;
    if((! vLocalLockVec_2_valid)) begin
      vLocalVec_2_ready = 1'b1;
    end
  end

  assign vLocalLockVec_2_valid = vLocalVec_2_rValid;
  assign vLocalLockVec_2_payload = vLocalVec_2_rData;
  always @(*) begin
    vLocalVec_3_ready = vLocalLockVec_3_ready;
    if((! vLocalLockVec_3_valid)) begin
      vLocalVec_3_ready = 1'b1;
    end
  end

  assign vLocalLockVec_3_valid = vLocalVec_3_rValid;
  assign vLocalLockVec_3_payload = vLocalVec_3_rData;
  always @(*) begin
    vLocalVec_4_ready = vLocalLockVec_4_ready;
    if((! vLocalLockVec_4_valid)) begin
      vLocalVec_4_ready = 1'b1;
    end
  end

  assign vLocalLockVec_4_valid = vLocalVec_4_rValid;
  assign vLocalLockVec_4_payload = vLocalVec_4_rData;
  always @(*) begin
    vLocalVec_5_ready = vLocalLockVec_5_ready;
    if((! vLocalLockVec_5_valid)) begin
      vLocalVec_5_ready = 1'b1;
    end
  end

  assign vLocalLockVec_5_valid = vLocalVec_5_rValid;
  assign vLocalLockVec_5_payload = vLocalVec_5_rData;
  always @(*) begin
    vLocalVec_6_ready = vLocalLockVec_6_ready;
    if((! vLocalLockVec_6_valid)) begin
      vLocalVec_6_ready = 1'b1;
    end
  end

  assign vLocalLockVec_6_valid = vLocalVec_6_rValid;
  assign vLocalLockVec_6_payload = vLocalVec_6_rData;
  always @(*) begin
    vLocalVec_7_ready = vLocalLockVec_7_ready;
    if((! vLocalLockVec_7_valid)) begin
      vLocalVec_7_ready = 1'b1;
    end
  end

  assign vLocalLockVec_7_valid = vLocalVec_7_rValid;
  assign vLocalLockVec_7_payload = vLocalVec_7_rData;
  assign vLocalLockVec_0_ready = selVLocalVec_0;
  assign vLocalLockVec_1_ready = selVLocalVec_1;
  assign vLocalLockVec_2_ready = selVLocalVec_2;
  assign vLocalLockVec_3_ready = selVLocalVec_3;
  assign vLocalLockVec_4_ready = selVLocalVec_4;
  assign vLocalLockVec_5_ready = selVLocalVec_5;
  assign vLocalLockVec_6_ready = selVLocalVec_6;
  assign vLocalLockVec_7_ready = selVLocalVec_7;
  assign vLocal_valid = io_vLocal_valid;
  always @(*) begin
    vLocal_ready = vLocalLock_ready;
    if((! vLocalLock_valid)) begin
      vLocal_ready = 1'b1;
    end
  end

  assign vLocalLock_valid = vLocal_rValid;
  assign vLocalLock_ready = selVLocal;
  assign s2p_input_valid = (wkvFire && selExtTokenSqr);
  assign conv_inputData_tvalid = (wkvFire && (! selExtTokenSqr));
  assign io_zeroInt4_ready = conv_zeroInt4_tready;
  assign io_zeroInt8_ready = conv_zeroInt8_tready;
  assign io_wkv_valid = fifo_io_pop_valid;
  assign io_wkv_payload = fifo_io_pop_payload;
  assign pushVld = t_pushVld;
  assign convOutSlice_0 = conv_output_tdata[255 : 0];
  assign convOutSlice_1 = conv_output_tdata[511 : 256];
  assign convOutSlice_2 = conv_output_tdata[767 : 512];
  assign convOutSlice_3 = conv_output_tdata[1023 : 768];
  assign convOutSlice_4 = conv_output_tdata[1279 : 1024];
  assign convOutSlice_5 = conv_output_tdata[1535 : 1280];
  assign convOutSlice_6 = conv_output_tdata[1791 : 1536];
  assign convOutSlice_7 = conv_output_tdata[2047 : 1792];
  assign toFifo_0 = t_toFifo_0;
  assign toFifo_1 = t_toFifo_1;
  assign toFifo_2 = t_toFifo_2;
  assign toFifo_3 = t_toFifo_3;
  assign toFifo_4 = t_toFifo_4;
  assign toFifo_5 = t_toFifo_5;
  assign toFifo_6 = t_toFifo_6;
  assign toFifo_7 = t_toFifo_7;
  assign pushPayload = {toFifo_7,{toFifo_6,{toFifo_5,{toFifo_4,{toFifo_3,{toFifo_2,{toFifo_1,toFifo_0}}}}}}};
  always @(*) begin
    select_1 = 1'b0;
    if(selVLocal) begin
      select_1 = 1'b1;
    end
  end

  always @(*) begin
    io_bus_ready = ready;
    if(selVLocal) begin
      io_bus_ready = 1'b0;
    end
    if(selExtTokenSqr) begin
      io_bus_ready = (! status_logitsGen);
    end
  end

  assign toResFlow_valid = (muxOutFlow_valid && ((((muxOutFlow_tuser == 6'h1f) || (muxOutFlow_tuser == 6'h0)) || (muxOutFlow_tuser == 6'h01)) || (muxOutFlow_tuser == 6'h02)));
  assign p2sInFlow_valid = (muxOutFlow_valid && (((((muxOutFlow_tuser == 6'h1f) || (muxOutFlow_tuser == 6'h1c)) || (muxOutFlow_tuser == 6'h0)) || (muxOutFlow_tuser == 6'h01)) || (muxOutFlow_tuser == 6'h02)));
  assign p2sInFlow_tuser = muxOutFlow_tuser;
  assign muxOutFlow_valid = muxOut_valid;
  assign muxOutFlow_tuser = muxOut_tuser;
  always @(*) begin
    muxOut_valid = (io_vecIn_valid && (io_vecIn_tuser == 6'h1f));
    if(selPrefillSqrDly) begin
      muxOut_valid = s2p_output_tvalid;
    end
  end

  always @(*) begin
    muxOut_tdata = io_vecIn_tdata;
    if(selPrefillSqrDly) begin
      muxOut_tdata = s2p_output_tdata;
    end
  end

  always @(*) begin
    muxOut_tuser = 6'h1f;
    if(selPrefillSqrDly) begin
      muxOut_tuser = s2p_output_tuser;
    end
  end

  assign tensorOvf = (tensorCnt == 4'b1111);
  assign layerOvf = (layerCnt == layerBound);
  assign prefillLayerCond = (muxOut_tuser == 6'h0);
  assign io_toResBuf_valid = t_io_toResBuf_valid;
  assign io_toResBuf_payload = payloadDly;
  assign vecInCntOvf = (vecInCnt == 4'b1111);
  assign io_directOut_valid = directOutVld;
  assign io_directOut_tuser = 6'h0;
  assign io_directOut_tdata = 2048'h0;
  assign p2sOutCntOvf = (p2sOutCnt == 11'h7ff);
  assign p2sOut_valid = p2s_io_output_valid;
  assign p2sOut_payload_tdata = p2s_io_output_tdata;
  assign p2sOut_payload_tuser = p2s_io_output_tuser;
  assign p2sOut_payload_last = p2sOutCntOvf;
  assign io_p2sOut_valid = p2sOut_regNext_valid;
  assign io_p2sOut_payload_last = p2sOut_regNext_payload_last;
  assign io_p2sOut_payload_tdata = p2sOut_regNext_payload_tdata;
  assign io_p2sOut_payload_tuser = p2sOut_regNext_payload_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      selExtTokenSqr <= 1'b1;
      selVLocal <= 1'b0;
      vLocalVec_0_rValid <= 1'b0;
      vLocalVec_1_rValid <= 1'b0;
      vLocalVec_2_rValid <= 1'b0;
      vLocalVec_3_rValid <= 1'b0;
      vLocalVec_4_rValid <= 1'b0;
      vLocalVec_5_rValid <= 1'b0;
      vLocalVec_6_rValid <= 1'b0;
      vLocalVec_7_rValid <= 1'b0;
      selVLocalVec_0 <= 1'b0;
      selVLocalVec_1 <= 1'b0;
      selVLocalVec_2 <= 1'b0;
      selVLocalVec_3 <= 1'b0;
      selVLocalVec_4 <= 1'b0;
      selVLocalVec_5 <= 1'b0;
      selVLocalVec_6 <= 1'b0;
      selVLocalVec_7 <= 1'b0;
      vLocal_rValid <= 1'b0;
      select_1_delay_1 <= 1'b0;
      select_1_delay_2 <= 1'b0;
      select_1_delay_3 <= 1'b0;
      selectPreDly <= 1'b0;
      selectDly <= 1'b0;
      selectCopy_0 <= 1'b0;
      selectCopy_1 <= 1'b0;
      selectCopy_2 <= 1'b0;
      selectCopy_3 <= 1'b0;
      selectCopy_4 <= 1'b0;
      selectCopy_5 <= 1'b0;
      selectCopy_6 <= 1'b0;
      selectCopy_7 <= 1'b0;
      pushVld_regNext <= 1'b0;
      ready <= 1'b0;
      selPrefillSqrDly <= 1'b0;
      tensorCnt <= 4'b0000;
      layerCnt <= 5'h0;
      layerBound <= 5'h1f;
      p2sInFlow_valid_regNext <= 1'b0;
      t_io_toResBuf_valid <= 1'b0;
      vecInCnt <= 4'b0000;
      directOutVld <= 1'b0;
      p2sOutCnt <= 11'h0;
      p2sOut_regNext_valid <= 1'b0;
    end else begin
      if(en) begin
        if(status_tokenNextHit) begin
          selExtTokenSqr <= 1'b1;
        end
        if(status_vNextHit) begin
          selVLocal <= 1'b1;
        end
      end
      if(((wkvFire && io_bus_payload_last) && selExtTokenSqr)) begin
        selExtTokenSqr <= 1'b0;
      end
      if(vLocalVec_0_ready) begin
        vLocalVec_0_rValid <= vLocalVec_0_valid;
      end
      if(vLocalVec_1_ready) begin
        vLocalVec_1_rValid <= vLocalVec_1_valid;
      end
      if(vLocalVec_2_ready) begin
        vLocalVec_2_rValid <= vLocalVec_2_valid;
      end
      if(vLocalVec_3_ready) begin
        vLocalVec_3_rValid <= vLocalVec_3_valid;
      end
      if(vLocalVec_4_ready) begin
        vLocalVec_4_rValid <= vLocalVec_4_valid;
      end
      if(vLocalVec_5_ready) begin
        vLocalVec_5_rValid <= vLocalVec_5_valid;
      end
      if(vLocalVec_6_ready) begin
        vLocalVec_6_rValid <= vLocalVec_6_valid;
      end
      if(vLocalVec_7_ready) begin
        vLocalVec_7_rValid <= vLocalVec_7_valid;
      end
      if(en) begin
        if(status_vNextHit) begin
          selVLocalVec_0 <= 1'b1;
          selVLocalVec_1 <= 1'b1;
          selVLocalVec_2 <= 1'b1;
          selVLocalVec_3 <= 1'b1;
          selVLocalVec_4 <= 1'b1;
          selVLocalVec_5 <= 1'b1;
          selVLocalVec_6 <= 1'b1;
          selVLocalVec_7 <= 1'b1;
        end
      end
      if(vLocalLockVec_0_valid) begin
        selVLocalVec_0 <= 1'b0;
      end
      if(vLocalLockVec_1_valid) begin
        selVLocalVec_1 <= 1'b0;
      end
      if(vLocalLockVec_2_valid) begin
        selVLocalVec_2 <= 1'b0;
      end
      if(vLocalLockVec_3_valid) begin
        selVLocalVec_3 <= 1'b0;
      end
      if(vLocalLockVec_4_valid) begin
        selVLocalVec_4 <= 1'b0;
      end
      if(vLocalLockVec_5_valid) begin
        selVLocalVec_5 <= 1'b0;
      end
      if(vLocalLockVec_6_valid) begin
        selVLocalVec_6 <= 1'b0;
      end
      if(vLocalLockVec_7_valid) begin
        selVLocalVec_7 <= 1'b0;
      end
      if(vLocal_ready) begin
        vLocal_rValid <= vLocal_valid;
      end
      if(vLocalLock_valid) begin
        selVLocal <= 1'b0;
      end
      select_1_delay_1 <= select_1;
      select_1_delay_2 <= select_1_delay_1;
      select_1_delay_3 <= select_1_delay_2;
      selectPreDly <= select_1_delay_3;
      selectDly <= selectPreDly;
      selectCopy_0 <= selectPreDly;
      selectCopy_1 <= selectPreDly;
      selectCopy_2 <= selectPreDly;
      selectCopy_3 <= selectPreDly;
      selectCopy_4 <= selectPreDly;
      selectCopy_5 <= selectPreDly;
      selectCopy_6 <= selectPreDly;
      selectCopy_7 <= selectPreDly;
      pushVld_regNext <= pushVld;
      ready <= (6'h08 <= fifo_io_availability);
      selPrefillSqrDly <= selExtTokenSqr;
      if(toResFlow_valid) begin
        tensorCnt <= (tensorCnt + 4'b0001);
        if(tensorOvf) begin
          tensorCnt <= 4'b0000;
          if((muxOut_tuser != 6'h1f)) begin
            layerBound <= (prefillLayerCond ? 5'h1e : 5'h1f);
          end
          if((muxOut_tuser == 6'h1f)) begin
            layerCnt <= (layerCnt + 5'h01);
          end
          if(layerOvf) begin
            layerCnt <= 5'h0;
          end
        end
      end
      p2sInFlow_valid_regNext <= p2sInFlow_valid;
      t_io_toResBuf_valid <= (toResFlow_valid && (! layerOvf));
      if(muxOut_valid) begin
        vecInCnt <= (vecInCnt + 4'b0001);
        if(vecInCntOvf) begin
          vecInCnt <= 4'b0000;
        end
      end
      directOutVld <= (muxOut_valid && (vecInCnt == 4'b0000));
      if(p2s_io_output_valid) begin
        p2sOutCnt <= (p2sOutCnt + 11'h001);
        if(p2sOutCntOvf) begin
          p2sOutCnt <= 11'h0;
        end
      end
      p2sOut_regNext_valid <= p2sOut_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    if(vLocalVec_0_ready) begin
      vLocalVec_0_rData <= vLocalVec_0_payload;
    end
    if(vLocalVec_1_ready) begin
      vLocalVec_1_rData <= vLocalVec_1_payload;
    end
    if(vLocalVec_2_ready) begin
      vLocalVec_2_rData <= vLocalVec_2_payload;
    end
    if(vLocalVec_3_ready) begin
      vLocalVec_3_rData <= vLocalVec_3_payload;
    end
    if(vLocalVec_4_ready) begin
      vLocalVec_4_rData <= vLocalVec_4_payload;
    end
    if(vLocalVec_5_ready) begin
      vLocalVec_5_rData <= vLocalVec_5_payload;
    end
    if(vLocalVec_6_ready) begin
      vLocalVec_6_rData <= vLocalVec_6_payload;
    end
    if(vLocalVec_7_ready) begin
      vLocalVec_7_rData <= vLocalVec_7_payload;
    end
    pushPayload_regNext <= pushPayload;
    payloadDly <= muxOut_tdata;
    tagDly <= muxOut_tuser;
    p2sOut_regNext_payload_last <= p2sOut_payload_last;
    p2sOut_regNext_payload_tdata <= p2sOut_payload_tdata;
    p2sOut_regNext_payload_tuser <= p2sOut_payload_tuser;
  end


endmodule

module ScalarOutSubMod_1 (
  input  wire          io_p2sOut_valid,
  input  wire [15:0]   io_p2sOut_tdata,
  input  wire [5:0]    io_p2sOut_tuser,
  input  wire          io_allReduceOut_valid,
  input  wire [15:0]   io_allReduceOut_tdata,
  input  wire [5:0]    io_allReduceOut_tuser,
  input  wire          io_softmaxOut_valid,
  input  wire          io_softmaxOut_payload_last,
  input  wire [15:0]   io_softmaxOut_payload_tdata,
  input  wire [5:0]    io_softmaxOut_payload_tuser,
  output wire          io_scalarOut_valid,
  input  wire          io_scalarOut_ready,
  output wire [15:0]   io_scalarOut_payload,
  input  wire          io_allGatherIndexIn_valid,
  input  wire          io_allGatherIndexIn_payload_last,
  input  wire [15:0]   io_allGatherIndexIn_payload_tdata,
  input  wire [5:0]    io_allGatherIndexIn_payload_tuser,
  output wire          io_zfIndexOut_valid,
  output wire          io_zfIndexOut_payload_last,
  output wire [15:0]   io_zfIndexOut_payload_tdata,
  output wire [5:0]    io_zfIndexOut_payload_tuser,
  output wire          io_gateIndexOut_valid,
  output wire          io_gateIndexOut_payload_last,
  output wire [15:0]   io_gateIndexOut_payload_tdata,
  output wire [5:0]    io_gateIndexOut_payload_tuser,
  output wire          io_ugIndexOut_valid,
  output wire          io_ugIndexOut_payload_last,
  output wire [15:0]   io_ugIndexOut_payload_tdata,
  output wire [5:0]    io_ugIndexOut_payload_tuser,
  input  wire          clk_0_clk,
  input  wire          status_enPredictor,
  input  wire          status_enFatRelu,
  output wire          silu_to_valid,
  output wire [15:0]   silu_to_payload,
  input  wire          silu_from_valid,
  input  wire [15:0]   silu_from_payload,
  input  wire          clk_0_resetn
);

  wire                ug_gateIndexOut_valid;
  wire                ug_gateIndexOut_payload_last;
  wire       [15:0]   ug_gateIndexOut_payload_tdata;
  wire       [5:0]    ug_gateIndexOut_payload_tuser;
  wire                ug_ugIndexOut_valid;
  wire                ug_ugIndexOut_payload_last;
  wire       [15:0]   ug_ugIndexOut_payload_tdata;
  wire       [5:0]    ug_ugIndexOut_payload_tuser;
  wire                ug_ugOut_tvalid;
  wire                ug_ugOut_tlast;
  wire       [15:0]   ug_ugOut_tdata;
  wire       [5:0]    ug_ugOut_tuser;
  wire                ug_silu_to_valid;
  wire       [15:0]   ug_silu_to_payload;
  wire                scalarFifo_io_push_ready;
  wire                scalarFifo_io_pop_valid;
  wire                scalarFifo_io_pop_payload_last;
  wire       [15:0]   scalarFifo_io_pop_payload_fragment;
  wire       [23:0]   t_io_zfIndexOut_valid;
  wire       [22:0]   t_io_zfIndexOut_payload_last;
  wire       [21:0]   t_io_zfIndexOut_payload_tdata;
  reg                 sOut_ug_gateIndexOut_regNext_valid;
  reg                 sOut_ug_gateIndexOut_regNext_payload_last;
  reg        [15:0]   sOut_ug_gateIndexOut_regNext_payload_tdata;
  reg        [5:0]    sOut_ug_gateIndexOut_regNext_payload_tuser;
  reg                 sOut_ug_ugIndexOut_regNext_valid;
  reg                 sOut_ug_ugIndexOut_regNext_payload_last;
  reg        [15:0]   sOut_ug_ugIndexOut_regNext_payload_tdata;
  reg        [5:0]    sOut_ug_ugIndexOut_regNext_payload_tuser;
  wire                ug2Axpy_valid;
  wire                ug2Axpy_payload_last;
  wire       [15:0]   ug2Axpy_payload_fragment;
  wire                softmax2Axpy_valid;
  wire                softmax2Axpy_payload_last;
  wire       [15:0]   softmax2Axpy_payload_fragment;
  wire                axpyInMux_valid;
  wire                axpyInMux_payload_last;
  wire       [15:0]   axpyInMux_payload_fragment;
  wire                axpyErr;
  reg                 axpyIn_tvalid;
  reg                 axpyIn_tlast;
  reg        [15:0]   axpyIn_tdata;

  UGMul_1 ug (
    .predIndexIn_valid          (io_allGatherIndexIn_valid              ), //i
    .predIndexIn_payload_last   (io_allGatherIndexIn_payload_last       ), //i
    .predIndexIn_payload_tdata  (io_allGatherIndexIn_payload_tdata[15:0]), //i
    .predIndexIn_payload_tuser  (io_allGatherIndexIn_payload_tuser[5:0] ), //i
    .gateIndexOut_valid         (ug_gateIndexOut_valid                  ), //o
    .gateIndexOut_payload_last  (ug_gateIndexOut_payload_last           ), //o
    .gateIndexOut_payload_tdata (ug_gateIndexOut_payload_tdata[15:0]    ), //o
    .gateIndexOut_payload_tuser (ug_gateIndexOut_payload_tuser[5:0]     ), //o
    .ugIndexOut_valid           (ug_ugIndexOut_valid                    ), //o
    .ugIndexOut_payload_last    (ug_ugIndexOut_payload_last             ), //o
    .ugIndexOut_payload_tdata   (ug_ugIndexOut_payload_tdata[15:0]      ), //o
    .ugIndexOut_payload_tuser   (ug_ugIndexOut_payload_tuser[5:0]       ), //o
    .allReduceOut_valid         (io_allReduceOut_valid                  ), //i
    .allReduceOut_tdata         (io_allReduceOut_tdata[15:0]            ), //i
    .allReduceOut_tuser         (io_allReduceOut_tuser[5:0]             ), //i
    .ugOut_tvalid               (ug_ugOut_tvalid                        ), //o
    .ugOut_tlast                (ug_ugOut_tlast                         ), //o
    .ugOut_tdata                (ug_ugOut_tdata[15:0]                   ), //o
    .ugOut_tuser                (ug_ugOut_tuser[5:0]                    ), //o
    .status_enPredictor         (status_enPredictor                     ), //i
    .status_enFatRelu           (status_enFatRelu                       ), //i
    .silu_to_valid              (ug_silu_to_valid                       ), //o
    .silu_to_payload            (ug_silu_to_payload[15:0]               ), //o
    .silu_from_valid            (silu_from_valid                        ), //i
    .silu_from_payload          (silu_from_payload[15:0]                ), //i
    .clk_0_clk                  (clk_0_clk                              ), //i
    .clk_0_resetn               (clk_0_resetn                           )  //i
  );
  URAM16x16384Fifo_4 scalarFifo (
    .io_push_valid            (axpyIn_tvalid                           ), //i
    .io_push_ready            (scalarFifo_io_push_ready                ), //o
    .io_push_payload_last     (axpyIn_tlast                            ), //i
    .io_push_payload_fragment (axpyIn_tdata[15:0]                      ), //i
    .io_pop_valid             (scalarFifo_io_pop_valid                 ), //o
    .io_pop_ready             (io_scalarOut_ready                      ), //i
    .io_pop_payload_last      (scalarFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (scalarFifo_io_pop_payload_fragment[15:0]), //o
    .clk_0_clk                (clk_0_clk                               ), //i
    .clk_0_resetn             (clk_0_resetn                            )  //i
  );
  assign silu_to_valid = ug_silu_to_valid;
  assign silu_to_payload = ug_silu_to_payload;
  assign t_io_zfIndexOut_valid = 24'h0;
  assign io_zfIndexOut_valid = t_io_zfIndexOut_valid[0];
  assign t_io_zfIndexOut_payload_last = t_io_zfIndexOut_valid[23 : 1];
  assign io_zfIndexOut_payload_last = t_io_zfIndexOut_payload_last[0];
  assign t_io_zfIndexOut_payload_tdata = t_io_zfIndexOut_payload_last[22 : 1];
  assign io_zfIndexOut_payload_tdata = t_io_zfIndexOut_payload_tdata[15 : 0];
  assign io_zfIndexOut_payload_tuser = t_io_zfIndexOut_payload_tdata[21 : 16];
  assign io_gateIndexOut_valid = sOut_ug_gateIndexOut_regNext_valid;
  assign io_gateIndexOut_payload_last = sOut_ug_gateIndexOut_regNext_payload_last;
  assign io_gateIndexOut_payload_tdata = sOut_ug_gateIndexOut_regNext_payload_tdata;
  assign io_gateIndexOut_payload_tuser = sOut_ug_gateIndexOut_regNext_payload_tuser;
  assign io_ugIndexOut_valid = sOut_ug_ugIndexOut_regNext_valid;
  assign io_ugIndexOut_payload_last = sOut_ug_ugIndexOut_regNext_payload_last;
  assign io_ugIndexOut_payload_tdata = sOut_ug_ugIndexOut_regNext_payload_tdata;
  assign io_ugIndexOut_payload_tuser = sOut_ug_ugIndexOut_regNext_payload_tuser;
  assign ug2Axpy_valid = (ug_ugOut_tvalid && (ug_ugOut_tuser == 6'h19));
  assign ug2Axpy_payload_fragment = ug_ugOut_tdata;
  assign ug2Axpy_payload_last = ug_ugOut_tlast;
  assign softmax2Axpy_valid = (io_softmaxOut_valid && (io_softmaxOut_payload_tuser == 6'h0e));
  assign softmax2Axpy_payload_fragment = io_softmaxOut_payload_tdata;
  assign softmax2Axpy_payload_last = io_softmaxOut_payload_last;
  assign axpyErr = 1'b0;
  assign axpyInMux_valid = (|{softmax2Axpy_valid,ug2Axpy_valid});
  assign axpyInMux_payload_last = (ug2Axpy_valid ? ug2Axpy_payload_last : softmax2Axpy_payload_last);
  assign axpyInMux_payload_fragment = (ug2Axpy_valid ? ug2Axpy_payload_fragment : softmax2Axpy_payload_fragment);
  assign io_scalarOut_valid = scalarFifo_io_pop_valid;
  assign io_scalarOut_payload = scalarFifo_io_pop_payload_fragment;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      sOut_ug_gateIndexOut_regNext_valid <= 1'b0;
      sOut_ug_ugIndexOut_regNext_valid <= 1'b0;
      axpyIn_tvalid <= 1'b0;
    end else begin
      sOut_ug_gateIndexOut_regNext_valid <= ug_gateIndexOut_valid;
      sOut_ug_ugIndexOut_regNext_valid <= ug_ugIndexOut_valid;
      axpyIn_tvalid <= axpyInMux_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    sOut_ug_gateIndexOut_regNext_payload_last <= ug_gateIndexOut_payload_last;
    sOut_ug_gateIndexOut_regNext_payload_tdata <= ug_gateIndexOut_payload_tdata;
    sOut_ug_gateIndexOut_regNext_payload_tuser <= ug_gateIndexOut_payload_tuser;
    sOut_ug_ugIndexOut_regNext_payload_last <= ug_ugIndexOut_payload_last;
    sOut_ug_ugIndexOut_regNext_payload_tdata <= ug_ugIndexOut_payload_tdata;
    sOut_ug_ugIndexOut_regNext_payload_tuser <= ug_ugIndexOut_payload_tuser;
    axpyIn_tlast <= axpyInMux_payload_last;
    axpyIn_tdata <= axpyInMux_payload_fragment;
  end


endmodule

module NormSubModNew_1 (
  input  wire          io_allGatherOut_valid,
  input  wire [15:0]   io_allGatherOut_tdata,
  input  wire [5:0]    io_allGatherOut_tuser,
  input  wire          io_allReduceOut_valid,
  input  wire [15:0]   io_allReduceOut_tdata,
  input  wire [5:0]    io_allReduceOut_tuser,
  input  wire          io_lnScale_valid,
  output wire          io_lnScale_ready,
  input  wire [15:0]   io_lnScale_payload,
  output wire          io_lnOut_valid,
  output wire [15:0]   io_lnOut_tdata,
  output wire [5:0]    io_lnOut_tuser,
  input  wire          status_toLogitsGen,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn,
  output wire          mlpNormOutProbe_valid,
  output wire [15:0]   mlpNormOutProbe_payload,
  output wire          attnNormOutProbe_valid,
  output wire [15:0]   attnNormOutProbe_payload
);

  wire                rmsNorm_io_scale_ready;
  wire                rmsNorm_io_normOut_valid;
  wire       [15:0]   rmsNorm_io_normOut_payload;
  wire                allReduceOut_valid;
  wire       [15:0]   allReduceOut_tdata;
  wire       [5:0]    allReduceOut_tuser;
  wire                allGatherOut_valid;
  wire       [15:0]   allGatherOut_tdata;
  wire       [5:0]    allGatherOut_tuser;
  wire                inputTagMap_valid;
  wire       [15:0]   inputTagMap_tdata;
  wire       [5:0]    inputTagMap_tuser;
  reg                 inputVld;
  reg        [15:0]   inputData;
  wire       [5:0]    tag;
  reg        [11:0]   inCnt;
  wire                inCntOvf;
  wire                userStream_valid;
  reg                 userStream_ready;
  wire       [5:0]    userStream_payload;
  wire                userStreamPipe_valid;
  wire                userStreamPipe_ready;
  wire       [5:0]    userStreamPipe_payload;
  reg                 userStream_rValid;
  reg        [5:0]    userStream_rData;
  wire                isAttnLn;
  wire                isLmHeadLn;
  reg        [11:0]   outCnt;
  wire                outCntOvf;
  wire                output_valid;
  wire       [15:0]   output_tdata;
  wire       [5:0]    output_tuser;
  reg                 output_regNext_valid;
  reg        [15:0]   output_regNext_tdata;
  reg        [5:0]    output_regNext_tuser;

  RMSNormFp32_1 rmsNorm (
    .io_toBeNorm_valid   (inputVld                        ), //i
    .io_toBeNorm_payload (inputData[15:0]                 ), //i
    .io_scale_valid      (io_lnScale_valid                ), //i
    .io_scale_ready      (rmsNorm_io_scale_ready          ), //o
    .io_scale_payload    (io_lnScale_payload[15:0]        ), //i
    .io_normOut_valid    (rmsNorm_io_normOut_valid        ), //o
    .io_normOut_payload  (rmsNorm_io_normOut_payload[15:0]), //o
    .isAttnLn            (isAttnLn                        ), //i
    .isLmHeadLn          (isLmHeadLn                      ), //i
    .clk_0_clk           (clk_0_clk                       ), //i
    .clk_0_resetn        (clk_0_resetn                    )  //i
  );
  assign allReduceOut_valid = (io_allReduceOut_valid && (io_allReduceOut_tuser == 6'h10));
  assign allReduceOut_tdata = io_allReduceOut_tdata;
  assign allGatherOut_valid = (io_allGatherOut_valid && ((((io_allGatherOut_tuser == 6'h0) || (io_allGatherOut_tuser == 6'h01)) || (io_allGatherOut_tuser == 6'h02)) || (io_allGatherOut_tuser == 6'h1f)));
  assign allGatherOut_tdata = io_allGatherOut_tdata;
  assign allReduceOut_tuser = 6'h15;
  assign allGatherOut_tuser = 6'h04;
  assign inputTagMap_valid = (|{allGatherOut_valid,allReduceOut_valid});
  assign inputTagMap_tdata = (allReduceOut_valid ? allReduceOut_tdata : allGatherOut_tdata);
  assign inputTagMap_tuser = (allReduceOut_valid ? allReduceOut_tuser : allGatherOut_tuser);
  assign tag = ((status_toLogitsGen && (inputTagMap_tuser == 6'h04)) ? 6'h22 : inputTagMap_tuser);
  assign inCntOvf = (inCnt == 12'hfff);
  always @(*) begin
    userStream_ready = userStreamPipe_ready;
    if((! userStreamPipe_valid)) begin
      userStream_ready = 1'b1;
    end
  end

  assign userStreamPipe_valid = userStream_rValid;
  assign userStreamPipe_payload = userStream_rData;
  assign userStream_valid = ((inCnt == 12'h0) && inputTagMap_valid);
  assign userStream_payload = tag;
  assign isAttnLn = (userStreamPipe_payload == 6'h04);
  assign isLmHeadLn = (userStreamPipe_payload == 6'h22);
  assign io_lnScale_ready = rmsNorm_io_scale_ready;
  assign outCntOvf = (outCnt == (isAttnLn ? 12'hfff : 12'h7ff));
  assign output_valid = rmsNorm_io_normOut_valid;
  assign output_tdata = rmsNorm_io_normOut_payload;
  assign output_tuser = userStreamPipe_payload;
  assign userStreamPipe_ready = (output_valid && outCntOvf);
  assign io_lnOut_valid = output_regNext_valid;
  assign io_lnOut_tdata = output_regNext_tdata;
  assign io_lnOut_tuser = output_regNext_tuser;
  assign mlpNormOutProbe_valid = ((rmsNorm_io_normOut_valid && (outCnt == 12'h7ff)) && ((! isAttnLn) && (! isLmHeadLn)));
  assign mlpNormOutProbe_payload = rmsNorm_io_normOut_payload;
  assign attnNormOutProbe_valid = ((rmsNorm_io_normOut_valid && (outCnt == 12'h7ff)) && isAttnLn);
  assign attnNormOutProbe_payload = rmsNorm_io_normOut_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      inputVld <= 1'b0;
      inCnt <= 12'h0;
      userStream_rValid <= 1'b0;
      outCnt <= 12'h0;
      output_regNext_valid <= 1'b0;
    end else begin
      inputVld <= inputTagMap_valid;
      if(inputTagMap_valid) begin
        inCnt <= (inCnt + 12'h001);
        if(inCntOvf) begin
          inCnt <= 12'h0;
        end
      end
      if(userStream_ready) begin
        userStream_rValid <= userStream_valid;
      end
      if(rmsNorm_io_normOut_valid) begin
        outCnt <= (outCnt + 12'h001);
        if(outCntOvf) begin
          outCnt <= 12'h0;
        end
      end
      output_regNext_valid <= output_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    inputData <= inputTagMap_tdata;
    if(userStream_ready) begin
      userStream_rData <= userStream_payload;
    end
    output_regNext_tdata <= output_tdata;
    output_regNext_tuser <= output_tuser;
  end


endmodule

module AttnSubMod_1 (
  input  wire          io_dotOut_valid,
  input  wire [15:0]   io_dotOut_tdata,
  input  wire [5:0]    io_dotOut_tuser,
  output wire          io_ropeOut_valid,
  output wire [15:0]   io_ropeOut_tdata,
  output wire [5:0]    io_ropeOut_tuser,
  output wire          io_softmaxOut_valid,
  output wire          io_softmaxOut_payload_last,
  output wire [15:0]   io_softmaxOut_payload_tdata,
  output wire [5:0]    io_softmaxOut_payload_tuser,
  output wire          io_quantZero_valid,
  output wire [7:0]    io_quantZero_payload,
  output wire          io_quantScale_valid,
  output wire [15:0]   io_quantScale_payload,
  output wire          io_afterQuant_valid,
  output wire          io_afterQuant_payload_last,
  output wire [7:0]    io_afterQuant_payload_fragment,
  input  wire [9:0]    status_token,
  output wire          exp_to_valid,
  output wire [15:0]   exp_to_payload,
  input  wire          exp_from_valid,
  input  wire [15:0]   exp_from_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [15:0]   rope_io_pos;
  wire       [9:0]    softmax_io_seqLen_payload;
  wire                rope_output_tvalid;
  wire       [15:0]   rope_output_tdata;
  wire       [5:0]    rope_output_tuser;
  wire                quant_io_quantZero_valid;
  wire       [7:0]    quant_io_quantZero_payload;
  wire                quant_io_quantScale_valid;
  wire       [15:0]   quant_io_quantScale_payload;
  wire                quant_io_afterQuant_valid;
  wire                quant_io_afterQuant_payload_last;
  wire       [7:0]    quant_io_afterQuant_payload_fragment;
  wire                qk_io_output_valid;
  wire       [15:0]   qk_io_output_tdata;
  wire       [5:0]    qk_io_output_tuser;
  wire                qk_qProbe_valid;
  wire       [15:0]   qk_qProbe_payload;
  wire                softmax_io_output_valid;
  wire                softmax_io_output_payload_last;
  wire       [15:0]   softmax_io_output_payload_tdata;
  wire       [5:0]    softmax_io_output_payload_tuser;
  wire                softmax_io_seqLen_ready;
  wire       [15:0]   t_io_pos;
  reg                 io_dotOut_valid_delay_1;
  reg                 io_dotOut_valid_delay_2;
  reg                 io_dotOut_valid_delay_3;
  reg                 io_dotOut_valid_delay_4;
  reg                 io_dotOut_valid_delay_5;
  reg                 io_dotOut_valid_delay_6;
  reg                 io_dotOut_valid_delay_7;
  reg                 io_dotOut_valid_delay_8;
  reg                 io_dotOut_valid_delay_9;
  reg                 io_dotOut_valid_delay_10;
  reg                 io_dotOut_valid_delay_11;
  reg                 io_dotOut_valid_delay_12;
  reg                 io_dotOut_valid_delay_13;
  reg                 io_dotOut_valid_delay_14;
  reg                 io_dotOut_valid_delay_15;
  reg                 io_dotOut_valid_delay_16;
  reg                 io_dotOut_valid_delay_17;
  reg                 io_dotOut_valid_delay_18;
  reg                 io_dotOut_valid_delay_19;
  reg                 io_dotOut_valid_delay_20;
  reg                 io_dotOut_valid_delay_21;
  reg                 io_dotOut_valid_delay_22;
  reg                 io_dotOut_valid_delay_23;
  reg                 io_dotOut_valid_delay_24;
  reg                 io_dotOut_valid_delay_25;
  reg                 io_dotOut_valid_delay_26;
  reg                 io_dotOut_valid_delay_27;
  reg                 io_dotOut_valid_delay_28;
  reg                 io_dotOut_valid_delay_29;
  reg                 io_dotOut_valid_delay_30;
  reg                 io_dotOut_valid_delay_31;
  reg                 io_dotOut_valid_delay_32;
  reg                 io_dotOut_valid_delay_33;
  reg                 io_dotOut_valid_delay_34;
  reg                 io_dotOut_valid_delay_35;
  reg                 io_dotOut_valid_delay_36;
  reg                 io_dotOut_valid_delay_37;
  reg                 io_dotOut_valid_delay_38;
  reg                 io_dotOut_valid_delay_39;
  reg                 io_dotOut_valid_delay_40;
  reg                 io_dotOut_valid_delay_41;
  reg                 io_dotOut_valid_delay_42;
  reg                 io_dotOut_valid_delay_43;
  reg                 io_dotOut_valid_delay_44;
  reg                 io_dotOut_valid_delay_45;
  reg                 io_dotOut_valid_delay_46;
  reg                 io_dotOut_valid_delay_47;
  reg                 io_dotOut_valid_delay_48;
  reg                 io_dotOut_valid_delay_49;
  reg                 io_dotOut_valid_delay_50;
  reg                 io_dotOut_valid_delay_51;
  reg                 io_dotOut_valid_delay_52;
  reg                 io_dotOut_valid_delay_53;
  reg                 io_dotOut_valid_delay_54;
  reg                 io_dotOut_valid_delay_55;
  reg                 io_dotOut_valid_delay_56;
  reg                 io_dotOut_valid_delay_57;
  reg                 io_dotOut_valid_delay_58;
  reg                 io_dotOut_valid_delay_59;
  reg                 io_dotOut_valid_delay_60;
  reg                 io_dotOut_valid_delay_61;
  reg                 io_dotOut_valid_delay_62;
  reg                 io_dotOut_valid_delay_63;
  reg                 dotOutVldDly;
  reg        [15:0]   io_dotOut_delay_1_tdata;
  reg        [5:0]    io_dotOut_delay_1_tuser;
  reg        [15:0]   io_dotOut_delay_2_tdata;
  reg        [5:0]    io_dotOut_delay_2_tuser;
  reg        [15:0]   io_dotOut_delay_3_tdata;
  reg        [5:0]    io_dotOut_delay_3_tuser;
  reg        [15:0]   io_dotOut_delay_4_tdata;
  reg        [5:0]    io_dotOut_delay_4_tuser;
  reg        [15:0]   io_dotOut_delay_5_tdata;
  reg        [5:0]    io_dotOut_delay_5_tuser;
  reg        [15:0]   io_dotOut_delay_6_tdata;
  reg        [5:0]    io_dotOut_delay_6_tuser;
  reg        [15:0]   io_dotOut_delay_7_tdata;
  reg        [5:0]    io_dotOut_delay_7_tuser;
  reg        [15:0]   io_dotOut_delay_8_tdata;
  reg        [5:0]    io_dotOut_delay_8_tuser;
  reg        [15:0]   io_dotOut_delay_9_tdata;
  reg        [5:0]    io_dotOut_delay_9_tuser;
  reg        [15:0]   io_dotOut_delay_10_tdata;
  reg        [5:0]    io_dotOut_delay_10_tuser;
  reg        [15:0]   io_dotOut_delay_11_tdata;
  reg        [5:0]    io_dotOut_delay_11_tuser;
  reg        [15:0]   io_dotOut_delay_12_tdata;
  reg        [5:0]    io_dotOut_delay_12_tuser;
  reg        [15:0]   io_dotOut_delay_13_tdata;
  reg        [5:0]    io_dotOut_delay_13_tuser;
  reg        [15:0]   io_dotOut_delay_14_tdata;
  reg        [5:0]    io_dotOut_delay_14_tuser;
  reg        [15:0]   io_dotOut_delay_15_tdata;
  reg        [5:0]    io_dotOut_delay_15_tuser;
  reg        [15:0]   io_dotOut_delay_16_tdata;
  reg        [5:0]    io_dotOut_delay_16_tuser;
  reg        [15:0]   io_dotOut_delay_17_tdata;
  reg        [5:0]    io_dotOut_delay_17_tuser;
  reg        [15:0]   io_dotOut_delay_18_tdata;
  reg        [5:0]    io_dotOut_delay_18_tuser;
  reg        [15:0]   io_dotOut_delay_19_tdata;
  reg        [5:0]    io_dotOut_delay_19_tuser;
  reg        [15:0]   io_dotOut_delay_20_tdata;
  reg        [5:0]    io_dotOut_delay_20_tuser;
  reg        [15:0]   io_dotOut_delay_21_tdata;
  reg        [5:0]    io_dotOut_delay_21_tuser;
  reg        [15:0]   io_dotOut_delay_22_tdata;
  reg        [5:0]    io_dotOut_delay_22_tuser;
  reg        [15:0]   io_dotOut_delay_23_tdata;
  reg        [5:0]    io_dotOut_delay_23_tuser;
  reg        [15:0]   io_dotOut_delay_24_tdata;
  reg        [5:0]    io_dotOut_delay_24_tuser;
  reg        [15:0]   io_dotOut_delay_25_tdata;
  reg        [5:0]    io_dotOut_delay_25_tuser;
  reg        [15:0]   io_dotOut_delay_26_tdata;
  reg        [5:0]    io_dotOut_delay_26_tuser;
  reg        [15:0]   io_dotOut_delay_27_tdata;
  reg        [5:0]    io_dotOut_delay_27_tuser;
  reg        [15:0]   io_dotOut_delay_28_tdata;
  reg        [5:0]    io_dotOut_delay_28_tuser;
  reg        [15:0]   io_dotOut_delay_29_tdata;
  reg        [5:0]    io_dotOut_delay_29_tuser;
  reg        [15:0]   io_dotOut_delay_30_tdata;
  reg        [5:0]    io_dotOut_delay_30_tuser;
  reg        [15:0]   io_dotOut_delay_31_tdata;
  reg        [5:0]    io_dotOut_delay_31_tuser;
  reg        [15:0]   io_dotOut_delay_32_tdata;
  reg        [5:0]    io_dotOut_delay_32_tuser;
  reg        [15:0]   io_dotOut_delay_33_tdata;
  reg        [5:0]    io_dotOut_delay_33_tuser;
  reg        [15:0]   io_dotOut_delay_34_tdata;
  reg        [5:0]    io_dotOut_delay_34_tuser;
  reg        [15:0]   io_dotOut_delay_35_tdata;
  reg        [5:0]    io_dotOut_delay_35_tuser;
  reg        [15:0]   io_dotOut_delay_36_tdata;
  reg        [5:0]    io_dotOut_delay_36_tuser;
  reg        [15:0]   io_dotOut_delay_37_tdata;
  reg        [5:0]    io_dotOut_delay_37_tuser;
  reg        [15:0]   io_dotOut_delay_38_tdata;
  reg        [5:0]    io_dotOut_delay_38_tuser;
  reg        [15:0]   io_dotOut_delay_39_tdata;
  reg        [5:0]    io_dotOut_delay_39_tuser;
  reg        [15:0]   io_dotOut_delay_40_tdata;
  reg        [5:0]    io_dotOut_delay_40_tuser;
  reg        [15:0]   io_dotOut_delay_41_tdata;
  reg        [5:0]    io_dotOut_delay_41_tuser;
  reg        [15:0]   io_dotOut_delay_42_tdata;
  reg        [5:0]    io_dotOut_delay_42_tuser;
  reg        [15:0]   io_dotOut_delay_43_tdata;
  reg        [5:0]    io_dotOut_delay_43_tuser;
  reg        [15:0]   io_dotOut_delay_44_tdata;
  reg        [5:0]    io_dotOut_delay_44_tuser;
  reg        [15:0]   io_dotOut_delay_45_tdata;
  reg        [5:0]    io_dotOut_delay_45_tuser;
  reg        [15:0]   io_dotOut_delay_46_tdata;
  reg        [5:0]    io_dotOut_delay_46_tuser;
  reg        [15:0]   io_dotOut_delay_47_tdata;
  reg        [5:0]    io_dotOut_delay_47_tuser;
  reg        [15:0]   io_dotOut_delay_48_tdata;
  reg        [5:0]    io_dotOut_delay_48_tuser;
  reg        [15:0]   io_dotOut_delay_49_tdata;
  reg        [5:0]    io_dotOut_delay_49_tuser;
  reg        [15:0]   io_dotOut_delay_50_tdata;
  reg        [5:0]    io_dotOut_delay_50_tuser;
  reg        [15:0]   io_dotOut_delay_51_tdata;
  reg        [5:0]    io_dotOut_delay_51_tuser;
  reg        [15:0]   io_dotOut_delay_52_tdata;
  reg        [5:0]    io_dotOut_delay_52_tuser;
  reg        [15:0]   io_dotOut_delay_53_tdata;
  reg        [5:0]    io_dotOut_delay_53_tuser;
  reg        [15:0]   io_dotOut_delay_54_tdata;
  reg        [5:0]    io_dotOut_delay_54_tuser;
  reg        [15:0]   io_dotOut_delay_55_tdata;
  reg        [5:0]    io_dotOut_delay_55_tuser;
  reg        [15:0]   io_dotOut_delay_56_tdata;
  reg        [5:0]    io_dotOut_delay_56_tuser;
  reg        [15:0]   io_dotOut_delay_57_tdata;
  reg        [5:0]    io_dotOut_delay_57_tuser;
  reg        [15:0]   io_dotOut_delay_58_tdata;
  reg        [5:0]    io_dotOut_delay_58_tuser;
  reg        [15:0]   io_dotOut_delay_59_tdata;
  reg        [5:0]    io_dotOut_delay_59_tuser;
  reg        [15:0]   io_dotOut_delay_60_tdata;
  reg        [5:0]    io_dotOut_delay_60_tuser;
  reg        [15:0]   io_dotOut_delay_61_tdata;
  reg        [5:0]    io_dotOut_delay_61_tuser;
  reg        [15:0]   io_dotOut_delay_62_tdata;
  reg        [5:0]    io_dotOut_delay_62_tuser;
  reg        [15:0]   io_dotOut_delay_63_tdata;
  reg        [5:0]    io_dotOut_delay_63_tuser;
  reg        [15:0]   dotOutDly_tdata;
  reg        [5:0]    dotOutDly_tuser;
  reg                 dotOutVldDly_delay_1;
  reg                 dotOutVldDly_delay_2;
  reg                 dotOutVldDly_delay_3;
  reg                 dotOutVldDly_delay_4;
  reg                 dotOutVldDly_delay_5;
  reg                 dotOutVldDly_delay_6;
  reg                 dotOutVldDly_delay_7;
  reg                 dotOutVldDly_delay_8;
  reg                 dotOutVldDly_delay_9;
  reg                 dotOutVldDly_delay_10;
  reg                 dotOutVldDly_delay_11;
  reg                 dotOutVldDly_delay_12;
  reg                 dotOutVldDly_delay_13;
  reg                 dotOutVldDly_delay_14;
  reg                 dotOutVldDly_delay_15;
  reg                 dotOutVldDly_delay_16;
  reg                 dotOutVldDly_delay_17;
  reg                 dotOutVldDly_delay_18;
  reg                 dotOutVldDly_delay_19;
  reg                 dotOutVldDly_delay_20;
  reg                 dotOutVldDly_delay_21;
  reg                 dotOutVldDly_delay_22;
  reg                 dotOutVldDly_delay_23;
  reg                 dotOutVldDly_delay_24;
  reg                 dotOutVldDly_delay_25;
  reg                 dotOutVldDly_delay_26;
  reg                 dotOutVldDly_delay_27;
  reg                 dotOutVldDly_delay_28;
  reg                 dotOutVldDly_delay_29;
  reg                 dotOutVldDly_delay_30;
  reg                 dotOutVldDly_delay_31;
  reg                 dotOutVldDly_delay_32;
  reg                 dotOutVldDly_delay_33;
  reg                 dotOutVldDly_delay_34;
  reg                 dotOutVldDly_delay_35;
  reg                 dotOutVldDly_delay_36;
  reg                 dotOutVldDly_delay_37;
  reg                 dotOutVldDly_delay_38;
  reg                 dotOutVldDly_delay_39;
  reg                 dotOutVldDly_delay_40;
  reg                 dotOutVldDly_delay_41;
  reg                 dotOutVldDly_delay_42;
  reg                 dotOutVldDly_delay_43;
  reg                 dotOutVldDly_delay_44;
  reg                 dotOutVldDly_delay_45;
  reg                 dotOutVldDly_delay_46;
  reg                 dotOutVldDly_delay_47;
  reg                 dotOutVldDly_delay_48;
  reg                 dotOutVldDly_delay_49;
  reg                 dotOutVldDly_delay_50;
  reg                 dotOutVldDly_delay_51;
  reg                 dotOutVldDly_delay_52;
  reg                 dotOutVldDly_delay_53;
  reg                 dotOutVldDly_delay_54;
  reg                 dotOutVldDly_delay_55;
  reg                 dotOutVldDly_delay_56;
  reg                 dotOutVldDly_delay_57;
  reg                 dotOutVldDly_delay_58;
  reg                 dotOutVldDly_delay_59;
  reg                 dotOutVldDly_delay_60;
  reg                 dotOutVldDly_delay_61;
  reg                 dotOutVldDly_delay_62;
  reg                 dotOutVldDly_delay_63;
  reg                 dotOutVldDly2;
  reg        [15:0]   dotOutDly_delay_1_tdata;
  reg        [5:0]    dotOutDly_delay_1_tuser;
  reg        [15:0]   dotOutDly_delay_2_tdata;
  reg        [5:0]    dotOutDly_delay_2_tuser;
  reg        [15:0]   dotOutDly_delay_3_tdata;
  reg        [5:0]    dotOutDly_delay_3_tuser;
  reg        [15:0]   dotOutDly_delay_4_tdata;
  reg        [5:0]    dotOutDly_delay_4_tuser;
  reg        [15:0]   dotOutDly_delay_5_tdata;
  reg        [5:0]    dotOutDly_delay_5_tuser;
  reg        [15:0]   dotOutDly_delay_6_tdata;
  reg        [5:0]    dotOutDly_delay_6_tuser;
  reg        [15:0]   dotOutDly_delay_7_tdata;
  reg        [5:0]    dotOutDly_delay_7_tuser;
  reg        [15:0]   dotOutDly_delay_8_tdata;
  reg        [5:0]    dotOutDly_delay_8_tuser;
  reg        [15:0]   dotOutDly_delay_9_tdata;
  reg        [5:0]    dotOutDly_delay_9_tuser;
  reg        [15:0]   dotOutDly_delay_10_tdata;
  reg        [5:0]    dotOutDly_delay_10_tuser;
  reg        [15:0]   dotOutDly_delay_11_tdata;
  reg        [5:0]    dotOutDly_delay_11_tuser;
  reg        [15:0]   dotOutDly_delay_12_tdata;
  reg        [5:0]    dotOutDly_delay_12_tuser;
  reg        [15:0]   dotOutDly_delay_13_tdata;
  reg        [5:0]    dotOutDly_delay_13_tuser;
  reg        [15:0]   dotOutDly_delay_14_tdata;
  reg        [5:0]    dotOutDly_delay_14_tuser;
  reg        [15:0]   dotOutDly_delay_15_tdata;
  reg        [5:0]    dotOutDly_delay_15_tuser;
  reg        [15:0]   dotOutDly_delay_16_tdata;
  reg        [5:0]    dotOutDly_delay_16_tuser;
  reg        [15:0]   dotOutDly_delay_17_tdata;
  reg        [5:0]    dotOutDly_delay_17_tuser;
  reg        [15:0]   dotOutDly_delay_18_tdata;
  reg        [5:0]    dotOutDly_delay_18_tuser;
  reg        [15:0]   dotOutDly_delay_19_tdata;
  reg        [5:0]    dotOutDly_delay_19_tuser;
  reg        [15:0]   dotOutDly_delay_20_tdata;
  reg        [5:0]    dotOutDly_delay_20_tuser;
  reg        [15:0]   dotOutDly_delay_21_tdata;
  reg        [5:0]    dotOutDly_delay_21_tuser;
  reg        [15:0]   dotOutDly_delay_22_tdata;
  reg        [5:0]    dotOutDly_delay_22_tuser;
  reg        [15:0]   dotOutDly_delay_23_tdata;
  reg        [5:0]    dotOutDly_delay_23_tuser;
  reg        [15:0]   dotOutDly_delay_24_tdata;
  reg        [5:0]    dotOutDly_delay_24_tuser;
  reg        [15:0]   dotOutDly_delay_25_tdata;
  reg        [5:0]    dotOutDly_delay_25_tuser;
  reg        [15:0]   dotOutDly_delay_26_tdata;
  reg        [5:0]    dotOutDly_delay_26_tuser;
  reg        [15:0]   dotOutDly_delay_27_tdata;
  reg        [5:0]    dotOutDly_delay_27_tuser;
  reg        [15:0]   dotOutDly_delay_28_tdata;
  reg        [5:0]    dotOutDly_delay_28_tuser;
  reg        [15:0]   dotOutDly_delay_29_tdata;
  reg        [5:0]    dotOutDly_delay_29_tuser;
  reg        [15:0]   dotOutDly_delay_30_tdata;
  reg        [5:0]    dotOutDly_delay_30_tuser;
  reg        [15:0]   dotOutDly_delay_31_tdata;
  reg        [5:0]    dotOutDly_delay_31_tuser;
  reg        [15:0]   dotOutDly_delay_32_tdata;
  reg        [5:0]    dotOutDly_delay_32_tuser;
  reg        [15:0]   dotOutDly_delay_33_tdata;
  reg        [5:0]    dotOutDly_delay_33_tuser;
  reg        [15:0]   dotOutDly_delay_34_tdata;
  reg        [5:0]    dotOutDly_delay_34_tuser;
  reg        [15:0]   dotOutDly_delay_35_tdata;
  reg        [5:0]    dotOutDly_delay_35_tuser;
  reg        [15:0]   dotOutDly_delay_36_tdata;
  reg        [5:0]    dotOutDly_delay_36_tuser;
  reg        [15:0]   dotOutDly_delay_37_tdata;
  reg        [5:0]    dotOutDly_delay_37_tuser;
  reg        [15:0]   dotOutDly_delay_38_tdata;
  reg        [5:0]    dotOutDly_delay_38_tuser;
  reg        [15:0]   dotOutDly_delay_39_tdata;
  reg        [5:0]    dotOutDly_delay_39_tuser;
  reg        [15:0]   dotOutDly_delay_40_tdata;
  reg        [5:0]    dotOutDly_delay_40_tuser;
  reg        [15:0]   dotOutDly_delay_41_tdata;
  reg        [5:0]    dotOutDly_delay_41_tuser;
  reg        [15:0]   dotOutDly_delay_42_tdata;
  reg        [5:0]    dotOutDly_delay_42_tuser;
  reg        [15:0]   dotOutDly_delay_43_tdata;
  reg        [5:0]    dotOutDly_delay_43_tuser;
  reg        [15:0]   dotOutDly_delay_44_tdata;
  reg        [5:0]    dotOutDly_delay_44_tuser;
  reg        [15:0]   dotOutDly_delay_45_tdata;
  reg        [5:0]    dotOutDly_delay_45_tuser;
  reg        [15:0]   dotOutDly_delay_46_tdata;
  reg        [5:0]    dotOutDly_delay_46_tuser;
  reg        [15:0]   dotOutDly_delay_47_tdata;
  reg        [5:0]    dotOutDly_delay_47_tuser;
  reg        [15:0]   dotOutDly_delay_48_tdata;
  reg        [5:0]    dotOutDly_delay_48_tuser;
  reg        [15:0]   dotOutDly_delay_49_tdata;
  reg        [5:0]    dotOutDly_delay_49_tuser;
  reg        [15:0]   dotOutDly_delay_50_tdata;
  reg        [5:0]    dotOutDly_delay_50_tuser;
  reg        [15:0]   dotOutDly_delay_51_tdata;
  reg        [5:0]    dotOutDly_delay_51_tuser;
  reg        [15:0]   dotOutDly_delay_52_tdata;
  reg        [5:0]    dotOutDly_delay_52_tuser;
  reg        [15:0]   dotOutDly_delay_53_tdata;
  reg        [5:0]    dotOutDly_delay_53_tuser;
  reg        [15:0]   dotOutDly_delay_54_tdata;
  reg        [5:0]    dotOutDly_delay_54_tuser;
  reg        [15:0]   dotOutDly_delay_55_tdata;
  reg        [5:0]    dotOutDly_delay_55_tuser;
  reg        [15:0]   dotOutDly_delay_56_tdata;
  reg        [5:0]    dotOutDly_delay_56_tuser;
  reg        [15:0]   dotOutDly_delay_57_tdata;
  reg        [5:0]    dotOutDly_delay_57_tuser;
  reg        [15:0]   dotOutDly_delay_58_tdata;
  reg        [5:0]    dotOutDly_delay_58_tuser;
  reg        [15:0]   dotOutDly_delay_59_tdata;
  reg        [5:0]    dotOutDly_delay_59_tuser;
  reg        [15:0]   dotOutDly_delay_60_tdata;
  reg        [5:0]    dotOutDly_delay_60_tuser;
  reg        [15:0]   dotOutDly_delay_61_tdata;
  reg        [5:0]    dotOutDly_delay_61_tuser;
  reg        [15:0]   dotOutDly_delay_62_tdata;
  reg        [5:0]    dotOutDly_delay_62_tuser;
  reg        [15:0]   dotOutDly_delay_63_tdata;
  reg        [5:0]    dotOutDly_delay_63_tuser;
  reg        [15:0]   dotOutDly2_tdata;
  reg        [5:0]    dotOutDly2_tuser;

  assign t_io_pos = {6'd0, status_token};
  SerialRoPE_1 rope (
    .io_pos           (rope_io_pos[15:0]      ), //i
    .io_input_0_valid (io_dotOut_valid        ), //i
    .io_input_0_tdata (io_dotOut_tdata[15:0]  ), //i
    .io_input_0_tuser (io_dotOut_tuser[5:0]   ), //i
    .output_tvalid    (rope_output_tvalid     ), //o
    .output_tdata     (rope_output_tdata[15:0]), //o
    .output_tuser     (rope_output_tuser[5:0] ), //o
    .clk_0_clk        (clk_0_clk              ), //i
    .clk_0_resetn     (clk_0_resetn           )  //i
  );
  QuantWrapper_1 quant (
    .io_toBeQuant_0_valid           (rope_output_tvalid                       ), //i
    .io_toBeQuant_0_tdata           (rope_output_tdata[15:0]                  ), //i
    .io_toBeQuant_0_tuser           (rope_output_tuser[5:0]                   ), //i
    .io_toBeQuant_1_valid           (dotOutVldDly                             ), //i
    .io_toBeQuant_1_tdata           (dotOutDly_tdata[15:0]                    ), //i
    .io_toBeQuant_1_tuser           (dotOutDly_tuser[5:0]                     ), //i
    .io_quantZero_valid             (quant_io_quantZero_valid                 ), //o
    .io_quantZero_payload           (quant_io_quantZero_payload[7:0]          ), //o
    .io_quantScale_valid            (quant_io_quantScale_valid                ), //o
    .io_quantScale_payload          (quant_io_quantScale_payload[15:0]        ), //o
    .io_afterQuant_valid            (quant_io_afterQuant_valid                ), //o
    .io_afterQuant_payload_last     (quant_io_afterQuant_payload_last         ), //o
    .io_afterQuant_payload_fragment (quant_io_afterQuant_payload_fragment[7:0]), //o
    .clk_0_clk                      (clk_0_clk                                ), //i
    .clk_0_resetn                   (clk_0_resetn                             )  //i
  );
  QKMul_1 qk (
    .io_input_valid  (rope_output_tvalid      ), //i
    .io_input_tdata  (rope_output_tdata[15:0] ), //i
    .io_input_tuser  (rope_output_tuser[5:0]  ), //i
    .io_output_valid (qk_io_output_valid      ), //o
    .io_output_tdata (qk_io_output_tdata[15:0]), //o
    .io_output_tuser (qk_io_output_tuser[5:0] ), //o
    .qProbe_valid    (qk_qProbe_valid         ), //o
    .qProbe_payload  (qk_qProbe_payload[15:0] ), //o
    .clk_0_clk       (clk_0_clk               ), //i
    .clk_0_resetn    (clk_0_resetn            )  //i
  );
  SerialSafeSoftmax_1 softmax (
    .io_input_0_valid        (dotOutVldDly2                        ), //i
    .io_input_0_tdata        (dotOutDly2_tdata[15:0]               ), //i
    .io_input_0_tuser        (dotOutDly2_tuser[5:0]                ), //i
    .io_input_1_valid        (qk_io_output_valid                   ), //i
    .io_input_1_tdata        (qk_io_output_tdata[15:0]             ), //i
    .io_input_1_tuser        (qk_io_output_tuser[5:0]              ), //i
    .io_output_valid         (softmax_io_output_valid              ), //o
    .io_output_payload_last  (softmax_io_output_payload_last       ), //o
    .io_output_payload_tdata (softmax_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (softmax_io_output_payload_tuser[5:0] ), //o
    .io_seqLen_valid         (1'b1                                 ), //i
    .io_seqLen_ready         (softmax_io_seqLen_ready              ), //o
    .io_seqLen_payload       (softmax_io_seqLen_payload[9:0]       ), //i
    .clk_0_clk               (clk_0_clk                            ), //i
    .clk_0_resetn            (clk_0_resetn                         )  //i
  );
  assign io_quantZero_valid = quant_io_quantZero_valid;
  assign io_quantZero_payload = quant_io_quantZero_payload;
  assign io_quantScale_valid = quant_io_quantScale_valid;
  assign io_quantScale_payload = quant_io_quantScale_payload;
  assign io_afterQuant_valid = quant_io_afterQuant_valid;
  assign io_afterQuant_payload_last = quant_io_afterQuant_payload_last;
  assign io_afterQuant_payload_fragment = quant_io_afterQuant_payload_fragment;
  assign softmax_io_seqLen_payload = status_token;
  assign io_softmaxOut_valid = softmax_io_output_valid;
  assign io_softmaxOut_payload_last = softmax_io_output_payload_last;
  assign io_softmaxOut_payload_tdata = softmax_io_output_payload_tdata;
  assign io_softmaxOut_payload_tuser = softmax_io_output_payload_tuser;
  assign rope_io_pos = t_io_pos;
  assign io_ropeOut_valid = rope_output_tvalid;
  assign io_ropeOut_tdata = rope_output_tdata;
  assign io_ropeOut_tuser = rope_output_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      io_dotOut_valid_delay_1 <= 1'b0;
      io_dotOut_valid_delay_2 <= 1'b0;
      io_dotOut_valid_delay_3 <= 1'b0;
      io_dotOut_valid_delay_4 <= 1'b0;
      io_dotOut_valid_delay_5 <= 1'b0;
      io_dotOut_valid_delay_6 <= 1'b0;
      io_dotOut_valid_delay_7 <= 1'b0;
      io_dotOut_valid_delay_8 <= 1'b0;
      io_dotOut_valid_delay_9 <= 1'b0;
      io_dotOut_valid_delay_10 <= 1'b0;
      io_dotOut_valid_delay_11 <= 1'b0;
      io_dotOut_valid_delay_12 <= 1'b0;
      io_dotOut_valid_delay_13 <= 1'b0;
      io_dotOut_valid_delay_14 <= 1'b0;
      io_dotOut_valid_delay_15 <= 1'b0;
      io_dotOut_valid_delay_16 <= 1'b0;
      io_dotOut_valid_delay_17 <= 1'b0;
      io_dotOut_valid_delay_18 <= 1'b0;
      io_dotOut_valid_delay_19 <= 1'b0;
      io_dotOut_valid_delay_20 <= 1'b0;
      io_dotOut_valid_delay_21 <= 1'b0;
      io_dotOut_valid_delay_22 <= 1'b0;
      io_dotOut_valid_delay_23 <= 1'b0;
      io_dotOut_valid_delay_24 <= 1'b0;
      io_dotOut_valid_delay_25 <= 1'b0;
      io_dotOut_valid_delay_26 <= 1'b0;
      io_dotOut_valid_delay_27 <= 1'b0;
      io_dotOut_valid_delay_28 <= 1'b0;
      io_dotOut_valid_delay_29 <= 1'b0;
      io_dotOut_valid_delay_30 <= 1'b0;
      io_dotOut_valid_delay_31 <= 1'b0;
      io_dotOut_valid_delay_32 <= 1'b0;
      io_dotOut_valid_delay_33 <= 1'b0;
      io_dotOut_valid_delay_34 <= 1'b0;
      io_dotOut_valid_delay_35 <= 1'b0;
      io_dotOut_valid_delay_36 <= 1'b0;
      io_dotOut_valid_delay_37 <= 1'b0;
      io_dotOut_valid_delay_38 <= 1'b0;
      io_dotOut_valid_delay_39 <= 1'b0;
      io_dotOut_valid_delay_40 <= 1'b0;
      io_dotOut_valid_delay_41 <= 1'b0;
      io_dotOut_valid_delay_42 <= 1'b0;
      io_dotOut_valid_delay_43 <= 1'b0;
      io_dotOut_valid_delay_44 <= 1'b0;
      io_dotOut_valid_delay_45 <= 1'b0;
      io_dotOut_valid_delay_46 <= 1'b0;
      io_dotOut_valid_delay_47 <= 1'b0;
      io_dotOut_valid_delay_48 <= 1'b0;
      io_dotOut_valid_delay_49 <= 1'b0;
      io_dotOut_valid_delay_50 <= 1'b0;
      io_dotOut_valid_delay_51 <= 1'b0;
      io_dotOut_valid_delay_52 <= 1'b0;
      io_dotOut_valid_delay_53 <= 1'b0;
      io_dotOut_valid_delay_54 <= 1'b0;
      io_dotOut_valid_delay_55 <= 1'b0;
      io_dotOut_valid_delay_56 <= 1'b0;
      io_dotOut_valid_delay_57 <= 1'b0;
      io_dotOut_valid_delay_58 <= 1'b0;
      io_dotOut_valid_delay_59 <= 1'b0;
      io_dotOut_valid_delay_60 <= 1'b0;
      io_dotOut_valid_delay_61 <= 1'b0;
      io_dotOut_valid_delay_62 <= 1'b0;
      io_dotOut_valid_delay_63 <= 1'b0;
      dotOutVldDly <= 1'b0;
      dotOutVldDly_delay_1 <= 1'b0;
      dotOutVldDly_delay_2 <= 1'b0;
      dotOutVldDly_delay_3 <= 1'b0;
      dotOutVldDly_delay_4 <= 1'b0;
      dotOutVldDly_delay_5 <= 1'b0;
      dotOutVldDly_delay_6 <= 1'b0;
      dotOutVldDly_delay_7 <= 1'b0;
      dotOutVldDly_delay_8 <= 1'b0;
      dotOutVldDly_delay_9 <= 1'b0;
      dotOutVldDly_delay_10 <= 1'b0;
      dotOutVldDly_delay_11 <= 1'b0;
      dotOutVldDly_delay_12 <= 1'b0;
      dotOutVldDly_delay_13 <= 1'b0;
      dotOutVldDly_delay_14 <= 1'b0;
      dotOutVldDly_delay_15 <= 1'b0;
      dotOutVldDly_delay_16 <= 1'b0;
      dotOutVldDly_delay_17 <= 1'b0;
      dotOutVldDly_delay_18 <= 1'b0;
      dotOutVldDly_delay_19 <= 1'b0;
      dotOutVldDly_delay_20 <= 1'b0;
      dotOutVldDly_delay_21 <= 1'b0;
      dotOutVldDly_delay_22 <= 1'b0;
      dotOutVldDly_delay_23 <= 1'b0;
      dotOutVldDly_delay_24 <= 1'b0;
      dotOutVldDly_delay_25 <= 1'b0;
      dotOutVldDly_delay_26 <= 1'b0;
      dotOutVldDly_delay_27 <= 1'b0;
      dotOutVldDly_delay_28 <= 1'b0;
      dotOutVldDly_delay_29 <= 1'b0;
      dotOutVldDly_delay_30 <= 1'b0;
      dotOutVldDly_delay_31 <= 1'b0;
      dotOutVldDly_delay_32 <= 1'b0;
      dotOutVldDly_delay_33 <= 1'b0;
      dotOutVldDly_delay_34 <= 1'b0;
      dotOutVldDly_delay_35 <= 1'b0;
      dotOutVldDly_delay_36 <= 1'b0;
      dotOutVldDly_delay_37 <= 1'b0;
      dotOutVldDly_delay_38 <= 1'b0;
      dotOutVldDly_delay_39 <= 1'b0;
      dotOutVldDly_delay_40 <= 1'b0;
      dotOutVldDly_delay_41 <= 1'b0;
      dotOutVldDly_delay_42 <= 1'b0;
      dotOutVldDly_delay_43 <= 1'b0;
      dotOutVldDly_delay_44 <= 1'b0;
      dotOutVldDly_delay_45 <= 1'b0;
      dotOutVldDly_delay_46 <= 1'b0;
      dotOutVldDly_delay_47 <= 1'b0;
      dotOutVldDly_delay_48 <= 1'b0;
      dotOutVldDly_delay_49 <= 1'b0;
      dotOutVldDly_delay_50 <= 1'b0;
      dotOutVldDly_delay_51 <= 1'b0;
      dotOutVldDly_delay_52 <= 1'b0;
      dotOutVldDly_delay_53 <= 1'b0;
      dotOutVldDly_delay_54 <= 1'b0;
      dotOutVldDly_delay_55 <= 1'b0;
      dotOutVldDly_delay_56 <= 1'b0;
      dotOutVldDly_delay_57 <= 1'b0;
      dotOutVldDly_delay_58 <= 1'b0;
      dotOutVldDly_delay_59 <= 1'b0;
      dotOutVldDly_delay_60 <= 1'b0;
      dotOutVldDly_delay_61 <= 1'b0;
      dotOutVldDly_delay_62 <= 1'b0;
      dotOutVldDly_delay_63 <= 1'b0;
      dotOutVldDly2 <= 1'b0;
    end else begin
      io_dotOut_valid_delay_1 <= io_dotOut_valid;
      io_dotOut_valid_delay_2 <= io_dotOut_valid_delay_1;
      io_dotOut_valid_delay_3 <= io_dotOut_valid_delay_2;
      io_dotOut_valid_delay_4 <= io_dotOut_valid_delay_3;
      io_dotOut_valid_delay_5 <= io_dotOut_valid_delay_4;
      io_dotOut_valid_delay_6 <= io_dotOut_valid_delay_5;
      io_dotOut_valid_delay_7 <= io_dotOut_valid_delay_6;
      io_dotOut_valid_delay_8 <= io_dotOut_valid_delay_7;
      io_dotOut_valid_delay_9 <= io_dotOut_valid_delay_8;
      io_dotOut_valid_delay_10 <= io_dotOut_valid_delay_9;
      io_dotOut_valid_delay_11 <= io_dotOut_valid_delay_10;
      io_dotOut_valid_delay_12 <= io_dotOut_valid_delay_11;
      io_dotOut_valid_delay_13 <= io_dotOut_valid_delay_12;
      io_dotOut_valid_delay_14 <= io_dotOut_valid_delay_13;
      io_dotOut_valid_delay_15 <= io_dotOut_valid_delay_14;
      io_dotOut_valid_delay_16 <= io_dotOut_valid_delay_15;
      io_dotOut_valid_delay_17 <= io_dotOut_valid_delay_16;
      io_dotOut_valid_delay_18 <= io_dotOut_valid_delay_17;
      io_dotOut_valid_delay_19 <= io_dotOut_valid_delay_18;
      io_dotOut_valid_delay_20 <= io_dotOut_valid_delay_19;
      io_dotOut_valid_delay_21 <= io_dotOut_valid_delay_20;
      io_dotOut_valid_delay_22 <= io_dotOut_valid_delay_21;
      io_dotOut_valid_delay_23 <= io_dotOut_valid_delay_22;
      io_dotOut_valid_delay_24 <= io_dotOut_valid_delay_23;
      io_dotOut_valid_delay_25 <= io_dotOut_valid_delay_24;
      io_dotOut_valid_delay_26 <= io_dotOut_valid_delay_25;
      io_dotOut_valid_delay_27 <= io_dotOut_valid_delay_26;
      io_dotOut_valid_delay_28 <= io_dotOut_valid_delay_27;
      io_dotOut_valid_delay_29 <= io_dotOut_valid_delay_28;
      io_dotOut_valid_delay_30 <= io_dotOut_valid_delay_29;
      io_dotOut_valid_delay_31 <= io_dotOut_valid_delay_30;
      io_dotOut_valid_delay_32 <= io_dotOut_valid_delay_31;
      io_dotOut_valid_delay_33 <= io_dotOut_valid_delay_32;
      io_dotOut_valid_delay_34 <= io_dotOut_valid_delay_33;
      io_dotOut_valid_delay_35 <= io_dotOut_valid_delay_34;
      io_dotOut_valid_delay_36 <= io_dotOut_valid_delay_35;
      io_dotOut_valid_delay_37 <= io_dotOut_valid_delay_36;
      io_dotOut_valid_delay_38 <= io_dotOut_valid_delay_37;
      io_dotOut_valid_delay_39 <= io_dotOut_valid_delay_38;
      io_dotOut_valid_delay_40 <= io_dotOut_valid_delay_39;
      io_dotOut_valid_delay_41 <= io_dotOut_valid_delay_40;
      io_dotOut_valid_delay_42 <= io_dotOut_valid_delay_41;
      io_dotOut_valid_delay_43 <= io_dotOut_valid_delay_42;
      io_dotOut_valid_delay_44 <= io_dotOut_valid_delay_43;
      io_dotOut_valid_delay_45 <= io_dotOut_valid_delay_44;
      io_dotOut_valid_delay_46 <= io_dotOut_valid_delay_45;
      io_dotOut_valid_delay_47 <= io_dotOut_valid_delay_46;
      io_dotOut_valid_delay_48 <= io_dotOut_valid_delay_47;
      io_dotOut_valid_delay_49 <= io_dotOut_valid_delay_48;
      io_dotOut_valid_delay_50 <= io_dotOut_valid_delay_49;
      io_dotOut_valid_delay_51 <= io_dotOut_valid_delay_50;
      io_dotOut_valid_delay_52 <= io_dotOut_valid_delay_51;
      io_dotOut_valid_delay_53 <= io_dotOut_valid_delay_52;
      io_dotOut_valid_delay_54 <= io_dotOut_valid_delay_53;
      io_dotOut_valid_delay_55 <= io_dotOut_valid_delay_54;
      io_dotOut_valid_delay_56 <= io_dotOut_valid_delay_55;
      io_dotOut_valid_delay_57 <= io_dotOut_valid_delay_56;
      io_dotOut_valid_delay_58 <= io_dotOut_valid_delay_57;
      io_dotOut_valid_delay_59 <= io_dotOut_valid_delay_58;
      io_dotOut_valid_delay_60 <= io_dotOut_valid_delay_59;
      io_dotOut_valid_delay_61 <= io_dotOut_valid_delay_60;
      io_dotOut_valid_delay_62 <= io_dotOut_valid_delay_61;
      io_dotOut_valid_delay_63 <= io_dotOut_valid_delay_62;
      dotOutVldDly <= io_dotOut_valid_delay_63;
      dotOutVldDly_delay_1 <= dotOutVldDly;
      dotOutVldDly_delay_2 <= dotOutVldDly_delay_1;
      dotOutVldDly_delay_3 <= dotOutVldDly_delay_2;
      dotOutVldDly_delay_4 <= dotOutVldDly_delay_3;
      dotOutVldDly_delay_5 <= dotOutVldDly_delay_4;
      dotOutVldDly_delay_6 <= dotOutVldDly_delay_5;
      dotOutVldDly_delay_7 <= dotOutVldDly_delay_6;
      dotOutVldDly_delay_8 <= dotOutVldDly_delay_7;
      dotOutVldDly_delay_9 <= dotOutVldDly_delay_8;
      dotOutVldDly_delay_10 <= dotOutVldDly_delay_9;
      dotOutVldDly_delay_11 <= dotOutVldDly_delay_10;
      dotOutVldDly_delay_12 <= dotOutVldDly_delay_11;
      dotOutVldDly_delay_13 <= dotOutVldDly_delay_12;
      dotOutVldDly_delay_14 <= dotOutVldDly_delay_13;
      dotOutVldDly_delay_15 <= dotOutVldDly_delay_14;
      dotOutVldDly_delay_16 <= dotOutVldDly_delay_15;
      dotOutVldDly_delay_17 <= dotOutVldDly_delay_16;
      dotOutVldDly_delay_18 <= dotOutVldDly_delay_17;
      dotOutVldDly_delay_19 <= dotOutVldDly_delay_18;
      dotOutVldDly_delay_20 <= dotOutVldDly_delay_19;
      dotOutVldDly_delay_21 <= dotOutVldDly_delay_20;
      dotOutVldDly_delay_22 <= dotOutVldDly_delay_21;
      dotOutVldDly_delay_23 <= dotOutVldDly_delay_22;
      dotOutVldDly_delay_24 <= dotOutVldDly_delay_23;
      dotOutVldDly_delay_25 <= dotOutVldDly_delay_24;
      dotOutVldDly_delay_26 <= dotOutVldDly_delay_25;
      dotOutVldDly_delay_27 <= dotOutVldDly_delay_26;
      dotOutVldDly_delay_28 <= dotOutVldDly_delay_27;
      dotOutVldDly_delay_29 <= dotOutVldDly_delay_28;
      dotOutVldDly_delay_30 <= dotOutVldDly_delay_29;
      dotOutVldDly_delay_31 <= dotOutVldDly_delay_30;
      dotOutVldDly_delay_32 <= dotOutVldDly_delay_31;
      dotOutVldDly_delay_33 <= dotOutVldDly_delay_32;
      dotOutVldDly_delay_34 <= dotOutVldDly_delay_33;
      dotOutVldDly_delay_35 <= dotOutVldDly_delay_34;
      dotOutVldDly_delay_36 <= dotOutVldDly_delay_35;
      dotOutVldDly_delay_37 <= dotOutVldDly_delay_36;
      dotOutVldDly_delay_38 <= dotOutVldDly_delay_37;
      dotOutVldDly_delay_39 <= dotOutVldDly_delay_38;
      dotOutVldDly_delay_40 <= dotOutVldDly_delay_39;
      dotOutVldDly_delay_41 <= dotOutVldDly_delay_40;
      dotOutVldDly_delay_42 <= dotOutVldDly_delay_41;
      dotOutVldDly_delay_43 <= dotOutVldDly_delay_42;
      dotOutVldDly_delay_44 <= dotOutVldDly_delay_43;
      dotOutVldDly_delay_45 <= dotOutVldDly_delay_44;
      dotOutVldDly_delay_46 <= dotOutVldDly_delay_45;
      dotOutVldDly_delay_47 <= dotOutVldDly_delay_46;
      dotOutVldDly_delay_48 <= dotOutVldDly_delay_47;
      dotOutVldDly_delay_49 <= dotOutVldDly_delay_48;
      dotOutVldDly_delay_50 <= dotOutVldDly_delay_49;
      dotOutVldDly_delay_51 <= dotOutVldDly_delay_50;
      dotOutVldDly_delay_52 <= dotOutVldDly_delay_51;
      dotOutVldDly_delay_53 <= dotOutVldDly_delay_52;
      dotOutVldDly_delay_54 <= dotOutVldDly_delay_53;
      dotOutVldDly_delay_55 <= dotOutVldDly_delay_54;
      dotOutVldDly_delay_56 <= dotOutVldDly_delay_55;
      dotOutVldDly_delay_57 <= dotOutVldDly_delay_56;
      dotOutVldDly_delay_58 <= dotOutVldDly_delay_57;
      dotOutVldDly_delay_59 <= dotOutVldDly_delay_58;
      dotOutVldDly_delay_60 <= dotOutVldDly_delay_59;
      dotOutVldDly_delay_61 <= dotOutVldDly_delay_60;
      dotOutVldDly_delay_62 <= dotOutVldDly_delay_61;
      dotOutVldDly_delay_63 <= dotOutVldDly_delay_62;
      dotOutVldDly2 <= dotOutVldDly_delay_63;
    end
  end

  always @(posedge clk_0_clk) begin
    io_dotOut_delay_1_tdata <= io_dotOut_tdata;
    io_dotOut_delay_1_tuser <= io_dotOut_tuser;
    io_dotOut_delay_2_tdata <= io_dotOut_delay_1_tdata;
    io_dotOut_delay_2_tuser <= io_dotOut_delay_1_tuser;
    io_dotOut_delay_3_tdata <= io_dotOut_delay_2_tdata;
    io_dotOut_delay_3_tuser <= io_dotOut_delay_2_tuser;
    io_dotOut_delay_4_tdata <= io_dotOut_delay_3_tdata;
    io_dotOut_delay_4_tuser <= io_dotOut_delay_3_tuser;
    io_dotOut_delay_5_tdata <= io_dotOut_delay_4_tdata;
    io_dotOut_delay_5_tuser <= io_dotOut_delay_4_tuser;
    io_dotOut_delay_6_tdata <= io_dotOut_delay_5_tdata;
    io_dotOut_delay_6_tuser <= io_dotOut_delay_5_tuser;
    io_dotOut_delay_7_tdata <= io_dotOut_delay_6_tdata;
    io_dotOut_delay_7_tuser <= io_dotOut_delay_6_tuser;
    io_dotOut_delay_8_tdata <= io_dotOut_delay_7_tdata;
    io_dotOut_delay_8_tuser <= io_dotOut_delay_7_tuser;
    io_dotOut_delay_9_tdata <= io_dotOut_delay_8_tdata;
    io_dotOut_delay_9_tuser <= io_dotOut_delay_8_tuser;
    io_dotOut_delay_10_tdata <= io_dotOut_delay_9_tdata;
    io_dotOut_delay_10_tuser <= io_dotOut_delay_9_tuser;
    io_dotOut_delay_11_tdata <= io_dotOut_delay_10_tdata;
    io_dotOut_delay_11_tuser <= io_dotOut_delay_10_tuser;
    io_dotOut_delay_12_tdata <= io_dotOut_delay_11_tdata;
    io_dotOut_delay_12_tuser <= io_dotOut_delay_11_tuser;
    io_dotOut_delay_13_tdata <= io_dotOut_delay_12_tdata;
    io_dotOut_delay_13_tuser <= io_dotOut_delay_12_tuser;
    io_dotOut_delay_14_tdata <= io_dotOut_delay_13_tdata;
    io_dotOut_delay_14_tuser <= io_dotOut_delay_13_tuser;
    io_dotOut_delay_15_tdata <= io_dotOut_delay_14_tdata;
    io_dotOut_delay_15_tuser <= io_dotOut_delay_14_tuser;
    io_dotOut_delay_16_tdata <= io_dotOut_delay_15_tdata;
    io_dotOut_delay_16_tuser <= io_dotOut_delay_15_tuser;
    io_dotOut_delay_17_tdata <= io_dotOut_delay_16_tdata;
    io_dotOut_delay_17_tuser <= io_dotOut_delay_16_tuser;
    io_dotOut_delay_18_tdata <= io_dotOut_delay_17_tdata;
    io_dotOut_delay_18_tuser <= io_dotOut_delay_17_tuser;
    io_dotOut_delay_19_tdata <= io_dotOut_delay_18_tdata;
    io_dotOut_delay_19_tuser <= io_dotOut_delay_18_tuser;
    io_dotOut_delay_20_tdata <= io_dotOut_delay_19_tdata;
    io_dotOut_delay_20_tuser <= io_dotOut_delay_19_tuser;
    io_dotOut_delay_21_tdata <= io_dotOut_delay_20_tdata;
    io_dotOut_delay_21_tuser <= io_dotOut_delay_20_tuser;
    io_dotOut_delay_22_tdata <= io_dotOut_delay_21_tdata;
    io_dotOut_delay_22_tuser <= io_dotOut_delay_21_tuser;
    io_dotOut_delay_23_tdata <= io_dotOut_delay_22_tdata;
    io_dotOut_delay_23_tuser <= io_dotOut_delay_22_tuser;
    io_dotOut_delay_24_tdata <= io_dotOut_delay_23_tdata;
    io_dotOut_delay_24_tuser <= io_dotOut_delay_23_tuser;
    io_dotOut_delay_25_tdata <= io_dotOut_delay_24_tdata;
    io_dotOut_delay_25_tuser <= io_dotOut_delay_24_tuser;
    io_dotOut_delay_26_tdata <= io_dotOut_delay_25_tdata;
    io_dotOut_delay_26_tuser <= io_dotOut_delay_25_tuser;
    io_dotOut_delay_27_tdata <= io_dotOut_delay_26_tdata;
    io_dotOut_delay_27_tuser <= io_dotOut_delay_26_tuser;
    io_dotOut_delay_28_tdata <= io_dotOut_delay_27_tdata;
    io_dotOut_delay_28_tuser <= io_dotOut_delay_27_tuser;
    io_dotOut_delay_29_tdata <= io_dotOut_delay_28_tdata;
    io_dotOut_delay_29_tuser <= io_dotOut_delay_28_tuser;
    io_dotOut_delay_30_tdata <= io_dotOut_delay_29_tdata;
    io_dotOut_delay_30_tuser <= io_dotOut_delay_29_tuser;
    io_dotOut_delay_31_tdata <= io_dotOut_delay_30_tdata;
    io_dotOut_delay_31_tuser <= io_dotOut_delay_30_tuser;
    io_dotOut_delay_32_tdata <= io_dotOut_delay_31_tdata;
    io_dotOut_delay_32_tuser <= io_dotOut_delay_31_tuser;
    io_dotOut_delay_33_tdata <= io_dotOut_delay_32_tdata;
    io_dotOut_delay_33_tuser <= io_dotOut_delay_32_tuser;
    io_dotOut_delay_34_tdata <= io_dotOut_delay_33_tdata;
    io_dotOut_delay_34_tuser <= io_dotOut_delay_33_tuser;
    io_dotOut_delay_35_tdata <= io_dotOut_delay_34_tdata;
    io_dotOut_delay_35_tuser <= io_dotOut_delay_34_tuser;
    io_dotOut_delay_36_tdata <= io_dotOut_delay_35_tdata;
    io_dotOut_delay_36_tuser <= io_dotOut_delay_35_tuser;
    io_dotOut_delay_37_tdata <= io_dotOut_delay_36_tdata;
    io_dotOut_delay_37_tuser <= io_dotOut_delay_36_tuser;
    io_dotOut_delay_38_tdata <= io_dotOut_delay_37_tdata;
    io_dotOut_delay_38_tuser <= io_dotOut_delay_37_tuser;
    io_dotOut_delay_39_tdata <= io_dotOut_delay_38_tdata;
    io_dotOut_delay_39_tuser <= io_dotOut_delay_38_tuser;
    io_dotOut_delay_40_tdata <= io_dotOut_delay_39_tdata;
    io_dotOut_delay_40_tuser <= io_dotOut_delay_39_tuser;
    io_dotOut_delay_41_tdata <= io_dotOut_delay_40_tdata;
    io_dotOut_delay_41_tuser <= io_dotOut_delay_40_tuser;
    io_dotOut_delay_42_tdata <= io_dotOut_delay_41_tdata;
    io_dotOut_delay_42_tuser <= io_dotOut_delay_41_tuser;
    io_dotOut_delay_43_tdata <= io_dotOut_delay_42_tdata;
    io_dotOut_delay_43_tuser <= io_dotOut_delay_42_tuser;
    io_dotOut_delay_44_tdata <= io_dotOut_delay_43_tdata;
    io_dotOut_delay_44_tuser <= io_dotOut_delay_43_tuser;
    io_dotOut_delay_45_tdata <= io_dotOut_delay_44_tdata;
    io_dotOut_delay_45_tuser <= io_dotOut_delay_44_tuser;
    io_dotOut_delay_46_tdata <= io_dotOut_delay_45_tdata;
    io_dotOut_delay_46_tuser <= io_dotOut_delay_45_tuser;
    io_dotOut_delay_47_tdata <= io_dotOut_delay_46_tdata;
    io_dotOut_delay_47_tuser <= io_dotOut_delay_46_tuser;
    io_dotOut_delay_48_tdata <= io_dotOut_delay_47_tdata;
    io_dotOut_delay_48_tuser <= io_dotOut_delay_47_tuser;
    io_dotOut_delay_49_tdata <= io_dotOut_delay_48_tdata;
    io_dotOut_delay_49_tuser <= io_dotOut_delay_48_tuser;
    io_dotOut_delay_50_tdata <= io_dotOut_delay_49_tdata;
    io_dotOut_delay_50_tuser <= io_dotOut_delay_49_tuser;
    io_dotOut_delay_51_tdata <= io_dotOut_delay_50_tdata;
    io_dotOut_delay_51_tuser <= io_dotOut_delay_50_tuser;
    io_dotOut_delay_52_tdata <= io_dotOut_delay_51_tdata;
    io_dotOut_delay_52_tuser <= io_dotOut_delay_51_tuser;
    io_dotOut_delay_53_tdata <= io_dotOut_delay_52_tdata;
    io_dotOut_delay_53_tuser <= io_dotOut_delay_52_tuser;
    io_dotOut_delay_54_tdata <= io_dotOut_delay_53_tdata;
    io_dotOut_delay_54_tuser <= io_dotOut_delay_53_tuser;
    io_dotOut_delay_55_tdata <= io_dotOut_delay_54_tdata;
    io_dotOut_delay_55_tuser <= io_dotOut_delay_54_tuser;
    io_dotOut_delay_56_tdata <= io_dotOut_delay_55_tdata;
    io_dotOut_delay_56_tuser <= io_dotOut_delay_55_tuser;
    io_dotOut_delay_57_tdata <= io_dotOut_delay_56_tdata;
    io_dotOut_delay_57_tuser <= io_dotOut_delay_56_tuser;
    io_dotOut_delay_58_tdata <= io_dotOut_delay_57_tdata;
    io_dotOut_delay_58_tuser <= io_dotOut_delay_57_tuser;
    io_dotOut_delay_59_tdata <= io_dotOut_delay_58_tdata;
    io_dotOut_delay_59_tuser <= io_dotOut_delay_58_tuser;
    io_dotOut_delay_60_tdata <= io_dotOut_delay_59_tdata;
    io_dotOut_delay_60_tuser <= io_dotOut_delay_59_tuser;
    io_dotOut_delay_61_tdata <= io_dotOut_delay_60_tdata;
    io_dotOut_delay_61_tuser <= io_dotOut_delay_60_tuser;
    io_dotOut_delay_62_tdata <= io_dotOut_delay_61_tdata;
    io_dotOut_delay_62_tuser <= io_dotOut_delay_61_tuser;
    io_dotOut_delay_63_tdata <= io_dotOut_delay_62_tdata;
    io_dotOut_delay_63_tuser <= io_dotOut_delay_62_tuser;
    dotOutDly_tdata <= io_dotOut_delay_63_tdata;
    dotOutDly_tuser <= io_dotOut_delay_63_tuser;
    dotOutDly_delay_1_tdata <= dotOutDly_tdata;
    dotOutDly_delay_1_tuser <= dotOutDly_tuser;
    dotOutDly_delay_2_tdata <= dotOutDly_delay_1_tdata;
    dotOutDly_delay_2_tuser <= dotOutDly_delay_1_tuser;
    dotOutDly_delay_3_tdata <= dotOutDly_delay_2_tdata;
    dotOutDly_delay_3_tuser <= dotOutDly_delay_2_tuser;
    dotOutDly_delay_4_tdata <= dotOutDly_delay_3_tdata;
    dotOutDly_delay_4_tuser <= dotOutDly_delay_3_tuser;
    dotOutDly_delay_5_tdata <= dotOutDly_delay_4_tdata;
    dotOutDly_delay_5_tuser <= dotOutDly_delay_4_tuser;
    dotOutDly_delay_6_tdata <= dotOutDly_delay_5_tdata;
    dotOutDly_delay_6_tuser <= dotOutDly_delay_5_tuser;
    dotOutDly_delay_7_tdata <= dotOutDly_delay_6_tdata;
    dotOutDly_delay_7_tuser <= dotOutDly_delay_6_tuser;
    dotOutDly_delay_8_tdata <= dotOutDly_delay_7_tdata;
    dotOutDly_delay_8_tuser <= dotOutDly_delay_7_tuser;
    dotOutDly_delay_9_tdata <= dotOutDly_delay_8_tdata;
    dotOutDly_delay_9_tuser <= dotOutDly_delay_8_tuser;
    dotOutDly_delay_10_tdata <= dotOutDly_delay_9_tdata;
    dotOutDly_delay_10_tuser <= dotOutDly_delay_9_tuser;
    dotOutDly_delay_11_tdata <= dotOutDly_delay_10_tdata;
    dotOutDly_delay_11_tuser <= dotOutDly_delay_10_tuser;
    dotOutDly_delay_12_tdata <= dotOutDly_delay_11_tdata;
    dotOutDly_delay_12_tuser <= dotOutDly_delay_11_tuser;
    dotOutDly_delay_13_tdata <= dotOutDly_delay_12_tdata;
    dotOutDly_delay_13_tuser <= dotOutDly_delay_12_tuser;
    dotOutDly_delay_14_tdata <= dotOutDly_delay_13_tdata;
    dotOutDly_delay_14_tuser <= dotOutDly_delay_13_tuser;
    dotOutDly_delay_15_tdata <= dotOutDly_delay_14_tdata;
    dotOutDly_delay_15_tuser <= dotOutDly_delay_14_tuser;
    dotOutDly_delay_16_tdata <= dotOutDly_delay_15_tdata;
    dotOutDly_delay_16_tuser <= dotOutDly_delay_15_tuser;
    dotOutDly_delay_17_tdata <= dotOutDly_delay_16_tdata;
    dotOutDly_delay_17_tuser <= dotOutDly_delay_16_tuser;
    dotOutDly_delay_18_tdata <= dotOutDly_delay_17_tdata;
    dotOutDly_delay_18_tuser <= dotOutDly_delay_17_tuser;
    dotOutDly_delay_19_tdata <= dotOutDly_delay_18_tdata;
    dotOutDly_delay_19_tuser <= dotOutDly_delay_18_tuser;
    dotOutDly_delay_20_tdata <= dotOutDly_delay_19_tdata;
    dotOutDly_delay_20_tuser <= dotOutDly_delay_19_tuser;
    dotOutDly_delay_21_tdata <= dotOutDly_delay_20_tdata;
    dotOutDly_delay_21_tuser <= dotOutDly_delay_20_tuser;
    dotOutDly_delay_22_tdata <= dotOutDly_delay_21_tdata;
    dotOutDly_delay_22_tuser <= dotOutDly_delay_21_tuser;
    dotOutDly_delay_23_tdata <= dotOutDly_delay_22_tdata;
    dotOutDly_delay_23_tuser <= dotOutDly_delay_22_tuser;
    dotOutDly_delay_24_tdata <= dotOutDly_delay_23_tdata;
    dotOutDly_delay_24_tuser <= dotOutDly_delay_23_tuser;
    dotOutDly_delay_25_tdata <= dotOutDly_delay_24_tdata;
    dotOutDly_delay_25_tuser <= dotOutDly_delay_24_tuser;
    dotOutDly_delay_26_tdata <= dotOutDly_delay_25_tdata;
    dotOutDly_delay_26_tuser <= dotOutDly_delay_25_tuser;
    dotOutDly_delay_27_tdata <= dotOutDly_delay_26_tdata;
    dotOutDly_delay_27_tuser <= dotOutDly_delay_26_tuser;
    dotOutDly_delay_28_tdata <= dotOutDly_delay_27_tdata;
    dotOutDly_delay_28_tuser <= dotOutDly_delay_27_tuser;
    dotOutDly_delay_29_tdata <= dotOutDly_delay_28_tdata;
    dotOutDly_delay_29_tuser <= dotOutDly_delay_28_tuser;
    dotOutDly_delay_30_tdata <= dotOutDly_delay_29_tdata;
    dotOutDly_delay_30_tuser <= dotOutDly_delay_29_tuser;
    dotOutDly_delay_31_tdata <= dotOutDly_delay_30_tdata;
    dotOutDly_delay_31_tuser <= dotOutDly_delay_30_tuser;
    dotOutDly_delay_32_tdata <= dotOutDly_delay_31_tdata;
    dotOutDly_delay_32_tuser <= dotOutDly_delay_31_tuser;
    dotOutDly_delay_33_tdata <= dotOutDly_delay_32_tdata;
    dotOutDly_delay_33_tuser <= dotOutDly_delay_32_tuser;
    dotOutDly_delay_34_tdata <= dotOutDly_delay_33_tdata;
    dotOutDly_delay_34_tuser <= dotOutDly_delay_33_tuser;
    dotOutDly_delay_35_tdata <= dotOutDly_delay_34_tdata;
    dotOutDly_delay_35_tuser <= dotOutDly_delay_34_tuser;
    dotOutDly_delay_36_tdata <= dotOutDly_delay_35_tdata;
    dotOutDly_delay_36_tuser <= dotOutDly_delay_35_tuser;
    dotOutDly_delay_37_tdata <= dotOutDly_delay_36_tdata;
    dotOutDly_delay_37_tuser <= dotOutDly_delay_36_tuser;
    dotOutDly_delay_38_tdata <= dotOutDly_delay_37_tdata;
    dotOutDly_delay_38_tuser <= dotOutDly_delay_37_tuser;
    dotOutDly_delay_39_tdata <= dotOutDly_delay_38_tdata;
    dotOutDly_delay_39_tuser <= dotOutDly_delay_38_tuser;
    dotOutDly_delay_40_tdata <= dotOutDly_delay_39_tdata;
    dotOutDly_delay_40_tuser <= dotOutDly_delay_39_tuser;
    dotOutDly_delay_41_tdata <= dotOutDly_delay_40_tdata;
    dotOutDly_delay_41_tuser <= dotOutDly_delay_40_tuser;
    dotOutDly_delay_42_tdata <= dotOutDly_delay_41_tdata;
    dotOutDly_delay_42_tuser <= dotOutDly_delay_41_tuser;
    dotOutDly_delay_43_tdata <= dotOutDly_delay_42_tdata;
    dotOutDly_delay_43_tuser <= dotOutDly_delay_42_tuser;
    dotOutDly_delay_44_tdata <= dotOutDly_delay_43_tdata;
    dotOutDly_delay_44_tuser <= dotOutDly_delay_43_tuser;
    dotOutDly_delay_45_tdata <= dotOutDly_delay_44_tdata;
    dotOutDly_delay_45_tuser <= dotOutDly_delay_44_tuser;
    dotOutDly_delay_46_tdata <= dotOutDly_delay_45_tdata;
    dotOutDly_delay_46_tuser <= dotOutDly_delay_45_tuser;
    dotOutDly_delay_47_tdata <= dotOutDly_delay_46_tdata;
    dotOutDly_delay_47_tuser <= dotOutDly_delay_46_tuser;
    dotOutDly_delay_48_tdata <= dotOutDly_delay_47_tdata;
    dotOutDly_delay_48_tuser <= dotOutDly_delay_47_tuser;
    dotOutDly_delay_49_tdata <= dotOutDly_delay_48_tdata;
    dotOutDly_delay_49_tuser <= dotOutDly_delay_48_tuser;
    dotOutDly_delay_50_tdata <= dotOutDly_delay_49_tdata;
    dotOutDly_delay_50_tuser <= dotOutDly_delay_49_tuser;
    dotOutDly_delay_51_tdata <= dotOutDly_delay_50_tdata;
    dotOutDly_delay_51_tuser <= dotOutDly_delay_50_tuser;
    dotOutDly_delay_52_tdata <= dotOutDly_delay_51_tdata;
    dotOutDly_delay_52_tuser <= dotOutDly_delay_51_tuser;
    dotOutDly_delay_53_tdata <= dotOutDly_delay_52_tdata;
    dotOutDly_delay_53_tuser <= dotOutDly_delay_52_tuser;
    dotOutDly_delay_54_tdata <= dotOutDly_delay_53_tdata;
    dotOutDly_delay_54_tuser <= dotOutDly_delay_53_tuser;
    dotOutDly_delay_55_tdata <= dotOutDly_delay_54_tdata;
    dotOutDly_delay_55_tuser <= dotOutDly_delay_54_tuser;
    dotOutDly_delay_56_tdata <= dotOutDly_delay_55_tdata;
    dotOutDly_delay_56_tuser <= dotOutDly_delay_55_tuser;
    dotOutDly_delay_57_tdata <= dotOutDly_delay_56_tdata;
    dotOutDly_delay_57_tuser <= dotOutDly_delay_56_tuser;
    dotOutDly_delay_58_tdata <= dotOutDly_delay_57_tdata;
    dotOutDly_delay_58_tuser <= dotOutDly_delay_57_tuser;
    dotOutDly_delay_59_tdata <= dotOutDly_delay_58_tdata;
    dotOutDly_delay_59_tuser <= dotOutDly_delay_58_tuser;
    dotOutDly_delay_60_tdata <= dotOutDly_delay_59_tdata;
    dotOutDly_delay_60_tuser <= dotOutDly_delay_59_tuser;
    dotOutDly_delay_61_tdata <= dotOutDly_delay_60_tdata;
    dotOutDly_delay_61_tuser <= dotOutDly_delay_60_tuser;
    dotOutDly_delay_62_tdata <= dotOutDly_delay_61_tdata;
    dotOutDly_delay_62_tuser <= dotOutDly_delay_61_tuser;
    dotOutDly_delay_63_tdata <= dotOutDly_delay_62_tdata;
    dotOutDly_delay_63_tuser <= dotOutDly_delay_62_tuser;
    dotOutDly2_tdata <= dotOutDly_delay_63_tdata;
    dotOutDly2_tuser <= dotOutDly_delay_63_tuser;
  end


endmodule

module AxiBusDistributor_1 (
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  input  wire [511:0]  io_bus_payload_data,
  input  wire [63:0]   io_bus_payload_keep,
  input  wire          io_bus_payload_last,
  input  wire [5:0]    io_bus_payload_dest,
  input  wire [9:0]    io_token,
  input  wire [5:0]    io_preCfgTag,
  input  wire [5:0]    io_postCfgTag,
  input  wire          io_enPredictor,
  input  wire          io_kSzOut_valid,
  output wire          io_kSzOut_ready,
  input  wire [31:0]   io_kSzOut_payload,
  input  wire          io_vSzOut_valid,
  output wire          io_vSzOut_ready,
  input  wire [31:0]   io_vSzOut_payload,
  output wire          int_bus_valid,
  input  wire          int_bus_ready,
  output wire          int_bus_payload_last,
  output wire [511:0]  int_bus_payload_tdata,
  output wire [5:0]    int_bus_payload_tuser,
  output wire          int_lnScale_valid,
  input  wire          int_lnScale_ready,
  output wire [15:0]   int_lnScale_payload,
  output wire          int_zeroInt4_valid,
  input  wire          int_zeroInt4_ready,
  output wire [7:0]    int_zeroInt4_payload,
  output wire          int_zeroInt8_valid,
  input  wire          int_zeroInt8_ready,
  output wire [7:0]    int_zeroInt8_payload,
  output wire          int_preScale_valid,
  input  wire          int_preScale_ready,
  output wire [15:0]   int_preScale_payload,
  output wire          int_postScale_valid,
  input  wire          int_postScale_ready,
  output wire [31:0]   int_postScale_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [5:0]    busLinkFifo_io_push_payload_fragment;
  wire       [9:0]    tagFifo_io_push_payload;
  wire       [1:0]    miscOutDeMux_io_select;
  wire       [127:0]  ln_buf_io_push_payload;
  wire                ln_buf_io_pop_ready;
  wire       [0:0]    dense_deMux_io_select;
  wire                dense_scaleFifo_io_pop_ready;
  wire       [5:0]    sparse_gen_io_tag;
  wire                sparse_preScaleFifo_io_push_valid;
  wire       [15:0]   sparse_preScaleFifo_io_push_payload;
  wire                sparse_postScaleFifo_io_push_valid;
  wire       [15:0]   sparse_postScaleFifo_io_push_payload;
  wire       [3:0]    sparse_zeroFifo_io_push_payload;
  wire       [0:0]    kv_extPackDeMux_io_select;
  wire       [0:0]    kv_kMux_io_select;
  wire       [0:0]    kv_vMux_io_select;
  wire       [0:0]    kv_vScaleMux_io_select;
  wire       [0:0]    zeroInt4Mux_io_select;
  reg        [1:0]    zeroInt8Mux_io_select;
  wire                busDeMux_io_input_ready;
  wire                busDeMux_io_outputs_0_valid;
  wire                busDeMux_io_outputs_1_valid;
  wire                busDeMux_io_outputs_2_valid;
  wire                busDeMux_io_outputs_3_valid;
  wire                busDeMux_io_outputs_4_valid;
  wire                busMux_io_inputs_0_ready;
  wire                busMux_io_inputs_1_ready;
  wire                busMux_io_inputs_2_ready;
  wire                busMux_io_inputs_3_ready;
  wire                busMux_io_output_valid;
  wire                miscInMux_io_inputs_0_ready;
  wire                miscInMux_io_inputs_1_ready;
  wire                miscInMux_io_inputs_2_ready;
  wire                miscInMux_io_output_valid;
  wire                busDataFifo_io_push_ready;
  wire                busDataFifo_io_pop_valid;
  wire       [511:0]  busDataFifo_io_pop_payload;
  wire       [5:0]    busDataFifo_io_occupancy;
  wire       [5:0]    busDataFifo_io_availability;
  wire                busLinkFifo_io_push_ready;
  wire                busLinkFifo_io_pop_valid;
  wire                busLinkFifo_io_pop_payload_last;
  wire       [5:0]    busLinkFifo_io_pop_payload_fragment;
  wire       [5:0]    busLinkFifo_io_occupancy;
  wire       [5:0]    busLinkFifo_io_availability;
  wire                miscFifo_io_push_ready;
  wire                miscFifo_io_pop_valid;
  wire       [511:0]  miscFifo_io_pop_payload;
  wire       [6:0]    miscFifo_io_occupancy;
  wire       [6:0]    miscFifo_io_availability;
  wire                tagFifo_io_push_ready;
  wire                tagFifo_io_pop_valid;
  wire       [9:0]    tagFifo_io_pop_payload;
  wire       [6:0]    tagFifo_io_occupancy;
  wire       [6:0]    tagFifo_io_availability;
  wire                miscOutDeMux_io_input_ready;
  wire                miscOutDeMux_io_outputs_0_valid;
  wire                miscOutDeMux_io_outputs_1_valid;
  wire                miscOutDeMux_io_outputs_2_valid;
  wire                ln_buf_io_push_ready;
  wire                ln_buf_io_pop_valid;
  wire       [127:0]  ln_buf_io_pop_payload;
  wire       [9:0]    ln_buf_io_occupancy;
  wire       [9:0]    ln_buf_io_availability;
  wire                ln_scaleOut_fifo_io_push_ready;
  wire                ln_scaleOut_fifo_io_pop_valid;
  wire       [15:0]   ln_scaleOut_fifo_io_pop_payload;
  wire       [5:0]    ln_scaleOut_fifo_io_occupancy;
  wire       [5:0]    ln_scaleOut_fifo_io_availability;
  wire                dense_gen_io_bus_ready;
  wire                dense_gen_io_main_valid;
  wire                dense_gen_io_misc_valid;
  wire                dense_deMux_io_input_ready;
  wire                dense_deMux_io_outputs_0_valid;
  wire                dense_deMux_io_outputs_1_valid;
  wire                dense_scaleFifo_io_push_ready;
  wire                dense_scaleFifo_io_pop_valid;
  wire       [511:0]  dense_scaleFifo_io_pop_payload;
  wire       [3:0]    dense_scaleFifo_io_occupancy;
  wire       [3:0]    dense_scaleFifo_io_availability;
  wire                sparse_gen_io_bus_ready;
  wire                sparse_gen_io_main_valid;
  wire                sparse_gen_io_misc_valid;
  wire                sparse_preScaleFifo_io_push_ready;
  wire                sparse_preScaleFifo_io_pop_valid;
  wire       [15:0]   sparse_preScaleFifo_io_pop_payload;
  wire       [5:0]    sparse_preScaleFifo_io_occupancy;
  wire       [5:0]    sparse_preScaleFifo_io_availability;
  wire                sparse_postScaleFifo_io_push_ready;
  wire                sparse_postScaleFifo_io_pop_valid;
  wire       [15:0]   sparse_postScaleFifo_io_pop_payload;
  wire       [5:0]    sparse_postScaleFifo_io_occupancy;
  wire       [5:0]    sparse_postScaleFifo_io_availability;
  wire                sparse_zeroFifo_io_push_ready;
  wire                sparse_zeroFifo_io_pop_valid;
  wire       [3:0]    sparse_zeroFifo_io_pop_payload;
  wire       [6:0]    sparse_zeroFifo_io_occupancy;
  wire       [6:0]    sparse_zeroFifo_io_availability;
  wire                kv_gen_io_bus_ready;
  wire                kv_gen_io_main_valid;
  wire                kv_gen_io_misc_valid;
  wire                kv_extPackDeMux_io_input_ready;
  wire                kv_extPackDeMux_io_outputs_0_valid;
  wire       [31:0]   kv_extPackDeMux_io_outputs_0_payload;
  wire                kv_extPackDeMux_io_outputs_1_valid;
  wire       [31:0]   kv_extPackDeMux_io_outputs_1_payload;
  wire                kv_kMux_io_inputs_0_ready;
  wire                kv_kMux_io_inputs_1_ready;
  wire                kv_kMux_io_output_valid;
  wire       [31:0]   kv_kMux_io_output_payload;
  wire                kv_vMux_io_inputs_0_ready;
  wire                kv_vMux_io_inputs_1_ready;
  wire                kv_vMux_io_output_valid;
  wire       [31:0]   kv_vMux_io_output_payload;
  wire                kv_kFork_io_input_ready;
  wire                kv_kFork_io_outputs_0_valid;
  wire                kv_kFork_io_outputs_1_valid;
  wire                kv_vFork_io_input_ready;
  wire                kv_vFork_io_outputs_0_valid;
  wire                kv_vFork_io_outputs_1_valid;
  wire                kv_vScaleMux_io_inputs_0_ready;
  wire                kv_vScaleMux_io_inputs_1_ready;
  wire                kv_vScaleMux_io_output_valid;
  wire       [15:0]   kv_vScaleMux_io_output_payload;
  wire                zeroInt4Mux_io_inputs_0_ready;
  wire                zeroInt4Mux_io_inputs_1_ready;
  wire                zeroInt4Mux_io_output_valid;
  wire       [7:0]    zeroInt4Mux_io_output_payload;
  wire                vZeroFifo_io_push_ready;
  wire                vZeroFifo_io_pop_valid;
  wire       [7:0]    vZeroFifo_io_pop_payload;
  wire       [9:0]    vZeroFifo_io_occupancy;
  wire       [9:0]    vZeroFifo_io_availability;
  wire                vScaleFifo_io_push_ready;
  wire                vScaleFifo_io_pop_valid;
  wire       [15:0]   vScaleFifo_io_pop_payload;
  wire       [9:0]    vScaleFifo_io_occupancy;
  wire       [9:0]    vScaleFifo_io_availability;
  wire                zeroInt8Mux_io_inputs_0_ready;
  wire                zeroInt8Mux_io_inputs_1_ready;
  wire                zeroInt8Mux_io_inputs_2_ready;
  wire                zeroInt8Mux_io_output_valid;
  wire       [7:0]    zeroInt8Mux_io_output_payload;
  wire                denseScaleFifo_io_push_ready;
  wire                denseScaleFifo_io_pop_valid;
  wire       [31:0]   denseScaleFifo_io_pop_payload;
  wire       [9:0]    denseScaleFifo_io_occupancy;
  wire       [9:0]    denseScaleFifo_io_availability;
  wire                sparseScaleFifo_io_push_ready;
  wire                sparseScaleFifo_io_pop_valid;
  wire       [31:0]   sparseScaleFifo_io_pop_payload;
  wire       [9:0]    sparseScaleFifo_io_occupancy;
  wire       [9:0]    sparseScaleFifo_io_availability;
  wire                kScaleFifo_io_push_ready;
  wire                kScaleFifo_io_pop_valid;
  wire       [31:0]   kScaleFifo_io_pop_payload;
  wire       [9:0]    kScaleFifo_io_occupancy;
  wire       [9:0]    kScaleFifo_io_availability;
  wire                dense_scale_to_ip_s_axis_a_tready;
  wire                dense_scale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   dense_scale_to_ip_m_axis_result_tdata;
  wire                axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready;
  wire                axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid;
  wire       [31:0]   axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata;
  wire                kv_kScale_to_ip_s_axis_a_tready;
  wire                kv_kScale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   kv_kScale_to_ip_m_axis_result_tdata;
  wire                postScaleMux_io_inputs_0_ready;
  wire                postScaleMux_io_inputs_1_ready;
  wire                postScaleMux_io_inputs_2_ready;
  wire                postScaleMux_io_inputs_3_ready;
  wire                postScaleMux_io_output_valid;
  wire       [31:0]   postScaleMux_io_output_payload;
  wire                sparsePreScaleFifo_io_push_ready;
  wire                sparsePreScaleFifo_io_pop_valid;
  wire       [15:0]   sparsePreScaleFifo_io_pop_payload;
  wire       [9:0]    sparsePreScaleFifo_io_occupancy;
  wire       [9:0]    sparsePreScaleFifo_io_availability;
  wire                preScaleMux_io_inputs_0_ready;
  wire                preScaleMux_io_inputs_1_ready;
  wire                preScaleMux_io_inputs_2_ready;
  wire                preScaleMux_io_output_valid;
  wire       [15:0]   preScaleMux_io_output_payload;
  wire       [3:0]    t_tagFifoSel;
  wire       [3:0]    t_io_select;
  wire       [1:0]    t_t_io_push_payload_1;
  wire       [0:0]    t_t_io_push_payload_1_1;
  reg        [127:0]  t_io_push_payload_4;
  wire       [2:0]    t_t_ln_scaleOut_payload_1;
  wire       [0:0]    t_t_ln_scaleOut_payload_1_1;
  reg        [15:0]   t_ln_scaleOut_payload_4;
  wire       [4:0]    t_t_dense_scale_payload_1;
  wire       [0:0]    t_t_dense_scale_payload_1_1;
  reg        [15:0]   t_dense_scale_payload_4;
  wire       [6:0]    t_t_dense_zero_payload_1;
  wire       [0:0]    t_t_dense_zero_payload_1_1;
  reg        [3:0]    t_dense_zero_payload_4;
  wire       [7:0]    t_sparse_cntLv2Ovf;
  reg        [19:0]   t_sparse_packOut_payload;
  wire       [4:0]    t_sparse_packOut_payload_1;
  wire       [3:0]    t_t_kv_extPack_payload_1;
  wire       [0:0]    t_t_kv_extPack_payload_1_1;
  reg        [31:0]   t_kv_extPack_payload_4;
  wire       [9:0]    t_kv_kCntOvf;
  wire       [9:0]    t_kv_vCntOvf;
  wire       [5:0]    t_when;
  wire       [5:0]    t_when_1;
  wire       [15:0]   t_kv_kZero_payload;
  wire       [15:0]   t_kv_vZero_payload;
  wire       [5:0]    t_postCfgDenseHit;
  wire       [5:0]    t_postCfgDenseHit_1;
  wire       [5:0]    busTag;
  wire                mlpGBusHitNotSparse;
  wire                lnScaleHit;
  wire                denseHit;
  wire                sparseHit;
  wire                kvHit;
  reg        [2:0]    busDeMuxSel;
  reg        [1:0]    busMuxSel;
  reg        [1:0]    miscInMuxSel;
  wire                axi_busDataFifo_io_push_fire;
  wire                axi_busDataFifo_io_pop_fire;
  wire                isVOut;
  wire                axpyHit;
  wire                axi_miscFifo_io_push_fire;
  wire       [5:0]    tagFifoDest;
  wire       [1:0]    tagFifoSel;
  wire                axi_tagFifo_io_pop_fire;
  wire                ln_bufIn_valid;
  wire                ln_bufIn_ready;
  wire       [511:0]  ln_bufIn_payload;
  wire                axi_ln_buf_io_push_fire;
  reg                 t_io_push_payload;
  reg        [1:0]    t_io_push_payload_1;
  reg        [1:0]    t_io_push_payload_2;
  wire                t_ln_bufIn_ready;
  wire       [511:0]  t_io_push_payload_3;
  wire                ln_scaleOut_valid;
  wire                ln_scaleOut_ready;
  wire       [15:0]   ln_scaleOut_payload;
  wire                ln_scaleOut_fire;
  reg                 t_ln_scaleOut_payload;
  reg        [2:0]    t_ln_scaleOut_payload_1;
  reg        [2:0]    t_ln_scaleOut_payload_2;
  wire                t_io_pop_ready;
  wire       [127:0]  t_ln_scaleOut_payload_3;
  wire                dense_bus_valid;
  wire                dense_bus_ready;
  wire       [511:0]  dense_bus_payload;
  reg        [2:0]    dense_cnt;
  reg                 dense_cntIsZero;
  wire                dense_cntOvf;
  wire                dense_bus_fire;
  wire                dense_toScale_valid;
  wire                dense_toScale_ready;
  wire       [511:0]  dense_toScale_payload;
  wire                dense_toZero_valid;
  reg                 dense_toZero_ready;
  wire       [511:0]  dense_toZero_payload;
  wire                dense_scale_valid;
  wire                dense_scale_ready;
  wire       [15:0]   dense_scale_payload;
  wire                dense_scale_fire;
  reg                 t_dense_scale_payload;
  reg        [4:0]    t_dense_scale_payload_1;
  reg        [4:0]    t_dense_scale_payload_2;
  wire                t_io_pop_ready_1;
  wire       [511:0]  t_dense_scale_payload_3;
  wire                dense_zero_valid;
  reg                 dense_zero_ready;
  wire       [3:0]    dense_zero_payload;
  wire                dense_zeroPipe_valid;
  wire                dense_zeroPipe_ready;
  wire       [3:0]    dense_zeroPipe_payload;
  reg                 dense_zero_rValid;
  reg        [3:0]    dense_zero_rData;
  wire                dense_zeroAlign_valid;
  wire                dense_zeroAlign_ready;
  wire       [7:0]    dense_zeroAlign_payload;
  wire                dense_toZero_m2sPipe_valid;
  wire                dense_toZero_m2sPipe_ready;
  wire       [511:0]  dense_toZero_m2sPipe_payload;
  reg                 dense_toZero_rValid;
  reg        [511:0]  dense_toZero_rData;
  wire                dense_zero_fire;
  reg                 t_dense_zero_payload;
  reg        [6:0]    t_dense_zero_payload_1;
  reg        [6:0]    t_dense_zero_payload_2;
  wire                t_dense_toZero_m2sPipe_ready;
  wire       [511:0]  t_dense_zero_payload_3;
  wire                sparse_bus_valid;
  reg                 sparse_bus_ready;
  wire       [499:0]  sparse_bus_tdata;
  wire       [5:0]    sparse_bus_tuser;
  wire       [1:0]    sparse_tagHit;
  wire       [7:0]    sparse_packVec_0;
  wire       [7:0]    sparse_packVec_1;
  wire       [7:0]    sparse_packCnt;
  wire                sparse_packOut_valid;
  wire                sparse_packOut_ready;
  wire       [19:0]   sparse_packOut_payload;
  (* max_fanout = 100 *) reg        [7:0]    sparse_cntLv1;
  reg        [7:0]    sparse_cntLv2;
  wire                sparse_cntLv1Ovf;
  wire                sparse_cntLv2Ovf;
  wire                sparse_packOut_fire;
  wire       [19:0]   sparse_busPayloadSubDiv_0;
  wire       [19:0]   sparse_busPayloadSubDiv_1;
  wire       [19:0]   sparse_busPayloadSubDiv_2;
  wire       [19:0]   sparse_busPayloadSubDiv_3;
  wire       [19:0]   sparse_busPayloadSubDiv_4;
  wire       [19:0]   sparse_busPayloadSubDiv_5;
  wire       [19:0]   sparse_busPayloadSubDiv_6;
  wire       [19:0]   sparse_busPayloadSubDiv_7;
  wire       [19:0]   sparse_busPayloadSubDiv_8;
  wire       [19:0]   sparse_busPayloadSubDiv_9;
  wire       [19:0]   sparse_busPayloadSubDiv_10;
  wire       [19:0]   sparse_busPayloadSubDiv_11;
  wire       [19:0]   sparse_busPayloadSubDiv_12;
  wire       [19:0]   sparse_busPayloadSubDiv_13;
  wire       [19:0]   sparse_busPayloadSubDiv_14;
  wire       [19:0]   sparse_busPayloadSubDiv_15;
  wire       [19:0]   sparse_busPayloadSubDiv_16;
  wire       [19:0]   sparse_busPayloadSubDiv_17;
  wire       [19:0]   sparse_busPayloadSubDiv_18;
  wire       [19:0]   sparse_busPayloadSubDiv_19;
  wire       [19:0]   sparse_busPayloadSubDiv_20;
  wire       [19:0]   sparse_busPayloadSubDiv_21;
  wire       [19:0]   sparse_busPayloadSubDiv_22;
  wire       [19:0]   sparse_busPayloadSubDiv_23;
  wire       [19:0]   sparse_busPayloadSubDiv_24;
  wire                sparse_selAxpy;
  wire                sparse_zeroQueue_valid;
  wire                sparse_zeroQueue_ready;
  wire       [7:0]    sparse_zeroQueue_payload;
  wire                kv_bus_valid;
  wire                kv_bus_ready;
  wire       [511:0]  kv_bus_payload;
  wire                kv_extPack_valid;
  reg                 kv_extPack_ready;
  wire       [31:0]   kv_extPack_payload;
  wire                kv_extPack_fire;
  reg                 t_kv_extPack_payload;
  reg        [3:0]    t_kv_extPack_payload_1;
  reg        [3:0]    t_kv_extPack_payload_2;
  wire                t_kv_bus_ready;
  wire       [511:0]  t_kv_extPack_payload_3;
  wire                kv_kPack_valid;
  wire                kv_kPack_ready;
  wire       [31:0]   kv_kPack_payload;
  wire                kv_vPack_valid;
  wire                kv_vPack_ready;
  wire       [31:0]   kv_vPack_payload;
  wire                kv_isVOut;
  reg        [9:0]    kv_kCnt;
  wire                kv_kCntOvf;
  reg        [9:0]    kv_vCnt;
  wire                kv_vCntOvf;
  wire       [5:0]    kv_tokenHigh;
  wire       [5:0]    kv_kCntHigh;
  wire       [5:0]    kv_vCntHigh;
  wire       [3:0]    kv_kCntLow;
  wire       [3:0]    kv_vCntLow;
  reg                 kv_tokenHighZeroDly;
  reg                 kv_kCntHighMatch;
  wire                kv_kPack_fire;
  reg                 kv_vCntHighMatch;
  wire                kv_vPack_fire;
  wire                kv_kSelLocal;
  wire                kv_vSelLocal;
  wire                kv_extPack_m2sPipe_valid;
  wire                kv_extPack_m2sPipe_ready;
  wire       [31:0]   kv_extPack_m2sPipe_payload;
  reg                 kv_extPack_rValid;
  reg        [31:0]   kv_extPack_rData;
  wire                kv_kScale_valid;
  wire                kv_kScale_ready;
  wire       [15:0]   kv_kScale_payload;
  wire                kv_kZero_valid;
  wire                kv_kZero_ready;
  wire       [7:0]    kv_kZero_payload;
  wire                kv_vScalePreInsert_valid;
  wire                kv_vScalePreInsert_ready;
  wire       [15:0]   kv_vScalePreInsert_payload;
  wire                kv_vZero_valid;
  wire                kv_vZero_ready;
  wire       [7:0]    kv_vZero_payload;
  wire                kv_vScale_valid;
  wire                kv_vScale_ready;
  wire       [15:0]   kv_vScale_payload;
  wire                kv_vScaleOne_valid;
  wire                kv_vScaleOne_ready;
  wire       [15:0]   kv_vScaleOne_payload;
  reg        [9:0]    kv_vScaleCnt;
  reg                 kv_vScaleCntIsZero;
  wire                kv_vScale_fire;
  wire                postMlpGBusHitNotSparse;
  wire                postSparseHit;
  wire                postKHit;
  wire                postVHit;
  wire                postMlpCfgHitNotSparse;
  wire                postCfgDenseHit;
  wire                postCfgSparseHit;
  wire                postCfgKvHit;
  reg        [1:0]    postSel;
  wire                preCfgSparseHit;
  wire                preCfgKvHit;
  reg        [1:0]    preSel;

  assign t_tagFifoSel = tagFifo_io_pop_payload[9 : 6];
  assign t_io_select = tagFifo_io_pop_payload[9 : 6];
  assign t_t_io_push_payload_1_1 = t_io_push_payload;
  assign t_t_io_push_payload_1 = {1'd0, t_t_io_push_payload_1_1};
  assign t_t_ln_scaleOut_payload_1_1 = t_ln_scaleOut_payload;
  assign t_t_ln_scaleOut_payload_1 = {2'd0, t_t_ln_scaleOut_payload_1_1};
  assign t_t_dense_scale_payload_1_1 = t_dense_scale_payload;
  assign t_t_dense_scale_payload_1 = {4'd0, t_t_dense_scale_payload_1_1};
  assign t_t_dense_zero_payload_1_1 = t_dense_zero_payload;
  assign t_t_dense_zero_payload_1 = {6'd0, t_t_dense_zero_payload_1_1};
  assign t_sparse_cntLv2Ovf = (sparse_packCnt - 8'h01);
  assign t_sparse_packOut_payload_1 = sparse_cntLv1[4:0];
  assign t_t_kv_extPack_payload_1_1 = t_kv_extPack_payload;
  assign t_t_kv_extPack_payload_1 = {3'd0, t_t_kv_extPack_payload_1_1};
  assign t_kv_kCntOvf = (io_token - 10'h001);
  assign t_kv_vCntOvf = (io_token - 10'h001);
  assign t_when = (kv_tokenHigh - 6'h01);
  assign t_when_1 = (kv_tokenHigh - 6'h01);
  assign t_kv_kZero_payload = kv_kPack_payload[31 : 16];
  assign t_kv_vZero_payload = kv_vPack_payload[31 : 16];
  assign t_postCfgDenseHit = 6'h05;
  assign t_postCfgDenseHit_1 = 6'h06;
  StreamDemux_7 busDeMux (
    .io_select          (busDeMuxSel[2:0]           ), //i
    .io_input_valid     (io_bus_valid               ), //i
    .io_input_ready     (busDeMux_io_input_ready    ), //o
    .io_outputs_0_valid (busDeMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (busMux_io_inputs_0_ready   ), //i
    .io_outputs_1_valid (busDeMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (dense_gen_io_bus_ready     ), //i
    .io_outputs_2_valid (busDeMux_io_outputs_2_valid), //o
    .io_outputs_2_ready (sparse_gen_io_bus_ready    ), //i
    .io_outputs_3_valid (busDeMux_io_outputs_3_valid), //o
    .io_outputs_3_ready (kv_gen_io_bus_ready        ), //i
    .io_outputs_4_valid (busDeMux_io_outputs_4_valid), //o
    .io_outputs_4_ready (ln_bufIn_ready             )  //i
  );
  StreamMux_21 busMux (
    .io_select         (busMuxSel[1:0]             ), //i
    .io_inputs_0_valid (busDeMux_io_outputs_0_valid), //i
    .io_inputs_0_ready (busMux_io_inputs_0_ready   ), //o
    .io_inputs_1_valid (dense_gen_io_main_valid    ), //i
    .io_inputs_1_ready (busMux_io_inputs_1_ready   ), //o
    .io_inputs_2_valid (sparse_gen_io_main_valid   ), //i
    .io_inputs_2_ready (busMux_io_inputs_2_ready   ), //o
    .io_inputs_3_valid (kv_gen_io_main_valid       ), //i
    .io_inputs_3_ready (busMux_io_inputs_3_ready   ), //o
    .io_output_valid   (busMux_io_output_valid     ), //o
    .io_output_ready   (busDataFifo_io_push_ready  )  //i
  );
  StreamMux_22 miscInMux (
    .io_select         (miscInMuxSel[1:0]          ), //i
    .io_inputs_0_valid (dense_gen_io_misc_valid    ), //i
    .io_inputs_0_ready (miscInMux_io_inputs_0_ready), //o
    .io_inputs_1_valid (sparse_gen_io_misc_valid   ), //i
    .io_inputs_1_ready (miscInMux_io_inputs_1_ready), //o
    .io_inputs_2_valid (kv_gen_io_misc_valid       ), //i
    .io_inputs_2_ready (miscInMux_io_inputs_2_ready), //o
    .io_output_valid   (miscInMux_io_output_valid  ), //o
    .io_output_ready   (miscFifo_io_push_ready     )  //i
  );
  LargeBankFifo_7 busDataFifo (
    .io_push_valid   (busMux_io_output_valid           ), //i
    .io_push_ready   (busDataFifo_io_push_ready        ), //o
    .io_push_payload (io_bus_payload_data[511:0]       ), //i
    .io_pop_valid    (busDataFifo_io_pop_valid         ), //o
    .io_pop_ready    (int_bus_ready                    ), //i
    .io_pop_payload  (busDataFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (busDataFifo_io_occupancy[5:0]    ), //o
    .io_availability (busDataFifo_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                        ), //i
    .clk_0_resetn    (clk_0_resetn                     )  //i
  );
  StreamFifo_35 busLinkFifo (
    .io_push_valid            (axi_busDataFifo_io_push_fire             ), //i
    .io_push_ready            (busLinkFifo_io_push_ready                ), //o
    .io_push_payload_last     (io_bus_payload_last                      ), //i
    .io_push_payload_fragment (busLinkFifo_io_push_payload_fragment[5:0]), //i
    .io_pop_valid             (busLinkFifo_io_pop_valid                 ), //o
    .io_pop_ready             (axi_busDataFifo_io_pop_fire              ), //i
    .io_pop_payload_last      (busLinkFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (busLinkFifo_io_pop_payload_fragment[5:0] ), //o
    .io_flush                 (1'b0                                     ), //i
    .io_occupancy             (busLinkFifo_io_occupancy[5:0]            ), //o
    .io_availability          (busLinkFifo_io_availability[5:0]         ), //o
    .clk_0_clk                (clk_0_clk                                ), //i
    .clk_0_resetn             (clk_0_resetn                             )  //i
  );
  LargeBankFifo_8 miscFifo (
    .io_push_valid   (miscInMux_io_output_valid     ), //i
    .io_push_ready   (miscFifo_io_push_ready        ), //o
    .io_push_payload (io_bus_payload_data[511:0]    ), //i
    .io_pop_valid    (miscFifo_io_pop_valid         ), //o
    .io_pop_ready    (axi_tagFifo_io_pop_fire       ), //i
    .io_pop_payload  (miscFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (miscFifo_io_occupancy[6:0]    ), //o
    .io_availability (miscFifo_io_availability[6:0] ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_36 tagFifo (
    .io_push_valid   (axi_miscFifo_io_push_fire   ), //i
    .io_push_ready   (tagFifo_io_push_ready       ), //o
    .io_push_payload (tagFifo_io_push_payload[9:0]), //i
    .io_pop_valid    (tagFifo_io_pop_valid        ), //o
    .io_pop_ready    (miscOutDeMux_io_input_ready ), //i
    .io_pop_payload  (tagFifo_io_pop_payload[9:0] ), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (tagFifo_io_occupancy[6:0]   ), //o
    .io_availability (tagFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamDemux_8 miscOutDeMux (
    .io_select          (miscOutDeMux_io_select[1:0]    ), //i
    .io_input_valid     (tagFifo_io_pop_valid           ), //i
    .io_input_ready     (miscOutDeMux_io_input_ready    ), //o
    .io_outputs_0_valid (miscOutDeMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (dense_bus_ready                ), //i
    .io_outputs_1_valid (miscOutDeMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (sparse_bus_ready               ), //i
    .io_outputs_2_valid (miscOutDeMux_io_outputs_2_valid), //o
    .io_outputs_2_ready (kv_bus_ready                   )  //i
  );
  StreamFifo_48 ln_buf (
    .io_push_valid   (ln_bufIn_valid               ), //i
    .io_push_ready   (ln_buf_io_push_ready         ), //o
    .io_push_payload (ln_buf_io_push_payload[127:0]), //i
    .io_pop_valid    (ln_buf_io_pop_valid          ), //o
    .io_pop_ready    (ln_buf_io_pop_ready          ), //i
    .io_pop_payload  (ln_buf_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (ln_buf_io_occupancy[9:0]     ), //o
    .io_availability (ln_buf_io_availability[9:0]  ), //o
    .clk_0_clk       (clk_0_clk                    ), //i
    .clk_0_resetn    (clk_0_resetn                 )  //i
  );
  StreamFifo_114 ln_scaleOut_fifo (
    .io_push_valid   (ln_scaleOut_valid                    ), //i
    .io_push_ready   (ln_scaleOut_fifo_io_push_ready       ), //o
    .io_push_payload (ln_scaleOut_payload[15:0]            ), //i
    .io_pop_valid    (ln_scaleOut_fifo_io_pop_valid        ), //o
    .io_pop_ready    (int_lnScale_ready                    ), //i
    .io_pop_payload  (ln_scaleOut_fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (ln_scaleOut_fifo_io_occupancy[5:0]   ), //o
    .io_availability (ln_scaleOut_fifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                            ), //i
    .clk_0_resetn    (clk_0_resetn                         )  //i
  );
  DenseCase_1 dense_gen (
    .io_bus_valid  (busDeMux_io_outputs_1_valid), //i
    .io_bus_ready  (dense_gen_io_bus_ready     ), //o
    .io_main_valid (dense_gen_io_main_valid    ), //o
    .io_main_ready (busMux_io_inputs_1_ready   ), //i
    .io_misc_valid (dense_gen_io_misc_valid    ), //o
    .io_misc_ready (miscInMux_io_inputs_0_ready), //i
    .clk_0_clk     (clk_0_clk                  ), //i
    .clk_0_resetn  (clk_0_resetn               )  //i
  );
  StreamDemux_17 dense_deMux (
    .io_select          (dense_deMux_io_select         ), //i
    .io_input_valid     (dense_bus_valid               ), //i
    .io_input_ready     (dense_deMux_io_input_ready    ), //o
    .io_outputs_0_valid (dense_deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (dense_toScale_ready           ), //i
    .io_outputs_1_valid (dense_deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (dense_toZero_ready            )  //i
  );
  LargeBankFifo_9 dense_scaleFifo (
    .io_push_valid   (dense_toScale_valid                  ), //i
    .io_push_ready   (dense_scaleFifo_io_push_ready        ), //o
    .io_push_payload (dense_toScale_payload[511:0]         ), //i
    .io_pop_valid    (dense_scaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (dense_scaleFifo_io_pop_ready         ), //i
    .io_pop_payload  (dense_scaleFifo_io_pop_payload[511:0]), //o
    .io_occupancy    (dense_scaleFifo_io_occupancy[3:0]    ), //o
    .io_availability (dense_scaleFifo_io_availability[3:0] ), //o
    .clk_0_clk       (clk_0_clk                            ), //i
    .clk_0_resetn    (clk_0_resetn                         )  //i
  );
  SparseCase_1 sparse_gen (
    .io_tag        (sparse_gen_io_tag[5:0]     ), //i
    .io_bus_valid  (busDeMux_io_outputs_2_valid), //i
    .io_bus_ready  (sparse_gen_io_bus_ready    ), //o
    .io_main_valid (sparse_gen_io_main_valid   ), //o
    .io_main_ready (busMux_io_inputs_2_ready   ), //i
    .io_misc_valid (sparse_gen_io_misc_valid   ), //o
    .io_misc_ready (miscInMux_io_inputs_1_ready), //i
    .clk_0_clk     (clk_0_clk                  ), //i
    .clk_0_resetn  (clk_0_resetn               )  //i
  );
  StreamFifo_114 sparse_preScaleFifo (
    .io_push_valid   (sparse_preScaleFifo_io_push_valid        ), //i
    .io_push_ready   (sparse_preScaleFifo_io_push_ready        ), //o
    .io_push_payload (sparse_preScaleFifo_io_push_payload[15:0]), //i
    .io_pop_valid    (sparse_preScaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (sparsePreScaleFifo_io_push_ready         ), //i
    .io_pop_payload  (sparse_preScaleFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (sparse_preScaleFifo_io_occupancy[5:0]    ), //o
    .io_availability (sparse_preScaleFifo_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                                ), //i
    .clk_0_resetn    (clk_0_resetn                             )  //i
  );
  StreamFifo_114 sparse_postScaleFifo (
    .io_push_valid   (sparse_postScaleFifo_io_push_valid                   ), //i
    .io_push_ready   (sparse_postScaleFifo_io_push_ready                   ), //o
    .io_push_payload (sparse_postScaleFifo_io_push_payload[15:0]           ), //i
    .io_pop_valid    (sparse_postScaleFifo_io_pop_valid                    ), //o
    .io_pop_ready    (axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready), //i
    .io_pop_payload  (sparse_postScaleFifo_io_pop_payload[15:0]            ), //o
    .io_flush        (1'b0                                                 ), //i
    .io_occupancy    (sparse_postScaleFifo_io_occupancy[5:0]               ), //o
    .io_availability (sparse_postScaleFifo_io_availability[5:0]            ), //o
    .clk_0_clk       (clk_0_clk                                            ), //i
    .clk_0_resetn    (clk_0_resetn                                         )  //i
  );
  StreamFifo_41 sparse_zeroFifo (
    .io_push_valid   (sparse_packOut_valid                ), //i
    .io_push_ready   (sparse_zeroFifo_io_push_ready       ), //o
    .io_push_payload (sparse_zeroFifo_io_push_payload[3:0]), //i
    .io_pop_valid    (sparse_zeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (sparse_zeroQueue_ready              ), //i
    .io_pop_payload  (sparse_zeroFifo_io_pop_payload[3:0] ), //o
    .io_flush        (1'b0                                ), //i
    .io_occupancy    (sparse_zeroFifo_io_occupancy[6:0]   ), //o
    .io_availability (sparse_zeroFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                           ), //i
    .clk_0_resetn    (clk_0_resetn                        )  //i
  );
  KvCacheCase_1 kv_gen (
    .io_token      (io_token[9:0]              ), //i
    .io_bus_valid  (busDeMux_io_outputs_3_valid), //i
    .io_bus_ready  (kv_gen_io_bus_ready        ), //o
    .io_main_valid (kv_gen_io_main_valid       ), //o
    .io_main_ready (busMux_io_inputs_3_ready   ), //i
    .io_misc_valid (kv_gen_io_misc_valid       ), //o
    .io_misc_ready (miscInMux_io_inputs_2_ready), //i
    .clk_0_clk     (clk_0_clk                  ), //i
    .clk_0_resetn  (clk_0_resetn               )  //i
  );
  StreamDemux_25 kv_extPackDeMux (
    .io_select            (kv_extPackDeMux_io_select                 ), //i
    .io_input_valid       (kv_extPack_m2sPipe_valid                  ), //i
    .io_input_ready       (kv_extPackDeMux_io_input_ready            ), //o
    .io_input_payload     (kv_extPack_m2sPipe_payload[31:0]          ), //i
    .io_outputs_0_valid   (kv_extPackDeMux_io_outputs_0_valid        ), //o
    .io_outputs_0_ready   (kv_kMux_io_inputs_0_ready                 ), //i
    .io_outputs_0_payload (kv_extPackDeMux_io_outputs_0_payload[31:0]), //o
    .io_outputs_1_valid   (kv_extPackDeMux_io_outputs_1_valid        ), //o
    .io_outputs_1_ready   (kv_vMux_io_inputs_0_ready                 ), //i
    .io_outputs_1_payload (kv_extPackDeMux_io_outputs_1_payload[31:0])  //o
  );
  StreamMux_23 kv_kMux (
    .io_select           (kv_kMux_io_select                         ), //i
    .io_inputs_0_valid   (kv_extPackDeMux_io_outputs_0_valid        ), //i
    .io_inputs_0_ready   (kv_kMux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload (kv_extPackDeMux_io_outputs_0_payload[31:0]), //i
    .io_inputs_1_valid   (io_kSzOut_valid                           ), //i
    .io_inputs_1_ready   (kv_kMux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload (io_kSzOut_payload[31:0]                   ), //i
    .io_output_valid     (kv_kMux_io_output_valid                   ), //o
    .io_output_ready     (kv_kPack_ready                            ), //i
    .io_output_payload   (kv_kMux_io_output_payload[31:0]           )  //o
  );
  StreamMux_23 kv_vMux (
    .io_select           (kv_vMux_io_select                         ), //i
    .io_inputs_0_valid   (kv_extPackDeMux_io_outputs_1_valid        ), //i
    .io_inputs_0_ready   (kv_vMux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload (kv_extPackDeMux_io_outputs_1_payload[31:0]), //i
    .io_inputs_1_valid   (io_vSzOut_valid                           ), //i
    .io_inputs_1_ready   (kv_vMux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload (io_vSzOut_payload[31:0]                   ), //i
    .io_output_valid     (kv_vMux_io_output_valid                   ), //o
    .io_output_ready     (kv_vPack_ready                            ), //i
    .io_output_payload   (kv_vMux_io_output_payload[31:0]           )  //o
  );
  StreamFork_2 kv_kFork (
    .io_input_valid     (kv_kPack_valid             ), //i
    .io_input_ready     (kv_kFork_io_input_ready    ), //o
    .io_outputs_0_valid (kv_kFork_io_outputs_0_valid), //o
    .io_outputs_0_ready (kv_kScale_ready            ), //i
    .io_outputs_1_valid (kv_kFork_io_outputs_1_valid), //o
    .io_outputs_1_ready (kv_kZero_ready             ), //i
    .clk_0_clk          (clk_0_clk                  ), //i
    .clk_0_resetn       (clk_0_resetn               )  //i
  );
  StreamFork_2 kv_vFork (
    .io_input_valid     (kv_vPack_valid             ), //i
    .io_input_ready     (kv_vFork_io_input_ready    ), //o
    .io_outputs_0_valid (kv_vFork_io_outputs_0_valid), //o
    .io_outputs_0_ready (kv_vScalePreInsert_ready   ), //i
    .io_outputs_1_valid (kv_vFork_io_outputs_1_valid), //o
    .io_outputs_1_ready (kv_vZero_ready             ), //i
    .clk_0_clk          (clk_0_clk                  ), //i
    .clk_0_resetn       (clk_0_resetn               )  //i
  );
  StreamMux_25 kv_vScaleMux (
    .io_select           (kv_vScaleMux_io_select              ), //i
    .io_inputs_0_valid   (kv_vScalePreInsert_valid            ), //i
    .io_inputs_0_ready   (kv_vScaleMux_io_inputs_0_ready      ), //o
    .io_inputs_0_payload (kv_vScalePreInsert_payload[15:0]    ), //i
    .io_inputs_1_valid   (kv_vScaleOne_valid                  ), //i
    .io_inputs_1_ready   (kv_vScaleMux_io_inputs_1_ready      ), //o
    .io_inputs_1_payload (kv_vScaleOne_payload[15:0]          ), //i
    .io_output_valid     (kv_vScaleMux_io_output_valid        ), //o
    .io_output_ready     (kv_vScale_ready                     ), //i
    .io_output_payload   (kv_vScaleMux_io_output_payload[15:0])  //o
  );
  StreamMux_41 zeroInt4Mux (
    .io_select           (zeroInt4Mux_io_select             ), //i
    .io_inputs_0_valid   (dense_zeroAlign_valid             ), //i
    .io_inputs_0_ready   (zeroInt4Mux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (dense_zeroAlign_payload[7:0]      ), //i
    .io_inputs_1_valid   (sparse_zeroQueue_valid            ), //i
    .io_inputs_1_ready   (zeroInt4Mux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (sparse_zeroQueue_payload[7:0]     ), //i
    .io_output_valid     (zeroInt4Mux_io_output_valid       ), //o
    .io_output_ready     (int_zeroInt4_ready                ), //i
    .io_output_payload   (zeroInt4Mux_io_output_payload[7:0])  //o
  );
  StreamFifo_42 vZeroFifo (
    .io_push_valid   (kv_vZero_valid                ), //i
    .io_push_ready   (vZeroFifo_io_push_ready       ), //o
    .io_push_payload (kv_vZero_payload[7:0]         ), //i
    .io_pop_valid    (vZeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (zeroInt8Mux_io_inputs_2_ready ), //i
    .io_pop_payload  (vZeroFifo_io_pop_payload[7:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (vZeroFifo_io_occupancy[9:0]   ), //o
    .io_availability (vZeroFifo_io_availability[9:0]), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_43 vScaleFifo (
    .io_push_valid   (kv_vScale_valid                ), //i
    .io_push_ready   (vScaleFifo_io_push_ready       ), //o
    .io_push_payload (kv_vScale_payload[15:0]        ), //i
    .io_pop_valid    (vScaleFifo_io_pop_valid        ), //o
    .io_pop_ready    (preScaleMux_io_inputs_1_ready  ), //i
    .io_pop_payload  (vScaleFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (vScaleFifo_io_occupancy[9:0]   ), //o
    .io_availability (vScaleFifo_io_availability[9:0]), //o
    .clk_0_clk       (clk_0_clk                      ), //i
    .clk_0_resetn    (clk_0_resetn                   )  //i
  );
  StreamMux_27 zeroInt8Mux (
    .io_select           (zeroInt8Mux_io_select[1:0]        ), //i
    .io_inputs_0_valid   (1'b0                              ), //i
    .io_inputs_0_ready   (zeroInt8Mux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (8'h0                              ), //i
    .io_inputs_1_valid   (kv_kZero_valid                    ), //i
    .io_inputs_1_ready   (zeroInt8Mux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (kv_kZero_payload[7:0]             ), //i
    .io_inputs_2_valid   (vZeroFifo_io_pop_valid            ), //i
    .io_inputs_2_ready   (zeroInt8Mux_io_inputs_2_ready     ), //o
    .io_inputs_2_payload (vZeroFifo_io_pop_payload[7:0]     ), //i
    .io_output_valid     (zeroInt8Mux_io_output_valid       ), //o
    .io_output_ready     (int_zeroInt8_ready                ), //i
    .io_output_payload   (zeroInt8Mux_io_output_payload[7:0])  //o
  );
  StreamFifo_44 denseScaleFifo (
    .io_push_valid   (dense_scale_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (denseScaleFifo_io_push_ready               ), //o
    .io_push_payload (dense_scale_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (denseScaleFifo_io_pop_valid                ), //o
    .io_pop_ready    (postScaleMux_io_inputs_0_ready             ), //i
    .io_pop_payload  (denseScaleFifo_io_pop_payload[31:0]        ), //o
    .io_flush        (1'b0                                       ), //i
    .io_occupancy    (denseScaleFifo_io_occupancy[9:0]           ), //o
    .io_availability (denseScaleFifo_io_availability[9:0]        ), //o
    .clk_0_clk       (clk_0_clk                                  ), //i
    .clk_0_resetn    (clk_0_resetn                               )  //i
  );
  StreamFifo_44 sparseScaleFifo (
    .io_push_valid   (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (sparseScaleFifo_io_push_ready                                  ), //o
    .io_push_payload (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (sparseScaleFifo_io_pop_valid                                   ), //o
    .io_pop_ready    (postScaleMux_io_inputs_1_ready                                 ), //i
    .io_pop_payload  (sparseScaleFifo_io_pop_payload[31:0]                           ), //o
    .io_flush        (1'b0                                                           ), //i
    .io_occupancy    (sparseScaleFifo_io_occupancy[9:0]                              ), //o
    .io_availability (sparseScaleFifo_io_availability[9:0]                           ), //o
    .clk_0_clk       (clk_0_clk                                                      ), //i
    .clk_0_resetn    (clk_0_resetn                                                   )  //i
  );
  StreamFifo_44 kScaleFifo (
    .io_push_valid   (kv_kScale_to_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (kScaleFifo_io_push_ready                 ), //o
    .io_push_payload (kv_kScale_to_ip_m_axis_result_tdata[31:0]), //i
    .io_pop_valid    (kScaleFifo_io_pop_valid                  ), //o
    .io_pop_ready    (postScaleMux_io_inputs_2_ready           ), //i
    .io_pop_payload  (kScaleFifo_io_pop_payload[31:0]          ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (kScaleFifo_io_occupancy[9:0]             ), //o
    .io_availability (kScaleFifo_io_availability[9:0]          ), //o
    .clk_0_clk       (clk_0_clk                                ), //i
    .clk_0_resetn    (clk_0_resetn                             )  //i
  );
  fp16toFp32s dense_scale_to_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (dense_scale_valid                          ), //i
    .s_axis_a_tready      (dense_scale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (dense_scale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (dense_scale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (denseScaleFifo_io_push_ready               ), //i
    .m_axis_result_tdata  (dense_scale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s axi_sparse_postScaleFifo_io_pop_to_ip (
    .aclk                 (clk_0_clk                                                      ), //i
    .s_axis_a_tvalid      (sparse_postScaleFifo_io_pop_valid                              ), //i
    .s_axis_a_tready      (axi_sparse_postScaleFifo_io_pop_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (sparse_postScaleFifo_io_pop_payload[15:0]                      ), //i
    .m_axis_result_tvalid (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (sparseScaleFifo_io_push_ready                                  ), //i
    .m_axis_result_tdata  (axi_sparse_postScaleFifo_io_pop_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s kv_kScale_to_ip (
    .aclk                 (clk_0_clk                                ), //i
    .s_axis_a_tvalid      (kv_kScale_valid                          ), //i
    .s_axis_a_tready      (kv_kScale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (kv_kScale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (kv_kScale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (kScaleFifo_io_push_ready                 ), //i
    .m_axis_result_tdata  (kv_kScale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamMux_28 postScaleMux (
    .io_select           (postSel[1:0]                        ), //i
    .io_inputs_0_valid   (denseScaleFifo_io_pop_valid         ), //i
    .io_inputs_0_ready   (postScaleMux_io_inputs_0_ready      ), //o
    .io_inputs_0_payload (denseScaleFifo_io_pop_payload[31:0] ), //i
    .io_inputs_1_valid   (sparseScaleFifo_io_pop_valid        ), //i
    .io_inputs_1_ready   (postScaleMux_io_inputs_1_ready      ), //o
    .io_inputs_1_payload (sparseScaleFifo_io_pop_payload[31:0]), //i
    .io_inputs_2_valid   (kScaleFifo_io_pop_valid             ), //i
    .io_inputs_2_ready   (postScaleMux_io_inputs_2_ready      ), //o
    .io_inputs_2_payload (kScaleFifo_io_pop_payload[31:0]     ), //i
    .io_inputs_3_valid   (1'b0                                ), //i
    .io_inputs_3_ready   (postScaleMux_io_inputs_3_ready      ), //o
    .io_inputs_3_payload (32'h0                               ), //i
    .io_output_valid     (postScaleMux_io_output_valid        ), //o
    .io_output_ready     (int_postScale_ready                 ), //i
    .io_output_payload   (postScaleMux_io_output_payload[31:0])  //o
  );
  StreamFifo_43 sparsePreScaleFifo (
    .io_push_valid   (sparse_preScaleFifo_io_pop_valid        ), //i
    .io_push_ready   (sparsePreScaleFifo_io_push_ready        ), //o
    .io_push_payload (sparse_preScaleFifo_io_pop_payload[15:0]), //i
    .io_pop_valid    (sparsePreScaleFifo_io_pop_valid         ), //o
    .io_pop_ready    (preScaleMux_io_inputs_0_ready           ), //i
    .io_pop_payload  (sparsePreScaleFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                                    ), //i
    .io_occupancy    (sparsePreScaleFifo_io_occupancy[9:0]    ), //o
    .io_availability (sparsePreScaleFifo_io_availability[9:0] ), //o
    .clk_0_clk       (clk_0_clk                               ), //i
    .clk_0_resetn    (clk_0_resetn                            )  //i
  );
  StreamMux_29 preScaleMux (
    .io_select           (preSel[1:0]                            ), //i
    .io_inputs_0_valid   (sparsePreScaleFifo_io_pop_valid        ), //i
    .io_inputs_0_ready   (preScaleMux_io_inputs_0_ready          ), //o
    .io_inputs_0_payload (sparsePreScaleFifo_io_pop_payload[15:0]), //i
    .io_inputs_1_valid   (vScaleFifo_io_pop_valid                ), //i
    .io_inputs_1_ready   (preScaleMux_io_inputs_1_ready          ), //o
    .io_inputs_1_payload (vScaleFifo_io_pop_payload[15:0]        ), //i
    .io_inputs_2_valid   (1'b0                                   ), //i
    .io_inputs_2_ready   (preScaleMux_io_inputs_2_ready          ), //o
    .io_inputs_2_payload (16'h0                                  ), //i
    .io_output_valid     (preScaleMux_io_output_valid            ), //o
    .io_output_ready     (int_preScale_ready                     ), //i
    .io_output_payload   (preScaleMux_io_output_payload[15:0]    )  //o
  );
  always @(*) begin
    case(t_io_push_payload_2)
      2'b00 : t_io_push_payload_4 = t_io_push_payload_3[127 : 0];
      2'b01 : t_io_push_payload_4 = t_io_push_payload_3[255 : 128];
      2'b10 : t_io_push_payload_4 = t_io_push_payload_3[383 : 256];
      default : t_io_push_payload_4 = t_io_push_payload_3[511 : 384];
    endcase
  end

  always @(*) begin
    case(t_ln_scaleOut_payload_2)
      3'b000 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[15 : 0];
      3'b001 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[31 : 16];
      3'b010 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[47 : 32];
      3'b011 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[63 : 48];
      3'b100 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[79 : 64];
      3'b101 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[95 : 80];
      3'b110 : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[111 : 96];
      default : t_ln_scaleOut_payload_4 = t_ln_scaleOut_payload_3[127 : 112];
    endcase
  end

  always @(*) begin
    case(t_dense_scale_payload_2)
      5'b00000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[15 : 0];
      5'b00001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[31 : 16];
      5'b00010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[47 : 32];
      5'b00011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[63 : 48];
      5'b00100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[79 : 64];
      5'b00101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[95 : 80];
      5'b00110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[111 : 96];
      5'b00111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[127 : 112];
      5'b01000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[143 : 128];
      5'b01001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[159 : 144];
      5'b01010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[175 : 160];
      5'b01011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[191 : 176];
      5'b01100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[207 : 192];
      5'b01101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[223 : 208];
      5'b01110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[239 : 224];
      5'b01111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[255 : 240];
      5'b10000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[271 : 256];
      5'b10001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[287 : 272];
      5'b10010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[303 : 288];
      5'b10011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[319 : 304];
      5'b10100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[335 : 320];
      5'b10101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[351 : 336];
      5'b10110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[367 : 352];
      5'b10111 : t_dense_scale_payload_4 = t_dense_scale_payload_3[383 : 368];
      5'b11000 : t_dense_scale_payload_4 = t_dense_scale_payload_3[399 : 384];
      5'b11001 : t_dense_scale_payload_4 = t_dense_scale_payload_3[415 : 400];
      5'b11010 : t_dense_scale_payload_4 = t_dense_scale_payload_3[431 : 416];
      5'b11011 : t_dense_scale_payload_4 = t_dense_scale_payload_3[447 : 432];
      5'b11100 : t_dense_scale_payload_4 = t_dense_scale_payload_3[463 : 448];
      5'b11101 : t_dense_scale_payload_4 = t_dense_scale_payload_3[479 : 464];
      5'b11110 : t_dense_scale_payload_4 = t_dense_scale_payload_3[495 : 480];
      default : t_dense_scale_payload_4 = t_dense_scale_payload_3[511 : 496];
    endcase
  end

  always @(*) begin
    case(t_dense_zero_payload_2)
      7'b0000000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[3 : 0];
      7'b0000001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[7 : 4];
      7'b0000010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[11 : 8];
      7'b0000011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[15 : 12];
      7'b0000100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[19 : 16];
      7'b0000101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[23 : 20];
      7'b0000110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[27 : 24];
      7'b0000111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[31 : 28];
      7'b0001000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[35 : 32];
      7'b0001001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[39 : 36];
      7'b0001010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[43 : 40];
      7'b0001011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[47 : 44];
      7'b0001100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[51 : 48];
      7'b0001101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[55 : 52];
      7'b0001110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[59 : 56];
      7'b0001111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[63 : 60];
      7'b0010000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[67 : 64];
      7'b0010001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[71 : 68];
      7'b0010010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[75 : 72];
      7'b0010011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[79 : 76];
      7'b0010100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[83 : 80];
      7'b0010101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[87 : 84];
      7'b0010110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[91 : 88];
      7'b0010111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[95 : 92];
      7'b0011000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[99 : 96];
      7'b0011001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[103 : 100];
      7'b0011010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[107 : 104];
      7'b0011011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[111 : 108];
      7'b0011100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[115 : 112];
      7'b0011101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[119 : 116];
      7'b0011110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[123 : 120];
      7'b0011111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[127 : 124];
      7'b0100000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[131 : 128];
      7'b0100001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[135 : 132];
      7'b0100010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[139 : 136];
      7'b0100011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[143 : 140];
      7'b0100100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[147 : 144];
      7'b0100101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[151 : 148];
      7'b0100110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[155 : 152];
      7'b0100111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[159 : 156];
      7'b0101000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[163 : 160];
      7'b0101001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[167 : 164];
      7'b0101010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[171 : 168];
      7'b0101011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[175 : 172];
      7'b0101100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[179 : 176];
      7'b0101101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[183 : 180];
      7'b0101110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[187 : 184];
      7'b0101111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[191 : 188];
      7'b0110000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[195 : 192];
      7'b0110001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[199 : 196];
      7'b0110010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[203 : 200];
      7'b0110011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[207 : 204];
      7'b0110100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[211 : 208];
      7'b0110101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[215 : 212];
      7'b0110110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[219 : 216];
      7'b0110111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[223 : 220];
      7'b0111000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[227 : 224];
      7'b0111001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[231 : 228];
      7'b0111010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[235 : 232];
      7'b0111011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[239 : 236];
      7'b0111100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[243 : 240];
      7'b0111101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[247 : 244];
      7'b0111110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[251 : 248];
      7'b0111111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[255 : 252];
      7'b1000000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[259 : 256];
      7'b1000001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[263 : 260];
      7'b1000010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[267 : 264];
      7'b1000011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[271 : 268];
      7'b1000100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[275 : 272];
      7'b1000101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[279 : 276];
      7'b1000110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[283 : 280];
      7'b1000111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[287 : 284];
      7'b1001000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[291 : 288];
      7'b1001001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[295 : 292];
      7'b1001010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[299 : 296];
      7'b1001011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[303 : 300];
      7'b1001100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[307 : 304];
      7'b1001101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[311 : 308];
      7'b1001110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[315 : 312];
      7'b1001111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[319 : 316];
      7'b1010000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[323 : 320];
      7'b1010001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[327 : 324];
      7'b1010010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[331 : 328];
      7'b1010011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[335 : 332];
      7'b1010100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[339 : 336];
      7'b1010101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[343 : 340];
      7'b1010110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[347 : 344];
      7'b1010111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[351 : 348];
      7'b1011000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[355 : 352];
      7'b1011001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[359 : 356];
      7'b1011010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[363 : 360];
      7'b1011011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[367 : 364];
      7'b1011100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[371 : 368];
      7'b1011101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[375 : 372];
      7'b1011110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[379 : 376];
      7'b1011111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[383 : 380];
      7'b1100000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[387 : 384];
      7'b1100001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[391 : 388];
      7'b1100010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[395 : 392];
      7'b1100011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[399 : 396];
      7'b1100100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[403 : 400];
      7'b1100101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[407 : 404];
      7'b1100110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[411 : 408];
      7'b1100111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[415 : 412];
      7'b1101000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[419 : 416];
      7'b1101001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[423 : 420];
      7'b1101010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[427 : 424];
      7'b1101011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[431 : 428];
      7'b1101100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[435 : 432];
      7'b1101101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[439 : 436];
      7'b1101110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[443 : 440];
      7'b1101111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[447 : 444];
      7'b1110000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[451 : 448];
      7'b1110001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[455 : 452];
      7'b1110010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[459 : 456];
      7'b1110011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[463 : 460];
      7'b1110100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[467 : 464];
      7'b1110101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[471 : 468];
      7'b1110110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[475 : 472];
      7'b1110111 : t_dense_zero_payload_4 = t_dense_zero_payload_3[479 : 476];
      7'b1111000 : t_dense_zero_payload_4 = t_dense_zero_payload_3[483 : 480];
      7'b1111001 : t_dense_zero_payload_4 = t_dense_zero_payload_3[487 : 484];
      7'b1111010 : t_dense_zero_payload_4 = t_dense_zero_payload_3[491 : 488];
      7'b1111011 : t_dense_zero_payload_4 = t_dense_zero_payload_3[495 : 492];
      7'b1111100 : t_dense_zero_payload_4 = t_dense_zero_payload_3[499 : 496];
      7'b1111101 : t_dense_zero_payload_4 = t_dense_zero_payload_3[503 : 500];
      7'b1111110 : t_dense_zero_payload_4 = t_dense_zero_payload_3[507 : 504];
      default : t_dense_zero_payload_4 = t_dense_zero_payload_3[511 : 508];
    endcase
  end

  always @(*) begin
    case(t_sparse_packOut_payload_1)
      5'b00000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_0;
      5'b00001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_1;
      5'b00010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_2;
      5'b00011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_3;
      5'b00100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_4;
      5'b00101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_5;
      5'b00110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_6;
      5'b00111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_7;
      5'b01000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_8;
      5'b01001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_9;
      5'b01010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_10;
      5'b01011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_11;
      5'b01100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_12;
      5'b01101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_13;
      5'b01110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_14;
      5'b01111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_15;
      5'b10000 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_16;
      5'b10001 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_17;
      5'b10010 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_18;
      5'b10011 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_19;
      5'b10100 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_20;
      5'b10101 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_21;
      5'b10110 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_22;
      5'b10111 : t_sparse_packOut_payload = sparse_busPayloadSubDiv_23;
      default : t_sparse_packOut_payload = sparse_busPayloadSubDiv_24;
    endcase
  end

  always @(*) begin
    case(t_kv_extPack_payload_2)
      4'b0000 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[31 : 0];
      4'b0001 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[63 : 32];
      4'b0010 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[95 : 64];
      4'b0011 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[127 : 96];
      4'b0100 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[159 : 128];
      4'b0101 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[191 : 160];
      4'b0110 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[223 : 192];
      4'b0111 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[255 : 224];
      4'b1000 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[287 : 256];
      4'b1001 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[319 : 288];
      4'b1010 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[351 : 320];
      4'b1011 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[383 : 352];
      4'b1100 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[415 : 384];
      4'b1101 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[447 : 416];
      4'b1110 : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[479 : 448];
      default : t_kv_extPack_payload_4 = t_kv_extPack_payload_3[511 : 480];
    endcase
  end

  assign io_bus_ready = busDeMux_io_input_ready;
  assign busTag = io_bus_payload_dest;
  assign mlpGBusHitNotSparse = ((busTag == 6'h0f) && (! io_enPredictor));
  assign lnScaleHit = (((6'h03 == busTag) || (6'h0c == busTag)) || (6'h12 == busTag));
  assign denseHit = (((((((6'h04 == busTag) || (6'h05 == busTag)) || (6'h07 == busTag)) || (6'h0b == busTag)) || (6'h0d == busTag)) || (6'h13 == busTag)) || mlpGBusHitNotSparse);
  assign sparseHit = (((6'h10 == busTag) || (6'h11 == busTag)) && (! mlpGBusHitNotSparse));
  assign kvHit = ((6'h06 == busTag) || (6'h08 == busTag));
  always @(*) begin
    busDeMuxSel = 3'b000;
    if(denseHit) begin
      busDeMuxSel = 3'b001;
    end else begin
      if(sparseHit) begin
        busDeMuxSel = 3'b010;
      end else begin
        if(kvHit) begin
          busDeMuxSel = 3'b011;
        end else begin
          if(lnScaleHit) begin
            busDeMuxSel = 3'b100;
          end
        end
      end
    end
  end

  always @(*) begin
    busMuxSel = 2'b00;
    if(denseHit) begin
      busMuxSel = 2'b01;
    end else begin
      if(sparseHit) begin
        busMuxSel = 2'b10;
      end else begin
        if(kvHit) begin
          busMuxSel = 2'b11;
        end
      end
    end
  end

  always @(*) begin
    miscInMuxSel = 2'b00;
    if(sparseHit) begin
      miscInMuxSel = 2'b01;
    end else begin
      if(kvHit) begin
        miscInMuxSel = 2'b10;
      end
    end
  end

  assign axi_busDataFifo_io_push_fire = (busMux_io_output_valid && busDataFifo_io_push_ready);
  assign busLinkFifo_io_push_payload_fragment = io_bus_payload_dest;
  assign axi_busDataFifo_io_pop_fire = (busDataFifo_io_pop_valid && int_bus_ready);
  assign int_bus_valid = busDataFifo_io_pop_valid;
  assign int_bus_payload_last = busLinkFifo_io_pop_payload_last;
  assign int_bus_payload_tuser = busLinkFifo_io_pop_payload_fragment;
  assign int_bus_payload_tdata = busDataFifo_io_pop_payload;
  assign isVOut = (io_bus_payload_dest == 6'h08);
  assign axpyHit = (6'h11 == io_bus_payload_dest);
  assign axi_miscFifo_io_push_fire = (miscInMux_io_output_valid && miscFifo_io_push_ready);
  assign tagFifo_io_push_payload = {{{axpyHit,isVOut},miscInMuxSel},io_bus_payload_dest};
  assign tagFifoDest = tagFifo_io_pop_payload[5 : 0];
  assign tagFifoSel = t_tagFifoSel[1 : 0];
  assign miscOutDeMux_io_select = t_io_select[1 : 0];
  assign axi_tagFifo_io_pop_fire = (tagFifo_io_pop_valid && miscOutDeMux_io_input_ready);
  assign ln_bufIn_valid = busDeMux_io_outputs_4_valid;
  assign ln_bufIn_payload = io_bus_payload_data;
  assign axi_ln_buf_io_push_fire = (ln_bufIn_valid && ln_buf_io_push_ready);
  always @(*) begin
    t_io_push_payload = 1'b0;
    if(axi_ln_buf_io_push_fire) begin
      t_io_push_payload = 1'b1;
    end
  end

  assign t_ln_bufIn_ready = (t_io_push_payload_2 == 2'b11);
  always @(*) begin
    t_io_push_payload_1 = (t_io_push_payload_2 + t_t_io_push_payload_1);
    if(1'b0) begin
      t_io_push_payload_1 = 2'b00;
    end
  end

  assign t_io_push_payload_3 = ln_bufIn_payload;
  assign ln_buf_io_push_payload = t_io_push_payload_4;
  assign ln_bufIn_ready = (ln_buf_io_push_ready && t_ln_bufIn_ready);
  assign ln_scaleOut_fire = (ln_scaleOut_valid && ln_scaleOut_ready);
  always @(*) begin
    t_ln_scaleOut_payload = 1'b0;
    if(ln_scaleOut_fire) begin
      t_ln_scaleOut_payload = 1'b1;
    end
  end

  assign t_io_pop_ready = (t_ln_scaleOut_payload_2 == 3'b111);
  always @(*) begin
    t_ln_scaleOut_payload_1 = (t_ln_scaleOut_payload_2 + t_t_ln_scaleOut_payload_1);
    if(1'b0) begin
      t_ln_scaleOut_payload_1 = 3'b000;
    end
  end

  assign ln_scaleOut_valid = ln_buf_io_pop_valid;
  assign t_ln_scaleOut_payload_3 = ln_buf_io_pop_payload;
  assign ln_scaleOut_payload = t_ln_scaleOut_payload_4;
  assign ln_buf_io_pop_ready = (ln_scaleOut_ready && t_io_pop_ready);
  assign ln_scaleOut_ready = ln_scaleOut_fifo_io_push_ready;
  assign int_lnScale_valid = ln_scaleOut_fifo_io_pop_valid;
  assign int_lnScale_payload = ln_scaleOut_fifo_io_pop_payload;
  assign dense_bus_valid = miscOutDeMux_io_outputs_0_valid;
  assign dense_bus_payload = miscFifo_io_pop_payload;
  assign dense_cntOvf = (dense_cnt == 3'b100);
  assign dense_bus_fire = (dense_bus_valid && dense_bus_ready);
  assign dense_bus_ready = dense_deMux_io_input_ready;
  assign dense_deMux_io_select = dense_cntIsZero;
  assign dense_toScale_valid = dense_deMux_io_outputs_0_valid;
  assign dense_toScale_payload = dense_bus_payload;
  assign dense_toZero_valid = dense_deMux_io_outputs_1_valid;
  assign dense_toZero_payload = dense_bus_payload;
  assign dense_toScale_ready = dense_scaleFifo_io_push_ready;
  assign dense_scale_fire = (dense_scale_valid && dense_scale_ready);
  always @(*) begin
    t_dense_scale_payload = 1'b0;
    if(dense_scale_fire) begin
      t_dense_scale_payload = 1'b1;
    end
  end

  assign t_io_pop_ready_1 = (t_dense_scale_payload_2 == 5'h1f);
  always @(*) begin
    t_dense_scale_payload_1 = (t_dense_scale_payload_2 + t_t_dense_scale_payload_1);
    if(1'b0) begin
      t_dense_scale_payload_1 = 5'h0;
    end
  end

  assign dense_scale_valid = dense_scaleFifo_io_pop_valid;
  assign t_dense_scale_payload_3 = dense_scaleFifo_io_pop_payload;
  assign dense_scale_payload = t_dense_scale_payload_4;
  assign dense_scaleFifo_io_pop_ready = (dense_scale_ready && t_io_pop_ready_1);
  always @(*) begin
    dense_zero_ready = dense_zeroPipe_ready;
    if((! dense_zeroPipe_valid)) begin
      dense_zero_ready = 1'b1;
    end
  end

  assign dense_zeroPipe_valid = dense_zero_rValid;
  assign dense_zeroPipe_payload = dense_zero_rData;
  always @(*) begin
    dense_toZero_ready = dense_toZero_m2sPipe_ready;
    if((! dense_toZero_m2sPipe_valid)) begin
      dense_toZero_ready = 1'b1;
    end
  end

  assign dense_toZero_m2sPipe_valid = dense_toZero_rValid;
  assign dense_toZero_m2sPipe_payload = dense_toZero_rData;
  assign dense_zero_fire = (dense_zero_valid && dense_zero_ready);
  always @(*) begin
    t_dense_zero_payload = 1'b0;
    if(dense_zero_fire) begin
      t_dense_zero_payload = 1'b1;
    end
  end

  assign t_dense_toZero_m2sPipe_ready = (t_dense_zero_payload_2 == 7'h7f);
  always @(*) begin
    t_dense_zero_payload_1 = (t_dense_zero_payload_2 + t_t_dense_zero_payload_1);
    if(1'b0) begin
      t_dense_zero_payload_1 = 7'h0;
    end
  end

  assign dense_zero_valid = dense_toZero_m2sPipe_valid;
  assign t_dense_zero_payload_3 = dense_toZero_m2sPipe_payload;
  assign dense_zero_payload = t_dense_zero_payload_4;
  assign dense_toZero_m2sPipe_ready = (dense_zero_ready && t_dense_toZero_m2sPipe_ready);
  assign dense_zeroAlign_valid = dense_zeroPipe_valid;
  assign dense_zeroPipe_ready = dense_zeroAlign_ready;
  assign dense_zeroAlign_payload = {4'd0, dense_zeroPipe_payload};
  assign sparse_gen_io_tag = io_bus_payload_dest;
  assign sparse_bus_valid = miscOutDeMux_io_outputs_1_valid;
  assign sparse_bus_tdata = miscFifo_io_pop_payload[499 : 0];
  assign sparse_bus_tuser = tagFifo_io_pop_payload[5 : 0];
  assign sparse_tagHit = {(6'h11 == sparse_bus_tuser),(6'h10 == sparse_bus_tuser)};
  assign sparse_packVec_0 = 8'h10;
  assign sparse_packVec_1 = 8'h10;
  assign sparse_packCnt = (sparse_tagHit[0] ? sparse_packVec_0 : sparse_packVec_1);
  assign sparse_cntLv1Ovf = (sparse_cntLv1 == 8'h18);
  assign sparse_cntLv2Ovf = (sparse_cntLv2 == t_sparse_cntLv2Ovf);
  always @(*) begin
    sparse_bus_ready = 1'b0;
    if(sparse_packOut_fire) begin
      if(sparse_cntLv1Ovf) begin
        sparse_bus_ready = 1'b1;
      end
      if(sparse_cntLv2Ovf) begin
        sparse_bus_ready = 1'b1;
      end
    end
  end

  assign sparse_packOut_fire = (sparse_packOut_valid && sparse_packOut_ready);
  assign sparse_busPayloadSubDiv_0 = sparse_bus_tdata[19 : 0];
  assign sparse_busPayloadSubDiv_1 = sparse_bus_tdata[39 : 20];
  assign sparse_busPayloadSubDiv_2 = sparse_bus_tdata[59 : 40];
  assign sparse_busPayloadSubDiv_3 = sparse_bus_tdata[79 : 60];
  assign sparse_busPayloadSubDiv_4 = sparse_bus_tdata[99 : 80];
  assign sparse_busPayloadSubDiv_5 = sparse_bus_tdata[119 : 100];
  assign sparse_busPayloadSubDiv_6 = sparse_bus_tdata[139 : 120];
  assign sparse_busPayloadSubDiv_7 = sparse_bus_tdata[159 : 140];
  assign sparse_busPayloadSubDiv_8 = sparse_bus_tdata[179 : 160];
  assign sparse_busPayloadSubDiv_9 = sparse_bus_tdata[199 : 180];
  assign sparse_busPayloadSubDiv_10 = sparse_bus_tdata[219 : 200];
  assign sparse_busPayloadSubDiv_11 = sparse_bus_tdata[239 : 220];
  assign sparse_busPayloadSubDiv_12 = sparse_bus_tdata[259 : 240];
  assign sparse_busPayloadSubDiv_13 = sparse_bus_tdata[279 : 260];
  assign sparse_busPayloadSubDiv_14 = sparse_bus_tdata[299 : 280];
  assign sparse_busPayloadSubDiv_15 = sparse_bus_tdata[319 : 300];
  assign sparse_busPayloadSubDiv_16 = sparse_bus_tdata[339 : 320];
  assign sparse_busPayloadSubDiv_17 = sparse_bus_tdata[359 : 340];
  assign sparse_busPayloadSubDiv_18 = sparse_bus_tdata[379 : 360];
  assign sparse_busPayloadSubDiv_19 = sparse_bus_tdata[399 : 380];
  assign sparse_busPayloadSubDiv_20 = sparse_bus_tdata[419 : 400];
  assign sparse_busPayloadSubDiv_21 = sparse_bus_tdata[439 : 420];
  assign sparse_busPayloadSubDiv_22 = sparse_bus_tdata[459 : 440];
  assign sparse_busPayloadSubDiv_23 = sparse_bus_tdata[479 : 460];
  assign sparse_busPayloadSubDiv_24 = sparse_bus_tdata[499 : 480];
  assign sparse_packOut_valid = sparse_bus_valid;
  assign sparse_packOut_payload = t_sparse_packOut_payload;
  assign sparse_packOut_ready = 1'b1;
  assign sparse_preScaleFifo_io_push_payload = sparse_packOut_payload[19 : 4];
  assign sparse_postScaleFifo_io_push_payload = sparse_packOut_payload[19 : 4];
  assign sparse_zeroFifo_io_push_payload = sparse_packOut_payload[3 : 0];
  assign sparse_selAxpy = tagFifo_io_pop_payload[9];
  assign sparse_preScaleFifo_io_push_valid = (sparse_packOut_valid && sparse_selAxpy);
  assign sparse_postScaleFifo_io_push_valid = (sparse_packOut_valid && (! sparse_selAxpy));
  assign sparse_zeroQueue_valid = sparse_zeroFifo_io_pop_valid;
  assign sparse_zeroQueue_payload = {4'b0000,sparse_zeroFifo_io_pop_payload};
  assign kv_bus_valid = miscOutDeMux_io_outputs_2_valid;
  assign kv_bus_payload = miscFifo_io_pop_payload;
  assign kv_extPack_fire = (kv_extPack_valid && kv_extPack_ready);
  always @(*) begin
    t_kv_extPack_payload = 1'b0;
    if(kv_extPack_fire) begin
      t_kv_extPack_payload = 1'b1;
    end
  end

  assign t_kv_bus_ready = (t_kv_extPack_payload_2 == 4'b1111);
  always @(*) begin
    t_kv_extPack_payload_1 = (t_kv_extPack_payload_2 + t_t_kv_extPack_payload_1);
    if(1'b0) begin
      t_kv_extPack_payload_1 = 4'b0000;
    end
  end

  assign kv_extPack_valid = kv_bus_valid;
  assign t_kv_extPack_payload_3 = kv_bus_payload;
  assign kv_extPack_payload = t_kv_extPack_payload_4;
  assign kv_bus_ready = (kv_extPack_ready && t_kv_bus_ready);
  assign kv_isVOut = tagFifo_io_pop_payload[8];
  assign kv_kCntOvf = (kv_kCnt == t_kv_kCntOvf);
  assign kv_vCntOvf = (kv_vCnt == t_kv_vCntOvf);
  assign kv_tokenHigh = io_token[9 : 4];
  assign kv_kCntHigh = kv_kCnt[9 : 4];
  assign kv_vCntHigh = kv_vCnt[9 : 4];
  assign kv_kCntLow = kv_kCnt[3 : 0];
  assign kv_vCntLow = kv_vCnt[3 : 0];
  assign kv_kPack_fire = (kv_kPack_valid && kv_kPack_ready);
  assign kv_vPack_fire = (kv_vPack_valid && kv_vPack_ready);
  assign kv_kSelLocal = (kv_tokenHighZeroDly || kv_kCntHighMatch);
  assign kv_vSelLocal = (kv_tokenHighZeroDly || kv_vCntHighMatch);
  always @(*) begin
    kv_extPack_ready = kv_extPack_m2sPipe_ready;
    if((! kv_extPack_m2sPipe_valid)) begin
      kv_extPack_ready = 1'b1;
    end
  end

  assign kv_extPack_m2sPipe_valid = kv_extPack_rValid;
  assign kv_extPack_m2sPipe_payload = kv_extPack_rData;
  assign kv_extPack_m2sPipe_ready = kv_extPackDeMux_io_input_ready;
  assign kv_extPackDeMux_io_select = kv_isVOut;
  assign io_kSzOut_ready = kv_kMux_io_inputs_1_ready;
  assign kv_kMux_io_select = kv_kSelLocal;
  assign kv_kPack_valid = kv_kMux_io_output_valid;
  assign kv_kPack_payload = kv_kMux_io_output_payload;
  assign io_vSzOut_ready = kv_vMux_io_inputs_1_ready;
  assign kv_vMux_io_select = kv_vSelLocal;
  assign kv_vPack_valid = kv_vMux_io_output_valid;
  assign kv_vPack_payload = kv_vMux_io_output_payload;
  assign kv_kPack_ready = kv_kFork_io_input_ready;
  assign kv_kScale_valid = kv_kFork_io_outputs_0_valid;
  assign kv_kScale_payload = kv_kPack_payload[15 : 0];
  assign kv_kZero_valid = kv_kFork_io_outputs_1_valid;
  assign kv_kZero_payload = t_kv_kZero_payload[7 : 0];
  assign kv_vPack_ready = kv_vFork_io_input_ready;
  assign kv_vScalePreInsert_valid = kv_vFork_io_outputs_0_valid;
  assign kv_vScalePreInsert_payload = kv_vPack_payload[15 : 0];
  assign kv_vZero_valid = kv_vFork_io_outputs_1_valid;
  assign kv_vZero_payload = t_kv_vZero_payload[7 : 0];
  assign kv_vScale_fire = (kv_vScale_valid && kv_vScale_ready);
  assign kv_vScaleOne_valid = (kv_vScalePreInsert_valid && kv_vScaleCntIsZero);
  assign kv_vScaleOne_payload = 16'h3c00;
  assign kv_vScalePreInsert_ready = kv_vScaleMux_io_inputs_0_ready;
  assign kv_vScaleOne_ready = kv_vScaleMux_io_inputs_1_ready;
  assign kv_vScaleMux_io_select = kv_vScaleCntIsZero;
  assign kv_vScale_valid = kv_vScaleMux_io_output_valid;
  assign kv_vScale_payload = kv_vScaleMux_io_output_payload;
  assign postMlpGBusHitNotSparse = ((int_bus_payload_tuser == 6'h0f) && (! io_enPredictor));
  assign postSparseHit = (((6'h10 == int_bus_payload_tuser) || (6'h11 == int_bus_payload_tuser)) && (! postMlpGBusHitNotSparse));
  assign postKHit = (int_bus_payload_tuser == 6'h06);
  assign postVHit = (int_bus_payload_tuser == 6'h08);
  assign dense_zeroAlign_ready = zeroInt4Mux_io_inputs_0_ready;
  assign sparse_zeroQueue_ready = zeroInt4Mux_io_inputs_1_ready;
  assign zeroInt4Mux_io_select = postSparseHit;
  assign int_zeroInt4_valid = zeroInt4Mux_io_output_valid;
  assign int_zeroInt4_payload = zeroInt4Mux_io_output_payload;
  assign kv_vZero_ready = vZeroFifo_io_push_ready;
  assign kv_vScale_ready = vScaleFifo_io_push_ready;
  assign kv_kZero_ready = zeroInt8Mux_io_inputs_1_ready;
  always @(*) begin
    zeroInt8Mux_io_select = 2'b00;
    if(postKHit) begin
      zeroInt8Mux_io_select = 2'b01;
    end
    if(postVHit) begin
      zeroInt8Mux_io_select = 2'b10;
    end
  end

  assign int_zeroInt8_valid = zeroInt8Mux_io_output_valid;
  assign int_zeroInt8_payload = zeroInt8Mux_io_output_payload;
  assign dense_scale_ready = dense_scale_to_ip_s_axis_a_tready;
  assign kv_kScale_ready = kv_kScale_to_ip_s_axis_a_tready;
  assign int_postScale_valid = postScaleMux_io_output_valid;
  assign int_postScale_payload = postScaleMux_io_output_payload;
  assign postMlpCfgHitNotSparse = ((io_postCfgTag == 6'h16) && (! io_enPredictor));
  assign postCfgDenseHit = (((((((((t_postCfgDenseHit == io_postCfgTag) || (t_postCfgDenseHit_1 == io_postCfgTag)) || (6'h07 == io_postCfgTag)) || (6'h10 == io_postCfgTag)) || (6'h11 == io_postCfgTag)) || (6'h13 == io_postCfgTag)) || (6'h1b == io_postCfgTag)) || (6'h23 == io_postCfgTag)) || postMlpCfgHitNotSparse);
  assign postCfgSparseHit = (((((6'h1c == io_postCfgTag) || (6'h16 == io_postCfgTag)) || (6'h18 == io_postCfgTag)) || (6'h1f == io_postCfgTag)) && (! postMlpCfgHitNotSparse));
  assign postCfgKvHit = (io_postCfgTag == 6'h0d);
  always @(*) begin
    postSel = 2'b11;
    if(postCfgDenseHit) begin
      postSel = 2'b00;
    end
    if(postCfgSparseHit) begin
      postSel = 2'b01;
    end
    if(postCfgKvHit) begin
      postSel = 2'b10;
    end
  end

  assign int_preScale_valid = preScaleMux_io_output_valid;
  assign int_preScale_payload = preScaleMux_io_output_payload;
  assign preCfgSparseHit = ((((6'h1c == io_preCfgTag) || (6'h16 == io_preCfgTag)) || (6'h18 == io_preCfgTag)) || (6'h1f == io_preCfgTag));
  assign preCfgKvHit = (io_preCfgTag == 6'h0f);
  always @(*) begin
    preSel = 2'b10;
    if(preCfgSparseHit) begin
      preSel = 2'b00;
    end
    if(preCfgKvHit) begin
      preSel = 2'b01;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      t_io_push_payload_2 <= 2'b00;
      t_ln_scaleOut_payload_2 <= 3'b000;
      dense_cnt <= 3'b000;
      dense_cntIsZero <= 1'b1;
      t_dense_scale_payload_2 <= 5'h0;
      dense_zero_rValid <= 1'b0;
      dense_toZero_rValid <= 1'b0;
      t_dense_zero_payload_2 <= 7'h0;
      sparse_cntLv1 <= 8'h0;
      sparse_cntLv2 <= 8'h0;
      t_kv_extPack_payload_2 <= 4'b0000;
      kv_kCnt <= 10'h0;
      kv_vCnt <= 10'h0;
      kv_tokenHighZeroDly <= 1'b1;
      kv_kCntHighMatch <= 1'b0;
      kv_vCntHighMatch <= 1'b0;
      kv_extPack_rValid <= 1'b0;
      kv_vScaleCnt <= 10'h0;
      kv_vScaleCntIsZero <= 1'b1;
    end else begin
      t_io_push_payload_2 <= t_io_push_payload_1;
      t_ln_scaleOut_payload_2 <= t_ln_scaleOut_payload_1;
      if(dense_bus_fire) begin
        dense_cnt <= (dense_cnt + 3'b001);
        dense_cntIsZero <= 1'b0;
        if(dense_cntOvf) begin
          dense_cnt <= 3'b000;
          dense_cntIsZero <= 1'b1;
        end
      end
      t_dense_scale_payload_2 <= t_dense_scale_payload_1;
      if(dense_zero_ready) begin
        dense_zero_rValid <= dense_zero_valid;
      end
      if(dense_toZero_ready) begin
        dense_toZero_rValid <= dense_toZero_valid;
      end
      t_dense_zero_payload_2 <= t_dense_zero_payload_1;
      if(sparse_packOut_fire) begin
        sparse_cntLv1 <= (sparse_cntLv1 + 8'h01);
        sparse_cntLv2 <= (sparse_cntLv2 + 8'h01);
        if(sparse_cntLv1Ovf) begin
          sparse_cntLv1 <= 8'h0;
        end
        if(sparse_cntLv2Ovf) begin
          sparse_cntLv1 <= 8'h0;
          sparse_cntLv2 <= 8'h0;
        end
      end
      t_kv_extPack_payload_2 <= t_kv_extPack_payload_1;
      kv_tokenHighZeroDly <= (kv_tokenHigh == 6'h0);
      if(kv_kPack_fire) begin
        kv_kCnt <= (kv_kCnt + 10'h001);
        if(((&kv_kCntLow) && (kv_kCntHigh == t_when))) begin
          kv_kCntHighMatch <= 1'b1;
        end
        if(kv_kCntOvf) begin
          kv_kCnt <= 10'h0;
          kv_kCntHighMatch <= 1'b0;
        end
      end
      if(kv_vPack_fire) begin
        kv_vCnt <= (kv_vCnt + 10'h001);
        if(((&kv_vCntLow) && (kv_vCntHigh == t_when_1))) begin
          kv_vCntHighMatch <= 1'b1;
        end
        if(kv_vCntOvf) begin
          kv_vCnt <= 10'h0;
          kv_vCntHighMatch <= 1'b0;
        end
      end
      if(kv_extPack_ready) begin
        kv_extPack_rValid <= kv_extPack_valid;
      end
      if(kv_vScale_fire) begin
        kv_vScaleCnt <= (kv_vScaleCnt + 10'h001);
        kv_vScaleCntIsZero <= 1'b0;
        if((kv_vScaleCnt == io_token)) begin
          kv_vScaleCnt <= 10'h0;
          kv_vScaleCntIsZero <= 1'b1;
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(dense_zero_ready) begin
      dense_zero_rData <= dense_zero_payload;
    end
    if(dense_toZero_ready) begin
      dense_toZero_rData <= dense_toZero_payload;
    end
    if(kv_extPack_ready) begin
      kv_extPack_rData <= kv_extPack_payload;
    end
  end


endmodule

module SplitAxiDatamover (
  input  wire          s2mm_tvalid,
  output wire          s2mm_tready,
  input  wire [511:0]  s2mm_tdata,
  input  wire [63:0]   s2mm_tkeep,
  input  wire          s2mm_tlast,
  output wire          mm2s_tvalid,
  input  wire          mm2s_tready,
  output wire [511:0]  mm2s_tdata,
  output wire [63:0]   mm2s_tkeep,
  output wire          mm2s_tlast,
  input  wire          s2mmCmd_tvalid,
  output wire          s2mmCmd_tready,
  input  wire [71:0]   s2mmCmd_tdata,
  input  wire          mm2sCmd_tvalid,
  output wire          mm2sCmd_tready,
  input  wire [71:0]   mm2sCmd_tdata,
  output wire          m_axi_0_awvalid,
  input  wire          m_axi_0_awready,
  output wire [31:0]   m_axi_0_awaddr,
  output wire [3:0]    m_axi_0_awid,
  output wire [7:0]    m_axi_0_awlen,
  output wire [2:0]    m_axi_0_awsize,
  output wire [1:0]    m_axi_0_awburst,
  output wire [3:0]    m_axi_0_awcache,
  output wire [3:0]    m_axi_0_awuser,
  output wire [2:0]    m_axi_0_awprot,
  output wire          m_axi_0_wvalid,
  input  wire          m_axi_0_wready,
  output wire [127:0]  m_axi_0_wdata,
  output wire [15:0]   m_axi_0_wstrb,
  output wire          m_axi_0_wlast,
  input  wire          m_axi_0_bvalid,
  output wire          m_axi_0_bready,
  input  wire [3:0]    m_axi_0_bid,
  input  wire [1:0]    m_axi_0_bresp,
  output wire          m_axi_0_arvalid,
  input  wire          m_axi_0_arready,
  output wire [31:0]   m_axi_0_araddr,
  output wire [3:0]    m_axi_0_arid,
  output wire [7:0]    m_axi_0_arlen,
  output wire [2:0]    m_axi_0_arsize,
  output wire [1:0]    m_axi_0_arburst,
  output wire [3:0]    m_axi_0_arcache,
  output wire [3:0]    m_axi_0_aruser,
  output wire [2:0]    m_axi_0_arprot,
  input  wire          m_axi_0_rvalid,
  output wire          m_axi_0_rready,
  input  wire [127:0]  m_axi_0_rdata,
  input  wire [3:0]    m_axi_0_rid,
  input  wire [1:0]    m_axi_0_rresp,
  input  wire          m_axi_0_rlast,
  output wire          m_axi_1_awvalid,
  input  wire          m_axi_1_awready,
  output wire [31:0]   m_axi_1_awaddr,
  output wire [3:0]    m_axi_1_awid,
  output wire [7:0]    m_axi_1_awlen,
  output wire [2:0]    m_axi_1_awsize,
  output wire [1:0]    m_axi_1_awburst,
  output wire [3:0]    m_axi_1_awcache,
  output wire [3:0]    m_axi_1_awuser,
  output wire [2:0]    m_axi_1_awprot,
  output wire          m_axi_1_wvalid,
  input  wire          m_axi_1_wready,
  output wire [127:0]  m_axi_1_wdata,
  output wire [15:0]   m_axi_1_wstrb,
  output wire          m_axi_1_wlast,
  input  wire          m_axi_1_bvalid,
  output wire          m_axi_1_bready,
  input  wire [3:0]    m_axi_1_bid,
  input  wire [1:0]    m_axi_1_bresp,
  output wire          m_axi_1_arvalid,
  input  wire          m_axi_1_arready,
  output wire [31:0]   m_axi_1_araddr,
  output wire [3:0]    m_axi_1_arid,
  output wire [7:0]    m_axi_1_arlen,
  output wire [2:0]    m_axi_1_arsize,
  output wire [1:0]    m_axi_1_arburst,
  output wire [3:0]    m_axi_1_arcache,
  output wire [3:0]    m_axi_1_aruser,
  output wire [2:0]    m_axi_1_arprot,
  input  wire          m_axi_1_rvalid,
  output wire          m_axi_1_rready,
  input  wire [127:0]  m_axi_1_rdata,
  input  wire [3:0]    m_axi_1_rid,
  input  wire [1:0]    m_axi_1_rresp,
  input  wire          m_axi_1_rlast,
  output wire          m_axi_2_awvalid,
  input  wire          m_axi_2_awready,
  output wire [31:0]   m_axi_2_awaddr,
  output wire [3:0]    m_axi_2_awid,
  output wire [7:0]    m_axi_2_awlen,
  output wire [2:0]    m_axi_2_awsize,
  output wire [1:0]    m_axi_2_awburst,
  output wire [3:0]    m_axi_2_awcache,
  output wire [3:0]    m_axi_2_awuser,
  output wire [2:0]    m_axi_2_awprot,
  output wire          m_axi_2_wvalid,
  input  wire          m_axi_2_wready,
  output wire [127:0]  m_axi_2_wdata,
  output wire [15:0]   m_axi_2_wstrb,
  output wire          m_axi_2_wlast,
  input  wire          m_axi_2_bvalid,
  output wire          m_axi_2_bready,
  input  wire [3:0]    m_axi_2_bid,
  input  wire [1:0]    m_axi_2_bresp,
  output wire          m_axi_2_arvalid,
  input  wire          m_axi_2_arready,
  output wire [31:0]   m_axi_2_araddr,
  output wire [3:0]    m_axi_2_arid,
  output wire [7:0]    m_axi_2_arlen,
  output wire [2:0]    m_axi_2_arsize,
  output wire [1:0]    m_axi_2_arburst,
  output wire [3:0]    m_axi_2_arcache,
  output wire [3:0]    m_axi_2_aruser,
  output wire [2:0]    m_axi_2_arprot,
  input  wire          m_axi_2_rvalid,
  output wire          m_axi_2_rready,
  input  wire [127:0]  m_axi_2_rdata,
  input  wire [3:0]    m_axi_2_rid,
  input  wire [1:0]    m_axi_2_rresp,
  input  wire          m_axi_2_rlast,
  output wire          m_axi_3_awvalid,
  input  wire          m_axi_3_awready,
  output wire [31:0]   m_axi_3_awaddr,
  output wire [3:0]    m_axi_3_awid,
  output wire [7:0]    m_axi_3_awlen,
  output wire [2:0]    m_axi_3_awsize,
  output wire [1:0]    m_axi_3_awburst,
  output wire [3:0]    m_axi_3_awcache,
  output wire [3:0]    m_axi_3_awuser,
  output wire [2:0]    m_axi_3_awprot,
  output wire          m_axi_3_wvalid,
  input  wire          m_axi_3_wready,
  output wire [127:0]  m_axi_3_wdata,
  output wire [15:0]   m_axi_3_wstrb,
  output wire          m_axi_3_wlast,
  input  wire          m_axi_3_bvalid,
  output wire          m_axi_3_bready,
  input  wire [3:0]    m_axi_3_bid,
  input  wire [1:0]    m_axi_3_bresp,
  output wire          m_axi_3_arvalid,
  input  wire          m_axi_3_arready,
  output wire [31:0]   m_axi_3_araddr,
  output wire [3:0]    m_axi_3_arid,
  output wire [7:0]    m_axi_3_arlen,
  output wire [2:0]    m_axi_3_arsize,
  output wire [1:0]    m_axi_3_arburst,
  output wire [3:0]    m_axi_3_arcache,
  output wire [3:0]    m_axi_3_aruser,
  output wire [2:0]    m_axi_3_arprot,
  input  wire          m_axi_3_rvalid,
  output wire          m_axi_3_rready,
  input  wire [127:0]  m_axi_3_rdata,
  input  wire [3:0]    m_axi_3_rid,
  input  wire [1:0]    m_axi_3_rresp,
  input  wire          m_axi_3_rlast,
  input  wire          ctrl_aw_valid,
  output wire          ctrl_aw_ready,
  input  wire [31:0]   ctrl_aw_payload_addr,
  input  wire [2:0]    ctrl_aw_payload_prot,
  input  wire          ctrl_w_valid,
  output wire          ctrl_w_ready,
  input  wire [31:0]   ctrl_w_payload_data,
  input  wire [3:0]    ctrl_w_payload_strb,
  output wire          ctrl_b_valid,
  input  wire          ctrl_b_ready,
  output wire [1:0]    ctrl_b_payload_resp,
  input  wire          ctrl_ar_valid,
  output wire          ctrl_ar_ready,
  input  wire [31:0]   ctrl_ar_payload_addr,
  input  wire [2:0]    ctrl_ar_payload_prot,
  output wire          ctrl_r_valid,
  input  wire          ctrl_r_ready,
  output wire [31:0]   ctrl_r_payload_data,
  output wire [1:0]    ctrl_r_payload_resp,
  input  wire          aresetn,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                dma_0_s_axis_s2mm_tready;
  wire                dma_0_s_axis_s2mm_cmd_tready;
  wire                dma_0_s_axis_mm2s_cmd_tready;
  wire                dma_0_m_axi_mm2s_arvalid;
  wire       [31:0]   dma_0_m_axi_mm2s_araddr;
  wire       [3:0]    dma_0_m_axi_mm2s_arid;
  wire       [7:0]    dma_0_m_axi_mm2s_arlen;
  wire       [2:0]    dma_0_m_axi_mm2s_arsize;
  wire       [1:0]    dma_0_m_axi_mm2s_arburst;
  wire       [3:0]    dma_0_m_axi_mm2s_arcache;
  wire       [3:0]    dma_0_m_axi_mm2s_aruser;
  wire       [2:0]    dma_0_m_axi_mm2s_arprot;
  wire                dma_0_m_axi_s2mm_awvalid;
  wire       [31:0]   dma_0_m_axi_s2mm_awaddr;
  wire       [3:0]    dma_0_m_axi_s2mm_awid;
  wire       [7:0]    dma_0_m_axi_s2mm_awlen;
  wire       [2:0]    dma_0_m_axi_s2mm_awsize;
  wire       [1:0]    dma_0_m_axi_s2mm_awburst;
  wire       [3:0]    dma_0_m_axi_s2mm_awcache;
  wire       [3:0]    dma_0_m_axi_s2mm_awuser;
  wire       [2:0]    dma_0_m_axi_s2mm_awprot;
  wire                dma_0_m_axi_s2mm_wvalid;
  wire       [127:0]  dma_0_m_axi_s2mm_wdata;
  wire       [15:0]   dma_0_m_axi_s2mm_wstrb;
  wire                dma_0_m_axi_s2mm_wlast;
  wire                dma_0_m_axi_mm2s_rready;
  wire                dma_0_m_axi_s2mm_bready;
  wire                dma_0_m_axis_s2mm_sts_tvalid;
  wire       [7:0]    dma_0_m_axis_s2mm_sts_tdata;
  wire       [0:0]    dma_0_m_axis_s2mm_sts_tkeep;
  wire                dma_0_m_axis_s2mm_sts_tlast;
  wire                dma_0_m_axis_mm2s_sts_tvalid;
  wire       [7:0]    dma_0_m_axis_mm2s_sts_tdata;
  wire       [0:0]    dma_0_m_axis_mm2s_sts_tkeep;
  wire                dma_0_m_axis_mm2s_sts_tlast;
  wire                dma_0_m_axis_mm2s_tvalid;
  wire       [127:0]  dma_0_m_axis_mm2s_tdata;
  wire       [15:0]   dma_0_m_axis_mm2s_tkeep;
  wire                dma_0_m_axis_mm2s_tlast;
  wire                dma_0_mm2s_err;
  wire                dma_0_s2mm_err;
  wire                dma_1_s_axis_s2mm_tready;
  wire                dma_1_s_axis_s2mm_cmd_tready;
  wire                dma_1_s_axis_mm2s_cmd_tready;
  wire                dma_1_m_axi_mm2s_arvalid;
  wire       [31:0]   dma_1_m_axi_mm2s_araddr;
  wire       [3:0]    dma_1_m_axi_mm2s_arid;
  wire       [7:0]    dma_1_m_axi_mm2s_arlen;
  wire       [2:0]    dma_1_m_axi_mm2s_arsize;
  wire       [1:0]    dma_1_m_axi_mm2s_arburst;
  wire       [3:0]    dma_1_m_axi_mm2s_arcache;
  wire       [3:0]    dma_1_m_axi_mm2s_aruser;
  wire       [2:0]    dma_1_m_axi_mm2s_arprot;
  wire                dma_1_m_axi_s2mm_awvalid;
  wire       [31:0]   dma_1_m_axi_s2mm_awaddr;
  wire       [3:0]    dma_1_m_axi_s2mm_awid;
  wire       [7:0]    dma_1_m_axi_s2mm_awlen;
  wire       [2:0]    dma_1_m_axi_s2mm_awsize;
  wire       [1:0]    dma_1_m_axi_s2mm_awburst;
  wire       [3:0]    dma_1_m_axi_s2mm_awcache;
  wire       [3:0]    dma_1_m_axi_s2mm_awuser;
  wire       [2:0]    dma_1_m_axi_s2mm_awprot;
  wire                dma_1_m_axi_s2mm_wvalid;
  wire       [127:0]  dma_1_m_axi_s2mm_wdata;
  wire       [15:0]   dma_1_m_axi_s2mm_wstrb;
  wire                dma_1_m_axi_s2mm_wlast;
  wire                dma_1_m_axi_mm2s_rready;
  wire                dma_1_m_axi_s2mm_bready;
  wire                dma_1_m_axis_s2mm_sts_tvalid;
  wire       [7:0]    dma_1_m_axis_s2mm_sts_tdata;
  wire       [0:0]    dma_1_m_axis_s2mm_sts_tkeep;
  wire                dma_1_m_axis_s2mm_sts_tlast;
  wire                dma_1_m_axis_mm2s_sts_tvalid;
  wire       [7:0]    dma_1_m_axis_mm2s_sts_tdata;
  wire       [0:0]    dma_1_m_axis_mm2s_sts_tkeep;
  wire                dma_1_m_axis_mm2s_sts_tlast;
  wire                dma_1_m_axis_mm2s_tvalid;
  wire       [127:0]  dma_1_m_axis_mm2s_tdata;
  wire       [15:0]   dma_1_m_axis_mm2s_tkeep;
  wire                dma_1_m_axis_mm2s_tlast;
  wire                dma_1_mm2s_err;
  wire                dma_1_s2mm_err;
  wire                dma_2_s_axis_s2mm_tready;
  wire                dma_2_s_axis_s2mm_cmd_tready;
  wire                dma_2_s_axis_mm2s_cmd_tready;
  wire                dma_2_m_axi_mm2s_arvalid;
  wire       [31:0]   dma_2_m_axi_mm2s_araddr;
  wire       [3:0]    dma_2_m_axi_mm2s_arid;
  wire       [7:0]    dma_2_m_axi_mm2s_arlen;
  wire       [2:0]    dma_2_m_axi_mm2s_arsize;
  wire       [1:0]    dma_2_m_axi_mm2s_arburst;
  wire       [3:0]    dma_2_m_axi_mm2s_arcache;
  wire       [3:0]    dma_2_m_axi_mm2s_aruser;
  wire       [2:0]    dma_2_m_axi_mm2s_arprot;
  wire                dma_2_m_axi_s2mm_awvalid;
  wire       [31:0]   dma_2_m_axi_s2mm_awaddr;
  wire       [3:0]    dma_2_m_axi_s2mm_awid;
  wire       [7:0]    dma_2_m_axi_s2mm_awlen;
  wire       [2:0]    dma_2_m_axi_s2mm_awsize;
  wire       [1:0]    dma_2_m_axi_s2mm_awburst;
  wire       [3:0]    dma_2_m_axi_s2mm_awcache;
  wire       [3:0]    dma_2_m_axi_s2mm_awuser;
  wire       [2:0]    dma_2_m_axi_s2mm_awprot;
  wire                dma_2_m_axi_s2mm_wvalid;
  wire       [127:0]  dma_2_m_axi_s2mm_wdata;
  wire       [15:0]   dma_2_m_axi_s2mm_wstrb;
  wire                dma_2_m_axi_s2mm_wlast;
  wire                dma_2_m_axi_mm2s_rready;
  wire                dma_2_m_axi_s2mm_bready;
  wire                dma_2_m_axis_s2mm_sts_tvalid;
  wire       [7:0]    dma_2_m_axis_s2mm_sts_tdata;
  wire       [0:0]    dma_2_m_axis_s2mm_sts_tkeep;
  wire                dma_2_m_axis_s2mm_sts_tlast;
  wire                dma_2_m_axis_mm2s_sts_tvalid;
  wire       [7:0]    dma_2_m_axis_mm2s_sts_tdata;
  wire       [0:0]    dma_2_m_axis_mm2s_sts_tkeep;
  wire                dma_2_m_axis_mm2s_sts_tlast;
  wire                dma_2_m_axis_mm2s_tvalid;
  wire       [127:0]  dma_2_m_axis_mm2s_tdata;
  wire       [15:0]   dma_2_m_axis_mm2s_tkeep;
  wire                dma_2_m_axis_mm2s_tlast;
  wire                dma_2_mm2s_err;
  wire                dma_2_s2mm_err;
  wire                dma_3_s_axis_s2mm_tready;
  wire                dma_3_s_axis_s2mm_cmd_tready;
  wire                dma_3_s_axis_mm2s_cmd_tready;
  wire                dma_3_m_axi_mm2s_arvalid;
  wire       [31:0]   dma_3_m_axi_mm2s_araddr;
  wire       [3:0]    dma_3_m_axi_mm2s_arid;
  wire       [7:0]    dma_3_m_axi_mm2s_arlen;
  wire       [2:0]    dma_3_m_axi_mm2s_arsize;
  wire       [1:0]    dma_3_m_axi_mm2s_arburst;
  wire       [3:0]    dma_3_m_axi_mm2s_arcache;
  wire       [3:0]    dma_3_m_axi_mm2s_aruser;
  wire       [2:0]    dma_3_m_axi_mm2s_arprot;
  wire                dma_3_m_axi_s2mm_awvalid;
  wire       [31:0]   dma_3_m_axi_s2mm_awaddr;
  wire       [3:0]    dma_3_m_axi_s2mm_awid;
  wire       [7:0]    dma_3_m_axi_s2mm_awlen;
  wire       [2:0]    dma_3_m_axi_s2mm_awsize;
  wire       [1:0]    dma_3_m_axi_s2mm_awburst;
  wire       [3:0]    dma_3_m_axi_s2mm_awcache;
  wire       [3:0]    dma_3_m_axi_s2mm_awuser;
  wire       [2:0]    dma_3_m_axi_s2mm_awprot;
  wire                dma_3_m_axi_s2mm_wvalid;
  wire       [127:0]  dma_3_m_axi_s2mm_wdata;
  wire       [15:0]   dma_3_m_axi_s2mm_wstrb;
  wire                dma_3_m_axi_s2mm_wlast;
  wire                dma_3_m_axi_mm2s_rready;
  wire                dma_3_m_axi_s2mm_bready;
  wire                dma_3_m_axis_s2mm_sts_tvalid;
  wire       [7:0]    dma_3_m_axis_s2mm_sts_tdata;
  wire       [0:0]    dma_3_m_axis_s2mm_sts_tkeep;
  wire                dma_3_m_axis_s2mm_sts_tlast;
  wire                dma_3_m_axis_mm2s_sts_tvalid;
  wire       [7:0]    dma_3_m_axis_mm2s_sts_tdata;
  wire       [0:0]    dma_3_m_axis_mm2s_sts_tkeep;
  wire                dma_3_m_axis_mm2s_sts_tlast;
  wire                dma_3_m_axis_mm2s_tvalid;
  wire       [127:0]  dma_3_m_axis_mm2s_tdata;
  wire       [15:0]   dma_3_m_axis_mm2s_tkeep;
  wire                dma_3_m_axis_mm2s_tlast;
  wire                dma_3_mm2s_err;
  wire                dma_3_s2mm_err;
  wire                mm2sCmdSplit_io_inCmd_ready;
  wire                mm2sCmdSplit_io_outCmd_0_valid;
  wire       [71:0]   mm2sCmdSplit_io_outCmd_0_payload;
  wire                mm2sCmdSplit_io_outCmd_1_valid;
  wire       [71:0]   mm2sCmdSplit_io_outCmd_1_payload;
  wire                mm2sCmdSplit_io_outCmd_2_valid;
  wire       [71:0]   mm2sCmdSplit_io_outCmd_2_payload;
  wire                mm2sCmdSplit_io_outCmd_3_valid;
  wire       [71:0]   mm2sCmdSplit_io_outCmd_3_payload;
  wire                s2mmCmdSplit_io_inCmd_ready;
  wire                s2mmCmdSplit_io_outCmd_0_valid;
  wire       [71:0]   s2mmCmdSplit_io_outCmd_0_payload;
  wire                s2mmCmdSplit_io_outCmd_1_valid;
  wire       [71:0]   s2mmCmdSplit_io_outCmd_1_payload;
  wire                s2mmCmdSplit_io_outCmd_2_valid;
  wire       [71:0]   s2mmCmdSplit_io_outCmd_2_payload;
  wire                s2mmCmdSplit_io_outCmd_3_valid;
  wire       [71:0]   s2mmCmdSplit_io_outCmd_3_payload;
  wire                inBuf_0_io_push_ready;
  wire                inBuf_0_io_pop_valid;
  wire       [127:0]  inBuf_0_io_pop_payload;
  wire       [9:0]    inBuf_0_io_occupancy;
  wire       [9:0]    inBuf_0_io_availability;
  wire                inBuf_1_io_push_ready;
  wire                inBuf_1_io_pop_valid;
  wire       [127:0]  inBuf_1_io_pop_payload;
  wire       [9:0]    inBuf_1_io_occupancy;
  wire       [9:0]    inBuf_1_io_availability;
  wire                inBuf_2_io_push_ready;
  wire                inBuf_2_io_pop_valid;
  wire       [127:0]  inBuf_2_io_pop_payload;
  wire       [9:0]    inBuf_2_io_occupancy;
  wire       [9:0]    inBuf_2_io_availability;
  wire                inBuf_3_io_push_ready;
  wire                inBuf_3_io_pop_valid;
  wire       [127:0]  inBuf_3_io_pop_payload;
  wire       [9:0]    inBuf_3_io_occupancy;
  wire       [9:0]    inBuf_3_io_availability;
  wire                inLastBuf_io_push_ready;
  wire                inLastBuf_io_pop_valid;
  wire                inLastBuf_io_pop_payload;
  wire       [9:0]    inLastBuf_io_occupancy;
  wire       [9:0]    inLastBuf_io_availability;
  wire                outBuf_0_io_push_ready;
  wire                outBuf_0_io_pop_valid;
  wire                outBuf_0_io_pop_payload_last;
  wire       [127:0]  outBuf_0_io_pop_payload_fragment;
  wire       [9:0]    outBuf_0_io_occupancy;
  wire       [9:0]    outBuf_0_io_availability;
  wire                outBuf_1_io_push_ready;
  wire                outBuf_1_io_pop_valid;
  wire                outBuf_1_io_pop_payload_last;
  wire       [127:0]  outBuf_1_io_pop_payload_fragment;
  wire       [9:0]    outBuf_1_io_occupancy;
  wire       [9:0]    outBuf_1_io_availability;
  wire                outBuf_2_io_push_ready;
  wire                outBuf_2_io_pop_valid;
  wire                outBuf_2_io_pop_payload_last;
  wire       [127:0]  outBuf_2_io_pop_payload_fragment;
  wire       [9:0]    outBuf_2_io_occupancy;
  wire       [9:0]    outBuf_2_io_availability;
  wire                outBuf_3_io_push_ready;
  wire                outBuf_3_io_pop_valid;
  wire                outBuf_3_io_pop_payload_last;
  wire       [127:0]  outBuf_3_io_pop_payload_fragment;
  wire       [9:0]    outBuf_3_io_occupancy;
  wire       [9:0]    outBuf_3_io_availability;
  wire                s2mmFork_io_input_ready;
  wire                s2mmFork_io_outputs_0_valid;
  wire                s2mmFork_io_outputs_1_valid;
  wire                s2mmFork_io_outputs_2_valid;
  wire                s2mmFork_io_outputs_3_valid;
  wire       [127:0]  s2mmPayloadSplit_0;
  wire       [127:0]  s2mmPayloadSplit_1;
  wire       [127:0]  s2mmPayloadSplit_2;
  wire       [127:0]  s2mmPayloadSplit_3;
  wire                dmaHp_inBuf_0_io_push_fire;
  wire                dmaHp_inBuf_0_io_pop_fire;
  wire       [511:0]  inBufPayload;
  wire                joinEvent_valid;
  wire                joinEvent_ready;
  wire                joinEvent_fire;
  wire                mm2s_valid;
  reg                 mm2s_ready;
  wire       [511:0]  mm2s_payload_data;
  wire       [63:0]   mm2s_payload_keep;
  wire                mm2s_payload_last;
  wire                mm2s_m2sPipe_valid;
  wire                mm2s_m2sPipe_ready;
  wire       [511:0]  mm2s_m2sPipe_payload_data;
  wire       [63:0]   mm2s_m2sPipe_payload_keep;
  wire                mm2s_m2sPipe_payload_last;
  reg                 mm2s_rValid;
  reg        [511:0]  mm2s_rData_data;
  reg        [63:0]   mm2s_rData_keep;
  reg                 mm2s_rData_last;

  AxiDatamover128 dma_0 (
    .s_axis_s2mm_tvalid         (outBuf_0_io_pop_valid                  ), //i
    .s_axis_s2mm_tready         (dma_0_s_axis_s2mm_tready               ), //o
    .s_axis_s2mm_tdata          (outBuf_0_io_pop_payload_fragment[127:0]), //i
    .s_axis_s2mm_tkeep          (16'hffff                               ), //i
    .s_axis_s2mm_tlast          (outBuf_0_io_pop_payload_last           ), //i
    .s_axis_s2mm_cmd_tvalid     (s2mmCmdSplit_io_outCmd_0_valid         ), //i
    .s_axis_s2mm_cmd_tready     (dma_0_s_axis_s2mm_cmd_tready           ), //o
    .s_axis_s2mm_cmd_tdata      (s2mmCmdSplit_io_outCmd_0_payload[71:0] ), //i
    .s_axis_mm2s_cmd_tvalid     (mm2sCmdSplit_io_outCmd_0_valid         ), //i
    .s_axis_mm2s_cmd_tready     (dma_0_s_axis_mm2s_cmd_tready           ), //o
    .s_axis_mm2s_cmd_tdata      (mm2sCmdSplit_io_outCmd_0_payload[71:0] ), //i
    .m_axi_s2mm_awvalid         (dma_0_m_axi_s2mm_awvalid               ), //o
    .m_axi_s2mm_awready         (m_axi_0_awready                        ), //i
    .m_axi_s2mm_awaddr          (dma_0_m_axi_s2mm_awaddr[31:0]          ), //o
    .m_axi_s2mm_awid            (dma_0_m_axi_s2mm_awid[3:0]             ), //o
    .m_axi_s2mm_awlen           (dma_0_m_axi_s2mm_awlen[7:0]            ), //o
    .m_axi_s2mm_awsize          (dma_0_m_axi_s2mm_awsize[2:0]           ), //o
    .m_axi_s2mm_awburst         (dma_0_m_axi_s2mm_awburst[1:0]          ), //o
    .m_axi_s2mm_awcache         (dma_0_m_axi_s2mm_awcache[3:0]          ), //o
    .m_axi_s2mm_awuser          (dma_0_m_axi_s2mm_awuser[3:0]           ), //o
    .m_axi_s2mm_awprot          (dma_0_m_axi_s2mm_awprot[2:0]           ), //o
    .m_axi_s2mm_wvalid          (dma_0_m_axi_s2mm_wvalid                ), //o
    .m_axi_s2mm_wready          (m_axi_0_wready                         ), //i
    .m_axi_s2mm_wdata           (dma_0_m_axi_s2mm_wdata[127:0]          ), //o
    .m_axi_s2mm_wstrb           (dma_0_m_axi_s2mm_wstrb[15:0]           ), //o
    .m_axi_s2mm_wlast           (dma_0_m_axi_s2mm_wlast                 ), //o
    .m_axi_s2mm_bvalid          (m_axi_0_bvalid                         ), //i
    .m_axi_s2mm_bready          (dma_0_m_axi_s2mm_bready                ), //o
    .m_axi_s2mm_bresp           (m_axi_0_bresp[1:0]                     ), //i
    .m_axi_mm2s_arvalid         (dma_0_m_axi_mm2s_arvalid               ), //o
    .m_axi_mm2s_arready         (m_axi_0_arready                        ), //i
    .m_axi_mm2s_araddr          (dma_0_m_axi_mm2s_araddr[31:0]          ), //o
    .m_axi_mm2s_arid            (dma_0_m_axi_mm2s_arid[3:0]             ), //o
    .m_axi_mm2s_arlen           (dma_0_m_axi_mm2s_arlen[7:0]            ), //o
    .m_axi_mm2s_arsize          (dma_0_m_axi_mm2s_arsize[2:0]           ), //o
    .m_axi_mm2s_arburst         (dma_0_m_axi_mm2s_arburst[1:0]          ), //o
    .m_axi_mm2s_arcache         (dma_0_m_axi_mm2s_arcache[3:0]          ), //o
    .m_axi_mm2s_aruser          (dma_0_m_axi_mm2s_aruser[3:0]           ), //o
    .m_axi_mm2s_arprot          (dma_0_m_axi_mm2s_arprot[2:0]           ), //o
    .m_axi_mm2s_rvalid          (m_axi_0_rvalid                         ), //i
    .m_axi_mm2s_rready          (dma_0_m_axi_mm2s_rready                ), //o
    .m_axi_mm2s_rdata           (m_axi_0_rdata[127:0]                   ), //i
    .m_axi_mm2s_rresp           (m_axi_0_rresp[1:0]                     ), //i
    .m_axi_mm2s_rlast           (m_axi_0_rlast                          ), //i
    .m_axis_s2mm_sts_tvalid     (dma_0_m_axis_s2mm_sts_tvalid           ), //o
    .m_axis_s2mm_sts_tready     (1'b1                                   ), //i
    .m_axis_s2mm_sts_tdata      (dma_0_m_axis_s2mm_sts_tdata[7:0]       ), //o
    .m_axis_s2mm_sts_tkeep      (dma_0_m_axis_s2mm_sts_tkeep            ), //o
    .m_axis_s2mm_sts_tlast      (dma_0_m_axis_s2mm_sts_tlast            ), //o
    .m_axis_mm2s_sts_tvalid     (dma_0_m_axis_mm2s_sts_tvalid           ), //o
    .m_axis_mm2s_sts_tready     (1'b1                                   ), //i
    .m_axis_mm2s_sts_tdata      (dma_0_m_axis_mm2s_sts_tdata[7:0]       ), //o
    .m_axis_mm2s_sts_tkeep      (dma_0_m_axis_mm2s_sts_tkeep            ), //o
    .m_axis_mm2s_sts_tlast      (dma_0_m_axis_mm2s_sts_tlast            ), //o
    .m_axis_mm2s_tvalid         (dma_0_m_axis_mm2s_tvalid               ), //o
    .m_axis_mm2s_tready         (inBuf_0_io_push_ready                  ), //i
    .m_axis_mm2s_tdata          (dma_0_m_axis_mm2s_tdata[127:0]         ), //o
    .m_axis_mm2s_tkeep          (dma_0_m_axis_mm2s_tkeep[15:0]          ), //o
    .m_axis_mm2s_tlast          (dma_0_m_axis_mm2s_tlast                ), //o
    .m_axi_mm2s_aclk            (clk_0_clk                              ), //i
    .m_axi_mm2s_aresetn         (aresetn                                ), //i
    .m_axis_mm2s_cmdsts_aclk    (clk_0_clk                              ), //i
    .m_axis_mm2s_cmdsts_aresetn (aresetn                                ), //i
    .m_axi_s2mm_aclk            (clk_0_clk                              ), //i
    .m_axi_s2mm_aresetn         (aresetn                                ), //i
    .m_axis_s2mm_cmdsts_awclk   (clk_0_clk                              ), //i
    .m_axis_s2mm_cmdsts_aresetn (aresetn                                ), //i
    .mm2s_err                   (dma_0_mm2s_err                         ), //o
    .s2mm_err                   (dma_0_s2mm_err                         )  //o
  );
  AxiDatamover128 dma_1 (
    .s_axis_s2mm_tvalid         (outBuf_1_io_pop_valid                  ), //i
    .s_axis_s2mm_tready         (dma_1_s_axis_s2mm_tready               ), //o
    .s_axis_s2mm_tdata          (outBuf_1_io_pop_payload_fragment[127:0]), //i
    .s_axis_s2mm_tkeep          (16'hffff                               ), //i
    .s_axis_s2mm_tlast          (outBuf_1_io_pop_payload_last           ), //i
    .s_axis_s2mm_cmd_tvalid     (s2mmCmdSplit_io_outCmd_1_valid         ), //i
    .s_axis_s2mm_cmd_tready     (dma_1_s_axis_s2mm_cmd_tready           ), //o
    .s_axis_s2mm_cmd_tdata      (s2mmCmdSplit_io_outCmd_1_payload[71:0] ), //i
    .s_axis_mm2s_cmd_tvalid     (mm2sCmdSplit_io_outCmd_1_valid         ), //i
    .s_axis_mm2s_cmd_tready     (dma_1_s_axis_mm2s_cmd_tready           ), //o
    .s_axis_mm2s_cmd_tdata      (mm2sCmdSplit_io_outCmd_1_payload[71:0] ), //i
    .m_axi_s2mm_awvalid         (dma_1_m_axi_s2mm_awvalid               ), //o
    .m_axi_s2mm_awready         (m_axi_1_awready                        ), //i
    .m_axi_s2mm_awaddr          (dma_1_m_axi_s2mm_awaddr[31:0]          ), //o
    .m_axi_s2mm_awid            (dma_1_m_axi_s2mm_awid[3:0]             ), //o
    .m_axi_s2mm_awlen           (dma_1_m_axi_s2mm_awlen[7:0]            ), //o
    .m_axi_s2mm_awsize          (dma_1_m_axi_s2mm_awsize[2:0]           ), //o
    .m_axi_s2mm_awburst         (dma_1_m_axi_s2mm_awburst[1:0]          ), //o
    .m_axi_s2mm_awcache         (dma_1_m_axi_s2mm_awcache[3:0]          ), //o
    .m_axi_s2mm_awuser          (dma_1_m_axi_s2mm_awuser[3:0]           ), //o
    .m_axi_s2mm_awprot          (dma_1_m_axi_s2mm_awprot[2:0]           ), //o
    .m_axi_s2mm_wvalid          (dma_1_m_axi_s2mm_wvalid                ), //o
    .m_axi_s2mm_wready          (m_axi_1_wready                         ), //i
    .m_axi_s2mm_wdata           (dma_1_m_axi_s2mm_wdata[127:0]          ), //o
    .m_axi_s2mm_wstrb           (dma_1_m_axi_s2mm_wstrb[15:0]           ), //o
    .m_axi_s2mm_wlast           (dma_1_m_axi_s2mm_wlast                 ), //o
    .m_axi_s2mm_bvalid          (m_axi_1_bvalid                         ), //i
    .m_axi_s2mm_bready          (dma_1_m_axi_s2mm_bready                ), //o
    .m_axi_s2mm_bresp           (m_axi_1_bresp[1:0]                     ), //i
    .m_axi_mm2s_arvalid         (dma_1_m_axi_mm2s_arvalid               ), //o
    .m_axi_mm2s_arready         (m_axi_1_arready                        ), //i
    .m_axi_mm2s_araddr          (dma_1_m_axi_mm2s_araddr[31:0]          ), //o
    .m_axi_mm2s_arid            (dma_1_m_axi_mm2s_arid[3:0]             ), //o
    .m_axi_mm2s_arlen           (dma_1_m_axi_mm2s_arlen[7:0]            ), //o
    .m_axi_mm2s_arsize          (dma_1_m_axi_mm2s_arsize[2:0]           ), //o
    .m_axi_mm2s_arburst         (dma_1_m_axi_mm2s_arburst[1:0]          ), //o
    .m_axi_mm2s_arcache         (dma_1_m_axi_mm2s_arcache[3:0]          ), //o
    .m_axi_mm2s_aruser          (dma_1_m_axi_mm2s_aruser[3:0]           ), //o
    .m_axi_mm2s_arprot          (dma_1_m_axi_mm2s_arprot[2:0]           ), //o
    .m_axi_mm2s_rvalid          (m_axi_1_rvalid                         ), //i
    .m_axi_mm2s_rready          (dma_1_m_axi_mm2s_rready                ), //o
    .m_axi_mm2s_rdata           (m_axi_1_rdata[127:0]                   ), //i
    .m_axi_mm2s_rresp           (m_axi_1_rresp[1:0]                     ), //i
    .m_axi_mm2s_rlast           (m_axi_1_rlast                          ), //i
    .m_axis_s2mm_sts_tvalid     (dma_1_m_axis_s2mm_sts_tvalid           ), //o
    .m_axis_s2mm_sts_tready     (1'b1                                   ), //i
    .m_axis_s2mm_sts_tdata      (dma_1_m_axis_s2mm_sts_tdata[7:0]       ), //o
    .m_axis_s2mm_sts_tkeep      (dma_1_m_axis_s2mm_sts_tkeep            ), //o
    .m_axis_s2mm_sts_tlast      (dma_1_m_axis_s2mm_sts_tlast            ), //o
    .m_axis_mm2s_sts_tvalid     (dma_1_m_axis_mm2s_sts_tvalid           ), //o
    .m_axis_mm2s_sts_tready     (1'b1                                   ), //i
    .m_axis_mm2s_sts_tdata      (dma_1_m_axis_mm2s_sts_tdata[7:0]       ), //o
    .m_axis_mm2s_sts_tkeep      (dma_1_m_axis_mm2s_sts_tkeep            ), //o
    .m_axis_mm2s_sts_tlast      (dma_1_m_axis_mm2s_sts_tlast            ), //o
    .m_axis_mm2s_tvalid         (dma_1_m_axis_mm2s_tvalid               ), //o
    .m_axis_mm2s_tready         (inBuf_1_io_push_ready                  ), //i
    .m_axis_mm2s_tdata          (dma_1_m_axis_mm2s_tdata[127:0]         ), //o
    .m_axis_mm2s_tkeep          (dma_1_m_axis_mm2s_tkeep[15:0]          ), //o
    .m_axis_mm2s_tlast          (dma_1_m_axis_mm2s_tlast                ), //o
    .m_axi_mm2s_aclk            (clk_0_clk                              ), //i
    .m_axi_mm2s_aresetn         (aresetn                                ), //i
    .m_axis_mm2s_cmdsts_aclk    (clk_0_clk                              ), //i
    .m_axis_mm2s_cmdsts_aresetn (aresetn                                ), //i
    .m_axi_s2mm_aclk            (clk_0_clk                              ), //i
    .m_axi_s2mm_aresetn         (aresetn                                ), //i
    .m_axis_s2mm_cmdsts_awclk   (clk_0_clk                              ), //i
    .m_axis_s2mm_cmdsts_aresetn (aresetn                                ), //i
    .mm2s_err                   (dma_1_mm2s_err                         ), //o
    .s2mm_err                   (dma_1_s2mm_err                         )  //o
  );
  AxiDatamover128 dma_2 (
    .s_axis_s2mm_tvalid         (outBuf_2_io_pop_valid                  ), //i
    .s_axis_s2mm_tready         (dma_2_s_axis_s2mm_tready               ), //o
    .s_axis_s2mm_tdata          (outBuf_2_io_pop_payload_fragment[127:0]), //i
    .s_axis_s2mm_tkeep          (16'hffff                               ), //i
    .s_axis_s2mm_tlast          (outBuf_2_io_pop_payload_last           ), //i
    .s_axis_s2mm_cmd_tvalid     (s2mmCmdSplit_io_outCmd_2_valid         ), //i
    .s_axis_s2mm_cmd_tready     (dma_2_s_axis_s2mm_cmd_tready           ), //o
    .s_axis_s2mm_cmd_tdata      (s2mmCmdSplit_io_outCmd_2_payload[71:0] ), //i
    .s_axis_mm2s_cmd_tvalid     (mm2sCmdSplit_io_outCmd_2_valid         ), //i
    .s_axis_mm2s_cmd_tready     (dma_2_s_axis_mm2s_cmd_tready           ), //o
    .s_axis_mm2s_cmd_tdata      (mm2sCmdSplit_io_outCmd_2_payload[71:0] ), //i
    .m_axi_s2mm_awvalid         (dma_2_m_axi_s2mm_awvalid               ), //o
    .m_axi_s2mm_awready         (m_axi_2_awready                        ), //i
    .m_axi_s2mm_awaddr          (dma_2_m_axi_s2mm_awaddr[31:0]          ), //o
    .m_axi_s2mm_awid            (dma_2_m_axi_s2mm_awid[3:0]             ), //o
    .m_axi_s2mm_awlen           (dma_2_m_axi_s2mm_awlen[7:0]            ), //o
    .m_axi_s2mm_awsize          (dma_2_m_axi_s2mm_awsize[2:0]           ), //o
    .m_axi_s2mm_awburst         (dma_2_m_axi_s2mm_awburst[1:0]          ), //o
    .m_axi_s2mm_awcache         (dma_2_m_axi_s2mm_awcache[3:0]          ), //o
    .m_axi_s2mm_awuser          (dma_2_m_axi_s2mm_awuser[3:0]           ), //o
    .m_axi_s2mm_awprot          (dma_2_m_axi_s2mm_awprot[2:0]           ), //o
    .m_axi_s2mm_wvalid          (dma_2_m_axi_s2mm_wvalid                ), //o
    .m_axi_s2mm_wready          (m_axi_2_wready                         ), //i
    .m_axi_s2mm_wdata           (dma_2_m_axi_s2mm_wdata[127:0]          ), //o
    .m_axi_s2mm_wstrb           (dma_2_m_axi_s2mm_wstrb[15:0]           ), //o
    .m_axi_s2mm_wlast           (dma_2_m_axi_s2mm_wlast                 ), //o
    .m_axi_s2mm_bvalid          (m_axi_2_bvalid                         ), //i
    .m_axi_s2mm_bready          (dma_2_m_axi_s2mm_bready                ), //o
    .m_axi_s2mm_bresp           (m_axi_2_bresp[1:0]                     ), //i
    .m_axi_mm2s_arvalid         (dma_2_m_axi_mm2s_arvalid               ), //o
    .m_axi_mm2s_arready         (m_axi_2_arready                        ), //i
    .m_axi_mm2s_araddr          (dma_2_m_axi_mm2s_araddr[31:0]          ), //o
    .m_axi_mm2s_arid            (dma_2_m_axi_mm2s_arid[3:0]             ), //o
    .m_axi_mm2s_arlen           (dma_2_m_axi_mm2s_arlen[7:0]            ), //o
    .m_axi_mm2s_arsize          (dma_2_m_axi_mm2s_arsize[2:0]           ), //o
    .m_axi_mm2s_arburst         (dma_2_m_axi_mm2s_arburst[1:0]          ), //o
    .m_axi_mm2s_arcache         (dma_2_m_axi_mm2s_arcache[3:0]          ), //o
    .m_axi_mm2s_aruser          (dma_2_m_axi_mm2s_aruser[3:0]           ), //o
    .m_axi_mm2s_arprot          (dma_2_m_axi_mm2s_arprot[2:0]           ), //o
    .m_axi_mm2s_rvalid          (m_axi_2_rvalid                         ), //i
    .m_axi_mm2s_rready          (dma_2_m_axi_mm2s_rready                ), //o
    .m_axi_mm2s_rdata           (m_axi_2_rdata[127:0]                   ), //i
    .m_axi_mm2s_rresp           (m_axi_2_rresp[1:0]                     ), //i
    .m_axi_mm2s_rlast           (m_axi_2_rlast                          ), //i
    .m_axis_s2mm_sts_tvalid     (dma_2_m_axis_s2mm_sts_tvalid           ), //o
    .m_axis_s2mm_sts_tready     (1'b1                                   ), //i
    .m_axis_s2mm_sts_tdata      (dma_2_m_axis_s2mm_sts_tdata[7:0]       ), //o
    .m_axis_s2mm_sts_tkeep      (dma_2_m_axis_s2mm_sts_tkeep            ), //o
    .m_axis_s2mm_sts_tlast      (dma_2_m_axis_s2mm_sts_tlast            ), //o
    .m_axis_mm2s_sts_tvalid     (dma_2_m_axis_mm2s_sts_tvalid           ), //o
    .m_axis_mm2s_sts_tready     (1'b1                                   ), //i
    .m_axis_mm2s_sts_tdata      (dma_2_m_axis_mm2s_sts_tdata[7:0]       ), //o
    .m_axis_mm2s_sts_tkeep      (dma_2_m_axis_mm2s_sts_tkeep            ), //o
    .m_axis_mm2s_sts_tlast      (dma_2_m_axis_mm2s_sts_tlast            ), //o
    .m_axis_mm2s_tvalid         (dma_2_m_axis_mm2s_tvalid               ), //o
    .m_axis_mm2s_tready         (inBuf_2_io_push_ready                  ), //i
    .m_axis_mm2s_tdata          (dma_2_m_axis_mm2s_tdata[127:0]         ), //o
    .m_axis_mm2s_tkeep          (dma_2_m_axis_mm2s_tkeep[15:0]          ), //o
    .m_axis_mm2s_tlast          (dma_2_m_axis_mm2s_tlast                ), //o
    .m_axi_mm2s_aclk            (clk_0_clk                              ), //i
    .m_axi_mm2s_aresetn         (aresetn                                ), //i
    .m_axis_mm2s_cmdsts_aclk    (clk_0_clk                              ), //i
    .m_axis_mm2s_cmdsts_aresetn (aresetn                                ), //i
    .m_axi_s2mm_aclk            (clk_0_clk                              ), //i
    .m_axi_s2mm_aresetn         (aresetn                                ), //i
    .m_axis_s2mm_cmdsts_awclk   (clk_0_clk                              ), //i
    .m_axis_s2mm_cmdsts_aresetn (aresetn                                ), //i
    .mm2s_err                   (dma_2_mm2s_err                         ), //o
    .s2mm_err                   (dma_2_s2mm_err                         )  //o
  );
  AxiDatamover128 dma_3 (
    .s_axis_s2mm_tvalid         (outBuf_3_io_pop_valid                  ), //i
    .s_axis_s2mm_tready         (dma_3_s_axis_s2mm_tready               ), //o
    .s_axis_s2mm_tdata          (outBuf_3_io_pop_payload_fragment[127:0]), //i
    .s_axis_s2mm_tkeep          (16'hffff                               ), //i
    .s_axis_s2mm_tlast          (outBuf_3_io_pop_payload_last           ), //i
    .s_axis_s2mm_cmd_tvalid     (s2mmCmdSplit_io_outCmd_3_valid         ), //i
    .s_axis_s2mm_cmd_tready     (dma_3_s_axis_s2mm_cmd_tready           ), //o
    .s_axis_s2mm_cmd_tdata      (s2mmCmdSplit_io_outCmd_3_payload[71:0] ), //i
    .s_axis_mm2s_cmd_tvalid     (mm2sCmdSplit_io_outCmd_3_valid         ), //i
    .s_axis_mm2s_cmd_tready     (dma_3_s_axis_mm2s_cmd_tready           ), //o
    .s_axis_mm2s_cmd_tdata      (mm2sCmdSplit_io_outCmd_3_payload[71:0] ), //i
    .m_axi_s2mm_awvalid         (dma_3_m_axi_s2mm_awvalid               ), //o
    .m_axi_s2mm_awready         (m_axi_3_awready                        ), //i
    .m_axi_s2mm_awaddr          (dma_3_m_axi_s2mm_awaddr[31:0]          ), //o
    .m_axi_s2mm_awid            (dma_3_m_axi_s2mm_awid[3:0]             ), //o
    .m_axi_s2mm_awlen           (dma_3_m_axi_s2mm_awlen[7:0]            ), //o
    .m_axi_s2mm_awsize          (dma_3_m_axi_s2mm_awsize[2:0]           ), //o
    .m_axi_s2mm_awburst         (dma_3_m_axi_s2mm_awburst[1:0]          ), //o
    .m_axi_s2mm_awcache         (dma_3_m_axi_s2mm_awcache[3:0]          ), //o
    .m_axi_s2mm_awuser          (dma_3_m_axi_s2mm_awuser[3:0]           ), //o
    .m_axi_s2mm_awprot          (dma_3_m_axi_s2mm_awprot[2:0]           ), //o
    .m_axi_s2mm_wvalid          (dma_3_m_axi_s2mm_wvalid                ), //o
    .m_axi_s2mm_wready          (m_axi_3_wready                         ), //i
    .m_axi_s2mm_wdata           (dma_3_m_axi_s2mm_wdata[127:0]          ), //o
    .m_axi_s2mm_wstrb           (dma_3_m_axi_s2mm_wstrb[15:0]           ), //o
    .m_axi_s2mm_wlast           (dma_3_m_axi_s2mm_wlast                 ), //o
    .m_axi_s2mm_bvalid          (m_axi_3_bvalid                         ), //i
    .m_axi_s2mm_bready          (dma_3_m_axi_s2mm_bready                ), //o
    .m_axi_s2mm_bresp           (m_axi_3_bresp[1:0]                     ), //i
    .m_axi_mm2s_arvalid         (dma_3_m_axi_mm2s_arvalid               ), //o
    .m_axi_mm2s_arready         (m_axi_3_arready                        ), //i
    .m_axi_mm2s_araddr          (dma_3_m_axi_mm2s_araddr[31:0]          ), //o
    .m_axi_mm2s_arid            (dma_3_m_axi_mm2s_arid[3:0]             ), //o
    .m_axi_mm2s_arlen           (dma_3_m_axi_mm2s_arlen[7:0]            ), //o
    .m_axi_mm2s_arsize          (dma_3_m_axi_mm2s_arsize[2:0]           ), //o
    .m_axi_mm2s_arburst         (dma_3_m_axi_mm2s_arburst[1:0]          ), //o
    .m_axi_mm2s_arcache         (dma_3_m_axi_mm2s_arcache[3:0]          ), //o
    .m_axi_mm2s_aruser          (dma_3_m_axi_mm2s_aruser[3:0]           ), //o
    .m_axi_mm2s_arprot          (dma_3_m_axi_mm2s_arprot[2:0]           ), //o
    .m_axi_mm2s_rvalid          (m_axi_3_rvalid                         ), //i
    .m_axi_mm2s_rready          (dma_3_m_axi_mm2s_rready                ), //o
    .m_axi_mm2s_rdata           (m_axi_3_rdata[127:0]                   ), //i
    .m_axi_mm2s_rresp           (m_axi_3_rresp[1:0]                     ), //i
    .m_axi_mm2s_rlast           (m_axi_3_rlast                          ), //i
    .m_axis_s2mm_sts_tvalid     (dma_3_m_axis_s2mm_sts_tvalid           ), //o
    .m_axis_s2mm_sts_tready     (1'b1                                   ), //i
    .m_axis_s2mm_sts_tdata      (dma_3_m_axis_s2mm_sts_tdata[7:0]       ), //o
    .m_axis_s2mm_sts_tkeep      (dma_3_m_axis_s2mm_sts_tkeep            ), //o
    .m_axis_s2mm_sts_tlast      (dma_3_m_axis_s2mm_sts_tlast            ), //o
    .m_axis_mm2s_sts_tvalid     (dma_3_m_axis_mm2s_sts_tvalid           ), //o
    .m_axis_mm2s_sts_tready     (1'b1                                   ), //i
    .m_axis_mm2s_sts_tdata      (dma_3_m_axis_mm2s_sts_tdata[7:0]       ), //o
    .m_axis_mm2s_sts_tkeep      (dma_3_m_axis_mm2s_sts_tkeep            ), //o
    .m_axis_mm2s_sts_tlast      (dma_3_m_axis_mm2s_sts_tlast            ), //o
    .m_axis_mm2s_tvalid         (dma_3_m_axis_mm2s_tvalid               ), //o
    .m_axis_mm2s_tready         (inBuf_3_io_push_ready                  ), //i
    .m_axis_mm2s_tdata          (dma_3_m_axis_mm2s_tdata[127:0]         ), //o
    .m_axis_mm2s_tkeep          (dma_3_m_axis_mm2s_tkeep[15:0]          ), //o
    .m_axis_mm2s_tlast          (dma_3_m_axis_mm2s_tlast                ), //o
    .m_axi_mm2s_aclk            (clk_0_clk                              ), //i
    .m_axi_mm2s_aresetn         (aresetn                                ), //i
    .m_axis_mm2s_cmdsts_aclk    (clk_0_clk                              ), //i
    .m_axis_mm2s_cmdsts_aresetn (aresetn                                ), //i
    .m_axi_s2mm_aclk            (clk_0_clk                              ), //i
    .m_axi_s2mm_aresetn         (aresetn                                ), //i
    .m_axis_s2mm_cmdsts_awclk   (clk_0_clk                              ), //i
    .m_axis_s2mm_cmdsts_aresetn (aresetn                                ), //i
    .mm2s_err                   (dma_3_mm2s_err                         ), //o
    .s2mm_err                   (dma_3_s2mm_err                         )  //o
  );
  SplitAxiDatamoverCmd mm2sCmdSplit (
    .io_inCmd_valid      (mm2sCmd_tvalid                        ), //i
    .io_inCmd_ready      (mm2sCmdSplit_io_inCmd_ready           ), //o
    .io_inCmd_payload    (mm2sCmd_tdata[71:0]                   ), //i
    .io_outCmd_0_valid   (mm2sCmdSplit_io_outCmd_0_valid        ), //o
    .io_outCmd_0_ready   (dma_0_s_axis_mm2s_cmd_tready          ), //i
    .io_outCmd_0_payload (mm2sCmdSplit_io_outCmd_0_payload[71:0]), //o
    .io_outCmd_1_valid   (mm2sCmdSplit_io_outCmd_1_valid        ), //o
    .io_outCmd_1_ready   (dma_1_s_axis_mm2s_cmd_tready          ), //i
    .io_outCmd_1_payload (mm2sCmdSplit_io_outCmd_1_payload[71:0]), //o
    .io_outCmd_2_valid   (mm2sCmdSplit_io_outCmd_2_valid        ), //o
    .io_outCmd_2_ready   (dma_2_s_axis_mm2s_cmd_tready          ), //i
    .io_outCmd_2_payload (mm2sCmdSplit_io_outCmd_2_payload[71:0]), //o
    .io_outCmd_3_valid   (mm2sCmdSplit_io_outCmd_3_valid        ), //o
    .io_outCmd_3_ready   (dma_3_s_axis_mm2s_cmd_tready          ), //i
    .io_outCmd_3_payload (mm2sCmdSplit_io_outCmd_3_payload[71:0]), //o
    .clk_0_clk           (clk_0_clk                             ), //i
    .clk_0_resetn        (clk_0_resetn                          )  //i
  );
  SplitAxiDatamoverCmd s2mmCmdSplit (
    .io_inCmd_valid      (s2mmCmd_tvalid                        ), //i
    .io_inCmd_ready      (s2mmCmdSplit_io_inCmd_ready           ), //o
    .io_inCmd_payload    (s2mmCmd_tdata[71:0]                   ), //i
    .io_outCmd_0_valid   (s2mmCmdSplit_io_outCmd_0_valid        ), //o
    .io_outCmd_0_ready   (dma_0_s_axis_s2mm_cmd_tready          ), //i
    .io_outCmd_0_payload (s2mmCmdSplit_io_outCmd_0_payload[71:0]), //o
    .io_outCmd_1_valid   (s2mmCmdSplit_io_outCmd_1_valid        ), //o
    .io_outCmd_1_ready   (dma_1_s_axis_s2mm_cmd_tready          ), //i
    .io_outCmd_1_payload (s2mmCmdSplit_io_outCmd_1_payload[71:0]), //o
    .io_outCmd_2_valid   (s2mmCmdSplit_io_outCmd_2_valid        ), //o
    .io_outCmd_2_ready   (dma_2_s_axis_s2mm_cmd_tready          ), //i
    .io_outCmd_2_payload (s2mmCmdSplit_io_outCmd_2_payload[71:0]), //o
    .io_outCmd_3_valid   (s2mmCmdSplit_io_outCmd_3_valid        ), //o
    .io_outCmd_3_ready   (dma_3_s_axis_s2mm_cmd_tready          ), //i
    .io_outCmd_3_payload (s2mmCmdSplit_io_outCmd_3_payload[71:0]), //o
    .clk_0_clk           (clk_0_clk                             ), //i
    .clk_0_resetn        (clk_0_resetn                          )  //i
  );
  StreamFifo_48 inBuf_0 (
    .io_push_valid   (dma_0_m_axis_mm2s_tvalid      ), //i
    .io_push_ready   (inBuf_0_io_push_ready         ), //o
    .io_push_payload (dma_0_m_axis_mm2s_tdata[127:0]), //i
    .io_pop_valid    (inBuf_0_io_pop_valid          ), //o
    .io_pop_ready    (joinEvent_fire                ), //i
    .io_pop_payload  (inBuf_0_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (inBuf_0_io_occupancy[9:0]     ), //o
    .io_availability (inBuf_0_io_availability[9:0]  ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_48 inBuf_1 (
    .io_push_valid   (dma_1_m_axis_mm2s_tvalid      ), //i
    .io_push_ready   (inBuf_1_io_push_ready         ), //o
    .io_push_payload (dma_1_m_axis_mm2s_tdata[127:0]), //i
    .io_pop_valid    (inBuf_1_io_pop_valid          ), //o
    .io_pop_ready    (joinEvent_fire                ), //i
    .io_pop_payload  (inBuf_1_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (inBuf_1_io_occupancy[9:0]     ), //o
    .io_availability (inBuf_1_io_availability[9:0]  ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_48 inBuf_2 (
    .io_push_valid   (dma_2_m_axis_mm2s_tvalid      ), //i
    .io_push_ready   (inBuf_2_io_push_ready         ), //o
    .io_push_payload (dma_2_m_axis_mm2s_tdata[127:0]), //i
    .io_pop_valid    (inBuf_2_io_pop_valid          ), //o
    .io_pop_ready    (joinEvent_fire                ), //i
    .io_pop_payload  (inBuf_2_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (inBuf_2_io_occupancy[9:0]     ), //o
    .io_availability (inBuf_2_io_availability[9:0]  ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_48 inBuf_3 (
    .io_push_valid   (dma_3_m_axis_mm2s_tvalid      ), //i
    .io_push_ready   (inBuf_3_io_push_ready         ), //o
    .io_push_payload (dma_3_m_axis_mm2s_tdata[127:0]), //i
    .io_pop_valid    (inBuf_3_io_pop_valid          ), //o
    .io_pop_ready    (joinEvent_fire                ), //i
    .io_pop_payload  (inBuf_3_io_pop_payload[127:0] ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (inBuf_3_io_occupancy[9:0]     ), //o
    .io_availability (inBuf_3_io_availability[9:0]  ), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_52 inLastBuf (
    .io_push_valid   (dmaHp_inBuf_0_io_push_fire    ), //i
    .io_push_ready   (inLastBuf_io_push_ready       ), //o
    .io_push_payload (dma_0_m_axis_mm2s_tlast       ), //i
    .io_pop_valid    (inLastBuf_io_pop_valid        ), //o
    .io_pop_ready    (dmaHp_inBuf_0_io_pop_fire     ), //i
    .io_pop_payload  (inLastBuf_io_pop_payload      ), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (inLastBuf_io_occupancy[9:0]   ), //o
    .io_availability (inLastBuf_io_availability[9:0]), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_53 outBuf_0 (
    .io_push_valid            (s2mmFork_io_outputs_0_valid            ), //i
    .io_push_ready            (outBuf_0_io_push_ready                 ), //o
    .io_push_payload_last     (s2mm_tlast                             ), //i
    .io_push_payload_fragment (s2mmPayloadSplit_0[127:0]              ), //i
    .io_pop_valid             (outBuf_0_io_pop_valid                  ), //o
    .io_pop_ready             (dma_0_s_axis_s2mm_tready               ), //i
    .io_pop_payload_last      (outBuf_0_io_pop_payload_last           ), //o
    .io_pop_payload_fragment  (outBuf_0_io_pop_payload_fragment[127:0]), //o
    .io_flush                 (1'b0                                   ), //i
    .io_occupancy             (outBuf_0_io_occupancy[9:0]             ), //o
    .io_availability          (outBuf_0_io_availability[9:0]          ), //o
    .clk_0_clk                (clk_0_clk                              ), //i
    .clk_0_resetn             (clk_0_resetn                           )  //i
  );
  StreamFifo_53 outBuf_1 (
    .io_push_valid            (s2mmFork_io_outputs_1_valid            ), //i
    .io_push_ready            (outBuf_1_io_push_ready                 ), //o
    .io_push_payload_last     (s2mm_tlast                             ), //i
    .io_push_payload_fragment (s2mmPayloadSplit_1[127:0]              ), //i
    .io_pop_valid             (outBuf_1_io_pop_valid                  ), //o
    .io_pop_ready             (dma_1_s_axis_s2mm_tready               ), //i
    .io_pop_payload_last      (outBuf_1_io_pop_payload_last           ), //o
    .io_pop_payload_fragment  (outBuf_1_io_pop_payload_fragment[127:0]), //o
    .io_flush                 (1'b0                                   ), //i
    .io_occupancy             (outBuf_1_io_occupancy[9:0]             ), //o
    .io_availability          (outBuf_1_io_availability[9:0]          ), //o
    .clk_0_clk                (clk_0_clk                              ), //i
    .clk_0_resetn             (clk_0_resetn                           )  //i
  );
  StreamFifo_53 outBuf_2 (
    .io_push_valid            (s2mmFork_io_outputs_2_valid            ), //i
    .io_push_ready            (outBuf_2_io_push_ready                 ), //o
    .io_push_payload_last     (s2mm_tlast                             ), //i
    .io_push_payload_fragment (s2mmPayloadSplit_2[127:0]              ), //i
    .io_pop_valid             (outBuf_2_io_pop_valid                  ), //o
    .io_pop_ready             (dma_2_s_axis_s2mm_tready               ), //i
    .io_pop_payload_last      (outBuf_2_io_pop_payload_last           ), //o
    .io_pop_payload_fragment  (outBuf_2_io_pop_payload_fragment[127:0]), //o
    .io_flush                 (1'b0                                   ), //i
    .io_occupancy             (outBuf_2_io_occupancy[9:0]             ), //o
    .io_availability          (outBuf_2_io_availability[9:0]          ), //o
    .clk_0_clk                (clk_0_clk                              ), //i
    .clk_0_resetn             (clk_0_resetn                           )  //i
  );
  StreamFifo_53 outBuf_3 (
    .io_push_valid            (s2mmFork_io_outputs_3_valid            ), //i
    .io_push_ready            (outBuf_3_io_push_ready                 ), //o
    .io_push_payload_last     (s2mm_tlast                             ), //i
    .io_push_payload_fragment (s2mmPayloadSplit_3[127:0]              ), //i
    .io_pop_valid             (outBuf_3_io_pop_valid                  ), //o
    .io_pop_ready             (dma_3_s_axis_s2mm_tready               ), //i
    .io_pop_payload_last      (outBuf_3_io_pop_payload_last           ), //o
    .io_pop_payload_fragment  (outBuf_3_io_pop_payload_fragment[127:0]), //o
    .io_flush                 (1'b0                                   ), //i
    .io_occupancy             (outBuf_3_io_occupancy[9:0]             ), //o
    .io_availability          (outBuf_3_io_availability[9:0]          ), //o
    .clk_0_clk                (clk_0_clk                              ), //i
    .clk_0_resetn             (clk_0_resetn                           )  //i
  );
  StreamFork_6 s2mmFork (
    .io_input_valid     (s2mm_tvalid                ), //i
    .io_input_ready     (s2mmFork_io_input_ready    ), //o
    .io_outputs_0_valid (s2mmFork_io_outputs_0_valid), //o
    .io_outputs_0_ready (outBuf_0_io_push_ready     ), //i
    .io_outputs_1_valid (s2mmFork_io_outputs_1_valid), //o
    .io_outputs_1_ready (outBuf_1_io_push_ready     ), //i
    .io_outputs_2_valid (s2mmFork_io_outputs_2_valid), //o
    .io_outputs_2_ready (outBuf_2_io_push_ready     ), //i
    .io_outputs_3_valid (s2mmFork_io_outputs_3_valid), //o
    .io_outputs_3_ready (outBuf_3_io_push_ready     )  //i
  );
  assign mm2sCmd_tready = mm2sCmdSplit_io_inCmd_ready;
  assign s2mmCmd_tready = s2mmCmdSplit_io_inCmd_ready;
  assign s2mm_tready = s2mmFork_io_input_ready;
  assign s2mmPayloadSplit_0 = s2mm_tdata[127 : 0];
  assign s2mmPayloadSplit_1 = s2mm_tdata[255 : 128];
  assign s2mmPayloadSplit_2 = s2mm_tdata[383 : 256];
  assign s2mmPayloadSplit_3 = s2mm_tdata[511 : 384];
  assign m_axi_0_arvalid = dma_0_m_axi_mm2s_arvalid;
  assign m_axi_0_araddr = dma_0_m_axi_mm2s_araddr;
  assign m_axi_0_arid = dma_0_m_axi_mm2s_arid;
  assign m_axi_0_arlen = dma_0_m_axi_mm2s_arlen;
  assign m_axi_0_arsize = dma_0_m_axi_mm2s_arsize;
  assign m_axi_0_arburst = dma_0_m_axi_mm2s_arburst;
  assign m_axi_0_arcache = dma_0_m_axi_mm2s_arcache;
  assign m_axi_0_aruser = dma_0_m_axi_mm2s_aruser;
  assign m_axi_0_arprot = dma_0_m_axi_mm2s_arprot;
  assign m_axi_0_awvalid = dma_0_m_axi_s2mm_awvalid;
  assign m_axi_0_awaddr = dma_0_m_axi_s2mm_awaddr;
  assign m_axi_0_awid = dma_0_m_axi_s2mm_awid;
  assign m_axi_0_awlen = dma_0_m_axi_s2mm_awlen;
  assign m_axi_0_awsize = dma_0_m_axi_s2mm_awsize;
  assign m_axi_0_awburst = dma_0_m_axi_s2mm_awburst;
  assign m_axi_0_awcache = dma_0_m_axi_s2mm_awcache;
  assign m_axi_0_awuser = dma_0_m_axi_s2mm_awuser;
  assign m_axi_0_awprot = dma_0_m_axi_s2mm_awprot;
  assign m_axi_0_wvalid = dma_0_m_axi_s2mm_wvalid;
  assign m_axi_0_wdata = dma_0_m_axi_s2mm_wdata;
  assign m_axi_0_wstrb = dma_0_m_axi_s2mm_wstrb;
  assign m_axi_0_wlast = dma_0_m_axi_s2mm_wlast;
  assign m_axi_0_rready = dma_0_m_axi_mm2s_rready;
  assign m_axi_0_bready = dma_0_m_axi_s2mm_bready;
  assign m_axi_1_arvalid = dma_1_m_axi_mm2s_arvalid;
  assign m_axi_1_araddr = dma_1_m_axi_mm2s_araddr;
  assign m_axi_1_arid = dma_1_m_axi_mm2s_arid;
  assign m_axi_1_arlen = dma_1_m_axi_mm2s_arlen;
  assign m_axi_1_arsize = dma_1_m_axi_mm2s_arsize;
  assign m_axi_1_arburst = dma_1_m_axi_mm2s_arburst;
  assign m_axi_1_arcache = dma_1_m_axi_mm2s_arcache;
  assign m_axi_1_aruser = dma_1_m_axi_mm2s_aruser;
  assign m_axi_1_arprot = dma_1_m_axi_mm2s_arprot;
  assign m_axi_1_awvalid = dma_1_m_axi_s2mm_awvalid;
  assign m_axi_1_awaddr = dma_1_m_axi_s2mm_awaddr;
  assign m_axi_1_awid = dma_1_m_axi_s2mm_awid;
  assign m_axi_1_awlen = dma_1_m_axi_s2mm_awlen;
  assign m_axi_1_awsize = dma_1_m_axi_s2mm_awsize;
  assign m_axi_1_awburst = dma_1_m_axi_s2mm_awburst;
  assign m_axi_1_awcache = dma_1_m_axi_s2mm_awcache;
  assign m_axi_1_awuser = dma_1_m_axi_s2mm_awuser;
  assign m_axi_1_awprot = dma_1_m_axi_s2mm_awprot;
  assign m_axi_1_wvalid = dma_1_m_axi_s2mm_wvalid;
  assign m_axi_1_wdata = dma_1_m_axi_s2mm_wdata;
  assign m_axi_1_wstrb = dma_1_m_axi_s2mm_wstrb;
  assign m_axi_1_wlast = dma_1_m_axi_s2mm_wlast;
  assign m_axi_1_rready = dma_1_m_axi_mm2s_rready;
  assign m_axi_1_bready = dma_1_m_axi_s2mm_bready;
  assign m_axi_2_arvalid = dma_2_m_axi_mm2s_arvalid;
  assign m_axi_2_araddr = dma_2_m_axi_mm2s_araddr;
  assign m_axi_2_arid = dma_2_m_axi_mm2s_arid;
  assign m_axi_2_arlen = dma_2_m_axi_mm2s_arlen;
  assign m_axi_2_arsize = dma_2_m_axi_mm2s_arsize;
  assign m_axi_2_arburst = dma_2_m_axi_mm2s_arburst;
  assign m_axi_2_arcache = dma_2_m_axi_mm2s_arcache;
  assign m_axi_2_aruser = dma_2_m_axi_mm2s_aruser;
  assign m_axi_2_arprot = dma_2_m_axi_mm2s_arprot;
  assign m_axi_2_awvalid = dma_2_m_axi_s2mm_awvalid;
  assign m_axi_2_awaddr = dma_2_m_axi_s2mm_awaddr;
  assign m_axi_2_awid = dma_2_m_axi_s2mm_awid;
  assign m_axi_2_awlen = dma_2_m_axi_s2mm_awlen;
  assign m_axi_2_awsize = dma_2_m_axi_s2mm_awsize;
  assign m_axi_2_awburst = dma_2_m_axi_s2mm_awburst;
  assign m_axi_2_awcache = dma_2_m_axi_s2mm_awcache;
  assign m_axi_2_awuser = dma_2_m_axi_s2mm_awuser;
  assign m_axi_2_awprot = dma_2_m_axi_s2mm_awprot;
  assign m_axi_2_wvalid = dma_2_m_axi_s2mm_wvalid;
  assign m_axi_2_wdata = dma_2_m_axi_s2mm_wdata;
  assign m_axi_2_wstrb = dma_2_m_axi_s2mm_wstrb;
  assign m_axi_2_wlast = dma_2_m_axi_s2mm_wlast;
  assign m_axi_2_rready = dma_2_m_axi_mm2s_rready;
  assign m_axi_2_bready = dma_2_m_axi_s2mm_bready;
  assign m_axi_3_arvalid = dma_3_m_axi_mm2s_arvalid;
  assign m_axi_3_araddr = dma_3_m_axi_mm2s_araddr;
  assign m_axi_3_arid = dma_3_m_axi_mm2s_arid;
  assign m_axi_3_arlen = dma_3_m_axi_mm2s_arlen;
  assign m_axi_3_arsize = dma_3_m_axi_mm2s_arsize;
  assign m_axi_3_arburst = dma_3_m_axi_mm2s_arburst;
  assign m_axi_3_arcache = dma_3_m_axi_mm2s_arcache;
  assign m_axi_3_aruser = dma_3_m_axi_mm2s_aruser;
  assign m_axi_3_arprot = dma_3_m_axi_mm2s_arprot;
  assign m_axi_3_awvalid = dma_3_m_axi_s2mm_awvalid;
  assign m_axi_3_awaddr = dma_3_m_axi_s2mm_awaddr;
  assign m_axi_3_awid = dma_3_m_axi_s2mm_awid;
  assign m_axi_3_awlen = dma_3_m_axi_s2mm_awlen;
  assign m_axi_3_awsize = dma_3_m_axi_s2mm_awsize;
  assign m_axi_3_awburst = dma_3_m_axi_s2mm_awburst;
  assign m_axi_3_awcache = dma_3_m_axi_s2mm_awcache;
  assign m_axi_3_awuser = dma_3_m_axi_s2mm_awuser;
  assign m_axi_3_awprot = dma_3_m_axi_s2mm_awprot;
  assign m_axi_3_wvalid = dma_3_m_axi_s2mm_wvalid;
  assign m_axi_3_wdata = dma_3_m_axi_s2mm_wdata;
  assign m_axi_3_wstrb = dma_3_m_axi_s2mm_wstrb;
  assign m_axi_3_wlast = dma_3_m_axi_s2mm_wlast;
  assign m_axi_3_rready = dma_3_m_axi_mm2s_rready;
  assign m_axi_3_bready = dma_3_m_axi_s2mm_bready;
  assign dmaHp_inBuf_0_io_push_fire = (dma_0_m_axis_mm2s_tvalid && inBuf_0_io_push_ready);
  assign dmaHp_inBuf_0_io_pop_fire = (inBuf_0_io_pop_valid && joinEvent_fire);
  assign inBufPayload = {inBuf_3_io_pop_payload,{inBuf_2_io_pop_payload,{inBuf_1_io_pop_payload,inBuf_0_io_pop_payload}}};
  assign joinEvent_fire = (joinEvent_valid && joinEvent_ready);
  assign joinEvent_valid = (((inBuf_0_io_pop_valid && inBuf_1_io_pop_valid) && inBuf_2_io_pop_valid) && inBuf_3_io_pop_valid);
  assign mm2s_valid = joinEvent_valid;
  assign joinEvent_ready = mm2s_ready;
  assign mm2s_payload_data = inBufPayload;
  assign mm2s_payload_keep = 64'hffffffffffffffff;
  assign mm2s_payload_last = inLastBuf_io_pop_payload;
  always @(*) begin
    mm2s_ready = mm2s_m2sPipe_ready;
    if((! mm2s_m2sPipe_valid)) begin
      mm2s_ready = 1'b1;
    end
  end

  assign mm2s_m2sPipe_valid = mm2s_rValid;
  assign mm2s_m2sPipe_payload_data = mm2s_rData_data;
  assign mm2s_m2sPipe_payload_keep = mm2s_rData_keep;
  assign mm2s_m2sPipe_payload_last = mm2s_rData_last;
  assign mm2s_tvalid = mm2s_m2sPipe_valid;
  assign mm2s_m2sPipe_ready = mm2s_tready;
  assign mm2s_tdata = mm2s_m2sPipe_payload_data;
  assign mm2s_tkeep = mm2s_m2sPipe_payload_keep;
  assign mm2s_tlast = mm2s_m2sPipe_payload_last;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      mm2s_rValid <= 1'b0;
    end else begin
      if(mm2s_ready) begin
        mm2s_rValid <= mm2s_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(mm2s_ready) begin
      mm2s_rData_data <= mm2s_payload_data;
      mm2s_rData_keep <= mm2s_payload_keep;
      mm2s_rData_last <= mm2s_payload_last;
    end
  end


endmodule

module StreamFifo_2 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_tdata,
  input  wire [5:0]    io_push_tuser,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_tdata,
  output wire [5:0]    io_pop_tuser,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [21:0]   logic_ram_spinal_port1;
  wire       [21:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_tuser;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_tdata;
  wire       [5:0]    logic_pop_sync_readPort_tuser;
  wire       [21:0]   t_logic_pop_sync_readPort_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_tuser;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [21:0] logic_ram [0:63];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_tuser,logic_push_onRam_write_payload_tdata};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_tdata = io_push_tdata;
  assign logic_push_onRam_write_payload_tuser = io_push_tuser;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_tdata = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_tdata = t_logic_pop_sync_readPort_tdata[15 : 0];
  assign logic_pop_sync_readPort_tuser = t_logic_pop_sync_readPort_tdata[21 : 16];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_tdata = logic_pop_sync_readPort_tdata;
  assign logic_pop_sync_readArbitation_translated_tuser = logic_pop_sync_readPort_tuser;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_tdata = logic_pop_sync_readArbitation_translated_tdata;
  assign io_pop_tuser = logic_pop_sync_readArbitation_translated_tuser;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module GenMemCmdLenAlign_1 (
  input  wire          io_tokenIndex_valid,
  output wire          io_tokenIndex_ready,
  input  wire [15:0]   io_tokenIndex_tdata,
  input  wire [5:0]    io_tokenIndex_tuser,
  input  wire          io_mm2s_valid,
  output wire          io_mm2s_ready,
  input  wire [511:0]  io_mm2s_payload_data,
  input  wire [63:0]   io_mm2s_payload_keep,
  input  wire          io_mm2s_payload_last,
  output wire          io_s2mm_valid,
  input  wire          io_s2mm_ready,
  output wire [511:0]  io_s2mm_payload_data,
  output wire [63:0]   io_s2mm_payload_keep,
  output wire          io_s2mm_payload_last,
  output wire          io_mm2sCmd_valid,
  input  wire          io_mm2sCmd_ready,
  output wire [71:0]   io_mm2sCmd_payload,
  output wire          io_s2mmCmd_valid,
  input  wire          io_s2mmCmd_ready,
  output wire [71:0]   io_s2mmCmd_payload,
  output wire          local_bus_valid,
  input  wire          local_bus_ready,
  output wire [511:0]  local_bus_payload_data,
  output wire          local_bus_payload_last,
  output wire [5:0]    local_bus_payload_dest,
  input  wire          local_kvBus_valid,
  output wire          local_kvBus_ready,
  input  wire [511:0]  local_kvBus_payload_data,
  input  wire          local_kvBus_payload_last,
  input  wire [5:0]    local_kvBus_payload_dest,
  input  wire          local_index_valid,
  input  wire          local_index_payload_last,
  input  wire [15:0]   local_index_payload_tdata,
  input  wire [5:0]    local_index_payload_tuser,
  input  wire          status_enPredictor,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                indexCmdGen_indexMux_io_output_ready;
  wire       [0:0]    indexCmdGen_deMux_io_select;
  wire       [1:0]    logits_mux_io_select;
  wire                logits_mux_io_inputs_2_payload_last;
  wire       [71:0]   logits_mux_io_inputs_2_payload_fragment;
  wire                logits_mux_io_inputs_3_payload_last;
  wire       [71:0]   logits_mux_io_inputs_3_payload_fragment;
  wire                tagFifo_io_pop_ready;
  reg                 s2mm_tokenEnFifo_io_pop_ready;
  wire                indexCmdGen_indexMux_io_inputs_0_ready;
  wire                indexCmdGen_indexMux_io_inputs_1_ready;
  wire                indexCmdGen_indexMux_io_output_valid;
  wire                indexCmdGen_indexMux_io_output_payload_last;
  wire       [71:0]   indexCmdGen_indexMux_io_output_payload_fragment;
  wire                indexCmdGen_indexCmdFifo_io_push_ready;
  wire                indexCmdGen_indexCmdFifo_io_pop_valid;
  wire       [71:0]   indexCmdGen_indexCmdFifo_io_pop_payload;
  wire       [12:0]   indexCmdGen_indexCmdFifo_io_occupancy;
  wire       [12:0]   indexCmdGen_indexCmdFifo_io_availability;
  wire                indexCmdGen_indexLastFifo_io_push_ready;
  wire                indexCmdGen_indexLastFifo_io_pop_valid;
  wire                indexCmdGen_indexLastFifo_io_pop_payload;
  wire       [12:0]   indexCmdGen_indexLastFifo_io_occupancy;
  wire       [12:0]   indexCmdGen_indexLastFifo_io_availability;
  wire                indexCmdGen_deMux_io_input_ready;
  wire                indexCmdGen_deMux_io_outputs_0_valid;
  wire                indexCmdGen_deMux_io_outputs_0_payload_last;
  wire       [71:0]   indexCmdGen_deMux_io_outputs_0_payload_fragment;
  wire                indexCmdGen_deMux_io_outputs_1_valid;
  wire                indexCmdGen_deMux_io_outputs_1_payload_last;
  wire       [71:0]   indexCmdGen_deMux_io_outputs_1_payload_fragment;
  wire                attnKV_mux_io_inputs_0_ready;
  wire                attnKV_mux_io_inputs_1_ready;
  wire                attnKV_mux_io_output_valid;
  wire                attnKV_mux_io_output_payload_last;
  wire       [71:0]   attnKV_mux_io_output_payload_fragment;
  wire                attnQKVNoSz_mux_io_inputs_0_ready;
  wire                attnQKVNoSz_mux_io_inputs_1_ready;
  wire                attnQKVNoSz_mux_io_inputs_2_ready;
  wire                attnQKVNoSz_mux_io_inputs_3_ready;
  wire                attnQKVNoSz_mux_io_inputs_4_ready;
  wire                attnQKVNoSz_mux_io_output_valid;
  wire                attnQKVNoSz_mux_io_output_payload_last;
  wire       [71:0]   attnQKVNoSz_mux_io_output_payload_fragment;
  wire                attnQKVWithSz_mux_io_inputs_0_ready;
  wire                attnQKVWithSz_mux_io_inputs_1_ready;
  wire                attnQKVWithSz_mux_io_inputs_2_ready;
  wire                attnQKVWithSz_mux_io_inputs_3_ready;
  wire                attnQKVWithSz_mux_io_inputs_4_ready;
  wire                attnQKVWithSz_mux_io_inputs_5_ready;
  wire                attnQKVWithSz_mux_io_inputs_6_ready;
  wire                attnQKVWithSz_mux_io_output_valid;
  wire                attnQKVWithSz_mux_io_output_payload_last;
  wire       [71:0]   attnQKVWithSz_mux_io_output_payload_fragment;
  wire                mlpDense_mux_io_inputs_0_ready;
  wire                mlpDense_mux_io_inputs_1_ready;
  wire                mlpDense_mux_io_inputs_2_ready;
  wire                mlpDense_mux_io_inputs_3_ready;
  wire                mlpDense_mux_io_output_valid;
  wire                mlpDense_mux_io_output_payload_last;
  wire       [71:0]   mlpDense_mux_io_output_payload_fragment;
  wire                logits_mux_io_inputs_0_ready;
  wire                logits_mux_io_inputs_1_ready;
  wire                logits_mux_io_inputs_2_ready;
  wire                logits_mux_io_inputs_3_ready;
  wire                logits_mux_io_output_valid;
  wire                logits_mux_io_output_payload_last;
  wire       [71:0]   logits_mux_io_output_payload_fragment;
  wire                mm2sCmdMux_io_inputs_0_ready;
  wire                mm2sCmdMux_io_inputs_1_ready;
  wire                mm2sCmdMux_io_inputs_2_ready;
  wire                mm2sCmdMux_io_inputs_3_ready;
  wire                mm2sCmdMux_io_inputs_4_ready;
  wire                mm2sCmdMux_io_inputs_5_ready;
  wire                mm2sCmdMux_io_inputs_6_ready;
  wire                mm2sCmdMux_io_inputs_7_ready;
  wire                mm2sCmdMux_io_output_valid;
  wire                mm2sCmdMux_io_output_payload_last;
  wire       [71:0]   mm2sCmdMux_io_output_payload_fragment;
  wire                busTagMux_io_inputs_0_ready;
  wire                busTagMux_io_inputs_1_ready;
  wire                busTagMux_io_inputs_2_ready;
  wire                busTagMux_io_inputs_3_ready;
  wire                busTagMux_io_inputs_4_ready;
  wire                busTagMux_io_inputs_5_ready;
  wire                busTagMux_io_inputs_6_ready;
  wire                busTagMux_io_inputs_7_ready;
  wire                busTagMux_io_output_valid;
  wire       [5:0]    busTagMux_io_output_payload;
  wire                tagFifo_io_push_ready;
  wire                tagFifo_io_pop_valid;
  wire       [5:0]    tagFifo_io_pop_payload;
  wire       [6:0]    tagFifo_io_occupancy;
  wire       [6:0]    tagFifo_io_availability;
  wire                s2mm_tokenEnFifo_io_push_ready;
  wire                s2mm_tokenEnFifo_io_pop_valid;
  wire       [6:0]    s2mm_tokenEnFifo_io_occupancy;
  wire       [6:0]    s2mm_tokenEnFifo_io_availability;
  wire                s2mm_cmdFifo_io_push_ready;
  wire                s2mm_cmdFifo_io_pop_valid;
  wire       [71:0]   s2mm_cmdFifo_io_pop_payload;
  wire       [5:0]    s2mm_cmdFifo_io_occupancy;
  wire       [5:0]    s2mm_cmdFifo_io_availability;
  wire       [31:0]   t_headBaseNext;
  wire       [31:0]   t_layerBaseNext;
  wire       [31:0]   t_tokenIn_payload_fragment;
  wire       [28:0]   t_tokenIn_payload_fragment_1;
  wire       [28:0]   t_tokenIn_payload_fragment_2;
  wire       [22:0]   t_tokenIn_payload_fragment_3;
  wire       [12:0]   t_tokenIn_payload_fragment_4;
  wire       [31:0]   t_attnLn_payload_fragment;
  wire       [22:0]   t_attnLn_payload_fragment_1;
  wire       [13:0]   t_attnLn_payload_fragment_2;
  reg        [25:0]   t_indexCmdGen_selDenseBaseAddr;
  reg        [10:0]   t_indexCmdGen_selDenseLen;
  reg        [3:0]    t_indexCmdGen_selDenseTag;
  wire       [13:0]   t_t_indexCmdGen_denseU_payload_fragment_2;
  wire       [31:0]   t_indexCmdGen_denseU_payload_fragment_3;
  wire       [13:0]   t_t_indexCmdGen_denseD_payload_fragment_2;
  wire       [31:0]   t_indexCmdGen_denseD_payload_fragment_3;
  wire       [13:0]   t_t_attnKV_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnKV_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnKV_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnKV_attnVCmdVec_payload_fragment_3;
  reg        [5:0]    t_attnKV_tag_payload;
  wire       [13:0]   t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_3;
  wire       [31:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2;
  reg        [5:0]    t_attnQKVNoSz_tag_payload;
  wire       [13:0]   t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_3;
  wire       [31:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment_1;
  wire       [11:0]   t_attnQKVWithSz_attnKszCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment_1;
  wire       [11:0]   t_attnQKVWithSz_attnVszCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2;
  wire       [31:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment;
  wire       [22:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1;
  wire       [16:0]   t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2;
  reg        [5:0]    t_attnQKVWithSz_tag_payload;
  wire       [31:0]   t_mlpDense_mlpLnCmd_payload_fragment;
  wire       [22:0]   t_mlpDense_mlpLnCmd_payload_fragment_1;
  wire       [12:0]   t_mlpDense_mlpLnCmd_payload_fragment_2;
  wire       [13:0]   t_t_mlpDense_attnOCmdVec_payload_fragment_2;
  wire       [31:0]   t_mlpDense_attnOCmdVec_payload_fragment_3;
  wire       [13:0]   t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2;
  wire       [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_3;
  reg        [5:0]    t_mlpDense_tag_payload;
  wire       [31:0]   t_logits_lgDenseScale_payload_fragment;
  wire       [30:0]   t_logits_lgDenseScale_payload_fragment_1;
  wire       [22:0]   t_logits_lgDenseScale_payload_fragment_2;
  wire       [12:0]   t_logits_lgDenseScale_payload_fragment_3;
  wire       [13:0]   t_t_logits_lgDenseHeadVec_payload_fragment_2;
  wire       [31:0]   t_logits_lgDenseHeadVec_payload_fragment_3;
  reg        [5:0]    t_logits_tag_payload;
  wire       [31:0]   t_s2mm_headBaseNext;
  wire       [31:0]   t_s2mm_layerBaseNext;
  wire       [31:0]   t_s2mm_kCacheCmd;
  wire       [31:0]   t_s2mm_kCacheCmd_1;
  wire       [14:0]   t_s2mm_kCacheCmd_2;
  wire       [31:0]   t_s2mm_kCacheCmd_3;
  wire       [22:0]   t_s2mm_kCacheCmd_4;
  wire       [7:0]    t_s2mm_kCacheCmd_5;
  wire       [31:0]   t_s2mm_vCacheCmd;
  wire       [31:0]   t_s2mm_vCacheCmd_1;
  wire       [14:0]   t_s2mm_vCacheCmd_2;
  wire       [31:0]   t_s2mm_vCacheCmd_3;
  wire       [22:0]   t_s2mm_vCacheCmd_4;
  wire       [7:0]    t_s2mm_vCacheCmd_5;
  wire       [31:0]   t_s2mm_kSzCmd;
  wire       [31:0]   t_s2mm_kSzCmd_1;
  wire       [9:0]    t_s2mm_kSzCmd_2;
  wire       [31:0]   t_s2mm_kSzCmd_3;
  wire       [22:0]   t_s2mm_kSzCmd_4;
  wire       [6:0]    t_s2mm_kSzCmd_5;
  wire       [31:0]   t_s2mm_vSzCmd;
  wire       [31:0]   t_s2mm_vSzCmd_1;
  wire       [9:0]    t_s2mm_vSzCmd_2;
  wire       [31:0]   t_s2mm_vSzCmd_3;
  wire       [22:0]   t_s2mm_vSzCmd_4;
  wire       [6:0]    t_s2mm_vSzCmd_5;
  reg        [71:0]   t_s2mm_s2mmCmd_payload;
  wire                t_when;
  reg        [9:0]    token;
  wire       [5:0]    tokenHigh;
  wire       [3:0]    tokenLow;
  wire                firstToken;
  wire                noSzFromMem;
  wire       [20:0]   mallocPerHead;
  reg        [31:0]   headBase;
  reg        [31:0]   headBaseNext;
  wire                enIncHead;
  reg        [3:0]    headCnt;
  wire                headCntAbout2Ovf;
  reg                 headCntOvf;
  wire       [25:0]   mallocPerLayer;
  reg        [31:0]   layerBase;
  reg        [31:0]   layerBaseNext;
  reg                 enIncLayer;
  reg        [4:0]    layerCnt;
  wire                layerCntAbout2Ovf;
  reg                 layerCntOvf;
  reg        [31:0]   attnHeadBase;
  wire       [31:0]   attnHeadBaseNext;
  wire                tokenIn_valid;
  wire                tokenIn_ready;
  wire                tokenIn_payload_last;
  wire       [71:0]   tokenIn_payload_fragment;
  wire                tokenTag_valid;
  wire                tokenTag_ready;
  wire       [5:0]    tokenTag_payload;
  wire                tokenIn_fire;
  wire                attnLn_valid;
  wire                attnLn_ready;
  wire                attnLn_payload_last;
  wire       [71:0]   attnLn_payload_fragment;
  wire                attnLnTag_valid;
  wire                attnLnTag_ready;
  wire       [5:0]    attnLnTag_payload;
  wire                attnLn_fire;
  wire       [25:0]   indexCmdGen_denseBaseAddrOs_0;
  wire       [25:0]   indexCmdGen_denseBaseAddrOs_1;
  wire       [10:0]   indexCmdGen_denseLen_0;
  wire       [10:0]   indexCmdGen_denseLen_1;
  wire       [3:0]    indexCmdGen_denseTag_0;
  wire       [3:0]    indexCmdGen_denseTag_1;
  reg        [0:0]    indexCmdGen_denseLastCnt;
  wire       [25:0]   indexCmdGen_selDenseBaseAddr;
  wire       [10:0]   indexCmdGen_selDenseLen;
  wire       [3:0]    indexCmdGen_selDenseTag;
  reg        [25:0]   indexCmdGen_selBaseAddr;
  reg        [10:0]   indexCmdGen_selLen;
  reg        [3:0]    indexCmdGen_selTag;
  wire                indexCmdGen_indexFlow_valid;
  wire                indexCmdGen_indexFlow_payload_last;
  wire       [15:0]   indexCmdGen_indexFlow_payload_fragment;
  reg                 local_index_valid_regNext;
  reg                 local_index_payload_last_regNext;
  reg        [15:0]   t_indexCmdGen_indexFlow_payload_fragment;
  reg        [10:0]   t_indexCmdGen_denseU_payload_last;
  reg        [10:0]   t_indexCmdGen_denseU_payload_last_1;
  reg                 t_indexCmdGen_denseU_payload_last_2;
  wire                t_indexCmdGen_denseU_payload_last_3;
  reg        [31:0]   t_indexCmdGen_denseU_payload_fragment;
  reg        [31:0]   t_indexCmdGen_denseU_payload_fragment_1;
  reg        [22:0]   t_indexCmdGen_denseU_payload_fragment_2;
  wire                indexCmdGen_denseU_valid;
  wire                indexCmdGen_denseU_ready;
  wire                indexCmdGen_denseU_payload_last;
  wire       [71:0]   indexCmdGen_denseU_payload_fragment;
  wire                indexCmdGen_denseU_fire;
  reg        [10:0]   t_indexCmdGen_denseD_payload_last;
  reg        [10:0]   t_indexCmdGen_denseD_payload_last_1;
  reg                 t_indexCmdGen_denseD_payload_last_2;
  wire                t_indexCmdGen_denseD_payload_last_3;
  reg        [31:0]   t_indexCmdGen_denseD_payload_fragment;
  reg        [31:0]   t_indexCmdGen_denseD_payload_fragment_1;
  reg        [22:0]   t_indexCmdGen_denseD_payload_fragment_2;
  wire                indexCmdGen_denseD_valid;
  wire                indexCmdGen_denseD_ready;
  wire                indexCmdGen_denseD_payload_last;
  wire       [71:0]   indexCmdGen_denseD_payload_fragment;
  wire                indexCmdGen_denseD_fire;
  reg                 indexCmdGen_enDenseUD;
  reg                 indexCmdGen_indexFlow_payload_first;
  wire                indexCmdGen_indexCmd_valid;
  wire                indexCmdGen_indexCmd_payload_last;
  wire       [71:0]   indexCmdGen_indexCmd_payload_fragment;
  wire                cmdGen_indexCmdGen_indexCmdFifo_io_push_fire;
  wire                cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire;
  wire                indexCmdGen_indexCmdOut_valid;
  wire                indexCmdGen_indexCmdOut_ready;
  wire                indexCmdGen_indexCmdOut_payload_last;
  wire       [71:0]   indexCmdGen_indexCmdOut_payload_fragment;
  reg        [5:0]    t_attnKV_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnKV_attnKCmdVec_payload_last_1;
  reg                 t_attnKV_attnKCmdVec_payload_last_2;
  wire                t_attnKV_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnKV_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnKV_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnKV_attnKCmdVec_payload_fragment_2;
  wire                attnKV_attnKCmdVec_valid;
  wire                attnKV_attnKCmdVec_ready;
  wire                attnKV_attnKCmdVec_payload_last;
  wire       [71:0]   attnKV_attnKCmdVec_payload_fragment;
  wire                attnKV_attnKCmdVec_fire;
  reg        [5:0]    t_attnKV_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnKV_attnVCmdVec_payload_last_1;
  reg                 t_attnKV_attnVCmdVec_payload_last_2;
  wire                t_attnKV_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnKV_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnKV_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnKV_attnVCmdVec_payload_fragment_2;
  wire                attnKV_attnVCmdVec_valid;
  wire                attnKV_attnVCmdVec_ready;
  wire                attnKV_attnVCmdVec_payload_last;
  wire       [71:0]   attnKV_attnVCmdVec_payload_fragment;
  wire                attnKV_attnVCmdVec_fire;
  reg        [0:0]    attnKV_sel;
  wire                attnKV_muxOutFire;
  reg                 cmdGen_attnKV_mux_io_output_payload_first;
  wire                attnKV_muxOutIsFirst;
  wire                attnKV_selOvf;
  wire       [5:0]    attnKV_tagVec_0;
  wire       [5:0]    attnKV_tagVec_1;
  reg        [0:0]    attnKV_tagSel;
  wire                attnKV_tagFire;
  wire                attnKV_tag_valid;
  wire                attnKV_tag_ready;
  wire       [5:0]    attnKV_tag_payload;
  wire                attnKV_cmd_valid;
  wire                attnKV_cmd_ready;
  wire                attnKV_cmd_payload_last;
  wire       [71:0]   attnKV_cmd_payload_fragment;
  reg        [5:0]    t_attnQKVNoSz_attnQCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnQCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnQCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnQCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnQCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnQCmdVec_valid;
  wire                attnQKVNoSz_attnQCmdVec_ready;
  wire                attnQKVNoSz_attnQCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnQCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnQCmdVec_fire;
  reg        [5:0]    t_attnQKVNoSz_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnKCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnKCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnKCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnKCmdVec_valid;
  wire                attnQKVNoSz_attnKCmdVec_ready;
  wire                attnQKVNoSz_attnKCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnKCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnKCmdVec_fire;
  reg        [5:0]    t_attnQKVNoSz_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnQKVNoSz_attnVCmdVec_payload_last_1;
  reg                 t_attnQKVNoSz_attnVCmdVec_payload_last_2;
  wire                t_attnQKVNoSz_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVNoSz_attnVCmdVec_payload_fragment_2;
  wire                attnQKVNoSz_attnVCmdVec_valid;
  wire                attnQKVNoSz_attnVCmdVec_ready;
  wire                attnQKVNoSz_attnVCmdVec_payload_last;
  wire       [71:0]   attnQKVNoSz_attnVCmdVec_payload_fragment;
  wire                attnQKVNoSz_attnVCmdVec_fire;
  wire                attnQKVNoSz_attnKCacheCmd_valid;
  wire                attnQKVNoSz_attnKCacheCmd_ready;
  wire                attnQKVNoSz_attnKCacheCmd_payload_last;
  wire       [71:0]   attnQKVNoSz_attnKCacheCmd_payload_fragment;
  wire                attnQKVNoSz_attnVCacheCmd_valid;
  wire                attnQKVNoSz_attnVCacheCmd_ready;
  wire                attnQKVNoSz_attnVCacheCmd_payload_last;
  wire       [71:0]   attnQKVNoSz_attnVCacheCmd_payload_fragment;
  reg        [2:0]    attnQKVNoSz_sel;
  wire                attnQKVNoSz_muxOutFire;
  reg                 cmdGen_attnQKVNoSz_mux_io_output_payload_first;
  wire                attnQKVNoSz_muxOutIsFirst;
  wire                attnQKVNoSz_selOvf;
  wire       [5:0]    attnQKVNoSz_tagVec_0;
  wire       [5:0]    attnQKVNoSz_tagVec_1;
  wire       [5:0]    attnQKVNoSz_tagVec_2;
  wire       [5:0]    attnQKVNoSz_tagVec_3;
  wire       [5:0]    attnQKVNoSz_tagVec_4;
  reg        [2:0]    attnQKVNoSz_tagSel;
  wire                attnQKVNoSz_tagFire;
  wire                attnQKVNoSz_tag_valid;
  wire                attnQKVNoSz_tag_ready;
  wire       [5:0]    attnQKVNoSz_tag_payload;
  wire                attnQKVNoSz_cmd_valid;
  wire                attnQKVNoSz_cmd_ready;
  wire                attnQKVNoSz_cmd_payload_last;
  wire       [71:0]   attnQKVNoSz_cmd_payload_fragment;
  reg        [5:0]    t_attnQKVWithSz_attnQCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnQCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnQCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnQCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnQCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnQCmdVec_valid;
  wire                attnQKVWithSz_attnQCmdVec_ready;
  wire                attnQKVWithSz_attnQCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnQCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnQCmdVec_fire;
  reg        [5:0]    t_attnQKVWithSz_attnKCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnKCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnKCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnKCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnKCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnKCmdVec_valid;
  wire                attnQKVWithSz_attnKCmdVec_ready;
  wire                attnQKVWithSz_attnKCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnKCmdVec_fire;
  reg        [5:0]    t_attnQKVWithSz_attnVCmdVec_payload_last;
  reg        [5:0]    t_attnQKVWithSz_attnVCmdVec_payload_last_1;
  reg                 t_attnQKVWithSz_attnVCmdVec_payload_last_2;
  wire                t_attnQKVWithSz_attnVCmdVec_payload_last_3;
  reg        [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment;
  reg        [31:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_1;
  reg        [22:0]   t_attnQKVWithSz_attnVCmdVec_payload_fragment_2;
  wire                attnQKVWithSz_attnVCmdVec_valid;
  wire                attnQKVWithSz_attnVCmdVec_ready;
  wire                attnQKVWithSz_attnVCmdVec_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVCmdVec_payload_fragment;
  wire                attnQKVWithSz_attnVCmdVec_fire;
  wire                attnQKVWithSz_attnKszCmd_valid;
  wire                attnQKVWithSz_attnKszCmd_ready;
  wire                attnQKVWithSz_attnKszCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKszCmd_payload_fragment;
  wire                attnQKVWithSz_attnVszCmd_valid;
  wire                attnQKVWithSz_attnVszCmd_ready;
  wire                attnQKVWithSz_attnVszCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVszCmd_payload_fragment;
  wire                attnQKVWithSz_attnKCacheCmd_valid;
  wire                attnQKVWithSz_attnKCacheCmd_ready;
  wire                attnQKVWithSz_attnKCacheCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnKCacheCmd_payload_fragment;
  wire                attnQKVWithSz_attnVCacheCmd_valid;
  wire                attnQKVWithSz_attnVCacheCmd_ready;
  wire                attnQKVWithSz_attnVCacheCmd_payload_last;
  wire       [71:0]   attnQKVWithSz_attnVCacheCmd_payload_fragment;
  reg        [2:0]    attnQKVWithSz_sel;
  wire                attnQKVWithSz_muxOutFire;
  reg                 cmdGen_attnQKVWithSz_mux_io_output_payload_first;
  wire                attnQKVWithSz_muxOutIsFirst;
  wire                attnQKVWithSz_selOvf;
  wire       [5:0]    attnQKVWithSz_tagVec_0;
  wire       [5:0]    attnQKVWithSz_tagVec_1;
  wire       [5:0]    attnQKVWithSz_tagVec_2;
  wire       [5:0]    attnQKVWithSz_tagVec_3;
  wire       [5:0]    attnQKVWithSz_tagVec_4;
  wire       [5:0]    attnQKVWithSz_tagVec_5;
  wire       [5:0]    attnQKVWithSz_tagVec_6;
  reg        [2:0]    attnQKVWithSz_tagSel;
  wire                attnQKVWithSz_tagFire;
  wire                attnQKVWithSz_tag_valid;
  wire                attnQKVWithSz_tag_ready;
  wire       [5:0]    attnQKVWithSz_tag_payload;
  wire                attnQKVWithSz_cmd_valid;
  wire                attnQKVWithSz_cmd_ready;
  wire                attnQKVWithSz_cmd_payload_last;
  wire       [71:0]   attnQKVWithSz_cmd_payload_fragment;
  wire                mlpWithPredict_cmd_valid;
  wire                mlpWithPredict_cmd_ready;
  wire                mlpWithPredict_cmd_payload_last;
  wire       [71:0]   mlpWithPredict_cmd_payload_fragment;
  wire       [72:0]   t_mlpWithPredict_cmd_payload_last;
  wire                mlpWithPredict_tag_valid;
  wire                mlpWithPredict_tag_ready;
  wire       [5:0]    mlpWithPredict_tag_payload;
  wire                mlpDense_mlpLnCmd_valid;
  wire                mlpDense_mlpLnCmd_ready;
  wire                mlpDense_mlpLnCmd_payload_last;
  wire       [71:0]   mlpDense_mlpLnCmd_payload_fragment;
  reg        [9:0]    t_mlpDense_attnOCmdVec_payload_last;
  reg        [9:0]    t_mlpDense_attnOCmdVec_payload_last_1;
  reg                 t_mlpDense_attnOCmdVec_payload_last_2;
  wire                t_mlpDense_attnOCmdVec_payload_last_3;
  reg        [31:0]   t_mlpDense_attnOCmdVec_payload_fragment;
  reg        [31:0]   t_mlpDense_attnOCmdVec_payload_fragment_1;
  reg        [22:0]   t_mlpDense_attnOCmdVec_payload_fragment_2;
  wire                mlpDense_attnOCmdVec_valid;
  wire                mlpDense_attnOCmdVec_ready;
  wire                mlpDense_attnOCmdVec_payload_last;
  wire       [71:0]   mlpDense_attnOCmdVec_payload_fragment;
  wire                mlpDense_attnOCmdVec_fire;
  reg        [10:0]   t_mlpDense_mlpDenseGCmdVec_payload_last;
  reg        [10:0]   t_mlpDense_mlpDenseGCmdVec_payload_last_1;
  reg                 t_mlpDense_mlpDenseGCmdVec_payload_last_2;
  wire                t_mlpDense_mlpDenseGCmdVec_payload_last_3;
  reg        [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment;
  reg        [31:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_1;
  reg        [22:0]   t_mlpDense_mlpDenseGCmdVec_payload_fragment_2;
  wire                mlpDense_mlpDenseGCmdVec_valid;
  wire                mlpDense_mlpDenseGCmdVec_ready;
  wire                mlpDense_mlpDenseGCmdVec_payload_last;
  wire       [71:0]   mlpDense_mlpDenseGCmdVec_payload_fragment;
  wire                mlpDense_mlpDenseGCmdVec_fire;
  reg        [2:0]    mlpDense_sel;
  wire                mlpDense_muxOutFire;
  reg                 cmdGen_mlpDense_mux_io_output_payload_first;
  wire                mlpDense_muxOutIsFirst;
  wire                mlpDense_selOvf;
  reg        [1:0]    mlpDense_muxSel;
  wire       [5:0]    mlpDense_tagVec_0;
  wire       [5:0]    mlpDense_tagVec_1;
  wire       [5:0]    mlpDense_tagVec_2;
  wire       [5:0]    mlpDense_tagVec_3;
  wire       [5:0]    mlpDense_tagVec_4;
  reg        [2:0]    mlpDense_tagSel;
  wire                mlpDense_tagFire;
  wire                mlpDense_tag_valid;
  wire                mlpDense_tag_ready;
  wire       [5:0]    mlpDense_tag_payload;
  wire                mlpDense_cmd_valid;
  wire                mlpDense_cmd_ready;
  wire                mlpDense_cmd_payload_last;
  wire       [71:0]   mlpDense_cmd_payload_fragment;
  wire                logits_lgDenseScale_valid;
  wire                logits_lgDenseScale_ready;
  wire                logits_lgDenseScale_payload_last;
  wire       [71:0]   logits_lgDenseScale_payload_fragment;
  reg        [12:0]   t_logits_lgDenseHeadVec_payload_last;
  reg        [12:0]   t_logits_lgDenseHeadVec_payload_last_1;
  reg                 t_logits_lgDenseHeadVec_payload_last_2;
  wire                t_logits_lgDenseHeadVec_payload_last_3;
  reg        [31:0]   t_logits_lgDenseHeadVec_payload_fragment;
  reg        [31:0]   t_logits_lgDenseHeadVec_payload_fragment_1;
  reg        [22:0]   t_logits_lgDenseHeadVec_payload_fragment_2;
  wire                logits_lgDenseHeadVec_valid;
  wire                logits_lgDenseHeadVec_ready;
  wire                logits_lgDenseHeadVec_payload_last;
  wire       [71:0]   logits_lgDenseHeadVec_payload_fragment;
  wire                logits_lgDenseHeadVec_fire;
  wire       [72:0]   t_io_inputs_2_payload_last;
  wire       [72:0]   t_io_inputs_3_payload_last;
  reg        [0:0]    logits_sel;
  wire                logits_muxOutFire;
  reg                 cmdGen_logits_mux_io_output_payload_first;
  wire                logits_muxOutIsFirst;
  wire                logits_selOvf;
  wire       [5:0]    logits_tagVec_0;
  wire       [5:0]    logits_tagVec_1;
  reg        [0:0]    logits_tagSel;
  wire                logits_tagFire;
  wire                logits_tag_valid;
  wire                logits_tag_ready;
  wire       [5:0]    logits_tag_payload;
  wire                logits_cmd_valid;
  wire                logits_cmd_ready;
  wire                logits_cmd_payload_last;
  wire       [71:0]   logits_cmd_payload_fragment;
  wire                attnKV_cmd_fire;
  wire                kvDone;
  wire                attnQKVNoSz_cmd_fire;
  wire                qkvNoSzDone;
  wire                attnQKVWithSz_cmd_fire;
  wire                qkvDone;
  wire                mlpWithPredict_cmd_fire;
  wire                sparseMlpDone;
  wire                mlpDense_cmd_fire;
  wire                denseMlpDone;
  wire                mlpDone;
  wire                logits_cmd_fire;
  wire                logitsDone;
  wire                io_mm2s_fire;
  reg                 prefill;
  wire                tokenTag_fire;
  wire                mm2sCmd_valid;
  wire                mm2sCmd_ready;
  wire       [71:0]   mm2sCmd_payload;
  wire                mm2sCmd_s2mPipe_valid;
  reg                 mm2sCmd_s2mPipe_ready;
  wire       [71:0]   mm2sCmd_s2mPipe_payload;
  reg                 mm2sCmd_rValidN;
  reg        [71:0]   mm2sCmd_rData;
  wire                mm2sCmd_s2mPipe_m2sPipe_valid;
  wire                mm2sCmd_s2mPipe_m2sPipe_ready;
  wire       [71:0]   mm2sCmd_s2mPipe_m2sPipe_payload;
  reg                 mm2sCmd_s2mPipe_rValid;
  reg        [71:0]   mm2sCmd_s2mPipe_rData;
  wire                enTokenCnt;
  (* max_fanout = 100 *) reg        [2:0]    select_1;
  reg        [2:0]    selectNext;
  wire                io_tokenIndex_fire;
  wire       [20:0]   s2mm_mallocPerHead;
  reg        [31:0]   s2mm_headBase;
  reg        [31:0]   s2mm_headBaseNext;
  wire                s2mm_enIncHead;
  reg        [3:0]    s2mm_headCnt;
  wire                s2mm_headCntAbout2Ovf;
  reg                 s2mm_headCntOvf;
  wire       [25:0]   s2mm_mallocPerLayer;
  reg        [31:0]   s2mm_layerBase;
  reg        [31:0]   s2mm_layerBaseNext;
  wire                s2mm_enIncLayer;
  reg        [4:0]    s2mm_layerCnt;
  wire                s2mm_layerCntAbout2Ovf;
  reg                 s2mm_layerCntOvf;
  reg        [9:0]    s2mm_s2mmTokenCnt;
  reg        [31:0]   s2mm_attnHeadBase;
  wire       [31:0]   s2mm_attnHeadBaseNext;
  wire       [3:0]    s2mm_s2mmTokenCntLow;
  wire       [5:0]    s2mm_s2mmTokenHigh;
  wire                s2mm_s2mSzToMem;
  wire       [71:0]   s2mm_kCacheCmd;
  wire       [71:0]   s2mm_vCacheCmd;
  wire       [71:0]   s2mm_kSzCmd;
  wire       [71:0]   s2mm_vSzCmd;
  wire                s2mm_s2mmCmd_valid;
  reg                 s2mm_s2mmCmd_ready;
  wire       [71:0]   s2mm_s2mmCmd_payload;
  wire       [1:0]    s2mm_toMemSel;
  reg        [1:0]    s2mm_cnt;
  wire                s2mm_s2mmCmd_fire;
  reg                 s2mm_s2mmCmdThrow_valid;
  wire                s2mm_s2mmCmdThrow_ready;
  wire       [71:0]   s2mm_s2mmCmdThrow_payload;

  assign t_when = ((! s2mm_s2mSzToMem) && (s2mm_cnt[0] == 1'b0));
  assign t_headBaseNext = {11'd0, mallocPerHead};
  assign t_layerBaseNext = {6'd0, mallocPerLayer};
  assign t_tokenIn_payload_fragment_1 = (t_tokenIn_payload_fragment_2 + 29'h00036000);
  assign t_tokenIn_payload_fragment = {3'd0, t_tokenIn_payload_fragment_1};
  assign t_tokenIn_payload_fragment_2 = (io_tokenIndex_tdata * 13'h1000);
  assign t_tokenIn_payload_fragment_4 = 13'h1000;
  assign t_tokenIn_payload_fragment_3 = {10'd0, t_tokenIn_payload_fragment_4};
  assign t_attnLn_payload_fragment = (32'h0 + layerBase);
  assign t_attnLn_payload_fragment_2 = 14'h2000;
  assign t_attnLn_payload_fragment_1 = {9'd0, t_attnLn_payload_fragment_2};
  assign t_t_indexCmdGen_denseU_payload_fragment_2 = (t_indexCmdGen_denseU_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_indexCmdGen_denseU_payload_fragment_3 = (t_indexCmdGen_denseU_payload_fragment + layerBase);
  assign t_t_indexCmdGen_denseD_payload_fragment_2 = (t_indexCmdGen_denseD_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_indexCmdGen_denseD_payload_fragment_3 = (t_indexCmdGen_denseD_payload_fragment + layerBase);
  assign t_t_attnKV_attnKCmdVec_payload_fragment_2 = (t_attnKV_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnKV_attnKCmdVec_payload_fragment_3 = (t_attnKV_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnKV_attnVCmdVec_payload_fragment_2 = (t_attnKV_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnKV_attnVCmdVec_payload_fragment_3 = (t_attnKV_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnQCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnQCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnQCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnKCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 = (t_attnQKVNoSz_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVNoSz_attnVCmdVec_payload_fragment_3 = (t_attnQKVNoSz_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment = (32'h000cc000 + attnHeadBase);
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVNoSz_attnKCacheCmd_payload_fragment_2};
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment = (32'h000ec000 + attnHeadBase);
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVNoSz_attnVCacheCmd_payload_fragment_2};
  assign t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnQCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnQCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnQCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnKCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnKCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnKCmdVec_payload_fragment + attnHeadBase);
  assign t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 = (t_attnQKVWithSz_attnVCmdVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_attnQKVWithSz_attnVCmdVec_payload_fragment_3 = (t_attnQKVWithSz_attnVCmdVec_payload_fragment + attnHeadBase);
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment = (32'h0010c000 + attnHeadBase);
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment_2 = {token[9 : 4],6'h0};
  assign t_attnQKVWithSz_attnKszCmd_payload_fragment_1 = {11'd0, t_attnQKVWithSz_attnKszCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment = (32'h0010d000 + attnHeadBase);
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment_2 = {token[9 : 4],6'h0};
  assign t_attnQKVWithSz_attnVszCmd_payload_fragment_1 = {11'd0, t_attnQKVWithSz_attnVszCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment = (32'h000cc000 + attnHeadBase);
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVWithSz_attnKCacheCmd_payload_fragment_2};
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment = (32'h000ec000 + attnHeadBase);
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2 = {token,7'h0};
  assign t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1 = {6'd0, t_attnQKVWithSz_attnVCacheCmd_payload_fragment_2};
  assign t_mlpDense_mlpLnCmd_payload_fragment = (32'h0150a000 + layerBase);
  assign t_mlpDense_mlpLnCmd_payload_fragment_2 = 13'h1000;
  assign t_mlpDense_mlpLnCmd_payload_fragment_1 = {10'd0, t_mlpDense_mlpLnCmd_payload_fragment_2};
  assign t_t_mlpDense_attnOCmdVec_payload_fragment_2 = (t_mlpDense_attnOCmdVec_payload_last_3 ? 14'h2000 : 14'h2000);
  assign t_mlpDense_attnOCmdVec_payload_fragment_3 = (t_mlpDense_attnOCmdVec_payload_fragment + layerBase);
  assign t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 = (t_mlpDense_mlpDenseGCmdVec_payload_last_3 ? 14'h1800 : 14'h2000);
  assign t_mlpDense_mlpDenseGCmdVec_payload_fragment_3 = (t_mlpDense_mlpDenseGCmdVec_payload_fragment + layerBase);
  assign t_logits_lgDenseScale_payload_fragment_1 = (31'h75f00000 + 31'h00036000);
  assign t_logits_lgDenseScale_payload_fragment = {1'd0, t_logits_lgDenseScale_payload_fragment_1};
  assign t_logits_lgDenseScale_payload_fragment_3 = 13'h1000;
  assign t_logits_lgDenseScale_payload_fragment_2 = {10'd0, t_logits_lgDenseScale_payload_fragment_3};
  assign t_t_logits_lgDenseHeadVec_payload_fragment_2 = (t_logits_lgDenseHeadVec_payload_last_3 ? 14'h0800 : 14'h2000);
  assign t_logits_lgDenseHeadVec_payload_fragment_3 = (t_logits_lgDenseHeadVec_payload_fragment + 32'h00036000);
  assign t_s2mm_headBaseNext = {11'd0, s2mm_mallocPerHead};
  assign t_s2mm_layerBaseNext = {6'd0, s2mm_mallocPerLayer};
  assign t_s2mm_kCacheCmd = (t_s2mm_kCacheCmd_1 + t_s2mm_kCacheCmd_3);
  assign t_s2mm_kCacheCmd_2 = {s2mm_s2mmTokenCnt,5'h0};
  assign t_s2mm_kCacheCmd_1 = {17'd0, t_s2mm_kCacheCmd_2};
  assign t_s2mm_kCacheCmd_3 = (s2mm_attnHeadBase + 32'h000cc000);
  assign t_s2mm_kCacheCmd_5 = 8'h80;
  assign t_s2mm_kCacheCmd_4 = {15'd0, t_s2mm_kCacheCmd_5};
  assign t_s2mm_vCacheCmd = (t_s2mm_vCacheCmd_1 + t_s2mm_vCacheCmd_3);
  assign t_s2mm_vCacheCmd_2 = {s2mm_s2mmTokenCnt,5'h0};
  assign t_s2mm_vCacheCmd_1 = {17'd0, t_s2mm_vCacheCmd_2};
  assign t_s2mm_vCacheCmd_3 = (s2mm_attnHeadBase + 32'h000ec000);
  assign t_s2mm_vCacheCmd_5 = 8'h80;
  assign t_s2mm_vCacheCmd_4 = {15'd0, t_s2mm_vCacheCmd_5};
  assign t_s2mm_kSzCmd = (t_s2mm_kSzCmd_1 + t_s2mm_kSzCmd_3);
  assign t_s2mm_kSzCmd_2 = {s2mm_s2mmTokenHigh,4'b0000};
  assign t_s2mm_kSzCmd_1 = {22'd0, t_s2mm_kSzCmd_2};
  assign t_s2mm_kSzCmd_3 = (s2mm_attnHeadBase + 32'h0010c000);
  assign t_s2mm_kSzCmd_5 = 7'h40;
  assign t_s2mm_kSzCmd_4 = {16'd0, t_s2mm_kSzCmd_5};
  assign t_s2mm_vSzCmd = (t_s2mm_vSzCmd_1 + t_s2mm_vSzCmd_3);
  assign t_s2mm_vSzCmd_2 = {s2mm_s2mmTokenHigh,4'b0000};
  assign t_s2mm_vSzCmd_1 = {22'd0, t_s2mm_vSzCmd_2};
  assign t_s2mm_vSzCmd_3 = (s2mm_attnHeadBase + 32'h0010d000);
  assign t_s2mm_vSzCmd_5 = 7'h40;
  assign t_s2mm_vSzCmd_4 = {16'd0, t_s2mm_vSzCmd_5};
  StreamMux_30 indexCmdGen_indexMux (
    .io_select                    (indexCmdGen_denseLastCnt                             ), //i
    .io_inputs_0_valid            (indexCmdGen_denseU_valid                             ), //i
    .io_inputs_0_ready            (indexCmdGen_indexMux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (indexCmdGen_denseU_payload_last                      ), //i
    .io_inputs_0_payload_fragment (indexCmdGen_denseU_payload_fragment[71:0]            ), //i
    .io_inputs_1_valid            (indexCmdGen_denseD_valid                             ), //i
    .io_inputs_1_ready            (indexCmdGen_indexMux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (indexCmdGen_denseD_payload_last                      ), //i
    .io_inputs_1_payload_fragment (indexCmdGen_denseD_payload_fragment[71:0]            ), //i
    .io_output_valid              (indexCmdGen_indexMux_io_output_valid                 ), //o
    .io_output_ready              (indexCmdGen_indexMux_io_output_ready                 ), //i
    .io_output_payload_last       (indexCmdGen_indexMux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (indexCmdGen_indexMux_io_output_payload_fragment[71:0])  //o
  );
  StreamFifoPipe_9 indexCmdGen_indexCmdFifo (
    .io_push_valid   (indexCmdGen_indexCmd_valid                    ), //i
    .io_push_ready   (indexCmdGen_indexCmdFifo_io_push_ready        ), //o
    .io_push_payload (indexCmdGen_indexCmd_payload_fragment[71:0]   ), //i
    .io_pop_valid    (indexCmdGen_indexCmdFifo_io_pop_valid         ), //o
    .io_pop_ready    (indexCmdGen_indexCmdOut_ready                 ), //i
    .io_pop_payload  (indexCmdGen_indexCmdFifo_io_pop_payload[71:0] ), //o
    .io_flush        (1'b0                                          ), //i
    .io_occupancy    (indexCmdGen_indexCmdFifo_io_occupancy[12:0]   ), //o
    .io_availability (indexCmdGen_indexCmdFifo_io_availability[12:0]), //o
    .clk_0_clk       (clk_0_clk                                     ), //i
    .clk_0_resetn    (clk_0_resetn                                  )  //i
  );
  StreamFifoPipe_3 indexCmdGen_indexLastFifo (
    .io_push_valid   (cmdGen_indexCmdGen_indexCmdFifo_io_push_fire   ), //i
    .io_push_ready   (indexCmdGen_indexLastFifo_io_push_ready        ), //o
    .io_push_payload (indexCmdGen_indexCmd_payload_last              ), //i
    .io_pop_valid    (indexCmdGen_indexLastFifo_io_pop_valid         ), //o
    .io_pop_ready    (cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire    ), //i
    .io_pop_payload  (indexCmdGen_indexLastFifo_io_pop_payload       ), //o
    .io_flush        (1'b0                                           ), //i
    .io_occupancy    (indexCmdGen_indexLastFifo_io_occupancy[12:0]   ), //o
    .io_availability (indexCmdGen_indexLastFifo_io_availability[12:0]), //o
    .clk_0_clk       (clk_0_clk                                      ), //i
    .clk_0_resetn    (clk_0_resetn                                   )  //i
  );
  StreamDemux_11 indexCmdGen_deMux (
    .io_select                     (indexCmdGen_deMux_io_select                          ), //i
    .io_input_valid                (indexCmdGen_indexCmdOut_valid                        ), //i
    .io_input_ready                (indexCmdGen_deMux_io_input_ready                     ), //o
    .io_input_payload_last         (indexCmdGen_indexCmdOut_payload_last                 ), //i
    .io_input_payload_fragment     (indexCmdGen_indexCmdOut_payload_fragment[71:0]       ), //i
    .io_outputs_0_valid            (indexCmdGen_deMux_io_outputs_0_valid                 ), //o
    .io_outputs_0_ready            (mlpDense_mux_io_inputs_3_ready                       ), //i
    .io_outputs_0_payload_last     (indexCmdGen_deMux_io_outputs_0_payload_last          ), //o
    .io_outputs_0_payload_fragment (indexCmdGen_deMux_io_outputs_0_payload_fragment[71:0]), //o
    .io_outputs_1_valid            (indexCmdGen_deMux_io_outputs_1_valid                 ), //o
    .io_outputs_1_ready            (1'b1                                                 ), //i
    .io_outputs_1_payload_last     (indexCmdGen_deMux_io_outputs_1_payload_last          ), //o
    .io_outputs_1_payload_fragment (indexCmdGen_deMux_io_outputs_1_payload_fragment[71:0])  //o
  );
  StreamMux_30 attnKV_mux (
    .io_select                    (attnKV_sel                                 ), //i
    .io_inputs_0_valid            (attnKV_attnKCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnKV_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnKV_attnKCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnKV_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnKV_attnVCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnKV_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnKV_attnVCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnKV_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_output_valid              (attnKV_mux_io_output_valid                 ), //o
    .io_output_ready              (attnKV_cmd_ready                           ), //i
    .io_output_payload_last       (attnKV_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnKV_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_32 attnQKVNoSz_mux (
    .io_select                    (attnQKVNoSz_sel[2:0]                            ), //i
    .io_inputs_0_valid            (attnQKVNoSz_attnQCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnQKVNoSz_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnQKVNoSz_attnQCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnQKVNoSz_attnQCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnQKVNoSz_attnKCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnQKVNoSz_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnQKVNoSz_attnKCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnQKVNoSz_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_2_valid            (attnQKVNoSz_attnKCacheCmd_valid                 ), //i
    .io_inputs_2_ready            (attnQKVNoSz_mux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnQKVNoSz_attnKCacheCmd_payload_last          ), //i
    .io_inputs_2_payload_fragment (attnQKVNoSz_attnKCacheCmd_payload_fragment[71:0]), //i
    .io_inputs_3_valid            (attnQKVNoSz_attnVCmdVec_valid                   ), //i
    .io_inputs_3_ready            (attnQKVNoSz_mux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVNoSz_attnVCmdVec_payload_last            ), //i
    .io_inputs_3_payload_fragment (attnQKVNoSz_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_4_valid            (attnQKVNoSz_attnVCacheCmd_valid                 ), //i
    .io_inputs_4_ready            (attnQKVNoSz_mux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVNoSz_attnVCacheCmd_payload_last          ), //i
    .io_inputs_4_payload_fragment (attnQKVNoSz_attnVCacheCmd_payload_fragment[71:0]), //i
    .io_output_valid              (attnQKVNoSz_mux_io_output_valid                 ), //o
    .io_output_ready              (attnQKVNoSz_cmd_ready                           ), //i
    .io_output_payload_last       (attnQKVNoSz_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnQKVNoSz_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_33 attnQKVWithSz_mux (
    .io_select                    (attnQKVWithSz_sel[2:0]                            ), //i
    .io_inputs_0_valid            (attnQKVWithSz_attnQCmdVec_valid                   ), //i
    .io_inputs_0_ready            (attnQKVWithSz_mux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (attnQKVWithSz_attnQCmdVec_payload_last            ), //i
    .io_inputs_0_payload_fragment (attnQKVWithSz_attnQCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_1_valid            (attnQKVWithSz_attnKCmdVec_valid                   ), //i
    .io_inputs_1_ready            (attnQKVWithSz_mux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnQKVWithSz_attnKCmdVec_payload_last            ), //i
    .io_inputs_1_payload_fragment (attnQKVWithSz_attnKCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_2_valid            (attnQKVWithSz_attnKszCmd_valid                    ), //i
    .io_inputs_2_ready            (attnQKVWithSz_mux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnQKVWithSz_attnKszCmd_payload_last             ), //i
    .io_inputs_2_payload_fragment (attnQKVWithSz_attnKszCmd_payload_fragment[71:0]   ), //i
    .io_inputs_3_valid            (attnQKVWithSz_attnKCacheCmd_valid                 ), //i
    .io_inputs_3_ready            (attnQKVWithSz_mux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVWithSz_attnKCacheCmd_payload_last          ), //i
    .io_inputs_3_payload_fragment (attnQKVWithSz_attnKCacheCmd_payload_fragment[71:0]), //i
    .io_inputs_4_valid            (attnQKVWithSz_attnVCmdVec_valid                   ), //i
    .io_inputs_4_ready            (attnQKVWithSz_mux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVWithSz_attnVCmdVec_payload_last            ), //i
    .io_inputs_4_payload_fragment (attnQKVWithSz_attnVCmdVec_payload_fragment[71:0]  ), //i
    .io_inputs_5_valid            (attnQKVWithSz_attnVszCmd_valid                    ), //i
    .io_inputs_5_ready            (attnQKVWithSz_mux_io_inputs_5_ready               ), //o
    .io_inputs_5_payload_last     (attnQKVWithSz_attnVszCmd_payload_last             ), //i
    .io_inputs_5_payload_fragment (attnQKVWithSz_attnVszCmd_payload_fragment[71:0]   ), //i
    .io_inputs_6_valid            (attnQKVWithSz_attnVCacheCmd_valid                 ), //i
    .io_inputs_6_ready            (attnQKVWithSz_mux_io_inputs_6_ready               ), //o
    .io_inputs_6_payload_last     (attnQKVWithSz_attnVCacheCmd_payload_last          ), //i
    .io_inputs_6_payload_fragment (attnQKVWithSz_attnVCacheCmd_payload_fragment[71:0]), //i
    .io_output_valid              (attnQKVWithSz_mux_io_output_valid                 ), //o
    .io_output_ready              (attnQKVWithSz_cmd_ready                           ), //i
    .io_output_payload_last       (attnQKVWithSz_mux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (attnQKVWithSz_mux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_34 mlpDense_mux (
    .io_select                    (mlpDense_muxSel[1:0]                                 ), //i
    .io_inputs_0_valid            (mlpDense_attnOCmdVec_valid                           ), //i
    .io_inputs_0_ready            (mlpDense_mux_io_inputs_0_ready                       ), //o
    .io_inputs_0_payload_last     (mlpDense_attnOCmdVec_payload_last                    ), //i
    .io_inputs_0_payload_fragment (mlpDense_attnOCmdVec_payload_fragment[71:0]          ), //i
    .io_inputs_1_valid            (mlpDense_mlpLnCmd_valid                              ), //i
    .io_inputs_1_ready            (mlpDense_mux_io_inputs_1_ready                       ), //o
    .io_inputs_1_payload_last     (mlpDense_mlpLnCmd_payload_last                       ), //i
    .io_inputs_1_payload_fragment (mlpDense_mlpLnCmd_payload_fragment[71:0]             ), //i
    .io_inputs_2_valid            (mlpDense_mlpDenseGCmdVec_valid                       ), //i
    .io_inputs_2_ready            (mlpDense_mux_io_inputs_2_ready                       ), //o
    .io_inputs_2_payload_last     (mlpDense_mlpDenseGCmdVec_payload_last                ), //i
    .io_inputs_2_payload_fragment (mlpDense_mlpDenseGCmdVec_payload_fragment[71:0]      ), //i
    .io_inputs_3_valid            (indexCmdGen_deMux_io_outputs_0_valid                 ), //i
    .io_inputs_3_ready            (mlpDense_mux_io_inputs_3_ready                       ), //o
    .io_inputs_3_payload_last     (indexCmdGen_deMux_io_outputs_0_payload_last          ), //i
    .io_inputs_3_payload_fragment (indexCmdGen_deMux_io_outputs_0_payload_fragment[71:0]), //i
    .io_output_valid              (mlpDense_mux_io_output_valid                         ), //o
    .io_output_ready              (mlpDense_cmd_ready                                   ), //i
    .io_output_payload_last       (mlpDense_mux_io_output_payload_last                  ), //o
    .io_output_payload_fragment   (mlpDense_mux_io_output_payload_fragment[71:0]        )  //o
  );
  StreamMux_34 logits_mux (
    .io_select                    (logits_mux_io_select[1:0]                    ), //i
    .io_inputs_0_valid            (logits_lgDenseScale_valid                    ), //i
    .io_inputs_0_ready            (logits_mux_io_inputs_0_ready                 ), //o
    .io_inputs_0_payload_last     (logits_lgDenseScale_payload_last             ), //i
    .io_inputs_0_payload_fragment (logits_lgDenseScale_payload_fragment[71:0]   ), //i
    .io_inputs_1_valid            (logits_lgDenseHeadVec_valid                  ), //i
    .io_inputs_1_ready            (logits_mux_io_inputs_1_ready                 ), //o
    .io_inputs_1_payload_last     (logits_lgDenseHeadVec_payload_last           ), //i
    .io_inputs_1_payload_fragment (logits_lgDenseHeadVec_payload_fragment[71:0] ), //i
    .io_inputs_2_valid            (1'b0                                         ), //i
    .io_inputs_2_ready            (logits_mux_io_inputs_2_ready                 ), //o
    .io_inputs_2_payload_last     (logits_mux_io_inputs_2_payload_last          ), //i
    .io_inputs_2_payload_fragment (logits_mux_io_inputs_2_payload_fragment[71:0]), //i
    .io_inputs_3_valid            (1'b0                                         ), //i
    .io_inputs_3_ready            (logits_mux_io_inputs_3_ready                 ), //o
    .io_inputs_3_payload_last     (logits_mux_io_inputs_3_payload_last          ), //i
    .io_inputs_3_payload_fragment (logits_mux_io_inputs_3_payload_fragment[71:0]), //i
    .io_output_valid              (logits_mux_io_output_valid                   ), //o
    .io_output_ready              (logits_cmd_ready                             ), //i
    .io_output_payload_last       (logits_mux_io_output_payload_last            ), //o
    .io_output_payload_fragment   (logits_mux_io_output_payload_fragment[71:0]  )  //o
  );
  StreamMux_36 mm2sCmdMux (
    .io_select                    (select_1[2:0]                              ), //i
    .io_inputs_0_valid            (tokenIn_valid                              ), //i
    .io_inputs_0_ready            (mm2sCmdMux_io_inputs_0_ready               ), //o
    .io_inputs_0_payload_last     (tokenIn_payload_last                       ), //i
    .io_inputs_0_payload_fragment (tokenIn_payload_fragment[71:0]             ), //i
    .io_inputs_1_valid            (attnLn_valid                               ), //i
    .io_inputs_1_ready            (mm2sCmdMux_io_inputs_1_ready               ), //o
    .io_inputs_1_payload_last     (attnLn_payload_last                        ), //i
    .io_inputs_1_payload_fragment (attnLn_payload_fragment[71:0]              ), //i
    .io_inputs_2_valid            (attnKV_cmd_valid                           ), //i
    .io_inputs_2_ready            (mm2sCmdMux_io_inputs_2_ready               ), //o
    .io_inputs_2_payload_last     (attnKV_cmd_payload_last                    ), //i
    .io_inputs_2_payload_fragment (attnKV_cmd_payload_fragment[71:0]          ), //i
    .io_inputs_3_valid            (attnQKVNoSz_cmd_valid                      ), //i
    .io_inputs_3_ready            (mm2sCmdMux_io_inputs_3_ready               ), //o
    .io_inputs_3_payload_last     (attnQKVNoSz_cmd_payload_last               ), //i
    .io_inputs_3_payload_fragment (attnQKVNoSz_cmd_payload_fragment[71:0]     ), //i
    .io_inputs_4_valid            (attnQKVWithSz_cmd_valid                    ), //i
    .io_inputs_4_ready            (mm2sCmdMux_io_inputs_4_ready               ), //o
    .io_inputs_4_payload_last     (attnQKVWithSz_cmd_payload_last             ), //i
    .io_inputs_4_payload_fragment (attnQKVWithSz_cmd_payload_fragment[71:0]   ), //i
    .io_inputs_5_valid            (mlpWithPredict_cmd_valid                   ), //i
    .io_inputs_5_ready            (mm2sCmdMux_io_inputs_5_ready               ), //o
    .io_inputs_5_payload_last     (mlpWithPredict_cmd_payload_last            ), //i
    .io_inputs_5_payload_fragment (mlpWithPredict_cmd_payload_fragment[71:0]  ), //i
    .io_inputs_6_valid            (mlpDense_cmd_valid                         ), //i
    .io_inputs_6_ready            (mm2sCmdMux_io_inputs_6_ready               ), //o
    .io_inputs_6_payload_last     (mlpDense_cmd_payload_last                  ), //i
    .io_inputs_6_payload_fragment (mlpDense_cmd_payload_fragment[71:0]        ), //i
    .io_inputs_7_valid            (logits_cmd_valid                           ), //i
    .io_inputs_7_ready            (mm2sCmdMux_io_inputs_7_ready               ), //o
    .io_inputs_7_payload_last     (logits_cmd_payload_last                    ), //i
    .io_inputs_7_payload_fragment (logits_cmd_payload_fragment[71:0]          ), //i
    .io_output_valid              (mm2sCmdMux_io_output_valid                 ), //o
    .io_output_ready              (mm2sCmd_ready                              ), //i
    .io_output_payload_last       (mm2sCmdMux_io_output_payload_last          ), //o
    .io_output_payload_fragment   (mm2sCmdMux_io_output_payload_fragment[71:0])  //o
  );
  StreamMux_37 busTagMux (
    .io_select           (select_1[2:0]                   ), //i
    .io_inputs_0_valid   (tokenTag_valid                  ), //i
    .io_inputs_0_ready   (busTagMux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (tokenTag_payload[5:0]           ), //i
    .io_inputs_1_valid   (attnLnTag_valid                 ), //i
    .io_inputs_1_ready   (busTagMux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (attnLnTag_payload[5:0]          ), //i
    .io_inputs_2_valid   (attnKV_tag_valid                ), //i
    .io_inputs_2_ready   (busTagMux_io_inputs_2_ready     ), //o
    .io_inputs_2_payload (attnKV_tag_payload[5:0]         ), //i
    .io_inputs_3_valid   (attnQKVNoSz_tag_valid           ), //i
    .io_inputs_3_ready   (busTagMux_io_inputs_3_ready     ), //o
    .io_inputs_3_payload (attnQKVNoSz_tag_payload[5:0]    ), //i
    .io_inputs_4_valid   (attnQKVWithSz_tag_valid         ), //i
    .io_inputs_4_ready   (busTagMux_io_inputs_4_ready     ), //o
    .io_inputs_4_payload (attnQKVWithSz_tag_payload[5:0]  ), //i
    .io_inputs_5_valid   (mlpWithPredict_tag_valid        ), //i
    .io_inputs_5_ready   (busTagMux_io_inputs_5_ready     ), //o
    .io_inputs_5_payload (mlpWithPredict_tag_payload[5:0] ), //i
    .io_inputs_6_valid   (mlpDense_tag_valid              ), //i
    .io_inputs_6_ready   (busTagMux_io_inputs_6_ready     ), //o
    .io_inputs_6_payload (mlpDense_tag_payload[5:0]       ), //i
    .io_inputs_7_valid   (logits_tag_valid                ), //i
    .io_inputs_7_ready   (busTagMux_io_inputs_7_ready     ), //o
    .io_inputs_7_payload (logits_tag_payload[5:0]         ), //i
    .io_output_valid     (busTagMux_io_output_valid       ), //o
    .io_output_ready     (tagFifo_io_push_ready           ), //i
    .io_output_payload   (busTagMux_io_output_payload[5:0])  //o
  );
  StreamFifo_57 tagFifo (
    .io_push_valid   (busTagMux_io_output_valid       ), //i
    .io_push_ready   (tagFifo_io_push_ready           ), //o
    .io_push_payload (busTagMux_io_output_payload[5:0]), //i
    .io_pop_valid    (tagFifo_io_pop_valid            ), //o
    .io_pop_ready    (tagFifo_io_pop_ready            ), //i
    .io_pop_payload  (tagFifo_io_pop_payload[5:0]     ), //o
    .io_flush        (1'b0                            ), //i
    .io_occupancy    (tagFifo_io_occupancy[6:0]       ), //o
    .io_availability (tagFifo_io_availability[6:0]    ), //o
    .clk_0_clk       (clk_0_clk                       ), //i
    .clk_0_resetn    (clk_0_resetn                    )  //i
  );
  StreamFifo_58 s2mm_tokenEnFifo (
    .io_push_valid   (io_tokenIndex_fire                   ), //i
    .io_push_ready   (s2mm_tokenEnFifo_io_push_ready       ), //o
    .io_pop_valid    (s2mm_tokenEnFifo_io_pop_valid        ), //o
    .io_pop_ready    (s2mm_tokenEnFifo_io_pop_ready        ), //i
    .io_flush        (1'b0                                 ), //i
    .io_occupancy    (s2mm_tokenEnFifo_io_occupancy[6:0]   ), //o
    .io_availability (s2mm_tokenEnFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                            ), //i
    .clk_0_resetn    (clk_0_resetn                         )  //i
  );
  StreamFifo_59 s2mm_cmdFifo (
    .io_push_valid   (s2mm_s2mmCmdThrow_valid          ), //i
    .io_push_ready   (s2mm_cmdFifo_io_push_ready       ), //o
    .io_push_payload (s2mm_s2mmCmdThrow_payload[71:0]  ), //i
    .io_pop_valid    (s2mm_cmdFifo_io_pop_valid        ), //o
    .io_pop_ready    (io_s2mmCmd_ready                 ), //i
    .io_pop_payload  (s2mm_cmdFifo_io_pop_payload[71:0]), //o
    .io_flush        (1'b0                             ), //i
    .io_occupancy    (s2mm_cmdFifo_io_occupancy[5:0]   ), //o
    .io_availability (s2mm_cmdFifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                        ), //i
    .clk_0_resetn    (clk_0_resetn                     )  //i
  );
  always @(*) begin
    case(indexCmdGen_denseLastCnt)
      1'b0 : begin
        t_indexCmdGen_selDenseBaseAddr = indexCmdGen_denseBaseAddrOs_0;
        t_indexCmdGen_selDenseLen = indexCmdGen_denseLen_0;
        t_indexCmdGen_selDenseTag = indexCmdGen_denseTag_0;
      end
      default : begin
        t_indexCmdGen_selDenseBaseAddr = indexCmdGen_denseBaseAddrOs_1;
        t_indexCmdGen_selDenseLen = indexCmdGen_denseLen_1;
        t_indexCmdGen_selDenseTag = indexCmdGen_denseTag_1;
      end
    endcase
  end

  always @(*) begin
    case(attnKV_tagSel)
      1'b0 : t_attnKV_tag_payload = attnKV_tagVec_0;
      default : t_attnKV_tag_payload = attnKV_tagVec_1;
    endcase
  end

  always @(*) begin
    case(attnQKVNoSz_tagSel)
      3'b000 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_0;
      3'b001 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_1;
      3'b010 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_2;
      3'b011 : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_3;
      default : t_attnQKVNoSz_tag_payload = attnQKVNoSz_tagVec_4;
    endcase
  end

  always @(*) begin
    case(attnQKVWithSz_tagSel)
      3'b000 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_0;
      3'b001 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_1;
      3'b010 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_2;
      3'b011 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_3;
      3'b100 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_4;
      3'b101 : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_5;
      default : t_attnQKVWithSz_tag_payload = attnQKVWithSz_tagVec_6;
    endcase
  end

  always @(*) begin
    case(mlpDense_tagSel)
      3'b000 : t_mlpDense_tag_payload = mlpDense_tagVec_0;
      3'b001 : t_mlpDense_tag_payload = mlpDense_tagVec_1;
      3'b010 : t_mlpDense_tag_payload = mlpDense_tagVec_2;
      3'b011 : t_mlpDense_tag_payload = mlpDense_tagVec_3;
      default : t_mlpDense_tag_payload = mlpDense_tagVec_4;
    endcase
  end

  always @(*) begin
    case(logits_tagSel)
      1'b0 : t_logits_tag_payload = logits_tagVec_0;
      default : t_logits_tag_payload = logits_tagVec_1;
    endcase
  end

  always @(*) begin
    case(s2mm_toMemSel)
      2'b00 : t_s2mm_s2mmCmd_payload = s2mm_kSzCmd;
      2'b01 : t_s2mm_s2mmCmd_payload = s2mm_kCacheCmd;
      2'b10 : t_s2mm_s2mmCmd_payload = s2mm_vSzCmd;
      default : t_s2mm_s2mmCmd_payload = s2mm_vCacheCmd;
    endcase
  end

  assign tokenHigh = token[9 : 4];
  assign tokenLow = token[3 : 0];
  assign firstToken = (token == 10'h0);
  assign noSzFromMem = (tokenHigh == 6'h0);
  assign mallocPerHead = 21'h10e000;
  assign headCntAbout2Ovf = (headCnt == 4'b1110);
  always @(*) begin
    headBaseNext = headBase;
    if(enIncHead) begin
      headBaseNext = (headBase + t_headBaseNext);
      if(headCntOvf) begin
        headBaseNext = 32'h00002000;
      end
    end
  end

  assign mallocPerLayer = (status_enPredictor ? 26'h3b29000 : 26'h3710000);
  assign layerCntAbout2Ovf = (layerCnt == 5'h1e);
  always @(*) begin
    layerBaseNext = layerBase;
    if(enIncLayer) begin
      layerBaseNext = (layerBase + t_layerBaseNext);
      if(layerCntOvf) begin
        layerBaseNext = 32'h07d36000;
      end
    end
  end

  assign attnHeadBaseNext = (layerBaseNext + headBaseNext);
  assign tokenIn_valid = io_tokenIndex_valid;
  assign io_tokenIndex_ready = tokenIn_ready;
  assign tokenIn_payload_last = 1'b1;
  assign tokenIn_payload_fragment = {{{{{{{4'b0000,4'b0000},t_tokenIn_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_tokenIn_payload_fragment_3};
  assign tokenIn_fire = (tokenIn_valid && tokenIn_ready);
  assign tokenTag_valid = tokenIn_fire;
  assign tokenTag_payload = io_tokenIndex_tuser;
  assign attnLn_valid = 1'b1;
  assign attnLn_payload_last = 1'b1;
  assign attnLn_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnLn_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnLn_payload_fragment_1};
  assign attnLn_fire = (attnLn_valid && attnLn_ready);
  assign attnLnTag_valid = attnLn_fire;
  assign attnLnTag_payload = 6'h03;
  assign indexCmdGen_denseBaseAddrOs_0 = 26'h2038000;
  assign indexCmdGen_denseBaseAddrOs_1 = 26'h2ba4000;
  assign indexCmdGen_denseLen_0 = 11'h440;
  assign indexCmdGen_denseLen_1 = 11'h440;
  assign indexCmdGen_denseTag_0 = 4'b0100;
  assign indexCmdGen_denseTag_1 = 4'b0101;
  assign indexCmdGen_selDenseBaseAddr = t_indexCmdGen_selDenseBaseAddr;
  assign indexCmdGen_selDenseLen = t_indexCmdGen_selDenseLen;
  assign indexCmdGen_selDenseTag = t_indexCmdGen_selDenseTag;
  assign indexCmdGen_indexFlow_valid = local_index_valid_regNext;
  assign indexCmdGen_indexFlow_payload_last = local_index_payload_last_regNext;
  assign indexCmdGen_indexFlow_payload_fragment = t_indexCmdGen_indexFlow_payload_fragment;
  assign t_indexCmdGen_denseU_payload_last_3 = (t_indexCmdGen_denseU_payload_last_1 == 11'h5b5);
  always @(*) begin
    t_indexCmdGen_denseU_payload_last_1 = t_indexCmdGen_denseU_payload_last;
    if(indexCmdGen_denseU_fire) begin
      t_indexCmdGen_denseU_payload_last_1 = (t_indexCmdGen_denseU_payload_last + 11'h001);
      if(t_indexCmdGen_denseU_payload_last_2) begin
        t_indexCmdGen_denseU_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_indexCmdGen_denseU_payload_fragment_1 = t_indexCmdGen_denseU_payload_fragment;
    if(indexCmdGen_denseU_fire) begin
      t_indexCmdGen_denseU_payload_fragment_1 = (t_indexCmdGen_denseU_payload_fragment + 32'h00002000);
      if(t_indexCmdGen_denseU_payload_last_2) begin
        t_indexCmdGen_denseU_payload_fragment_1 = 32'h02038000;
      end
    end
  end

  assign indexCmdGen_denseU_valid = 1'b1;
  assign indexCmdGen_denseU_payload_fragment = {{{{{{{4'b0000,4'b0000},t_indexCmdGen_denseU_payload_fragment_3},1'b0},t_indexCmdGen_denseU_payload_last_2},6'h0},1'b1},t_indexCmdGen_denseU_payload_fragment_2};
  assign indexCmdGen_denseU_payload_last = t_indexCmdGen_denseU_payload_last_2;
  assign indexCmdGen_denseU_fire = (indexCmdGen_denseU_valid && indexCmdGen_denseU_ready);
  assign t_indexCmdGen_denseD_payload_last_3 = (t_indexCmdGen_denseD_payload_last_1 == 11'h5b5);
  always @(*) begin
    t_indexCmdGen_denseD_payload_last_1 = t_indexCmdGen_denseD_payload_last;
    if(indexCmdGen_denseD_fire) begin
      t_indexCmdGen_denseD_payload_last_1 = (t_indexCmdGen_denseD_payload_last + 11'h001);
      if(t_indexCmdGen_denseD_payload_last_2) begin
        t_indexCmdGen_denseD_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_indexCmdGen_denseD_payload_fragment_1 = t_indexCmdGen_denseD_payload_fragment;
    if(indexCmdGen_denseD_fire) begin
      t_indexCmdGen_denseD_payload_fragment_1 = (t_indexCmdGen_denseD_payload_fragment + 32'h00002000);
      if(t_indexCmdGen_denseD_payload_last_2) begin
        t_indexCmdGen_denseD_payload_fragment_1 = 32'h02ba4000;
      end
    end
  end

  assign indexCmdGen_denseD_valid = 1'b1;
  assign indexCmdGen_denseD_payload_fragment = {{{{{{{4'b0000,4'b0000},t_indexCmdGen_denseD_payload_fragment_3},1'b0},t_indexCmdGen_denseD_payload_last_2},6'h0},1'b1},t_indexCmdGen_denseD_payload_fragment_2};
  assign indexCmdGen_denseD_payload_last = t_indexCmdGen_denseD_payload_last_2;
  assign indexCmdGen_denseD_fire = (indexCmdGen_denseD_valid && indexCmdGen_denseD_ready);
  assign indexCmdGen_denseU_ready = indexCmdGen_indexMux_io_inputs_0_ready;
  assign indexCmdGen_denseD_ready = indexCmdGen_indexMux_io_inputs_1_ready;
  assign indexCmdGen_indexMux_io_output_ready = (1'b1 && indexCmdGen_enDenseUD);
  assign indexCmdGen_indexCmd_valid = (indexCmdGen_indexMux_io_output_valid && indexCmdGen_enDenseUD);
  assign indexCmdGen_indexCmd_payload_last = indexCmdGen_indexMux_io_output_payload_last;
  assign indexCmdGen_indexCmd_payload_fragment = indexCmdGen_indexMux_io_output_payload_fragment;
  assign cmdGen_indexCmdGen_indexCmdFifo_io_push_fire = (indexCmdGen_indexCmd_valid && indexCmdGen_indexCmdFifo_io_push_ready);
  assign cmdGen_indexCmdGen_indexCmdFifo_io_pop_fire = (indexCmdGen_indexCmdFifo_io_pop_valid && indexCmdGen_indexCmdOut_ready);
  assign indexCmdGen_indexCmdOut_valid = indexCmdGen_indexCmdFifo_io_pop_valid;
  assign indexCmdGen_indexCmdOut_payload_fragment = indexCmdGen_indexCmdFifo_io_pop_payload;
  assign indexCmdGen_indexCmdOut_payload_last = indexCmdGen_indexLastFifo_io_pop_payload;
  assign indexCmdGen_indexCmdOut_ready = indexCmdGen_deMux_io_input_ready;
  assign indexCmdGen_deMux_io_select = status_enPredictor;
  assign t_attnKV_attnKCmdVec_payload_last_3 = (t_attnKV_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnKV_attnKCmdVec_payload_last_1 = t_attnKV_attnKCmdVec_payload_last;
    if(attnKV_attnKCmdVec_fire) begin
      t_attnKV_attnKCmdVec_payload_last_1 = (t_attnKV_attnKCmdVec_payload_last + 6'h01);
      if(t_attnKV_attnKCmdVec_payload_last_2) begin
        t_attnKV_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnKV_attnKCmdVec_payload_fragment_1 = t_attnKV_attnKCmdVec_payload_fragment;
    if(attnKV_attnKCmdVec_fire) begin
      t_attnKV_attnKCmdVec_payload_fragment_1 = (t_attnKV_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnKV_attnKCmdVec_payload_last_2) begin
        t_attnKV_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnKV_attnKCmdVec_valid = 1'b1;
  assign attnKV_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnKV_attnKCmdVec_payload_fragment_3},1'b0},t_attnKV_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnKV_attnKCmdVec_payload_fragment_2};
  assign attnKV_attnKCmdVec_payload_last = t_attnKV_attnKCmdVec_payload_last_2;
  assign attnKV_attnKCmdVec_fire = (attnKV_attnKCmdVec_valid && attnKV_attnKCmdVec_ready);
  assign t_attnKV_attnVCmdVec_payload_last_3 = (t_attnKV_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnKV_attnVCmdVec_payload_last_1 = t_attnKV_attnVCmdVec_payload_last;
    if(attnKV_attnVCmdVec_fire) begin
      t_attnKV_attnVCmdVec_payload_last_1 = (t_attnKV_attnVCmdVec_payload_last + 6'h01);
      if(t_attnKV_attnVCmdVec_payload_last_2) begin
        t_attnKV_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnKV_attnVCmdVec_payload_fragment_1 = t_attnKV_attnVCmdVec_payload_fragment;
    if(attnKV_attnVCmdVec_fire) begin
      t_attnKV_attnVCmdVec_payload_fragment_1 = (t_attnKV_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnKV_attnVCmdVec_payload_last_2) begin
        t_attnKV_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnKV_attnVCmdVec_valid = 1'b1;
  assign attnKV_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnKV_attnVCmdVec_payload_fragment_3},1'b0},t_attnKV_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnKV_attnVCmdVec_payload_fragment_2};
  assign attnKV_attnVCmdVec_payload_last = t_attnKV_attnVCmdVec_payload_last_2;
  assign attnKV_attnVCmdVec_fire = (attnKV_attnVCmdVec_valid && attnKV_attnVCmdVec_ready);
  assign attnKV_attnKCmdVec_ready = attnKV_mux_io_inputs_0_ready;
  assign attnKV_attnVCmdVec_ready = attnKV_mux_io_inputs_1_ready;
  assign attnKV_muxOutFire = (attnKV_mux_io_output_valid && attnKV_cmd_ready);
  assign attnKV_muxOutIsFirst = (attnKV_mux_io_output_valid && cmdGen_attnKV_mux_io_output_payload_first);
  assign attnKV_selOvf = (attnKV_sel == 1'b1);
  assign attnKV_tagVec_0 = 6'h05;
  assign attnKV_tagVec_1 = 6'h07;
  assign attnKV_tagFire = (attnKV_muxOutFire && attnKV_muxOutIsFirst);
  assign attnKV_tag_valid = attnKV_tagFire;
  assign attnKV_tag_payload = t_attnKV_tag_payload;
  assign attnKV_cmd_valid = attnKV_mux_io_output_valid;
  assign attnKV_cmd_payload_fragment = attnKV_mux_io_output_payload_fragment;
  assign attnKV_cmd_payload_last = (attnKV_mux_io_output_payload_last && attnKV_selOvf);
  assign t_attnQKVNoSz_attnQCmdVec_payload_last_3 = (t_attnQKVNoSz_attnQCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnQCmdVec_payload_last_1 = t_attnQKVNoSz_attnQCmdVec_payload_last;
    if(attnQKVNoSz_attnQCmdVec_fire) begin
      t_attnQKVNoSz_attnQCmdVec_payload_last_1 = (t_attnQKVNoSz_attnQCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnQCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnQCmdVec_payload_fragment;
    if(attnQKVNoSz_attnQCmdVec_fire) begin
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnQCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnQCmdVec_payload_fragment_1 = 32'h0;
      end
    end
  end

  assign attnQKVNoSz_attnQCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnQCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnQCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnQCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnQCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnQCmdVec_payload_last = t_attnQKVNoSz_attnQCmdVec_payload_last_2;
  assign attnQKVNoSz_attnQCmdVec_fire = (attnQKVNoSz_attnQCmdVec_valid && attnQKVNoSz_attnQCmdVec_ready);
  assign t_attnQKVNoSz_attnKCmdVec_payload_last_3 = (t_attnQKVNoSz_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnKCmdVec_payload_last_1 = t_attnQKVNoSz_attnKCmdVec_payload_last;
    if(attnQKVNoSz_attnKCmdVec_fire) begin
      t_attnQKVNoSz_attnKCmdVec_payload_last_1 = (t_attnQKVNoSz_attnKCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnKCmdVec_payload_fragment;
    if(attnQKVNoSz_attnKCmdVec_fire) begin
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnQKVNoSz_attnKCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnKCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnKCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnKCmdVec_payload_last = t_attnQKVNoSz_attnKCmdVec_payload_last_2;
  assign attnQKVNoSz_attnKCmdVec_fire = (attnQKVNoSz_attnKCmdVec_valid && attnQKVNoSz_attnKCmdVec_ready);
  assign t_attnQKVNoSz_attnVCmdVec_payload_last_3 = (t_attnQKVNoSz_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVNoSz_attnVCmdVec_payload_last_1 = t_attnQKVNoSz_attnVCmdVec_payload_last;
    if(attnQKVNoSz_attnVCmdVec_fire) begin
      t_attnQKVNoSz_attnVCmdVec_payload_last_1 = (t_attnQKVNoSz_attnVCmdVec_payload_last + 6'h01);
      if(t_attnQKVNoSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = t_attnQKVNoSz_attnVCmdVec_payload_fragment;
    if(attnQKVNoSz_attnVCmdVec_fire) begin
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = (t_attnQKVNoSz_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVNoSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVNoSz_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnQKVNoSz_attnVCmdVec_valid = 1'b1;
  assign attnQKVNoSz_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVNoSz_attnVCmdVec_payload_fragment_3},1'b0},t_attnQKVNoSz_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVNoSz_attnVCmdVec_payload_fragment_2};
  assign attnQKVNoSz_attnVCmdVec_payload_last = t_attnQKVNoSz_attnVCmdVec_payload_last_2;
  assign attnQKVNoSz_attnVCmdVec_fire = (attnQKVNoSz_attnVCmdVec_valid && attnQKVNoSz_attnVCmdVec_ready);
  assign attnQKVNoSz_attnKCacheCmd_valid = 1'b1;
  assign attnQKVNoSz_attnKCacheCmd_payload_last = 1'b1;
  assign attnQKVNoSz_attnKCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVNoSz_attnKCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVNoSz_attnKCacheCmd_payload_fragment_1};
  assign attnQKVNoSz_attnVCacheCmd_valid = 1'b1;
  assign attnQKVNoSz_attnVCacheCmd_payload_last = 1'b1;
  assign attnQKVNoSz_attnVCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVNoSz_attnVCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVNoSz_attnVCacheCmd_payload_fragment_1};
  assign attnQKVNoSz_attnQCmdVec_ready = attnQKVNoSz_mux_io_inputs_0_ready;
  assign attnQKVNoSz_attnKCmdVec_ready = attnQKVNoSz_mux_io_inputs_1_ready;
  assign attnQKVNoSz_attnKCacheCmd_ready = attnQKVNoSz_mux_io_inputs_2_ready;
  assign attnQKVNoSz_attnVCmdVec_ready = attnQKVNoSz_mux_io_inputs_3_ready;
  assign attnQKVNoSz_attnVCacheCmd_ready = attnQKVNoSz_mux_io_inputs_4_ready;
  assign attnQKVNoSz_muxOutFire = (attnQKVNoSz_mux_io_output_valid && attnQKVNoSz_cmd_ready);
  assign attnQKVNoSz_muxOutIsFirst = (attnQKVNoSz_mux_io_output_valid && cmdGen_attnQKVNoSz_mux_io_output_payload_first);
  assign attnQKVNoSz_selOvf = (attnQKVNoSz_sel == 3'b100);
  assign attnQKVNoSz_tagVec_0 = 6'h04;
  assign attnQKVNoSz_tagVec_1 = 6'h05;
  assign attnQKVNoSz_tagVec_2 = 6'h06;
  assign attnQKVNoSz_tagVec_3 = 6'h07;
  assign attnQKVNoSz_tagVec_4 = 6'h08;
  assign attnQKVNoSz_tagFire = (attnQKVNoSz_muxOutFire && attnQKVNoSz_muxOutIsFirst);
  assign attnQKVNoSz_tag_valid = attnQKVNoSz_tagFire;
  assign attnQKVNoSz_tag_payload = t_attnQKVNoSz_tag_payload;
  assign attnQKVNoSz_cmd_valid = attnQKVNoSz_mux_io_output_valid;
  assign attnQKVNoSz_cmd_payload_fragment = attnQKVNoSz_mux_io_output_payload_fragment;
  assign attnQKVNoSz_cmd_payload_last = (attnQKVNoSz_mux_io_output_payload_last && attnQKVNoSz_selOvf);
  assign t_attnQKVWithSz_attnQCmdVec_payload_last_3 = (t_attnQKVWithSz_attnQCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnQCmdVec_payload_last_1 = t_attnQKVWithSz_attnQCmdVec_payload_last;
    if(attnQKVWithSz_attnQCmdVec_fire) begin
      t_attnQKVWithSz_attnQCmdVec_payload_last_1 = (t_attnQKVWithSz_attnQCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnQCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnQCmdVec_payload_fragment;
    if(attnQKVWithSz_attnQCmdVec_fire) begin
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnQCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnQCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnQCmdVec_payload_fragment_1 = 32'h0;
      end
    end
  end

  assign attnQKVWithSz_attnQCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnQCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnQCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnQCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnQCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnQCmdVec_payload_last = t_attnQKVWithSz_attnQCmdVec_payload_last_2;
  assign attnQKVWithSz_attnQCmdVec_fire = (attnQKVWithSz_attnQCmdVec_valid && attnQKVWithSz_attnQCmdVec_ready);
  assign t_attnQKVWithSz_attnKCmdVec_payload_last_3 = (t_attnQKVWithSz_attnKCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnKCmdVec_payload_last_1 = t_attnQKVWithSz_attnKCmdVec_payload_last;
    if(attnQKVWithSz_attnKCmdVec_fire) begin
      t_attnQKVWithSz_attnKCmdVec_payload_last_1 = (t_attnQKVWithSz_attnKCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnKCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnKCmdVec_payload_fragment;
    if(attnQKVWithSz_attnKCmdVec_fire) begin
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnKCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnKCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnKCmdVec_payload_fragment_1 = 32'h00044000;
      end
    end
  end

  assign attnQKVWithSz_attnKCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnKCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnKCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnKCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnKCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnKCmdVec_payload_last = t_attnQKVWithSz_attnKCmdVec_payload_last_2;
  assign attnQKVWithSz_attnKCmdVec_fire = (attnQKVWithSz_attnKCmdVec_valid && attnQKVWithSz_attnKCmdVec_ready);
  assign t_attnQKVWithSz_attnVCmdVec_payload_last_3 = (t_attnQKVWithSz_attnVCmdVec_payload_last_1 == 6'h21);
  always @(*) begin
    t_attnQKVWithSz_attnVCmdVec_payload_last_1 = t_attnQKVWithSz_attnVCmdVec_payload_last;
    if(attnQKVWithSz_attnVCmdVec_fire) begin
      t_attnQKVWithSz_attnVCmdVec_payload_last_1 = (t_attnQKVWithSz_attnVCmdVec_payload_last + 6'h01);
      if(t_attnQKVWithSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnVCmdVec_payload_last_1 = 6'h0;
      end
    end
  end

  always @(*) begin
    t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = t_attnQKVWithSz_attnVCmdVec_payload_fragment;
    if(attnQKVWithSz_attnVCmdVec_fire) begin
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = (t_attnQKVWithSz_attnVCmdVec_payload_fragment + 32'h00002000);
      if(t_attnQKVWithSz_attnVCmdVec_payload_last_2) begin
        t_attnQKVWithSz_attnVCmdVec_payload_fragment_1 = 32'h00088000;
      end
    end
  end

  assign attnQKVWithSz_attnVCmdVec_valid = 1'b1;
  assign attnQKVWithSz_attnVCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_attnQKVWithSz_attnVCmdVec_payload_fragment_3},1'b0},t_attnQKVWithSz_attnVCmdVec_payload_last_2},6'h0},1'b1},t_attnQKVWithSz_attnVCmdVec_payload_fragment_2};
  assign attnQKVWithSz_attnVCmdVec_payload_last = t_attnQKVWithSz_attnVCmdVec_payload_last_2;
  assign attnQKVWithSz_attnVCmdVec_fire = (attnQKVWithSz_attnVCmdVec_valid && attnQKVWithSz_attnVCmdVec_ready);
  assign attnQKVWithSz_attnKszCmd_valid = 1'b1;
  assign attnQKVWithSz_attnKszCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnKszCmd_payload_fragment = {{{{{{{4'b0000,4'b0010},t_attnQKVWithSz_attnKszCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnKszCmd_payload_fragment_1};
  assign attnQKVWithSz_attnVszCmd_valid = 1'b1;
  assign attnQKVWithSz_attnVszCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnVszCmd_payload_fragment = {{{{{{{4'b0000,4'b0010},t_attnQKVWithSz_attnVszCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnVszCmd_payload_fragment_1};
  assign attnQKVWithSz_attnKCacheCmd_valid = 1'b1;
  assign attnQKVWithSz_attnKCacheCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnKCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVWithSz_attnKCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnKCacheCmd_payload_fragment_1};
  assign attnQKVWithSz_attnVCacheCmd_valid = 1'b1;
  assign attnQKVWithSz_attnVCacheCmd_payload_last = 1'b1;
  assign attnQKVWithSz_attnVCacheCmd_payload_fragment = {{{{{{{4'b0000,4'b0001},t_attnQKVWithSz_attnVCacheCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_attnQKVWithSz_attnVCacheCmd_payload_fragment_1};
  assign attnQKVWithSz_attnQCmdVec_ready = attnQKVWithSz_mux_io_inputs_0_ready;
  assign attnQKVWithSz_attnKCmdVec_ready = attnQKVWithSz_mux_io_inputs_1_ready;
  assign attnQKVWithSz_attnKszCmd_ready = attnQKVWithSz_mux_io_inputs_2_ready;
  assign attnQKVWithSz_attnKCacheCmd_ready = attnQKVWithSz_mux_io_inputs_3_ready;
  assign attnQKVWithSz_attnVCmdVec_ready = attnQKVWithSz_mux_io_inputs_4_ready;
  assign attnQKVWithSz_attnVszCmd_ready = attnQKVWithSz_mux_io_inputs_5_ready;
  assign attnQKVWithSz_attnVCacheCmd_ready = attnQKVWithSz_mux_io_inputs_6_ready;
  assign attnQKVWithSz_muxOutFire = (attnQKVWithSz_mux_io_output_valid && attnQKVWithSz_cmd_ready);
  assign attnQKVWithSz_muxOutIsFirst = (attnQKVWithSz_mux_io_output_valid && cmdGen_attnQKVWithSz_mux_io_output_payload_first);
  assign attnQKVWithSz_selOvf = (attnQKVWithSz_sel == 3'b110);
  assign attnQKVWithSz_tagVec_0 = 6'h04;
  assign attnQKVWithSz_tagVec_1 = 6'h05;
  assign attnQKVWithSz_tagVec_2 = 6'h06;
  assign attnQKVWithSz_tagVec_3 = 6'h06;
  assign attnQKVWithSz_tagVec_4 = 6'h07;
  assign attnQKVWithSz_tagVec_5 = 6'h08;
  assign attnQKVWithSz_tagVec_6 = 6'h08;
  assign attnQKVWithSz_tagFire = (attnQKVWithSz_muxOutFire && attnQKVWithSz_muxOutIsFirst);
  assign attnQKVWithSz_tag_valid = attnQKVWithSz_tagFire;
  assign attnQKVWithSz_tag_payload = t_attnQKVWithSz_tag_payload;
  assign attnQKVWithSz_cmd_valid = attnQKVWithSz_mux_io_output_valid;
  assign attnQKVWithSz_cmd_payload_fragment = attnQKVWithSz_mux_io_output_payload_fragment;
  assign attnQKVWithSz_cmd_payload_last = (attnQKVWithSz_mux_io_output_payload_last && attnQKVWithSz_selOvf);
  assign mlpWithPredict_cmd_valid = 1'b0;
  assign t_mlpWithPredict_cmd_payload_last = 73'h0;
  assign mlpWithPredict_cmd_payload_last = t_mlpWithPredict_cmd_payload_last[0];
  assign mlpWithPredict_cmd_payload_fragment = t_mlpWithPredict_cmd_payload_last[72 : 1];
  assign mlpWithPredict_tag_valid = 1'b0;
  assign mlpWithPredict_tag_payload = 6'h0;
  assign mlpDense_mlpLnCmd_valid = 1'b1;
  assign mlpDense_mlpLnCmd_payload_last = 1'b1;
  assign mlpDense_mlpLnCmd_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_mlpLnCmd_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_mlpDense_mlpLnCmd_payload_fragment_1};
  assign t_mlpDense_attnOCmdVec_payload_last_3 = (t_mlpDense_attnOCmdVec_payload_last_1 == 10'h213);
  always @(*) begin
    t_mlpDense_attnOCmdVec_payload_last_1 = t_mlpDense_attnOCmdVec_payload_last;
    if(mlpDense_attnOCmdVec_fire) begin
      t_mlpDense_attnOCmdVec_payload_last_1 = (t_mlpDense_attnOCmdVec_payload_last + 10'h001);
      if(t_mlpDense_attnOCmdVec_payload_last_2) begin
        t_mlpDense_attnOCmdVec_payload_last_1 = 10'h0;
      end
    end
  end

  always @(*) begin
    t_mlpDense_attnOCmdVec_payload_fragment_1 = t_mlpDense_attnOCmdVec_payload_fragment;
    if(mlpDense_attnOCmdVec_fire) begin
      t_mlpDense_attnOCmdVec_payload_fragment_1 = (t_mlpDense_attnOCmdVec_payload_fragment + 32'h00002000);
      if(t_mlpDense_attnOCmdVec_payload_last_2) begin
        t_mlpDense_attnOCmdVec_payload_fragment_1 = 32'h010e2000;
      end
    end
  end

  assign mlpDense_attnOCmdVec_valid = 1'b1;
  assign mlpDense_attnOCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_attnOCmdVec_payload_fragment_3},1'b0},t_mlpDense_attnOCmdVec_payload_last_2},6'h0},1'b1},t_mlpDense_attnOCmdVec_payload_fragment_2};
  assign mlpDense_attnOCmdVec_payload_last = t_mlpDense_attnOCmdVec_payload_last_2;
  assign mlpDense_attnOCmdVec_fire = (mlpDense_attnOCmdVec_valid && mlpDense_attnOCmdVec_ready);
  assign t_mlpDense_mlpDenseGCmdVec_payload_last_3 = (t_mlpDense_mlpDenseGCmdVec_payload_last_1 == 11'h595);
  always @(*) begin
    t_mlpDense_mlpDenseGCmdVec_payload_last_1 = t_mlpDense_mlpDenseGCmdVec_payload_last;
    if(mlpDense_mlpDenseGCmdVec_fire) begin
      t_mlpDense_mlpDenseGCmdVec_payload_last_1 = (t_mlpDense_mlpDenseGCmdVec_payload_last + 11'h001);
      if(t_mlpDense_mlpDenseGCmdVec_payload_last_2) begin
        t_mlpDense_mlpDenseGCmdVec_payload_last_1 = 11'h0;
      end
    end
  end

  always @(*) begin
    t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = t_mlpDense_mlpDenseGCmdVec_payload_fragment;
    if(mlpDense_mlpDenseGCmdVec_fire) begin
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = (t_mlpDense_mlpDenseGCmdVec_payload_fragment + 32'h00002000);
      if(t_mlpDense_mlpDenseGCmdVec_payload_last_2) begin
        t_mlpDense_mlpDenseGCmdVec_payload_fragment_1 = 32'h0150c000;
      end
    end
  end

  assign mlpDense_mlpDenseGCmdVec_valid = 1'b1;
  assign mlpDense_mlpDenseGCmdVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_mlpDense_mlpDenseGCmdVec_payload_fragment_3},1'b0},t_mlpDense_mlpDenseGCmdVec_payload_last_2},6'h0},1'b1},t_mlpDense_mlpDenseGCmdVec_payload_fragment_2};
  assign mlpDense_mlpDenseGCmdVec_payload_last = t_mlpDense_mlpDenseGCmdVec_payload_last_2;
  assign mlpDense_mlpDenseGCmdVec_fire = (mlpDense_mlpDenseGCmdVec_valid && mlpDense_mlpDenseGCmdVec_ready);
  assign mlpDense_attnOCmdVec_ready = mlpDense_mux_io_inputs_0_ready;
  assign mlpDense_mlpLnCmd_ready = mlpDense_mux_io_inputs_1_ready;
  assign mlpDense_mlpDenseGCmdVec_ready = mlpDense_mux_io_inputs_2_ready;
  assign mlpDense_muxOutFire = (mlpDense_mux_io_output_valid && mlpDense_cmd_ready);
  assign mlpDense_muxOutIsFirst = (mlpDense_mux_io_output_valid && cmdGen_mlpDense_mux_io_output_payload_first);
  assign mlpDense_selOvf = (mlpDense_sel == 3'b100);
  assign mlpDense_tagVec_0 = 6'h0b;
  assign mlpDense_tagVec_1 = 6'h0c;
  assign mlpDense_tagVec_2 = 6'h0f;
  assign mlpDense_tagVec_3 = 6'h10;
  assign mlpDense_tagVec_4 = 6'h11;
  assign mlpDense_tagFire = (mlpDense_muxOutFire && mlpDense_muxOutIsFirst);
  assign mlpDense_tag_valid = mlpDense_tagFire;
  assign mlpDense_tag_payload = t_mlpDense_tag_payload;
  assign mlpDense_cmd_valid = mlpDense_mux_io_output_valid;
  assign mlpDense_cmd_payload_fragment = mlpDense_mux_io_output_payload_fragment;
  assign mlpDense_cmd_payload_last = (mlpDense_mux_io_output_payload_last && mlpDense_selOvf);
  assign logits_lgDenseScale_valid = 1'b1;
  assign logits_lgDenseScale_payload_last = 1'b1;
  assign logits_lgDenseScale_payload_fragment = {{{{{{{4'b0000,4'b0000},t_logits_lgDenseScale_payload_fragment},1'b0},1'b1},6'h0},1'b1},t_logits_lgDenseScale_payload_fragment_2};
  assign t_logits_lgDenseHeadVec_payload_last_3 = (t_logits_lgDenseHeadVec_payload_last_1 == 13'h103c);
  always @(*) begin
    t_logits_lgDenseHeadVec_payload_last_1 = t_logits_lgDenseHeadVec_payload_last;
    if(logits_lgDenseHeadVec_fire) begin
      t_logits_lgDenseHeadVec_payload_last_1 = (t_logits_lgDenseHeadVec_payload_last + 13'h0001);
      if(t_logits_lgDenseHeadVec_payload_last_2) begin
        t_logits_lgDenseHeadVec_payload_last_1 = 13'h0;
      end
    end
  end

  always @(*) begin
    t_logits_lgDenseHeadVec_payload_fragment_1 = t_logits_lgDenseHeadVec_payload_fragment;
    if(logits_lgDenseHeadVec_fire) begin
      t_logits_lgDenseHeadVec_payload_fragment_1 = (t_logits_lgDenseHeadVec_payload_fragment + 32'h00002000);
      if(t_logits_lgDenseHeadVec_payload_last_2) begin
        t_logits_lgDenseHeadVec_payload_fragment_1 = 32'h75f02000;
      end
    end
  end

  assign logits_lgDenseHeadVec_valid = 1'b1;
  assign logits_lgDenseHeadVec_payload_fragment = {{{{{{{4'b0000,4'b0000},t_logits_lgDenseHeadVec_payload_fragment_3},1'b0},t_logits_lgDenseHeadVec_payload_last_2},6'h0},1'b1},t_logits_lgDenseHeadVec_payload_fragment_2};
  assign logits_lgDenseHeadVec_payload_last = t_logits_lgDenseHeadVec_payload_last_2;
  assign logits_lgDenseHeadVec_fire = (logits_lgDenseHeadVec_valid && logits_lgDenseHeadVec_ready);
  assign logits_lgDenseScale_ready = logits_mux_io_inputs_0_ready;
  assign logits_lgDenseHeadVec_ready = logits_mux_io_inputs_1_ready;
  assign t_io_inputs_2_payload_last = 73'h0;
  assign logits_mux_io_inputs_2_payload_last = t_io_inputs_2_payload_last[0];
  assign logits_mux_io_inputs_2_payload_fragment = t_io_inputs_2_payload_last[72 : 1];
  assign t_io_inputs_3_payload_last = 73'h0;
  assign logits_mux_io_inputs_3_payload_last = t_io_inputs_3_payload_last[0];
  assign logits_mux_io_inputs_3_payload_fragment = t_io_inputs_3_payload_last[72 : 1];
  assign logits_muxOutFire = (logits_mux_io_output_valid && logits_cmd_ready);
  assign logits_muxOutIsFirst = (logits_mux_io_output_valid && cmdGen_logits_mux_io_output_payload_first);
  assign logits_selOvf = (logits_sel == 1'b1);
  assign logits_mux_io_select = {status_enPredictor,logits_sel};
  assign logits_tagVec_0 = 6'h12;
  assign logits_tagVec_1 = 6'h13;
  assign logits_tagFire = (logits_muxOutFire && logits_muxOutIsFirst);
  assign logits_tag_valid = logits_tagFire;
  assign logits_tag_payload = t_logits_tag_payload;
  assign logits_cmd_valid = logits_mux_io_output_valid;
  assign logits_cmd_payload_fragment = logits_mux_io_output_payload_fragment;
  assign logits_cmd_payload_last = (logits_mux_io_output_payload_last && logits_selOvf);
  assign attnKV_cmd_fire = (attnKV_cmd_valid && attnKV_cmd_ready);
  assign kvDone = (attnKV_cmd_fire && attnKV_cmd_payload_last);
  assign attnQKVNoSz_cmd_fire = (attnQKVNoSz_cmd_valid && attnQKVNoSz_cmd_ready);
  assign qkvNoSzDone = (attnQKVNoSz_cmd_fire && attnQKVNoSz_cmd_payload_last);
  assign attnQKVWithSz_cmd_fire = (attnQKVWithSz_cmd_valid && attnQKVWithSz_cmd_ready);
  assign qkvDone = (attnQKVWithSz_cmd_fire && attnQKVWithSz_cmd_payload_last);
  assign mlpWithPredict_cmd_fire = (mlpWithPredict_cmd_valid && mlpWithPredict_cmd_ready);
  assign sparseMlpDone = (mlpWithPredict_cmd_fire && mlpWithPredict_cmd_payload_last);
  assign mlpDense_cmd_fire = (mlpDense_cmd_valid && mlpDense_cmd_ready);
  assign denseMlpDone = (mlpDense_cmd_fire && mlpDense_cmd_payload_last);
  assign mlpDone = (sparseMlpDone || denseMlpDone);
  assign logits_cmd_fire = (logits_cmd_valid && logits_cmd_ready);
  assign logitsDone = (logits_cmd_fire && logits_cmd_payload_last);
  assign tokenIn_ready = mm2sCmdMux_io_inputs_0_ready;
  assign attnLn_ready = mm2sCmdMux_io_inputs_1_ready;
  assign attnKV_cmd_ready = mm2sCmdMux_io_inputs_2_ready;
  assign attnQKVNoSz_cmd_ready = mm2sCmdMux_io_inputs_3_ready;
  assign attnQKVWithSz_cmd_ready = mm2sCmdMux_io_inputs_4_ready;
  assign mlpWithPredict_cmd_ready = mm2sCmdMux_io_inputs_5_ready;
  assign mlpDense_cmd_ready = mm2sCmdMux_io_inputs_6_ready;
  assign logits_cmd_ready = mm2sCmdMux_io_inputs_7_ready;
  assign tokenTag_ready = busTagMux_io_inputs_0_ready;
  assign attnLnTag_ready = busTagMux_io_inputs_1_ready;
  assign attnKV_tag_ready = busTagMux_io_inputs_2_ready;
  assign attnQKVNoSz_tag_ready = busTagMux_io_inputs_3_ready;
  assign attnQKVWithSz_tag_ready = busTagMux_io_inputs_4_ready;
  assign mlpWithPredict_tag_ready = busTagMux_io_inputs_5_ready;
  assign mlpDense_tag_ready = busTagMux_io_inputs_6_ready;
  assign logits_tag_ready = busTagMux_io_inputs_7_ready;
  assign local_bus_valid = io_mm2s_valid;
  assign io_mm2s_ready = local_bus_ready;
  assign local_bus_payload_data = io_mm2s_payload_data;
  assign local_bus_payload_dest = tagFifo_io_pop_payload[5 : 0];
  assign local_bus_payload_last = io_mm2s_payload_last;
  assign io_mm2s_fire = (io_mm2s_valid && io_mm2s_ready);
  assign tagFifo_io_pop_ready = (io_mm2s_fire && io_mm2s_payload_last);
  assign tokenTag_fire = (tokenTag_valid && tokenTag_ready);
  assign io_s2mm_valid = local_kvBus_valid;
  assign local_kvBus_ready = io_s2mm_ready;
  assign io_s2mm_payload_data = local_kvBus_payload_data;
  assign io_s2mm_payload_last = local_kvBus_payload_last;
  assign io_s2mm_payload_keep = 64'hffffffffffffffff;
  assign mm2sCmd_valid = mm2sCmdMux_io_output_valid;
  assign mm2sCmd_payload = mm2sCmdMux_io_output_payload_fragment;
  assign mm2sCmd_ready = mm2sCmd_rValidN;
  assign mm2sCmd_s2mPipe_valid = (mm2sCmd_valid || (! mm2sCmd_rValidN));
  assign mm2sCmd_s2mPipe_payload = (mm2sCmd_rValidN ? mm2sCmd_payload : mm2sCmd_rData);
  always @(*) begin
    mm2sCmd_s2mPipe_ready = mm2sCmd_s2mPipe_m2sPipe_ready;
    if((! mm2sCmd_s2mPipe_m2sPipe_valid)) begin
      mm2sCmd_s2mPipe_ready = 1'b1;
    end
  end

  assign mm2sCmd_s2mPipe_m2sPipe_valid = mm2sCmd_s2mPipe_rValid;
  assign mm2sCmd_s2mPipe_m2sPipe_payload = mm2sCmd_s2mPipe_rData;
  assign io_mm2sCmd_valid = mm2sCmd_s2mPipe_m2sPipe_valid;
  assign mm2sCmd_s2mPipe_m2sPipe_ready = io_mm2sCmd_ready;
  assign io_mm2sCmd_payload = mm2sCmd_s2mPipe_m2sPipe_payload;
  assign enIncHead = ((kvDone || qkvNoSzDone) || qkvDone);
  always @(*) begin
    enIncLayer = mlpDone;
    if((prefill && layerCntOvf)) begin
      enIncLayer = (kvDone && headCntOvf);
    end
  end

  assign enTokenCnt = (enIncLayer && layerCntOvf);
  always @(*) begin
    selectNext = select_1;
    if(((select_1 == 3'b000) && tokenIn_fire)) begin
      selectNext = 3'b001;
    end
    if(((select_1 == 3'b001) && attnLn_fire)) begin
      if((firstToken || (prefill && layerCntOvf))) begin
        selectNext = 3'b010;
      end else begin
        if(noSzFromMem) begin
          selectNext = 3'b011;
        end else begin
          selectNext = 3'b100;
        end
      end
    end
    if((((select_1 == 3'b010) && kvDone) && headCntOvf)) begin
      if(layerCntOvf) begin
        selectNext = 3'b000;
      end else begin
        if(status_enPredictor) begin
          selectNext = 3'b101;
        end else begin
          selectNext = 3'b110;
        end
      end
    end
    if((((select_1 == 3'b011) && qkvNoSzDone) && headCntOvf)) begin
      if(status_enPredictor) begin
        selectNext = 3'b101;
      end else begin
        selectNext = 3'b110;
      end
    end
    if((((select_1 == 3'b100) && qkvDone) && headCntOvf)) begin
      if(status_enPredictor) begin
        selectNext = 3'b101;
      end else begin
        selectNext = 3'b110;
      end
    end
    if(((select_1 == 3'b101) && sparseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b111;
      end else begin
        selectNext = 3'b001;
      end
    end
    if(((select_1 == 3'b110) && denseMlpDone)) begin
      if(layerCntOvf) begin
        selectNext = 3'b111;
      end else begin
        selectNext = 3'b001;
      end
    end
    if(((select_1 == 3'b111) && logitsDone)) begin
      selectNext = 3'b000;
    end
  end

  assign io_tokenIndex_fire = (io_tokenIndex_valid && io_tokenIndex_ready);
  always @(*) begin
    s2mm_tokenEnFifo_io_pop_ready = 1'b0;
    if(s2mm_enIncLayer) begin
      if(s2mm_layerCntOvf) begin
        s2mm_tokenEnFifo_io_pop_ready = 1'b1;
      end
    end
  end

  assign s2mm_mallocPerHead = 21'h10e000;
  assign s2mm_headCntAbout2Ovf = (s2mm_headCnt == 4'b1110);
  always @(*) begin
    s2mm_headBaseNext = s2mm_headBase;
    if(s2mm_enIncHead) begin
      s2mm_headBaseNext = (s2mm_headBase + t_s2mm_headBaseNext);
      if(s2mm_headCntOvf) begin
        s2mm_headBaseNext = 32'h00002000;
      end
    end
  end

  assign s2mm_mallocPerLayer = (status_enPredictor ? 26'h3b29000 : 26'h3710000);
  assign s2mm_layerCntAbout2Ovf = (s2mm_layerCnt == 5'h1e);
  always @(*) begin
    s2mm_layerBaseNext = s2mm_layerBase;
    if(s2mm_enIncLayer) begin
      s2mm_layerBaseNext = (s2mm_layerBase + t_s2mm_layerBaseNext);
      if(s2mm_layerCntOvf) begin
        s2mm_layerBaseNext = 32'h07d36000;
      end
    end
  end

  assign s2mm_attnHeadBaseNext = (s2mm_layerBaseNext + s2mm_headBaseNext);
  assign s2mm_s2mmTokenCntLow = s2mm_s2mmTokenCnt[3 : 0];
  assign s2mm_s2mmTokenHigh = s2mm_s2mmTokenCnt[9 : 4];
  assign s2mm_s2mSzToMem = (&s2mm_s2mmTokenCntLow);
  assign s2mm_kCacheCmd = {{{{{{{4'b0000,4'b0001},t_s2mm_kCacheCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_kCacheCmd_4};
  assign s2mm_vCacheCmd = {{{{{{{4'b0000,4'b0001},t_s2mm_vCacheCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_vCacheCmd_4};
  assign s2mm_kSzCmd = {{{{{{{4'b0000,4'b0010},t_s2mm_kSzCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_kSzCmd_4};
  assign s2mm_vSzCmd = {{{{{{{4'b0000,4'b0010},t_s2mm_vSzCmd},1'b0},1'b1},6'h0},1'b1},t_s2mm_vSzCmd_4};
  assign s2mm_s2mmCmd_payload = t_s2mm_s2mmCmd_payload;
  assign s2mm_s2mmCmd_valid = s2mm_tokenEnFifo_io_pop_valid;
  assign s2mm_s2mmCmd_fire = (s2mm_s2mmCmd_valid && s2mm_s2mmCmd_ready);
  assign s2mm_enIncHead = (s2mm_s2mmCmd_fire && (&s2mm_cnt));
  assign s2mm_enIncLayer = (s2mm_enIncHead && s2mm_headCntOvf);
  assign s2mm_toMemSel = s2mm_cnt;
  always @(*) begin
    s2mm_s2mmCmdThrow_valid = s2mm_s2mmCmd_valid;
    if(t_when) begin
      s2mm_s2mmCmdThrow_valid = 1'b0;
    end
  end

  always @(*) begin
    s2mm_s2mmCmd_ready = s2mm_s2mmCmdThrow_ready;
    if(t_when) begin
      s2mm_s2mmCmd_ready = 1'b1;
    end
  end

  assign s2mm_s2mmCmdThrow_payload = s2mm_s2mmCmd_payload;
  assign s2mm_s2mmCmdThrow_ready = s2mm_cmdFifo_io_push_ready;
  assign io_s2mmCmd_valid = s2mm_cmdFifo_io_pop_valid;
  assign io_s2mmCmd_payload = s2mm_cmdFifo_io_pop_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      token <= 10'h0;
      headBase <= 32'h00002000;
      headCnt <= 4'b0000;
      headCntOvf <= 1'b0;
      layerBase <= 32'h07d36000;
      layerCnt <= 5'h0;
      layerCntOvf <= 1'b0;
      attnHeadBase <= 32'h0;
      indexCmdGen_denseLastCnt <= 1'b0;
      indexCmdGen_selBaseAddr <= 26'h0;
      indexCmdGen_selLen <= 11'h0;
      local_index_valid_regNext <= 1'b0;
      local_index_payload_last_regNext <= 1'b0;
      t_indexCmdGen_denseU_payload_last <= 11'h0;
      t_indexCmdGen_denseU_payload_last_2 <= 1'b0;
      t_indexCmdGen_denseU_payload_fragment <= 32'h02038000;
      t_indexCmdGen_denseU_payload_fragment_2 <= 23'h002000;
      t_indexCmdGen_denseD_payload_last <= 11'h0;
      t_indexCmdGen_denseD_payload_last_2 <= 1'b0;
      t_indexCmdGen_denseD_payload_fragment <= 32'h02ba4000;
      t_indexCmdGen_denseD_payload_fragment_2 <= 23'h002000;
      indexCmdGen_enDenseUD <= 1'b0;
      indexCmdGen_indexFlow_payload_first <= 1'b1;
      t_attnKV_attnKCmdVec_payload_last <= 6'h0;
      t_attnKV_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnKV_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnKV_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnKV_attnVCmdVec_payload_last <= 6'h0;
      t_attnKV_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnKV_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnKV_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnKV_sel <= 1'b0;
      cmdGen_attnKV_mux_io_output_payload_first <= 1'b1;
      attnKV_tagSel <= 1'b0;
      t_attnQKVNoSz_attnQCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnQCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment <= 32'h0;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVNoSz_attnKCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVNoSz_attnVCmdVec_payload_last <= 6'h0;
      t_attnQKVNoSz_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnQKVNoSz_sel <= 3'b000;
      cmdGen_attnQKVNoSz_mux_io_output_payload_first <= 1'b1;
      attnQKVNoSz_tagSel <= 3'b000;
      t_attnQKVWithSz_attnQCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnQCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment <= 32'h0;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVWithSz_attnKCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnKCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment <= 32'h00044000;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 <= 23'h002000;
      t_attnQKVWithSz_attnVCmdVec_payload_last <= 6'h0;
      t_attnQKVWithSz_attnVCmdVec_payload_last_2 <= 1'b0;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment <= 32'h00088000;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 <= 23'h002000;
      attnQKVWithSz_sel <= 3'b000;
      cmdGen_attnQKVWithSz_mux_io_output_payload_first <= 1'b1;
      attnQKVWithSz_tagSel <= 3'b000;
      t_mlpDense_attnOCmdVec_payload_last <= 10'h0;
      t_mlpDense_attnOCmdVec_payload_last_2 <= 1'b0;
      t_mlpDense_attnOCmdVec_payload_fragment <= 32'h010e2000;
      t_mlpDense_attnOCmdVec_payload_fragment_2 <= 23'h002000;
      t_mlpDense_mlpDenseGCmdVec_payload_last <= 11'h0;
      t_mlpDense_mlpDenseGCmdVec_payload_last_2 <= 1'b0;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment <= 32'h0150c000;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 <= 23'h002000;
      mlpDense_sel <= 3'b000;
      cmdGen_mlpDense_mux_io_output_payload_first <= 1'b1;
      mlpDense_muxSel <= 2'b00;
      mlpDense_tagSel <= 3'b000;
      t_logits_lgDenseHeadVec_payload_last <= 13'h0;
      t_logits_lgDenseHeadVec_payload_last_2 <= 1'b0;
      t_logits_lgDenseHeadVec_payload_fragment <= 32'h75f02000;
      t_logits_lgDenseHeadVec_payload_fragment_2 <= 23'h002000;
      logits_sel <= 1'b0;
      cmdGen_logits_mux_io_output_payload_first <= 1'b1;
      logits_tagSel <= 1'b0;
      prefill <= 1'b1;
      mm2sCmd_rValidN <= 1'b1;
      mm2sCmd_s2mPipe_rValid <= 1'b0;
      select_1 <= 3'b000;
      s2mm_headBase <= 32'h00002000;
      s2mm_headCnt <= 4'b0000;
      s2mm_headCntOvf <= 1'b0;
      s2mm_layerBase <= 32'h07d36000;
      s2mm_layerCnt <= 5'h0;
      s2mm_layerCntOvf <= 1'b0;
      s2mm_s2mmTokenCnt <= 10'h0;
      s2mm_attnHeadBase <= 32'h0;
      s2mm_cnt <= 2'b00;
    end else begin
      headBase <= headBaseNext;
      if(enIncHead) begin
        headCnt <= (headCnt + 4'b0001);
        if(headCntAbout2Ovf) begin
          headCntOvf <= 1'b1;
        end
        if(headCntOvf) begin
          headCnt <= 4'b0000;
          headCntOvf <= 1'b0;
        end
      end
      layerBase <= layerBaseNext;
      if(enIncLayer) begin
        layerCnt <= (layerCnt + 5'h01);
        if(layerCntAbout2Ovf) begin
          layerCntOvf <= 1'b1;
        end
        if(layerCntOvf) begin
          layerCnt <= 5'h0;
          layerCntOvf <= 1'b0;
        end
      end
      attnHeadBase <= attnHeadBaseNext;
      if(((local_index_valid && local_index_payload_last) && (! status_enPredictor))) begin
        indexCmdGen_denseLastCnt <= (indexCmdGen_denseLastCnt + 1'b1);
        if((indexCmdGen_denseLastCnt == 1'b1)) begin
          indexCmdGen_denseLastCnt <= 1'b0;
        end
      end
      indexCmdGen_selBaseAddr <= indexCmdGen_selDenseBaseAddr;
      indexCmdGen_selLen <= indexCmdGen_selDenseLen;
      local_index_valid_regNext <= local_index_valid;
      local_index_payload_last_regNext <= local_index_payload_last;
      t_indexCmdGen_denseU_payload_last <= t_indexCmdGen_denseU_payload_last_1;
      t_indexCmdGen_denseU_payload_last_2 <= t_indexCmdGen_denseU_payload_last_3;
      t_indexCmdGen_denseU_payload_fragment <= t_indexCmdGen_denseU_payload_fragment_1;
      t_indexCmdGen_denseU_payload_fragment_2 <= {9'd0, t_t_indexCmdGen_denseU_payload_fragment_2};
      t_indexCmdGen_denseD_payload_last <= t_indexCmdGen_denseD_payload_last_1;
      t_indexCmdGen_denseD_payload_last_2 <= t_indexCmdGen_denseD_payload_last_3;
      t_indexCmdGen_denseD_payload_fragment <= t_indexCmdGen_denseD_payload_fragment_1;
      t_indexCmdGen_denseD_payload_fragment_2 <= {9'd0, t_t_indexCmdGen_denseD_payload_fragment_2};
      if(indexCmdGen_indexFlow_valid) begin
        indexCmdGen_indexFlow_payload_first <= indexCmdGen_indexFlow_payload_last;
      end
      if((indexCmdGen_indexFlow_valid && indexCmdGen_indexFlow_payload_first)) begin
        indexCmdGen_enDenseUD <= 1'b1;
      end
      if((indexCmdGen_indexMux_io_output_valid && indexCmdGen_indexMux_io_output_payload_last)) begin
        indexCmdGen_enDenseUD <= 1'b0;
      end
      t_attnKV_attnKCmdVec_payload_last <= t_attnKV_attnKCmdVec_payload_last_1;
      t_attnKV_attnKCmdVec_payload_last_2 <= t_attnKV_attnKCmdVec_payload_last_3;
      t_attnKV_attnKCmdVec_payload_fragment <= t_attnKV_attnKCmdVec_payload_fragment_1;
      t_attnKV_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnKV_attnKCmdVec_payload_fragment_2};
      t_attnKV_attnVCmdVec_payload_last <= t_attnKV_attnVCmdVec_payload_last_1;
      t_attnKV_attnVCmdVec_payload_last_2 <= t_attnKV_attnVCmdVec_payload_last_3;
      t_attnKV_attnVCmdVec_payload_fragment <= t_attnKV_attnVCmdVec_payload_fragment_1;
      t_attnKV_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnKV_attnVCmdVec_payload_fragment_2};
      if(attnKV_muxOutFire) begin
        cmdGen_attnKV_mux_io_output_payload_first <= attnKV_mux_io_output_payload_last;
      end
      if((attnKV_muxOutFire && attnKV_mux_io_output_payload_last)) begin
        attnKV_sel <= (attnKV_sel + 1'b1);
        if(attnKV_selOvf) begin
          attnKV_sel <= 1'b0;
        end
      end
      if((attnKV_muxOutFire && attnKV_muxOutIsFirst)) begin
        attnKV_tagSel <= (attnKV_tagSel + 1'b1);
        if((attnKV_tagSel == 1'b1)) begin
          attnKV_tagSel <= 1'b0;
        end
      end
      t_attnQKVNoSz_attnQCmdVec_payload_last <= t_attnQKVNoSz_attnQCmdVec_payload_last_1;
      t_attnQKVNoSz_attnQCmdVec_payload_last_2 <= t_attnQKVNoSz_attnQCmdVec_payload_last_3;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment <= t_attnQKVNoSz_attnQCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnQCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnQCmdVec_payload_fragment_2};
      t_attnQKVNoSz_attnKCmdVec_payload_last <= t_attnQKVNoSz_attnKCmdVec_payload_last_1;
      t_attnQKVNoSz_attnKCmdVec_payload_last_2 <= t_attnQKVNoSz_attnKCmdVec_payload_last_3;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment <= t_attnQKVNoSz_attnKCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnKCmdVec_payload_fragment_2};
      t_attnQKVNoSz_attnVCmdVec_payload_last <= t_attnQKVNoSz_attnVCmdVec_payload_last_1;
      t_attnQKVNoSz_attnVCmdVec_payload_last_2 <= t_attnQKVNoSz_attnVCmdVec_payload_last_3;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment <= t_attnQKVNoSz_attnVCmdVec_payload_fragment_1;
      t_attnQKVNoSz_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVNoSz_attnVCmdVec_payload_fragment_2};
      if(attnQKVNoSz_muxOutFire) begin
        cmdGen_attnQKVNoSz_mux_io_output_payload_first <= attnQKVNoSz_mux_io_output_payload_last;
      end
      if((attnQKVNoSz_muxOutFire && attnQKVNoSz_mux_io_output_payload_last)) begin
        attnQKVNoSz_sel <= (attnQKVNoSz_sel + 3'b001);
        if(attnQKVNoSz_selOvf) begin
          attnQKVNoSz_sel <= 3'b000;
        end
      end
      if((attnQKVNoSz_muxOutFire && attnQKVNoSz_muxOutIsFirst)) begin
        attnQKVNoSz_tagSel <= (attnQKVNoSz_tagSel + 3'b001);
        if((attnQKVNoSz_tagSel == 3'b100)) begin
          attnQKVNoSz_tagSel <= 3'b000;
        end
      end
      t_attnQKVWithSz_attnQCmdVec_payload_last <= t_attnQKVWithSz_attnQCmdVec_payload_last_1;
      t_attnQKVWithSz_attnQCmdVec_payload_last_2 <= t_attnQKVWithSz_attnQCmdVec_payload_last_3;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment <= t_attnQKVWithSz_attnQCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnQCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnQCmdVec_payload_fragment_2};
      t_attnQKVWithSz_attnKCmdVec_payload_last <= t_attnQKVWithSz_attnKCmdVec_payload_last_1;
      t_attnQKVWithSz_attnKCmdVec_payload_last_2 <= t_attnQKVWithSz_attnKCmdVec_payload_last_3;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment <= t_attnQKVWithSz_attnKCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnKCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnKCmdVec_payload_fragment_2};
      t_attnQKVWithSz_attnVCmdVec_payload_last <= t_attnQKVWithSz_attnVCmdVec_payload_last_1;
      t_attnQKVWithSz_attnVCmdVec_payload_last_2 <= t_attnQKVWithSz_attnVCmdVec_payload_last_3;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment <= t_attnQKVWithSz_attnVCmdVec_payload_fragment_1;
      t_attnQKVWithSz_attnVCmdVec_payload_fragment_2 <= {9'd0, t_t_attnQKVWithSz_attnVCmdVec_payload_fragment_2};
      if(attnQKVWithSz_muxOutFire) begin
        cmdGen_attnQKVWithSz_mux_io_output_payload_first <= attnQKVWithSz_mux_io_output_payload_last;
      end
      if((attnQKVWithSz_muxOutFire && attnQKVWithSz_mux_io_output_payload_last)) begin
        attnQKVWithSz_sel <= (attnQKVWithSz_sel + 3'b001);
        if(attnQKVWithSz_selOvf) begin
          attnQKVWithSz_sel <= 3'b000;
        end
      end
      if((attnQKVWithSz_muxOutFire && attnQKVWithSz_muxOutIsFirst)) begin
        attnQKVWithSz_tagSel <= (attnQKVWithSz_tagSel + 3'b001);
        if((attnQKVWithSz_tagSel == 3'b110)) begin
          attnQKVWithSz_tagSel <= 3'b000;
        end
      end
      t_mlpDense_attnOCmdVec_payload_last <= t_mlpDense_attnOCmdVec_payload_last_1;
      t_mlpDense_attnOCmdVec_payload_last_2 <= t_mlpDense_attnOCmdVec_payload_last_3;
      t_mlpDense_attnOCmdVec_payload_fragment <= t_mlpDense_attnOCmdVec_payload_fragment_1;
      t_mlpDense_attnOCmdVec_payload_fragment_2 <= {9'd0, t_t_mlpDense_attnOCmdVec_payload_fragment_2};
      t_mlpDense_mlpDenseGCmdVec_payload_last <= t_mlpDense_mlpDenseGCmdVec_payload_last_1;
      t_mlpDense_mlpDenseGCmdVec_payload_last_2 <= t_mlpDense_mlpDenseGCmdVec_payload_last_3;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment <= t_mlpDense_mlpDenseGCmdVec_payload_fragment_1;
      t_mlpDense_mlpDenseGCmdVec_payload_fragment_2 <= {9'd0, t_t_mlpDense_mlpDenseGCmdVec_payload_fragment_2};
      if(mlpDense_muxOutFire) begin
        cmdGen_mlpDense_mux_io_output_payload_first <= mlpDense_mux_io_output_payload_last;
      end
      if((mlpDense_muxOutFire && mlpDense_mux_io_output_payload_last)) begin
        if((mlpDense_muxSel != 2'b11)) begin
          mlpDense_muxSel <= (mlpDense_muxSel + 2'b01);
        end
        mlpDense_sel <= (mlpDense_sel + 3'b001);
        if(mlpDense_selOvf) begin
          mlpDense_sel <= 3'b000;
          mlpDense_muxSel <= 2'b00;
        end
      end
      if((mlpDense_muxOutFire && mlpDense_muxOutIsFirst)) begin
        mlpDense_tagSel <= (mlpDense_tagSel + 3'b001);
        if((mlpDense_tagSel == 3'b100)) begin
          mlpDense_tagSel <= 3'b000;
        end
      end
      t_logits_lgDenseHeadVec_payload_last <= t_logits_lgDenseHeadVec_payload_last_1;
      t_logits_lgDenseHeadVec_payload_last_2 <= t_logits_lgDenseHeadVec_payload_last_3;
      t_logits_lgDenseHeadVec_payload_fragment <= t_logits_lgDenseHeadVec_payload_fragment_1;
      t_logits_lgDenseHeadVec_payload_fragment_2 <= {9'd0, t_t_logits_lgDenseHeadVec_payload_fragment_2};
      if(logits_muxOutFire) begin
        cmdGen_logits_mux_io_output_payload_first <= logits_mux_io_output_payload_last;
      end
      if((logits_muxOutFire && logits_mux_io_output_payload_last)) begin
        logits_sel <= (logits_sel + 1'b1);
        if((logits_sel == 1'b1)) begin
          logits_sel <= 1'b0;
        end
      end
      if((logits_muxOutFire && logits_muxOutIsFirst)) begin
        logits_tagSel <= (logits_tagSel + 1'b1);
        if((logits_tagSel == 1'b1)) begin
          logits_tagSel <= 1'b0;
        end
      end
      if((tokenTag_fire && (tokenTag_payload == 6'h01))) begin
        prefill <= 1'b0;
      end
      if(mm2sCmd_valid) begin
        mm2sCmd_rValidN <= 1'b0;
      end
      if(mm2sCmd_s2mPipe_ready) begin
        mm2sCmd_rValidN <= 1'b1;
      end
      if(mm2sCmd_s2mPipe_ready) begin
        mm2sCmd_s2mPipe_rValid <= mm2sCmd_s2mPipe_valid;
      end
      if(enTokenCnt) begin
        token <= (token + 10'h001);
      end
      select_1 <= selectNext;
      s2mm_headBase <= s2mm_headBaseNext;
      if(s2mm_enIncHead) begin
        s2mm_headCnt <= (s2mm_headCnt + 4'b0001);
        if(s2mm_headCntAbout2Ovf) begin
          s2mm_headCntOvf <= 1'b1;
        end
        if(s2mm_headCntOvf) begin
          s2mm_headCnt <= 4'b0000;
          s2mm_headCntOvf <= 1'b0;
        end
      end
      s2mm_layerBase <= s2mm_layerBaseNext;
      if(s2mm_enIncLayer) begin
        s2mm_layerCnt <= (s2mm_layerCnt + 5'h01);
        if(s2mm_layerCntAbout2Ovf) begin
          s2mm_layerCntOvf <= 1'b1;
        end
        if(s2mm_layerCntOvf) begin
          s2mm_layerCnt <= 5'h0;
          s2mm_layerCntOvf <= 1'b0;
          s2mm_s2mmTokenCnt <= (s2mm_s2mmTokenCnt + 10'h001);
        end
      end
      s2mm_attnHeadBase <= s2mm_attnHeadBaseNext;
      if(s2mm_s2mmCmd_fire) begin
        s2mm_cnt <= (s2mm_cnt + 2'b01);
      end
    end
  end

  always @(posedge clk_0_clk) begin
    indexCmdGen_selTag <= indexCmdGen_selDenseTag;
    t_indexCmdGen_indexFlow_payload_fragment <= local_index_payload_tdata;
    if(mm2sCmd_ready) begin
      mm2sCmd_rData <= mm2sCmd_payload;
    end
    if(mm2sCmd_s2mPipe_ready) begin
      mm2sCmd_s2mPipe_rData <= mm2sCmd_s2mPipe_payload;
    end
  end


endmodule

//StreamFifo_4 replaced by StreamFifo_69

//StreamFifo_3 replaced by StreamFifo_69

//StreamFifo_5 replaced by StreamFifo_69

//StreamMux replaced by StreamMux_19

//StreamMux_1 replaced by StreamMux_20

module StreamFifo_8 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [511:0]  io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [511:0]  io_pop_payload_fragment,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [512:0]  logic_ram_spinal_port1;
  wire       [512:0]  t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [511:0]  logic_push_onRam_write_payload_data_fragment;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [511:0]  logic_pop_sync_readPort_rsp_fragment;
  wire       [512:0]  t_logic_pop_sync_readPort_rsp_last;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload_fragment;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [512:0] logic_ram [0:31];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_fragment,logic_push_onRam_write_payload_data_last};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_fragment = io_push_payload_fragment;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_fragment = t_logic_pop_sync_readPort_rsp_last[512 : 1];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_fragment = logic_pop_sync_readPort_rsp_fragment;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_fragment = logic_pop_sync_readArbitation_translated_payload_fragment;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module BottleNeckFifo_1 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [63:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [2:0]    t_t_adaptIn_payload_1;
  wire       [0:0]    t_t_adaptIn_payload_1_1;
  reg        [63:0]   t_adaptIn_payload_4;
  wire       [2:0]    t_t_adaptOut_valid_1;
  wire       [0:0]    t_t_adaptOut_valid_1_1;
  wire       [383:0]  t_t_adaptOut_payload;
  wire                pushIn_valid;
  reg                 pushIn_ready;
  wire       [511:0]  pushIn_payload;
  wire                pushInPipe_valid;
  wire                pushInPipe_ready;
  wire       [511:0]  pushInPipe_payload;
  reg                 pushIn_rValid;
  reg        [511:0]  pushIn_rData;
  wire                adaptIn_valid;
  reg                 adaptIn_ready;
  wire       [63:0]   adaptIn_payload;
  wire                adaptIn_fire;
  reg                 t_adaptIn_payload;
  reg        [2:0]    t_adaptIn_payload_1;
  reg        [2:0]    t_adaptIn_payload_2;
  wire                t_pushInPipe_ready;
  wire       [511:0]  t_adaptIn_payload_3;
  wire                adaptOut_valid;
  wire                adaptOut_ready;
  wire       [511:0]  adaptOut_payload;
  wire                v_fifo_fifo_io_pop_fire;
  reg                 t_adaptOut_valid;
  reg        [2:0]    t_adaptOut_valid_1;
  reg        [2:0]    t_adaptOut_valid_2;
  wire                t_adaptOut_valid_3;
  reg        [447:0]  t_adaptOut_payload;
  wire                adaptIn_m2sPipe_valid;
  wire                adaptIn_m2sPipe_ready;
  wire       [63:0]   adaptIn_m2sPipe_payload;
  reg                 adaptIn_rValid;
  reg        [63:0]   adaptIn_rData;

  assign t_t_adaptIn_payload_1_1 = t_adaptIn_payload;
  assign t_t_adaptIn_payload_1 = {2'd0, t_t_adaptIn_payload_1_1};
  assign t_t_adaptOut_valid_1_1 = t_adaptOut_valid;
  assign t_t_adaptOut_valid_1 = {2'd0, t_t_adaptOut_valid_1_1};
  assign t_t_adaptOut_payload = (t_adaptOut_payload >>> 7'd64);
  StreamFifo_61 fifo (
    .io_push_valid   (adaptIn_m2sPipe_valid        ), //i
    .io_push_ready   (fifo_io_push_ready           ), //o
    .io_push_payload (adaptIn_m2sPipe_payload[63:0]), //i
    .io_pop_valid    (fifo_io_pop_valid            ), //o
    .io_pop_ready    (fifo_io_pop_ready            ), //i
    .io_pop_payload  (fifo_io_pop_payload[63:0]    ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]      ), //o
    .io_availability (fifo_io_availability[12:0]   ), //o
    .clk_1_clk       (clk_1_clk                    ), //i
    .clk_1_resetn    (clk_1_resetn                 )  //i
  );
  always @(*) begin
    case(t_adaptIn_payload_2)
      3'b000 : t_adaptIn_payload_4 = t_adaptIn_payload_3[63 : 0];
      3'b001 : t_adaptIn_payload_4 = t_adaptIn_payload_3[127 : 64];
      3'b010 : t_adaptIn_payload_4 = t_adaptIn_payload_3[191 : 128];
      3'b011 : t_adaptIn_payload_4 = t_adaptIn_payload_3[255 : 192];
      3'b100 : t_adaptIn_payload_4 = t_adaptIn_payload_3[319 : 256];
      3'b101 : t_adaptIn_payload_4 = t_adaptIn_payload_3[383 : 320];
      3'b110 : t_adaptIn_payload_4 = t_adaptIn_payload_3[447 : 384];
      default : t_adaptIn_payload_4 = t_adaptIn_payload_3[511 : 448];
    endcase
  end

  assign pushIn_valid = io_push_valid;
  assign pushIn_payload = io_push_payload;
  always @(*) begin
    pushIn_ready = pushInPipe_ready;
    if((! pushInPipe_valid)) begin
      pushIn_ready = 1'b1;
    end
  end

  assign pushInPipe_valid = pushIn_rValid;
  assign pushInPipe_payload = pushIn_rData;
  assign adaptIn_fire = (adaptIn_valid && adaptIn_ready);
  always @(*) begin
    t_adaptIn_payload = 1'b0;
    if(adaptIn_fire) begin
      t_adaptIn_payload = 1'b1;
    end
  end

  assign t_pushInPipe_ready = (t_adaptIn_payload_2 == 3'b111);
  always @(*) begin
    t_adaptIn_payload_1 = (t_adaptIn_payload_2 + t_t_adaptIn_payload_1);
    if(1'b0) begin
      t_adaptIn_payload_1 = 3'b000;
    end
  end

  assign adaptIn_valid = pushInPipe_valid;
  assign t_adaptIn_payload_3 = pushInPipe_payload;
  assign adaptIn_payload = t_adaptIn_payload_4;
  assign pushInPipe_ready = (adaptIn_ready && t_pushInPipe_ready);
  assign v_fifo_fifo_io_pop_fire = (fifo_io_pop_valid && fifo_io_pop_ready);
  always @(*) begin
    t_adaptOut_valid = 1'b0;
    if(v_fifo_fifo_io_pop_fire) begin
      t_adaptOut_valid = 1'b1;
    end
  end

  assign t_adaptOut_valid_3 = (t_adaptOut_valid_2 == 3'b111);
  always @(*) begin
    t_adaptOut_valid_1 = (t_adaptOut_valid_2 + t_t_adaptOut_valid_1);
    if(1'b0) begin
      t_adaptOut_valid_1 = 3'b000;
    end
  end

  assign adaptOut_valid = (fifo_io_pop_valid && t_adaptOut_valid_3);
  assign adaptOut_payload = {fifo_io_pop_payload,t_adaptOut_payload};
  assign fifo_io_pop_ready = (! ((! adaptOut_ready) && t_adaptOut_valid_3));
  always @(*) begin
    adaptIn_ready = adaptIn_m2sPipe_ready;
    if((! adaptIn_m2sPipe_valid)) begin
      adaptIn_ready = 1'b1;
    end
  end

  assign adaptIn_m2sPipe_valid = adaptIn_rValid;
  assign adaptIn_m2sPipe_payload = adaptIn_rData;
  assign adaptIn_m2sPipe_ready = fifo_io_push_ready;
  assign io_pop_valid = adaptOut_valid;
  assign adaptOut_ready = io_pop_ready;
  assign io_pop_payload = adaptOut_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      pushIn_rValid <= 1'b0;
      t_adaptIn_payload_2 <= 3'b000;
      t_adaptOut_valid_2 <= 3'b000;
      adaptIn_rValid <= 1'b0;
    end else begin
      if(pushIn_ready) begin
        pushIn_rValid <= pushIn_valid;
      end
      t_adaptIn_payload_2 <= t_adaptIn_payload_1;
      t_adaptOut_valid_2 <= t_adaptOut_valid_1;
      if(adaptIn_ready) begin
        adaptIn_rValid <= adaptIn_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(pushIn_ready) begin
      pushIn_rData <= pushIn_payload;
    end
    if(v_fifo_fifo_io_pop_fire) begin
      t_adaptOut_payload <= {fifo_io_pop_payload,t_t_adaptOut_payload};
    end
    if(adaptIn_ready) begin
      adaptIn_rData <= adaptIn_payload;
    end
  end


endmodule

//StreamFifo_7 replaced by StreamFifo_69

module BottleNeckFifo (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [63:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [2:0]    t_t_adaptIn_payload_1;
  wire       [0:0]    t_t_adaptIn_payload_1_1;
  reg        [63:0]   t_adaptIn_payload_4;
  wire       [2:0]    t_t_adaptOut_valid_1;
  wire       [0:0]    t_t_adaptOut_valid_1_1;
  wire       [383:0]  t_t_adaptOut_payload;
  wire                pushIn_valid;
  reg                 pushIn_ready;
  wire       [511:0]  pushIn_payload;
  wire                pushInPipe_valid;
  wire                pushInPipe_ready;
  wire       [511:0]  pushInPipe_payload;
  reg                 pushIn_rValid;
  reg        [511:0]  pushIn_rData;
  wire                adaptIn_valid;
  reg                 adaptIn_ready;
  wire       [63:0]   adaptIn_payload;
  wire                adaptIn_fire;
  reg                 t_adaptIn_payload;
  reg        [2:0]    t_adaptIn_payload_1;
  reg        [2:0]    t_adaptIn_payload_2;
  wire                t_pushInPipe_ready;
  wire       [511:0]  t_adaptIn_payload_3;
  wire                adaptOut_valid;
  wire                adaptOut_ready;
  wire       [511:0]  adaptOut_payload;
  wire                k_fifo_fifo_io_pop_fire;
  reg                 t_adaptOut_valid;
  reg        [2:0]    t_adaptOut_valid_1;
  reg        [2:0]    t_adaptOut_valid_2;
  wire                t_adaptOut_valid_3;
  reg        [447:0]  t_adaptOut_payload;
  wire                adaptIn_m2sPipe_valid;
  wire                adaptIn_m2sPipe_ready;
  wire       [63:0]   adaptIn_m2sPipe_payload;
  reg                 adaptIn_rValid;
  reg        [63:0]   adaptIn_rData;

  assign t_t_adaptIn_payload_1_1 = t_adaptIn_payload;
  assign t_t_adaptIn_payload_1 = {2'd0, t_t_adaptIn_payload_1_1};
  assign t_t_adaptOut_valid_1_1 = t_adaptOut_valid;
  assign t_t_adaptOut_valid_1 = {2'd0, t_t_adaptOut_valid_1_1};
  assign t_t_adaptOut_payload = (t_adaptOut_payload >>> 7'd64);
  StreamFifo_61 fifo (
    .io_push_valid   (adaptIn_m2sPipe_valid        ), //i
    .io_push_ready   (fifo_io_push_ready           ), //o
    .io_push_payload (adaptIn_m2sPipe_payload[63:0]), //i
    .io_pop_valid    (fifo_io_pop_valid            ), //o
    .io_pop_ready    (fifo_io_pop_ready            ), //i
    .io_pop_payload  (fifo_io_pop_payload[63:0]    ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]      ), //o
    .io_availability (fifo_io_availability[12:0]   ), //o
    .clk_1_clk       (clk_1_clk                    ), //i
    .clk_1_resetn    (clk_1_resetn                 )  //i
  );
  always @(*) begin
    case(t_adaptIn_payload_2)
      3'b000 : t_adaptIn_payload_4 = t_adaptIn_payload_3[63 : 0];
      3'b001 : t_adaptIn_payload_4 = t_adaptIn_payload_3[127 : 64];
      3'b010 : t_adaptIn_payload_4 = t_adaptIn_payload_3[191 : 128];
      3'b011 : t_adaptIn_payload_4 = t_adaptIn_payload_3[255 : 192];
      3'b100 : t_adaptIn_payload_4 = t_adaptIn_payload_3[319 : 256];
      3'b101 : t_adaptIn_payload_4 = t_adaptIn_payload_3[383 : 320];
      3'b110 : t_adaptIn_payload_4 = t_adaptIn_payload_3[447 : 384];
      default : t_adaptIn_payload_4 = t_adaptIn_payload_3[511 : 448];
    endcase
  end

  assign pushIn_valid = io_push_valid;
  assign pushIn_payload = io_push_payload;
  always @(*) begin
    pushIn_ready = pushInPipe_ready;
    if((! pushInPipe_valid)) begin
      pushIn_ready = 1'b1;
    end
  end

  assign pushInPipe_valid = pushIn_rValid;
  assign pushInPipe_payload = pushIn_rData;
  assign adaptIn_fire = (adaptIn_valid && adaptIn_ready);
  always @(*) begin
    t_adaptIn_payload = 1'b0;
    if(adaptIn_fire) begin
      t_adaptIn_payload = 1'b1;
    end
  end

  assign t_pushInPipe_ready = (t_adaptIn_payload_2 == 3'b111);
  always @(*) begin
    t_adaptIn_payload_1 = (t_adaptIn_payload_2 + t_t_adaptIn_payload_1);
    if(1'b0) begin
      t_adaptIn_payload_1 = 3'b000;
    end
  end

  assign adaptIn_valid = pushInPipe_valid;
  assign t_adaptIn_payload_3 = pushInPipe_payload;
  assign adaptIn_payload = t_adaptIn_payload_4;
  assign pushInPipe_ready = (adaptIn_ready && t_pushInPipe_ready);
  assign k_fifo_fifo_io_pop_fire = (fifo_io_pop_valid && fifo_io_pop_ready);
  always @(*) begin
    t_adaptOut_valid = 1'b0;
    if(k_fifo_fifo_io_pop_fire) begin
      t_adaptOut_valid = 1'b1;
    end
  end

  assign t_adaptOut_valid_3 = (t_adaptOut_valid_2 == 3'b111);
  always @(*) begin
    t_adaptOut_valid_1 = (t_adaptOut_valid_2 + t_t_adaptOut_valid_1);
    if(1'b0) begin
      t_adaptOut_valid_1 = 3'b000;
    end
  end

  assign adaptOut_valid = (fifo_io_pop_valid && t_adaptOut_valid_3);
  assign adaptOut_payload = {fifo_io_pop_payload,t_adaptOut_payload};
  assign fifo_io_pop_ready = (! ((! adaptOut_ready) && t_adaptOut_valid_3));
  always @(*) begin
    adaptIn_ready = adaptIn_m2sPipe_ready;
    if((! adaptIn_m2sPipe_valid)) begin
      adaptIn_ready = 1'b1;
    end
  end

  assign adaptIn_m2sPipe_valid = adaptIn_rValid;
  assign adaptIn_m2sPipe_payload = adaptIn_rData;
  assign adaptIn_m2sPipe_ready = fifo_io_push_ready;
  assign io_pop_valid = adaptOut_valid;
  assign adaptOut_ready = io_pop_ready;
  assign io_pop_payload = adaptOut_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      pushIn_rValid <= 1'b0;
      t_adaptIn_payload_2 <= 3'b000;
      t_adaptOut_valid_2 <= 3'b000;
      adaptIn_rValid <= 1'b0;
    end else begin
      if(pushIn_ready) begin
        pushIn_rValid <= pushIn_valid;
      end
      t_adaptIn_payload_2 <= t_adaptIn_payload_1;
      t_adaptOut_valid_2 <= t_adaptOut_valid_1;
      if(adaptIn_ready) begin
        adaptIn_rValid <= adaptIn_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(pushIn_ready) begin
      pushIn_rData <= pushIn_payload;
    end
    if(k_fifo_fifo_io_pop_fire) begin
      t_adaptOut_payload <= {fifo_io_pop_payload,t_t_adaptOut_payload};
    end
    if(adaptIn_ready) begin
      adaptIn_rData <= adaptIn_payload;
    end
  end


endmodule

//StreamFifo_6 replaced by StreamFifo_69

module GtZeroCnt (
  input  wire          io_index_valid,
  input  wire          io_index_payload_last,
  input  wire [15:0]   io_index_payload_tdata,
  input  wire [5:0]    io_index_payload_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   cnt;
  wire                output_valid;
  reg                 output_ready;
  wire       [15:0]   output_tdata;
  wire       [5:0]    output_tuser;
  wire                output_m2sPipe_valid;
  wire                output_m2sPipe_ready;
  wire       [15:0]   output_m2sPipe_tdata;
  wire       [5:0]    output_m2sPipe_tuser;
  reg                 output_rValid;
  reg        [15:0]   t_output_m2sPipe_tdata;
  reg        [5:0]    t_output_m2sPipe_tuser;

  assign output_valid = (io_index_valid && io_index_payload_last);
  assign output_tdata = cnt;
  assign output_tuser = io_index_payload_tuser;
  always @(*) begin
    output_ready = output_m2sPipe_ready;
    if((! output_m2sPipe_valid)) begin
      output_ready = 1'b1;
    end
  end

  assign output_m2sPipe_valid = output_rValid;
  assign output_m2sPipe_tdata = t_output_m2sPipe_tdata;
  assign output_m2sPipe_tuser = t_output_m2sPipe_tuser;
  assign io_output_valid = output_m2sPipe_valid;
  assign output_m2sPipe_ready = io_output_ready;
  assign io_output_tdata = output_m2sPipe_tdata;
  assign io_output_tuser = output_m2sPipe_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cnt <= 16'h0;
      output_rValid <= 1'b0;
    end else begin
      if(io_index_valid) begin
        cnt <= (cnt + 16'h0001);
        if(io_index_payload_last) begin
          cnt <= 16'h0;
        end
      end
      if(output_ready) begin
        output_rValid <= output_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(output_ready) begin
      t_output_m2sPipe_tdata <= output_tdata;
      t_output_m2sPipe_tuser <= output_tuser;
    end
  end


endmodule

module AllReduce (
  input  wire          input_valid,
  input  wire [15:0]   input_tdata,
  input  wire [5:0]    input_tuser,
  input  wire [0:0]    input_tdest,
  output wire          output_tvalid,
  output wire [15:0]   output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_1_resetn,
  input  wire          clk_1_clk
);

  wire                multiCore_tuser_fifo_io_push_ready;
  wire                multiCore_tuser_fifo_io_pop_valid;
  wire       [5:0]    multiCore_tuser_fifo_io_pop_payload;
  wire       [5:0]    multiCore_tuser_fifo_io_occupancy;
  wire       [5:0]    multiCore_tuser_fifo_io_availability;
  wire                multiCore_accIn_acc_ip_m_axis_result_tvalid;
  wire                multiCore_accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   multiCore_accIn_acc_ip_m_axis_result_tdata;
  wire                input_valid_1;
  wire       [15:0]   input_tdata_1;
  wire       [5:0]    input_tuser_1;
  wire                cond;
  wire                multiCore_tuser_valid;
  wire                multiCore_tuser_ready;
  wire       [5:0]    multiCore_tuser_payload;
  reg        [0:0]    multiCore_idCnt;
  wire                multiCore_idOvf;
  wire                multiCore_accIn_valid;
  wire                multiCore_accIn_payload_last;
  wire       [15:0]   multiCore_accIn_payload_fragment;

  StreamFifo_62 multiCore_tuser_fifo (
    .io_push_valid   (multiCore_tuser_valid                    ), //i
    .io_push_ready   (multiCore_tuser_fifo_io_push_ready       ), //o
    .io_push_payload (multiCore_tuser_payload[5:0]             ), //i
    .io_pop_valid    (multiCore_tuser_fifo_io_pop_valid        ), //o
    .io_pop_ready    (output_tvalid                            ), //i
    .io_pop_payload  (multiCore_tuser_fifo_io_pop_payload[5:0] ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (multiCore_tuser_fifo_io_occupancy[5:0]   ), //o
    .io_availability (multiCore_tuser_fifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                                ), //i
    .clk_1_resetn    (clk_1_resetn                             )  //i
  );
  fp16acc16 multiCore_accIn_acc_ip (
    .aclk                 (clk_1_clk                                       ), //i
    .aresetn              (clk_1_resetn                                    ), //i
    .s_axis_a_tvalid      (multiCore_accIn_valid                           ), //i
    .s_axis_a_tlast       (multiCore_accIn_payload_last                    ), //i
    .s_axis_a_tdata       (multiCore_accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (multiCore_accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (multiCore_accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (multiCore_accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  assign cond = ((((((input_tuser == 6'h1b) || (input_tuser == 6'h18)) || (input_tuser == 6'h16)) || (input_tuser == 6'h20)) || (input_tuser == 6'h23)) || (input_tuser == 6'h10));
  assign input_valid_1 = (input_valid && cond);
  assign input_tdata_1 = input_tdata;
  assign input_tuser_1 = input_tuser;
  assign multiCore_tuser_ready = multiCore_tuser_fifo_io_push_ready;
  assign multiCore_idOvf = (multiCore_idCnt == 1'b1);
  assign multiCore_tuser_valid = (input_valid_1 && multiCore_idOvf);
  assign multiCore_tuser_payload = input_tuser;
  assign multiCore_accIn_valid = input_valid_1;
  assign multiCore_accIn_payload_fragment = input_tdata_1;
  assign multiCore_accIn_payload_last = multiCore_idOvf;
  assign output_tvalid = (multiCore_accIn_acc_ip_m_axis_result_tvalid && multiCore_accIn_acc_ip_m_axis_result_tlast);
  assign output_tdata = multiCore_accIn_acc_ip_m_axis_result_tdata;
  assign output_tuser = multiCore_tuser_fifo_io_pop_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      multiCore_idCnt <= 1'b0;
    end else begin
      if(input_valid_1) begin
        multiCore_idCnt <= (multiCore_idCnt + 1'b1);
      end
    end
  end


endmodule

module AllGatherNode (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_tdata,
  input  wire [5:0]    io_input_payload_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  output wire [0:0]    io_output_payload_tdest,
  input  wire          io_from_valid,
  input  wire          io_from_payload_last,
  input  wire [15:0]   io_from_payload_tdata,
  input  wire [5:0]    io_from_payload_tuser,
  input  wire [0:0]    io_from_payload_tdest,
  output wire          io_to_valid,
  output wire          io_to_payload_last,
  output wire [15:0]   io_to_payload_tdata,
  output wire [5:0]    io_to_payload_tuser,
  output wire [0:0]    io_to_payload_tdest,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [0:0]    multiCore_mux_io_select;
  wire                multiCore_mux_io_output_ready;
  wire                multiCore_inFifo_io_push_ready;
  wire                multiCore_inFifo_io_pop_valid;
  wire                multiCore_inFifo_io_pop_payload_last;
  wire       [15:0]   multiCore_inFifo_io_pop_payload_tdata;
  wire       [5:0]    multiCore_inFifo_io_pop_payload_tuser;
  wire       [14:0]   multiCore_inFifo_io_occupancy;
  wire       [14:0]   multiCore_inFifo_io_availability;
  wire                multiCore_fromFifo_io_push_ready;
  wire                multiCore_fromFifo_io_pop_valid;
  wire                multiCore_fromFifo_io_pop_payload_last;
  wire       [15:0]   multiCore_fromFifo_io_pop_payload_tdata;
  wire       [5:0]    multiCore_fromFifo_io_pop_payload_tuser;
  wire       [0:0]    multiCore_fromFifo_io_pop_payload_tdest;
  wire       [14:0]   multiCore_fromFifo_io_occupancy;
  wire       [14:0]   multiCore_fromFifo_io_availability;
  wire                multiCore_mux_io_inputs_0_ready;
  wire                multiCore_mux_io_inputs_1_ready;
  wire                multiCore_mux_io_output_valid;
  wire                multiCore_mux_io_output_payload_last;
  wire       [15:0]   multiCore_mux_io_output_payload_tdata;
  wire       [5:0]    multiCore_mux_io_output_payload_tuser;
  wire       [0:0]    multiCore_mux_io_output_payload_tdest;
  wire                io_from_takeWhen_valid;
  wire                io_from_takeWhen_payload_last;
  wire       [15:0]   io_from_takeWhen_payload_tdata;
  wire       [5:0]    io_from_takeWhen_payload_tuser;
  wire       [0:0]    io_from_takeWhen_payload_tdest;
  wire                io_from_takeWhen_toStream_valid;
  wire                io_from_takeWhen_toStream_ready;
  wire                io_from_takeWhen_toStream_payload_last;
  wire       [15:0]   io_from_takeWhen_toStream_payload_tdata;
  wire       [5:0]    io_from_takeWhen_toStream_payload_tuser;
  wire       [0:0]    io_from_takeWhen_toStream_payload_tdest;
  wire                multiCore_insert_valid;
  wire                multiCore_insert_ready;
  wire                multiCore_insert_payload_last;
  wire       [15:0]   multiCore_insert_payload_tdata;
  wire       [5:0]    multiCore_insert_payload_tuser;
  wire       [0:0]    multiCore_insert_payload_tdest;
  wire                multiCore_muxOutput_valid;
  wire                multiCore_muxOutput_payload_last;
  wire       [15:0]   multiCore_muxOutput_payload_tdata;
  wire       [5:0]    multiCore_muxOutput_payload_tuser;
  wire       [0:0]    multiCore_muxOutput_payload_tdest;
  reg                 multiCore_muxOutput_regNext_valid;
  reg                 multiCore_muxOutput_regNext_payload_last;
  reg        [15:0]   multiCore_muxOutput_regNext_payload_tdata;
  reg        [5:0]    multiCore_muxOutput_regNext_payload_tuser;
  reg        [0:0]    multiCore_muxOutput_regNext_payload_tdest;
  reg                 multiCore_muxPipe_valid;
  reg                 multiCore_muxPipe_payload_last;
  reg        [15:0]   multiCore_muxPipe_payload_tdata;
  reg        [5:0]    multiCore_muxPipe_payload_tuser;
  reg        [0:0]    multiCore_muxPipe_payload_tdest;
  wire                multiCore_enCnt;
  reg        [0:0]    multiCore_cnt;
  wire                multiCore_insertSel;

  StreamFifo_63 multiCore_inFifo (
    .io_push_valid         (io_input_valid                             ), //i
    .io_push_ready         (multiCore_inFifo_io_push_ready             ), //o
    .io_push_payload_last  (io_input_payload_last                      ), //i
    .io_push_payload_tdata (io_input_payload_tdata[15:0]               ), //i
    .io_push_payload_tuser (io_input_payload_tuser[5:0]                ), //i
    .io_pop_valid          (multiCore_inFifo_io_pop_valid              ), //o
    .io_pop_ready          (multiCore_insert_ready                     ), //i
    .io_pop_payload_last   (multiCore_inFifo_io_pop_payload_last       ), //o
    .io_pop_payload_tdata  (multiCore_inFifo_io_pop_payload_tdata[15:0]), //o
    .io_pop_payload_tuser  (multiCore_inFifo_io_pop_payload_tuser[5:0] ), //o
    .io_flush              (1'b0                                       ), //i
    .io_occupancy          (multiCore_inFifo_io_occupancy[14:0]        ), //o
    .io_availability       (multiCore_inFifo_io_availability[14:0]     ), //o
    .clk_1_clk             (clk_1_clk                                  ), //i
    .clk_1_resetn          (clk_1_resetn                               )  //i
  );
  StreamFifo_64 multiCore_fromFifo (
    .io_push_valid         (io_from_takeWhen_toStream_valid              ), //i
    .io_push_ready         (multiCore_fromFifo_io_push_ready             ), //o
    .io_push_payload_last  (io_from_takeWhen_toStream_payload_last       ), //i
    .io_push_payload_tdata (io_from_takeWhen_toStream_payload_tdata[15:0]), //i
    .io_push_payload_tuser (io_from_takeWhen_toStream_payload_tuser[5:0] ), //i
    .io_push_payload_tdest (io_from_takeWhen_toStream_payload_tdest      ), //i
    .io_pop_valid          (multiCore_fromFifo_io_pop_valid              ), //o
    .io_pop_ready          (multiCore_mux_io_inputs_0_ready              ), //i
    .io_pop_payload_last   (multiCore_fromFifo_io_pop_payload_last       ), //o
    .io_pop_payload_tdata  (multiCore_fromFifo_io_pop_payload_tdata[15:0]), //o
    .io_pop_payload_tuser  (multiCore_fromFifo_io_pop_payload_tuser[5:0] ), //o
    .io_pop_payload_tdest  (multiCore_fromFifo_io_pop_payload_tdest      ), //o
    .io_flush              (1'b0                                         ), //i
    .io_occupancy          (multiCore_fromFifo_io_occupancy[14:0]        ), //o
    .io_availability       (multiCore_fromFifo_io_availability[14:0]     ), //o
    .clk_1_clk             (clk_1_clk                                    ), //i
    .clk_1_resetn          (clk_1_resetn                                 )  //i
  );
  StreamMux_40 multiCore_mux (
    .io_select                 (multiCore_mux_io_select                      ), //i
    .io_inputs_0_valid         (multiCore_fromFifo_io_pop_valid              ), //i
    .io_inputs_0_ready         (multiCore_mux_io_inputs_0_ready              ), //o
    .io_inputs_0_payload_last  (multiCore_fromFifo_io_pop_payload_last       ), //i
    .io_inputs_0_payload_tdata (multiCore_fromFifo_io_pop_payload_tdata[15:0]), //i
    .io_inputs_0_payload_tuser (multiCore_fromFifo_io_pop_payload_tuser[5:0] ), //i
    .io_inputs_0_payload_tdest (multiCore_fromFifo_io_pop_payload_tdest      ), //i
    .io_inputs_1_valid         (multiCore_insert_valid                       ), //i
    .io_inputs_1_ready         (multiCore_mux_io_inputs_1_ready              ), //o
    .io_inputs_1_payload_last  (multiCore_insert_payload_last                ), //i
    .io_inputs_1_payload_tdata (multiCore_insert_payload_tdata[15:0]         ), //i
    .io_inputs_1_payload_tuser (multiCore_insert_payload_tuser[5:0]          ), //i
    .io_inputs_1_payload_tdest (multiCore_insert_payload_tdest               ), //i
    .io_output_valid           (multiCore_mux_io_output_valid                ), //o
    .io_output_ready           (multiCore_mux_io_output_ready                ), //i
    .io_output_payload_last    (multiCore_mux_io_output_payload_last         ), //o
    .io_output_payload_tdata   (multiCore_mux_io_output_payload_tdata[15:0]  ), //o
    .io_output_payload_tuser   (multiCore_mux_io_output_payload_tuser[5:0]   ), //o
    .io_output_payload_tdest   (multiCore_mux_io_output_payload_tdest        )  //o
  );
  assign io_from_takeWhen_valid = (io_from_valid && (! (io_from_payload_tdest == 1'b1)));
  assign io_from_takeWhen_payload_last = io_from_payload_last;
  assign io_from_takeWhen_payload_tdata = io_from_payload_tdata;
  assign io_from_takeWhen_payload_tuser = io_from_payload_tuser;
  assign io_from_takeWhen_payload_tdest = io_from_payload_tdest;
  assign io_from_takeWhen_toStream_valid = io_from_takeWhen_valid;
  assign io_from_takeWhen_toStream_payload_last = io_from_takeWhen_payload_last;
  assign io_from_takeWhen_toStream_payload_tdata = io_from_takeWhen_payload_tdata;
  assign io_from_takeWhen_toStream_payload_tuser = io_from_takeWhen_payload_tuser;
  assign io_from_takeWhen_toStream_payload_tdest = io_from_takeWhen_payload_tdest;
  assign io_from_takeWhen_toStream_ready = multiCore_fromFifo_io_push_ready;
  assign multiCore_insert_valid = multiCore_inFifo_io_pop_valid;
  assign multiCore_insert_payload_tdata = multiCore_inFifo_io_pop_payload_tdata;
  assign multiCore_insert_payload_tuser = multiCore_inFifo_io_pop_payload_tuser;
  assign multiCore_insert_payload_tdest = 1'b1;
  assign multiCore_insert_payload_last = multiCore_inFifo_io_pop_payload_last;
  assign multiCore_insert_ready = multiCore_mux_io_inputs_1_ready;
  assign multiCore_mux_io_output_ready = 1'b1;
  assign multiCore_muxOutput_valid = multiCore_mux_io_output_valid;
  assign multiCore_muxOutput_payload_last = multiCore_mux_io_output_payload_last;
  assign multiCore_muxOutput_payload_tdata = multiCore_mux_io_output_payload_tdata;
  assign multiCore_muxOutput_payload_tuser = multiCore_mux_io_output_payload_tuser;
  assign multiCore_muxOutput_payload_tdest = multiCore_mux_io_output_payload_tdest;
  assign io_to_valid = multiCore_muxPipe_valid;
  assign io_to_payload_last = multiCore_muxPipe_payload_last;
  assign io_to_payload_tdata = multiCore_muxPipe_payload_tdata;
  assign io_to_payload_tuser = multiCore_muxPipe_payload_tuser;
  assign io_to_payload_tdest = multiCore_muxPipe_payload_tdest;
  assign multiCore_enCnt = (multiCore_mux_io_output_valid && multiCore_mux_io_output_ready);
  assign io_output_payload_tdest = multiCore_muxOutput_payload_tdest;
  assign io_output_payload_tdata = multiCore_muxOutput_payload_tdata;
  assign io_output_payload_tuser = multiCore_muxOutput_payload_tuser;
  assign io_output_valid = multiCore_enCnt;
  assign io_output_payload_last = multiCore_muxOutput_payload_last;
  assign multiCore_insertSel = (multiCore_cnt == 1'b0);
  assign multiCore_mux_io_select = multiCore_insertSel;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      multiCore_muxOutput_regNext_valid <= 1'b0;
      multiCore_muxPipe_valid <= 1'b0;
      multiCore_cnt <= 1'b0;
    end else begin
      multiCore_muxOutput_regNext_valid <= multiCore_muxOutput_valid;
      multiCore_muxPipe_valid <= multiCore_muxOutput_regNext_valid;
      if(multiCore_enCnt) begin
        if(multiCore_mux_io_output_payload_last) begin
          multiCore_cnt <= (multiCore_cnt + 1'b1);
          if((multiCore_cnt == 1'b1)) begin
            multiCore_cnt <= 1'b0;
          end
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    multiCore_muxOutput_regNext_payload_last <= multiCore_muxOutput_payload_last;
    multiCore_muxOutput_regNext_payload_tdata <= multiCore_muxOutput_payload_tdata;
    multiCore_muxOutput_regNext_payload_tuser <= multiCore_muxOutput_payload_tuser;
    multiCore_muxOutput_regNext_payload_tdest <= multiCore_muxOutput_payload_tdest;
    multiCore_muxPipe_payload_last <= multiCore_muxOutput_regNext_payload_last;
    multiCore_muxPipe_payload_tdata <= multiCore_muxOutput_regNext_payload_tdata;
    multiCore_muxPipe_payload_tuser <= multiCore_muxOutput_regNext_payload_tuser;
    multiCore_muxPipe_payload_tdest <= multiCore_muxOutput_regNext_payload_tdest;
  end


endmodule

module Fp32AccEngine (
  input  wire          io_inputs_0_valid,
  input  wire          io_inputs_0_payload_last,
  input  wire [15:0]   io_inputs_0_payload_tdata,
  input  wire [5:0]    io_inputs_0_payload_tuser,
  input  wire          io_inputs_1_valid,
  input  wire          io_inputs_1_payload_last,
  input  wire [15:0]   io_inputs_1_payload_tdata,
  input  wire [5:0]    io_inputs_1_payload_tuser,
  input  wire          io_inputs_2_valid,
  input  wire          io_inputs_2_payload_last,
  input  wire [15:0]   io_inputs_2_payload_tdata,
  input  wire [5:0]    io_inputs_2_payload_tuser,
  input  wire          io_inputs_3_valid,
  input  wire          io_inputs_3_payload_last,
  input  wire [15:0]   io_inputs_3_payload_tdata,
  input  wire [5:0]    io_inputs_3_payload_tuser,
  input  wire          io_postScale_valid,
  output wire          io_postScale_ready,
  input  wire [31:0]   io_postScale_payload,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                inputs_0_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_0_to_ip_m_axis_result_tdata;
  wire                inputs_1_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_1_to_ip_m_axis_result_tdata;
  wire                inputs_2_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_2_to_ip_m_axis_result_tdata;
  wire                inputs_3_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_3_to_ip_m_axis_result_tdata;
  wire                fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                scaleFlow_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   scaleFlow_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [31:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                fp32Out_to_ip_m_axis_result_tvalid;
  wire       [15:0]   fp32Out_to_ip_m_axis_result_tdata;
  wire                inputs_0_valid;
  wire       [15:0]   inputs_0_payload;
  wire                inputs_1_valid;
  wire       [15:0]   inputs_1_payload;
  wire                inputs_2_valid;
  wire       [15:0]   inputs_2_payload;
  wire                inputs_3_valid;
  wire       [15:0]   inputs_3_payload;
  wire                scaleFlow_valid;
  wire       [31:0]   scaleFlow_payload;
  wire                reduceFlow_valid;
  wire       [31:0]   reduceFlow_payload;
  reg                 io_inputs_0_payload_last_delay_1;
  reg                 io_inputs_0_payload_last_delay_2;
  reg                 io_inputs_0_payload_last_delay_3;
  reg                 io_inputs_0_payload_last_delay_4;
  reg                 io_inputs_0_payload_last_delay_5;
  reg                 io_inputs_0_payload_last_delay_6;
  reg                 io_inputs_0_payload_last_delay_7;
  reg                 io_inputs_0_payload_last_delay_8;
  reg                 io_inputs_0_payload_last_delay_9;
  reg                 io_inputs_0_payload_last_delay_10;
  reg                 io_inputs_0_payload_last_delay_11;
  reg                 io_inputs_0_payload_last_delay_12;
  reg                 io_inputs_0_payload_last_delay_13;
  reg                 io_inputs_0_payload_last_delay_14;
  reg                 io_inputs_0_payload_last_delay_15;
  reg                 io_inputs_0_payload_last_delay_16;
  reg                 io_inputs_0_payload_last_delay_17;
  reg                 io_inputs_0_payload_last_delay_18;
  reg                 io_inputs_0_payload_last_delay_19;
  reg                 io_inputs_0_payload_last_delay_20;
  reg                 io_inputs_0_payload_last_delay_21;
  reg                 io_inputs_0_payload_last_delay_22;
  reg                 io_inputs_0_payload_last_delay_23;
  reg                 io_inputs_0_payload_last_delay_24;
  reg                 io_inputs_0_payload_last_delay_25;
  reg                 io_inputs_0_payload_last_delay_26;
  reg                 io_inputs_0_payload_last_delay_27;
  reg                 io_inputs_0_payload_last_delay_28;
  reg                 io_inputs_0_payload_last_delay_29;
  reg                 io_inputs_0_payload_last_delay_30;
  reg                 io_inputs_0_payload_last_delay_31;
  reg                 lastDly;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [31:0]   accIn_payload_fragment;
  wire                accOut_valid;
  wire                accOut_payload_last;
  wire       [31:0]   accOut_payload_fragment;
  wire                fp32Out_valid;
  wire       [31:0]   fp32Out_payload;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_1;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_2;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_3;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_4;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_5;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_6;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_7;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_8;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_9;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_10;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_11;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_12;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_13;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_14;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_15;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_16;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_17;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_18;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_19;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_20;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_21;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_22;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_23;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_24;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_25;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_26;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_27;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_28;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_29;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_30;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_31;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_32;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_33;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_34;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_35;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_36;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_37;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_38;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_39;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_40;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_41;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_42;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_43;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_44;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_45;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_46;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_47;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_48;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_49;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_50;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_51;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_52;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_53;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_54;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_55;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_56;
  reg        [5:0]    tuserDly;

  fp16toFp32 inputs_0_to_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (inputs_0_valid                          ), //i
    .s_axis_a_tdata       (inputs_0_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_0_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_0_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_1_to_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (inputs_1_valid                          ), //i
    .s_axis_a_tdata       (inputs_1_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_1_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_1_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_2_to_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (inputs_2_valid                          ), //i
    .s_axis_a_tdata       (inputs_2_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_2_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_2_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_3_to_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (inputs_3_valid                          ), //i
    .s_axis_a_tdata       (inputs_3_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_3_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_3_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_inputs_0_to_ip_m_axis_result_add_ip (
    .aclk                 (clk_1_clk                                                            ), //i
    .s_axis_a_tvalid      (inputs_0_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (inputs_0_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (inputs_1_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (inputs_1_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_inputs_2_to_ip_m_axis_result_add_ip (
    .aclk                 (clk_1_clk                                                            ), //i
    .s_axis_a_tvalid      (inputs_2_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (inputs_2_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (inputs_3_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (inputs_3_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip (
    .aclk                 (clk_1_clk                                                                                         ), //i
    .s_axis_a_tvalid      (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 scaleFlow_mul_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (scaleFlow_valid                           ), //i
    .s_axis_a_tdata       (scaleFlow_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (reduceFlow_valid                          ), //i
    .s_axis_b_tdata       (reduceFlow_payload[31:0]                  ), //i
    .m_axis_result_tvalid (scaleFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (scaleFlow_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32acc22 accIn_acc_ip (
    .aclk                 (clk_1_clk                             ), //i
    .aresetn              (clk_1_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[31:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toFp16 fp32Out_to_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (fp32Out_valid                          ), //i
    .s_axis_a_tdata       (fp32Out_payload[31:0]                  ), //i
    .m_axis_result_tvalid (fp32Out_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Out_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign inputs_0_valid = io_inputs_0_valid;
  assign inputs_1_valid = io_inputs_1_valid;
  assign inputs_2_valid = io_inputs_2_valid;
  assign inputs_3_valid = io_inputs_3_valid;
  assign inputs_0_payload = io_inputs_0_payload_tdata;
  assign inputs_1_payload = io_inputs_1_payload_tdata;
  assign inputs_2_payload = io_inputs_2_payload_tdata;
  assign inputs_3_payload = io_inputs_3_payload_tdata;
  assign reduceFlow_valid = fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  assign reduceFlow_payload = fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata;
  assign scaleFlow_valid = reduceFlow_valid;
  assign scaleFlow_payload = io_postScale_payload;
  assign io_postScale_ready = reduceFlow_valid;
  assign accIn_valid = scaleFlow_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = scaleFlow_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = lastDly;
  assign accOut_valid = accIn_acc_ip_m_axis_result_tvalid;
  assign accOut_payload_last = accIn_acc_ip_m_axis_result_tlast;
  assign accOut_payload_fragment = accIn_acc_ip_m_axis_result_tdata;
  assign fp32Out_valid = (accOut_valid && accOut_payload_last);
  assign fp32Out_payload = accOut_payload_fragment;
  assign io_output_valid = fp32Out_to_ip_m_axis_result_tvalid;
  assign io_output_tdata = fp32Out_to_ip_m_axis_result_tdata;
  assign io_output_tuser = tuserDly;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      io_inputs_0_payload_last_delay_1 <= 1'b0;
      io_inputs_0_payload_last_delay_2 <= 1'b0;
      io_inputs_0_payload_last_delay_3 <= 1'b0;
      io_inputs_0_payload_last_delay_4 <= 1'b0;
      io_inputs_0_payload_last_delay_5 <= 1'b0;
      io_inputs_0_payload_last_delay_6 <= 1'b0;
      io_inputs_0_payload_last_delay_7 <= 1'b0;
      io_inputs_0_payload_last_delay_8 <= 1'b0;
      io_inputs_0_payload_last_delay_9 <= 1'b0;
      io_inputs_0_payload_last_delay_10 <= 1'b0;
      io_inputs_0_payload_last_delay_11 <= 1'b0;
      io_inputs_0_payload_last_delay_12 <= 1'b0;
      io_inputs_0_payload_last_delay_13 <= 1'b0;
      io_inputs_0_payload_last_delay_14 <= 1'b0;
      io_inputs_0_payload_last_delay_15 <= 1'b0;
      io_inputs_0_payload_last_delay_16 <= 1'b0;
      io_inputs_0_payload_last_delay_17 <= 1'b0;
      io_inputs_0_payload_last_delay_18 <= 1'b0;
      io_inputs_0_payload_last_delay_19 <= 1'b0;
      io_inputs_0_payload_last_delay_20 <= 1'b0;
      io_inputs_0_payload_last_delay_21 <= 1'b0;
      io_inputs_0_payload_last_delay_22 <= 1'b0;
      io_inputs_0_payload_last_delay_23 <= 1'b0;
      io_inputs_0_payload_last_delay_24 <= 1'b0;
      io_inputs_0_payload_last_delay_25 <= 1'b0;
      io_inputs_0_payload_last_delay_26 <= 1'b0;
      io_inputs_0_payload_last_delay_27 <= 1'b0;
      io_inputs_0_payload_last_delay_28 <= 1'b0;
      io_inputs_0_payload_last_delay_29 <= 1'b0;
      io_inputs_0_payload_last_delay_30 <= 1'b0;
      io_inputs_0_payload_last_delay_31 <= 1'b0;
      lastDly <= 1'b0;
      io_inputs_0_payload_tuser_delay_1 <= 6'h0;
      io_inputs_0_payload_tuser_delay_2 <= 6'h0;
      io_inputs_0_payload_tuser_delay_3 <= 6'h0;
      io_inputs_0_payload_tuser_delay_4 <= 6'h0;
      io_inputs_0_payload_tuser_delay_5 <= 6'h0;
      io_inputs_0_payload_tuser_delay_6 <= 6'h0;
      io_inputs_0_payload_tuser_delay_7 <= 6'h0;
      io_inputs_0_payload_tuser_delay_8 <= 6'h0;
      io_inputs_0_payload_tuser_delay_9 <= 6'h0;
      io_inputs_0_payload_tuser_delay_10 <= 6'h0;
      io_inputs_0_payload_tuser_delay_11 <= 6'h0;
      io_inputs_0_payload_tuser_delay_12 <= 6'h0;
      io_inputs_0_payload_tuser_delay_13 <= 6'h0;
      io_inputs_0_payload_tuser_delay_14 <= 6'h0;
      io_inputs_0_payload_tuser_delay_15 <= 6'h0;
      io_inputs_0_payload_tuser_delay_16 <= 6'h0;
      io_inputs_0_payload_tuser_delay_17 <= 6'h0;
      io_inputs_0_payload_tuser_delay_18 <= 6'h0;
      io_inputs_0_payload_tuser_delay_19 <= 6'h0;
      io_inputs_0_payload_tuser_delay_20 <= 6'h0;
      io_inputs_0_payload_tuser_delay_21 <= 6'h0;
      io_inputs_0_payload_tuser_delay_22 <= 6'h0;
      io_inputs_0_payload_tuser_delay_23 <= 6'h0;
      io_inputs_0_payload_tuser_delay_24 <= 6'h0;
      io_inputs_0_payload_tuser_delay_25 <= 6'h0;
      io_inputs_0_payload_tuser_delay_26 <= 6'h0;
      io_inputs_0_payload_tuser_delay_27 <= 6'h0;
      io_inputs_0_payload_tuser_delay_28 <= 6'h0;
      io_inputs_0_payload_tuser_delay_29 <= 6'h0;
      io_inputs_0_payload_tuser_delay_30 <= 6'h0;
      io_inputs_0_payload_tuser_delay_31 <= 6'h0;
      io_inputs_0_payload_tuser_delay_32 <= 6'h0;
      io_inputs_0_payload_tuser_delay_33 <= 6'h0;
      io_inputs_0_payload_tuser_delay_34 <= 6'h0;
      io_inputs_0_payload_tuser_delay_35 <= 6'h0;
      io_inputs_0_payload_tuser_delay_36 <= 6'h0;
      io_inputs_0_payload_tuser_delay_37 <= 6'h0;
      io_inputs_0_payload_tuser_delay_38 <= 6'h0;
      io_inputs_0_payload_tuser_delay_39 <= 6'h0;
      io_inputs_0_payload_tuser_delay_40 <= 6'h0;
      io_inputs_0_payload_tuser_delay_41 <= 6'h0;
      io_inputs_0_payload_tuser_delay_42 <= 6'h0;
      io_inputs_0_payload_tuser_delay_43 <= 6'h0;
      io_inputs_0_payload_tuser_delay_44 <= 6'h0;
      io_inputs_0_payload_tuser_delay_45 <= 6'h0;
      io_inputs_0_payload_tuser_delay_46 <= 6'h0;
      io_inputs_0_payload_tuser_delay_47 <= 6'h0;
      io_inputs_0_payload_tuser_delay_48 <= 6'h0;
      io_inputs_0_payload_tuser_delay_49 <= 6'h0;
      io_inputs_0_payload_tuser_delay_50 <= 6'h0;
      io_inputs_0_payload_tuser_delay_51 <= 6'h0;
      io_inputs_0_payload_tuser_delay_52 <= 6'h0;
      io_inputs_0_payload_tuser_delay_53 <= 6'h0;
      io_inputs_0_payload_tuser_delay_54 <= 6'h0;
      io_inputs_0_payload_tuser_delay_55 <= 6'h0;
      io_inputs_0_payload_tuser_delay_56 <= 6'h0;
      tuserDly <= 6'h0;
    end else begin
      io_inputs_0_payload_last_delay_1 <= io_inputs_0_payload_last;
      io_inputs_0_payload_last_delay_2 <= io_inputs_0_payload_last_delay_1;
      io_inputs_0_payload_last_delay_3 <= io_inputs_0_payload_last_delay_2;
      io_inputs_0_payload_last_delay_4 <= io_inputs_0_payload_last_delay_3;
      io_inputs_0_payload_last_delay_5 <= io_inputs_0_payload_last_delay_4;
      io_inputs_0_payload_last_delay_6 <= io_inputs_0_payload_last_delay_5;
      io_inputs_0_payload_last_delay_7 <= io_inputs_0_payload_last_delay_6;
      io_inputs_0_payload_last_delay_8 <= io_inputs_0_payload_last_delay_7;
      io_inputs_0_payload_last_delay_9 <= io_inputs_0_payload_last_delay_8;
      io_inputs_0_payload_last_delay_10 <= io_inputs_0_payload_last_delay_9;
      io_inputs_0_payload_last_delay_11 <= io_inputs_0_payload_last_delay_10;
      io_inputs_0_payload_last_delay_12 <= io_inputs_0_payload_last_delay_11;
      io_inputs_0_payload_last_delay_13 <= io_inputs_0_payload_last_delay_12;
      io_inputs_0_payload_last_delay_14 <= io_inputs_0_payload_last_delay_13;
      io_inputs_0_payload_last_delay_15 <= io_inputs_0_payload_last_delay_14;
      io_inputs_0_payload_last_delay_16 <= io_inputs_0_payload_last_delay_15;
      io_inputs_0_payload_last_delay_17 <= io_inputs_0_payload_last_delay_16;
      io_inputs_0_payload_last_delay_18 <= io_inputs_0_payload_last_delay_17;
      io_inputs_0_payload_last_delay_19 <= io_inputs_0_payload_last_delay_18;
      io_inputs_0_payload_last_delay_20 <= io_inputs_0_payload_last_delay_19;
      io_inputs_0_payload_last_delay_21 <= io_inputs_0_payload_last_delay_20;
      io_inputs_0_payload_last_delay_22 <= io_inputs_0_payload_last_delay_21;
      io_inputs_0_payload_last_delay_23 <= io_inputs_0_payload_last_delay_22;
      io_inputs_0_payload_last_delay_24 <= io_inputs_0_payload_last_delay_23;
      io_inputs_0_payload_last_delay_25 <= io_inputs_0_payload_last_delay_24;
      io_inputs_0_payload_last_delay_26 <= io_inputs_0_payload_last_delay_25;
      io_inputs_0_payload_last_delay_27 <= io_inputs_0_payload_last_delay_26;
      io_inputs_0_payload_last_delay_28 <= io_inputs_0_payload_last_delay_27;
      io_inputs_0_payload_last_delay_29 <= io_inputs_0_payload_last_delay_28;
      io_inputs_0_payload_last_delay_30 <= io_inputs_0_payload_last_delay_29;
      io_inputs_0_payload_last_delay_31 <= io_inputs_0_payload_last_delay_30;
      lastDly <= io_inputs_0_payload_last_delay_31;
      io_inputs_0_payload_tuser_delay_1 <= io_inputs_0_payload_tuser;
      io_inputs_0_payload_tuser_delay_2 <= io_inputs_0_payload_tuser_delay_1;
      io_inputs_0_payload_tuser_delay_3 <= io_inputs_0_payload_tuser_delay_2;
      io_inputs_0_payload_tuser_delay_4 <= io_inputs_0_payload_tuser_delay_3;
      io_inputs_0_payload_tuser_delay_5 <= io_inputs_0_payload_tuser_delay_4;
      io_inputs_0_payload_tuser_delay_6 <= io_inputs_0_payload_tuser_delay_5;
      io_inputs_0_payload_tuser_delay_7 <= io_inputs_0_payload_tuser_delay_6;
      io_inputs_0_payload_tuser_delay_8 <= io_inputs_0_payload_tuser_delay_7;
      io_inputs_0_payload_tuser_delay_9 <= io_inputs_0_payload_tuser_delay_8;
      io_inputs_0_payload_tuser_delay_10 <= io_inputs_0_payload_tuser_delay_9;
      io_inputs_0_payload_tuser_delay_11 <= io_inputs_0_payload_tuser_delay_10;
      io_inputs_0_payload_tuser_delay_12 <= io_inputs_0_payload_tuser_delay_11;
      io_inputs_0_payload_tuser_delay_13 <= io_inputs_0_payload_tuser_delay_12;
      io_inputs_0_payload_tuser_delay_14 <= io_inputs_0_payload_tuser_delay_13;
      io_inputs_0_payload_tuser_delay_15 <= io_inputs_0_payload_tuser_delay_14;
      io_inputs_0_payload_tuser_delay_16 <= io_inputs_0_payload_tuser_delay_15;
      io_inputs_0_payload_tuser_delay_17 <= io_inputs_0_payload_tuser_delay_16;
      io_inputs_0_payload_tuser_delay_18 <= io_inputs_0_payload_tuser_delay_17;
      io_inputs_0_payload_tuser_delay_19 <= io_inputs_0_payload_tuser_delay_18;
      io_inputs_0_payload_tuser_delay_20 <= io_inputs_0_payload_tuser_delay_19;
      io_inputs_0_payload_tuser_delay_21 <= io_inputs_0_payload_tuser_delay_20;
      io_inputs_0_payload_tuser_delay_22 <= io_inputs_0_payload_tuser_delay_21;
      io_inputs_0_payload_tuser_delay_23 <= io_inputs_0_payload_tuser_delay_22;
      io_inputs_0_payload_tuser_delay_24 <= io_inputs_0_payload_tuser_delay_23;
      io_inputs_0_payload_tuser_delay_25 <= io_inputs_0_payload_tuser_delay_24;
      io_inputs_0_payload_tuser_delay_26 <= io_inputs_0_payload_tuser_delay_25;
      io_inputs_0_payload_tuser_delay_27 <= io_inputs_0_payload_tuser_delay_26;
      io_inputs_0_payload_tuser_delay_28 <= io_inputs_0_payload_tuser_delay_27;
      io_inputs_0_payload_tuser_delay_29 <= io_inputs_0_payload_tuser_delay_28;
      io_inputs_0_payload_tuser_delay_30 <= io_inputs_0_payload_tuser_delay_29;
      io_inputs_0_payload_tuser_delay_31 <= io_inputs_0_payload_tuser_delay_30;
      io_inputs_0_payload_tuser_delay_32 <= io_inputs_0_payload_tuser_delay_31;
      io_inputs_0_payload_tuser_delay_33 <= io_inputs_0_payload_tuser_delay_32;
      io_inputs_0_payload_tuser_delay_34 <= io_inputs_0_payload_tuser_delay_33;
      io_inputs_0_payload_tuser_delay_35 <= io_inputs_0_payload_tuser_delay_34;
      io_inputs_0_payload_tuser_delay_36 <= io_inputs_0_payload_tuser_delay_35;
      io_inputs_0_payload_tuser_delay_37 <= io_inputs_0_payload_tuser_delay_36;
      io_inputs_0_payload_tuser_delay_38 <= io_inputs_0_payload_tuser_delay_37;
      io_inputs_0_payload_tuser_delay_39 <= io_inputs_0_payload_tuser_delay_38;
      io_inputs_0_payload_tuser_delay_40 <= io_inputs_0_payload_tuser_delay_39;
      io_inputs_0_payload_tuser_delay_41 <= io_inputs_0_payload_tuser_delay_40;
      io_inputs_0_payload_tuser_delay_42 <= io_inputs_0_payload_tuser_delay_41;
      io_inputs_0_payload_tuser_delay_43 <= io_inputs_0_payload_tuser_delay_42;
      io_inputs_0_payload_tuser_delay_44 <= io_inputs_0_payload_tuser_delay_43;
      io_inputs_0_payload_tuser_delay_45 <= io_inputs_0_payload_tuser_delay_44;
      io_inputs_0_payload_tuser_delay_46 <= io_inputs_0_payload_tuser_delay_45;
      io_inputs_0_payload_tuser_delay_47 <= io_inputs_0_payload_tuser_delay_46;
      io_inputs_0_payload_tuser_delay_48 <= io_inputs_0_payload_tuser_delay_47;
      io_inputs_0_payload_tuser_delay_49 <= io_inputs_0_payload_tuser_delay_48;
      io_inputs_0_payload_tuser_delay_50 <= io_inputs_0_payload_tuser_delay_49;
      io_inputs_0_payload_tuser_delay_51 <= io_inputs_0_payload_tuser_delay_50;
      io_inputs_0_payload_tuser_delay_52 <= io_inputs_0_payload_tuser_delay_51;
      io_inputs_0_payload_tuser_delay_53 <= io_inputs_0_payload_tuser_delay_52;
      io_inputs_0_payload_tuser_delay_54 <= io_inputs_0_payload_tuser_delay_53;
      io_inputs_0_payload_tuser_delay_55 <= io_inputs_0_payload_tuser_delay_54;
      io_inputs_0_payload_tuser_delay_56 <= io_inputs_0_payload_tuser_delay_55;
      tuserDly <= io_inputs_0_payload_tuser_delay_56;
    end
  end


endmodule

//MulAddEngineNew_3 replaced by MulAddEngineNew

//MulAddEngineNew_2 replaced by MulAddEngineNew

//MulAddEngineNew_1 replaced by MulAddEngineNew

module MulAddEngineNew (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [511:0]  wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [511:0]  dotIn_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          preScale_tvalid,
  output wire          preScale_tready,
  input  wire [15:0]   preScale_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [511:0]  resAdd_tdata,
  output wire          vecOut_tvalid,
  output wire [511:0]  vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire          scalarOut_tlast,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output reg           cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [5:0]    postCfgTag,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                mul_wkvIn_tready;
  wire                mul_dotIn_tready;
  wire                mul_axpyIn_tready;
  wire                mul_scale_tready;
  wire                mul_output_tvalid;
  wire       [511:0]  mul_output_tdata;
  wire                mul_cfg_tready;
  wire       [5:0]    mul_preCfgTag;
  wire       [15:0]   mul_secondDim;
  wire                mul_popVldNext;
  wire                add_mulRes_tready;
  wire                add_resAdd_tready;
  wire                add_vecOut_tvalid;
  wire       [511:0]  add_vecOut_tdata;
  wire       [5:0]    add_vecOut_tuser;
  wire                add_scalarOut_tvalid;
  wire                add_scalarOut_tlast;
  wire       [15:0]   add_scalarOut_tdata;
  wire       [5:0]    add_scalarOut_tuser;
  wire                add_cfg_tready;
  wire       [5:0]    add_postCfgTag;
  wire                toMul_valid;
  reg                 toMul_ready;
  wire       [31:0]   toMul_payload;
  wire                toAdd_valid;
  reg                 toAdd_ready;
  wire       [31:0]   toAdd_payload;
  reg                 cfg_fork2_logic_linkEnable_0;
  reg                 cfg_fork2_logic_linkEnable_1;
  wire                toMul_fire;
  wire                toAdd_fire;
  wire                toMulPipe_valid;
  wire                toMulPipe_ready;
  wire       [31:0]   toMulPipe_payload;
  reg                 toMul_rValid;
  reg        [31:0]   toMul_rData;
  wire                toAddPipe_valid;
  wire                toAddPipe_ready;
  wire       [31:0]   toAddPipe_payload;
  reg                 toAdd_rValid;
  reg        [31:0]   toAdd_rData;

  MulEngine_3 mul (
    .wkvIn_tvalid  (wkvIn_tvalid           ), //i
    .wkvIn_tready  (mul_wkvIn_tready       ), //o
    .wkvIn_tdata   (wkvIn_tdata[511:0]     ), //i
    .dotIn_tvalid  (dotIn_tvalid           ), //i
    .dotIn_tready  (mul_dotIn_tready       ), //o
    .dotIn_tdata   (dotIn_tdata[511:0]     ), //i
    .axpyIn_tvalid (axpyIn_tvalid          ), //i
    .axpyIn_tready (mul_axpyIn_tready      ), //o
    .axpyIn_tdata  (axpyIn_tdata[15:0]     ), //i
    .scale_tvalid  (preScale_tvalid        ), //i
    .scale_tready  (mul_scale_tready       ), //o
    .scale_tdata   (preScale_tdata[15:0]   ), //i
    .output_tvalid (mul_output_tvalid      ), //o
    .output_tready (add_mulRes_tready      ), //i
    .output_tdata  (mul_output_tdata[511:0]), //o
    .cfg_tvalid    (toMulPipe_valid        ), //i
    .cfg_tready    (mul_cfg_tready         ), //o
    .cfg_tdata     (toMulPipe_payload[31:0]), //i
    .preCfgTag     (mul_preCfgTag[5:0]     ), //o
    .secondDim     (mul_secondDim[15:0]    ), //o
    .clk_1_clk     (clk_1_clk              ), //i
    .popVldNext    (mul_popVldNext         ), //o
    .clk_1_resetn  (clk_1_resetn           )  //i
  );
  AddEngineNew_3 add (
    .mulRes_tvalid    (mul_output_tvalid        ), //i
    .mulRes_tready    (add_mulRes_tready        ), //o
    .mulRes_tdata     (mul_output_tdata[511:0]  ), //i
    .resAdd_tvalid    (resAdd_tvalid            ), //i
    .resAdd_tready    (add_resAdd_tready        ), //o
    .resAdd_tdata     (resAdd_tdata[511:0]      ), //i
    .vecOut_tvalid    (add_vecOut_tvalid        ), //o
    .vecOut_tdata     (add_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (add_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (add_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (add_scalarOut_tlast      ), //o
    .scalarOut_tdata  (add_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (add_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (toAddPipe_valid          ), //i
    .cfg_tready       (add_cfg_tready           ), //o
    .cfg_tdata        (toAddPipe_payload[31:0]  ), //i
    .postCfgTag       (add_postCfgTag[5:0]      ), //o
    .popVldNext       (mul_popVldNext           ), //i
    .clk_1_clk        (clk_1_clk                ), //i
    .clk_1_resetn     (clk_1_resetn             )  //i
  );
  always @(*) begin
    cfg_tready = 1'b1;
    if(((! toMul_ready) && cfg_fork2_logic_linkEnable_0)) begin
      cfg_tready = 1'b0;
    end
    if(((! toAdd_ready) && cfg_fork2_logic_linkEnable_1)) begin
      cfg_tready = 1'b0;
    end
  end

  assign toMul_valid = (cfg_tvalid && cfg_fork2_logic_linkEnable_0);
  assign toMul_payload = cfg_tdata;
  assign toMul_fire = (toMul_valid && toMul_ready);
  assign toAdd_valid = (cfg_tvalid && cfg_fork2_logic_linkEnable_1);
  assign toAdd_payload = cfg_tdata;
  assign toAdd_fire = (toAdd_valid && toAdd_ready);
  always @(*) begin
    toMul_ready = toMulPipe_ready;
    if((! toMulPipe_valid)) begin
      toMul_ready = 1'b1;
    end
  end

  assign toMulPipe_valid = toMul_rValid;
  assign toMulPipe_payload = toMul_rData;
  always @(*) begin
    toAdd_ready = toAddPipe_ready;
    if((! toAddPipe_valid)) begin
      toAdd_ready = 1'b1;
    end
  end

  assign toAddPipe_valid = toAdd_rValid;
  assign toAddPipe_payload = toAdd_rData;
  assign wkvIn_tready = mul_wkvIn_tready;
  assign dotIn_tready = mul_dotIn_tready;
  assign axpyIn_tready = mul_axpyIn_tready;
  assign preScale_tready = mul_scale_tready;
  assign toMulPipe_ready = mul_cfg_tready;
  assign resAdd_tready = add_resAdd_tready;
  assign toAddPipe_ready = add_cfg_tready;
  assign vecOut_tvalid = add_vecOut_tvalid;
  assign vecOut_tdata = add_vecOut_tdata;
  assign vecOut_tuser = add_vecOut_tuser;
  assign scalarOut_tvalid = add_scalarOut_tvalid;
  assign scalarOut_tlast = add_scalarOut_tlast;
  assign scalarOut_tdata = add_scalarOut_tdata;
  assign scalarOut_tuser = add_scalarOut_tuser;
  assign preCfgTag = mul_preCfgTag;
  assign postCfgTag = add_postCfgTag;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cfg_fork2_logic_linkEnable_0 <= 1'b1;
      cfg_fork2_logic_linkEnable_1 <= 1'b1;
      toMul_rValid <= 1'b0;
      toAdd_rValid <= 1'b0;
    end else begin
      if(toMul_fire) begin
        cfg_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(toAdd_fire) begin
        cfg_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(cfg_tready) begin
        cfg_fork2_logic_linkEnable_0 <= 1'b1;
        cfg_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(toMul_ready) begin
        toMul_rValid <= toMul_valid;
      end
      if(toAdd_ready) begin
        toAdd_rValid <= toAdd_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(toMul_ready) begin
      toMul_rData <= toMul_payload;
    end
    if(toAdd_ready) begin
      toAdd_rData <= toAdd_payload;
    end
  end


endmodule

module StreamFifo_9 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  (* max_fanout = 100 *) output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamDemux replaced by StreamDemux_6

module LargeBankFifo (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [2047:0] io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [2047:0] io_pop_payload,
  output wire [4:0]    io_occupancy,
  output wire [4:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [511:0]  fifo_0_io_pop_payload;
  wire       [4:0]    fifo_0_io_occupancy;
  wire       [4:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [511:0]  fifo_1_io_pop_payload;
  wire       [4:0]    fifo_1_io_occupancy;
  wire       [4:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [511:0]  fifo_2_io_pop_payload;
  wire       [4:0]    fifo_2_io_occupancy;
  wire       [4:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [511:0]  fifo_3_io_pop_payload;
  wire       [4:0]    fifo_3_io_occupancy;
  wire       [4:0]    fifo_3_io_availability;
  wire       [2047:0] t_inPydSplit_0;
  wire       [511:0]  inPydSplit_0;
  wire       [511:0]  inPydSplit_1;
  wire       [511:0]  inPydSplit_2;
  wire       [511:0]  inPydSplit_3;
  wire       [2047:0] outPydMerge;

  StreamFifo_65 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[511:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[4:0]    ), //o
    .io_availability (fifo_0_io_availability[4:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_65 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[511:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[4:0]    ), //o
    .io_availability (fifo_1_io_availability[4:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_65 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[511:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[4:0]    ), //o
    .io_availability (fifo_2_io_availability[4:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_65 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[511:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[4:0]    ), //o
    .io_availability (fifo_3_io_availability[4:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[511 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[1023 : 512];
  assign inPydSplit_2 = t_inPydSplit_0[1535 : 1024];
  assign inPydSplit_3 = t_inPydSplit_0[2047 : 1536];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

module Serial2Parallel (
  input  wire          input_valid,
  input  wire [15:0]   input_tdata,
  input  wire [5:0]    input_tuser,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [1791:0] t_output_tdata_128;
  wire       [1535:0] t_output_tdata_129;
  wire       [1279:0] t_output_tdata_130;
  wire       [1023:0] t_output_tdata_131;
  wire       [767:0]  t_output_tdata_132;
  wire       [511:0]  t_output_tdata_133;
  wire       [255:0]  t_output_tdata_134;
  reg        [15:0]   dataDly;
  reg        [5:0]    userDly;
  (* max_fanout = 100 , keep = "true" *) reg                 vldDly;
  (* max_fanout = 100 , keep = "true" *) reg                 outVld;
  (* max_fanout = 100 *) reg                 outVldCond;
  reg        [6:0]    cnt;
  wire                cntAboutToOvf;
  wire                cntOvf;
  wire       [15:0]   t_output_tdata;
  reg        [15:0]   t_output_tdata_1;
  reg        [15:0]   t_output_tdata_2;
  reg        [15:0]   t_output_tdata_3;
  reg        [15:0]   t_output_tdata_4;
  reg        [15:0]   t_output_tdata_5;
  reg        [15:0]   t_output_tdata_6;
  reg        [15:0]   t_output_tdata_7;
  reg        [15:0]   t_output_tdata_8;
  reg        [15:0]   t_output_tdata_9;
  reg        [15:0]   t_output_tdata_10;
  reg        [15:0]   t_output_tdata_11;
  reg        [15:0]   t_output_tdata_12;
  reg        [15:0]   t_output_tdata_13;
  reg        [15:0]   t_output_tdata_14;
  reg        [15:0]   t_output_tdata_15;
  reg        [15:0]   t_output_tdata_16;
  reg        [15:0]   t_output_tdata_17;
  reg        [15:0]   t_output_tdata_18;
  reg        [15:0]   t_output_tdata_19;
  reg        [15:0]   t_output_tdata_20;
  reg        [15:0]   t_output_tdata_21;
  reg        [15:0]   t_output_tdata_22;
  reg        [15:0]   t_output_tdata_23;
  reg        [15:0]   t_output_tdata_24;
  reg        [15:0]   t_output_tdata_25;
  reg        [15:0]   t_output_tdata_26;
  reg        [15:0]   t_output_tdata_27;
  reg        [15:0]   t_output_tdata_28;
  reg        [15:0]   t_output_tdata_29;
  reg        [15:0]   t_output_tdata_30;
  reg        [15:0]   t_output_tdata_31;
  reg        [15:0]   t_output_tdata_32;
  reg        [15:0]   t_output_tdata_33;
  reg        [15:0]   t_output_tdata_34;
  reg        [15:0]   t_output_tdata_35;
  reg        [15:0]   t_output_tdata_36;
  reg        [15:0]   t_output_tdata_37;
  reg        [15:0]   t_output_tdata_38;
  reg        [15:0]   t_output_tdata_39;
  reg        [15:0]   t_output_tdata_40;
  reg        [15:0]   t_output_tdata_41;
  reg        [15:0]   t_output_tdata_42;
  reg        [15:0]   t_output_tdata_43;
  reg        [15:0]   t_output_tdata_44;
  reg        [15:0]   t_output_tdata_45;
  reg        [15:0]   t_output_tdata_46;
  reg        [15:0]   t_output_tdata_47;
  reg        [15:0]   t_output_tdata_48;
  reg        [15:0]   t_output_tdata_49;
  reg        [15:0]   t_output_tdata_50;
  reg        [15:0]   t_output_tdata_51;
  reg        [15:0]   t_output_tdata_52;
  reg        [15:0]   t_output_tdata_53;
  reg        [15:0]   t_output_tdata_54;
  reg        [15:0]   t_output_tdata_55;
  reg        [15:0]   t_output_tdata_56;
  reg        [15:0]   t_output_tdata_57;
  reg        [15:0]   t_output_tdata_58;
  reg        [15:0]   t_output_tdata_59;
  reg        [15:0]   t_output_tdata_60;
  reg        [15:0]   t_output_tdata_61;
  reg        [15:0]   t_output_tdata_62;
  reg        [15:0]   t_output_tdata_63;
  reg        [15:0]   t_output_tdata_64;
  reg        [15:0]   t_output_tdata_65;
  reg        [15:0]   t_output_tdata_66;
  reg        [15:0]   t_output_tdata_67;
  reg        [15:0]   t_output_tdata_68;
  reg        [15:0]   t_output_tdata_69;
  reg        [15:0]   t_output_tdata_70;
  reg        [15:0]   t_output_tdata_71;
  reg        [15:0]   t_output_tdata_72;
  reg        [15:0]   t_output_tdata_73;
  reg        [15:0]   t_output_tdata_74;
  reg        [15:0]   t_output_tdata_75;
  reg        [15:0]   t_output_tdata_76;
  reg        [15:0]   t_output_tdata_77;
  reg        [15:0]   t_output_tdata_78;
  reg        [15:0]   t_output_tdata_79;
  reg        [15:0]   t_output_tdata_80;
  reg        [15:0]   t_output_tdata_81;
  reg        [15:0]   t_output_tdata_82;
  reg        [15:0]   t_output_tdata_83;
  reg        [15:0]   t_output_tdata_84;
  reg        [15:0]   t_output_tdata_85;
  reg        [15:0]   t_output_tdata_86;
  reg        [15:0]   t_output_tdata_87;
  reg        [15:0]   t_output_tdata_88;
  reg        [15:0]   t_output_tdata_89;
  reg        [15:0]   t_output_tdata_90;
  reg        [15:0]   t_output_tdata_91;
  reg        [15:0]   t_output_tdata_92;
  reg        [15:0]   t_output_tdata_93;
  reg        [15:0]   t_output_tdata_94;
  reg        [15:0]   t_output_tdata_95;
  reg        [15:0]   t_output_tdata_96;
  reg        [15:0]   t_output_tdata_97;
  reg        [15:0]   t_output_tdata_98;
  reg        [15:0]   t_output_tdata_99;
  reg        [15:0]   t_output_tdata_100;
  reg        [15:0]   t_output_tdata_101;
  reg        [15:0]   t_output_tdata_102;
  reg        [15:0]   t_output_tdata_103;
  reg        [15:0]   t_output_tdata_104;
  reg        [15:0]   t_output_tdata_105;
  reg        [15:0]   t_output_tdata_106;
  reg        [15:0]   t_output_tdata_107;
  reg        [15:0]   t_output_tdata_108;
  reg        [15:0]   t_output_tdata_109;
  reg        [15:0]   t_output_tdata_110;
  reg        [15:0]   t_output_tdata_111;
  reg        [15:0]   t_output_tdata_112;
  reg        [15:0]   t_output_tdata_113;
  reg        [15:0]   t_output_tdata_114;
  reg        [15:0]   t_output_tdata_115;
  reg        [15:0]   t_output_tdata_116;
  reg        [15:0]   t_output_tdata_117;
  reg        [15:0]   t_output_tdata_118;
  reg        [15:0]   t_output_tdata_119;
  reg        [15:0]   t_output_tdata_120;
  reg        [15:0]   t_output_tdata_121;
  reg        [15:0]   t_output_tdata_122;
  reg        [15:0]   t_output_tdata_123;
  reg        [15:0]   t_output_tdata_124;
  reg        [15:0]   t_output_tdata_125;
  reg        [15:0]   t_output_tdata_126;
  reg        [15:0]   t_output_tdata_127;

  assign t_output_tdata_128 = {t_output_tdata_16,{t_output_tdata_17,{t_output_tdata_18,{t_output_tdata_19,{t_output_tdata_20,{t_output_tdata_21,{t_output_tdata_22,{t_output_tdata_23,{t_output_tdata_24,{t_output_tdata_25,{t_output_tdata_26,{t_output_tdata_27,{t_output_tdata_28,{t_output_tdata_29,{t_output_tdata_30,{t_output_tdata_31,t_output_tdata_129}}}}}}}}}}}}}}}};
  assign t_output_tdata_129 = {t_output_tdata_32,{t_output_tdata_33,{t_output_tdata_34,{t_output_tdata_35,{t_output_tdata_36,{t_output_tdata_37,{t_output_tdata_38,{t_output_tdata_39,{t_output_tdata_40,{t_output_tdata_41,{t_output_tdata_42,{t_output_tdata_43,{t_output_tdata_44,{t_output_tdata_45,{t_output_tdata_46,{t_output_tdata_47,t_output_tdata_130}}}}}}}}}}}}}}}};
  assign t_output_tdata_130 = {t_output_tdata_48,{t_output_tdata_49,{t_output_tdata_50,{t_output_tdata_51,{t_output_tdata_52,{t_output_tdata_53,{t_output_tdata_54,{t_output_tdata_55,{t_output_tdata_56,{t_output_tdata_57,{t_output_tdata_58,{t_output_tdata_59,{t_output_tdata_60,{t_output_tdata_61,{t_output_tdata_62,{t_output_tdata_63,t_output_tdata_131}}}}}}}}}}}}}}}};
  assign t_output_tdata_131 = {t_output_tdata_64,{t_output_tdata_65,{t_output_tdata_66,{t_output_tdata_67,{t_output_tdata_68,{t_output_tdata_69,{t_output_tdata_70,{t_output_tdata_71,{t_output_tdata_72,{t_output_tdata_73,{t_output_tdata_74,{t_output_tdata_75,{t_output_tdata_76,{t_output_tdata_77,{t_output_tdata_78,{t_output_tdata_79,t_output_tdata_132}}}}}}}}}}}}}}}};
  assign t_output_tdata_132 = {t_output_tdata_80,{t_output_tdata_81,{t_output_tdata_82,{t_output_tdata_83,{t_output_tdata_84,{t_output_tdata_85,{t_output_tdata_86,{t_output_tdata_87,{t_output_tdata_88,{t_output_tdata_89,{t_output_tdata_90,{t_output_tdata_91,{t_output_tdata_92,{t_output_tdata_93,{t_output_tdata_94,{t_output_tdata_95,t_output_tdata_133}}}}}}}}}}}}}}}};
  assign t_output_tdata_133 = {t_output_tdata_96,{t_output_tdata_97,{t_output_tdata_98,{t_output_tdata_99,{t_output_tdata_100,{t_output_tdata_101,{t_output_tdata_102,{t_output_tdata_103,{t_output_tdata_104,{t_output_tdata_105,{t_output_tdata_106,{t_output_tdata_107,{t_output_tdata_108,{t_output_tdata_109,{t_output_tdata_110,{t_output_tdata_111,t_output_tdata_134}}}}}}}}}}}}}}}};
  assign t_output_tdata_134 = {t_output_tdata_112,{t_output_tdata_113,{t_output_tdata_114,{t_output_tdata_115,{t_output_tdata_116,{t_output_tdata_117,{t_output_tdata_118,{t_output_tdata_119,{t_output_tdata_120,{t_output_tdata_121,{t_output_tdata_122,{t_output_tdata_123,{t_output_tdata_124,{t_output_tdata_125,{t_output_tdata_126,t_output_tdata_127}}}}}}}}}}}}}}};
  assign cntAboutToOvf = (cnt == 7'h7e);
  assign cntOvf = (cnt == 7'h7f);
  assign t_output_tdata = dataDly;
  assign output_tdata = {t_output_tdata,{t_output_tdata_1,{t_output_tdata_2,{t_output_tdata_3,{t_output_tdata_4,{t_output_tdata_5,{t_output_tdata_6,{t_output_tdata_7,{t_output_tdata_8,{t_output_tdata_9,{t_output_tdata_10,{t_output_tdata_11,{t_output_tdata_12,{t_output_tdata_13,{t_output_tdata_14,{t_output_tdata_15,t_output_tdata_128}}}}}}}}}}}}}}}};
  assign output_tvalid = (outVldCond && vldDly);
  assign output_tuser = userDly;
  always @(posedge clk_1_clk) begin
    dataDly <= input_tdata;
    userDly <= input_tuser;
    if(vldDly) begin
      t_output_tdata_1 <= t_output_tdata;
    end
    if(vldDly) begin
      t_output_tdata_2 <= t_output_tdata_1;
    end
    if(vldDly) begin
      t_output_tdata_3 <= t_output_tdata_2;
    end
    if(vldDly) begin
      t_output_tdata_4 <= t_output_tdata_3;
    end
    if(vldDly) begin
      t_output_tdata_5 <= t_output_tdata_4;
    end
    if(vldDly) begin
      t_output_tdata_6 <= t_output_tdata_5;
    end
    if(vldDly) begin
      t_output_tdata_7 <= t_output_tdata_6;
    end
    if(vldDly) begin
      t_output_tdata_8 <= t_output_tdata_7;
    end
    if(vldDly) begin
      t_output_tdata_9 <= t_output_tdata_8;
    end
    if(vldDly) begin
      t_output_tdata_10 <= t_output_tdata_9;
    end
    if(vldDly) begin
      t_output_tdata_11 <= t_output_tdata_10;
    end
    if(vldDly) begin
      t_output_tdata_12 <= t_output_tdata_11;
    end
    if(vldDly) begin
      t_output_tdata_13 <= t_output_tdata_12;
    end
    if(vldDly) begin
      t_output_tdata_14 <= t_output_tdata_13;
    end
    if(vldDly) begin
      t_output_tdata_15 <= t_output_tdata_14;
    end
    if(vldDly) begin
      t_output_tdata_16 <= t_output_tdata_15;
    end
    if(vldDly) begin
      t_output_tdata_17 <= t_output_tdata_16;
    end
    if(vldDly) begin
      t_output_tdata_18 <= t_output_tdata_17;
    end
    if(vldDly) begin
      t_output_tdata_19 <= t_output_tdata_18;
    end
    if(vldDly) begin
      t_output_tdata_20 <= t_output_tdata_19;
    end
    if(vldDly) begin
      t_output_tdata_21 <= t_output_tdata_20;
    end
    if(vldDly) begin
      t_output_tdata_22 <= t_output_tdata_21;
    end
    if(vldDly) begin
      t_output_tdata_23 <= t_output_tdata_22;
    end
    if(vldDly) begin
      t_output_tdata_24 <= t_output_tdata_23;
    end
    if(vldDly) begin
      t_output_tdata_25 <= t_output_tdata_24;
    end
    if(vldDly) begin
      t_output_tdata_26 <= t_output_tdata_25;
    end
    if(vldDly) begin
      t_output_tdata_27 <= t_output_tdata_26;
    end
    if(vldDly) begin
      t_output_tdata_28 <= t_output_tdata_27;
    end
    if(vldDly) begin
      t_output_tdata_29 <= t_output_tdata_28;
    end
    if(vldDly) begin
      t_output_tdata_30 <= t_output_tdata_29;
    end
    if(vldDly) begin
      t_output_tdata_31 <= t_output_tdata_30;
    end
    if(vldDly) begin
      t_output_tdata_32 <= t_output_tdata_31;
    end
    if(vldDly) begin
      t_output_tdata_33 <= t_output_tdata_32;
    end
    if(vldDly) begin
      t_output_tdata_34 <= t_output_tdata_33;
    end
    if(vldDly) begin
      t_output_tdata_35 <= t_output_tdata_34;
    end
    if(vldDly) begin
      t_output_tdata_36 <= t_output_tdata_35;
    end
    if(vldDly) begin
      t_output_tdata_37 <= t_output_tdata_36;
    end
    if(vldDly) begin
      t_output_tdata_38 <= t_output_tdata_37;
    end
    if(vldDly) begin
      t_output_tdata_39 <= t_output_tdata_38;
    end
    if(vldDly) begin
      t_output_tdata_40 <= t_output_tdata_39;
    end
    if(vldDly) begin
      t_output_tdata_41 <= t_output_tdata_40;
    end
    if(vldDly) begin
      t_output_tdata_42 <= t_output_tdata_41;
    end
    if(vldDly) begin
      t_output_tdata_43 <= t_output_tdata_42;
    end
    if(vldDly) begin
      t_output_tdata_44 <= t_output_tdata_43;
    end
    if(vldDly) begin
      t_output_tdata_45 <= t_output_tdata_44;
    end
    if(vldDly) begin
      t_output_tdata_46 <= t_output_tdata_45;
    end
    if(vldDly) begin
      t_output_tdata_47 <= t_output_tdata_46;
    end
    if(vldDly) begin
      t_output_tdata_48 <= t_output_tdata_47;
    end
    if(vldDly) begin
      t_output_tdata_49 <= t_output_tdata_48;
    end
    if(vldDly) begin
      t_output_tdata_50 <= t_output_tdata_49;
    end
    if(vldDly) begin
      t_output_tdata_51 <= t_output_tdata_50;
    end
    if(vldDly) begin
      t_output_tdata_52 <= t_output_tdata_51;
    end
    if(vldDly) begin
      t_output_tdata_53 <= t_output_tdata_52;
    end
    if(vldDly) begin
      t_output_tdata_54 <= t_output_tdata_53;
    end
    if(vldDly) begin
      t_output_tdata_55 <= t_output_tdata_54;
    end
    if(vldDly) begin
      t_output_tdata_56 <= t_output_tdata_55;
    end
    if(vldDly) begin
      t_output_tdata_57 <= t_output_tdata_56;
    end
    if(vldDly) begin
      t_output_tdata_58 <= t_output_tdata_57;
    end
    if(vldDly) begin
      t_output_tdata_59 <= t_output_tdata_58;
    end
    if(vldDly) begin
      t_output_tdata_60 <= t_output_tdata_59;
    end
    if(vldDly) begin
      t_output_tdata_61 <= t_output_tdata_60;
    end
    if(vldDly) begin
      t_output_tdata_62 <= t_output_tdata_61;
    end
    if(vldDly) begin
      t_output_tdata_63 <= t_output_tdata_62;
    end
    if(vldDly) begin
      t_output_tdata_64 <= t_output_tdata_63;
    end
    if(vldDly) begin
      t_output_tdata_65 <= t_output_tdata_64;
    end
    if(vldDly) begin
      t_output_tdata_66 <= t_output_tdata_65;
    end
    if(vldDly) begin
      t_output_tdata_67 <= t_output_tdata_66;
    end
    if(vldDly) begin
      t_output_tdata_68 <= t_output_tdata_67;
    end
    if(vldDly) begin
      t_output_tdata_69 <= t_output_tdata_68;
    end
    if(vldDly) begin
      t_output_tdata_70 <= t_output_tdata_69;
    end
    if(vldDly) begin
      t_output_tdata_71 <= t_output_tdata_70;
    end
    if(vldDly) begin
      t_output_tdata_72 <= t_output_tdata_71;
    end
    if(vldDly) begin
      t_output_tdata_73 <= t_output_tdata_72;
    end
    if(vldDly) begin
      t_output_tdata_74 <= t_output_tdata_73;
    end
    if(vldDly) begin
      t_output_tdata_75 <= t_output_tdata_74;
    end
    if(vldDly) begin
      t_output_tdata_76 <= t_output_tdata_75;
    end
    if(vldDly) begin
      t_output_tdata_77 <= t_output_tdata_76;
    end
    if(vldDly) begin
      t_output_tdata_78 <= t_output_tdata_77;
    end
    if(vldDly) begin
      t_output_tdata_79 <= t_output_tdata_78;
    end
    if(vldDly) begin
      t_output_tdata_80 <= t_output_tdata_79;
    end
    if(vldDly) begin
      t_output_tdata_81 <= t_output_tdata_80;
    end
    if(vldDly) begin
      t_output_tdata_82 <= t_output_tdata_81;
    end
    if(vldDly) begin
      t_output_tdata_83 <= t_output_tdata_82;
    end
    if(vldDly) begin
      t_output_tdata_84 <= t_output_tdata_83;
    end
    if(vldDly) begin
      t_output_tdata_85 <= t_output_tdata_84;
    end
    if(vldDly) begin
      t_output_tdata_86 <= t_output_tdata_85;
    end
    if(vldDly) begin
      t_output_tdata_87 <= t_output_tdata_86;
    end
    if(vldDly) begin
      t_output_tdata_88 <= t_output_tdata_87;
    end
    if(vldDly) begin
      t_output_tdata_89 <= t_output_tdata_88;
    end
    if(vldDly) begin
      t_output_tdata_90 <= t_output_tdata_89;
    end
    if(vldDly) begin
      t_output_tdata_91 <= t_output_tdata_90;
    end
    if(vldDly) begin
      t_output_tdata_92 <= t_output_tdata_91;
    end
    if(vldDly) begin
      t_output_tdata_93 <= t_output_tdata_92;
    end
    if(vldDly) begin
      t_output_tdata_94 <= t_output_tdata_93;
    end
    if(vldDly) begin
      t_output_tdata_95 <= t_output_tdata_94;
    end
    if(vldDly) begin
      t_output_tdata_96 <= t_output_tdata_95;
    end
    if(vldDly) begin
      t_output_tdata_97 <= t_output_tdata_96;
    end
    if(vldDly) begin
      t_output_tdata_98 <= t_output_tdata_97;
    end
    if(vldDly) begin
      t_output_tdata_99 <= t_output_tdata_98;
    end
    if(vldDly) begin
      t_output_tdata_100 <= t_output_tdata_99;
    end
    if(vldDly) begin
      t_output_tdata_101 <= t_output_tdata_100;
    end
    if(vldDly) begin
      t_output_tdata_102 <= t_output_tdata_101;
    end
    if(vldDly) begin
      t_output_tdata_103 <= t_output_tdata_102;
    end
    if(vldDly) begin
      t_output_tdata_104 <= t_output_tdata_103;
    end
    if(vldDly) begin
      t_output_tdata_105 <= t_output_tdata_104;
    end
    if(vldDly) begin
      t_output_tdata_106 <= t_output_tdata_105;
    end
    if(vldDly) begin
      t_output_tdata_107 <= t_output_tdata_106;
    end
    if(vldDly) begin
      t_output_tdata_108 <= t_output_tdata_107;
    end
    if(vldDly) begin
      t_output_tdata_109 <= t_output_tdata_108;
    end
    if(vldDly) begin
      t_output_tdata_110 <= t_output_tdata_109;
    end
    if(vldDly) begin
      t_output_tdata_111 <= t_output_tdata_110;
    end
    if(vldDly) begin
      t_output_tdata_112 <= t_output_tdata_111;
    end
    if(vldDly) begin
      t_output_tdata_113 <= t_output_tdata_112;
    end
    if(vldDly) begin
      t_output_tdata_114 <= t_output_tdata_113;
    end
    if(vldDly) begin
      t_output_tdata_115 <= t_output_tdata_114;
    end
    if(vldDly) begin
      t_output_tdata_116 <= t_output_tdata_115;
    end
    if(vldDly) begin
      t_output_tdata_117 <= t_output_tdata_116;
    end
    if(vldDly) begin
      t_output_tdata_118 <= t_output_tdata_117;
    end
    if(vldDly) begin
      t_output_tdata_119 <= t_output_tdata_118;
    end
    if(vldDly) begin
      t_output_tdata_120 <= t_output_tdata_119;
    end
    if(vldDly) begin
      t_output_tdata_121 <= t_output_tdata_120;
    end
    if(vldDly) begin
      t_output_tdata_122 <= t_output_tdata_121;
    end
    if(vldDly) begin
      t_output_tdata_123 <= t_output_tdata_122;
    end
    if(vldDly) begin
      t_output_tdata_124 <= t_output_tdata_123;
    end
    if(vldDly) begin
      t_output_tdata_125 <= t_output_tdata_124;
    end
    if(vldDly) begin
      t_output_tdata_126 <= t_output_tdata_125;
    end
    if(vldDly) begin
      t_output_tdata_127 <= t_output_tdata_126;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      vldDly <= 1'b0;
      outVld <= 1'b0;
      outVldCond <= 1'b0;
      cnt <= 7'h0;
    end else begin
      vldDly <= input_valid;
      outVld <= input_valid;
      if(vldDly) begin
        cnt <= (cnt + 7'h01);
        if(cntAboutToOvf) begin
          outVldCond <= 1'b1;
        end
        if(cntOvf) begin
          outVldCond <= 1'b0;
          cnt <= 7'h0;
        end
      end
    end
  end


endmodule

//StreamFifo_10 replaced by StreamFifo_69

module VecOutBuf (
  input  wire          io_input_valid,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [2047:0] io_output_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                pushStatus_prefillIn_fifo_io_pop_ready;
  wire                popStatus_prefillIn_fifo_io_pop_ready;
  reg        [127:0]  ram_mem_0_spinal_port1;
  reg        [127:0]  ram_mem_1_spinal_port1;
  reg        [127:0]  ram_mem_2_spinal_port1;
  reg        [127:0]  ram_mem_3_spinal_port1;
  reg        [127:0]  ram_mem_4_spinal_port1;
  reg        [127:0]  ram_mem_5_spinal_port1;
  reg        [127:0]  ram_mem_6_spinal_port1;
  reg        [127:0]  ram_mem_7_spinal_port1;
  reg        [127:0]  ram_mem_8_spinal_port1;
  reg        [127:0]  ram_mem_9_spinal_port1;
  reg        [127:0]  ram_mem_10_spinal_port1;
  reg        [127:0]  ram_mem_11_spinal_port1;
  reg        [127:0]  ram_mem_12_spinal_port1;
  reg        [127:0]  ram_mem_13_spinal_port1;
  reg        [127:0]  ram_mem_14_spinal_port1;
  reg        [127:0]  ram_mem_15_spinal_port1;
  wire                pushStatus_prefillIn_fifo_io_push_ready;
  wire                pushStatus_prefillIn_fifo_io_pop_valid;
  wire                pushStatus_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    pushStatus_prefillIn_fifo_io_occupancy;
  wire       [6:0]    pushStatus_prefillIn_fifo_io_availability;
  wire                popStatus_prefillIn_fifo_io_push_ready;
  wire                popStatus_prefillIn_fifo_io_pop_valid;
  wire                popStatus_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    popStatus_prefillIn_fifo_io_occupancy;
  wire       [6:0]    popStatus_prefillIn_fifo_io_availability;
  wire                lutInst_0_O;
  wire                lutInst_1_O;
  wire                lutInst_2_O;
  wire                lutInst_3_O;
  wire                lutInst_4_O;
  wire                lutInst_5_O;
  wire                lutInst_6_O;
  wire                lutInst_7_O;
  wire                lutInst_8_O;
  wire                lutInst_9_O;
  wire                lutInst_10_O;
  wire                lutInst_11_O;
  wire                lutInst_12_O;
  wire                lutInst_13_O;
  wire                lutInst_14_O;
  wire                lutInst_15_O;
  wire                t_when;
  wire                t_when_1;
  wire                t_when_2;
  wire                t_when_3;
  wire                t_when_4;
  wire                t_when_5;
  wire                t_when_6;
  wire                t_when_7;
  wire                t_when_8;
  wire                t_when_9;
  wire                t_when_10;
  wire                t_when_11;
  wire                t_when_12;
  wire                t_when_13;
  wire                t_when_14;
  wire       [5:0]    t_ram_mem_0_port;
  wire       [5:0]    t_ram_mem_1_port;
  wire       [5:0]    t_ram_mem_2_port;
  wire       [5:0]    t_ram_mem_3_port;
  wire       [5:0]    t_ram_mem_4_port;
  wire       [5:0]    t_ram_mem_5_port;
  wire       [5:0]    t_ram_mem_6_port;
  wire       [5:0]    t_ram_mem_7_port;
  wire       [5:0]    t_ram_mem_8_port;
  wire       [5:0]    t_ram_mem_9_port;
  wire       [5:0]    t_ram_mem_10_port;
  wire       [5:0]    t_ram_mem_11_port;
  wire       [5:0]    t_ram_mem_12_port;
  wire       [5:0]    t_ram_mem_13_port;
  wire       [5:0]    t_ram_mem_14_port;
  wire       [5:0]    t_ram_mem_15_port;
  reg                 validDly;
  reg        [2047:0] dataDly;
  wire                ptrPush_enPushCnt;
  reg        [4:0]    ptrPush_pushPackLen;
  reg        [4:0]    ptrPush_pushStartAt;
  reg        [4:0]    ptrPush_pushStartAtNext;
  reg                 ptrPush_pushReuse;
  reg                 ptrPush_pushReuseNext;
  reg        [4:0]    ptrPush_pushPtr;
  reg        [4:0]    ptrPush_pushNext;
  wire                ptrPush_pushPtrOvf;
  reg        [4:0]    pushStatus_layerCnt;
  reg                 pushStatus_lastLayer;
  wire                pushStatus_layerCntAbout2Ovf;
  reg                 pushStatus_enLayerCntInc;
  wire                pushStatus_prefillIn_valid;
  wire                pushStatus_prefillIn_ready;
  wire                pushStatus_prefillIn_payload;
  reg                 pushStatus_prefillFirstToken;
  reg                 pushStatus_logitsGen;
  wire                vecBuf_pushStatus_prefillIn_fifo_io_pop_fire;
  reg                 pushStatus_tokenIn;
  reg                 pushStatus_lnOut;
  reg                 pushStatus_qRotateOut;
  reg                 pushStatus_qkvOut;
  reg                 pushStatus_mlpLnOut;
  wire                pushStatus_stateTrig;
  reg        [4:0]    pushStatus_headCnt;
  wire                pushStatus_headCntOvf;
  reg        [4:0]    pushStatus_headCntNext;
  wire       [4:0]    pushStatus_headCntNextInc;
  wire                ptrPop_enPopCnt;
  reg        [4:0]    ptrPop_popPackLen;
  reg        [4:0]    ptrPop_popStartAt;
  reg        [4:0]    ptrPop_popStartAtNext;
  reg        [4:0]    ptrPop_popPtr;
  reg                 ptrPop_popReuse;
  reg                 ptrPop_popReuseNext;
  reg        [4:0]    ptrPop_popNext;
  wire                ptrPop_popPtrOvf;
  reg        [4:0]    popStatus_layerCnt;
  reg                 popStatus_lastLayer;
  wire                popStatus_layerCntAbout2Ovf;
  reg                 popStatus_enLayerCntInc;
  wire                popStatus_prefillIn_valid;
  wire                popStatus_prefillIn_ready;
  wire                popStatus_prefillIn_payload;
  reg                 popStatus_prefillFirstToken;
  reg                 popStatus_logitsGen;
  wire                vecBuf_popStatus_prefillIn_fifo_io_pop_fire;
  reg                 popStatus_throughToLn;
  reg                 popStatus_lnToLogits;
  reg                 popStatus_reuseToQ;
  reg                 popStatus_qToQK;
  reg                 popStatus_reuseToK;
  reg                 popStatus_reuseToV;
  reg                 popStatus_qkvToOutProj;
  reg                 popStatus_reuseToPredU;
  reg                 popStatus_reuseToGate;
  reg                 popStatus_reuseToUp;
  wire                popStatus_stateTrig;
  wire                popStatus_prefillCond;
  reg        [4:0]    popStatus_headCnt;
  wire                popStatus_headCntOvf;
  wire       [4:0]    popStatus_headCntNext;
  (* keep = "true" *) reg                 ram_pushEn_0;
  (* keep = "true" *) reg                 ram_pushEn_1;
  (* keep = "true" *) reg                 ram_pushEn_2;
  (* keep = "true" *) reg                 ram_pushEn_3;
  (* keep = "true" *) reg                 ram_pushEn_4;
  (* keep = "true" *) reg                 ram_pushEn_5;
  (* keep = "true" *) reg                 ram_pushEn_6;
  (* keep = "true" *) reg                 ram_pushEn_7;
  (* keep = "true" *) reg                 ram_pushEn_8;
  (* keep = "true" *) reg                 ram_pushEn_9;
  (* keep = "true" *) reg                 ram_pushEn_10;
  (* keep = "true" *) reg                 ram_pushEn_11;
  (* keep = "true" *) reg                 ram_pushEn_12;
  (* keep = "true" *) reg                 ram_pushEn_13;
  (* keep = "true" *) reg                 ram_pushEn_14;
  (* keep = "true" *) reg                 ram_pushEn_15;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_0;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_1;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_2;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_3;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_4;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_5;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_6;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_7;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_8;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_9;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_10;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_11;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_12;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_13;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_14;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_15;
  (* keep = "true" *) reg                 ram_pushPtrMsb_0;
  (* keep = "true" *) reg                 ram_pushPtrMsb_1;
  (* keep = "true" *) reg                 ram_pushPtrMsb_2;
  (* keep = "true" *) reg                 ram_pushPtrMsb_3;
  (* keep = "true" *) reg                 ram_pushPtrMsb_4;
  (* keep = "true" *) reg                 ram_pushPtrMsb_5;
  (* keep = "true" *) reg                 ram_pushPtrMsb_6;
  (* keep = "true" *) reg                 ram_pushPtrMsb_7;
  (* keep = "true" *) reg                 ram_pushPtrMsb_8;
  (* keep = "true" *) reg                 ram_pushPtrMsb_9;
  (* keep = "true" *) reg                 ram_pushPtrMsb_10;
  (* keep = "true" *) reg                 ram_pushPtrMsb_11;
  (* keep = "true" *) reg                 ram_pushPtrMsb_12;
  (* keep = "true" *) reg                 ram_pushPtrMsb_13;
  (* keep = "true" *) reg                 ram_pushPtrMsb_14;
  (* keep = "true" *) reg                 ram_pushPtrMsb_15;
  wire       [5:0]    ram_pushPtr_0;
  wire       [5:0]    ram_pushPtr_1;
  wire       [5:0]    ram_pushPtr_2;
  wire       [5:0]    ram_pushPtr_3;
  wire       [5:0]    ram_pushPtr_4;
  wire       [5:0]    ram_pushPtr_5;
  wire       [5:0]    ram_pushPtr_6;
  wire       [5:0]    ram_pushPtr_7;
  wire       [5:0]    ram_pushPtr_8;
  wire       [5:0]    ram_pushPtr_9;
  wire       [5:0]    ram_pushPtr_10;
  wire       [5:0]    ram_pushPtr_11;
  wire       [5:0]    ram_pushPtr_12;
  wire       [5:0]    ram_pushPtr_13;
  wire       [5:0]    ram_pushPtr_14;
  wire       [5:0]    ram_pushPtr_15;
  wire                ram_popEn_0;
  wire                ram_popEn_1;
  wire                ram_popEn_2;
  wire                ram_popEn_3;
  wire                ram_popEn_4;
  wire                ram_popEn_5;
  wire                ram_popEn_6;
  wire                ram_popEn_7;
  wire                ram_popEn_8;
  wire                ram_popEn_9;
  wire                ram_popEn_10;
  wire                ram_popEn_11;
  wire                ram_popEn_12;
  wire                ram_popEn_13;
  wire                ram_popEn_14;
  wire                ram_popEn_15;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_0;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_1;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_2;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_3;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_4;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_5;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_6;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_7;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_8;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_9;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_10;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_11;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_12;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_13;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_14;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_15;
  (* keep = "true" *) reg                 ram_popPtrMsb_0;
  (* keep = "true" *) reg                 ram_popPtrMsb_1;
  (* keep = "true" *) reg                 ram_popPtrMsb_2;
  (* keep = "true" *) reg                 ram_popPtrMsb_3;
  (* keep = "true" *) reg                 ram_popPtrMsb_4;
  (* keep = "true" *) reg                 ram_popPtrMsb_5;
  (* keep = "true" *) reg                 ram_popPtrMsb_6;
  (* keep = "true" *) reg                 ram_popPtrMsb_7;
  (* keep = "true" *) reg                 ram_popPtrMsb_8;
  (* keep = "true" *) reg                 ram_popPtrMsb_9;
  (* keep = "true" *) reg                 ram_popPtrMsb_10;
  (* keep = "true" *) reg                 ram_popPtrMsb_11;
  (* keep = "true" *) reg                 ram_popPtrMsb_12;
  (* keep = "true" *) reg                 ram_popPtrMsb_13;
  (* keep = "true" *) reg                 ram_popPtrMsb_14;
  (* keep = "true" *) reg                 ram_popPtrMsb_15;
  wire       [5:0]    ram_popPtr_0;
  wire       [5:0]    ram_popPtr_1;
  wire       [5:0]    ram_popPtr_2;
  wire       [5:0]    ram_popPtr_3;
  wire       [5:0]    ram_popPtr_4;
  wire       [5:0]    ram_popPtr_5;
  wire       [5:0]    ram_popPtr_6;
  wire       [5:0]    ram_popPtr_7;
  wire       [5:0]    ram_popPtr_8;
  wire       [5:0]    ram_popPtr_9;
  wire       [5:0]    ram_popPtr_10;
  wire       [5:0]    ram_popPtr_11;
  wire       [5:0]    ram_popPtr_12;
  wire       [5:0]    ram_popPtr_13;
  wire       [5:0]    ram_popPtr_14;
  wire       [5:0]    ram_popPtr_15;
  wire       [127:0]  ram_ramIn_0;
  wire       [127:0]  ram_ramIn_1;
  wire       [127:0]  ram_ramIn_2;
  wire       [127:0]  ram_ramIn_3;
  wire       [127:0]  ram_ramIn_4;
  wire       [127:0]  ram_ramIn_5;
  wire       [127:0]  ram_ramIn_6;
  wire       [127:0]  ram_ramIn_7;
  wire       [127:0]  ram_ramIn_8;
  wire       [127:0]  ram_ramIn_9;
  wire       [127:0]  ram_ramIn_10;
  wire       [127:0]  ram_ramIn_11;
  wire       [127:0]  ram_ramIn_12;
  wire       [127:0]  ram_ramIn_13;
  wire       [127:0]  ram_ramIn_14;
  wire       [127:0]  ram_ramIn_15;
  wire       [127:0]  ram_ramOut_0;
  wire       [127:0]  ram_ramOut_1;
  wire       [127:0]  ram_ramOut_2;
  wire       [127:0]  ram_ramOut_3;
  wire       [127:0]  ram_ramOut_4;
  wire       [127:0]  ram_ramOut_5;
  wire       [127:0]  ram_ramOut_6;
  wire       [127:0]  ram_ramOut_7;
  wire       [127:0]  ram_ramOut_8;
  wire       [127:0]  ram_ramOut_9;
  wire       [127:0]  ram_ramOut_10;
  wire       [127:0]  ram_ramOut_11;
  wire       [127:0]  ram_ramOut_12;
  wire       [127:0]  ram_ramOut_13;
  wire       [127:0]  ram_ramOut_14;
  wire       [127:0]  ram_ramOut_15;
  wire       [5:0]    t_ram_ramOut_0;
  wire       [5:0]    t_ram_ramOut_1;
  wire       [5:0]    t_ram_ramOut_2;
  wire       [5:0]    t_ram_ramOut_3;
  wire       [5:0]    t_ram_ramOut_4;
  wire       [5:0]    t_ram_ramOut_5;
  wire       [5:0]    t_ram_ramOut_6;
  wire       [5:0]    t_ram_ramOut_7;
  wire       [5:0]    t_ram_ramOut_8;
  wire       [5:0]    t_ram_ramOut_9;
  wire       [5:0]    t_ram_ramOut_10;
  wire       [5:0]    t_ram_ramOut_11;
  wire       [5:0]    t_ram_ramOut_12;
  wire       [5:0]    t_ram_ramOut_13;
  wire       [5:0]    t_ram_ramOut_14;
  wire       [5:0]    t_ram_ramOut_15;
  reg                 reusePushFinish;
  wire                popLtPush;
  reg                 popPre_valid;
  reg                 popPre_ready;
  reg                 popPre_thrown_valid;
  reg                 popPre_thrown_ready;
  wire                popPrePipe_valid;
  wire                popPrePipe_ready;
  reg                 popPre_thrown_rValid;
  wire                popPre_fire;
  (* ram_style = "distributed" *) reg [127:0] ram_mem_0 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_1 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_2 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_3 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_4 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_5 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_6 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_7 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_8 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_9 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_10 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_11 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_12 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_13 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_14 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_15 [0:63];

  assign t_when = (pushStatus_tokenIn && pushStatus_stateTrig);
  assign t_when_1 = (pushStatus_lnOut && pushStatus_stateTrig);
  assign t_when_2 = (pushStatus_prefillIn_fifo_io_pop_payload && pushStatus_lastLayer);
  assign t_when_4 = (pushStatus_qkvOut && pushStatus_stateTrig);
  assign t_when_5 = (pushStatus_mlpLnOut && pushStatus_stateTrig);
  assign t_when_3 = (pushStatus_qRotateOut && pushStatus_stateTrig);
  assign t_when_6 = (popStatus_throughToLn && popStatus_stateTrig);
  assign t_when_7 = (popStatus_lnToLogits && popStatus_stateTrig);
  assign t_when_8 = (popStatus_reuseToQ && popStatus_stateTrig);
  assign t_when_9 = (popStatus_reuseToK && popStatus_stateTrig);
  assign t_when_10 = (popStatus_qToQK && popStatus_stateTrig);
  assign t_when_11 = (popStatus_reuseToV && popStatus_stateTrig);
  assign t_when_13 = (popStatus_qkvToOutProj && popStatus_stateTrig);
  assign t_when_14 = (popStatus_reuseToUp && popStatus_stateTrig);
  assign t_when_12 = (popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer);
  assign t_ram_mem_0_port = ram_pushPtr_0;
  assign t_ram_mem_1_port = ram_pushPtr_1;
  assign t_ram_mem_2_port = ram_pushPtr_2;
  assign t_ram_mem_3_port = ram_pushPtr_3;
  assign t_ram_mem_4_port = ram_pushPtr_4;
  assign t_ram_mem_5_port = ram_pushPtr_5;
  assign t_ram_mem_6_port = ram_pushPtr_6;
  assign t_ram_mem_7_port = ram_pushPtr_7;
  assign t_ram_mem_8_port = ram_pushPtr_8;
  assign t_ram_mem_9_port = ram_pushPtr_9;
  assign t_ram_mem_10_port = ram_pushPtr_10;
  assign t_ram_mem_11_port = ram_pushPtr_11;
  assign t_ram_mem_12_port = ram_pushPtr_12;
  assign t_ram_mem_13_port = ram_pushPtr_13;
  assign t_ram_mem_14_port = ram_pushPtr_14;
  assign t_ram_mem_15_port = ram_pushPtr_15;
  always @(posedge clk_1_clk) begin
    if(ram_pushEn_0) begin
      ram_mem_0[t_ram_mem_0_port] <= ram_ramIn_0;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_0) begin
      ram_mem_0_spinal_port1 <= ram_mem_0[t_ram_ramOut_0];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_1) begin
      ram_mem_1[t_ram_mem_1_port] <= ram_ramIn_1;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_1) begin
      ram_mem_1_spinal_port1 <= ram_mem_1[t_ram_ramOut_1];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_2) begin
      ram_mem_2[t_ram_mem_2_port] <= ram_ramIn_2;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_2) begin
      ram_mem_2_spinal_port1 <= ram_mem_2[t_ram_ramOut_2];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_3) begin
      ram_mem_3[t_ram_mem_3_port] <= ram_ramIn_3;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_3) begin
      ram_mem_3_spinal_port1 <= ram_mem_3[t_ram_ramOut_3];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_4) begin
      ram_mem_4[t_ram_mem_4_port] <= ram_ramIn_4;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_4) begin
      ram_mem_4_spinal_port1 <= ram_mem_4[t_ram_ramOut_4];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_5) begin
      ram_mem_5[t_ram_mem_5_port] <= ram_ramIn_5;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_5) begin
      ram_mem_5_spinal_port1 <= ram_mem_5[t_ram_ramOut_5];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_6) begin
      ram_mem_6[t_ram_mem_6_port] <= ram_ramIn_6;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_6) begin
      ram_mem_6_spinal_port1 <= ram_mem_6[t_ram_ramOut_6];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_7) begin
      ram_mem_7[t_ram_mem_7_port] <= ram_ramIn_7;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_7) begin
      ram_mem_7_spinal_port1 <= ram_mem_7[t_ram_ramOut_7];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_8) begin
      ram_mem_8[t_ram_mem_8_port] <= ram_ramIn_8;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_8) begin
      ram_mem_8_spinal_port1 <= ram_mem_8[t_ram_ramOut_8];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_9) begin
      ram_mem_9[t_ram_mem_9_port] <= ram_ramIn_9;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_9) begin
      ram_mem_9_spinal_port1 <= ram_mem_9[t_ram_ramOut_9];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_10) begin
      ram_mem_10[t_ram_mem_10_port] <= ram_ramIn_10;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_10) begin
      ram_mem_10_spinal_port1 <= ram_mem_10[t_ram_ramOut_10];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_11) begin
      ram_mem_11[t_ram_mem_11_port] <= ram_ramIn_11;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_11) begin
      ram_mem_11_spinal_port1 <= ram_mem_11[t_ram_ramOut_11];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_12) begin
      ram_mem_12[t_ram_mem_12_port] <= ram_ramIn_12;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_12) begin
      ram_mem_12_spinal_port1 <= ram_mem_12[t_ram_ramOut_12];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_13) begin
      ram_mem_13[t_ram_mem_13_port] <= ram_ramIn_13;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_13) begin
      ram_mem_13_spinal_port1 <= ram_mem_13[t_ram_ramOut_13];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_14) begin
      ram_mem_14[t_ram_mem_14_port] <= ram_ramIn_14;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_14) begin
      ram_mem_14_spinal_port1 <= ram_mem_14[t_ram_ramOut_14];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_pushEn_15) begin
      ram_mem_15[t_ram_mem_15_port] <= ram_ramIn_15;
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_popEn_15) begin
      ram_mem_15_spinal_port1 <= ram_mem_15[t_ram_ramOut_15];
    end
  end

  StreamFifo_69 pushStatus_prefillIn_fifo (
    .io_push_valid   (pushStatus_prefillIn_valid                    ), //i
    .io_push_ready   (pushStatus_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (pushStatus_prefillIn_payload                  ), //i
    .io_pop_valid    (pushStatus_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (pushStatus_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (pushStatus_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                          ), //i
    .io_occupancy    (pushStatus_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (pushStatus_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                                     ), //i
    .clk_1_resetn    (clk_1_resetn                                  )  //i
  );
  StreamFifo_69 popStatus_prefillIn_fifo (
    .io_push_valid   (popStatus_prefillIn_valid                    ), //i
    .io_push_ready   (popStatus_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (popStatus_prefillIn_payload                  ), //i
    .io_pop_valid    (popStatus_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (popStatus_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (popStatus_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                         ), //i
    .io_occupancy    (popStatus_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (popStatus_prefillIn_fifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                                    ), //i
    .clk_1_resetn    (clk_1_resetn                                 )  //i
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_0 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_0_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_1 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_1_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_2 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_2_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_3 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_3_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_4 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_4_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_5 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_5_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_6 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_6_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_7 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_7_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_8 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_8_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_9 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_9_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_10 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_10_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_11 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_11_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_12 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_12_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_13 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_13_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_14 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_14_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_15 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_15_O         )  //o
  );
  assign ptrPush_pushPtrOvf = (ptrPush_pushPtr == ptrPush_pushPackLen);
  always @(*) begin
    ptrPush_pushNext = ptrPush_pushPtr;
    if(ptrPush_enPushCnt) begin
      ptrPush_pushNext = (ptrPush_pushPtr + 5'h01);
      if(ptrPush_pushPtrOvf) begin
        ptrPush_pushNext = ptrPush_pushStartAtNext;
      end
    end
  end

  always @(*) begin
    ptrPush_pushReuseNext = ptrPush_pushReuse;
    if(t_when) begin
      ptrPush_pushReuseNext = (pushStatus_logitsGen ? 1'b0 : 1'b1);
    end
    if(t_when_1) begin
      if(t_when_2) begin
        ptrPush_pushReuseNext = 1'b0;
      end else begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushReuseNext = 1'b0;
        end else begin
          if(pushStatus_logitsGen) begin
            ptrPush_pushReuseNext = 1'b0;
          end else begin
            ptrPush_pushReuseNext = 1'b0;
          end
        end
      end
    end
    if(t_when_4) begin
      if(pushStatus_headCntOvf) begin
        ptrPush_pushReuseNext = 1'b1;
      end
    end
    if(t_when_5) begin
      ptrPush_pushReuseNext = 1'b0;
    end
  end

  always @(*) begin
    ptrPush_pushStartAtNext = ptrPush_pushStartAt;
    if(t_when) begin
      ptrPush_pushStartAtNext = 5'h0;
    end
    if(t_when_1) begin
      if(!t_when_2) begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
        end else begin
          if(!pushStatus_logitsGen) begin
            ptrPush_pushStartAtNext = 5'h0;
          end
        end
      end
    end
    if(t_when_3) begin
      ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
    end
    if(t_when_4) begin
      if(pushStatus_prefillFirstToken) begin
        ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
      end else begin
        ptrPush_pushStartAtNext = 5'h0;
      end
      if(pushStatus_headCntOvf) begin
        ptrPush_pushStartAtNext = 5'h0;
      end
    end
  end

  assign pushStatus_layerCntAbout2Ovf = (pushStatus_layerCnt == 5'h1e);
  assign pushStatus_prefillIn_valid = status_tokenIndexFlow_valid;
  assign pushStatus_prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign pushStatus_prefillIn_ready = pushStatus_prefillIn_fifo_io_push_ready;
  assign pushStatus_prefillIn_fifo_io_pop_ready = (pushStatus_enLayerCntInc && pushStatus_lastLayer);
  assign vecBuf_pushStatus_prefillIn_fifo_io_pop_fire = (pushStatus_prefillIn_fifo_io_pop_valid && pushStatus_prefillIn_fifo_io_pop_ready);
  assign pushStatus_stateTrig = (ptrPush_enPushCnt && ptrPush_pushPtrOvf);
  assign pushStatus_headCntOvf = (pushStatus_headCnt == 5'h0f);
  assign pushStatus_headCntNextInc = (pushStatus_headCntNext + 5'h01);
  always @(*) begin
    pushStatus_headCntNext = pushStatus_headCnt;
    if(t_when_4) begin
      pushStatus_headCntNext = (pushStatus_headCnt + 5'h01);
      if(pushStatus_headCntOvf) begin
        pushStatus_headCntNext = 5'h0;
      end
    end
  end

  always @(*) begin
    pushStatus_enLayerCntInc = (pushStatus_mlpLnOut && pushStatus_stateTrig);
    if((pushStatus_prefillIn_fifo_io_pop_payload && pushStatus_lastLayer)) begin
      pushStatus_enLayerCntInc = (pushStatus_lnOut && pushStatus_stateTrig);
    end
  end

  assign ptrPop_popPtrOvf = (ptrPop_popPtr == ptrPop_popPackLen);
  always @(*) begin
    ptrPop_popNext = ptrPop_popPtr;
    if(ptrPop_enPopCnt) begin
      ptrPop_popNext = (ptrPop_popPtr + 5'h01);
      if(ptrPop_popPtrOvf) begin
        ptrPop_popNext = ptrPop_popStartAtNext;
      end
    end
  end

  always @(*) begin
    ptrPop_popReuseNext = ptrPop_popReuse;
    if(t_when_6) begin
      if(popStatus_logitsGen) begin
        ptrPop_popReuseNext = 1'b0;
      end else begin
        if(popStatus_prefillCond) begin
          ptrPop_popReuseNext = 1'b1;
        end else begin
          ptrPop_popReuseNext = 1'b1;
        end
      end
    end
    if(t_when_7) begin
      ptrPop_popReuseNext = 1'b0;
    end
    if(t_when_8) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_9) begin
      if(popStatus_prefillCond) begin
        ptrPop_popReuseNext = 1'b1;
      end else begin
        ptrPop_popReuseNext = 1'b0;
      end
    end
    if(t_when_10) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_11) begin
      if(popStatus_prefillCond) begin
        ptrPop_popReuseNext = 1'b1;
      end else begin
        ptrPop_popReuseNext = 1'b1;
      end
      if(popStatus_headCntOvf) begin
        ptrPop_popReuseNext = 1'b0;
      end
    end
    if(t_when_13) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_14) begin
      ptrPop_popReuseNext = 1'b0;
    end
  end

  always @(*) begin
    ptrPop_popStartAtNext = ptrPop_popStartAt;
    if(t_when_11) begin
      if(popStatus_headCntOvf) begin
        if(!t_when_12) begin
          ptrPop_popStartAtNext = 5'h01;
        end
      end
    end
    if(t_when_13) begin
      ptrPop_popStartAtNext = 5'h0;
    end
  end

  assign popStatus_layerCntAbout2Ovf = (popStatus_layerCnt == 5'h1e);
  assign popStatus_prefillIn_valid = status_tokenIndexFlow_valid;
  assign popStatus_prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign popStatus_prefillIn_ready = popStatus_prefillIn_fifo_io_push_ready;
  assign popStatus_prefillIn_fifo_io_pop_ready = (popStatus_enLayerCntInc && popStatus_lastLayer);
  assign vecBuf_popStatus_prefillIn_fifo_io_pop_fire = (popStatus_prefillIn_fifo_io_pop_valid && popStatus_prefillIn_fifo_io_pop_ready);
  assign popStatus_stateTrig = (ptrPop_enPopCnt && ptrPop_popPtrOvf);
  assign popStatus_prefillCond = (popStatus_prefillFirstToken || (popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer));
  assign popStatus_headCntOvf = (popStatus_headCnt == 5'h0f);
  assign popStatus_headCntNext = (popStatus_headCnt + 5'h01);
  always @(*) begin
    popStatus_enLayerCntInc = (popStatus_reuseToUp && popStatus_stateTrig);
    if((popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer)) begin
      popStatus_enLayerCntInc = ((popStatus_reuseToV && popStatus_stateTrig) && popStatus_headCntOvf);
    end
  end

  assign ram_pushPtr_0 = {ram_pushPtrMsb_0,ram_pushPtrLow_0};
  assign ram_pushPtr_1 = {ram_pushPtrMsb_1,ram_pushPtrLow_1};
  assign ram_pushPtr_2 = {ram_pushPtrMsb_2,ram_pushPtrLow_2};
  assign ram_pushPtr_3 = {ram_pushPtrMsb_3,ram_pushPtrLow_3};
  assign ram_pushPtr_4 = {ram_pushPtrMsb_4,ram_pushPtrLow_4};
  assign ram_pushPtr_5 = {ram_pushPtrMsb_5,ram_pushPtrLow_5};
  assign ram_pushPtr_6 = {ram_pushPtrMsb_6,ram_pushPtrLow_6};
  assign ram_pushPtr_7 = {ram_pushPtrMsb_7,ram_pushPtrLow_7};
  assign ram_pushPtr_8 = {ram_pushPtrMsb_8,ram_pushPtrLow_8};
  assign ram_pushPtr_9 = {ram_pushPtrMsb_9,ram_pushPtrLow_9};
  assign ram_pushPtr_10 = {ram_pushPtrMsb_10,ram_pushPtrLow_10};
  assign ram_pushPtr_11 = {ram_pushPtrMsb_11,ram_pushPtrLow_11};
  assign ram_pushPtr_12 = {ram_pushPtrMsb_12,ram_pushPtrLow_12};
  assign ram_pushPtr_13 = {ram_pushPtrMsb_13,ram_pushPtrLow_13};
  assign ram_pushPtr_14 = {ram_pushPtrMsb_14,ram_pushPtrLow_14};
  assign ram_pushPtr_15 = {ram_pushPtrMsb_15,ram_pushPtrLow_15};
  assign ram_popPtr_0 = {ram_popPtrMsb_0,ram_popPtrLow_0};
  assign ram_popPtr_1 = {ram_popPtrMsb_1,ram_popPtrLow_1};
  assign ram_popPtr_2 = {ram_popPtrMsb_2,ram_popPtrLow_2};
  assign ram_popPtr_3 = {ram_popPtrMsb_3,ram_popPtrLow_3};
  assign ram_popPtr_4 = {ram_popPtrMsb_4,ram_popPtrLow_4};
  assign ram_popPtr_5 = {ram_popPtrMsb_5,ram_popPtrLow_5};
  assign ram_popPtr_6 = {ram_popPtrMsb_6,ram_popPtrLow_6};
  assign ram_popPtr_7 = {ram_popPtrMsb_7,ram_popPtrLow_7};
  assign ram_popPtr_8 = {ram_popPtrMsb_8,ram_popPtrLow_8};
  assign ram_popPtr_9 = {ram_popPtrMsb_9,ram_popPtrLow_9};
  assign ram_popPtr_10 = {ram_popPtrMsb_10,ram_popPtrLow_10};
  assign ram_popPtr_11 = {ram_popPtrMsb_11,ram_popPtrLow_11};
  assign ram_popPtr_12 = {ram_popPtrMsb_12,ram_popPtrLow_12};
  assign ram_popPtr_13 = {ram_popPtrMsb_13,ram_popPtrLow_13};
  assign ram_popPtr_14 = {ram_popPtrMsb_14,ram_popPtrLow_14};
  assign ram_popPtr_15 = {ram_popPtrMsb_15,ram_popPtrLow_15};
  assign ram_ramIn_0 = dataDly[127 : 0];
  assign ram_ramIn_1 = dataDly[255 : 128];
  assign ram_ramIn_2 = dataDly[383 : 256];
  assign ram_ramIn_3 = dataDly[511 : 384];
  assign ram_ramIn_4 = dataDly[639 : 512];
  assign ram_ramIn_5 = dataDly[767 : 640];
  assign ram_ramIn_6 = dataDly[895 : 768];
  assign ram_ramIn_7 = dataDly[1023 : 896];
  assign ram_ramIn_8 = dataDly[1151 : 1024];
  assign ram_ramIn_9 = dataDly[1279 : 1152];
  assign ram_ramIn_10 = dataDly[1407 : 1280];
  assign ram_ramIn_11 = dataDly[1535 : 1408];
  assign ram_ramIn_12 = dataDly[1663 : 1536];
  assign ram_ramIn_13 = dataDly[1791 : 1664];
  assign ram_ramIn_14 = dataDly[1919 : 1792];
  assign ram_ramIn_15 = dataDly[2047 : 1920];
  assign t_ram_ramOut_0 = ram_popPtr_0;
  assign ram_ramOut_0 = ram_mem_0_spinal_port1;
  assign t_ram_ramOut_1 = ram_popPtr_1;
  assign ram_ramOut_1 = ram_mem_1_spinal_port1;
  assign t_ram_ramOut_2 = ram_popPtr_2;
  assign ram_ramOut_2 = ram_mem_2_spinal_port1;
  assign t_ram_ramOut_3 = ram_popPtr_3;
  assign ram_ramOut_3 = ram_mem_3_spinal_port1;
  assign t_ram_ramOut_4 = ram_popPtr_4;
  assign ram_ramOut_4 = ram_mem_4_spinal_port1;
  assign t_ram_ramOut_5 = ram_popPtr_5;
  assign ram_ramOut_5 = ram_mem_5_spinal_port1;
  assign t_ram_ramOut_6 = ram_popPtr_6;
  assign ram_ramOut_6 = ram_mem_6_spinal_port1;
  assign t_ram_ramOut_7 = ram_popPtr_7;
  assign ram_ramOut_7 = ram_mem_7_spinal_port1;
  assign t_ram_ramOut_8 = ram_popPtr_8;
  assign ram_ramOut_8 = ram_mem_8_spinal_port1;
  assign t_ram_ramOut_9 = ram_popPtr_9;
  assign ram_ramOut_9 = ram_mem_9_spinal_port1;
  assign t_ram_ramOut_10 = ram_popPtr_10;
  assign ram_ramOut_10 = ram_mem_10_spinal_port1;
  assign t_ram_ramOut_11 = ram_popPtr_11;
  assign ram_ramOut_11 = ram_mem_11_spinal_port1;
  assign t_ram_ramOut_12 = ram_popPtr_12;
  assign ram_ramOut_12 = ram_mem_12_spinal_port1;
  assign t_ram_ramOut_13 = ram_popPtr_13;
  assign ram_ramOut_13 = ram_mem_13_spinal_port1;
  assign t_ram_ramOut_14 = ram_popPtr_14;
  assign ram_ramOut_14 = ram_mem_14_spinal_port1;
  assign t_ram_ramOut_15 = ram_popPtr_15;
  assign ram_ramOut_15 = ram_mem_15_spinal_port1;
  assign popLtPush = (ptrPop_popPtr < ptrPush_pushPtr);
  always @(*) begin
    popPre_thrown_valid = popPre_valid;
    if(popStatus_throughToLn) begin
      popPre_thrown_valid = 1'b0;
    end
  end

  always @(*) begin
    popPre_ready = popPre_thrown_ready;
    if(popStatus_throughToLn) begin
      popPre_ready = 1'b1;
    end
  end

  always @(*) begin
    popPre_thrown_ready = popPrePipe_ready;
    if((! popPrePipe_valid)) begin
      popPre_thrown_ready = 1'b1;
    end
  end

  assign popPrePipe_valid = popPre_thrown_rValid;
  assign io_output_valid = popPrePipe_valid;
  assign popPrePipe_ready = io_output_ready;
  assign io_output_payload = {ram_ramOut_15,{ram_ramOut_14,{ram_ramOut_13,{ram_ramOut_12,{ram_ramOut_11,{ram_ramOut_10,{ram_ramOut_9,{ram_ramOut_8,{ram_ramOut_7,{ram_ramOut_6,{ram_ramOut_5,{ram_ramOut_4,{ram_ramOut_3,{ram_ramOut_2,{ram_ramOut_1,ram_ramOut_0}}}}}}}}}}}}}}};
  assign ptrPush_enPushCnt = validDly;
  assign popPre_fire = (popPre_valid && popPre_ready);
  assign ptrPop_enPopCnt = popPre_fire;
  always @(*) begin
    popPre_valid = 1'b0;
    if(ptrPop_popReuse) begin
      if(reusePushFinish) begin
        popPre_valid = 1'b1;
      end else begin
        popPre_valid = popLtPush;
      end
    end else begin
      if(popStatus_throughToLn) begin
        if(pushStatus_lnOut) begin
          popPre_valid = 1'b1;
        end else begin
          popPre_valid = popLtPush;
        end
      end
      if(popStatus_lnToLogits) begin
        if(pushStatus_tokenIn) begin
          popPre_valid = 1'b1;
        end else begin
          popPre_valid = popLtPush;
        end
      end
      if(popStatus_qToQK) begin
        popPre_valid = pushStatus_qkvOut;
      end
      if(popStatus_qkvToOutProj) begin
        popPre_valid = pushStatus_mlpLnOut;
      end
    end
  end

  assign ram_popEn_0 = lutInst_0_O;
  assign ram_popEn_1 = lutInst_1_O;
  assign ram_popEn_2 = lutInst_2_O;
  assign ram_popEn_3 = lutInst_3_O;
  assign ram_popEn_4 = lutInst_4_O;
  assign ram_popEn_5 = lutInst_5_O;
  assign ram_popEn_6 = lutInst_6_O;
  assign ram_popEn_7 = lutInst_7_O;
  assign ram_popEn_8 = lutInst_8_O;
  assign ram_popEn_9 = lutInst_9_O;
  assign ram_popEn_10 = lutInst_10_O;
  assign ram_popEn_11 = lutInst_11_O;
  assign ram_popEn_12 = lutInst_12_O;
  assign ram_popEn_13 = lutInst_13_O;
  assign ram_popEn_14 = lutInst_14_O;
  assign ram_popEn_15 = lutInst_15_O;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      validDly <= 1'b0;
      ptrPush_pushPackLen <= 5'h0;
      ptrPush_pushStartAt <= 5'h0;
      ptrPush_pushReuse <= 1'b0;
      ptrPush_pushPtr <= 5'h0;
      pushStatus_layerCnt <= 5'h0;
      pushStatus_lastLayer <= 1'b0;
      pushStatus_prefillFirstToken <= 1'b1;
      pushStatus_logitsGen <= 1'b0;
      pushStatus_tokenIn <= 1'b1;
      pushStatus_lnOut <= 1'b0;
      pushStatus_qRotateOut <= 1'b0;
      pushStatus_qkvOut <= 1'b0;
      pushStatus_mlpLnOut <= 1'b0;
      pushStatus_headCnt <= 5'h0;
      ptrPop_popPackLen <= 5'h0;
      ptrPop_popStartAt <= 5'h0;
      ptrPop_popPtr <= 5'h0;
      ptrPop_popReuse <= 1'b0;
      popStatus_layerCnt <= 5'h0;
      popStatus_lastLayer <= 1'b0;
      popStatus_prefillFirstToken <= 1'b1;
      popStatus_logitsGen <= 1'b0;
      popStatus_throughToLn <= 1'b1;
      popStatus_lnToLogits <= 1'b0;
      popStatus_reuseToQ <= 1'b0;
      popStatus_qToQK <= 1'b0;
      popStatus_reuseToK <= 1'b0;
      popStatus_reuseToV <= 1'b0;
      popStatus_qkvToOutProj <= 1'b0;
      popStatus_reuseToPredU <= 1'b0;
      popStatus_reuseToGate <= 1'b0;
      popStatus_reuseToUp <= 1'b0;
      popStatus_headCnt <= 5'h0;
      ram_pushEn_0 <= 1'b0;
      ram_pushEn_1 <= 1'b0;
      ram_pushEn_2 <= 1'b0;
      ram_pushEn_3 <= 1'b0;
      ram_pushEn_4 <= 1'b0;
      ram_pushEn_5 <= 1'b0;
      ram_pushEn_6 <= 1'b0;
      ram_pushEn_7 <= 1'b0;
      ram_pushEn_8 <= 1'b0;
      ram_pushEn_9 <= 1'b0;
      ram_pushEn_10 <= 1'b0;
      ram_pushEn_11 <= 1'b0;
      ram_pushEn_12 <= 1'b0;
      ram_pushEn_13 <= 1'b0;
      ram_pushEn_14 <= 1'b0;
      ram_pushEn_15 <= 1'b0;
      ram_pushPtrLow_0 <= 5'h0;
      ram_pushPtrLow_1 <= 5'h0;
      ram_pushPtrLow_2 <= 5'h0;
      ram_pushPtrLow_3 <= 5'h0;
      ram_pushPtrLow_4 <= 5'h0;
      ram_pushPtrLow_5 <= 5'h0;
      ram_pushPtrLow_6 <= 5'h0;
      ram_pushPtrLow_7 <= 5'h0;
      ram_pushPtrLow_8 <= 5'h0;
      ram_pushPtrLow_9 <= 5'h0;
      ram_pushPtrLow_10 <= 5'h0;
      ram_pushPtrLow_11 <= 5'h0;
      ram_pushPtrLow_12 <= 5'h0;
      ram_pushPtrLow_13 <= 5'h0;
      ram_pushPtrLow_14 <= 5'h0;
      ram_pushPtrLow_15 <= 5'h0;
      ram_pushPtrMsb_0 <= 1'b0;
      ram_pushPtrMsb_1 <= 1'b0;
      ram_pushPtrMsb_2 <= 1'b0;
      ram_pushPtrMsb_3 <= 1'b0;
      ram_pushPtrMsb_4 <= 1'b0;
      ram_pushPtrMsb_5 <= 1'b0;
      ram_pushPtrMsb_6 <= 1'b0;
      ram_pushPtrMsb_7 <= 1'b0;
      ram_pushPtrMsb_8 <= 1'b0;
      ram_pushPtrMsb_9 <= 1'b0;
      ram_pushPtrMsb_10 <= 1'b0;
      ram_pushPtrMsb_11 <= 1'b0;
      ram_pushPtrMsb_12 <= 1'b0;
      ram_pushPtrMsb_13 <= 1'b0;
      ram_pushPtrMsb_14 <= 1'b0;
      ram_pushPtrMsb_15 <= 1'b0;
      ram_popPtrLow_0 <= 5'h0;
      ram_popPtrLow_1 <= 5'h0;
      ram_popPtrLow_2 <= 5'h0;
      ram_popPtrLow_3 <= 5'h0;
      ram_popPtrLow_4 <= 5'h0;
      ram_popPtrLow_5 <= 5'h0;
      ram_popPtrLow_6 <= 5'h0;
      ram_popPtrLow_7 <= 5'h0;
      ram_popPtrLow_8 <= 5'h0;
      ram_popPtrLow_9 <= 5'h0;
      ram_popPtrLow_10 <= 5'h0;
      ram_popPtrLow_11 <= 5'h0;
      ram_popPtrLow_12 <= 5'h0;
      ram_popPtrLow_13 <= 5'h0;
      ram_popPtrLow_14 <= 5'h0;
      ram_popPtrLow_15 <= 5'h0;
      ram_popPtrMsb_0 <= 1'b0;
      ram_popPtrMsb_1 <= 1'b0;
      ram_popPtrMsb_2 <= 1'b0;
      ram_popPtrMsb_3 <= 1'b0;
      ram_popPtrMsb_4 <= 1'b0;
      ram_popPtrMsb_5 <= 1'b0;
      ram_popPtrMsb_6 <= 1'b0;
      ram_popPtrMsb_7 <= 1'b0;
      ram_popPtrMsb_8 <= 1'b0;
      ram_popPtrMsb_9 <= 1'b0;
      ram_popPtrMsb_10 <= 1'b0;
      ram_popPtrMsb_11 <= 1'b0;
      ram_popPtrMsb_12 <= 1'b0;
      ram_popPtrMsb_13 <= 1'b0;
      ram_popPtrMsb_14 <= 1'b0;
      ram_popPtrMsb_15 <= 1'b0;
      reusePushFinish <= 1'b0;
      popPre_thrown_rValid <= 1'b0;
    end else begin
      validDly <= io_input_valid;
      ptrPush_pushPtr <= ptrPush_pushNext;
      ptrPush_pushReuse <= ptrPush_pushReuseNext;
      ptrPush_pushStartAt <= ptrPush_pushStartAtNext;
      if(pushStatus_enLayerCntInc) begin
        pushStatus_layerCnt <= (pushStatus_layerCnt + 5'h01);
        if(pushStatus_layerCntAbout2Ovf) begin
          pushStatus_lastLayer <= 1'b1;
        end
        if(pushStatus_lastLayer) begin
          pushStatus_layerCnt <= 5'h0;
          pushStatus_lastLayer <= 1'b0;
        end
      end
      if(vecBuf_pushStatus_prefillIn_fifo_io_pop_fire) begin
        pushStatus_prefillFirstToken <= 1'b0;
      end
      if((vecBuf_pushStatus_prefillIn_fifo_io_pop_fire && (! pushStatus_prefillIn_fifo_io_pop_payload))) begin
        pushStatus_logitsGen <= 1'b1;
      end
      pushStatus_headCnt <= pushStatus_headCntNext;
      if(t_when) begin
        pushStatus_tokenIn <= 1'b0;
        pushStatus_lnOut <= 1'b1;
        ptrPush_pushPackLen <= (pushStatus_logitsGen ? 5'h0f : 5'h1f);
      end
      if(t_when_1) begin
        pushStatus_lnOut <= 1'b0;
        if(t_when_2) begin
          pushStatus_tokenIn <= 1'b1;
          ptrPush_pushPackLen <= 5'h0;
        end else begin
          if(pushStatus_prefillFirstToken) begin
            pushStatus_qkvOut <= 1'b1;
            ptrPush_pushPackLen <= pushStatus_headCntNextInc;
          end else begin
            if(pushStatus_logitsGen) begin
              pushStatus_tokenIn <= 1'b1;
              ptrPush_pushPackLen <= 5'h0;
            end else begin
              pushStatus_qRotateOut <= 1'b1;
              ptrPush_pushPackLen <= 5'h0;
            end
          end
        end
      end
      if(t_when_3) begin
        pushStatus_qRotateOut <= 1'b0;
        pushStatus_qkvOut <= 1'b1;
        ptrPush_pushPackLen <= pushStatus_headCntNextInc;
      end
      if(t_when_4) begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushPackLen <= pushStatus_headCntNextInc;
        end else begin
          pushStatus_qkvOut <= 1'b0;
          pushStatus_qRotateOut <= 1'b1;
          ptrPush_pushPackLen <= 5'h0;
        end
        if(pushStatus_headCntOvf) begin
          pushStatus_qkvOut <= 1'b0;
          pushStatus_qRotateOut <= 1'b0;
          pushStatus_mlpLnOut <= 1'b1;
          ptrPush_pushPackLen <= 5'h0f;
        end
      end
      if(t_when_5) begin
        pushStatus_mlpLnOut <= 1'b0;
        pushStatus_tokenIn <= 1'b1;
        ptrPush_pushPackLen <= 5'h0;
      end
      if((pushStatus_lnOut && pushStatus_stateTrig)) begin
        pushStatus_logitsGen <= 1'b0;
      end
      ptrPop_popPtr <= ptrPop_popNext;
      ptrPop_popReuse <= ptrPop_popReuseNext;
      ptrPop_popStartAt <= ptrPop_popStartAtNext;
      if(popStatus_enLayerCntInc) begin
        popStatus_layerCnt <= (popStatus_layerCnt + 5'h01);
        if(popStatus_layerCntAbout2Ovf) begin
          popStatus_lastLayer <= 1'b1;
        end
        if(popStatus_lastLayer) begin
          popStatus_layerCnt <= 5'h0;
          popStatus_lastLayer <= 1'b0;
        end
      end
      if(vecBuf_popStatus_prefillIn_fifo_io_pop_fire) begin
        popStatus_prefillFirstToken <= 1'b0;
      end
      if((vecBuf_popStatus_prefillIn_fifo_io_pop_fire && (! popStatus_prefillIn_fifo_io_pop_payload))) begin
        popStatus_logitsGen <= 1'b1;
      end
      if(t_when_6) begin
        popStatus_throughToLn <= 1'b0;
        if(popStatus_logitsGen) begin
          popStatus_lnToLogits <= 1'b1;
          ptrPop_popPackLen <= 5'h0f;
        end else begin
          if(popStatus_prefillCond) begin
            popStatus_reuseToK <= 1'b1;
            ptrPop_popPackLen <= 5'h1f;
          end else begin
            popStatus_reuseToQ <= 1'b1;
            ptrPop_popPackLen <= 5'h1f;
          end
        end
      end
      if(t_when_7) begin
        popStatus_lnToLogits <= 1'b0;
        popStatus_throughToLn <= 1'b1;
        ptrPop_popPackLen <= 5'h0;
      end
      if(t_when_8) begin
        popStatus_reuseToQ <= 1'b0;
        popStatus_reuseToK <= 1'b1;
        ptrPop_popPackLen <= 5'h1f;
      end
      if(t_when_9) begin
        popStatus_reuseToK <= 1'b0;
        if(popStatus_prefillCond) begin
          popStatus_reuseToV <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end else begin
          popStatus_qToQK <= 1'b1;
          ptrPop_popPackLen <= 5'h0;
        end
      end
      if(t_when_10) begin
        popStatus_qToQK <= 1'b0;
        popStatus_reuseToV <= 1'b1;
        ptrPop_popPackLen <= 5'h1f;
      end
      if(t_when_11) begin
        popStatus_reuseToV <= 1'b0;
        popStatus_headCnt <= popStatus_headCntNext;
        if(popStatus_prefillCond) begin
          popStatus_reuseToK <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end else begin
          popStatus_reuseToQ <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end
        if(popStatus_headCntOvf) begin
          popStatus_headCnt <= 5'h0;
          popStatus_reuseToQ <= 1'b0;
          popStatus_reuseToK <= 1'b0;
          if(t_when_12) begin
            popStatus_throughToLn <= 1'b1;
            ptrPop_popPackLen <= 5'h0;
          end else begin
            popStatus_qkvToOutProj <= 1'b1;
            ptrPop_popPackLen <= 5'h10;
          end
        end
      end
      if(t_when_13) begin
        popStatus_qkvToOutProj <= 1'b0;
        if(status_enPredictor) begin
          popStatus_reuseToPredU <= 1'b1;
        end else begin
          popStatus_reuseToGate <= 1'b1;
        end
        ptrPop_popPackLen <= 5'h0f;
      end
      if((popStatus_reuseToPredU && popStatus_stateTrig)) begin
        popStatus_reuseToPredU <= 1'b0;
        popStatus_reuseToGate <= 1'b1;
      end
      if((popStatus_reuseToGate && popStatus_stateTrig)) begin
        popStatus_reuseToGate <= 1'b0;
        popStatus_reuseToUp <= 1'b1;
      end
      if(t_when_14) begin
        popStatus_reuseToUp <= 1'b0;
        popStatus_throughToLn <= 1'b1;
        ptrPop_popPackLen <= 5'h0;
      end
      if((popStatus_lnToLogits && popStatus_stateTrig)) begin
        popStatus_logitsGen <= 1'b0;
      end
      if((pushStatus_stateTrig && ((pushStatus_lnOut && (! pushStatus_logitsGen)) || pushStatus_mlpLnOut))) begin
        reusePushFinish <= 1'b1;
      end
      if((popStatus_stateTrig && ((popStatus_reuseToV && popStatus_headCntOvf) || popStatus_reuseToUp))) begin
        reusePushFinish <= 1'b0;
      end
      if(popPre_thrown_ready) begin
        popPre_thrown_rValid <= popPre_thrown_valid;
      end
      ram_pushEn_0 <= io_input_valid;
      ram_pushEn_1 <= io_input_valid;
      ram_pushEn_2 <= io_input_valid;
      ram_pushEn_3 <= io_input_valid;
      ram_pushEn_4 <= io_input_valid;
      ram_pushEn_5 <= io_input_valid;
      ram_pushEn_6 <= io_input_valid;
      ram_pushEn_7 <= io_input_valid;
      ram_pushEn_8 <= io_input_valid;
      ram_pushEn_9 <= io_input_valid;
      ram_pushEn_10 <= io_input_valid;
      ram_pushEn_11 <= io_input_valid;
      ram_pushEn_12 <= io_input_valid;
      ram_pushEn_13 <= io_input_valid;
      ram_pushEn_14 <= io_input_valid;
      ram_pushEn_15 <= io_input_valid;
      ram_pushPtrLow_0 <= ptrPush_pushNext;
      ram_pushPtrLow_1 <= ptrPush_pushNext;
      ram_pushPtrLow_2 <= ptrPush_pushNext;
      ram_pushPtrLow_3 <= ptrPush_pushNext;
      ram_pushPtrLow_4 <= ptrPush_pushNext;
      ram_pushPtrLow_5 <= ptrPush_pushNext;
      ram_pushPtrLow_6 <= ptrPush_pushNext;
      ram_pushPtrLow_7 <= ptrPush_pushNext;
      ram_pushPtrLow_8 <= ptrPush_pushNext;
      ram_pushPtrLow_9 <= ptrPush_pushNext;
      ram_pushPtrLow_10 <= ptrPush_pushNext;
      ram_pushPtrLow_11 <= ptrPush_pushNext;
      ram_pushPtrLow_12 <= ptrPush_pushNext;
      ram_pushPtrLow_13 <= ptrPush_pushNext;
      ram_pushPtrLow_14 <= ptrPush_pushNext;
      ram_pushPtrLow_15 <= ptrPush_pushNext;
      ram_pushPtrMsb_0 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_1 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_2 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_3 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_4 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_5 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_6 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_7 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_8 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_9 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_10 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_11 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_12 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_13 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_14 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_15 <= ptrPush_pushReuseNext;
      ram_popPtrLow_0 <= ptrPop_popNext;
      ram_popPtrLow_1 <= ptrPop_popNext;
      ram_popPtrLow_2 <= ptrPop_popNext;
      ram_popPtrLow_3 <= ptrPop_popNext;
      ram_popPtrLow_4 <= ptrPop_popNext;
      ram_popPtrLow_5 <= ptrPop_popNext;
      ram_popPtrLow_6 <= ptrPop_popNext;
      ram_popPtrLow_7 <= ptrPop_popNext;
      ram_popPtrLow_8 <= ptrPop_popNext;
      ram_popPtrLow_9 <= ptrPop_popNext;
      ram_popPtrLow_10 <= ptrPop_popNext;
      ram_popPtrLow_11 <= ptrPop_popNext;
      ram_popPtrLow_12 <= ptrPop_popNext;
      ram_popPtrLow_13 <= ptrPop_popNext;
      ram_popPtrLow_14 <= ptrPop_popNext;
      ram_popPtrLow_15 <= ptrPop_popNext;
      ram_popPtrMsb_0 <= ptrPop_popReuseNext;
      ram_popPtrMsb_1 <= ptrPop_popReuseNext;
      ram_popPtrMsb_2 <= ptrPop_popReuseNext;
      ram_popPtrMsb_3 <= ptrPop_popReuseNext;
      ram_popPtrMsb_4 <= ptrPop_popReuseNext;
      ram_popPtrMsb_5 <= ptrPop_popReuseNext;
      ram_popPtrMsb_6 <= ptrPop_popReuseNext;
      ram_popPtrMsb_7 <= ptrPop_popReuseNext;
      ram_popPtrMsb_8 <= ptrPop_popReuseNext;
      ram_popPtrMsb_9 <= ptrPop_popReuseNext;
      ram_popPtrMsb_10 <= ptrPop_popReuseNext;
      ram_popPtrMsb_11 <= ptrPop_popReuseNext;
      ram_popPtrMsb_12 <= ptrPop_popReuseNext;
      ram_popPtrMsb_13 <= ptrPop_popReuseNext;
      ram_popPtrMsb_14 <= ptrPop_popReuseNext;
      ram_popPtrMsb_15 <= ptrPop_popReuseNext;
    end
  end

  always @(posedge clk_1_clk) begin
    dataDly <= io_input_tdata;
  end


endmodule

module Parallel2Serial (
  input  wire          io_input_valid,
  output wire          io_input_ready,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [6:0]    t_t_output_payload_1;
  wire       [0:0]    t_t_output_payload_1_1;
  reg        [15:0]   t_output_payload_4;
  wire                input_valid;
  wire                input_ready;
  wire       [2047:0] input_payload;
  wire                output_valid;
  wire                output_ready;
  wire       [15:0]   output_payload;
  wire                output_fire;
  reg                 t_output_payload;
  reg        [6:0]    t_output_payload_1;
  reg        [6:0]    t_output_payload_2;
  wire                t_input_ready;
  wire       [2047:0] t_output_payload_3;

  assign t_t_output_payload_1_1 = t_output_payload;
  assign t_t_output_payload_1 = {6'd0, t_t_output_payload_1_1};
  always @(*) begin
    case(t_output_payload_2)
      7'b0000000 : t_output_payload_4 = t_output_payload_3[15 : 0];
      7'b0000001 : t_output_payload_4 = t_output_payload_3[31 : 16];
      7'b0000010 : t_output_payload_4 = t_output_payload_3[47 : 32];
      7'b0000011 : t_output_payload_4 = t_output_payload_3[63 : 48];
      7'b0000100 : t_output_payload_4 = t_output_payload_3[79 : 64];
      7'b0000101 : t_output_payload_4 = t_output_payload_3[95 : 80];
      7'b0000110 : t_output_payload_4 = t_output_payload_3[111 : 96];
      7'b0000111 : t_output_payload_4 = t_output_payload_3[127 : 112];
      7'b0001000 : t_output_payload_4 = t_output_payload_3[143 : 128];
      7'b0001001 : t_output_payload_4 = t_output_payload_3[159 : 144];
      7'b0001010 : t_output_payload_4 = t_output_payload_3[175 : 160];
      7'b0001011 : t_output_payload_4 = t_output_payload_3[191 : 176];
      7'b0001100 : t_output_payload_4 = t_output_payload_3[207 : 192];
      7'b0001101 : t_output_payload_4 = t_output_payload_3[223 : 208];
      7'b0001110 : t_output_payload_4 = t_output_payload_3[239 : 224];
      7'b0001111 : t_output_payload_4 = t_output_payload_3[255 : 240];
      7'b0010000 : t_output_payload_4 = t_output_payload_3[271 : 256];
      7'b0010001 : t_output_payload_4 = t_output_payload_3[287 : 272];
      7'b0010010 : t_output_payload_4 = t_output_payload_3[303 : 288];
      7'b0010011 : t_output_payload_4 = t_output_payload_3[319 : 304];
      7'b0010100 : t_output_payload_4 = t_output_payload_3[335 : 320];
      7'b0010101 : t_output_payload_4 = t_output_payload_3[351 : 336];
      7'b0010110 : t_output_payload_4 = t_output_payload_3[367 : 352];
      7'b0010111 : t_output_payload_4 = t_output_payload_3[383 : 368];
      7'b0011000 : t_output_payload_4 = t_output_payload_3[399 : 384];
      7'b0011001 : t_output_payload_4 = t_output_payload_3[415 : 400];
      7'b0011010 : t_output_payload_4 = t_output_payload_3[431 : 416];
      7'b0011011 : t_output_payload_4 = t_output_payload_3[447 : 432];
      7'b0011100 : t_output_payload_4 = t_output_payload_3[463 : 448];
      7'b0011101 : t_output_payload_4 = t_output_payload_3[479 : 464];
      7'b0011110 : t_output_payload_4 = t_output_payload_3[495 : 480];
      7'b0011111 : t_output_payload_4 = t_output_payload_3[511 : 496];
      7'b0100000 : t_output_payload_4 = t_output_payload_3[527 : 512];
      7'b0100001 : t_output_payload_4 = t_output_payload_3[543 : 528];
      7'b0100010 : t_output_payload_4 = t_output_payload_3[559 : 544];
      7'b0100011 : t_output_payload_4 = t_output_payload_3[575 : 560];
      7'b0100100 : t_output_payload_4 = t_output_payload_3[591 : 576];
      7'b0100101 : t_output_payload_4 = t_output_payload_3[607 : 592];
      7'b0100110 : t_output_payload_4 = t_output_payload_3[623 : 608];
      7'b0100111 : t_output_payload_4 = t_output_payload_3[639 : 624];
      7'b0101000 : t_output_payload_4 = t_output_payload_3[655 : 640];
      7'b0101001 : t_output_payload_4 = t_output_payload_3[671 : 656];
      7'b0101010 : t_output_payload_4 = t_output_payload_3[687 : 672];
      7'b0101011 : t_output_payload_4 = t_output_payload_3[703 : 688];
      7'b0101100 : t_output_payload_4 = t_output_payload_3[719 : 704];
      7'b0101101 : t_output_payload_4 = t_output_payload_3[735 : 720];
      7'b0101110 : t_output_payload_4 = t_output_payload_3[751 : 736];
      7'b0101111 : t_output_payload_4 = t_output_payload_3[767 : 752];
      7'b0110000 : t_output_payload_4 = t_output_payload_3[783 : 768];
      7'b0110001 : t_output_payload_4 = t_output_payload_3[799 : 784];
      7'b0110010 : t_output_payload_4 = t_output_payload_3[815 : 800];
      7'b0110011 : t_output_payload_4 = t_output_payload_3[831 : 816];
      7'b0110100 : t_output_payload_4 = t_output_payload_3[847 : 832];
      7'b0110101 : t_output_payload_4 = t_output_payload_3[863 : 848];
      7'b0110110 : t_output_payload_4 = t_output_payload_3[879 : 864];
      7'b0110111 : t_output_payload_4 = t_output_payload_3[895 : 880];
      7'b0111000 : t_output_payload_4 = t_output_payload_3[911 : 896];
      7'b0111001 : t_output_payload_4 = t_output_payload_3[927 : 912];
      7'b0111010 : t_output_payload_4 = t_output_payload_3[943 : 928];
      7'b0111011 : t_output_payload_4 = t_output_payload_3[959 : 944];
      7'b0111100 : t_output_payload_4 = t_output_payload_3[975 : 960];
      7'b0111101 : t_output_payload_4 = t_output_payload_3[991 : 976];
      7'b0111110 : t_output_payload_4 = t_output_payload_3[1007 : 992];
      7'b0111111 : t_output_payload_4 = t_output_payload_3[1023 : 1008];
      7'b1000000 : t_output_payload_4 = t_output_payload_3[1039 : 1024];
      7'b1000001 : t_output_payload_4 = t_output_payload_3[1055 : 1040];
      7'b1000010 : t_output_payload_4 = t_output_payload_3[1071 : 1056];
      7'b1000011 : t_output_payload_4 = t_output_payload_3[1087 : 1072];
      7'b1000100 : t_output_payload_4 = t_output_payload_3[1103 : 1088];
      7'b1000101 : t_output_payload_4 = t_output_payload_3[1119 : 1104];
      7'b1000110 : t_output_payload_4 = t_output_payload_3[1135 : 1120];
      7'b1000111 : t_output_payload_4 = t_output_payload_3[1151 : 1136];
      7'b1001000 : t_output_payload_4 = t_output_payload_3[1167 : 1152];
      7'b1001001 : t_output_payload_4 = t_output_payload_3[1183 : 1168];
      7'b1001010 : t_output_payload_4 = t_output_payload_3[1199 : 1184];
      7'b1001011 : t_output_payload_4 = t_output_payload_3[1215 : 1200];
      7'b1001100 : t_output_payload_4 = t_output_payload_3[1231 : 1216];
      7'b1001101 : t_output_payload_4 = t_output_payload_3[1247 : 1232];
      7'b1001110 : t_output_payload_4 = t_output_payload_3[1263 : 1248];
      7'b1001111 : t_output_payload_4 = t_output_payload_3[1279 : 1264];
      7'b1010000 : t_output_payload_4 = t_output_payload_3[1295 : 1280];
      7'b1010001 : t_output_payload_4 = t_output_payload_3[1311 : 1296];
      7'b1010010 : t_output_payload_4 = t_output_payload_3[1327 : 1312];
      7'b1010011 : t_output_payload_4 = t_output_payload_3[1343 : 1328];
      7'b1010100 : t_output_payload_4 = t_output_payload_3[1359 : 1344];
      7'b1010101 : t_output_payload_4 = t_output_payload_3[1375 : 1360];
      7'b1010110 : t_output_payload_4 = t_output_payload_3[1391 : 1376];
      7'b1010111 : t_output_payload_4 = t_output_payload_3[1407 : 1392];
      7'b1011000 : t_output_payload_4 = t_output_payload_3[1423 : 1408];
      7'b1011001 : t_output_payload_4 = t_output_payload_3[1439 : 1424];
      7'b1011010 : t_output_payload_4 = t_output_payload_3[1455 : 1440];
      7'b1011011 : t_output_payload_4 = t_output_payload_3[1471 : 1456];
      7'b1011100 : t_output_payload_4 = t_output_payload_3[1487 : 1472];
      7'b1011101 : t_output_payload_4 = t_output_payload_3[1503 : 1488];
      7'b1011110 : t_output_payload_4 = t_output_payload_3[1519 : 1504];
      7'b1011111 : t_output_payload_4 = t_output_payload_3[1535 : 1520];
      7'b1100000 : t_output_payload_4 = t_output_payload_3[1551 : 1536];
      7'b1100001 : t_output_payload_4 = t_output_payload_3[1567 : 1552];
      7'b1100010 : t_output_payload_4 = t_output_payload_3[1583 : 1568];
      7'b1100011 : t_output_payload_4 = t_output_payload_3[1599 : 1584];
      7'b1100100 : t_output_payload_4 = t_output_payload_3[1615 : 1600];
      7'b1100101 : t_output_payload_4 = t_output_payload_3[1631 : 1616];
      7'b1100110 : t_output_payload_4 = t_output_payload_3[1647 : 1632];
      7'b1100111 : t_output_payload_4 = t_output_payload_3[1663 : 1648];
      7'b1101000 : t_output_payload_4 = t_output_payload_3[1679 : 1664];
      7'b1101001 : t_output_payload_4 = t_output_payload_3[1695 : 1680];
      7'b1101010 : t_output_payload_4 = t_output_payload_3[1711 : 1696];
      7'b1101011 : t_output_payload_4 = t_output_payload_3[1727 : 1712];
      7'b1101100 : t_output_payload_4 = t_output_payload_3[1743 : 1728];
      7'b1101101 : t_output_payload_4 = t_output_payload_3[1759 : 1744];
      7'b1101110 : t_output_payload_4 = t_output_payload_3[1775 : 1760];
      7'b1101111 : t_output_payload_4 = t_output_payload_3[1791 : 1776];
      7'b1110000 : t_output_payload_4 = t_output_payload_3[1807 : 1792];
      7'b1110001 : t_output_payload_4 = t_output_payload_3[1823 : 1808];
      7'b1110010 : t_output_payload_4 = t_output_payload_3[1839 : 1824];
      7'b1110011 : t_output_payload_4 = t_output_payload_3[1855 : 1840];
      7'b1110100 : t_output_payload_4 = t_output_payload_3[1871 : 1856];
      7'b1110101 : t_output_payload_4 = t_output_payload_3[1887 : 1872];
      7'b1110110 : t_output_payload_4 = t_output_payload_3[1903 : 1888];
      7'b1110111 : t_output_payload_4 = t_output_payload_3[1919 : 1904];
      7'b1111000 : t_output_payload_4 = t_output_payload_3[1935 : 1920];
      7'b1111001 : t_output_payload_4 = t_output_payload_3[1951 : 1936];
      7'b1111010 : t_output_payload_4 = t_output_payload_3[1967 : 1952];
      7'b1111011 : t_output_payload_4 = t_output_payload_3[1983 : 1968];
      7'b1111100 : t_output_payload_4 = t_output_payload_3[1999 : 1984];
      7'b1111101 : t_output_payload_4 = t_output_payload_3[2015 : 2000];
      7'b1111110 : t_output_payload_4 = t_output_payload_3[2031 : 2016];
      default : t_output_payload_4 = t_output_payload_3[2047 : 2032];
    endcase
  end

  assign input_valid = io_input_valid;
  assign io_input_ready = input_ready;
  assign input_payload = io_input_tdata;
  assign output_fire = (output_valid && output_ready);
  always @(*) begin
    t_output_payload = 1'b0;
    if(output_fire) begin
      t_output_payload = 1'b1;
    end
  end

  assign t_input_ready = (t_output_payload_2 == 7'h7f);
  always @(*) begin
    t_output_payload_1 = (t_output_payload_2 + t_t_output_payload_1);
    if(1'b0) begin
      t_output_payload_1 = 7'h0;
    end
  end

  assign output_valid = input_valid;
  assign t_output_payload_3 = input_payload;
  assign output_payload = t_output_payload_4;
  assign input_ready = (output_ready && t_input_ready);
  assign output_ready = 1'b1;
  assign io_output_valid = output_valid;
  assign io_output_tdata = output_payload;
  assign io_output_tuser = io_input_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      t_output_payload_2 <= 7'h0;
    end else begin
      t_output_payload_2 <= t_output_payload_1;
    end
  end


endmodule

module StreamAxiFrameFifo (
  input  wire          io_input_valid,
  output wire          io_input_ready,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [2047:0] io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                largeBankFifo_12_io_push_ready;
  wire                largeBankFifo_12_io_pop_valid;
  wire       [2047:0] largeBankFifo_12_io_pop_payload;
  wire       [5:0]    largeBankFifo_12_io_occupancy;
  wire       [5:0]    largeBankFifo_12_io_availability;
  wire                streamFifo_144_io_push_ready;
  wire                streamFifo_144_io_pop_valid;
  wire       [5:0]    streamFifo_144_io_pop_payload;
  wire       [5:0]    streamFifo_144_io_occupancy;
  wire       [5:0]    streamFifo_144_io_availability;

  LargeBankFifo_10 largeBankFifo_12 (
    .io_push_valid   (io_input_valid                         ), //i
    .io_push_ready   (largeBankFifo_12_io_push_ready         ), //o
    .io_push_payload (io_input_tdata[2047:0]                 ), //i
    .io_pop_valid    (largeBankFifo_12_io_pop_valid          ), //o
    .io_pop_ready    (io_output_ready                        ), //i
    .io_pop_payload  (largeBankFifo_12_io_pop_payload[2047:0]), //o
    .io_occupancy    (largeBankFifo_12_io_occupancy[5:0]     ), //o
    .io_availability (largeBankFifo_12_io_availability[5:0]  ), //o
    .clk_1_clk       (clk_1_clk                              ), //i
    .clk_1_resetn    (clk_1_resetn                           )  //i
  );
  StreamFifo_71 streamFifo_144 (
    .io_push_valid   (io_input_valid                     ), //i
    .io_push_ready   (streamFifo_144_io_push_ready       ), //o
    .io_push_payload (io_input_tuser[5:0]                ), //i
    .io_pop_valid    (streamFifo_144_io_pop_valid        ), //o
    .io_pop_ready    (io_output_ready                    ), //i
    .io_pop_payload  (streamFifo_144_io_pop_payload[5:0] ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (streamFifo_144_io_occupancy[5:0]   ), //o
    .io_availability (streamFifo_144_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                          ), //i
    .clk_1_resetn    (clk_1_resetn                       )  //i
  );
  assign io_input_ready = largeBankFifo_12_io_push_ready;
  assign io_output_valid = largeBankFifo_12_io_pop_valid;
  assign io_output_tdata = largeBankFifo_12_io_pop_payload;
  assign io_output_tuser = streamFifo_144_io_pop_payload;

endmodule

//LargeBankFifo_1 replaced by LargeBankFifo_10

module Int4Int8FP16Conv (
  input  wire          selInt8,
  input  wire          inputData_tvalid,
  input  wire [511:0]  inputData_tdata,
  input  wire          zeroInt4_tvalid,
  output wire          zeroInt4_tready,
  input  wire [7:0]    zeroInt4_tdata,
  input  wire          zeroInt8_tvalid,
  output wire          zeroInt8_tready,
  input  wire [7:0]    zeroInt8_tdata,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [0:0]    zeroMux_io_select;
  wire                zeroMux_io_inputs_0_ready;
  wire                zeroMux_io_inputs_1_ready;
  wire                zeroMux_io_output_valid;
  wire       [7:0]    zeroMux_io_output_payload;
  wire                d_0_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_0_from_ip_m_axis_result_tdata;
  wire                d_1_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_1_from_ip_m_axis_result_tdata;
  wire                d_2_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_2_from_ip_m_axis_result_tdata;
  wire                d_3_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_3_from_ip_m_axis_result_tdata;
  wire                d_4_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_4_from_ip_m_axis_result_tdata;
  wire                d_5_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_5_from_ip_m_axis_result_tdata;
  wire                d_6_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_6_from_ip_m_axis_result_tdata;
  wire                d_7_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_7_from_ip_m_axis_result_tdata;
  wire                d_8_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_8_from_ip_m_axis_result_tdata;
  wire                d_9_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_9_from_ip_m_axis_result_tdata;
  wire                d_10_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_10_from_ip_m_axis_result_tdata;
  wire                d_11_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_11_from_ip_m_axis_result_tdata;
  wire                d_12_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_12_from_ip_m_axis_result_tdata;
  wire                d_13_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_13_from_ip_m_axis_result_tdata;
  wire                d_14_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_14_from_ip_m_axis_result_tdata;
  wire                d_15_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_15_from_ip_m_axis_result_tdata;
  wire                d_16_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_16_from_ip_m_axis_result_tdata;
  wire                d_17_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_17_from_ip_m_axis_result_tdata;
  wire                d_18_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_18_from_ip_m_axis_result_tdata;
  wire                d_19_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_19_from_ip_m_axis_result_tdata;
  wire                d_20_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_20_from_ip_m_axis_result_tdata;
  wire                d_21_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_21_from_ip_m_axis_result_tdata;
  wire                d_22_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_22_from_ip_m_axis_result_tdata;
  wire                d_23_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_23_from_ip_m_axis_result_tdata;
  wire                d_24_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_24_from_ip_m_axis_result_tdata;
  wire                d_25_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_25_from_ip_m_axis_result_tdata;
  wire                d_26_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_26_from_ip_m_axis_result_tdata;
  wire                d_27_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_27_from_ip_m_axis_result_tdata;
  wire                d_28_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_28_from_ip_m_axis_result_tdata;
  wire                d_29_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_29_from_ip_m_axis_result_tdata;
  wire                d_30_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_30_from_ip_m_axis_result_tdata;
  wire                d_31_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_31_from_ip_m_axis_result_tdata;
  wire                d_32_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_32_from_ip_m_axis_result_tdata;
  wire                d_33_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_33_from_ip_m_axis_result_tdata;
  wire                d_34_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_34_from_ip_m_axis_result_tdata;
  wire                d_35_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_35_from_ip_m_axis_result_tdata;
  wire                d_36_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_36_from_ip_m_axis_result_tdata;
  wire                d_37_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_37_from_ip_m_axis_result_tdata;
  wire                d_38_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_38_from_ip_m_axis_result_tdata;
  wire                d_39_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_39_from_ip_m_axis_result_tdata;
  wire                d_40_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_40_from_ip_m_axis_result_tdata;
  wire                d_41_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_41_from_ip_m_axis_result_tdata;
  wire                d_42_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_42_from_ip_m_axis_result_tdata;
  wire                d_43_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_43_from_ip_m_axis_result_tdata;
  wire                d_44_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_44_from_ip_m_axis_result_tdata;
  wire                d_45_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_45_from_ip_m_axis_result_tdata;
  wire                d_46_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_46_from_ip_m_axis_result_tdata;
  wire                d_47_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_47_from_ip_m_axis_result_tdata;
  wire                d_48_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_48_from_ip_m_axis_result_tdata;
  wire                d_49_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_49_from_ip_m_axis_result_tdata;
  wire                d_50_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_50_from_ip_m_axis_result_tdata;
  wire                d_51_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_51_from_ip_m_axis_result_tdata;
  wire                d_52_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_52_from_ip_m_axis_result_tdata;
  wire                d_53_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_53_from_ip_m_axis_result_tdata;
  wire                d_54_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_54_from_ip_m_axis_result_tdata;
  wire                d_55_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_55_from_ip_m_axis_result_tdata;
  wire                d_56_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_56_from_ip_m_axis_result_tdata;
  wire                d_57_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_57_from_ip_m_axis_result_tdata;
  wire                d_58_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_58_from_ip_m_axis_result_tdata;
  wire                d_59_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_59_from_ip_m_axis_result_tdata;
  wire                d_60_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_60_from_ip_m_axis_result_tdata;
  wire                d_61_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_61_from_ip_m_axis_result_tdata;
  wire                d_62_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_62_from_ip_m_axis_result_tdata;
  wire                d_63_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_63_from_ip_m_axis_result_tdata;
  wire                d_64_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_64_from_ip_m_axis_result_tdata;
  wire                d_65_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_65_from_ip_m_axis_result_tdata;
  wire                d_66_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_66_from_ip_m_axis_result_tdata;
  wire                d_67_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_67_from_ip_m_axis_result_tdata;
  wire                d_68_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_68_from_ip_m_axis_result_tdata;
  wire                d_69_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_69_from_ip_m_axis_result_tdata;
  wire                d_70_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_70_from_ip_m_axis_result_tdata;
  wire                d_71_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_71_from_ip_m_axis_result_tdata;
  wire                d_72_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_72_from_ip_m_axis_result_tdata;
  wire                d_73_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_73_from_ip_m_axis_result_tdata;
  wire                d_74_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_74_from_ip_m_axis_result_tdata;
  wire                d_75_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_75_from_ip_m_axis_result_tdata;
  wire                d_76_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_76_from_ip_m_axis_result_tdata;
  wire                d_77_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_77_from_ip_m_axis_result_tdata;
  wire                d_78_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_78_from_ip_m_axis_result_tdata;
  wire                d_79_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_79_from_ip_m_axis_result_tdata;
  wire                d_80_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_80_from_ip_m_axis_result_tdata;
  wire                d_81_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_81_from_ip_m_axis_result_tdata;
  wire                d_82_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_82_from_ip_m_axis_result_tdata;
  wire                d_83_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_83_from_ip_m_axis_result_tdata;
  wire                d_84_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_84_from_ip_m_axis_result_tdata;
  wire                d_85_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_85_from_ip_m_axis_result_tdata;
  wire                d_86_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_86_from_ip_m_axis_result_tdata;
  wire                d_87_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_87_from_ip_m_axis_result_tdata;
  wire                d_88_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_88_from_ip_m_axis_result_tdata;
  wire                d_89_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_89_from_ip_m_axis_result_tdata;
  wire                d_90_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_90_from_ip_m_axis_result_tdata;
  wire                d_91_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_91_from_ip_m_axis_result_tdata;
  wire                d_92_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_92_from_ip_m_axis_result_tdata;
  wire                d_93_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_93_from_ip_m_axis_result_tdata;
  wire                d_94_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_94_from_ip_m_axis_result_tdata;
  wire                d_95_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_95_from_ip_m_axis_result_tdata;
  wire                d_96_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_96_from_ip_m_axis_result_tdata;
  wire                d_97_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_97_from_ip_m_axis_result_tdata;
  wire                d_98_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_98_from_ip_m_axis_result_tdata;
  wire                d_99_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_99_from_ip_m_axis_result_tdata;
  wire                d_100_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_100_from_ip_m_axis_result_tdata;
  wire                d_101_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_101_from_ip_m_axis_result_tdata;
  wire                d_102_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_102_from_ip_m_axis_result_tdata;
  wire                d_103_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_103_from_ip_m_axis_result_tdata;
  wire                d_104_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_104_from_ip_m_axis_result_tdata;
  wire                d_105_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_105_from_ip_m_axis_result_tdata;
  wire                d_106_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_106_from_ip_m_axis_result_tdata;
  wire                d_107_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_107_from_ip_m_axis_result_tdata;
  wire                d_108_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_108_from_ip_m_axis_result_tdata;
  wire                d_109_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_109_from_ip_m_axis_result_tdata;
  wire                d_110_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_110_from_ip_m_axis_result_tdata;
  wire                d_111_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_111_from_ip_m_axis_result_tdata;
  wire                d_112_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_112_from_ip_m_axis_result_tdata;
  wire                d_113_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_113_from_ip_m_axis_result_tdata;
  wire                d_114_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_114_from_ip_m_axis_result_tdata;
  wire                d_115_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_115_from_ip_m_axis_result_tdata;
  wire                d_116_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_116_from_ip_m_axis_result_tdata;
  wire                d_117_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_117_from_ip_m_axis_result_tdata;
  wire                d_118_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_118_from_ip_m_axis_result_tdata;
  wire                d_119_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_119_from_ip_m_axis_result_tdata;
  wire                d_120_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_120_from_ip_m_axis_result_tdata;
  wire                d_121_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_121_from_ip_m_axis_result_tdata;
  wire                d_122_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_122_from_ip_m_axis_result_tdata;
  wire                d_123_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_123_from_ip_m_axis_result_tdata;
  wire                d_124_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_124_from_ip_m_axis_result_tdata;
  wire                d_125_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_125_from_ip_m_axis_result_tdata;
  wire                d_126_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_126_from_ip_m_axis_result_tdata;
  wire                d_127_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_127_from_ip_m_axis_result_tdata;
  wire       [3:0]    t_int4Data_0;
  wire       [3:0]    t_int4Data_1;
  wire       [3:0]    t_int4Data_2;
  wire       [3:0]    t_int4Data_3;
  wire       [3:0]    t_int4Data_4;
  wire       [3:0]    t_int4Data_5;
  wire       [3:0]    t_int4Data_6;
  wire       [3:0]    t_int4Data_7;
  wire       [3:0]    t_int4Data_8;
  wire       [3:0]    t_int4Data_9;
  wire       [3:0]    t_int4Data_10;
  wire       [3:0]    t_int4Data_11;
  wire       [3:0]    t_int4Data_12;
  wire       [3:0]    t_int4Data_13;
  wire       [3:0]    t_int4Data_14;
  wire       [3:0]    t_int4Data_15;
  wire       [3:0]    t_int4Data_16;
  wire       [3:0]    t_int4Data_17;
  wire       [3:0]    t_int4Data_18;
  wire       [3:0]    t_int4Data_19;
  wire       [3:0]    t_int4Data_20;
  wire       [3:0]    t_int4Data_21;
  wire       [3:0]    t_int4Data_22;
  wire       [3:0]    t_int4Data_23;
  wire       [3:0]    t_int4Data_24;
  wire       [3:0]    t_int4Data_25;
  wire       [3:0]    t_int4Data_26;
  wire       [3:0]    t_int4Data_27;
  wire       [3:0]    t_int4Data_28;
  wire       [3:0]    t_int4Data_29;
  wire       [3:0]    t_int4Data_30;
  wire       [3:0]    t_int4Data_31;
  wire       [3:0]    t_int4Data_32;
  wire       [3:0]    t_int4Data_33;
  wire       [3:0]    t_int4Data_34;
  wire       [3:0]    t_int4Data_35;
  wire       [3:0]    t_int4Data_36;
  wire       [3:0]    t_int4Data_37;
  wire       [3:0]    t_int4Data_38;
  wire       [3:0]    t_int4Data_39;
  wire       [3:0]    t_int4Data_40;
  wire       [3:0]    t_int4Data_41;
  wire       [3:0]    t_int4Data_42;
  wire       [3:0]    t_int4Data_43;
  wire       [3:0]    t_int4Data_44;
  wire       [3:0]    t_int4Data_45;
  wire       [3:0]    t_int4Data_46;
  wire       [3:0]    t_int4Data_47;
  wire       [3:0]    t_int4Data_48;
  wire       [3:0]    t_int4Data_49;
  wire       [3:0]    t_int4Data_50;
  wire       [3:0]    t_int4Data_51;
  wire       [3:0]    t_int4Data_52;
  wire       [3:0]    t_int4Data_53;
  wire       [3:0]    t_int4Data_54;
  wire       [3:0]    t_int4Data_55;
  wire       [3:0]    t_int4Data_56;
  wire       [3:0]    t_int4Data_57;
  wire       [3:0]    t_int4Data_58;
  wire       [3:0]    t_int4Data_59;
  wire       [3:0]    t_int4Data_60;
  wire       [3:0]    t_int4Data_61;
  wire       [3:0]    t_int4Data_62;
  wire       [3:0]    t_int4Data_63;
  wire       [3:0]    t_int4Data_64;
  wire       [3:0]    t_int4Data_65;
  wire       [3:0]    t_int4Data_66;
  wire       [3:0]    t_int4Data_67;
  wire       [3:0]    t_int4Data_68;
  wire       [3:0]    t_int4Data_69;
  wire       [3:0]    t_int4Data_70;
  wire       [3:0]    t_int4Data_71;
  wire       [3:0]    t_int4Data_72;
  wire       [3:0]    t_int4Data_73;
  wire       [3:0]    t_int4Data_74;
  wire       [3:0]    t_int4Data_75;
  wire       [3:0]    t_int4Data_76;
  wire       [3:0]    t_int4Data_77;
  wire       [3:0]    t_int4Data_78;
  wire       [3:0]    t_int4Data_79;
  wire       [3:0]    t_int4Data_80;
  wire       [3:0]    t_int4Data_81;
  wire       [3:0]    t_int4Data_82;
  wire       [3:0]    t_int4Data_83;
  wire       [3:0]    t_int4Data_84;
  wire       [3:0]    t_int4Data_85;
  wire       [3:0]    t_int4Data_86;
  wire       [3:0]    t_int4Data_87;
  wire       [3:0]    t_int4Data_88;
  wire       [3:0]    t_int4Data_89;
  wire       [3:0]    t_int4Data_90;
  wire       [3:0]    t_int4Data_91;
  wire       [3:0]    t_int4Data_92;
  wire       [3:0]    t_int4Data_93;
  wire       [3:0]    t_int4Data_94;
  wire       [3:0]    t_int4Data_95;
  wire       [3:0]    t_int4Data_96;
  wire       [3:0]    t_int4Data_97;
  wire       [3:0]    t_int4Data_98;
  wire       [3:0]    t_int4Data_99;
  wire       [3:0]    t_int4Data_100;
  wire       [3:0]    t_int4Data_101;
  wire       [3:0]    t_int4Data_102;
  wire       [3:0]    t_int4Data_103;
  wire       [3:0]    t_int4Data_104;
  wire       [3:0]    t_int4Data_105;
  wire       [3:0]    t_int4Data_106;
  wire       [3:0]    t_int4Data_107;
  wire       [3:0]    t_int4Data_108;
  wire       [3:0]    t_int4Data_109;
  wire       [3:0]    t_int4Data_110;
  wire       [3:0]    t_int4Data_111;
  wire       [3:0]    t_int4Data_112;
  wire       [3:0]    t_int4Data_113;
  wire       [3:0]    t_int4Data_114;
  wire       [3:0]    t_int4Data_115;
  wire       [3:0]    t_int4Data_116;
  wire       [3:0]    t_int4Data_117;
  wire       [3:0]    t_int4Data_118;
  wire       [3:0]    t_int4Data_119;
  wire       [3:0]    t_int4Data_120;
  wire       [3:0]    t_int4Data_121;
  wire       [3:0]    t_int4Data_122;
  wire       [3:0]    t_int4Data_123;
  wire       [3:0]    t_int4Data_124;
  wire       [3:0]    t_int4Data_125;
  wire       [3:0]    t_int4Data_126;
  wire       [3:0]    t_int4Data_127;
  wire       [8:0]    t_dSub_0;
  wire       [8:0]    t_dSub_0_1;
  wire       [8:0]    t_dSub_1;
  wire       [8:0]    t_dSub_1_1;
  wire       [8:0]    t_dSub_2;
  wire       [8:0]    t_dSub_2_1;
  wire       [8:0]    t_dSub_3;
  wire       [8:0]    t_dSub_3_1;
  wire       [8:0]    t_dSub_4;
  wire       [8:0]    t_dSub_4_1;
  wire       [8:0]    t_dSub_5;
  wire       [8:0]    t_dSub_5_1;
  wire       [8:0]    t_dSub_6;
  wire       [8:0]    t_dSub_6_1;
  wire       [8:0]    t_dSub_7;
  wire       [8:0]    t_dSub_7_1;
  wire       [8:0]    t_dSub_8;
  wire       [8:0]    t_dSub_8_1;
  wire       [8:0]    t_dSub_9;
  wire       [8:0]    t_dSub_9_1;
  wire       [8:0]    t_dSub_10;
  wire       [8:0]    t_dSub_10_1;
  wire       [8:0]    t_dSub_11;
  wire       [8:0]    t_dSub_11_1;
  wire       [8:0]    t_dSub_12;
  wire       [8:0]    t_dSub_12_1;
  wire       [8:0]    t_dSub_13;
  wire       [8:0]    t_dSub_13_1;
  wire       [8:0]    t_dSub_14;
  wire       [8:0]    t_dSub_14_1;
  wire       [8:0]    t_dSub_15;
  wire       [8:0]    t_dSub_15_1;
  wire       [8:0]    t_dSub_16;
  wire       [8:0]    t_dSub_16_1;
  wire       [8:0]    t_dSub_17;
  wire       [8:0]    t_dSub_17_1;
  wire       [8:0]    t_dSub_18;
  wire       [8:0]    t_dSub_18_1;
  wire       [8:0]    t_dSub_19;
  wire       [8:0]    t_dSub_19_1;
  wire       [8:0]    t_dSub_20;
  wire       [8:0]    t_dSub_20_1;
  wire       [8:0]    t_dSub_21;
  wire       [8:0]    t_dSub_21_1;
  wire       [8:0]    t_dSub_22;
  wire       [8:0]    t_dSub_22_1;
  wire       [8:0]    t_dSub_23;
  wire       [8:0]    t_dSub_23_1;
  wire       [8:0]    t_dSub_24;
  wire       [8:0]    t_dSub_24_1;
  wire       [8:0]    t_dSub_25;
  wire       [8:0]    t_dSub_25_1;
  wire       [8:0]    t_dSub_26;
  wire       [8:0]    t_dSub_26_1;
  wire       [8:0]    t_dSub_27;
  wire       [8:0]    t_dSub_27_1;
  wire       [8:0]    t_dSub_28;
  wire       [8:0]    t_dSub_28_1;
  wire       [8:0]    t_dSub_29;
  wire       [8:0]    t_dSub_29_1;
  wire       [8:0]    t_dSub_30;
  wire       [8:0]    t_dSub_30_1;
  wire       [8:0]    t_dSub_31;
  wire       [8:0]    t_dSub_31_1;
  wire       [8:0]    t_dSub_32;
  wire       [8:0]    t_dSub_32_1;
  wire       [8:0]    t_dSub_33;
  wire       [8:0]    t_dSub_33_1;
  wire       [8:0]    t_dSub_34;
  wire       [8:0]    t_dSub_34_1;
  wire       [8:0]    t_dSub_35;
  wire       [8:0]    t_dSub_35_1;
  wire       [8:0]    t_dSub_36;
  wire       [8:0]    t_dSub_36_1;
  wire       [8:0]    t_dSub_37;
  wire       [8:0]    t_dSub_37_1;
  wire       [8:0]    t_dSub_38;
  wire       [8:0]    t_dSub_38_1;
  wire       [8:0]    t_dSub_39;
  wire       [8:0]    t_dSub_39_1;
  wire       [8:0]    t_dSub_40;
  wire       [8:0]    t_dSub_40_1;
  wire       [8:0]    t_dSub_41;
  wire       [8:0]    t_dSub_41_1;
  wire       [8:0]    t_dSub_42;
  wire       [8:0]    t_dSub_42_1;
  wire       [8:0]    t_dSub_43;
  wire       [8:0]    t_dSub_43_1;
  wire       [8:0]    t_dSub_44;
  wire       [8:0]    t_dSub_44_1;
  wire       [8:0]    t_dSub_45;
  wire       [8:0]    t_dSub_45_1;
  wire       [8:0]    t_dSub_46;
  wire       [8:0]    t_dSub_46_1;
  wire       [8:0]    t_dSub_47;
  wire       [8:0]    t_dSub_47_1;
  wire       [8:0]    t_dSub_48;
  wire       [8:0]    t_dSub_48_1;
  wire       [8:0]    t_dSub_49;
  wire       [8:0]    t_dSub_49_1;
  wire       [8:0]    t_dSub_50;
  wire       [8:0]    t_dSub_50_1;
  wire       [8:0]    t_dSub_51;
  wire       [8:0]    t_dSub_51_1;
  wire       [8:0]    t_dSub_52;
  wire       [8:0]    t_dSub_52_1;
  wire       [8:0]    t_dSub_53;
  wire       [8:0]    t_dSub_53_1;
  wire       [8:0]    t_dSub_54;
  wire       [8:0]    t_dSub_54_1;
  wire       [8:0]    t_dSub_55;
  wire       [8:0]    t_dSub_55_1;
  wire       [8:0]    t_dSub_56;
  wire       [8:0]    t_dSub_56_1;
  wire       [8:0]    t_dSub_57;
  wire       [8:0]    t_dSub_57_1;
  wire       [8:0]    t_dSub_58;
  wire       [8:0]    t_dSub_58_1;
  wire       [8:0]    t_dSub_59;
  wire       [8:0]    t_dSub_59_1;
  wire       [8:0]    t_dSub_60;
  wire       [8:0]    t_dSub_60_1;
  wire       [8:0]    t_dSub_61;
  wire       [8:0]    t_dSub_61_1;
  wire       [8:0]    t_dSub_62;
  wire       [8:0]    t_dSub_62_1;
  wire       [8:0]    t_dSub_63;
  wire       [8:0]    t_dSub_63_1;
  wire       [8:0]    t_dSub_64;
  wire       [8:0]    t_dSub_64_1;
  wire       [8:0]    t_dSub_65;
  wire       [8:0]    t_dSub_65_1;
  wire       [8:0]    t_dSub_66;
  wire       [8:0]    t_dSub_66_1;
  wire       [8:0]    t_dSub_67;
  wire       [8:0]    t_dSub_67_1;
  wire       [8:0]    t_dSub_68;
  wire       [8:0]    t_dSub_68_1;
  wire       [8:0]    t_dSub_69;
  wire       [8:0]    t_dSub_69_1;
  wire       [8:0]    t_dSub_70;
  wire       [8:0]    t_dSub_70_1;
  wire       [8:0]    t_dSub_71;
  wire       [8:0]    t_dSub_71_1;
  wire       [8:0]    t_dSub_72;
  wire       [8:0]    t_dSub_72_1;
  wire       [8:0]    t_dSub_73;
  wire       [8:0]    t_dSub_73_1;
  wire       [8:0]    t_dSub_74;
  wire       [8:0]    t_dSub_74_1;
  wire       [8:0]    t_dSub_75;
  wire       [8:0]    t_dSub_75_1;
  wire       [8:0]    t_dSub_76;
  wire       [8:0]    t_dSub_76_1;
  wire       [8:0]    t_dSub_77;
  wire       [8:0]    t_dSub_77_1;
  wire       [8:0]    t_dSub_78;
  wire       [8:0]    t_dSub_78_1;
  wire       [8:0]    t_dSub_79;
  wire       [8:0]    t_dSub_79_1;
  wire       [8:0]    t_dSub_80;
  wire       [8:0]    t_dSub_80_1;
  wire       [8:0]    t_dSub_81;
  wire       [8:0]    t_dSub_81_1;
  wire       [8:0]    t_dSub_82;
  wire       [8:0]    t_dSub_82_1;
  wire       [8:0]    t_dSub_83;
  wire       [8:0]    t_dSub_83_1;
  wire       [8:0]    t_dSub_84;
  wire       [8:0]    t_dSub_84_1;
  wire       [8:0]    t_dSub_85;
  wire       [8:0]    t_dSub_85_1;
  wire       [8:0]    t_dSub_86;
  wire       [8:0]    t_dSub_86_1;
  wire       [8:0]    t_dSub_87;
  wire       [8:0]    t_dSub_87_1;
  wire       [8:0]    t_dSub_88;
  wire       [8:0]    t_dSub_88_1;
  wire       [8:0]    t_dSub_89;
  wire       [8:0]    t_dSub_89_1;
  wire       [8:0]    t_dSub_90;
  wire       [8:0]    t_dSub_90_1;
  wire       [8:0]    t_dSub_91;
  wire       [8:0]    t_dSub_91_1;
  wire       [8:0]    t_dSub_92;
  wire       [8:0]    t_dSub_92_1;
  wire       [8:0]    t_dSub_93;
  wire       [8:0]    t_dSub_93_1;
  wire       [8:0]    t_dSub_94;
  wire       [8:0]    t_dSub_94_1;
  wire       [8:0]    t_dSub_95;
  wire       [8:0]    t_dSub_95_1;
  wire       [8:0]    t_dSub_96;
  wire       [8:0]    t_dSub_96_1;
  wire       [8:0]    t_dSub_97;
  wire       [8:0]    t_dSub_97_1;
  wire       [8:0]    t_dSub_98;
  wire       [8:0]    t_dSub_98_1;
  wire       [8:0]    t_dSub_99;
  wire       [8:0]    t_dSub_99_1;
  wire       [8:0]    t_dSub_100;
  wire       [8:0]    t_dSub_100_1;
  wire       [8:0]    t_dSub_101;
  wire       [8:0]    t_dSub_101_1;
  wire       [8:0]    t_dSub_102;
  wire       [8:0]    t_dSub_102_1;
  wire       [8:0]    t_dSub_103;
  wire       [8:0]    t_dSub_103_1;
  wire       [8:0]    t_dSub_104;
  wire       [8:0]    t_dSub_104_1;
  wire       [8:0]    t_dSub_105;
  wire       [8:0]    t_dSub_105_1;
  wire       [8:0]    t_dSub_106;
  wire       [8:0]    t_dSub_106_1;
  wire       [8:0]    t_dSub_107;
  wire       [8:0]    t_dSub_107_1;
  wire       [8:0]    t_dSub_108;
  wire       [8:0]    t_dSub_108_1;
  wire       [8:0]    t_dSub_109;
  wire       [8:0]    t_dSub_109_1;
  wire       [8:0]    t_dSub_110;
  wire       [8:0]    t_dSub_110_1;
  wire       [8:0]    t_dSub_111;
  wire       [8:0]    t_dSub_111_1;
  wire       [8:0]    t_dSub_112;
  wire       [8:0]    t_dSub_112_1;
  wire       [8:0]    t_dSub_113;
  wire       [8:0]    t_dSub_113_1;
  wire       [8:0]    t_dSub_114;
  wire       [8:0]    t_dSub_114_1;
  wire       [8:0]    t_dSub_115;
  wire       [8:0]    t_dSub_115_1;
  wire       [8:0]    t_dSub_116;
  wire       [8:0]    t_dSub_116_1;
  wire       [8:0]    t_dSub_117;
  wire       [8:0]    t_dSub_117_1;
  wire       [8:0]    t_dSub_118;
  wire       [8:0]    t_dSub_118_1;
  wire       [8:0]    t_dSub_119;
  wire       [8:0]    t_dSub_119_1;
  wire       [8:0]    t_dSub_120;
  wire       [8:0]    t_dSub_120_1;
  wire       [8:0]    t_dSub_121;
  wire       [8:0]    t_dSub_121_1;
  wire       [8:0]    t_dSub_122;
  wire       [8:0]    t_dSub_122_1;
  wire       [8:0]    t_dSub_123;
  wire       [8:0]    t_dSub_123_1;
  wire       [8:0]    t_dSub_124;
  wire       [8:0]    t_dSub_124_1;
  wire       [8:0]    t_dSub_125;
  wire       [8:0]    t_dSub_125_1;
  wire       [8:0]    t_dSub_126;
  wire       [8:0]    t_dSub_126_1;
  wire       [8:0]    t_dSub_127;
  wire       [8:0]    t_dSub_127_1;
  wire       [1791:0] t_wPy;
  wire       [1535:0] t_wPy_1;
  wire       [1279:0] t_wPy_2;
  wire       [1023:0] t_wPy_3;
  wire       [767:0]  t_wPy_4;
  wire       [511:0]  t_wPy_5;
  wire       [255:0]  t_wPy_6;
  wire       [5:0]    t_t_output_tdata_128;
  wire       [5:0]    t_t_output_tdata_129;
  wire       [5:0]    t_t_output_tdata_130;
  wire       [5:0]    t_t_output_tdata_131;
  wire       [5:0]    t_t_output_tdata_132;
  wire       [5:0]    t_t_output_tdata_133;
  wire       [5:0]    t_t_output_tdata_134;
  wire       [5:0]    t_t_output_tdata_135;
  wire       [5:0]    t_t_output_tdata_136;
  wire       [5:0]    t_t_output_tdata_137;
  wire       [5:0]    t_t_output_tdata_138;
  wire       [5:0]    t_t_output_tdata_139;
  wire       [5:0]    t_t_output_tdata_140;
  wire       [5:0]    t_t_output_tdata_141;
  wire       [5:0]    t_t_output_tdata_142;
  wire       [5:0]    t_t_output_tdata_143;
  wire       [5:0]    t_t_output_tdata_144;
  wire       [5:0]    t_t_output_tdata_145;
  wire       [5:0]    t_t_output_tdata_146;
  wire       [5:0]    t_t_output_tdata_147;
  wire       [5:0]    t_t_output_tdata_148;
  wire       [5:0]    t_t_output_tdata_149;
  wire       [5:0]    t_t_output_tdata_150;
  wire       [5:0]    t_t_output_tdata_151;
  wire       [5:0]    t_t_output_tdata_152;
  wire       [5:0]    t_t_output_tdata_153;
  wire       [5:0]    t_t_output_tdata_154;
  wire       [5:0]    t_t_output_tdata_155;
  wire       [5:0]    t_t_output_tdata_156;
  wire       [5:0]    t_t_output_tdata_157;
  wire       [5:0]    t_t_output_tdata_158;
  wire       [5:0]    t_t_output_tdata_159;
  wire       [5:0]    t_t_output_tdata_160;
  wire       [5:0]    t_t_output_tdata_161;
  wire       [5:0]    t_t_output_tdata_162;
  wire       [5:0]    t_t_output_tdata_163;
  wire       [5:0]    t_t_output_tdata_164;
  wire       [5:0]    t_t_output_tdata_165;
  wire       [5:0]    t_t_output_tdata_166;
  wire       [5:0]    t_t_output_tdata_167;
  wire       [5:0]    t_t_output_tdata_168;
  wire       [5:0]    t_t_output_tdata_169;
  wire       [5:0]    t_t_output_tdata_170;
  wire       [5:0]    t_t_output_tdata_171;
  wire       [5:0]    t_t_output_tdata_172;
  wire       [5:0]    t_t_output_tdata_173;
  wire       [5:0]    t_t_output_tdata_174;
  wire       [5:0]    t_t_output_tdata_175;
  wire       [5:0]    t_t_output_tdata_176;
  wire       [5:0]    t_t_output_tdata_177;
  wire       [5:0]    t_t_output_tdata_178;
  wire       [5:0]    t_t_output_tdata_179;
  wire       [5:0]    t_t_output_tdata_180;
  wire       [5:0]    t_t_output_tdata_181;
  wire       [5:0]    t_t_output_tdata_182;
  wire       [5:0]    t_t_output_tdata_183;
  wire       [5:0]    t_t_output_tdata_184;
  wire       [5:0]    t_t_output_tdata_185;
  wire       [5:0]    t_t_output_tdata_186;
  wire       [5:0]    t_t_output_tdata_187;
  wire       [5:0]    t_t_output_tdata_188;
  wire       [5:0]    t_t_output_tdata_189;
  wire       [5:0]    t_t_output_tdata_190;
  wire       [5:0]    t_t_output_tdata_191;
  wire       [5:0]    t_t_output_tdata_192;
  wire       [5:0]    t_t_output_tdata_193;
  wire       [5:0]    t_t_output_tdata_194;
  wire       [5:0]    t_t_output_tdata_195;
  wire       [5:0]    t_t_output_tdata_196;
  wire       [5:0]    t_t_output_tdata_197;
  wire       [5:0]    t_t_output_tdata_198;
  wire       [5:0]    t_t_output_tdata_199;
  wire       [5:0]    t_t_output_tdata_200;
  wire       [5:0]    t_t_output_tdata_201;
  wire       [5:0]    t_t_output_tdata_202;
  wire       [5:0]    t_t_output_tdata_203;
  wire       [5:0]    t_t_output_tdata_204;
  wire       [5:0]    t_t_output_tdata_205;
  wire       [5:0]    t_t_output_tdata_206;
  wire       [5:0]    t_t_output_tdata_207;
  wire       [5:0]    t_t_output_tdata_208;
  wire       [5:0]    t_t_output_tdata_209;
  wire       [5:0]    t_t_output_tdata_210;
  wire       [5:0]    t_t_output_tdata_211;
  wire       [5:0]    t_t_output_tdata_212;
  wire       [5:0]    t_t_output_tdata_213;
  wire       [5:0]    t_t_output_tdata_214;
  wire       [5:0]    t_t_output_tdata_215;
  wire       [5:0]    t_t_output_tdata_216;
  wire       [5:0]    t_t_output_tdata_217;
  wire       [5:0]    t_t_output_tdata_218;
  wire       [5:0]    t_t_output_tdata_219;
  wire       [5:0]    t_t_output_tdata_220;
  wire       [5:0]    t_t_output_tdata_221;
  wire       [5:0]    t_t_output_tdata_222;
  wire       [5:0]    t_t_output_tdata_223;
  wire       [5:0]    t_t_output_tdata_224;
  wire       [5:0]    t_t_output_tdata_225;
  wire       [5:0]    t_t_output_tdata_226;
  wire       [5:0]    t_t_output_tdata_227;
  wire       [5:0]    t_t_output_tdata_228;
  wire       [5:0]    t_t_output_tdata_229;
  wire       [5:0]    t_t_output_tdata_230;
  wire       [5:0]    t_t_output_tdata_231;
  wire       [5:0]    t_t_output_tdata_232;
  wire       [5:0]    t_t_output_tdata_233;
  wire       [5:0]    t_t_output_tdata_234;
  wire       [5:0]    t_t_output_tdata_235;
  wire       [5:0]    t_t_output_tdata_236;
  wire       [5:0]    t_t_output_tdata_237;
  wire       [5:0]    t_t_output_tdata_238;
  wire       [5:0]    t_t_output_tdata_239;
  wire       [5:0]    t_t_output_tdata_240;
  wire       [5:0]    t_t_output_tdata_241;
  wire       [5:0]    t_t_output_tdata_242;
  wire       [5:0]    t_t_output_tdata_243;
  wire       [5:0]    t_t_output_tdata_244;
  wire       [5:0]    t_t_output_tdata_245;
  wire       [5:0]    t_t_output_tdata_246;
  wire       [5:0]    t_t_output_tdata_247;
  wire       [5:0]    t_t_output_tdata_248;
  wire       [5:0]    t_t_output_tdata_249;
  wire       [5:0]    t_t_output_tdata_250;
  wire       [5:0]    t_t_output_tdata_251;
  wire       [5:0]    t_t_output_tdata_252;
  wire       [5:0]    t_t_output_tdata_253;
  wire       [5:0]    t_t_output_tdata_254;
  wire       [5:0]    t_t_output_tdata_255;
  wire                t_output_tdata_256;
  wire       [4:0]    t_output_tdata_257;
  wire       [4:0]    t_output_tdata_258;
  wire                t_output_tdata_259;
  wire       [4:0]    t_output_tdata_260;
  wire       [4:0]    t_output_tdata_261;
  wire       [0:0]    t_output_tdata_262;
  wire       [4:0]    t_output_tdata_263;
  wire       [4:0]    t_output_tdata_264;
  wire       [4:0]    t_output_tdata_265;
  wire       [5:0]    t_output_tdata_266;
  wire                t_output_tdata_267;
  wire       [4:0]    t_output_tdata_268;
  wire       [4:0]    t_output_tdata_269;
  wire       [9:0]    t_output_tdata_270;
  wire       [15:0]   t_output_tdata_271;
  wire                t_output_tdata_272;
  wire       [4:0]    t_output_tdata_273;
  wire       [4:0]    t_output_tdata_274;
  wire       [1967:0] t_output_tdata_275;
  wire       [0:0]    t_output_tdata_276;
  wire       [4:0]    t_output_tdata_277;
  wire       [4:0]    t_output_tdata_278;
  wire       [4:0]    t_output_tdata_279;
  wire       [5:0]    t_output_tdata_280;
  wire                t_output_tdata_281;
  wire       [4:0]    t_output_tdata_282;
  wire       [4:0]    t_output_tdata_283;
  wire       [9:0]    t_output_tdata_284;
  wire       [15:0]   t_output_tdata_285;
  wire                t_output_tdata_286;
  wire       [4:0]    t_output_tdata_287;
  wire       [4:0]    t_output_tdata_288;
  wire       [1919:0] t_output_tdata_289;
  wire       [0:0]    t_output_tdata_290;
  wire       [4:0]    t_output_tdata_291;
  wire       [4:0]    t_output_tdata_292;
  wire       [4:0]    t_output_tdata_293;
  wire       [5:0]    t_output_tdata_294;
  wire                t_output_tdata_295;
  wire       [4:0]    t_output_tdata_296;
  wire       [4:0]    t_output_tdata_297;
  wire       [9:0]    t_output_tdata_298;
  wire       [15:0]   t_output_tdata_299;
  wire                t_output_tdata_300;
  wire       [4:0]    t_output_tdata_301;
  wire       [4:0]    t_output_tdata_302;
  wire       [1871:0] t_output_tdata_303;
  wire       [0:0]    t_output_tdata_304;
  wire       [4:0]    t_output_tdata_305;
  wire       [4:0]    t_output_tdata_306;
  wire       [4:0]    t_output_tdata_307;
  wire       [5:0]    t_output_tdata_308;
  wire                t_output_tdata_309;
  wire       [4:0]    t_output_tdata_310;
  wire       [4:0]    t_output_tdata_311;
  wire       [9:0]    t_output_tdata_312;
  wire       [15:0]   t_output_tdata_313;
  wire                t_output_tdata_314;
  wire       [4:0]    t_output_tdata_315;
  wire       [4:0]    t_output_tdata_316;
  wire       [1823:0] t_output_tdata_317;
  wire       [0:0]    t_output_tdata_318;
  wire       [4:0]    t_output_tdata_319;
  wire       [4:0]    t_output_tdata_320;
  wire       [4:0]    t_output_tdata_321;
  wire       [5:0]    t_output_tdata_322;
  wire                t_output_tdata_323;
  wire       [4:0]    t_output_tdata_324;
  wire       [4:0]    t_output_tdata_325;
  wire       [9:0]    t_output_tdata_326;
  wire       [15:0]   t_output_tdata_327;
  wire                t_output_tdata_328;
  wire       [4:0]    t_output_tdata_329;
  wire       [4:0]    t_output_tdata_330;
  wire       [1775:0] t_output_tdata_331;
  wire       [0:0]    t_output_tdata_332;
  wire       [4:0]    t_output_tdata_333;
  wire       [4:0]    t_output_tdata_334;
  wire       [4:0]    t_output_tdata_335;
  wire       [5:0]    t_output_tdata_336;
  wire                t_output_tdata_337;
  wire       [4:0]    t_output_tdata_338;
  wire       [4:0]    t_output_tdata_339;
  wire       [9:0]    t_output_tdata_340;
  wire       [15:0]   t_output_tdata_341;
  wire                t_output_tdata_342;
  wire       [4:0]    t_output_tdata_343;
  wire       [4:0]    t_output_tdata_344;
  wire       [1727:0] t_output_tdata_345;
  wire       [0:0]    t_output_tdata_346;
  wire       [4:0]    t_output_tdata_347;
  wire       [4:0]    t_output_tdata_348;
  wire       [4:0]    t_output_tdata_349;
  wire       [5:0]    t_output_tdata_350;
  wire                t_output_tdata_351;
  wire       [4:0]    t_output_tdata_352;
  wire       [4:0]    t_output_tdata_353;
  wire       [9:0]    t_output_tdata_354;
  wire       [15:0]   t_output_tdata_355;
  wire                t_output_tdata_356;
  wire       [4:0]    t_output_tdata_357;
  wire       [4:0]    t_output_tdata_358;
  wire       [1679:0] t_output_tdata_359;
  wire       [0:0]    t_output_tdata_360;
  wire       [4:0]    t_output_tdata_361;
  wire       [4:0]    t_output_tdata_362;
  wire       [4:0]    t_output_tdata_363;
  wire       [5:0]    t_output_tdata_364;
  wire                t_output_tdata_365;
  wire       [4:0]    t_output_tdata_366;
  wire       [4:0]    t_output_tdata_367;
  wire       [9:0]    t_output_tdata_368;
  wire       [15:0]   t_output_tdata_369;
  wire                t_output_tdata_370;
  wire       [4:0]    t_output_tdata_371;
  wire       [4:0]    t_output_tdata_372;
  wire       [1631:0] t_output_tdata_373;
  wire       [0:0]    t_output_tdata_374;
  wire       [4:0]    t_output_tdata_375;
  wire       [4:0]    t_output_tdata_376;
  wire       [4:0]    t_output_tdata_377;
  wire       [5:0]    t_output_tdata_378;
  wire                t_output_tdata_379;
  wire       [4:0]    t_output_tdata_380;
  wire       [4:0]    t_output_tdata_381;
  wire       [9:0]    t_output_tdata_382;
  wire       [15:0]   t_output_tdata_383;
  wire                t_output_tdata_384;
  wire       [4:0]    t_output_tdata_385;
  wire       [4:0]    t_output_tdata_386;
  wire       [1583:0] t_output_tdata_387;
  wire       [0:0]    t_output_tdata_388;
  wire       [4:0]    t_output_tdata_389;
  wire       [4:0]    t_output_tdata_390;
  wire       [4:0]    t_output_tdata_391;
  wire       [5:0]    t_output_tdata_392;
  wire                t_output_tdata_393;
  wire       [4:0]    t_output_tdata_394;
  wire       [4:0]    t_output_tdata_395;
  wire       [9:0]    t_output_tdata_396;
  wire       [15:0]   t_output_tdata_397;
  wire                t_output_tdata_398;
  wire       [4:0]    t_output_tdata_399;
  wire       [4:0]    t_output_tdata_400;
  wire       [1535:0] t_output_tdata_401;
  wire       [0:0]    t_output_tdata_402;
  wire       [4:0]    t_output_tdata_403;
  wire       [4:0]    t_output_tdata_404;
  wire       [4:0]    t_output_tdata_405;
  wire       [5:0]    t_output_tdata_406;
  wire                t_output_tdata_407;
  wire       [4:0]    t_output_tdata_408;
  wire       [4:0]    t_output_tdata_409;
  wire       [9:0]    t_output_tdata_410;
  wire       [15:0]   t_output_tdata_411;
  wire                t_output_tdata_412;
  wire       [4:0]    t_output_tdata_413;
  wire       [4:0]    t_output_tdata_414;
  wire       [1487:0] t_output_tdata_415;
  wire       [0:0]    t_output_tdata_416;
  wire       [4:0]    t_output_tdata_417;
  wire       [4:0]    t_output_tdata_418;
  wire       [4:0]    t_output_tdata_419;
  wire       [5:0]    t_output_tdata_420;
  wire                t_output_tdata_421;
  wire       [4:0]    t_output_tdata_422;
  wire       [4:0]    t_output_tdata_423;
  wire       [9:0]    t_output_tdata_424;
  wire       [15:0]   t_output_tdata_425;
  wire                t_output_tdata_426;
  wire       [4:0]    t_output_tdata_427;
  wire       [4:0]    t_output_tdata_428;
  wire       [1439:0] t_output_tdata_429;
  wire       [0:0]    t_output_tdata_430;
  wire       [4:0]    t_output_tdata_431;
  wire       [4:0]    t_output_tdata_432;
  wire       [4:0]    t_output_tdata_433;
  wire       [5:0]    t_output_tdata_434;
  wire                t_output_tdata_435;
  wire       [4:0]    t_output_tdata_436;
  wire       [4:0]    t_output_tdata_437;
  wire       [9:0]    t_output_tdata_438;
  wire       [15:0]   t_output_tdata_439;
  wire                t_output_tdata_440;
  wire       [4:0]    t_output_tdata_441;
  wire       [4:0]    t_output_tdata_442;
  wire       [1391:0] t_output_tdata_443;
  wire       [0:0]    t_output_tdata_444;
  wire       [4:0]    t_output_tdata_445;
  wire       [4:0]    t_output_tdata_446;
  wire       [4:0]    t_output_tdata_447;
  wire       [5:0]    t_output_tdata_448;
  wire                t_output_tdata_449;
  wire       [4:0]    t_output_tdata_450;
  wire       [4:0]    t_output_tdata_451;
  wire       [9:0]    t_output_tdata_452;
  wire       [15:0]   t_output_tdata_453;
  wire                t_output_tdata_454;
  wire       [4:0]    t_output_tdata_455;
  wire       [4:0]    t_output_tdata_456;
  wire       [1343:0] t_output_tdata_457;
  wire       [0:0]    t_output_tdata_458;
  wire       [4:0]    t_output_tdata_459;
  wire       [4:0]    t_output_tdata_460;
  wire       [4:0]    t_output_tdata_461;
  wire       [5:0]    t_output_tdata_462;
  wire                t_output_tdata_463;
  wire       [4:0]    t_output_tdata_464;
  wire       [4:0]    t_output_tdata_465;
  wire       [9:0]    t_output_tdata_466;
  wire       [15:0]   t_output_tdata_467;
  wire                t_output_tdata_468;
  wire       [4:0]    t_output_tdata_469;
  wire       [4:0]    t_output_tdata_470;
  wire       [1295:0] t_output_tdata_471;
  wire       [0:0]    t_output_tdata_472;
  wire       [4:0]    t_output_tdata_473;
  wire       [4:0]    t_output_tdata_474;
  wire       [4:0]    t_output_tdata_475;
  wire       [5:0]    t_output_tdata_476;
  wire                t_output_tdata_477;
  wire       [4:0]    t_output_tdata_478;
  wire       [4:0]    t_output_tdata_479;
  wire       [9:0]    t_output_tdata_480;
  wire       [15:0]   t_output_tdata_481;
  wire                t_output_tdata_482;
  wire       [4:0]    t_output_tdata_483;
  wire       [4:0]    t_output_tdata_484;
  wire       [1247:0] t_output_tdata_485;
  wire       [0:0]    t_output_tdata_486;
  wire       [4:0]    t_output_tdata_487;
  wire       [4:0]    t_output_tdata_488;
  wire       [4:0]    t_output_tdata_489;
  wire       [5:0]    t_output_tdata_490;
  wire                t_output_tdata_491;
  wire       [4:0]    t_output_tdata_492;
  wire       [4:0]    t_output_tdata_493;
  wire       [9:0]    t_output_tdata_494;
  wire       [15:0]   t_output_tdata_495;
  wire                t_output_tdata_496;
  wire       [4:0]    t_output_tdata_497;
  wire       [4:0]    t_output_tdata_498;
  wire       [1199:0] t_output_tdata_499;
  wire       [0:0]    t_output_tdata_500;
  wire       [4:0]    t_output_tdata_501;
  wire       [4:0]    t_output_tdata_502;
  wire       [4:0]    t_output_tdata_503;
  wire       [5:0]    t_output_tdata_504;
  wire                t_output_tdata_505;
  wire       [4:0]    t_output_tdata_506;
  wire       [4:0]    t_output_tdata_507;
  wire       [9:0]    t_output_tdata_508;
  wire       [15:0]   t_output_tdata_509;
  wire                t_output_tdata_510;
  wire       [4:0]    t_output_tdata_511;
  wire       [4:0]    t_output_tdata_512;
  wire       [1151:0] t_output_tdata_513;
  wire       [0:0]    t_output_tdata_514;
  wire       [4:0]    t_output_tdata_515;
  wire       [4:0]    t_output_tdata_516;
  wire       [4:0]    t_output_tdata_517;
  wire       [5:0]    t_output_tdata_518;
  wire                t_output_tdata_519;
  wire       [4:0]    t_output_tdata_520;
  wire       [4:0]    t_output_tdata_521;
  wire       [9:0]    t_output_tdata_522;
  wire       [15:0]   t_output_tdata_523;
  wire                t_output_tdata_524;
  wire       [4:0]    t_output_tdata_525;
  wire       [4:0]    t_output_tdata_526;
  wire       [1103:0] t_output_tdata_527;
  wire       [0:0]    t_output_tdata_528;
  wire       [4:0]    t_output_tdata_529;
  wire       [4:0]    t_output_tdata_530;
  wire       [4:0]    t_output_tdata_531;
  wire       [5:0]    t_output_tdata_532;
  wire                t_output_tdata_533;
  wire       [4:0]    t_output_tdata_534;
  wire       [4:0]    t_output_tdata_535;
  wire       [9:0]    t_output_tdata_536;
  wire       [15:0]   t_output_tdata_537;
  wire                t_output_tdata_538;
  wire       [4:0]    t_output_tdata_539;
  wire       [4:0]    t_output_tdata_540;
  wire       [1055:0] t_output_tdata_541;
  wire       [0:0]    t_output_tdata_542;
  wire       [4:0]    t_output_tdata_543;
  wire       [4:0]    t_output_tdata_544;
  wire       [4:0]    t_output_tdata_545;
  wire       [5:0]    t_output_tdata_546;
  wire                t_output_tdata_547;
  wire       [4:0]    t_output_tdata_548;
  wire       [4:0]    t_output_tdata_549;
  wire       [9:0]    t_output_tdata_550;
  wire       [15:0]   t_output_tdata_551;
  wire                t_output_tdata_552;
  wire       [4:0]    t_output_tdata_553;
  wire       [4:0]    t_output_tdata_554;
  wire       [1007:0] t_output_tdata_555;
  wire       [0:0]    t_output_tdata_556;
  wire       [4:0]    t_output_tdata_557;
  wire       [4:0]    t_output_tdata_558;
  wire       [4:0]    t_output_tdata_559;
  wire       [5:0]    t_output_tdata_560;
  wire                t_output_tdata_561;
  wire       [4:0]    t_output_tdata_562;
  wire       [4:0]    t_output_tdata_563;
  wire       [9:0]    t_output_tdata_564;
  wire       [15:0]   t_output_tdata_565;
  wire                t_output_tdata_566;
  wire       [4:0]    t_output_tdata_567;
  wire       [4:0]    t_output_tdata_568;
  wire       [959:0]  t_output_tdata_569;
  wire       [0:0]    t_output_tdata_570;
  wire       [4:0]    t_output_tdata_571;
  wire       [4:0]    t_output_tdata_572;
  wire       [4:0]    t_output_tdata_573;
  wire       [5:0]    t_output_tdata_574;
  wire                t_output_tdata_575;
  wire       [4:0]    t_output_tdata_576;
  wire       [4:0]    t_output_tdata_577;
  wire       [9:0]    t_output_tdata_578;
  wire       [15:0]   t_output_tdata_579;
  wire                t_output_tdata_580;
  wire       [4:0]    t_output_tdata_581;
  wire       [4:0]    t_output_tdata_582;
  wire       [911:0]  t_output_tdata_583;
  wire       [0:0]    t_output_tdata_584;
  wire       [4:0]    t_output_tdata_585;
  wire       [4:0]    t_output_tdata_586;
  wire       [4:0]    t_output_tdata_587;
  wire       [5:0]    t_output_tdata_588;
  wire                t_output_tdata_589;
  wire       [4:0]    t_output_tdata_590;
  wire       [4:0]    t_output_tdata_591;
  wire       [9:0]    t_output_tdata_592;
  wire       [15:0]   t_output_tdata_593;
  wire                t_output_tdata_594;
  wire       [4:0]    t_output_tdata_595;
  wire       [4:0]    t_output_tdata_596;
  wire       [863:0]  t_output_tdata_597;
  wire       [0:0]    t_output_tdata_598;
  wire       [4:0]    t_output_tdata_599;
  wire       [4:0]    t_output_tdata_600;
  wire       [4:0]    t_output_tdata_601;
  wire       [5:0]    t_output_tdata_602;
  wire                t_output_tdata_603;
  wire       [4:0]    t_output_tdata_604;
  wire       [4:0]    t_output_tdata_605;
  wire       [9:0]    t_output_tdata_606;
  wire       [15:0]   t_output_tdata_607;
  wire                t_output_tdata_608;
  wire       [4:0]    t_output_tdata_609;
  wire       [4:0]    t_output_tdata_610;
  wire       [815:0]  t_output_tdata_611;
  wire       [0:0]    t_output_tdata_612;
  wire       [4:0]    t_output_tdata_613;
  wire       [4:0]    t_output_tdata_614;
  wire       [4:0]    t_output_tdata_615;
  wire       [5:0]    t_output_tdata_616;
  wire                t_output_tdata_617;
  wire       [4:0]    t_output_tdata_618;
  wire       [4:0]    t_output_tdata_619;
  wire       [9:0]    t_output_tdata_620;
  wire       [15:0]   t_output_tdata_621;
  wire                t_output_tdata_622;
  wire       [4:0]    t_output_tdata_623;
  wire       [4:0]    t_output_tdata_624;
  wire       [767:0]  t_output_tdata_625;
  wire       [0:0]    t_output_tdata_626;
  wire       [4:0]    t_output_tdata_627;
  wire       [4:0]    t_output_tdata_628;
  wire       [4:0]    t_output_tdata_629;
  wire       [5:0]    t_output_tdata_630;
  wire                t_output_tdata_631;
  wire       [4:0]    t_output_tdata_632;
  wire       [4:0]    t_output_tdata_633;
  wire       [9:0]    t_output_tdata_634;
  wire       [15:0]   t_output_tdata_635;
  wire                t_output_tdata_636;
  wire       [4:0]    t_output_tdata_637;
  wire       [4:0]    t_output_tdata_638;
  wire       [719:0]  t_output_tdata_639;
  wire       [0:0]    t_output_tdata_640;
  wire       [4:0]    t_output_tdata_641;
  wire       [4:0]    t_output_tdata_642;
  wire       [4:0]    t_output_tdata_643;
  wire       [5:0]    t_output_tdata_644;
  wire                t_output_tdata_645;
  wire       [4:0]    t_output_tdata_646;
  wire       [4:0]    t_output_tdata_647;
  wire       [9:0]    t_output_tdata_648;
  wire       [15:0]   t_output_tdata_649;
  wire                t_output_tdata_650;
  wire       [4:0]    t_output_tdata_651;
  wire       [4:0]    t_output_tdata_652;
  wire       [671:0]  t_output_tdata_653;
  wire       [0:0]    t_output_tdata_654;
  wire       [4:0]    t_output_tdata_655;
  wire       [4:0]    t_output_tdata_656;
  wire       [4:0]    t_output_tdata_657;
  wire       [5:0]    t_output_tdata_658;
  wire                t_output_tdata_659;
  wire       [4:0]    t_output_tdata_660;
  wire       [4:0]    t_output_tdata_661;
  wire       [9:0]    t_output_tdata_662;
  wire       [15:0]   t_output_tdata_663;
  wire                t_output_tdata_664;
  wire       [4:0]    t_output_tdata_665;
  wire       [4:0]    t_output_tdata_666;
  wire       [623:0]  t_output_tdata_667;
  wire       [0:0]    t_output_tdata_668;
  wire       [4:0]    t_output_tdata_669;
  wire       [4:0]    t_output_tdata_670;
  wire       [4:0]    t_output_tdata_671;
  wire       [5:0]    t_output_tdata_672;
  wire                t_output_tdata_673;
  wire       [4:0]    t_output_tdata_674;
  wire       [4:0]    t_output_tdata_675;
  wire       [9:0]    t_output_tdata_676;
  wire       [15:0]   t_output_tdata_677;
  wire                t_output_tdata_678;
  wire       [4:0]    t_output_tdata_679;
  wire       [4:0]    t_output_tdata_680;
  wire       [575:0]  t_output_tdata_681;
  wire       [0:0]    t_output_tdata_682;
  wire       [4:0]    t_output_tdata_683;
  wire       [4:0]    t_output_tdata_684;
  wire       [4:0]    t_output_tdata_685;
  wire       [5:0]    t_output_tdata_686;
  wire                t_output_tdata_687;
  wire       [4:0]    t_output_tdata_688;
  wire       [4:0]    t_output_tdata_689;
  wire       [9:0]    t_output_tdata_690;
  wire       [15:0]   t_output_tdata_691;
  wire                t_output_tdata_692;
  wire       [4:0]    t_output_tdata_693;
  wire       [4:0]    t_output_tdata_694;
  wire       [527:0]  t_output_tdata_695;
  wire       [0:0]    t_output_tdata_696;
  wire       [4:0]    t_output_tdata_697;
  wire       [4:0]    t_output_tdata_698;
  wire       [4:0]    t_output_tdata_699;
  wire       [5:0]    t_output_tdata_700;
  wire                t_output_tdata_701;
  wire       [4:0]    t_output_tdata_702;
  wire       [4:0]    t_output_tdata_703;
  wire       [9:0]    t_output_tdata_704;
  wire       [15:0]   t_output_tdata_705;
  wire                t_output_tdata_706;
  wire       [4:0]    t_output_tdata_707;
  wire       [4:0]    t_output_tdata_708;
  wire       [479:0]  t_output_tdata_709;
  wire       [0:0]    t_output_tdata_710;
  wire       [4:0]    t_output_tdata_711;
  wire       [4:0]    t_output_tdata_712;
  wire       [4:0]    t_output_tdata_713;
  wire       [5:0]    t_output_tdata_714;
  wire                t_output_tdata_715;
  wire       [4:0]    t_output_tdata_716;
  wire       [4:0]    t_output_tdata_717;
  wire       [9:0]    t_output_tdata_718;
  wire       [15:0]   t_output_tdata_719;
  wire                t_output_tdata_720;
  wire       [4:0]    t_output_tdata_721;
  wire       [4:0]    t_output_tdata_722;
  wire       [431:0]  t_output_tdata_723;
  wire       [0:0]    t_output_tdata_724;
  wire       [4:0]    t_output_tdata_725;
  wire       [4:0]    t_output_tdata_726;
  wire       [4:0]    t_output_tdata_727;
  wire       [5:0]    t_output_tdata_728;
  wire                t_output_tdata_729;
  wire       [4:0]    t_output_tdata_730;
  wire       [4:0]    t_output_tdata_731;
  wire       [9:0]    t_output_tdata_732;
  wire       [15:0]   t_output_tdata_733;
  wire                t_output_tdata_734;
  wire       [4:0]    t_output_tdata_735;
  wire       [4:0]    t_output_tdata_736;
  wire       [383:0]  t_output_tdata_737;
  wire       [0:0]    t_output_tdata_738;
  wire       [4:0]    t_output_tdata_739;
  wire       [4:0]    t_output_tdata_740;
  wire       [4:0]    t_output_tdata_741;
  wire       [5:0]    t_output_tdata_742;
  wire                t_output_tdata_743;
  wire       [4:0]    t_output_tdata_744;
  wire       [4:0]    t_output_tdata_745;
  wire       [9:0]    t_output_tdata_746;
  wire       [15:0]   t_output_tdata_747;
  wire                t_output_tdata_748;
  wire       [4:0]    t_output_tdata_749;
  wire       [4:0]    t_output_tdata_750;
  wire       [335:0]  t_output_tdata_751;
  wire       [0:0]    t_output_tdata_752;
  wire       [4:0]    t_output_tdata_753;
  wire       [4:0]    t_output_tdata_754;
  wire       [4:0]    t_output_tdata_755;
  wire       [5:0]    t_output_tdata_756;
  wire                t_output_tdata_757;
  wire       [4:0]    t_output_tdata_758;
  wire       [4:0]    t_output_tdata_759;
  wire       [9:0]    t_output_tdata_760;
  wire       [15:0]   t_output_tdata_761;
  wire                t_output_tdata_762;
  wire       [4:0]    t_output_tdata_763;
  wire       [4:0]    t_output_tdata_764;
  wire       [287:0]  t_output_tdata_765;
  wire       [0:0]    t_output_tdata_766;
  wire       [4:0]    t_output_tdata_767;
  wire       [4:0]    t_output_tdata_768;
  wire       [4:0]    t_output_tdata_769;
  wire       [5:0]    t_output_tdata_770;
  wire                t_output_tdata_771;
  wire       [4:0]    t_output_tdata_772;
  wire       [4:0]    t_output_tdata_773;
  wire       [9:0]    t_output_tdata_774;
  wire       [15:0]   t_output_tdata_775;
  wire                t_output_tdata_776;
  wire       [4:0]    t_output_tdata_777;
  wire       [4:0]    t_output_tdata_778;
  wire       [239:0]  t_output_tdata_779;
  wire       [0:0]    t_output_tdata_780;
  wire       [4:0]    t_output_tdata_781;
  wire       [4:0]    t_output_tdata_782;
  wire       [4:0]    t_output_tdata_783;
  wire       [5:0]    t_output_tdata_784;
  wire                t_output_tdata_785;
  wire       [4:0]    t_output_tdata_786;
  wire       [4:0]    t_output_tdata_787;
  wire       [9:0]    t_output_tdata_788;
  wire       [15:0]   t_output_tdata_789;
  wire                t_output_tdata_790;
  wire       [4:0]    t_output_tdata_791;
  wire       [4:0]    t_output_tdata_792;
  wire       [191:0]  t_output_tdata_793;
  wire       [0:0]    t_output_tdata_794;
  wire       [4:0]    t_output_tdata_795;
  wire       [4:0]    t_output_tdata_796;
  wire       [4:0]    t_output_tdata_797;
  wire       [5:0]    t_output_tdata_798;
  wire                t_output_tdata_799;
  wire       [4:0]    t_output_tdata_800;
  wire       [4:0]    t_output_tdata_801;
  wire       [9:0]    t_output_tdata_802;
  wire       [15:0]   t_output_tdata_803;
  wire                t_output_tdata_804;
  wire       [4:0]    t_output_tdata_805;
  wire       [4:0]    t_output_tdata_806;
  wire       [143:0]  t_output_tdata_807;
  wire       [0:0]    t_output_tdata_808;
  wire       [4:0]    t_output_tdata_809;
  wire       [4:0]    t_output_tdata_810;
  wire       [4:0]    t_output_tdata_811;
  wire       [5:0]    t_output_tdata_812;
  wire                t_output_tdata_813;
  wire       [4:0]    t_output_tdata_814;
  wire       [4:0]    t_output_tdata_815;
  wire       [9:0]    t_output_tdata_816;
  wire       [15:0]   t_output_tdata_817;
  wire                t_output_tdata_818;
  wire       [4:0]    t_output_tdata_819;
  wire       [4:0]    t_output_tdata_820;
  wire       [95:0]   t_output_tdata_821;
  wire       [0:0]    t_output_tdata_822;
  wire       [4:0]    t_output_tdata_823;
  wire       [4:0]    t_output_tdata_824;
  wire       [4:0]    t_output_tdata_825;
  wire       [5:0]    t_output_tdata_826;
  wire                t_output_tdata_827;
  wire       [4:0]    t_output_tdata_828;
  wire       [4:0]    t_output_tdata_829;
  wire       [9:0]    t_output_tdata_830;
  wire       [15:0]   t_output_tdata_831;
  wire                t_output_tdata_832;
  wire       [4:0]    t_output_tdata_833;
  wire       [4:0]    t_output_tdata_834;
  wire       [47:0]   t_output_tdata_835;
  wire       [0:0]    t_output_tdata_836;
  wire       [4:0]    t_output_tdata_837;
  wire       [4:0]    t_output_tdata_838;
  wire       [5:0]    t_output_tdata_839;
  wire       [4:0]    t_output_tdata_840;
  wire       [4:0]    t_output_tdata_841;
  wire       [9:0]    t_output_tdata_842;
  wire       [5:0]    t_output_tdata_843;
  wire       [4:0]    t_output_tdata_844;
  wire       [4:0]    t_output_tdata_845;
  wire       [9:0]    t_output_tdata_846;
  wire                int8InVld;
  wire                int4InVld;
  reg                 int8VldFlip;
  reg        [511:0]  dataDly;
  wire                int8Vld;
  wire       [1023:0] t_int8Data_0;
  wire       [7:0]    int8Data_0;
  wire       [7:0]    int8Data_1;
  wire       [7:0]    int8Data_2;
  wire       [7:0]    int8Data_3;
  wire       [7:0]    int8Data_4;
  wire       [7:0]    int8Data_5;
  wire       [7:0]    int8Data_6;
  wire       [7:0]    int8Data_7;
  wire       [7:0]    int8Data_8;
  wire       [7:0]    int8Data_9;
  wire       [7:0]    int8Data_10;
  wire       [7:0]    int8Data_11;
  wire       [7:0]    int8Data_12;
  wire       [7:0]    int8Data_13;
  wire       [7:0]    int8Data_14;
  wire       [7:0]    int8Data_15;
  wire       [7:0]    int8Data_16;
  wire       [7:0]    int8Data_17;
  wire       [7:0]    int8Data_18;
  wire       [7:0]    int8Data_19;
  wire       [7:0]    int8Data_20;
  wire       [7:0]    int8Data_21;
  wire       [7:0]    int8Data_22;
  wire       [7:0]    int8Data_23;
  wire       [7:0]    int8Data_24;
  wire       [7:0]    int8Data_25;
  wire       [7:0]    int8Data_26;
  wire       [7:0]    int8Data_27;
  wire       [7:0]    int8Data_28;
  wire       [7:0]    int8Data_29;
  wire       [7:0]    int8Data_30;
  wire       [7:0]    int8Data_31;
  wire       [7:0]    int8Data_32;
  wire       [7:0]    int8Data_33;
  wire       [7:0]    int8Data_34;
  wire       [7:0]    int8Data_35;
  wire       [7:0]    int8Data_36;
  wire       [7:0]    int8Data_37;
  wire       [7:0]    int8Data_38;
  wire       [7:0]    int8Data_39;
  wire       [7:0]    int8Data_40;
  wire       [7:0]    int8Data_41;
  wire       [7:0]    int8Data_42;
  wire       [7:0]    int8Data_43;
  wire       [7:0]    int8Data_44;
  wire       [7:0]    int8Data_45;
  wire       [7:0]    int8Data_46;
  wire       [7:0]    int8Data_47;
  wire       [7:0]    int8Data_48;
  wire       [7:0]    int8Data_49;
  wire       [7:0]    int8Data_50;
  wire       [7:0]    int8Data_51;
  wire       [7:0]    int8Data_52;
  wire       [7:0]    int8Data_53;
  wire       [7:0]    int8Data_54;
  wire       [7:0]    int8Data_55;
  wire       [7:0]    int8Data_56;
  wire       [7:0]    int8Data_57;
  wire       [7:0]    int8Data_58;
  wire       [7:0]    int8Data_59;
  wire       [7:0]    int8Data_60;
  wire       [7:0]    int8Data_61;
  wire       [7:0]    int8Data_62;
  wire       [7:0]    int8Data_63;
  wire       [7:0]    int8Data_64;
  wire       [7:0]    int8Data_65;
  wire       [7:0]    int8Data_66;
  wire       [7:0]    int8Data_67;
  wire       [7:0]    int8Data_68;
  wire       [7:0]    int8Data_69;
  wire       [7:0]    int8Data_70;
  wire       [7:0]    int8Data_71;
  wire       [7:0]    int8Data_72;
  wire       [7:0]    int8Data_73;
  wire       [7:0]    int8Data_74;
  wire       [7:0]    int8Data_75;
  wire       [7:0]    int8Data_76;
  wire       [7:0]    int8Data_77;
  wire       [7:0]    int8Data_78;
  wire       [7:0]    int8Data_79;
  wire       [7:0]    int8Data_80;
  wire       [7:0]    int8Data_81;
  wire       [7:0]    int8Data_82;
  wire       [7:0]    int8Data_83;
  wire       [7:0]    int8Data_84;
  wire       [7:0]    int8Data_85;
  wire       [7:0]    int8Data_86;
  wire       [7:0]    int8Data_87;
  wire       [7:0]    int8Data_88;
  wire       [7:0]    int8Data_89;
  wire       [7:0]    int8Data_90;
  wire       [7:0]    int8Data_91;
  wire       [7:0]    int8Data_92;
  wire       [7:0]    int8Data_93;
  wire       [7:0]    int8Data_94;
  wire       [7:0]    int8Data_95;
  wire       [7:0]    int8Data_96;
  wire       [7:0]    int8Data_97;
  wire       [7:0]    int8Data_98;
  wire       [7:0]    int8Data_99;
  wire       [7:0]    int8Data_100;
  wire       [7:0]    int8Data_101;
  wire       [7:0]    int8Data_102;
  wire       [7:0]    int8Data_103;
  wire       [7:0]    int8Data_104;
  wire       [7:0]    int8Data_105;
  wire       [7:0]    int8Data_106;
  wire       [7:0]    int8Data_107;
  wire       [7:0]    int8Data_108;
  wire       [7:0]    int8Data_109;
  wire       [7:0]    int8Data_110;
  wire       [7:0]    int8Data_111;
  wire       [7:0]    int8Data_112;
  wire       [7:0]    int8Data_113;
  wire       [7:0]    int8Data_114;
  wire       [7:0]    int8Data_115;
  wire       [7:0]    int8Data_116;
  wire       [7:0]    int8Data_117;
  wire       [7:0]    int8Data_118;
  wire       [7:0]    int8Data_119;
  wire       [7:0]    int8Data_120;
  wire       [7:0]    int8Data_121;
  wire       [7:0]    int8Data_122;
  wire       [7:0]    int8Data_123;
  wire       [7:0]    int8Data_124;
  wire       [7:0]    int8Data_125;
  wire       [7:0]    int8Data_126;
  wire       [7:0]    int8Data_127;
  wire       [7:0]    int4Data_0;
  wire       [7:0]    int4Data_1;
  wire       [7:0]    int4Data_2;
  wire       [7:0]    int4Data_3;
  wire       [7:0]    int4Data_4;
  wire       [7:0]    int4Data_5;
  wire       [7:0]    int4Data_6;
  wire       [7:0]    int4Data_7;
  wire       [7:0]    int4Data_8;
  wire       [7:0]    int4Data_9;
  wire       [7:0]    int4Data_10;
  wire       [7:0]    int4Data_11;
  wire       [7:0]    int4Data_12;
  wire       [7:0]    int4Data_13;
  wire       [7:0]    int4Data_14;
  wire       [7:0]    int4Data_15;
  wire       [7:0]    int4Data_16;
  wire       [7:0]    int4Data_17;
  wire       [7:0]    int4Data_18;
  wire       [7:0]    int4Data_19;
  wire       [7:0]    int4Data_20;
  wire       [7:0]    int4Data_21;
  wire       [7:0]    int4Data_22;
  wire       [7:0]    int4Data_23;
  wire       [7:0]    int4Data_24;
  wire       [7:0]    int4Data_25;
  wire       [7:0]    int4Data_26;
  wire       [7:0]    int4Data_27;
  wire       [7:0]    int4Data_28;
  wire       [7:0]    int4Data_29;
  wire       [7:0]    int4Data_30;
  wire       [7:0]    int4Data_31;
  wire       [7:0]    int4Data_32;
  wire       [7:0]    int4Data_33;
  wire       [7:0]    int4Data_34;
  wire       [7:0]    int4Data_35;
  wire       [7:0]    int4Data_36;
  wire       [7:0]    int4Data_37;
  wire       [7:0]    int4Data_38;
  wire       [7:0]    int4Data_39;
  wire       [7:0]    int4Data_40;
  wire       [7:0]    int4Data_41;
  wire       [7:0]    int4Data_42;
  wire       [7:0]    int4Data_43;
  wire       [7:0]    int4Data_44;
  wire       [7:0]    int4Data_45;
  wire       [7:0]    int4Data_46;
  wire       [7:0]    int4Data_47;
  wire       [7:0]    int4Data_48;
  wire       [7:0]    int4Data_49;
  wire       [7:0]    int4Data_50;
  wire       [7:0]    int4Data_51;
  wire       [7:0]    int4Data_52;
  wire       [7:0]    int4Data_53;
  wire       [7:0]    int4Data_54;
  wire       [7:0]    int4Data_55;
  wire       [7:0]    int4Data_56;
  wire       [7:0]    int4Data_57;
  wire       [7:0]    int4Data_58;
  wire       [7:0]    int4Data_59;
  wire       [7:0]    int4Data_60;
  wire       [7:0]    int4Data_61;
  wire       [7:0]    int4Data_62;
  wire       [7:0]    int4Data_63;
  wire       [7:0]    int4Data_64;
  wire       [7:0]    int4Data_65;
  wire       [7:0]    int4Data_66;
  wire       [7:0]    int4Data_67;
  wire       [7:0]    int4Data_68;
  wire       [7:0]    int4Data_69;
  wire       [7:0]    int4Data_70;
  wire       [7:0]    int4Data_71;
  wire       [7:0]    int4Data_72;
  wire       [7:0]    int4Data_73;
  wire       [7:0]    int4Data_74;
  wire       [7:0]    int4Data_75;
  wire       [7:0]    int4Data_76;
  wire       [7:0]    int4Data_77;
  wire       [7:0]    int4Data_78;
  wire       [7:0]    int4Data_79;
  wire       [7:0]    int4Data_80;
  wire       [7:0]    int4Data_81;
  wire       [7:0]    int4Data_82;
  wire       [7:0]    int4Data_83;
  wire       [7:0]    int4Data_84;
  wire       [7:0]    int4Data_85;
  wire       [7:0]    int4Data_86;
  wire       [7:0]    int4Data_87;
  wire       [7:0]    int4Data_88;
  wire       [7:0]    int4Data_89;
  wire       [7:0]    int4Data_90;
  wire       [7:0]    int4Data_91;
  wire       [7:0]    int4Data_92;
  wire       [7:0]    int4Data_93;
  wire       [7:0]    int4Data_94;
  wire       [7:0]    int4Data_95;
  wire       [7:0]    int4Data_96;
  wire       [7:0]    int4Data_97;
  wire       [7:0]    int4Data_98;
  wire       [7:0]    int4Data_99;
  wire       [7:0]    int4Data_100;
  wire       [7:0]    int4Data_101;
  wire       [7:0]    int4Data_102;
  wire       [7:0]    int4Data_103;
  wire       [7:0]    int4Data_104;
  wire       [7:0]    int4Data_105;
  wire       [7:0]    int4Data_106;
  wire       [7:0]    int4Data_107;
  wire       [7:0]    int4Data_108;
  wire       [7:0]    int4Data_109;
  wire       [7:0]    int4Data_110;
  wire       [7:0]    int4Data_111;
  wire       [7:0]    int4Data_112;
  wire       [7:0]    int4Data_113;
  wire       [7:0]    int4Data_114;
  wire       [7:0]    int4Data_115;
  wire       [7:0]    int4Data_116;
  wire       [7:0]    int4Data_117;
  wire       [7:0]    int4Data_118;
  wire       [7:0]    int4Data_119;
  wire       [7:0]    int4Data_120;
  wire       [7:0]    int4Data_121;
  wire       [7:0]    int4Data_122;
  wire       [7:0]    int4Data_123;
  wire       [7:0]    int4Data_124;
  wire       [7:0]    int4Data_125;
  wire       [7:0]    int4Data_126;
  wire       [7:0]    int4Data_127;
  wire                vldConv;
  wire       [7:0]    dataConv_0;
  wire       [7:0]    dataConv_1;
  wire       [7:0]    dataConv_2;
  wire       [7:0]    dataConv_3;
  wire       [7:0]    dataConv_4;
  wire       [7:0]    dataConv_5;
  wire       [7:0]    dataConv_6;
  wire       [7:0]    dataConv_7;
  wire       [7:0]    dataConv_8;
  wire       [7:0]    dataConv_9;
  wire       [7:0]    dataConv_10;
  wire       [7:0]    dataConv_11;
  wire       [7:0]    dataConv_12;
  wire       [7:0]    dataConv_13;
  wire       [7:0]    dataConv_14;
  wire       [7:0]    dataConv_15;
  wire       [7:0]    dataConv_16;
  wire       [7:0]    dataConv_17;
  wire       [7:0]    dataConv_18;
  wire       [7:0]    dataConv_19;
  wire       [7:0]    dataConv_20;
  wire       [7:0]    dataConv_21;
  wire       [7:0]    dataConv_22;
  wire       [7:0]    dataConv_23;
  wire       [7:0]    dataConv_24;
  wire       [7:0]    dataConv_25;
  wire       [7:0]    dataConv_26;
  wire       [7:0]    dataConv_27;
  wire       [7:0]    dataConv_28;
  wire       [7:0]    dataConv_29;
  wire       [7:0]    dataConv_30;
  wire       [7:0]    dataConv_31;
  wire       [7:0]    dataConv_32;
  wire       [7:0]    dataConv_33;
  wire       [7:0]    dataConv_34;
  wire       [7:0]    dataConv_35;
  wire       [7:0]    dataConv_36;
  wire       [7:0]    dataConv_37;
  wire       [7:0]    dataConv_38;
  wire       [7:0]    dataConv_39;
  wire       [7:0]    dataConv_40;
  wire       [7:0]    dataConv_41;
  wire       [7:0]    dataConv_42;
  wire       [7:0]    dataConv_43;
  wire       [7:0]    dataConv_44;
  wire       [7:0]    dataConv_45;
  wire       [7:0]    dataConv_46;
  wire       [7:0]    dataConv_47;
  wire       [7:0]    dataConv_48;
  wire       [7:0]    dataConv_49;
  wire       [7:0]    dataConv_50;
  wire       [7:0]    dataConv_51;
  wire       [7:0]    dataConv_52;
  wire       [7:0]    dataConv_53;
  wire       [7:0]    dataConv_54;
  wire       [7:0]    dataConv_55;
  wire       [7:0]    dataConv_56;
  wire       [7:0]    dataConv_57;
  wire       [7:0]    dataConv_58;
  wire       [7:0]    dataConv_59;
  wire       [7:0]    dataConv_60;
  wire       [7:0]    dataConv_61;
  wire       [7:0]    dataConv_62;
  wire       [7:0]    dataConv_63;
  wire       [7:0]    dataConv_64;
  wire       [7:0]    dataConv_65;
  wire       [7:0]    dataConv_66;
  wire       [7:0]    dataConv_67;
  wire       [7:0]    dataConv_68;
  wire       [7:0]    dataConv_69;
  wire       [7:0]    dataConv_70;
  wire       [7:0]    dataConv_71;
  wire       [7:0]    dataConv_72;
  wire       [7:0]    dataConv_73;
  wire       [7:0]    dataConv_74;
  wire       [7:0]    dataConv_75;
  wire       [7:0]    dataConv_76;
  wire       [7:0]    dataConv_77;
  wire       [7:0]    dataConv_78;
  wire       [7:0]    dataConv_79;
  wire       [7:0]    dataConv_80;
  wire       [7:0]    dataConv_81;
  wire       [7:0]    dataConv_82;
  wire       [7:0]    dataConv_83;
  wire       [7:0]    dataConv_84;
  wire       [7:0]    dataConv_85;
  wire       [7:0]    dataConv_86;
  wire       [7:0]    dataConv_87;
  wire       [7:0]    dataConv_88;
  wire       [7:0]    dataConv_89;
  wire       [7:0]    dataConv_90;
  wire       [7:0]    dataConv_91;
  wire       [7:0]    dataConv_92;
  wire       [7:0]    dataConv_93;
  wire       [7:0]    dataConv_94;
  wire       [7:0]    dataConv_95;
  wire       [7:0]    dataConv_96;
  wire       [7:0]    dataConv_97;
  wire       [7:0]    dataConv_98;
  wire       [7:0]    dataConv_99;
  wire       [7:0]    dataConv_100;
  wire       [7:0]    dataConv_101;
  wire       [7:0]    dataConv_102;
  wire       [7:0]    dataConv_103;
  wire       [7:0]    dataConv_104;
  wire       [7:0]    dataConv_105;
  wire       [7:0]    dataConv_106;
  wire       [7:0]    dataConv_107;
  wire       [7:0]    dataConv_108;
  wire       [7:0]    dataConv_109;
  wire       [7:0]    dataConv_110;
  wire       [7:0]    dataConv_111;
  wire       [7:0]    dataConv_112;
  wire       [7:0]    dataConv_113;
  wire       [7:0]    dataConv_114;
  wire       [7:0]    dataConv_115;
  wire       [7:0]    dataConv_116;
  wire       [7:0]    dataConv_117;
  wire       [7:0]    dataConv_118;
  wire       [7:0]    dataConv_119;
  wire       [7:0]    dataConv_120;
  wire       [7:0]    dataConv_121;
  wire       [7:0]    dataConv_122;
  wire       [7:0]    dataConv_123;
  wire       [7:0]    dataConv_124;
  wire       [7:0]    dataConv_125;
  wire       [7:0]    dataConv_126;
  wire       [7:0]    dataConv_127;
  (* max_fanout = 100 *) reg        [8:0]    zero;
  reg        [7:0]    subDiv_0;
  reg        [7:0]    subDiv_1;
  reg        [7:0]    subDiv_2;
  reg        [7:0]    subDiv_3;
  reg        [7:0]    subDiv_4;
  reg        [7:0]    subDiv_5;
  reg        [7:0]    subDiv_6;
  reg        [7:0]    subDiv_7;
  reg        [7:0]    subDiv_8;
  reg        [7:0]    subDiv_9;
  reg        [7:0]    subDiv_10;
  reg        [7:0]    subDiv_11;
  reg        [7:0]    subDiv_12;
  reg        [7:0]    subDiv_13;
  reg        [7:0]    subDiv_14;
  reg        [7:0]    subDiv_15;
  reg        [7:0]    subDiv_16;
  reg        [7:0]    subDiv_17;
  reg        [7:0]    subDiv_18;
  reg        [7:0]    subDiv_19;
  reg        [7:0]    subDiv_20;
  reg        [7:0]    subDiv_21;
  reg        [7:0]    subDiv_22;
  reg        [7:0]    subDiv_23;
  reg        [7:0]    subDiv_24;
  reg        [7:0]    subDiv_25;
  reg        [7:0]    subDiv_26;
  reg        [7:0]    subDiv_27;
  reg        [7:0]    subDiv_28;
  reg        [7:0]    subDiv_29;
  reg        [7:0]    subDiv_30;
  reg        [7:0]    subDiv_31;
  reg        [7:0]    subDiv_32;
  reg        [7:0]    subDiv_33;
  reg        [7:0]    subDiv_34;
  reg        [7:0]    subDiv_35;
  reg        [7:0]    subDiv_36;
  reg        [7:0]    subDiv_37;
  reg        [7:0]    subDiv_38;
  reg        [7:0]    subDiv_39;
  reg        [7:0]    subDiv_40;
  reg        [7:0]    subDiv_41;
  reg        [7:0]    subDiv_42;
  reg        [7:0]    subDiv_43;
  reg        [7:0]    subDiv_44;
  reg        [7:0]    subDiv_45;
  reg        [7:0]    subDiv_46;
  reg        [7:0]    subDiv_47;
  reg        [7:0]    subDiv_48;
  reg        [7:0]    subDiv_49;
  reg        [7:0]    subDiv_50;
  reg        [7:0]    subDiv_51;
  reg        [7:0]    subDiv_52;
  reg        [7:0]    subDiv_53;
  reg        [7:0]    subDiv_54;
  reg        [7:0]    subDiv_55;
  reg        [7:0]    subDiv_56;
  reg        [7:0]    subDiv_57;
  reg        [7:0]    subDiv_58;
  reg        [7:0]    subDiv_59;
  reg        [7:0]    subDiv_60;
  reg        [7:0]    subDiv_61;
  reg        [7:0]    subDiv_62;
  reg        [7:0]    subDiv_63;
  reg        [7:0]    subDiv_64;
  reg        [7:0]    subDiv_65;
  reg        [7:0]    subDiv_66;
  reg        [7:0]    subDiv_67;
  reg        [7:0]    subDiv_68;
  reg        [7:0]    subDiv_69;
  reg        [7:0]    subDiv_70;
  reg        [7:0]    subDiv_71;
  reg        [7:0]    subDiv_72;
  reg        [7:0]    subDiv_73;
  reg        [7:0]    subDiv_74;
  reg        [7:0]    subDiv_75;
  reg        [7:0]    subDiv_76;
  reg        [7:0]    subDiv_77;
  reg        [7:0]    subDiv_78;
  reg        [7:0]    subDiv_79;
  reg        [7:0]    subDiv_80;
  reg        [7:0]    subDiv_81;
  reg        [7:0]    subDiv_82;
  reg        [7:0]    subDiv_83;
  reg        [7:0]    subDiv_84;
  reg        [7:0]    subDiv_85;
  reg        [7:0]    subDiv_86;
  reg        [7:0]    subDiv_87;
  reg        [7:0]    subDiv_88;
  reg        [7:0]    subDiv_89;
  reg        [7:0]    subDiv_90;
  reg        [7:0]    subDiv_91;
  reg        [7:0]    subDiv_92;
  reg        [7:0]    subDiv_93;
  reg        [7:0]    subDiv_94;
  reg        [7:0]    subDiv_95;
  reg        [7:0]    subDiv_96;
  reg        [7:0]    subDiv_97;
  reg        [7:0]    subDiv_98;
  reg        [7:0]    subDiv_99;
  reg        [7:0]    subDiv_100;
  reg        [7:0]    subDiv_101;
  reg        [7:0]    subDiv_102;
  reg        [7:0]    subDiv_103;
  reg        [7:0]    subDiv_104;
  reg        [7:0]    subDiv_105;
  reg        [7:0]    subDiv_106;
  reg        [7:0]    subDiv_107;
  reg        [7:0]    subDiv_108;
  reg        [7:0]    subDiv_109;
  reg        [7:0]    subDiv_110;
  reg        [7:0]    subDiv_111;
  reg        [7:0]    subDiv_112;
  reg        [7:0]    subDiv_113;
  reg        [7:0]    subDiv_114;
  reg        [7:0]    subDiv_115;
  reg        [7:0]    subDiv_116;
  reg        [7:0]    subDiv_117;
  reg        [7:0]    subDiv_118;
  reg        [7:0]    subDiv_119;
  reg        [7:0]    subDiv_120;
  reg        [7:0]    subDiv_121;
  reg        [7:0]    subDiv_122;
  reg        [7:0]    subDiv_123;
  reg        [7:0]    subDiv_124;
  reg        [7:0]    subDiv_125;
  reg        [7:0]    subDiv_126;
  reg        [7:0]    subDiv_127;
  wire       [8:0]    dSub_0;
  wire       [8:0]    dSub_1;
  wire       [8:0]    dSub_2;
  wire       [8:0]    dSub_3;
  wire       [8:0]    dSub_4;
  wire       [8:0]    dSub_5;
  wire       [8:0]    dSub_6;
  wire       [8:0]    dSub_7;
  wire       [8:0]    dSub_8;
  wire       [8:0]    dSub_9;
  wire       [8:0]    dSub_10;
  wire       [8:0]    dSub_11;
  wire       [8:0]    dSub_12;
  wire       [8:0]    dSub_13;
  wire       [8:0]    dSub_14;
  wire       [8:0]    dSub_15;
  wire       [8:0]    dSub_16;
  wire       [8:0]    dSub_17;
  wire       [8:0]    dSub_18;
  wire       [8:0]    dSub_19;
  wire       [8:0]    dSub_20;
  wire       [8:0]    dSub_21;
  wire       [8:0]    dSub_22;
  wire       [8:0]    dSub_23;
  wire       [8:0]    dSub_24;
  wire       [8:0]    dSub_25;
  wire       [8:0]    dSub_26;
  wire       [8:0]    dSub_27;
  wire       [8:0]    dSub_28;
  wire       [8:0]    dSub_29;
  wire       [8:0]    dSub_30;
  wire       [8:0]    dSub_31;
  wire       [8:0]    dSub_32;
  wire       [8:0]    dSub_33;
  wire       [8:0]    dSub_34;
  wire       [8:0]    dSub_35;
  wire       [8:0]    dSub_36;
  wire       [8:0]    dSub_37;
  wire       [8:0]    dSub_38;
  wire       [8:0]    dSub_39;
  wire       [8:0]    dSub_40;
  wire       [8:0]    dSub_41;
  wire       [8:0]    dSub_42;
  wire       [8:0]    dSub_43;
  wire       [8:0]    dSub_44;
  wire       [8:0]    dSub_45;
  wire       [8:0]    dSub_46;
  wire       [8:0]    dSub_47;
  wire       [8:0]    dSub_48;
  wire       [8:0]    dSub_49;
  wire       [8:0]    dSub_50;
  wire       [8:0]    dSub_51;
  wire       [8:0]    dSub_52;
  wire       [8:0]    dSub_53;
  wire       [8:0]    dSub_54;
  wire       [8:0]    dSub_55;
  wire       [8:0]    dSub_56;
  wire       [8:0]    dSub_57;
  wire       [8:0]    dSub_58;
  wire       [8:0]    dSub_59;
  wire       [8:0]    dSub_60;
  wire       [8:0]    dSub_61;
  wire       [8:0]    dSub_62;
  wire       [8:0]    dSub_63;
  wire       [8:0]    dSub_64;
  wire       [8:0]    dSub_65;
  wire       [8:0]    dSub_66;
  wire       [8:0]    dSub_67;
  wire       [8:0]    dSub_68;
  wire       [8:0]    dSub_69;
  wire       [8:0]    dSub_70;
  wire       [8:0]    dSub_71;
  wire       [8:0]    dSub_72;
  wire       [8:0]    dSub_73;
  wire       [8:0]    dSub_74;
  wire       [8:0]    dSub_75;
  wire       [8:0]    dSub_76;
  wire       [8:0]    dSub_77;
  wire       [8:0]    dSub_78;
  wire       [8:0]    dSub_79;
  wire       [8:0]    dSub_80;
  wire       [8:0]    dSub_81;
  wire       [8:0]    dSub_82;
  wire       [8:0]    dSub_83;
  wire       [8:0]    dSub_84;
  wire       [8:0]    dSub_85;
  wire       [8:0]    dSub_86;
  wire       [8:0]    dSub_87;
  wire       [8:0]    dSub_88;
  wire       [8:0]    dSub_89;
  wire       [8:0]    dSub_90;
  wire       [8:0]    dSub_91;
  wire       [8:0]    dSub_92;
  wire       [8:0]    dSub_93;
  wire       [8:0]    dSub_94;
  wire       [8:0]    dSub_95;
  wire       [8:0]    dSub_96;
  wire       [8:0]    dSub_97;
  wire       [8:0]    dSub_98;
  wire       [8:0]    dSub_99;
  wire       [8:0]    dSub_100;
  wire       [8:0]    dSub_101;
  wire       [8:0]    dSub_102;
  wire       [8:0]    dSub_103;
  wire       [8:0]    dSub_104;
  wire       [8:0]    dSub_105;
  wire       [8:0]    dSub_106;
  wire       [8:0]    dSub_107;
  wire       [8:0]    dSub_108;
  wire       [8:0]    dSub_109;
  wire       [8:0]    dSub_110;
  wire       [8:0]    dSub_111;
  wire       [8:0]    dSub_112;
  wire       [8:0]    dSub_113;
  wire       [8:0]    dSub_114;
  wire       [8:0]    dSub_115;
  wire       [8:0]    dSub_116;
  wire       [8:0]    dSub_117;
  wire       [8:0]    dSub_118;
  wire       [8:0]    dSub_119;
  wire       [8:0]    dSub_120;
  wire       [8:0]    dSub_121;
  wire       [8:0]    dSub_122;
  wire       [8:0]    dSub_123;
  wire       [8:0]    dSub_124;
  wire       [8:0]    dSub_125;
  wire       [8:0]    dSub_126;
  wire       [8:0]    dSub_127;
  wire       [15:0]   dDly_0;
  wire       [15:0]   dDly_1;
  wire       [15:0]   dDly_2;
  wire       [15:0]   dDly_3;
  wire       [15:0]   dDly_4;
  wire       [15:0]   dDly_5;
  wire       [15:0]   dDly_6;
  wire       [15:0]   dDly_7;
  wire       [15:0]   dDly_8;
  wire       [15:0]   dDly_9;
  wire       [15:0]   dDly_10;
  wire       [15:0]   dDly_11;
  wire       [15:0]   dDly_12;
  wire       [15:0]   dDly_13;
  wire       [15:0]   dDly_14;
  wire       [15:0]   dDly_15;
  wire       [15:0]   dDly_16;
  wire       [15:0]   dDly_17;
  wire       [15:0]   dDly_18;
  wire       [15:0]   dDly_19;
  wire       [15:0]   dDly_20;
  wire       [15:0]   dDly_21;
  wire       [15:0]   dDly_22;
  wire       [15:0]   dDly_23;
  wire       [15:0]   dDly_24;
  wire       [15:0]   dDly_25;
  wire       [15:0]   dDly_26;
  wire       [15:0]   dDly_27;
  wire       [15:0]   dDly_28;
  wire       [15:0]   dDly_29;
  wire       [15:0]   dDly_30;
  wire       [15:0]   dDly_31;
  wire       [15:0]   dDly_32;
  wire       [15:0]   dDly_33;
  wire       [15:0]   dDly_34;
  wire       [15:0]   dDly_35;
  wire       [15:0]   dDly_36;
  wire       [15:0]   dDly_37;
  wire       [15:0]   dDly_38;
  wire       [15:0]   dDly_39;
  wire       [15:0]   dDly_40;
  wire       [15:0]   dDly_41;
  wire       [15:0]   dDly_42;
  wire       [15:0]   dDly_43;
  wire       [15:0]   dDly_44;
  wire       [15:0]   dDly_45;
  wire       [15:0]   dDly_46;
  wire       [15:0]   dDly_47;
  wire       [15:0]   dDly_48;
  wire       [15:0]   dDly_49;
  wire       [15:0]   dDly_50;
  wire       [15:0]   dDly_51;
  wire       [15:0]   dDly_52;
  wire       [15:0]   dDly_53;
  wire       [15:0]   dDly_54;
  wire       [15:0]   dDly_55;
  wire       [15:0]   dDly_56;
  wire       [15:0]   dDly_57;
  wire       [15:0]   dDly_58;
  wire       [15:0]   dDly_59;
  wire       [15:0]   dDly_60;
  wire       [15:0]   dDly_61;
  wire       [15:0]   dDly_62;
  wire       [15:0]   dDly_63;
  wire       [15:0]   dDly_64;
  wire       [15:0]   dDly_65;
  wire       [15:0]   dDly_66;
  wire       [15:0]   dDly_67;
  wire       [15:0]   dDly_68;
  wire       [15:0]   dDly_69;
  wire       [15:0]   dDly_70;
  wire       [15:0]   dDly_71;
  wire       [15:0]   dDly_72;
  wire       [15:0]   dDly_73;
  wire       [15:0]   dDly_74;
  wire       [15:0]   dDly_75;
  wire       [15:0]   dDly_76;
  wire       [15:0]   dDly_77;
  wire       [15:0]   dDly_78;
  wire       [15:0]   dDly_79;
  wire       [15:0]   dDly_80;
  wire       [15:0]   dDly_81;
  wire       [15:0]   dDly_82;
  wire       [15:0]   dDly_83;
  wire       [15:0]   dDly_84;
  wire       [15:0]   dDly_85;
  wire       [15:0]   dDly_86;
  wire       [15:0]   dDly_87;
  wire       [15:0]   dDly_88;
  wire       [15:0]   dDly_89;
  wire       [15:0]   dDly_90;
  wire       [15:0]   dDly_91;
  wire       [15:0]   dDly_92;
  wire       [15:0]   dDly_93;
  wire       [15:0]   dDly_94;
  wire       [15:0]   dDly_95;
  wire       [15:0]   dDly_96;
  wire       [15:0]   dDly_97;
  wire       [15:0]   dDly_98;
  wire       [15:0]   dDly_99;
  wire       [15:0]   dDly_100;
  wire       [15:0]   dDly_101;
  wire       [15:0]   dDly_102;
  wire       [15:0]   dDly_103;
  wire       [15:0]   dDly_104;
  wire       [15:0]   dDly_105;
  wire       [15:0]   dDly_106;
  wire       [15:0]   dDly_107;
  wire       [15:0]   dDly_108;
  wire       [15:0]   dDly_109;
  wire       [15:0]   dDly_110;
  wire       [15:0]   dDly_111;
  wire       [15:0]   dDly_112;
  wire       [15:0]   dDly_113;
  wire       [15:0]   dDly_114;
  wire       [15:0]   dDly_115;
  wire       [15:0]   dDly_116;
  wire       [15:0]   dDly_117;
  wire       [15:0]   dDly_118;
  wire       [15:0]   dDly_119;
  wire       [15:0]   dDly_120;
  wire       [15:0]   dDly_121;
  wire       [15:0]   dDly_122;
  wire       [15:0]   dDly_123;
  wire       [15:0]   dDly_124;
  wire       [15:0]   dDly_125;
  wire       [15:0]   dDly_126;
  wire       [15:0]   dDly_127;
  wire                d_0_valid;
  wire       [15:0]   d_0_payload;
  wire                d_1_valid;
  wire       [15:0]   d_1_payload;
  wire                d_2_valid;
  wire       [15:0]   d_2_payload;
  wire                d_3_valid;
  wire       [15:0]   d_3_payload;
  wire                d_4_valid;
  wire       [15:0]   d_4_payload;
  wire                d_5_valid;
  wire       [15:0]   d_5_payload;
  wire                d_6_valid;
  wire       [15:0]   d_6_payload;
  wire                d_7_valid;
  wire       [15:0]   d_7_payload;
  wire                d_8_valid;
  wire       [15:0]   d_8_payload;
  wire                d_9_valid;
  wire       [15:0]   d_9_payload;
  wire                d_10_valid;
  wire       [15:0]   d_10_payload;
  wire                d_11_valid;
  wire       [15:0]   d_11_payload;
  wire                d_12_valid;
  wire       [15:0]   d_12_payload;
  wire                d_13_valid;
  wire       [15:0]   d_13_payload;
  wire                d_14_valid;
  wire       [15:0]   d_14_payload;
  wire                d_15_valid;
  wire       [15:0]   d_15_payload;
  wire                d_16_valid;
  wire       [15:0]   d_16_payload;
  wire                d_17_valid;
  wire       [15:0]   d_17_payload;
  wire                d_18_valid;
  wire       [15:0]   d_18_payload;
  wire                d_19_valid;
  wire       [15:0]   d_19_payload;
  wire                d_20_valid;
  wire       [15:0]   d_20_payload;
  wire                d_21_valid;
  wire       [15:0]   d_21_payload;
  wire                d_22_valid;
  wire       [15:0]   d_22_payload;
  wire                d_23_valid;
  wire       [15:0]   d_23_payload;
  wire                d_24_valid;
  wire       [15:0]   d_24_payload;
  wire                d_25_valid;
  wire       [15:0]   d_25_payload;
  wire                d_26_valid;
  wire       [15:0]   d_26_payload;
  wire                d_27_valid;
  wire       [15:0]   d_27_payload;
  wire                d_28_valid;
  wire       [15:0]   d_28_payload;
  wire                d_29_valid;
  wire       [15:0]   d_29_payload;
  wire                d_30_valid;
  wire       [15:0]   d_30_payload;
  wire                d_31_valid;
  wire       [15:0]   d_31_payload;
  wire                d_32_valid;
  wire       [15:0]   d_32_payload;
  wire                d_33_valid;
  wire       [15:0]   d_33_payload;
  wire                d_34_valid;
  wire       [15:0]   d_34_payload;
  wire                d_35_valid;
  wire       [15:0]   d_35_payload;
  wire                d_36_valid;
  wire       [15:0]   d_36_payload;
  wire                d_37_valid;
  wire       [15:0]   d_37_payload;
  wire                d_38_valid;
  wire       [15:0]   d_38_payload;
  wire                d_39_valid;
  wire       [15:0]   d_39_payload;
  wire                d_40_valid;
  wire       [15:0]   d_40_payload;
  wire                d_41_valid;
  wire       [15:0]   d_41_payload;
  wire                d_42_valid;
  wire       [15:0]   d_42_payload;
  wire                d_43_valid;
  wire       [15:0]   d_43_payload;
  wire                d_44_valid;
  wire       [15:0]   d_44_payload;
  wire                d_45_valid;
  wire       [15:0]   d_45_payload;
  wire                d_46_valid;
  wire       [15:0]   d_46_payload;
  wire                d_47_valid;
  wire       [15:0]   d_47_payload;
  wire                d_48_valid;
  wire       [15:0]   d_48_payload;
  wire                d_49_valid;
  wire       [15:0]   d_49_payload;
  wire                d_50_valid;
  wire       [15:0]   d_50_payload;
  wire                d_51_valid;
  wire       [15:0]   d_51_payload;
  wire                d_52_valid;
  wire       [15:0]   d_52_payload;
  wire                d_53_valid;
  wire       [15:0]   d_53_payload;
  wire                d_54_valid;
  wire       [15:0]   d_54_payload;
  wire                d_55_valid;
  wire       [15:0]   d_55_payload;
  wire                d_56_valid;
  wire       [15:0]   d_56_payload;
  wire                d_57_valid;
  wire       [15:0]   d_57_payload;
  wire                d_58_valid;
  wire       [15:0]   d_58_payload;
  wire                d_59_valid;
  wire       [15:0]   d_59_payload;
  wire                d_60_valid;
  wire       [15:0]   d_60_payload;
  wire                d_61_valid;
  wire       [15:0]   d_61_payload;
  wire                d_62_valid;
  wire       [15:0]   d_62_payload;
  wire                d_63_valid;
  wire       [15:0]   d_63_payload;
  wire                d_64_valid;
  wire       [15:0]   d_64_payload;
  wire                d_65_valid;
  wire       [15:0]   d_65_payload;
  wire                d_66_valid;
  wire       [15:0]   d_66_payload;
  wire                d_67_valid;
  wire       [15:0]   d_67_payload;
  wire                d_68_valid;
  wire       [15:0]   d_68_payload;
  wire                d_69_valid;
  wire       [15:0]   d_69_payload;
  wire                d_70_valid;
  wire       [15:0]   d_70_payload;
  wire                d_71_valid;
  wire       [15:0]   d_71_payload;
  wire                d_72_valid;
  wire       [15:0]   d_72_payload;
  wire                d_73_valid;
  wire       [15:0]   d_73_payload;
  wire                d_74_valid;
  wire       [15:0]   d_74_payload;
  wire                d_75_valid;
  wire       [15:0]   d_75_payload;
  wire                d_76_valid;
  wire       [15:0]   d_76_payload;
  wire                d_77_valid;
  wire       [15:0]   d_77_payload;
  wire                d_78_valid;
  wire       [15:0]   d_78_payload;
  wire                d_79_valid;
  wire       [15:0]   d_79_payload;
  wire                d_80_valid;
  wire       [15:0]   d_80_payload;
  wire                d_81_valid;
  wire       [15:0]   d_81_payload;
  wire                d_82_valid;
  wire       [15:0]   d_82_payload;
  wire                d_83_valid;
  wire       [15:0]   d_83_payload;
  wire                d_84_valid;
  wire       [15:0]   d_84_payload;
  wire                d_85_valid;
  wire       [15:0]   d_85_payload;
  wire                d_86_valid;
  wire       [15:0]   d_86_payload;
  wire                d_87_valid;
  wire       [15:0]   d_87_payload;
  wire                d_88_valid;
  wire       [15:0]   d_88_payload;
  wire                d_89_valid;
  wire       [15:0]   d_89_payload;
  wire                d_90_valid;
  wire       [15:0]   d_90_payload;
  wire                d_91_valid;
  wire       [15:0]   d_91_payload;
  wire                d_92_valid;
  wire       [15:0]   d_92_payload;
  wire                d_93_valid;
  wire       [15:0]   d_93_payload;
  wire                d_94_valid;
  wire       [15:0]   d_94_payload;
  wire                d_95_valid;
  wire       [15:0]   d_95_payload;
  wire                d_96_valid;
  wire       [15:0]   d_96_payload;
  wire                d_97_valid;
  wire       [15:0]   d_97_payload;
  wire                d_98_valid;
  wire       [15:0]   d_98_payload;
  wire                d_99_valid;
  wire       [15:0]   d_99_payload;
  wire                d_100_valid;
  wire       [15:0]   d_100_payload;
  wire                d_101_valid;
  wire       [15:0]   d_101_payload;
  wire                d_102_valid;
  wire       [15:0]   d_102_payload;
  wire                d_103_valid;
  wire       [15:0]   d_103_payload;
  wire                d_104_valid;
  wire       [15:0]   d_104_payload;
  wire                d_105_valid;
  wire       [15:0]   d_105_payload;
  wire                d_106_valid;
  wire       [15:0]   d_106_payload;
  wire                d_107_valid;
  wire       [15:0]   d_107_payload;
  wire                d_108_valid;
  wire       [15:0]   d_108_payload;
  wire                d_109_valid;
  wire       [15:0]   d_109_payload;
  wire                d_110_valid;
  wire       [15:0]   d_110_payload;
  wire                d_111_valid;
  wire       [15:0]   d_111_payload;
  wire                d_112_valid;
  wire       [15:0]   d_112_payload;
  wire                d_113_valid;
  wire       [15:0]   d_113_payload;
  wire                d_114_valid;
  wire       [15:0]   d_114_payload;
  wire                d_115_valid;
  wire       [15:0]   d_115_payload;
  wire                d_116_valid;
  wire       [15:0]   d_116_payload;
  wire                d_117_valid;
  wire       [15:0]   d_117_payload;
  wire                d_118_valid;
  wire       [15:0]   d_118_payload;
  wire                d_119_valid;
  wire       [15:0]   d_119_payload;
  wire                d_120_valid;
  wire       [15:0]   d_120_payload;
  wire                d_121_valid;
  wire       [15:0]   d_121_payload;
  wire                d_122_valid;
  wire       [15:0]   d_122_payload;
  wire                d_123_valid;
  wire       [15:0]   d_123_payload;
  wire                d_124_valid;
  wire       [15:0]   d_124_payload;
  wire                d_125_valid;
  wire       [15:0]   d_125_payload;
  wire                d_126_valid;
  wire       [15:0]   d_126_payload;
  wire                d_127_valid;
  wire       [15:0]   d_127_payload;
  reg                 vldConv_delay_1;
  reg                 vldConv_delay_2;
  reg                 vldConv_delay_3;
  reg                 vldConv_delay_4;
  reg                 vld;
  wire       [2047:0] wPy;
  wire       [15:0]   t_output_tdata;
  wire       [15:0]   t_output_tdata_1;
  wire       [15:0]   t_output_tdata_2;
  wire       [15:0]   t_output_tdata_3;
  wire       [15:0]   t_output_tdata_4;
  wire       [15:0]   t_output_tdata_5;
  wire       [15:0]   t_output_tdata_6;
  wire       [15:0]   t_output_tdata_7;
  wire       [15:0]   t_output_tdata_8;
  wire       [15:0]   t_output_tdata_9;
  wire       [15:0]   t_output_tdata_10;
  wire       [15:0]   t_output_tdata_11;
  wire       [15:0]   t_output_tdata_12;
  wire       [15:0]   t_output_tdata_13;
  wire       [15:0]   t_output_tdata_14;
  wire       [15:0]   t_output_tdata_15;
  wire       [15:0]   t_output_tdata_16;
  wire       [15:0]   t_output_tdata_17;
  wire       [15:0]   t_output_tdata_18;
  wire       [15:0]   t_output_tdata_19;
  wire       [15:0]   t_output_tdata_20;
  wire       [15:0]   t_output_tdata_21;
  wire       [15:0]   t_output_tdata_22;
  wire       [15:0]   t_output_tdata_23;
  wire       [15:0]   t_output_tdata_24;
  wire       [15:0]   t_output_tdata_25;
  wire       [15:0]   t_output_tdata_26;
  wire       [15:0]   t_output_tdata_27;
  wire       [15:0]   t_output_tdata_28;
  wire       [15:0]   t_output_tdata_29;
  wire       [15:0]   t_output_tdata_30;
  wire       [15:0]   t_output_tdata_31;
  wire       [15:0]   t_output_tdata_32;
  wire       [15:0]   t_output_tdata_33;
  wire       [15:0]   t_output_tdata_34;
  wire       [15:0]   t_output_tdata_35;
  wire       [15:0]   t_output_tdata_36;
  wire       [15:0]   t_output_tdata_37;
  wire       [15:0]   t_output_tdata_38;
  wire       [15:0]   t_output_tdata_39;
  wire       [15:0]   t_output_tdata_40;
  wire       [15:0]   t_output_tdata_41;
  wire       [15:0]   t_output_tdata_42;
  wire       [15:0]   t_output_tdata_43;
  wire       [15:0]   t_output_tdata_44;
  wire       [15:0]   t_output_tdata_45;
  wire       [15:0]   t_output_tdata_46;
  wire       [15:0]   t_output_tdata_47;
  wire       [15:0]   t_output_tdata_48;
  wire       [15:0]   t_output_tdata_49;
  wire       [15:0]   t_output_tdata_50;
  wire       [15:0]   t_output_tdata_51;
  wire       [15:0]   t_output_tdata_52;
  wire       [15:0]   t_output_tdata_53;
  wire       [15:0]   t_output_tdata_54;
  wire       [15:0]   t_output_tdata_55;
  wire       [15:0]   t_output_tdata_56;
  wire       [15:0]   t_output_tdata_57;
  wire       [15:0]   t_output_tdata_58;
  wire       [15:0]   t_output_tdata_59;
  wire       [15:0]   t_output_tdata_60;
  wire       [15:0]   t_output_tdata_61;
  wire       [15:0]   t_output_tdata_62;
  wire       [15:0]   t_output_tdata_63;
  wire       [15:0]   t_output_tdata_64;
  wire       [15:0]   t_output_tdata_65;
  wire       [15:0]   t_output_tdata_66;
  wire       [15:0]   t_output_tdata_67;
  wire       [15:0]   t_output_tdata_68;
  wire       [15:0]   t_output_tdata_69;
  wire       [15:0]   t_output_tdata_70;
  wire       [15:0]   t_output_tdata_71;
  wire       [15:0]   t_output_tdata_72;
  wire       [15:0]   t_output_tdata_73;
  wire       [15:0]   t_output_tdata_74;
  wire       [15:0]   t_output_tdata_75;
  wire       [15:0]   t_output_tdata_76;
  wire       [15:0]   t_output_tdata_77;
  wire       [15:0]   t_output_tdata_78;
  wire       [15:0]   t_output_tdata_79;
  wire       [15:0]   t_output_tdata_80;
  wire       [15:0]   t_output_tdata_81;
  wire       [15:0]   t_output_tdata_82;
  wire       [15:0]   t_output_tdata_83;
  wire       [15:0]   t_output_tdata_84;
  wire       [15:0]   t_output_tdata_85;
  wire       [15:0]   t_output_tdata_86;
  wire       [15:0]   t_output_tdata_87;
  wire       [15:0]   t_output_tdata_88;
  wire       [15:0]   t_output_tdata_89;
  wire       [15:0]   t_output_tdata_90;
  wire       [15:0]   t_output_tdata_91;
  wire       [15:0]   t_output_tdata_92;
  wire       [15:0]   t_output_tdata_93;
  wire       [15:0]   t_output_tdata_94;
  wire       [15:0]   t_output_tdata_95;
  wire       [15:0]   t_output_tdata_96;
  wire       [15:0]   t_output_tdata_97;
  wire       [15:0]   t_output_tdata_98;
  wire       [15:0]   t_output_tdata_99;
  wire       [15:0]   t_output_tdata_100;
  wire       [15:0]   t_output_tdata_101;
  wire       [15:0]   t_output_tdata_102;
  wire       [15:0]   t_output_tdata_103;
  wire       [15:0]   t_output_tdata_104;
  wire       [15:0]   t_output_tdata_105;
  wire       [15:0]   t_output_tdata_106;
  wire       [15:0]   t_output_tdata_107;
  wire       [15:0]   t_output_tdata_108;
  wire       [15:0]   t_output_tdata_109;
  wire       [15:0]   t_output_tdata_110;
  wire       [15:0]   t_output_tdata_111;
  wire       [15:0]   t_output_tdata_112;
  wire       [15:0]   t_output_tdata_113;
  wire       [15:0]   t_output_tdata_114;
  wire       [15:0]   t_output_tdata_115;
  wire       [15:0]   t_output_tdata_116;
  wire       [15:0]   t_output_tdata_117;
  wire       [15:0]   t_output_tdata_118;
  wire       [15:0]   t_output_tdata_119;
  wire       [15:0]   t_output_tdata_120;
  wire       [15:0]   t_output_tdata_121;
  wire       [15:0]   t_output_tdata_122;
  wire       [15:0]   t_output_tdata_123;
  wire       [15:0]   t_output_tdata_124;
  wire       [15:0]   t_output_tdata_125;
  wire       [15:0]   t_output_tdata_126;
  wire       [15:0]   t_output_tdata_127;
  wire       [4:0]    t_output_tdata_128;
  wire       [4:0]    t_output_tdata_129;
  wire       [4:0]    t_output_tdata_130;
  wire       [4:0]    t_output_tdata_131;
  wire       [4:0]    t_output_tdata_132;
  wire       [4:0]    t_output_tdata_133;
  wire       [4:0]    t_output_tdata_134;
  wire       [4:0]    t_output_tdata_135;
  wire       [4:0]    t_output_tdata_136;
  wire       [4:0]    t_output_tdata_137;
  wire       [4:0]    t_output_tdata_138;
  wire       [4:0]    t_output_tdata_139;
  wire       [4:0]    t_output_tdata_140;
  wire       [4:0]    t_output_tdata_141;
  wire       [4:0]    t_output_tdata_142;
  wire       [4:0]    t_output_tdata_143;
  wire       [4:0]    t_output_tdata_144;
  wire       [4:0]    t_output_tdata_145;
  wire       [4:0]    t_output_tdata_146;
  wire       [4:0]    t_output_tdata_147;
  wire       [4:0]    t_output_tdata_148;
  wire       [4:0]    t_output_tdata_149;
  wire       [4:0]    t_output_tdata_150;
  wire       [4:0]    t_output_tdata_151;
  wire       [4:0]    t_output_tdata_152;
  wire       [4:0]    t_output_tdata_153;
  wire       [4:0]    t_output_tdata_154;
  wire       [4:0]    t_output_tdata_155;
  wire       [4:0]    t_output_tdata_156;
  wire       [4:0]    t_output_tdata_157;
  wire       [4:0]    t_output_tdata_158;
  wire       [4:0]    t_output_tdata_159;
  wire       [4:0]    t_output_tdata_160;
  wire       [4:0]    t_output_tdata_161;
  wire       [4:0]    t_output_tdata_162;
  wire       [4:0]    t_output_tdata_163;
  wire       [4:0]    t_output_tdata_164;
  wire       [4:0]    t_output_tdata_165;
  wire       [4:0]    t_output_tdata_166;
  wire       [4:0]    t_output_tdata_167;
  wire       [4:0]    t_output_tdata_168;
  wire       [4:0]    t_output_tdata_169;
  wire       [4:0]    t_output_tdata_170;
  wire       [4:0]    t_output_tdata_171;
  wire       [4:0]    t_output_tdata_172;
  wire       [4:0]    t_output_tdata_173;
  wire       [4:0]    t_output_tdata_174;
  wire       [4:0]    t_output_tdata_175;
  wire       [4:0]    t_output_tdata_176;
  wire       [4:0]    t_output_tdata_177;
  wire       [4:0]    t_output_tdata_178;
  wire       [4:0]    t_output_tdata_179;
  wire       [4:0]    t_output_tdata_180;
  wire       [4:0]    t_output_tdata_181;
  wire       [4:0]    t_output_tdata_182;
  wire       [4:0]    t_output_tdata_183;
  wire       [4:0]    t_output_tdata_184;
  wire       [4:0]    t_output_tdata_185;
  wire       [4:0]    t_output_tdata_186;
  wire       [4:0]    t_output_tdata_187;
  wire       [4:0]    t_output_tdata_188;
  wire       [4:0]    t_output_tdata_189;
  wire       [4:0]    t_output_tdata_190;
  wire       [4:0]    t_output_tdata_191;
  wire       [4:0]    t_output_tdata_192;
  wire       [4:0]    t_output_tdata_193;
  wire       [4:0]    t_output_tdata_194;
  wire       [4:0]    t_output_tdata_195;
  wire       [4:0]    t_output_tdata_196;
  wire       [4:0]    t_output_tdata_197;
  wire       [4:0]    t_output_tdata_198;
  wire       [4:0]    t_output_tdata_199;
  wire       [4:0]    t_output_tdata_200;
  wire       [4:0]    t_output_tdata_201;
  wire       [4:0]    t_output_tdata_202;
  wire       [4:0]    t_output_tdata_203;
  wire       [4:0]    t_output_tdata_204;
  wire       [4:0]    t_output_tdata_205;
  wire       [4:0]    t_output_tdata_206;
  wire       [4:0]    t_output_tdata_207;
  wire       [4:0]    t_output_tdata_208;
  wire       [4:0]    t_output_tdata_209;
  wire       [4:0]    t_output_tdata_210;
  wire       [4:0]    t_output_tdata_211;
  wire       [4:0]    t_output_tdata_212;
  wire       [4:0]    t_output_tdata_213;
  wire       [4:0]    t_output_tdata_214;
  wire       [4:0]    t_output_tdata_215;
  wire       [4:0]    t_output_tdata_216;
  wire       [4:0]    t_output_tdata_217;
  wire       [4:0]    t_output_tdata_218;
  wire       [4:0]    t_output_tdata_219;
  wire       [4:0]    t_output_tdata_220;
  wire       [4:0]    t_output_tdata_221;
  wire       [4:0]    t_output_tdata_222;
  wire       [4:0]    t_output_tdata_223;
  wire       [4:0]    t_output_tdata_224;
  wire       [4:0]    t_output_tdata_225;
  wire       [4:0]    t_output_tdata_226;
  wire       [4:0]    t_output_tdata_227;
  wire       [4:0]    t_output_tdata_228;
  wire       [4:0]    t_output_tdata_229;
  wire       [4:0]    t_output_tdata_230;
  wire       [4:0]    t_output_tdata_231;
  wire       [4:0]    t_output_tdata_232;
  wire       [4:0]    t_output_tdata_233;
  wire       [4:0]    t_output_tdata_234;
  wire       [4:0]    t_output_tdata_235;
  wire       [4:0]    t_output_tdata_236;
  wire       [4:0]    t_output_tdata_237;
  wire       [4:0]    t_output_tdata_238;
  wire       [4:0]    t_output_tdata_239;
  wire       [4:0]    t_output_tdata_240;
  wire       [4:0]    t_output_tdata_241;
  wire       [4:0]    t_output_tdata_242;
  wire       [4:0]    t_output_tdata_243;
  wire       [4:0]    t_output_tdata_244;
  wire       [4:0]    t_output_tdata_245;
  wire       [4:0]    t_output_tdata_246;
  wire       [4:0]    t_output_tdata_247;
  wire       [4:0]    t_output_tdata_248;
  wire       [4:0]    t_output_tdata_249;
  wire       [4:0]    t_output_tdata_250;
  wire       [4:0]    t_output_tdata_251;
  wire       [4:0]    t_output_tdata_252;
  wire       [4:0]    t_output_tdata_253;
  wire       [4:0]    t_output_tdata_254;
  wire       [4:0]    t_output_tdata_255;

  assign t_int4Data_0 = inputData_tdata[3 : 0];
  assign t_int4Data_1 = inputData_tdata[7 : 4];
  assign t_int4Data_2 = inputData_tdata[11 : 8];
  assign t_int4Data_3 = inputData_tdata[15 : 12];
  assign t_int4Data_4 = inputData_tdata[19 : 16];
  assign t_int4Data_5 = inputData_tdata[23 : 20];
  assign t_int4Data_6 = inputData_tdata[27 : 24];
  assign t_int4Data_7 = inputData_tdata[31 : 28];
  assign t_int4Data_8 = inputData_tdata[35 : 32];
  assign t_int4Data_9 = inputData_tdata[39 : 36];
  assign t_int4Data_10 = inputData_tdata[43 : 40];
  assign t_int4Data_11 = inputData_tdata[47 : 44];
  assign t_int4Data_12 = inputData_tdata[51 : 48];
  assign t_int4Data_13 = inputData_tdata[55 : 52];
  assign t_int4Data_14 = inputData_tdata[59 : 56];
  assign t_int4Data_15 = inputData_tdata[63 : 60];
  assign t_int4Data_16 = inputData_tdata[67 : 64];
  assign t_int4Data_17 = inputData_tdata[71 : 68];
  assign t_int4Data_18 = inputData_tdata[75 : 72];
  assign t_int4Data_19 = inputData_tdata[79 : 76];
  assign t_int4Data_20 = inputData_tdata[83 : 80];
  assign t_int4Data_21 = inputData_tdata[87 : 84];
  assign t_int4Data_22 = inputData_tdata[91 : 88];
  assign t_int4Data_23 = inputData_tdata[95 : 92];
  assign t_int4Data_24 = inputData_tdata[99 : 96];
  assign t_int4Data_25 = inputData_tdata[103 : 100];
  assign t_int4Data_26 = inputData_tdata[107 : 104];
  assign t_int4Data_27 = inputData_tdata[111 : 108];
  assign t_int4Data_28 = inputData_tdata[115 : 112];
  assign t_int4Data_29 = inputData_tdata[119 : 116];
  assign t_int4Data_30 = inputData_tdata[123 : 120];
  assign t_int4Data_31 = inputData_tdata[127 : 124];
  assign t_int4Data_32 = inputData_tdata[131 : 128];
  assign t_int4Data_33 = inputData_tdata[135 : 132];
  assign t_int4Data_34 = inputData_tdata[139 : 136];
  assign t_int4Data_35 = inputData_tdata[143 : 140];
  assign t_int4Data_36 = inputData_tdata[147 : 144];
  assign t_int4Data_37 = inputData_tdata[151 : 148];
  assign t_int4Data_38 = inputData_tdata[155 : 152];
  assign t_int4Data_39 = inputData_tdata[159 : 156];
  assign t_int4Data_40 = inputData_tdata[163 : 160];
  assign t_int4Data_41 = inputData_tdata[167 : 164];
  assign t_int4Data_42 = inputData_tdata[171 : 168];
  assign t_int4Data_43 = inputData_tdata[175 : 172];
  assign t_int4Data_44 = inputData_tdata[179 : 176];
  assign t_int4Data_45 = inputData_tdata[183 : 180];
  assign t_int4Data_46 = inputData_tdata[187 : 184];
  assign t_int4Data_47 = inputData_tdata[191 : 188];
  assign t_int4Data_48 = inputData_tdata[195 : 192];
  assign t_int4Data_49 = inputData_tdata[199 : 196];
  assign t_int4Data_50 = inputData_tdata[203 : 200];
  assign t_int4Data_51 = inputData_tdata[207 : 204];
  assign t_int4Data_52 = inputData_tdata[211 : 208];
  assign t_int4Data_53 = inputData_tdata[215 : 212];
  assign t_int4Data_54 = inputData_tdata[219 : 216];
  assign t_int4Data_55 = inputData_tdata[223 : 220];
  assign t_int4Data_56 = inputData_tdata[227 : 224];
  assign t_int4Data_57 = inputData_tdata[231 : 228];
  assign t_int4Data_58 = inputData_tdata[235 : 232];
  assign t_int4Data_59 = inputData_tdata[239 : 236];
  assign t_int4Data_60 = inputData_tdata[243 : 240];
  assign t_int4Data_61 = inputData_tdata[247 : 244];
  assign t_int4Data_62 = inputData_tdata[251 : 248];
  assign t_int4Data_63 = inputData_tdata[255 : 252];
  assign t_int4Data_64 = inputData_tdata[259 : 256];
  assign t_int4Data_65 = inputData_tdata[263 : 260];
  assign t_int4Data_66 = inputData_tdata[267 : 264];
  assign t_int4Data_67 = inputData_tdata[271 : 268];
  assign t_int4Data_68 = inputData_tdata[275 : 272];
  assign t_int4Data_69 = inputData_tdata[279 : 276];
  assign t_int4Data_70 = inputData_tdata[283 : 280];
  assign t_int4Data_71 = inputData_tdata[287 : 284];
  assign t_int4Data_72 = inputData_tdata[291 : 288];
  assign t_int4Data_73 = inputData_tdata[295 : 292];
  assign t_int4Data_74 = inputData_tdata[299 : 296];
  assign t_int4Data_75 = inputData_tdata[303 : 300];
  assign t_int4Data_76 = inputData_tdata[307 : 304];
  assign t_int4Data_77 = inputData_tdata[311 : 308];
  assign t_int4Data_78 = inputData_tdata[315 : 312];
  assign t_int4Data_79 = inputData_tdata[319 : 316];
  assign t_int4Data_80 = inputData_tdata[323 : 320];
  assign t_int4Data_81 = inputData_tdata[327 : 324];
  assign t_int4Data_82 = inputData_tdata[331 : 328];
  assign t_int4Data_83 = inputData_tdata[335 : 332];
  assign t_int4Data_84 = inputData_tdata[339 : 336];
  assign t_int4Data_85 = inputData_tdata[343 : 340];
  assign t_int4Data_86 = inputData_tdata[347 : 344];
  assign t_int4Data_87 = inputData_tdata[351 : 348];
  assign t_int4Data_88 = inputData_tdata[355 : 352];
  assign t_int4Data_89 = inputData_tdata[359 : 356];
  assign t_int4Data_90 = inputData_tdata[363 : 360];
  assign t_int4Data_91 = inputData_tdata[367 : 364];
  assign t_int4Data_92 = inputData_tdata[371 : 368];
  assign t_int4Data_93 = inputData_tdata[375 : 372];
  assign t_int4Data_94 = inputData_tdata[379 : 376];
  assign t_int4Data_95 = inputData_tdata[383 : 380];
  assign t_int4Data_96 = inputData_tdata[387 : 384];
  assign t_int4Data_97 = inputData_tdata[391 : 388];
  assign t_int4Data_98 = inputData_tdata[395 : 392];
  assign t_int4Data_99 = inputData_tdata[399 : 396];
  assign t_int4Data_100 = inputData_tdata[403 : 400];
  assign t_int4Data_101 = inputData_tdata[407 : 404];
  assign t_int4Data_102 = inputData_tdata[411 : 408];
  assign t_int4Data_103 = inputData_tdata[415 : 412];
  assign t_int4Data_104 = inputData_tdata[419 : 416];
  assign t_int4Data_105 = inputData_tdata[423 : 420];
  assign t_int4Data_106 = inputData_tdata[427 : 424];
  assign t_int4Data_107 = inputData_tdata[431 : 428];
  assign t_int4Data_108 = inputData_tdata[435 : 432];
  assign t_int4Data_109 = inputData_tdata[439 : 436];
  assign t_int4Data_110 = inputData_tdata[443 : 440];
  assign t_int4Data_111 = inputData_tdata[447 : 444];
  assign t_int4Data_112 = inputData_tdata[451 : 448];
  assign t_int4Data_113 = inputData_tdata[455 : 452];
  assign t_int4Data_114 = inputData_tdata[459 : 456];
  assign t_int4Data_115 = inputData_tdata[463 : 460];
  assign t_int4Data_116 = inputData_tdata[467 : 464];
  assign t_int4Data_117 = inputData_tdata[471 : 468];
  assign t_int4Data_118 = inputData_tdata[475 : 472];
  assign t_int4Data_119 = inputData_tdata[479 : 476];
  assign t_int4Data_120 = inputData_tdata[483 : 480];
  assign t_int4Data_121 = inputData_tdata[487 : 484];
  assign t_int4Data_122 = inputData_tdata[491 : 488];
  assign t_int4Data_123 = inputData_tdata[495 : 492];
  assign t_int4Data_124 = inputData_tdata[499 : 496];
  assign t_int4Data_125 = inputData_tdata[503 : 500];
  assign t_int4Data_126 = inputData_tdata[507 : 504];
  assign t_int4Data_127 = inputData_tdata[511 : 508];
  assign t_dSub_0 = ($signed(t_dSub_0_1) - $signed(zero));
  assign t_dSub_0_1 = {1'b0,subDiv_0};
  assign t_dSub_1 = ($signed(t_dSub_1_1) - $signed(zero));
  assign t_dSub_1_1 = {1'b0,subDiv_1};
  assign t_dSub_2 = ($signed(t_dSub_2_1) - $signed(zero));
  assign t_dSub_2_1 = {1'b0,subDiv_2};
  assign t_dSub_3 = ($signed(t_dSub_3_1) - $signed(zero));
  assign t_dSub_3_1 = {1'b0,subDiv_3};
  assign t_dSub_4 = ($signed(t_dSub_4_1) - $signed(zero));
  assign t_dSub_4_1 = {1'b0,subDiv_4};
  assign t_dSub_5 = ($signed(t_dSub_5_1) - $signed(zero));
  assign t_dSub_5_1 = {1'b0,subDiv_5};
  assign t_dSub_6 = ($signed(t_dSub_6_1) - $signed(zero));
  assign t_dSub_6_1 = {1'b0,subDiv_6};
  assign t_dSub_7 = ($signed(t_dSub_7_1) - $signed(zero));
  assign t_dSub_7_1 = {1'b0,subDiv_7};
  assign t_dSub_8 = ($signed(t_dSub_8_1) - $signed(zero));
  assign t_dSub_8_1 = {1'b0,subDiv_8};
  assign t_dSub_9 = ($signed(t_dSub_9_1) - $signed(zero));
  assign t_dSub_9_1 = {1'b0,subDiv_9};
  assign t_dSub_10 = ($signed(t_dSub_10_1) - $signed(zero));
  assign t_dSub_10_1 = {1'b0,subDiv_10};
  assign t_dSub_11 = ($signed(t_dSub_11_1) - $signed(zero));
  assign t_dSub_11_1 = {1'b0,subDiv_11};
  assign t_dSub_12 = ($signed(t_dSub_12_1) - $signed(zero));
  assign t_dSub_12_1 = {1'b0,subDiv_12};
  assign t_dSub_13 = ($signed(t_dSub_13_1) - $signed(zero));
  assign t_dSub_13_1 = {1'b0,subDiv_13};
  assign t_dSub_14 = ($signed(t_dSub_14_1) - $signed(zero));
  assign t_dSub_14_1 = {1'b0,subDiv_14};
  assign t_dSub_15 = ($signed(t_dSub_15_1) - $signed(zero));
  assign t_dSub_15_1 = {1'b0,subDiv_15};
  assign t_dSub_16 = ($signed(t_dSub_16_1) - $signed(zero));
  assign t_dSub_16_1 = {1'b0,subDiv_16};
  assign t_dSub_17 = ($signed(t_dSub_17_1) - $signed(zero));
  assign t_dSub_17_1 = {1'b0,subDiv_17};
  assign t_dSub_18 = ($signed(t_dSub_18_1) - $signed(zero));
  assign t_dSub_18_1 = {1'b0,subDiv_18};
  assign t_dSub_19 = ($signed(t_dSub_19_1) - $signed(zero));
  assign t_dSub_19_1 = {1'b0,subDiv_19};
  assign t_dSub_20 = ($signed(t_dSub_20_1) - $signed(zero));
  assign t_dSub_20_1 = {1'b0,subDiv_20};
  assign t_dSub_21 = ($signed(t_dSub_21_1) - $signed(zero));
  assign t_dSub_21_1 = {1'b0,subDiv_21};
  assign t_dSub_22 = ($signed(t_dSub_22_1) - $signed(zero));
  assign t_dSub_22_1 = {1'b0,subDiv_22};
  assign t_dSub_23 = ($signed(t_dSub_23_1) - $signed(zero));
  assign t_dSub_23_1 = {1'b0,subDiv_23};
  assign t_dSub_24 = ($signed(t_dSub_24_1) - $signed(zero));
  assign t_dSub_24_1 = {1'b0,subDiv_24};
  assign t_dSub_25 = ($signed(t_dSub_25_1) - $signed(zero));
  assign t_dSub_25_1 = {1'b0,subDiv_25};
  assign t_dSub_26 = ($signed(t_dSub_26_1) - $signed(zero));
  assign t_dSub_26_1 = {1'b0,subDiv_26};
  assign t_dSub_27 = ($signed(t_dSub_27_1) - $signed(zero));
  assign t_dSub_27_1 = {1'b0,subDiv_27};
  assign t_dSub_28 = ($signed(t_dSub_28_1) - $signed(zero));
  assign t_dSub_28_1 = {1'b0,subDiv_28};
  assign t_dSub_29 = ($signed(t_dSub_29_1) - $signed(zero));
  assign t_dSub_29_1 = {1'b0,subDiv_29};
  assign t_dSub_30 = ($signed(t_dSub_30_1) - $signed(zero));
  assign t_dSub_30_1 = {1'b0,subDiv_30};
  assign t_dSub_31 = ($signed(t_dSub_31_1) - $signed(zero));
  assign t_dSub_31_1 = {1'b0,subDiv_31};
  assign t_dSub_32 = ($signed(t_dSub_32_1) - $signed(zero));
  assign t_dSub_32_1 = {1'b0,subDiv_32};
  assign t_dSub_33 = ($signed(t_dSub_33_1) - $signed(zero));
  assign t_dSub_33_1 = {1'b0,subDiv_33};
  assign t_dSub_34 = ($signed(t_dSub_34_1) - $signed(zero));
  assign t_dSub_34_1 = {1'b0,subDiv_34};
  assign t_dSub_35 = ($signed(t_dSub_35_1) - $signed(zero));
  assign t_dSub_35_1 = {1'b0,subDiv_35};
  assign t_dSub_36 = ($signed(t_dSub_36_1) - $signed(zero));
  assign t_dSub_36_1 = {1'b0,subDiv_36};
  assign t_dSub_37 = ($signed(t_dSub_37_1) - $signed(zero));
  assign t_dSub_37_1 = {1'b0,subDiv_37};
  assign t_dSub_38 = ($signed(t_dSub_38_1) - $signed(zero));
  assign t_dSub_38_1 = {1'b0,subDiv_38};
  assign t_dSub_39 = ($signed(t_dSub_39_1) - $signed(zero));
  assign t_dSub_39_1 = {1'b0,subDiv_39};
  assign t_dSub_40 = ($signed(t_dSub_40_1) - $signed(zero));
  assign t_dSub_40_1 = {1'b0,subDiv_40};
  assign t_dSub_41 = ($signed(t_dSub_41_1) - $signed(zero));
  assign t_dSub_41_1 = {1'b0,subDiv_41};
  assign t_dSub_42 = ($signed(t_dSub_42_1) - $signed(zero));
  assign t_dSub_42_1 = {1'b0,subDiv_42};
  assign t_dSub_43 = ($signed(t_dSub_43_1) - $signed(zero));
  assign t_dSub_43_1 = {1'b0,subDiv_43};
  assign t_dSub_44 = ($signed(t_dSub_44_1) - $signed(zero));
  assign t_dSub_44_1 = {1'b0,subDiv_44};
  assign t_dSub_45 = ($signed(t_dSub_45_1) - $signed(zero));
  assign t_dSub_45_1 = {1'b0,subDiv_45};
  assign t_dSub_46 = ($signed(t_dSub_46_1) - $signed(zero));
  assign t_dSub_46_1 = {1'b0,subDiv_46};
  assign t_dSub_47 = ($signed(t_dSub_47_1) - $signed(zero));
  assign t_dSub_47_1 = {1'b0,subDiv_47};
  assign t_dSub_48 = ($signed(t_dSub_48_1) - $signed(zero));
  assign t_dSub_48_1 = {1'b0,subDiv_48};
  assign t_dSub_49 = ($signed(t_dSub_49_1) - $signed(zero));
  assign t_dSub_49_1 = {1'b0,subDiv_49};
  assign t_dSub_50 = ($signed(t_dSub_50_1) - $signed(zero));
  assign t_dSub_50_1 = {1'b0,subDiv_50};
  assign t_dSub_51 = ($signed(t_dSub_51_1) - $signed(zero));
  assign t_dSub_51_1 = {1'b0,subDiv_51};
  assign t_dSub_52 = ($signed(t_dSub_52_1) - $signed(zero));
  assign t_dSub_52_1 = {1'b0,subDiv_52};
  assign t_dSub_53 = ($signed(t_dSub_53_1) - $signed(zero));
  assign t_dSub_53_1 = {1'b0,subDiv_53};
  assign t_dSub_54 = ($signed(t_dSub_54_1) - $signed(zero));
  assign t_dSub_54_1 = {1'b0,subDiv_54};
  assign t_dSub_55 = ($signed(t_dSub_55_1) - $signed(zero));
  assign t_dSub_55_1 = {1'b0,subDiv_55};
  assign t_dSub_56 = ($signed(t_dSub_56_1) - $signed(zero));
  assign t_dSub_56_1 = {1'b0,subDiv_56};
  assign t_dSub_57 = ($signed(t_dSub_57_1) - $signed(zero));
  assign t_dSub_57_1 = {1'b0,subDiv_57};
  assign t_dSub_58 = ($signed(t_dSub_58_1) - $signed(zero));
  assign t_dSub_58_1 = {1'b0,subDiv_58};
  assign t_dSub_59 = ($signed(t_dSub_59_1) - $signed(zero));
  assign t_dSub_59_1 = {1'b0,subDiv_59};
  assign t_dSub_60 = ($signed(t_dSub_60_1) - $signed(zero));
  assign t_dSub_60_1 = {1'b0,subDiv_60};
  assign t_dSub_61 = ($signed(t_dSub_61_1) - $signed(zero));
  assign t_dSub_61_1 = {1'b0,subDiv_61};
  assign t_dSub_62 = ($signed(t_dSub_62_1) - $signed(zero));
  assign t_dSub_62_1 = {1'b0,subDiv_62};
  assign t_dSub_63 = ($signed(t_dSub_63_1) - $signed(zero));
  assign t_dSub_63_1 = {1'b0,subDiv_63};
  assign t_dSub_64 = ($signed(t_dSub_64_1) - $signed(zero));
  assign t_dSub_64_1 = {1'b0,subDiv_64};
  assign t_dSub_65 = ($signed(t_dSub_65_1) - $signed(zero));
  assign t_dSub_65_1 = {1'b0,subDiv_65};
  assign t_dSub_66 = ($signed(t_dSub_66_1) - $signed(zero));
  assign t_dSub_66_1 = {1'b0,subDiv_66};
  assign t_dSub_67 = ($signed(t_dSub_67_1) - $signed(zero));
  assign t_dSub_67_1 = {1'b0,subDiv_67};
  assign t_dSub_68 = ($signed(t_dSub_68_1) - $signed(zero));
  assign t_dSub_68_1 = {1'b0,subDiv_68};
  assign t_dSub_69 = ($signed(t_dSub_69_1) - $signed(zero));
  assign t_dSub_69_1 = {1'b0,subDiv_69};
  assign t_dSub_70 = ($signed(t_dSub_70_1) - $signed(zero));
  assign t_dSub_70_1 = {1'b0,subDiv_70};
  assign t_dSub_71 = ($signed(t_dSub_71_1) - $signed(zero));
  assign t_dSub_71_1 = {1'b0,subDiv_71};
  assign t_dSub_72 = ($signed(t_dSub_72_1) - $signed(zero));
  assign t_dSub_72_1 = {1'b0,subDiv_72};
  assign t_dSub_73 = ($signed(t_dSub_73_1) - $signed(zero));
  assign t_dSub_73_1 = {1'b0,subDiv_73};
  assign t_dSub_74 = ($signed(t_dSub_74_1) - $signed(zero));
  assign t_dSub_74_1 = {1'b0,subDiv_74};
  assign t_dSub_75 = ($signed(t_dSub_75_1) - $signed(zero));
  assign t_dSub_75_1 = {1'b0,subDiv_75};
  assign t_dSub_76 = ($signed(t_dSub_76_1) - $signed(zero));
  assign t_dSub_76_1 = {1'b0,subDiv_76};
  assign t_dSub_77 = ($signed(t_dSub_77_1) - $signed(zero));
  assign t_dSub_77_1 = {1'b0,subDiv_77};
  assign t_dSub_78 = ($signed(t_dSub_78_1) - $signed(zero));
  assign t_dSub_78_1 = {1'b0,subDiv_78};
  assign t_dSub_79 = ($signed(t_dSub_79_1) - $signed(zero));
  assign t_dSub_79_1 = {1'b0,subDiv_79};
  assign t_dSub_80 = ($signed(t_dSub_80_1) - $signed(zero));
  assign t_dSub_80_1 = {1'b0,subDiv_80};
  assign t_dSub_81 = ($signed(t_dSub_81_1) - $signed(zero));
  assign t_dSub_81_1 = {1'b0,subDiv_81};
  assign t_dSub_82 = ($signed(t_dSub_82_1) - $signed(zero));
  assign t_dSub_82_1 = {1'b0,subDiv_82};
  assign t_dSub_83 = ($signed(t_dSub_83_1) - $signed(zero));
  assign t_dSub_83_1 = {1'b0,subDiv_83};
  assign t_dSub_84 = ($signed(t_dSub_84_1) - $signed(zero));
  assign t_dSub_84_1 = {1'b0,subDiv_84};
  assign t_dSub_85 = ($signed(t_dSub_85_1) - $signed(zero));
  assign t_dSub_85_1 = {1'b0,subDiv_85};
  assign t_dSub_86 = ($signed(t_dSub_86_1) - $signed(zero));
  assign t_dSub_86_1 = {1'b0,subDiv_86};
  assign t_dSub_87 = ($signed(t_dSub_87_1) - $signed(zero));
  assign t_dSub_87_1 = {1'b0,subDiv_87};
  assign t_dSub_88 = ($signed(t_dSub_88_1) - $signed(zero));
  assign t_dSub_88_1 = {1'b0,subDiv_88};
  assign t_dSub_89 = ($signed(t_dSub_89_1) - $signed(zero));
  assign t_dSub_89_1 = {1'b0,subDiv_89};
  assign t_dSub_90 = ($signed(t_dSub_90_1) - $signed(zero));
  assign t_dSub_90_1 = {1'b0,subDiv_90};
  assign t_dSub_91 = ($signed(t_dSub_91_1) - $signed(zero));
  assign t_dSub_91_1 = {1'b0,subDiv_91};
  assign t_dSub_92 = ($signed(t_dSub_92_1) - $signed(zero));
  assign t_dSub_92_1 = {1'b0,subDiv_92};
  assign t_dSub_93 = ($signed(t_dSub_93_1) - $signed(zero));
  assign t_dSub_93_1 = {1'b0,subDiv_93};
  assign t_dSub_94 = ($signed(t_dSub_94_1) - $signed(zero));
  assign t_dSub_94_1 = {1'b0,subDiv_94};
  assign t_dSub_95 = ($signed(t_dSub_95_1) - $signed(zero));
  assign t_dSub_95_1 = {1'b0,subDiv_95};
  assign t_dSub_96 = ($signed(t_dSub_96_1) - $signed(zero));
  assign t_dSub_96_1 = {1'b0,subDiv_96};
  assign t_dSub_97 = ($signed(t_dSub_97_1) - $signed(zero));
  assign t_dSub_97_1 = {1'b0,subDiv_97};
  assign t_dSub_98 = ($signed(t_dSub_98_1) - $signed(zero));
  assign t_dSub_98_1 = {1'b0,subDiv_98};
  assign t_dSub_99 = ($signed(t_dSub_99_1) - $signed(zero));
  assign t_dSub_99_1 = {1'b0,subDiv_99};
  assign t_dSub_100 = ($signed(t_dSub_100_1) - $signed(zero));
  assign t_dSub_100_1 = {1'b0,subDiv_100};
  assign t_dSub_101 = ($signed(t_dSub_101_1) - $signed(zero));
  assign t_dSub_101_1 = {1'b0,subDiv_101};
  assign t_dSub_102 = ($signed(t_dSub_102_1) - $signed(zero));
  assign t_dSub_102_1 = {1'b0,subDiv_102};
  assign t_dSub_103 = ($signed(t_dSub_103_1) - $signed(zero));
  assign t_dSub_103_1 = {1'b0,subDiv_103};
  assign t_dSub_104 = ($signed(t_dSub_104_1) - $signed(zero));
  assign t_dSub_104_1 = {1'b0,subDiv_104};
  assign t_dSub_105 = ($signed(t_dSub_105_1) - $signed(zero));
  assign t_dSub_105_1 = {1'b0,subDiv_105};
  assign t_dSub_106 = ($signed(t_dSub_106_1) - $signed(zero));
  assign t_dSub_106_1 = {1'b0,subDiv_106};
  assign t_dSub_107 = ($signed(t_dSub_107_1) - $signed(zero));
  assign t_dSub_107_1 = {1'b0,subDiv_107};
  assign t_dSub_108 = ($signed(t_dSub_108_1) - $signed(zero));
  assign t_dSub_108_1 = {1'b0,subDiv_108};
  assign t_dSub_109 = ($signed(t_dSub_109_1) - $signed(zero));
  assign t_dSub_109_1 = {1'b0,subDiv_109};
  assign t_dSub_110 = ($signed(t_dSub_110_1) - $signed(zero));
  assign t_dSub_110_1 = {1'b0,subDiv_110};
  assign t_dSub_111 = ($signed(t_dSub_111_1) - $signed(zero));
  assign t_dSub_111_1 = {1'b0,subDiv_111};
  assign t_dSub_112 = ($signed(t_dSub_112_1) - $signed(zero));
  assign t_dSub_112_1 = {1'b0,subDiv_112};
  assign t_dSub_113 = ($signed(t_dSub_113_1) - $signed(zero));
  assign t_dSub_113_1 = {1'b0,subDiv_113};
  assign t_dSub_114 = ($signed(t_dSub_114_1) - $signed(zero));
  assign t_dSub_114_1 = {1'b0,subDiv_114};
  assign t_dSub_115 = ($signed(t_dSub_115_1) - $signed(zero));
  assign t_dSub_115_1 = {1'b0,subDiv_115};
  assign t_dSub_116 = ($signed(t_dSub_116_1) - $signed(zero));
  assign t_dSub_116_1 = {1'b0,subDiv_116};
  assign t_dSub_117 = ($signed(t_dSub_117_1) - $signed(zero));
  assign t_dSub_117_1 = {1'b0,subDiv_117};
  assign t_dSub_118 = ($signed(t_dSub_118_1) - $signed(zero));
  assign t_dSub_118_1 = {1'b0,subDiv_118};
  assign t_dSub_119 = ($signed(t_dSub_119_1) - $signed(zero));
  assign t_dSub_119_1 = {1'b0,subDiv_119};
  assign t_dSub_120 = ($signed(t_dSub_120_1) - $signed(zero));
  assign t_dSub_120_1 = {1'b0,subDiv_120};
  assign t_dSub_121 = ($signed(t_dSub_121_1) - $signed(zero));
  assign t_dSub_121_1 = {1'b0,subDiv_121};
  assign t_dSub_122 = ($signed(t_dSub_122_1) - $signed(zero));
  assign t_dSub_122_1 = {1'b0,subDiv_122};
  assign t_dSub_123 = ($signed(t_dSub_123_1) - $signed(zero));
  assign t_dSub_123_1 = {1'b0,subDiv_123};
  assign t_dSub_124 = ($signed(t_dSub_124_1) - $signed(zero));
  assign t_dSub_124_1 = {1'b0,subDiv_124};
  assign t_dSub_125 = ($signed(t_dSub_125_1) - $signed(zero));
  assign t_dSub_125_1 = {1'b0,subDiv_125};
  assign t_dSub_126 = ($signed(t_dSub_126_1) - $signed(zero));
  assign t_dSub_126_1 = {1'b0,subDiv_126};
  assign t_dSub_127 = ($signed(t_dSub_127_1) - $signed(zero));
  assign t_dSub_127_1 = {1'b0,subDiv_127};
  assign t_t_output_tdata_128 = t_output_tdata[15 : 10];
  assign t_t_output_tdata_129 = t_output_tdata_1[15 : 10];
  assign t_t_output_tdata_130 = t_output_tdata_2[15 : 10];
  assign t_t_output_tdata_131 = t_output_tdata_3[15 : 10];
  assign t_t_output_tdata_132 = t_output_tdata_4[15 : 10];
  assign t_t_output_tdata_133 = t_output_tdata_5[15 : 10];
  assign t_t_output_tdata_134 = t_output_tdata_6[15 : 10];
  assign t_t_output_tdata_135 = t_output_tdata_7[15 : 10];
  assign t_t_output_tdata_136 = t_output_tdata_8[15 : 10];
  assign t_t_output_tdata_137 = t_output_tdata_9[15 : 10];
  assign t_t_output_tdata_138 = t_output_tdata_10[15 : 10];
  assign t_t_output_tdata_139 = t_output_tdata_11[15 : 10];
  assign t_t_output_tdata_140 = t_output_tdata_12[15 : 10];
  assign t_t_output_tdata_141 = t_output_tdata_13[15 : 10];
  assign t_t_output_tdata_142 = t_output_tdata_14[15 : 10];
  assign t_t_output_tdata_143 = t_output_tdata_15[15 : 10];
  assign t_t_output_tdata_144 = t_output_tdata_16[15 : 10];
  assign t_t_output_tdata_145 = t_output_tdata_17[15 : 10];
  assign t_t_output_tdata_146 = t_output_tdata_18[15 : 10];
  assign t_t_output_tdata_147 = t_output_tdata_19[15 : 10];
  assign t_t_output_tdata_148 = t_output_tdata_20[15 : 10];
  assign t_t_output_tdata_149 = t_output_tdata_21[15 : 10];
  assign t_t_output_tdata_150 = t_output_tdata_22[15 : 10];
  assign t_t_output_tdata_151 = t_output_tdata_23[15 : 10];
  assign t_t_output_tdata_152 = t_output_tdata_24[15 : 10];
  assign t_t_output_tdata_153 = t_output_tdata_25[15 : 10];
  assign t_t_output_tdata_154 = t_output_tdata_26[15 : 10];
  assign t_t_output_tdata_155 = t_output_tdata_27[15 : 10];
  assign t_t_output_tdata_156 = t_output_tdata_28[15 : 10];
  assign t_t_output_tdata_157 = t_output_tdata_29[15 : 10];
  assign t_t_output_tdata_158 = t_output_tdata_30[15 : 10];
  assign t_t_output_tdata_159 = t_output_tdata_31[15 : 10];
  assign t_t_output_tdata_160 = t_output_tdata_32[15 : 10];
  assign t_t_output_tdata_161 = t_output_tdata_33[15 : 10];
  assign t_t_output_tdata_162 = t_output_tdata_34[15 : 10];
  assign t_t_output_tdata_163 = t_output_tdata_35[15 : 10];
  assign t_t_output_tdata_164 = t_output_tdata_36[15 : 10];
  assign t_t_output_tdata_165 = t_output_tdata_37[15 : 10];
  assign t_t_output_tdata_166 = t_output_tdata_38[15 : 10];
  assign t_t_output_tdata_167 = t_output_tdata_39[15 : 10];
  assign t_t_output_tdata_168 = t_output_tdata_40[15 : 10];
  assign t_t_output_tdata_169 = t_output_tdata_41[15 : 10];
  assign t_t_output_tdata_170 = t_output_tdata_42[15 : 10];
  assign t_t_output_tdata_171 = t_output_tdata_43[15 : 10];
  assign t_t_output_tdata_172 = t_output_tdata_44[15 : 10];
  assign t_t_output_tdata_173 = t_output_tdata_45[15 : 10];
  assign t_t_output_tdata_174 = t_output_tdata_46[15 : 10];
  assign t_t_output_tdata_175 = t_output_tdata_47[15 : 10];
  assign t_t_output_tdata_176 = t_output_tdata_48[15 : 10];
  assign t_t_output_tdata_177 = t_output_tdata_49[15 : 10];
  assign t_t_output_tdata_178 = t_output_tdata_50[15 : 10];
  assign t_t_output_tdata_179 = t_output_tdata_51[15 : 10];
  assign t_t_output_tdata_180 = t_output_tdata_52[15 : 10];
  assign t_t_output_tdata_181 = t_output_tdata_53[15 : 10];
  assign t_t_output_tdata_182 = t_output_tdata_54[15 : 10];
  assign t_t_output_tdata_183 = t_output_tdata_55[15 : 10];
  assign t_t_output_tdata_184 = t_output_tdata_56[15 : 10];
  assign t_t_output_tdata_185 = t_output_tdata_57[15 : 10];
  assign t_t_output_tdata_186 = t_output_tdata_58[15 : 10];
  assign t_t_output_tdata_187 = t_output_tdata_59[15 : 10];
  assign t_t_output_tdata_188 = t_output_tdata_60[15 : 10];
  assign t_t_output_tdata_189 = t_output_tdata_61[15 : 10];
  assign t_t_output_tdata_190 = t_output_tdata_62[15 : 10];
  assign t_t_output_tdata_191 = t_output_tdata_63[15 : 10];
  assign t_t_output_tdata_192 = t_output_tdata_64[15 : 10];
  assign t_t_output_tdata_193 = t_output_tdata_65[15 : 10];
  assign t_t_output_tdata_194 = t_output_tdata_66[15 : 10];
  assign t_t_output_tdata_195 = t_output_tdata_67[15 : 10];
  assign t_t_output_tdata_196 = t_output_tdata_68[15 : 10];
  assign t_t_output_tdata_197 = t_output_tdata_69[15 : 10];
  assign t_t_output_tdata_198 = t_output_tdata_70[15 : 10];
  assign t_t_output_tdata_199 = t_output_tdata_71[15 : 10];
  assign t_t_output_tdata_200 = t_output_tdata_72[15 : 10];
  assign t_t_output_tdata_201 = t_output_tdata_73[15 : 10];
  assign t_t_output_tdata_202 = t_output_tdata_74[15 : 10];
  assign t_t_output_tdata_203 = t_output_tdata_75[15 : 10];
  assign t_t_output_tdata_204 = t_output_tdata_76[15 : 10];
  assign t_t_output_tdata_205 = t_output_tdata_77[15 : 10];
  assign t_t_output_tdata_206 = t_output_tdata_78[15 : 10];
  assign t_t_output_tdata_207 = t_output_tdata_79[15 : 10];
  assign t_t_output_tdata_208 = t_output_tdata_80[15 : 10];
  assign t_t_output_tdata_209 = t_output_tdata_81[15 : 10];
  assign t_t_output_tdata_210 = t_output_tdata_82[15 : 10];
  assign t_t_output_tdata_211 = t_output_tdata_83[15 : 10];
  assign t_t_output_tdata_212 = t_output_tdata_84[15 : 10];
  assign t_t_output_tdata_213 = t_output_tdata_85[15 : 10];
  assign t_t_output_tdata_214 = t_output_tdata_86[15 : 10];
  assign t_t_output_tdata_215 = t_output_tdata_87[15 : 10];
  assign t_t_output_tdata_216 = t_output_tdata_88[15 : 10];
  assign t_t_output_tdata_217 = t_output_tdata_89[15 : 10];
  assign t_t_output_tdata_218 = t_output_tdata_90[15 : 10];
  assign t_t_output_tdata_219 = t_output_tdata_91[15 : 10];
  assign t_t_output_tdata_220 = t_output_tdata_92[15 : 10];
  assign t_t_output_tdata_221 = t_output_tdata_93[15 : 10];
  assign t_t_output_tdata_222 = t_output_tdata_94[15 : 10];
  assign t_t_output_tdata_223 = t_output_tdata_95[15 : 10];
  assign t_t_output_tdata_224 = t_output_tdata_96[15 : 10];
  assign t_t_output_tdata_225 = t_output_tdata_97[15 : 10];
  assign t_t_output_tdata_226 = t_output_tdata_98[15 : 10];
  assign t_t_output_tdata_227 = t_output_tdata_99[15 : 10];
  assign t_t_output_tdata_228 = t_output_tdata_100[15 : 10];
  assign t_t_output_tdata_229 = t_output_tdata_101[15 : 10];
  assign t_t_output_tdata_230 = t_output_tdata_102[15 : 10];
  assign t_t_output_tdata_231 = t_output_tdata_103[15 : 10];
  assign t_t_output_tdata_232 = t_output_tdata_104[15 : 10];
  assign t_t_output_tdata_233 = t_output_tdata_105[15 : 10];
  assign t_t_output_tdata_234 = t_output_tdata_106[15 : 10];
  assign t_t_output_tdata_235 = t_output_tdata_107[15 : 10];
  assign t_t_output_tdata_236 = t_output_tdata_108[15 : 10];
  assign t_t_output_tdata_237 = t_output_tdata_109[15 : 10];
  assign t_t_output_tdata_238 = t_output_tdata_110[15 : 10];
  assign t_t_output_tdata_239 = t_output_tdata_111[15 : 10];
  assign t_t_output_tdata_240 = t_output_tdata_112[15 : 10];
  assign t_t_output_tdata_241 = t_output_tdata_113[15 : 10];
  assign t_t_output_tdata_242 = t_output_tdata_114[15 : 10];
  assign t_t_output_tdata_243 = t_output_tdata_115[15 : 10];
  assign t_t_output_tdata_244 = t_output_tdata_116[15 : 10];
  assign t_t_output_tdata_245 = t_output_tdata_117[15 : 10];
  assign t_t_output_tdata_246 = t_output_tdata_118[15 : 10];
  assign t_t_output_tdata_247 = t_output_tdata_119[15 : 10];
  assign t_t_output_tdata_248 = t_output_tdata_120[15 : 10];
  assign t_t_output_tdata_249 = t_output_tdata_121[15 : 10];
  assign t_t_output_tdata_250 = t_output_tdata_122[15 : 10];
  assign t_t_output_tdata_251 = t_output_tdata_123[15 : 10];
  assign t_t_output_tdata_252 = t_output_tdata_124[15 : 10];
  assign t_t_output_tdata_253 = t_output_tdata_125[15 : 10];
  assign t_t_output_tdata_254 = t_output_tdata_126[15 : 10];
  assign t_t_output_tdata_255 = t_output_tdata_127[15 : 10];
  assign t_output_tdata_257 = (t_output_tdata_255 - 5'h02);
  assign t_output_tdata_261 = (t_output_tdata_254 - 5'h02);
  assign t_output_tdata_265 = (t_output_tdata_253 - 5'h02);
  assign t_output_tdata_268 = (t_output_tdata_252 - 5'h02);
  assign t_output_tdata_274 = (t_output_tdata_251 - 5'h02);
  assign t_output_tdata_279 = (t_output_tdata_250 - 5'h02);
  assign t_output_tdata_282 = (t_output_tdata_249 - 5'h02);
  assign t_output_tdata_288 = (t_output_tdata_248 - 5'h02);
  assign t_output_tdata_293 = (t_output_tdata_247 - 5'h02);
  assign t_output_tdata_296 = (t_output_tdata_246 - 5'h02);
  assign t_output_tdata_302 = (t_output_tdata_245 - 5'h02);
  assign t_output_tdata_307 = (t_output_tdata_244 - 5'h02);
  assign t_output_tdata_310 = (t_output_tdata_243 - 5'h02);
  assign t_output_tdata_316 = (t_output_tdata_242 - 5'h02);
  assign t_output_tdata_321 = (t_output_tdata_241 - 5'h02);
  assign t_output_tdata_324 = (t_output_tdata_240 - 5'h02);
  assign t_output_tdata_330 = (t_output_tdata_239 - 5'h02);
  assign t_output_tdata_335 = (t_output_tdata_238 - 5'h02);
  assign t_output_tdata_338 = (t_output_tdata_237 - 5'h02);
  assign t_output_tdata_344 = (t_output_tdata_236 - 5'h02);
  assign t_output_tdata_349 = (t_output_tdata_235 - 5'h02);
  assign t_output_tdata_352 = (t_output_tdata_234 - 5'h02);
  assign t_output_tdata_358 = (t_output_tdata_233 - 5'h02);
  assign t_output_tdata_363 = (t_output_tdata_232 - 5'h02);
  assign t_output_tdata_366 = (t_output_tdata_231 - 5'h02);
  assign t_output_tdata_372 = (t_output_tdata_230 - 5'h02);
  assign t_output_tdata_377 = (t_output_tdata_229 - 5'h02);
  assign t_output_tdata_380 = (t_output_tdata_228 - 5'h02);
  assign t_output_tdata_386 = (t_output_tdata_227 - 5'h02);
  assign t_output_tdata_391 = (t_output_tdata_226 - 5'h02);
  assign t_output_tdata_394 = (t_output_tdata_225 - 5'h02);
  assign t_output_tdata_400 = (t_output_tdata_224 - 5'h02);
  assign t_output_tdata_405 = (t_output_tdata_223 - 5'h02);
  assign t_output_tdata_408 = (t_output_tdata_222 - 5'h02);
  assign t_output_tdata_414 = (t_output_tdata_221 - 5'h02);
  assign t_output_tdata_419 = (t_output_tdata_220 - 5'h02);
  assign t_output_tdata_422 = (t_output_tdata_219 - 5'h02);
  assign t_output_tdata_428 = (t_output_tdata_218 - 5'h02);
  assign t_output_tdata_433 = (t_output_tdata_217 - 5'h02);
  assign t_output_tdata_436 = (t_output_tdata_216 - 5'h02);
  assign t_output_tdata_442 = (t_output_tdata_215 - 5'h02);
  assign t_output_tdata_447 = (t_output_tdata_214 - 5'h02);
  assign t_output_tdata_450 = (t_output_tdata_213 - 5'h02);
  assign t_output_tdata_456 = (t_output_tdata_212 - 5'h02);
  assign t_output_tdata_461 = (t_output_tdata_211 - 5'h02);
  assign t_output_tdata_464 = (t_output_tdata_210 - 5'h02);
  assign t_output_tdata_470 = (t_output_tdata_209 - 5'h02);
  assign t_output_tdata_475 = (t_output_tdata_208 - 5'h02);
  assign t_output_tdata_478 = (t_output_tdata_207 - 5'h02);
  assign t_output_tdata_484 = (t_output_tdata_206 - 5'h02);
  assign t_output_tdata_489 = (t_output_tdata_205 - 5'h02);
  assign t_output_tdata_492 = (t_output_tdata_204 - 5'h02);
  assign t_output_tdata_498 = (t_output_tdata_203 - 5'h02);
  assign t_output_tdata_503 = (t_output_tdata_202 - 5'h02);
  assign t_output_tdata_506 = (t_output_tdata_201 - 5'h02);
  assign t_output_tdata_512 = (t_output_tdata_200 - 5'h02);
  assign t_output_tdata_517 = (t_output_tdata_199 - 5'h02);
  assign t_output_tdata_520 = (t_output_tdata_198 - 5'h02);
  assign t_output_tdata_526 = (t_output_tdata_197 - 5'h02);
  assign t_output_tdata_531 = (t_output_tdata_196 - 5'h02);
  assign t_output_tdata_534 = (t_output_tdata_195 - 5'h02);
  assign t_output_tdata_540 = (t_output_tdata_194 - 5'h02);
  assign t_output_tdata_545 = (t_output_tdata_193 - 5'h02);
  assign t_output_tdata_548 = (t_output_tdata_192 - 5'h02);
  assign t_output_tdata_554 = (t_output_tdata_191 - 5'h02);
  assign t_output_tdata_559 = (t_output_tdata_190 - 5'h02);
  assign t_output_tdata_562 = (t_output_tdata_189 - 5'h02);
  assign t_output_tdata_568 = (t_output_tdata_188 - 5'h02);
  assign t_output_tdata_573 = (t_output_tdata_187 - 5'h02);
  assign t_output_tdata_576 = (t_output_tdata_186 - 5'h02);
  assign t_output_tdata_582 = (t_output_tdata_185 - 5'h02);
  assign t_output_tdata_587 = (t_output_tdata_184 - 5'h02);
  assign t_output_tdata_590 = (t_output_tdata_183 - 5'h02);
  assign t_output_tdata_596 = (t_output_tdata_182 - 5'h02);
  assign t_output_tdata_601 = (t_output_tdata_181 - 5'h02);
  assign t_output_tdata_604 = (t_output_tdata_180 - 5'h02);
  assign t_output_tdata_610 = (t_output_tdata_179 - 5'h02);
  assign t_output_tdata_615 = (t_output_tdata_178 - 5'h02);
  assign t_output_tdata_618 = (t_output_tdata_177 - 5'h02);
  assign t_output_tdata_624 = (t_output_tdata_176 - 5'h02);
  assign t_output_tdata_629 = (t_output_tdata_175 - 5'h02);
  assign t_output_tdata_632 = (t_output_tdata_174 - 5'h02);
  assign t_output_tdata_638 = (t_output_tdata_173 - 5'h02);
  assign t_output_tdata_643 = (t_output_tdata_172 - 5'h02);
  assign t_output_tdata_646 = (t_output_tdata_171 - 5'h02);
  assign t_output_tdata_652 = (t_output_tdata_170 - 5'h02);
  assign t_output_tdata_657 = (t_output_tdata_169 - 5'h02);
  assign t_output_tdata_660 = (t_output_tdata_168 - 5'h02);
  assign t_output_tdata_666 = (t_output_tdata_167 - 5'h02);
  assign t_output_tdata_671 = (t_output_tdata_166 - 5'h02);
  assign t_output_tdata_674 = (t_output_tdata_165 - 5'h02);
  assign t_output_tdata_680 = (t_output_tdata_164 - 5'h02);
  assign t_output_tdata_685 = (t_output_tdata_163 - 5'h02);
  assign t_output_tdata_688 = (t_output_tdata_162 - 5'h02);
  assign t_output_tdata_694 = (t_output_tdata_161 - 5'h02);
  assign t_output_tdata_699 = (t_output_tdata_160 - 5'h02);
  assign t_output_tdata_702 = (t_output_tdata_159 - 5'h02);
  assign t_output_tdata_708 = (t_output_tdata_158 - 5'h02);
  assign t_output_tdata_713 = (t_output_tdata_157 - 5'h02);
  assign t_output_tdata_716 = (t_output_tdata_156 - 5'h02);
  assign t_output_tdata_722 = (t_output_tdata_155 - 5'h02);
  assign t_output_tdata_727 = (t_output_tdata_154 - 5'h02);
  assign t_output_tdata_730 = (t_output_tdata_153 - 5'h02);
  assign t_output_tdata_736 = (t_output_tdata_152 - 5'h02);
  assign t_output_tdata_741 = (t_output_tdata_151 - 5'h02);
  assign t_output_tdata_744 = (t_output_tdata_150 - 5'h02);
  assign t_output_tdata_750 = (t_output_tdata_149 - 5'h02);
  assign t_output_tdata_755 = (t_output_tdata_148 - 5'h02);
  assign t_output_tdata_758 = (t_output_tdata_147 - 5'h02);
  assign t_output_tdata_764 = (t_output_tdata_146 - 5'h02);
  assign t_output_tdata_769 = (t_output_tdata_145 - 5'h02);
  assign t_output_tdata_772 = (t_output_tdata_144 - 5'h02);
  assign t_output_tdata_778 = (t_output_tdata_143 - 5'h02);
  assign t_output_tdata_783 = (t_output_tdata_142 - 5'h02);
  assign t_output_tdata_786 = (t_output_tdata_141 - 5'h02);
  assign t_output_tdata_792 = (t_output_tdata_140 - 5'h02);
  assign t_output_tdata_797 = (t_output_tdata_139 - 5'h02);
  assign t_output_tdata_800 = (t_output_tdata_138 - 5'h02);
  assign t_output_tdata_806 = (t_output_tdata_137 - 5'h02);
  assign t_output_tdata_811 = (t_output_tdata_136 - 5'h02);
  assign t_output_tdata_814 = (t_output_tdata_135 - 5'h02);
  assign t_output_tdata_820 = (t_output_tdata_134 - 5'h02);
  assign t_output_tdata_825 = (t_output_tdata_133 - 5'h02);
  assign t_output_tdata_828 = (t_output_tdata_132 - 5'h02);
  assign t_output_tdata_834 = (t_output_tdata_131 - 5'h02);
  assign t_output_tdata_838 = (t_output_tdata_130 - 5'h02);
  assign t_output_tdata_841 = (t_output_tdata_129 - 5'h02);
  assign t_output_tdata_845 = (t_output_tdata_128 - 5'h02);
  assign t_wPy = {d_111_from_ip_m_axis_result_tdata,{d_110_from_ip_m_axis_result_tdata,{d_109_from_ip_m_axis_result_tdata,{d_108_from_ip_m_axis_result_tdata,{d_107_from_ip_m_axis_result_tdata,{d_106_from_ip_m_axis_result_tdata,{d_105_from_ip_m_axis_result_tdata,{d_104_from_ip_m_axis_result_tdata,{d_103_from_ip_m_axis_result_tdata,{d_102_from_ip_m_axis_result_tdata,{d_101_from_ip_m_axis_result_tdata,{d_100_from_ip_m_axis_result_tdata,{d_99_from_ip_m_axis_result_tdata,{d_98_from_ip_m_axis_result_tdata,{d_97_from_ip_m_axis_result_tdata,{d_96_from_ip_m_axis_result_tdata,t_wPy_1}}}}}}}}}}}}}}}};
  assign t_wPy_1 = {d_95_from_ip_m_axis_result_tdata,{d_94_from_ip_m_axis_result_tdata,{d_93_from_ip_m_axis_result_tdata,{d_92_from_ip_m_axis_result_tdata,{d_91_from_ip_m_axis_result_tdata,{d_90_from_ip_m_axis_result_tdata,{d_89_from_ip_m_axis_result_tdata,{d_88_from_ip_m_axis_result_tdata,{d_87_from_ip_m_axis_result_tdata,{d_86_from_ip_m_axis_result_tdata,{d_85_from_ip_m_axis_result_tdata,{d_84_from_ip_m_axis_result_tdata,{d_83_from_ip_m_axis_result_tdata,{d_82_from_ip_m_axis_result_tdata,{d_81_from_ip_m_axis_result_tdata,{d_80_from_ip_m_axis_result_tdata,t_wPy_2}}}}}}}}}}}}}}}};
  assign t_wPy_2 = {d_79_from_ip_m_axis_result_tdata,{d_78_from_ip_m_axis_result_tdata,{d_77_from_ip_m_axis_result_tdata,{d_76_from_ip_m_axis_result_tdata,{d_75_from_ip_m_axis_result_tdata,{d_74_from_ip_m_axis_result_tdata,{d_73_from_ip_m_axis_result_tdata,{d_72_from_ip_m_axis_result_tdata,{d_71_from_ip_m_axis_result_tdata,{d_70_from_ip_m_axis_result_tdata,{d_69_from_ip_m_axis_result_tdata,{d_68_from_ip_m_axis_result_tdata,{d_67_from_ip_m_axis_result_tdata,{d_66_from_ip_m_axis_result_tdata,{d_65_from_ip_m_axis_result_tdata,{d_64_from_ip_m_axis_result_tdata,t_wPy_3}}}}}}}}}}}}}}}};
  assign t_wPy_3 = {d_63_from_ip_m_axis_result_tdata,{d_62_from_ip_m_axis_result_tdata,{d_61_from_ip_m_axis_result_tdata,{d_60_from_ip_m_axis_result_tdata,{d_59_from_ip_m_axis_result_tdata,{d_58_from_ip_m_axis_result_tdata,{d_57_from_ip_m_axis_result_tdata,{d_56_from_ip_m_axis_result_tdata,{d_55_from_ip_m_axis_result_tdata,{d_54_from_ip_m_axis_result_tdata,{d_53_from_ip_m_axis_result_tdata,{d_52_from_ip_m_axis_result_tdata,{d_51_from_ip_m_axis_result_tdata,{d_50_from_ip_m_axis_result_tdata,{d_49_from_ip_m_axis_result_tdata,{d_48_from_ip_m_axis_result_tdata,t_wPy_4}}}}}}}}}}}}}}}};
  assign t_wPy_4 = {d_47_from_ip_m_axis_result_tdata,{d_46_from_ip_m_axis_result_tdata,{d_45_from_ip_m_axis_result_tdata,{d_44_from_ip_m_axis_result_tdata,{d_43_from_ip_m_axis_result_tdata,{d_42_from_ip_m_axis_result_tdata,{d_41_from_ip_m_axis_result_tdata,{d_40_from_ip_m_axis_result_tdata,{d_39_from_ip_m_axis_result_tdata,{d_38_from_ip_m_axis_result_tdata,{d_37_from_ip_m_axis_result_tdata,{d_36_from_ip_m_axis_result_tdata,{d_35_from_ip_m_axis_result_tdata,{d_34_from_ip_m_axis_result_tdata,{d_33_from_ip_m_axis_result_tdata,{d_32_from_ip_m_axis_result_tdata,t_wPy_5}}}}}}}}}}}}}}}};
  assign t_wPy_5 = {d_31_from_ip_m_axis_result_tdata,{d_30_from_ip_m_axis_result_tdata,{d_29_from_ip_m_axis_result_tdata,{d_28_from_ip_m_axis_result_tdata,{d_27_from_ip_m_axis_result_tdata,{d_26_from_ip_m_axis_result_tdata,{d_25_from_ip_m_axis_result_tdata,{d_24_from_ip_m_axis_result_tdata,{d_23_from_ip_m_axis_result_tdata,{d_22_from_ip_m_axis_result_tdata,{d_21_from_ip_m_axis_result_tdata,{d_20_from_ip_m_axis_result_tdata,{d_19_from_ip_m_axis_result_tdata,{d_18_from_ip_m_axis_result_tdata,{d_17_from_ip_m_axis_result_tdata,{d_16_from_ip_m_axis_result_tdata,t_wPy_6}}}}}}}}}}}}}}}};
  assign t_wPy_6 = {d_15_from_ip_m_axis_result_tdata,{d_14_from_ip_m_axis_result_tdata,{d_13_from_ip_m_axis_result_tdata,{d_12_from_ip_m_axis_result_tdata,{d_11_from_ip_m_axis_result_tdata,{d_10_from_ip_m_axis_result_tdata,{d_9_from_ip_m_axis_result_tdata,{d_8_from_ip_m_axis_result_tdata,{d_7_from_ip_m_axis_result_tdata,{d_6_from_ip_m_axis_result_tdata,{d_5_from_ip_m_axis_result_tdata,{d_4_from_ip_m_axis_result_tdata,{d_3_from_ip_m_axis_result_tdata,{d_2_from_ip_m_axis_result_tdata,{d_1_from_ip_m_axis_result_tdata,d_0_from_ip_m_axis_result_tdata}}}}}}}}}}}}}}};
  assign t_output_tdata_256 = (5'h02 < t_output_tdata_255);
  assign t_output_tdata_258 = 5'h0;
  assign t_output_tdata_259 = t_output_tdata_126[15];
  assign t_output_tdata_260 = ((5'h02 < t_output_tdata_254) ? t_output_tdata_261 : 5'h0);
  assign t_output_tdata_262 = t_output_tdata_125[15];
  assign t_output_tdata_263 = ((t_output_tdata_264 < t_output_tdata_253) ? t_output_tdata_265 : 5'h0);
  assign t_output_tdata_266 = {t_output_tdata_124[15],(t_output_tdata_267 ? t_output_tdata_268 : t_output_tdata_269)};
  assign t_output_tdata_270 = t_output_tdata_124[9 : 0];
  assign t_output_tdata_271 = {{t_output_tdata_272,t_output_tdata_273},t_output_tdata_123[9 : 0]};
  assign t_output_tdata_275 = {{{t_output_tdata_276,t_output_tdata_277},t_output_tdata_122[9 : 0]},{{t_output_tdata_280,t_output_tdata_284},{t_output_tdata_285,t_output_tdata_289}}};
  assign t_output_tdata_264 = 5'h02;
  assign t_output_tdata_267 = (5'h02 < t_output_tdata_252);
  assign t_output_tdata_269 = 5'h0;
  assign t_output_tdata_272 = t_output_tdata_123[15];
  assign t_output_tdata_273 = ((5'h02 < t_output_tdata_251) ? t_output_tdata_274 : 5'h0);
  assign t_output_tdata_276 = t_output_tdata_122[15];
  assign t_output_tdata_277 = ((t_output_tdata_278 < t_output_tdata_250) ? t_output_tdata_279 : 5'h0);
  assign t_output_tdata_280 = {t_output_tdata_121[15],(t_output_tdata_281 ? t_output_tdata_282 : t_output_tdata_283)};
  assign t_output_tdata_284 = t_output_tdata_121[9 : 0];
  assign t_output_tdata_285 = {{t_output_tdata_286,t_output_tdata_287},t_output_tdata_120[9 : 0]};
  assign t_output_tdata_289 = {{{t_output_tdata_290,t_output_tdata_291},t_output_tdata_119[9 : 0]},{{t_output_tdata_294,t_output_tdata_298},{t_output_tdata_299,t_output_tdata_303}}};
  assign t_output_tdata_278 = 5'h02;
  assign t_output_tdata_281 = (5'h02 < t_output_tdata_249);
  assign t_output_tdata_283 = 5'h0;
  assign t_output_tdata_286 = t_output_tdata_120[15];
  assign t_output_tdata_287 = ((5'h02 < t_output_tdata_248) ? t_output_tdata_288 : 5'h0);
  assign t_output_tdata_290 = t_output_tdata_119[15];
  assign t_output_tdata_291 = ((t_output_tdata_292 < t_output_tdata_247) ? t_output_tdata_293 : 5'h0);
  assign t_output_tdata_294 = {t_output_tdata_118[15],(t_output_tdata_295 ? t_output_tdata_296 : t_output_tdata_297)};
  assign t_output_tdata_298 = t_output_tdata_118[9 : 0];
  assign t_output_tdata_299 = {{t_output_tdata_300,t_output_tdata_301},t_output_tdata_117[9 : 0]};
  assign t_output_tdata_303 = {{{t_output_tdata_304,t_output_tdata_305},t_output_tdata_116[9 : 0]},{{t_output_tdata_308,t_output_tdata_312},{t_output_tdata_313,t_output_tdata_317}}};
  assign t_output_tdata_292 = 5'h02;
  assign t_output_tdata_295 = (5'h02 < t_output_tdata_246);
  assign t_output_tdata_297 = 5'h0;
  assign t_output_tdata_300 = t_output_tdata_117[15];
  assign t_output_tdata_301 = ((5'h02 < t_output_tdata_245) ? t_output_tdata_302 : 5'h0);
  assign t_output_tdata_304 = t_output_tdata_116[15];
  assign t_output_tdata_305 = ((t_output_tdata_306 < t_output_tdata_244) ? t_output_tdata_307 : 5'h0);
  assign t_output_tdata_308 = {t_output_tdata_115[15],(t_output_tdata_309 ? t_output_tdata_310 : t_output_tdata_311)};
  assign t_output_tdata_312 = t_output_tdata_115[9 : 0];
  assign t_output_tdata_313 = {{t_output_tdata_314,t_output_tdata_315},t_output_tdata_114[9 : 0]};
  assign t_output_tdata_317 = {{{t_output_tdata_318,t_output_tdata_319},t_output_tdata_113[9 : 0]},{{t_output_tdata_322,t_output_tdata_326},{t_output_tdata_327,t_output_tdata_331}}};
  assign t_output_tdata_306 = 5'h02;
  assign t_output_tdata_309 = (5'h02 < t_output_tdata_243);
  assign t_output_tdata_311 = 5'h0;
  assign t_output_tdata_314 = t_output_tdata_114[15];
  assign t_output_tdata_315 = ((5'h02 < t_output_tdata_242) ? t_output_tdata_316 : 5'h0);
  assign t_output_tdata_318 = t_output_tdata_113[15];
  assign t_output_tdata_319 = ((t_output_tdata_320 < t_output_tdata_241) ? t_output_tdata_321 : 5'h0);
  assign t_output_tdata_322 = {t_output_tdata_112[15],(t_output_tdata_323 ? t_output_tdata_324 : t_output_tdata_325)};
  assign t_output_tdata_326 = t_output_tdata_112[9 : 0];
  assign t_output_tdata_327 = {{t_output_tdata_328,t_output_tdata_329},t_output_tdata_111[9 : 0]};
  assign t_output_tdata_331 = {{{t_output_tdata_332,t_output_tdata_333},t_output_tdata_110[9 : 0]},{{t_output_tdata_336,t_output_tdata_340},{t_output_tdata_341,t_output_tdata_345}}};
  assign t_output_tdata_320 = 5'h02;
  assign t_output_tdata_323 = (5'h02 < t_output_tdata_240);
  assign t_output_tdata_325 = 5'h0;
  assign t_output_tdata_328 = t_output_tdata_111[15];
  assign t_output_tdata_329 = ((5'h02 < t_output_tdata_239) ? t_output_tdata_330 : 5'h0);
  assign t_output_tdata_332 = t_output_tdata_110[15];
  assign t_output_tdata_333 = ((t_output_tdata_334 < t_output_tdata_238) ? t_output_tdata_335 : 5'h0);
  assign t_output_tdata_336 = {t_output_tdata_109[15],(t_output_tdata_337 ? t_output_tdata_338 : t_output_tdata_339)};
  assign t_output_tdata_340 = t_output_tdata_109[9 : 0];
  assign t_output_tdata_341 = {{t_output_tdata_342,t_output_tdata_343},t_output_tdata_108[9 : 0]};
  assign t_output_tdata_345 = {{{t_output_tdata_346,t_output_tdata_347},t_output_tdata_107[9 : 0]},{{t_output_tdata_350,t_output_tdata_354},{t_output_tdata_355,t_output_tdata_359}}};
  assign t_output_tdata_334 = 5'h02;
  assign t_output_tdata_337 = (5'h02 < t_output_tdata_237);
  assign t_output_tdata_339 = 5'h0;
  assign t_output_tdata_342 = t_output_tdata_108[15];
  assign t_output_tdata_343 = ((5'h02 < t_output_tdata_236) ? t_output_tdata_344 : 5'h0);
  assign t_output_tdata_346 = t_output_tdata_107[15];
  assign t_output_tdata_347 = ((t_output_tdata_348 < t_output_tdata_235) ? t_output_tdata_349 : 5'h0);
  assign t_output_tdata_350 = {t_output_tdata_106[15],(t_output_tdata_351 ? t_output_tdata_352 : t_output_tdata_353)};
  assign t_output_tdata_354 = t_output_tdata_106[9 : 0];
  assign t_output_tdata_355 = {{t_output_tdata_356,t_output_tdata_357},t_output_tdata_105[9 : 0]};
  assign t_output_tdata_359 = {{{t_output_tdata_360,t_output_tdata_361},t_output_tdata_104[9 : 0]},{{t_output_tdata_364,t_output_tdata_368},{t_output_tdata_369,t_output_tdata_373}}};
  assign t_output_tdata_348 = 5'h02;
  assign t_output_tdata_351 = (5'h02 < t_output_tdata_234);
  assign t_output_tdata_353 = 5'h0;
  assign t_output_tdata_356 = t_output_tdata_105[15];
  assign t_output_tdata_357 = ((5'h02 < t_output_tdata_233) ? t_output_tdata_358 : 5'h0);
  assign t_output_tdata_360 = t_output_tdata_104[15];
  assign t_output_tdata_361 = ((t_output_tdata_362 < t_output_tdata_232) ? t_output_tdata_363 : 5'h0);
  assign t_output_tdata_364 = {t_output_tdata_103[15],(t_output_tdata_365 ? t_output_tdata_366 : t_output_tdata_367)};
  assign t_output_tdata_368 = t_output_tdata_103[9 : 0];
  assign t_output_tdata_369 = {{t_output_tdata_370,t_output_tdata_371},t_output_tdata_102[9 : 0]};
  assign t_output_tdata_373 = {{{t_output_tdata_374,t_output_tdata_375},t_output_tdata_101[9 : 0]},{{t_output_tdata_378,t_output_tdata_382},{t_output_tdata_383,t_output_tdata_387}}};
  assign t_output_tdata_362 = 5'h02;
  assign t_output_tdata_365 = (5'h02 < t_output_tdata_231);
  assign t_output_tdata_367 = 5'h0;
  assign t_output_tdata_370 = t_output_tdata_102[15];
  assign t_output_tdata_371 = ((5'h02 < t_output_tdata_230) ? t_output_tdata_372 : 5'h0);
  assign t_output_tdata_374 = t_output_tdata_101[15];
  assign t_output_tdata_375 = ((t_output_tdata_376 < t_output_tdata_229) ? t_output_tdata_377 : 5'h0);
  assign t_output_tdata_378 = {t_output_tdata_100[15],(t_output_tdata_379 ? t_output_tdata_380 : t_output_tdata_381)};
  assign t_output_tdata_382 = t_output_tdata_100[9 : 0];
  assign t_output_tdata_383 = {{t_output_tdata_384,t_output_tdata_385},t_output_tdata_99[9 : 0]};
  assign t_output_tdata_387 = {{{t_output_tdata_388,t_output_tdata_389},t_output_tdata_98[9 : 0]},{{t_output_tdata_392,t_output_tdata_396},{t_output_tdata_397,t_output_tdata_401}}};
  assign t_output_tdata_376 = 5'h02;
  assign t_output_tdata_379 = (5'h02 < t_output_tdata_228);
  assign t_output_tdata_381 = 5'h0;
  assign t_output_tdata_384 = t_output_tdata_99[15];
  assign t_output_tdata_385 = ((5'h02 < t_output_tdata_227) ? t_output_tdata_386 : 5'h0);
  assign t_output_tdata_388 = t_output_tdata_98[15];
  assign t_output_tdata_389 = ((t_output_tdata_390 < t_output_tdata_226) ? t_output_tdata_391 : 5'h0);
  assign t_output_tdata_392 = {t_output_tdata_97[15],(t_output_tdata_393 ? t_output_tdata_394 : t_output_tdata_395)};
  assign t_output_tdata_396 = t_output_tdata_97[9 : 0];
  assign t_output_tdata_397 = {{t_output_tdata_398,t_output_tdata_399},t_output_tdata_96[9 : 0]};
  assign t_output_tdata_401 = {{{t_output_tdata_402,t_output_tdata_403},t_output_tdata_95[9 : 0]},{{t_output_tdata_406,t_output_tdata_410},{t_output_tdata_411,t_output_tdata_415}}};
  assign t_output_tdata_390 = 5'h02;
  assign t_output_tdata_393 = (5'h02 < t_output_tdata_225);
  assign t_output_tdata_395 = 5'h0;
  assign t_output_tdata_398 = t_output_tdata_96[15];
  assign t_output_tdata_399 = ((5'h02 < t_output_tdata_224) ? t_output_tdata_400 : 5'h0);
  assign t_output_tdata_402 = t_output_tdata_95[15];
  assign t_output_tdata_403 = ((t_output_tdata_404 < t_output_tdata_223) ? t_output_tdata_405 : 5'h0);
  assign t_output_tdata_406 = {t_output_tdata_94[15],(t_output_tdata_407 ? t_output_tdata_408 : t_output_tdata_409)};
  assign t_output_tdata_410 = t_output_tdata_94[9 : 0];
  assign t_output_tdata_411 = {{t_output_tdata_412,t_output_tdata_413},t_output_tdata_93[9 : 0]};
  assign t_output_tdata_415 = {{{t_output_tdata_416,t_output_tdata_417},t_output_tdata_92[9 : 0]},{{t_output_tdata_420,t_output_tdata_424},{t_output_tdata_425,t_output_tdata_429}}};
  assign t_output_tdata_404 = 5'h02;
  assign t_output_tdata_407 = (5'h02 < t_output_tdata_222);
  assign t_output_tdata_409 = 5'h0;
  assign t_output_tdata_412 = t_output_tdata_93[15];
  assign t_output_tdata_413 = ((5'h02 < t_output_tdata_221) ? t_output_tdata_414 : 5'h0);
  assign t_output_tdata_416 = t_output_tdata_92[15];
  assign t_output_tdata_417 = ((t_output_tdata_418 < t_output_tdata_220) ? t_output_tdata_419 : 5'h0);
  assign t_output_tdata_420 = {t_output_tdata_91[15],(t_output_tdata_421 ? t_output_tdata_422 : t_output_tdata_423)};
  assign t_output_tdata_424 = t_output_tdata_91[9 : 0];
  assign t_output_tdata_425 = {{t_output_tdata_426,t_output_tdata_427},t_output_tdata_90[9 : 0]};
  assign t_output_tdata_429 = {{{t_output_tdata_430,t_output_tdata_431},t_output_tdata_89[9 : 0]},{{t_output_tdata_434,t_output_tdata_438},{t_output_tdata_439,t_output_tdata_443}}};
  assign t_output_tdata_418 = 5'h02;
  assign t_output_tdata_421 = (5'h02 < t_output_tdata_219);
  assign t_output_tdata_423 = 5'h0;
  assign t_output_tdata_426 = t_output_tdata_90[15];
  assign t_output_tdata_427 = ((5'h02 < t_output_tdata_218) ? t_output_tdata_428 : 5'h0);
  assign t_output_tdata_430 = t_output_tdata_89[15];
  assign t_output_tdata_431 = ((t_output_tdata_432 < t_output_tdata_217) ? t_output_tdata_433 : 5'h0);
  assign t_output_tdata_434 = {t_output_tdata_88[15],(t_output_tdata_435 ? t_output_tdata_436 : t_output_tdata_437)};
  assign t_output_tdata_438 = t_output_tdata_88[9 : 0];
  assign t_output_tdata_439 = {{t_output_tdata_440,t_output_tdata_441},t_output_tdata_87[9 : 0]};
  assign t_output_tdata_443 = {{{t_output_tdata_444,t_output_tdata_445},t_output_tdata_86[9 : 0]},{{t_output_tdata_448,t_output_tdata_452},{t_output_tdata_453,t_output_tdata_457}}};
  assign t_output_tdata_432 = 5'h02;
  assign t_output_tdata_435 = (5'h02 < t_output_tdata_216);
  assign t_output_tdata_437 = 5'h0;
  assign t_output_tdata_440 = t_output_tdata_87[15];
  assign t_output_tdata_441 = ((5'h02 < t_output_tdata_215) ? t_output_tdata_442 : 5'h0);
  assign t_output_tdata_444 = t_output_tdata_86[15];
  assign t_output_tdata_445 = ((t_output_tdata_446 < t_output_tdata_214) ? t_output_tdata_447 : 5'h0);
  assign t_output_tdata_448 = {t_output_tdata_85[15],(t_output_tdata_449 ? t_output_tdata_450 : t_output_tdata_451)};
  assign t_output_tdata_452 = t_output_tdata_85[9 : 0];
  assign t_output_tdata_453 = {{t_output_tdata_454,t_output_tdata_455},t_output_tdata_84[9 : 0]};
  assign t_output_tdata_457 = {{{t_output_tdata_458,t_output_tdata_459},t_output_tdata_83[9 : 0]},{{t_output_tdata_462,t_output_tdata_466},{t_output_tdata_467,t_output_tdata_471}}};
  assign t_output_tdata_446 = 5'h02;
  assign t_output_tdata_449 = (5'h02 < t_output_tdata_213);
  assign t_output_tdata_451 = 5'h0;
  assign t_output_tdata_454 = t_output_tdata_84[15];
  assign t_output_tdata_455 = ((5'h02 < t_output_tdata_212) ? t_output_tdata_456 : 5'h0);
  assign t_output_tdata_458 = t_output_tdata_83[15];
  assign t_output_tdata_459 = ((t_output_tdata_460 < t_output_tdata_211) ? t_output_tdata_461 : 5'h0);
  assign t_output_tdata_462 = {t_output_tdata_82[15],(t_output_tdata_463 ? t_output_tdata_464 : t_output_tdata_465)};
  assign t_output_tdata_466 = t_output_tdata_82[9 : 0];
  assign t_output_tdata_467 = {{t_output_tdata_468,t_output_tdata_469},t_output_tdata_81[9 : 0]};
  assign t_output_tdata_471 = {{{t_output_tdata_472,t_output_tdata_473},t_output_tdata_80[9 : 0]},{{t_output_tdata_476,t_output_tdata_480},{t_output_tdata_481,t_output_tdata_485}}};
  assign t_output_tdata_460 = 5'h02;
  assign t_output_tdata_463 = (5'h02 < t_output_tdata_210);
  assign t_output_tdata_465 = 5'h0;
  assign t_output_tdata_468 = t_output_tdata_81[15];
  assign t_output_tdata_469 = ((5'h02 < t_output_tdata_209) ? t_output_tdata_470 : 5'h0);
  assign t_output_tdata_472 = t_output_tdata_80[15];
  assign t_output_tdata_473 = ((t_output_tdata_474 < t_output_tdata_208) ? t_output_tdata_475 : 5'h0);
  assign t_output_tdata_476 = {t_output_tdata_79[15],(t_output_tdata_477 ? t_output_tdata_478 : t_output_tdata_479)};
  assign t_output_tdata_480 = t_output_tdata_79[9 : 0];
  assign t_output_tdata_481 = {{t_output_tdata_482,t_output_tdata_483},t_output_tdata_78[9 : 0]};
  assign t_output_tdata_485 = {{{t_output_tdata_486,t_output_tdata_487},t_output_tdata_77[9 : 0]},{{t_output_tdata_490,t_output_tdata_494},{t_output_tdata_495,t_output_tdata_499}}};
  assign t_output_tdata_474 = 5'h02;
  assign t_output_tdata_477 = (5'h02 < t_output_tdata_207);
  assign t_output_tdata_479 = 5'h0;
  assign t_output_tdata_482 = t_output_tdata_78[15];
  assign t_output_tdata_483 = ((5'h02 < t_output_tdata_206) ? t_output_tdata_484 : 5'h0);
  assign t_output_tdata_486 = t_output_tdata_77[15];
  assign t_output_tdata_487 = ((t_output_tdata_488 < t_output_tdata_205) ? t_output_tdata_489 : 5'h0);
  assign t_output_tdata_490 = {t_output_tdata_76[15],(t_output_tdata_491 ? t_output_tdata_492 : t_output_tdata_493)};
  assign t_output_tdata_494 = t_output_tdata_76[9 : 0];
  assign t_output_tdata_495 = {{t_output_tdata_496,t_output_tdata_497},t_output_tdata_75[9 : 0]};
  assign t_output_tdata_499 = {{{t_output_tdata_500,t_output_tdata_501},t_output_tdata_74[9 : 0]},{{t_output_tdata_504,t_output_tdata_508},{t_output_tdata_509,t_output_tdata_513}}};
  assign t_output_tdata_488 = 5'h02;
  assign t_output_tdata_491 = (5'h02 < t_output_tdata_204);
  assign t_output_tdata_493 = 5'h0;
  assign t_output_tdata_496 = t_output_tdata_75[15];
  assign t_output_tdata_497 = ((5'h02 < t_output_tdata_203) ? t_output_tdata_498 : 5'h0);
  assign t_output_tdata_500 = t_output_tdata_74[15];
  assign t_output_tdata_501 = ((t_output_tdata_502 < t_output_tdata_202) ? t_output_tdata_503 : 5'h0);
  assign t_output_tdata_504 = {t_output_tdata_73[15],(t_output_tdata_505 ? t_output_tdata_506 : t_output_tdata_507)};
  assign t_output_tdata_508 = t_output_tdata_73[9 : 0];
  assign t_output_tdata_509 = {{t_output_tdata_510,t_output_tdata_511},t_output_tdata_72[9 : 0]};
  assign t_output_tdata_513 = {{{t_output_tdata_514,t_output_tdata_515},t_output_tdata_71[9 : 0]},{{t_output_tdata_518,t_output_tdata_522},{t_output_tdata_523,t_output_tdata_527}}};
  assign t_output_tdata_502 = 5'h02;
  assign t_output_tdata_505 = (5'h02 < t_output_tdata_201);
  assign t_output_tdata_507 = 5'h0;
  assign t_output_tdata_510 = t_output_tdata_72[15];
  assign t_output_tdata_511 = ((5'h02 < t_output_tdata_200) ? t_output_tdata_512 : 5'h0);
  assign t_output_tdata_514 = t_output_tdata_71[15];
  assign t_output_tdata_515 = ((t_output_tdata_516 < t_output_tdata_199) ? t_output_tdata_517 : 5'h0);
  assign t_output_tdata_518 = {t_output_tdata_70[15],(t_output_tdata_519 ? t_output_tdata_520 : t_output_tdata_521)};
  assign t_output_tdata_522 = t_output_tdata_70[9 : 0];
  assign t_output_tdata_523 = {{t_output_tdata_524,t_output_tdata_525},t_output_tdata_69[9 : 0]};
  assign t_output_tdata_527 = {{{t_output_tdata_528,t_output_tdata_529},t_output_tdata_68[9 : 0]},{{t_output_tdata_532,t_output_tdata_536},{t_output_tdata_537,t_output_tdata_541}}};
  assign t_output_tdata_516 = 5'h02;
  assign t_output_tdata_519 = (5'h02 < t_output_tdata_198);
  assign t_output_tdata_521 = 5'h0;
  assign t_output_tdata_524 = t_output_tdata_69[15];
  assign t_output_tdata_525 = ((5'h02 < t_output_tdata_197) ? t_output_tdata_526 : 5'h0);
  assign t_output_tdata_528 = t_output_tdata_68[15];
  assign t_output_tdata_529 = ((t_output_tdata_530 < t_output_tdata_196) ? t_output_tdata_531 : 5'h0);
  assign t_output_tdata_532 = {t_output_tdata_67[15],(t_output_tdata_533 ? t_output_tdata_534 : t_output_tdata_535)};
  assign t_output_tdata_536 = t_output_tdata_67[9 : 0];
  assign t_output_tdata_537 = {{t_output_tdata_538,t_output_tdata_539},t_output_tdata_66[9 : 0]};
  assign t_output_tdata_541 = {{{t_output_tdata_542,t_output_tdata_543},t_output_tdata_65[9 : 0]},{{t_output_tdata_546,t_output_tdata_550},{t_output_tdata_551,t_output_tdata_555}}};
  assign t_output_tdata_530 = 5'h02;
  assign t_output_tdata_533 = (5'h02 < t_output_tdata_195);
  assign t_output_tdata_535 = 5'h0;
  assign t_output_tdata_538 = t_output_tdata_66[15];
  assign t_output_tdata_539 = ((5'h02 < t_output_tdata_194) ? t_output_tdata_540 : 5'h0);
  assign t_output_tdata_542 = t_output_tdata_65[15];
  assign t_output_tdata_543 = ((t_output_tdata_544 < t_output_tdata_193) ? t_output_tdata_545 : 5'h0);
  assign t_output_tdata_546 = {t_output_tdata_64[15],(t_output_tdata_547 ? t_output_tdata_548 : t_output_tdata_549)};
  assign t_output_tdata_550 = t_output_tdata_64[9 : 0];
  assign t_output_tdata_551 = {{t_output_tdata_552,t_output_tdata_553},t_output_tdata_63[9 : 0]};
  assign t_output_tdata_555 = {{{t_output_tdata_556,t_output_tdata_557},t_output_tdata_62[9 : 0]},{{t_output_tdata_560,t_output_tdata_564},{t_output_tdata_565,t_output_tdata_569}}};
  assign t_output_tdata_544 = 5'h02;
  assign t_output_tdata_547 = (5'h02 < t_output_tdata_192);
  assign t_output_tdata_549 = 5'h0;
  assign t_output_tdata_552 = t_output_tdata_63[15];
  assign t_output_tdata_553 = ((5'h02 < t_output_tdata_191) ? t_output_tdata_554 : 5'h0);
  assign t_output_tdata_556 = t_output_tdata_62[15];
  assign t_output_tdata_557 = ((t_output_tdata_558 < t_output_tdata_190) ? t_output_tdata_559 : 5'h0);
  assign t_output_tdata_560 = {t_output_tdata_61[15],(t_output_tdata_561 ? t_output_tdata_562 : t_output_tdata_563)};
  assign t_output_tdata_564 = t_output_tdata_61[9 : 0];
  assign t_output_tdata_565 = {{t_output_tdata_566,t_output_tdata_567},t_output_tdata_60[9 : 0]};
  assign t_output_tdata_569 = {{{t_output_tdata_570,t_output_tdata_571},t_output_tdata_59[9 : 0]},{{t_output_tdata_574,t_output_tdata_578},{t_output_tdata_579,t_output_tdata_583}}};
  assign t_output_tdata_558 = 5'h02;
  assign t_output_tdata_561 = (5'h02 < t_output_tdata_189);
  assign t_output_tdata_563 = 5'h0;
  assign t_output_tdata_566 = t_output_tdata_60[15];
  assign t_output_tdata_567 = ((5'h02 < t_output_tdata_188) ? t_output_tdata_568 : 5'h0);
  assign t_output_tdata_570 = t_output_tdata_59[15];
  assign t_output_tdata_571 = ((t_output_tdata_572 < t_output_tdata_187) ? t_output_tdata_573 : 5'h0);
  assign t_output_tdata_574 = {t_output_tdata_58[15],(t_output_tdata_575 ? t_output_tdata_576 : t_output_tdata_577)};
  assign t_output_tdata_578 = t_output_tdata_58[9 : 0];
  assign t_output_tdata_579 = {{t_output_tdata_580,t_output_tdata_581},t_output_tdata_57[9 : 0]};
  assign t_output_tdata_583 = {{{t_output_tdata_584,t_output_tdata_585},t_output_tdata_56[9 : 0]},{{t_output_tdata_588,t_output_tdata_592},{t_output_tdata_593,t_output_tdata_597}}};
  assign t_output_tdata_572 = 5'h02;
  assign t_output_tdata_575 = (5'h02 < t_output_tdata_186);
  assign t_output_tdata_577 = 5'h0;
  assign t_output_tdata_580 = t_output_tdata_57[15];
  assign t_output_tdata_581 = ((5'h02 < t_output_tdata_185) ? t_output_tdata_582 : 5'h0);
  assign t_output_tdata_584 = t_output_tdata_56[15];
  assign t_output_tdata_585 = ((t_output_tdata_586 < t_output_tdata_184) ? t_output_tdata_587 : 5'h0);
  assign t_output_tdata_588 = {t_output_tdata_55[15],(t_output_tdata_589 ? t_output_tdata_590 : t_output_tdata_591)};
  assign t_output_tdata_592 = t_output_tdata_55[9 : 0];
  assign t_output_tdata_593 = {{t_output_tdata_594,t_output_tdata_595},t_output_tdata_54[9 : 0]};
  assign t_output_tdata_597 = {{{t_output_tdata_598,t_output_tdata_599},t_output_tdata_53[9 : 0]},{{t_output_tdata_602,t_output_tdata_606},{t_output_tdata_607,t_output_tdata_611}}};
  assign t_output_tdata_586 = 5'h02;
  assign t_output_tdata_589 = (5'h02 < t_output_tdata_183);
  assign t_output_tdata_591 = 5'h0;
  assign t_output_tdata_594 = t_output_tdata_54[15];
  assign t_output_tdata_595 = ((5'h02 < t_output_tdata_182) ? t_output_tdata_596 : 5'h0);
  assign t_output_tdata_598 = t_output_tdata_53[15];
  assign t_output_tdata_599 = ((t_output_tdata_600 < t_output_tdata_181) ? t_output_tdata_601 : 5'h0);
  assign t_output_tdata_602 = {t_output_tdata_52[15],(t_output_tdata_603 ? t_output_tdata_604 : t_output_tdata_605)};
  assign t_output_tdata_606 = t_output_tdata_52[9 : 0];
  assign t_output_tdata_607 = {{t_output_tdata_608,t_output_tdata_609},t_output_tdata_51[9 : 0]};
  assign t_output_tdata_611 = {{{t_output_tdata_612,t_output_tdata_613},t_output_tdata_50[9 : 0]},{{t_output_tdata_616,t_output_tdata_620},{t_output_tdata_621,t_output_tdata_625}}};
  assign t_output_tdata_600 = 5'h02;
  assign t_output_tdata_603 = (5'h02 < t_output_tdata_180);
  assign t_output_tdata_605 = 5'h0;
  assign t_output_tdata_608 = t_output_tdata_51[15];
  assign t_output_tdata_609 = ((5'h02 < t_output_tdata_179) ? t_output_tdata_610 : 5'h0);
  assign t_output_tdata_612 = t_output_tdata_50[15];
  assign t_output_tdata_613 = ((t_output_tdata_614 < t_output_tdata_178) ? t_output_tdata_615 : 5'h0);
  assign t_output_tdata_616 = {t_output_tdata_49[15],(t_output_tdata_617 ? t_output_tdata_618 : t_output_tdata_619)};
  assign t_output_tdata_620 = t_output_tdata_49[9 : 0];
  assign t_output_tdata_621 = {{t_output_tdata_622,t_output_tdata_623},t_output_tdata_48[9 : 0]};
  assign t_output_tdata_625 = {{{t_output_tdata_626,t_output_tdata_627},t_output_tdata_47[9 : 0]},{{t_output_tdata_630,t_output_tdata_634},{t_output_tdata_635,t_output_tdata_639}}};
  assign t_output_tdata_614 = 5'h02;
  assign t_output_tdata_617 = (5'h02 < t_output_tdata_177);
  assign t_output_tdata_619 = 5'h0;
  assign t_output_tdata_622 = t_output_tdata_48[15];
  assign t_output_tdata_623 = ((5'h02 < t_output_tdata_176) ? t_output_tdata_624 : 5'h0);
  assign t_output_tdata_626 = t_output_tdata_47[15];
  assign t_output_tdata_627 = ((t_output_tdata_628 < t_output_tdata_175) ? t_output_tdata_629 : 5'h0);
  assign t_output_tdata_630 = {t_output_tdata_46[15],(t_output_tdata_631 ? t_output_tdata_632 : t_output_tdata_633)};
  assign t_output_tdata_634 = t_output_tdata_46[9 : 0];
  assign t_output_tdata_635 = {{t_output_tdata_636,t_output_tdata_637},t_output_tdata_45[9 : 0]};
  assign t_output_tdata_639 = {{{t_output_tdata_640,t_output_tdata_641},t_output_tdata_44[9 : 0]},{{t_output_tdata_644,t_output_tdata_648},{t_output_tdata_649,t_output_tdata_653}}};
  assign t_output_tdata_628 = 5'h02;
  assign t_output_tdata_631 = (5'h02 < t_output_tdata_174);
  assign t_output_tdata_633 = 5'h0;
  assign t_output_tdata_636 = t_output_tdata_45[15];
  assign t_output_tdata_637 = ((5'h02 < t_output_tdata_173) ? t_output_tdata_638 : 5'h0);
  assign t_output_tdata_640 = t_output_tdata_44[15];
  assign t_output_tdata_641 = ((t_output_tdata_642 < t_output_tdata_172) ? t_output_tdata_643 : 5'h0);
  assign t_output_tdata_644 = {t_output_tdata_43[15],(t_output_tdata_645 ? t_output_tdata_646 : t_output_tdata_647)};
  assign t_output_tdata_648 = t_output_tdata_43[9 : 0];
  assign t_output_tdata_649 = {{t_output_tdata_650,t_output_tdata_651},t_output_tdata_42[9 : 0]};
  assign t_output_tdata_653 = {{{t_output_tdata_654,t_output_tdata_655},t_output_tdata_41[9 : 0]},{{t_output_tdata_658,t_output_tdata_662},{t_output_tdata_663,t_output_tdata_667}}};
  assign t_output_tdata_642 = 5'h02;
  assign t_output_tdata_645 = (5'h02 < t_output_tdata_171);
  assign t_output_tdata_647 = 5'h0;
  assign t_output_tdata_650 = t_output_tdata_42[15];
  assign t_output_tdata_651 = ((5'h02 < t_output_tdata_170) ? t_output_tdata_652 : 5'h0);
  assign t_output_tdata_654 = t_output_tdata_41[15];
  assign t_output_tdata_655 = ((t_output_tdata_656 < t_output_tdata_169) ? t_output_tdata_657 : 5'h0);
  assign t_output_tdata_658 = {t_output_tdata_40[15],(t_output_tdata_659 ? t_output_tdata_660 : t_output_tdata_661)};
  assign t_output_tdata_662 = t_output_tdata_40[9 : 0];
  assign t_output_tdata_663 = {{t_output_tdata_664,t_output_tdata_665},t_output_tdata_39[9 : 0]};
  assign t_output_tdata_667 = {{{t_output_tdata_668,t_output_tdata_669},t_output_tdata_38[9 : 0]},{{t_output_tdata_672,t_output_tdata_676},{t_output_tdata_677,t_output_tdata_681}}};
  assign t_output_tdata_656 = 5'h02;
  assign t_output_tdata_659 = (5'h02 < t_output_tdata_168);
  assign t_output_tdata_661 = 5'h0;
  assign t_output_tdata_664 = t_output_tdata_39[15];
  assign t_output_tdata_665 = ((5'h02 < t_output_tdata_167) ? t_output_tdata_666 : 5'h0);
  assign t_output_tdata_668 = t_output_tdata_38[15];
  assign t_output_tdata_669 = ((t_output_tdata_670 < t_output_tdata_166) ? t_output_tdata_671 : 5'h0);
  assign t_output_tdata_672 = {t_output_tdata_37[15],(t_output_tdata_673 ? t_output_tdata_674 : t_output_tdata_675)};
  assign t_output_tdata_676 = t_output_tdata_37[9 : 0];
  assign t_output_tdata_677 = {{t_output_tdata_678,t_output_tdata_679},t_output_tdata_36[9 : 0]};
  assign t_output_tdata_681 = {{{t_output_tdata_682,t_output_tdata_683},t_output_tdata_35[9 : 0]},{{t_output_tdata_686,t_output_tdata_690},{t_output_tdata_691,t_output_tdata_695}}};
  assign t_output_tdata_670 = 5'h02;
  assign t_output_tdata_673 = (5'h02 < t_output_tdata_165);
  assign t_output_tdata_675 = 5'h0;
  assign t_output_tdata_678 = t_output_tdata_36[15];
  assign t_output_tdata_679 = ((5'h02 < t_output_tdata_164) ? t_output_tdata_680 : 5'h0);
  assign t_output_tdata_682 = t_output_tdata_35[15];
  assign t_output_tdata_683 = ((t_output_tdata_684 < t_output_tdata_163) ? t_output_tdata_685 : 5'h0);
  assign t_output_tdata_686 = {t_output_tdata_34[15],(t_output_tdata_687 ? t_output_tdata_688 : t_output_tdata_689)};
  assign t_output_tdata_690 = t_output_tdata_34[9 : 0];
  assign t_output_tdata_691 = {{t_output_tdata_692,t_output_tdata_693},t_output_tdata_33[9 : 0]};
  assign t_output_tdata_695 = {{{t_output_tdata_696,t_output_tdata_697},t_output_tdata_32[9 : 0]},{{t_output_tdata_700,t_output_tdata_704},{t_output_tdata_705,t_output_tdata_709}}};
  assign t_output_tdata_684 = 5'h02;
  assign t_output_tdata_687 = (5'h02 < t_output_tdata_162);
  assign t_output_tdata_689 = 5'h0;
  assign t_output_tdata_692 = t_output_tdata_33[15];
  assign t_output_tdata_693 = ((5'h02 < t_output_tdata_161) ? t_output_tdata_694 : 5'h0);
  assign t_output_tdata_696 = t_output_tdata_32[15];
  assign t_output_tdata_697 = ((t_output_tdata_698 < t_output_tdata_160) ? t_output_tdata_699 : 5'h0);
  assign t_output_tdata_700 = {t_output_tdata_31[15],(t_output_tdata_701 ? t_output_tdata_702 : t_output_tdata_703)};
  assign t_output_tdata_704 = t_output_tdata_31[9 : 0];
  assign t_output_tdata_705 = {{t_output_tdata_706,t_output_tdata_707},t_output_tdata_30[9 : 0]};
  assign t_output_tdata_709 = {{{t_output_tdata_710,t_output_tdata_711},t_output_tdata_29[9 : 0]},{{t_output_tdata_714,t_output_tdata_718},{t_output_tdata_719,t_output_tdata_723}}};
  assign t_output_tdata_698 = 5'h02;
  assign t_output_tdata_701 = (5'h02 < t_output_tdata_159);
  assign t_output_tdata_703 = 5'h0;
  assign t_output_tdata_706 = t_output_tdata_30[15];
  assign t_output_tdata_707 = ((5'h02 < t_output_tdata_158) ? t_output_tdata_708 : 5'h0);
  assign t_output_tdata_710 = t_output_tdata_29[15];
  assign t_output_tdata_711 = ((t_output_tdata_712 < t_output_tdata_157) ? t_output_tdata_713 : 5'h0);
  assign t_output_tdata_714 = {t_output_tdata_28[15],(t_output_tdata_715 ? t_output_tdata_716 : t_output_tdata_717)};
  assign t_output_tdata_718 = t_output_tdata_28[9 : 0];
  assign t_output_tdata_719 = {{t_output_tdata_720,t_output_tdata_721},t_output_tdata_27[9 : 0]};
  assign t_output_tdata_723 = {{{t_output_tdata_724,t_output_tdata_725},t_output_tdata_26[9 : 0]},{{t_output_tdata_728,t_output_tdata_732},{t_output_tdata_733,t_output_tdata_737}}};
  assign t_output_tdata_712 = 5'h02;
  assign t_output_tdata_715 = (5'h02 < t_output_tdata_156);
  assign t_output_tdata_717 = 5'h0;
  assign t_output_tdata_720 = t_output_tdata_27[15];
  assign t_output_tdata_721 = ((5'h02 < t_output_tdata_155) ? t_output_tdata_722 : 5'h0);
  assign t_output_tdata_724 = t_output_tdata_26[15];
  assign t_output_tdata_725 = ((t_output_tdata_726 < t_output_tdata_154) ? t_output_tdata_727 : 5'h0);
  assign t_output_tdata_728 = {t_output_tdata_25[15],(t_output_tdata_729 ? t_output_tdata_730 : t_output_tdata_731)};
  assign t_output_tdata_732 = t_output_tdata_25[9 : 0];
  assign t_output_tdata_733 = {{t_output_tdata_734,t_output_tdata_735},t_output_tdata_24[9 : 0]};
  assign t_output_tdata_737 = {{{t_output_tdata_738,t_output_tdata_739},t_output_tdata_23[9 : 0]},{{t_output_tdata_742,t_output_tdata_746},{t_output_tdata_747,t_output_tdata_751}}};
  assign t_output_tdata_726 = 5'h02;
  assign t_output_tdata_729 = (5'h02 < t_output_tdata_153);
  assign t_output_tdata_731 = 5'h0;
  assign t_output_tdata_734 = t_output_tdata_24[15];
  assign t_output_tdata_735 = ((5'h02 < t_output_tdata_152) ? t_output_tdata_736 : 5'h0);
  assign t_output_tdata_738 = t_output_tdata_23[15];
  assign t_output_tdata_739 = ((t_output_tdata_740 < t_output_tdata_151) ? t_output_tdata_741 : 5'h0);
  assign t_output_tdata_742 = {t_output_tdata_22[15],(t_output_tdata_743 ? t_output_tdata_744 : t_output_tdata_745)};
  assign t_output_tdata_746 = t_output_tdata_22[9 : 0];
  assign t_output_tdata_747 = {{t_output_tdata_748,t_output_tdata_749},t_output_tdata_21[9 : 0]};
  assign t_output_tdata_751 = {{{t_output_tdata_752,t_output_tdata_753},t_output_tdata_20[9 : 0]},{{t_output_tdata_756,t_output_tdata_760},{t_output_tdata_761,t_output_tdata_765}}};
  assign t_output_tdata_740 = 5'h02;
  assign t_output_tdata_743 = (5'h02 < t_output_tdata_150);
  assign t_output_tdata_745 = 5'h0;
  assign t_output_tdata_748 = t_output_tdata_21[15];
  assign t_output_tdata_749 = ((5'h02 < t_output_tdata_149) ? t_output_tdata_750 : 5'h0);
  assign t_output_tdata_752 = t_output_tdata_20[15];
  assign t_output_tdata_753 = ((t_output_tdata_754 < t_output_tdata_148) ? t_output_tdata_755 : 5'h0);
  assign t_output_tdata_756 = {t_output_tdata_19[15],(t_output_tdata_757 ? t_output_tdata_758 : t_output_tdata_759)};
  assign t_output_tdata_760 = t_output_tdata_19[9 : 0];
  assign t_output_tdata_761 = {{t_output_tdata_762,t_output_tdata_763},t_output_tdata_18[9 : 0]};
  assign t_output_tdata_765 = {{{t_output_tdata_766,t_output_tdata_767},t_output_tdata_17[9 : 0]},{{t_output_tdata_770,t_output_tdata_774},{t_output_tdata_775,t_output_tdata_779}}};
  assign t_output_tdata_754 = 5'h02;
  assign t_output_tdata_757 = (5'h02 < t_output_tdata_147);
  assign t_output_tdata_759 = 5'h0;
  assign t_output_tdata_762 = t_output_tdata_18[15];
  assign t_output_tdata_763 = ((5'h02 < t_output_tdata_146) ? t_output_tdata_764 : 5'h0);
  assign t_output_tdata_766 = t_output_tdata_17[15];
  assign t_output_tdata_767 = ((t_output_tdata_768 < t_output_tdata_145) ? t_output_tdata_769 : 5'h0);
  assign t_output_tdata_770 = {t_output_tdata_16[15],(t_output_tdata_771 ? t_output_tdata_772 : t_output_tdata_773)};
  assign t_output_tdata_774 = t_output_tdata_16[9 : 0];
  assign t_output_tdata_775 = {{t_output_tdata_776,t_output_tdata_777},t_output_tdata_15[9 : 0]};
  assign t_output_tdata_779 = {{{t_output_tdata_780,t_output_tdata_781},t_output_tdata_14[9 : 0]},{{t_output_tdata_784,t_output_tdata_788},{t_output_tdata_789,t_output_tdata_793}}};
  assign t_output_tdata_768 = 5'h02;
  assign t_output_tdata_771 = (5'h02 < t_output_tdata_144);
  assign t_output_tdata_773 = 5'h0;
  assign t_output_tdata_776 = t_output_tdata_15[15];
  assign t_output_tdata_777 = ((5'h02 < t_output_tdata_143) ? t_output_tdata_778 : 5'h0);
  assign t_output_tdata_780 = t_output_tdata_14[15];
  assign t_output_tdata_781 = ((t_output_tdata_782 < t_output_tdata_142) ? t_output_tdata_783 : 5'h0);
  assign t_output_tdata_784 = {t_output_tdata_13[15],(t_output_tdata_785 ? t_output_tdata_786 : t_output_tdata_787)};
  assign t_output_tdata_788 = t_output_tdata_13[9 : 0];
  assign t_output_tdata_789 = {{t_output_tdata_790,t_output_tdata_791},t_output_tdata_12[9 : 0]};
  assign t_output_tdata_793 = {{{t_output_tdata_794,t_output_tdata_795},t_output_tdata_11[9 : 0]},{{t_output_tdata_798,t_output_tdata_802},{t_output_tdata_803,t_output_tdata_807}}};
  assign t_output_tdata_782 = 5'h02;
  assign t_output_tdata_785 = (5'h02 < t_output_tdata_141);
  assign t_output_tdata_787 = 5'h0;
  assign t_output_tdata_790 = t_output_tdata_12[15];
  assign t_output_tdata_791 = ((5'h02 < t_output_tdata_140) ? t_output_tdata_792 : 5'h0);
  assign t_output_tdata_794 = t_output_tdata_11[15];
  assign t_output_tdata_795 = ((t_output_tdata_796 < t_output_tdata_139) ? t_output_tdata_797 : 5'h0);
  assign t_output_tdata_798 = {t_output_tdata_10[15],(t_output_tdata_799 ? t_output_tdata_800 : t_output_tdata_801)};
  assign t_output_tdata_802 = t_output_tdata_10[9 : 0];
  assign t_output_tdata_803 = {{t_output_tdata_804,t_output_tdata_805},t_output_tdata_9[9 : 0]};
  assign t_output_tdata_807 = {{{t_output_tdata_808,t_output_tdata_809},t_output_tdata_8[9 : 0]},{{t_output_tdata_812,t_output_tdata_816},{t_output_tdata_817,t_output_tdata_821}}};
  assign t_output_tdata_796 = 5'h02;
  assign t_output_tdata_799 = (5'h02 < t_output_tdata_138);
  assign t_output_tdata_801 = 5'h0;
  assign t_output_tdata_804 = t_output_tdata_9[15];
  assign t_output_tdata_805 = ((5'h02 < t_output_tdata_137) ? t_output_tdata_806 : 5'h0);
  assign t_output_tdata_808 = t_output_tdata_8[15];
  assign t_output_tdata_809 = ((t_output_tdata_810 < t_output_tdata_136) ? t_output_tdata_811 : 5'h0);
  assign t_output_tdata_812 = {t_output_tdata_7[15],(t_output_tdata_813 ? t_output_tdata_814 : t_output_tdata_815)};
  assign t_output_tdata_816 = t_output_tdata_7[9 : 0];
  assign t_output_tdata_817 = {{t_output_tdata_818,t_output_tdata_819},t_output_tdata_6[9 : 0]};
  assign t_output_tdata_821 = {{{t_output_tdata_822,t_output_tdata_823},t_output_tdata_5[9 : 0]},{{t_output_tdata_826,t_output_tdata_830},{t_output_tdata_831,t_output_tdata_835}}};
  assign t_output_tdata_810 = 5'h02;
  assign t_output_tdata_813 = (5'h02 < t_output_tdata_135);
  assign t_output_tdata_815 = 5'h0;
  assign t_output_tdata_818 = t_output_tdata_6[15];
  assign t_output_tdata_819 = ((5'h02 < t_output_tdata_134) ? t_output_tdata_820 : 5'h0);
  assign t_output_tdata_822 = t_output_tdata_5[15];
  assign t_output_tdata_823 = ((t_output_tdata_824 < t_output_tdata_133) ? t_output_tdata_825 : 5'h0);
  assign t_output_tdata_826 = {t_output_tdata_4[15],(t_output_tdata_827 ? t_output_tdata_828 : t_output_tdata_829)};
  assign t_output_tdata_830 = t_output_tdata_4[9 : 0];
  assign t_output_tdata_831 = {{t_output_tdata_832,t_output_tdata_833},t_output_tdata_3[9 : 0]};
  assign t_output_tdata_835 = {{{t_output_tdata_836,t_output_tdata_837},t_output_tdata_2[9 : 0]},{{t_output_tdata_839,t_output_tdata_842},{t_output_tdata_843,t_output_tdata_846}}};
  assign t_output_tdata_824 = 5'h02;
  assign t_output_tdata_827 = (5'h02 < t_output_tdata_132);
  assign t_output_tdata_829 = 5'h0;
  assign t_output_tdata_832 = t_output_tdata_3[15];
  assign t_output_tdata_833 = ((5'h02 < t_output_tdata_131) ? t_output_tdata_834 : 5'h0);
  assign t_output_tdata_836 = t_output_tdata_2[15];
  assign t_output_tdata_837 = ((5'h02 < t_output_tdata_130) ? t_output_tdata_838 : 5'h0);
  assign t_output_tdata_839 = {t_output_tdata_1[15],((t_output_tdata_840 < t_output_tdata_129) ? t_output_tdata_841 : 5'h0)};
  assign t_output_tdata_842 = t_output_tdata_1[9 : 0];
  assign t_output_tdata_843 = {t_output_tdata[15],((t_output_tdata_844 < t_output_tdata_128) ? t_output_tdata_845 : 5'h0)};
  assign t_output_tdata_846 = t_output_tdata[9 : 0];
  assign t_output_tdata_840 = 5'h02;
  assign t_output_tdata_844 = 5'h02;
  StreamMux_41 zeroMux (
    .io_select           (zeroMux_io_select             ), //i
    .io_inputs_0_valid   (zeroInt4_tvalid               ), //i
    .io_inputs_0_ready   (zeroMux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (zeroInt4_tdata[7:0]           ), //i
    .io_inputs_1_valid   (zeroInt8_tvalid               ), //i
    .io_inputs_1_ready   (zeroMux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (zeroInt8_tdata[7:0]           ), //i
    .io_output_valid     (zeroMux_io_output_valid       ), //o
    .io_output_ready     (vldConv                       ), //i
    .io_output_payload   (zeroMux_io_output_payload[7:0])  //o
  );
  fp16int9d4 d_0_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_0_valid                            ), //i
    .s_axis_a_tdata       (d_0_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_0_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_0_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_1_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_1_valid                            ), //i
    .s_axis_a_tdata       (d_1_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_1_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_1_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_2_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_2_valid                            ), //i
    .s_axis_a_tdata       (d_2_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_2_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_2_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_3_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_3_valid                            ), //i
    .s_axis_a_tdata       (d_3_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_3_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_3_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_4_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_4_valid                            ), //i
    .s_axis_a_tdata       (d_4_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_4_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_4_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_5_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_5_valid                            ), //i
    .s_axis_a_tdata       (d_5_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_5_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_5_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_6_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_6_valid                            ), //i
    .s_axis_a_tdata       (d_6_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_6_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_6_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_7_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_7_valid                            ), //i
    .s_axis_a_tdata       (d_7_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_7_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_7_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_8_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_8_valid                            ), //i
    .s_axis_a_tdata       (d_8_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_8_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_8_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_9_from_ip (
    .aclk                 (clk_1_clk                            ), //i
    .s_axis_a_tvalid      (d_9_valid                            ), //i
    .s_axis_a_tdata       (d_9_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_9_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_9_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_10_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_10_valid                            ), //i
    .s_axis_a_tdata       (d_10_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_10_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_10_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_11_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_11_valid                            ), //i
    .s_axis_a_tdata       (d_11_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_11_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_11_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_12_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_12_valid                            ), //i
    .s_axis_a_tdata       (d_12_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_12_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_12_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_13_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_13_valid                            ), //i
    .s_axis_a_tdata       (d_13_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_13_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_13_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_14_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_14_valid                            ), //i
    .s_axis_a_tdata       (d_14_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_14_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_14_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_15_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_15_valid                            ), //i
    .s_axis_a_tdata       (d_15_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_15_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_15_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_16_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_16_valid                            ), //i
    .s_axis_a_tdata       (d_16_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_16_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_16_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_17_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_17_valid                            ), //i
    .s_axis_a_tdata       (d_17_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_17_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_17_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_18_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_18_valid                            ), //i
    .s_axis_a_tdata       (d_18_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_18_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_18_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_19_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_19_valid                            ), //i
    .s_axis_a_tdata       (d_19_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_19_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_19_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_20_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_20_valid                            ), //i
    .s_axis_a_tdata       (d_20_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_20_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_20_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_21_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_21_valid                            ), //i
    .s_axis_a_tdata       (d_21_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_21_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_21_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_22_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_22_valid                            ), //i
    .s_axis_a_tdata       (d_22_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_22_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_22_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_23_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_23_valid                            ), //i
    .s_axis_a_tdata       (d_23_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_23_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_23_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_24_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_24_valid                            ), //i
    .s_axis_a_tdata       (d_24_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_24_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_24_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_25_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_25_valid                            ), //i
    .s_axis_a_tdata       (d_25_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_25_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_25_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_26_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_26_valid                            ), //i
    .s_axis_a_tdata       (d_26_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_26_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_26_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_27_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_27_valid                            ), //i
    .s_axis_a_tdata       (d_27_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_27_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_27_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_28_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_28_valid                            ), //i
    .s_axis_a_tdata       (d_28_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_28_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_28_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_29_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_29_valid                            ), //i
    .s_axis_a_tdata       (d_29_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_29_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_29_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_30_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_30_valid                            ), //i
    .s_axis_a_tdata       (d_30_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_30_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_30_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_31_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_31_valid                            ), //i
    .s_axis_a_tdata       (d_31_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_31_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_31_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_32_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_32_valid                            ), //i
    .s_axis_a_tdata       (d_32_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_32_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_32_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_33_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_33_valid                            ), //i
    .s_axis_a_tdata       (d_33_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_33_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_33_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_34_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_34_valid                            ), //i
    .s_axis_a_tdata       (d_34_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_34_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_34_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_35_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_35_valid                            ), //i
    .s_axis_a_tdata       (d_35_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_35_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_35_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_36_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_36_valid                            ), //i
    .s_axis_a_tdata       (d_36_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_36_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_36_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_37_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_37_valid                            ), //i
    .s_axis_a_tdata       (d_37_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_37_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_37_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_38_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_38_valid                            ), //i
    .s_axis_a_tdata       (d_38_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_38_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_38_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_39_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_39_valid                            ), //i
    .s_axis_a_tdata       (d_39_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_39_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_39_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_40_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_40_valid                            ), //i
    .s_axis_a_tdata       (d_40_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_40_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_40_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_41_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_41_valid                            ), //i
    .s_axis_a_tdata       (d_41_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_41_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_41_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_42_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_42_valid                            ), //i
    .s_axis_a_tdata       (d_42_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_42_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_42_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_43_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_43_valid                            ), //i
    .s_axis_a_tdata       (d_43_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_43_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_43_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_44_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_44_valid                            ), //i
    .s_axis_a_tdata       (d_44_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_44_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_44_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_45_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_45_valid                            ), //i
    .s_axis_a_tdata       (d_45_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_45_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_45_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_46_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_46_valid                            ), //i
    .s_axis_a_tdata       (d_46_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_46_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_46_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_47_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_47_valid                            ), //i
    .s_axis_a_tdata       (d_47_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_47_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_47_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_48_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_48_valid                            ), //i
    .s_axis_a_tdata       (d_48_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_48_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_48_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_49_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_49_valid                            ), //i
    .s_axis_a_tdata       (d_49_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_49_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_49_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_50_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_50_valid                            ), //i
    .s_axis_a_tdata       (d_50_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_50_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_50_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_51_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_51_valid                            ), //i
    .s_axis_a_tdata       (d_51_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_51_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_51_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_52_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_52_valid                            ), //i
    .s_axis_a_tdata       (d_52_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_52_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_52_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_53_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_53_valid                            ), //i
    .s_axis_a_tdata       (d_53_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_53_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_53_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_54_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_54_valid                            ), //i
    .s_axis_a_tdata       (d_54_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_54_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_54_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_55_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_55_valid                            ), //i
    .s_axis_a_tdata       (d_55_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_55_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_55_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_56_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_56_valid                            ), //i
    .s_axis_a_tdata       (d_56_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_56_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_56_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_57_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_57_valid                            ), //i
    .s_axis_a_tdata       (d_57_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_57_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_57_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_58_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_58_valid                            ), //i
    .s_axis_a_tdata       (d_58_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_58_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_58_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_59_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_59_valid                            ), //i
    .s_axis_a_tdata       (d_59_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_59_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_59_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_60_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_60_valid                            ), //i
    .s_axis_a_tdata       (d_60_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_60_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_60_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_61_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_61_valid                            ), //i
    .s_axis_a_tdata       (d_61_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_61_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_61_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_62_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_62_valid                            ), //i
    .s_axis_a_tdata       (d_62_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_62_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_62_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_63_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_63_valid                            ), //i
    .s_axis_a_tdata       (d_63_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_63_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_63_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_64_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_64_valid                            ), //i
    .s_axis_a_tdata       (d_64_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_64_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_64_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_65_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_65_valid                            ), //i
    .s_axis_a_tdata       (d_65_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_65_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_65_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_66_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_66_valid                            ), //i
    .s_axis_a_tdata       (d_66_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_66_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_66_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_67_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_67_valid                            ), //i
    .s_axis_a_tdata       (d_67_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_67_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_67_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_68_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_68_valid                            ), //i
    .s_axis_a_tdata       (d_68_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_68_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_68_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_69_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_69_valid                            ), //i
    .s_axis_a_tdata       (d_69_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_69_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_69_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_70_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_70_valid                            ), //i
    .s_axis_a_tdata       (d_70_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_70_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_70_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_71_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_71_valid                            ), //i
    .s_axis_a_tdata       (d_71_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_71_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_71_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_72_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_72_valid                            ), //i
    .s_axis_a_tdata       (d_72_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_72_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_72_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_73_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_73_valid                            ), //i
    .s_axis_a_tdata       (d_73_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_73_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_73_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_74_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_74_valid                            ), //i
    .s_axis_a_tdata       (d_74_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_74_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_74_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_75_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_75_valid                            ), //i
    .s_axis_a_tdata       (d_75_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_75_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_75_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_76_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_76_valid                            ), //i
    .s_axis_a_tdata       (d_76_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_76_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_76_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_77_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_77_valid                            ), //i
    .s_axis_a_tdata       (d_77_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_77_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_77_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_78_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_78_valid                            ), //i
    .s_axis_a_tdata       (d_78_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_78_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_78_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_79_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_79_valid                            ), //i
    .s_axis_a_tdata       (d_79_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_79_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_79_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_80_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_80_valid                            ), //i
    .s_axis_a_tdata       (d_80_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_80_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_80_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_81_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_81_valid                            ), //i
    .s_axis_a_tdata       (d_81_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_81_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_81_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_82_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_82_valid                            ), //i
    .s_axis_a_tdata       (d_82_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_82_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_82_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_83_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_83_valid                            ), //i
    .s_axis_a_tdata       (d_83_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_83_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_83_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_84_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_84_valid                            ), //i
    .s_axis_a_tdata       (d_84_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_84_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_84_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_85_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_85_valid                            ), //i
    .s_axis_a_tdata       (d_85_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_85_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_85_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_86_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_86_valid                            ), //i
    .s_axis_a_tdata       (d_86_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_86_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_86_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_87_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_87_valid                            ), //i
    .s_axis_a_tdata       (d_87_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_87_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_87_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_88_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_88_valid                            ), //i
    .s_axis_a_tdata       (d_88_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_88_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_88_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_89_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_89_valid                            ), //i
    .s_axis_a_tdata       (d_89_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_89_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_89_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_90_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_90_valid                            ), //i
    .s_axis_a_tdata       (d_90_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_90_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_90_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_91_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_91_valid                            ), //i
    .s_axis_a_tdata       (d_91_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_91_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_91_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_92_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_92_valid                            ), //i
    .s_axis_a_tdata       (d_92_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_92_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_92_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_93_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_93_valid                            ), //i
    .s_axis_a_tdata       (d_93_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_93_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_93_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_94_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_94_valid                            ), //i
    .s_axis_a_tdata       (d_94_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_94_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_94_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_95_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_95_valid                            ), //i
    .s_axis_a_tdata       (d_95_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_95_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_95_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_96_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_96_valid                            ), //i
    .s_axis_a_tdata       (d_96_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_96_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_96_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_97_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_97_valid                            ), //i
    .s_axis_a_tdata       (d_97_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_97_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_97_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_98_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_98_valid                            ), //i
    .s_axis_a_tdata       (d_98_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_98_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_98_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_99_from_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (d_99_valid                            ), //i
    .s_axis_a_tdata       (d_99_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_99_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_99_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_100_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_100_valid                            ), //i
    .s_axis_a_tdata       (d_100_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_100_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_100_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_101_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_101_valid                            ), //i
    .s_axis_a_tdata       (d_101_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_101_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_101_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_102_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_102_valid                            ), //i
    .s_axis_a_tdata       (d_102_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_102_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_102_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_103_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_103_valid                            ), //i
    .s_axis_a_tdata       (d_103_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_103_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_103_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_104_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_104_valid                            ), //i
    .s_axis_a_tdata       (d_104_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_104_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_104_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_105_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_105_valid                            ), //i
    .s_axis_a_tdata       (d_105_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_105_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_105_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_106_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_106_valid                            ), //i
    .s_axis_a_tdata       (d_106_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_106_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_106_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_107_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_107_valid                            ), //i
    .s_axis_a_tdata       (d_107_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_107_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_107_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_108_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_108_valid                            ), //i
    .s_axis_a_tdata       (d_108_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_108_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_108_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_109_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_109_valid                            ), //i
    .s_axis_a_tdata       (d_109_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_109_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_109_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_110_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_110_valid                            ), //i
    .s_axis_a_tdata       (d_110_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_110_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_110_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_111_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_111_valid                            ), //i
    .s_axis_a_tdata       (d_111_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_111_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_111_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_112_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_112_valid                            ), //i
    .s_axis_a_tdata       (d_112_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_112_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_112_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_113_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_113_valid                            ), //i
    .s_axis_a_tdata       (d_113_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_113_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_113_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_114_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_114_valid                            ), //i
    .s_axis_a_tdata       (d_114_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_114_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_114_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_115_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_115_valid                            ), //i
    .s_axis_a_tdata       (d_115_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_115_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_115_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_116_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_116_valid                            ), //i
    .s_axis_a_tdata       (d_116_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_116_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_116_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_117_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_117_valid                            ), //i
    .s_axis_a_tdata       (d_117_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_117_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_117_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_118_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_118_valid                            ), //i
    .s_axis_a_tdata       (d_118_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_118_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_118_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_119_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_119_valid                            ), //i
    .s_axis_a_tdata       (d_119_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_119_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_119_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_120_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_120_valid                            ), //i
    .s_axis_a_tdata       (d_120_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_120_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_120_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_121_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_121_valid                            ), //i
    .s_axis_a_tdata       (d_121_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_121_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_121_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_122_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_122_valid                            ), //i
    .s_axis_a_tdata       (d_122_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_122_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_122_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_123_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_123_valid                            ), //i
    .s_axis_a_tdata       (d_123_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_123_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_123_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_124_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_124_valid                            ), //i
    .s_axis_a_tdata       (d_124_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_124_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_124_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_125_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_125_valid                            ), //i
    .s_axis_a_tdata       (d_125_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_125_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_125_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_126_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_126_valid                            ), //i
    .s_axis_a_tdata       (d_126_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_126_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_126_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_127_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (d_127_valid                            ), //i
    .s_axis_a_tdata       (d_127_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_127_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_127_from_ip_m_axis_result_tdata[15:0])  //o
  );
  assign int8InVld = (inputData_tvalid && selInt8);
  assign int4InVld = (inputData_tvalid && (! selInt8));
  assign zeroInt4_tready = zeroMux_io_inputs_0_ready;
  assign zeroInt8_tready = zeroMux_io_inputs_1_ready;
  assign zeroMux_io_select = selInt8;
  assign int8Vld = (int8VldFlip && int8InVld);
  assign t_int8Data_0 = {inputData_tdata,dataDly};
  assign int8Data_0 = t_int8Data_0[7 : 0];
  assign int8Data_1 = t_int8Data_0[15 : 8];
  assign int8Data_2 = t_int8Data_0[23 : 16];
  assign int8Data_3 = t_int8Data_0[31 : 24];
  assign int8Data_4 = t_int8Data_0[39 : 32];
  assign int8Data_5 = t_int8Data_0[47 : 40];
  assign int8Data_6 = t_int8Data_0[55 : 48];
  assign int8Data_7 = t_int8Data_0[63 : 56];
  assign int8Data_8 = t_int8Data_0[71 : 64];
  assign int8Data_9 = t_int8Data_0[79 : 72];
  assign int8Data_10 = t_int8Data_0[87 : 80];
  assign int8Data_11 = t_int8Data_0[95 : 88];
  assign int8Data_12 = t_int8Data_0[103 : 96];
  assign int8Data_13 = t_int8Data_0[111 : 104];
  assign int8Data_14 = t_int8Data_0[119 : 112];
  assign int8Data_15 = t_int8Data_0[127 : 120];
  assign int8Data_16 = t_int8Data_0[135 : 128];
  assign int8Data_17 = t_int8Data_0[143 : 136];
  assign int8Data_18 = t_int8Data_0[151 : 144];
  assign int8Data_19 = t_int8Data_0[159 : 152];
  assign int8Data_20 = t_int8Data_0[167 : 160];
  assign int8Data_21 = t_int8Data_0[175 : 168];
  assign int8Data_22 = t_int8Data_0[183 : 176];
  assign int8Data_23 = t_int8Data_0[191 : 184];
  assign int8Data_24 = t_int8Data_0[199 : 192];
  assign int8Data_25 = t_int8Data_0[207 : 200];
  assign int8Data_26 = t_int8Data_0[215 : 208];
  assign int8Data_27 = t_int8Data_0[223 : 216];
  assign int8Data_28 = t_int8Data_0[231 : 224];
  assign int8Data_29 = t_int8Data_0[239 : 232];
  assign int8Data_30 = t_int8Data_0[247 : 240];
  assign int8Data_31 = t_int8Data_0[255 : 248];
  assign int8Data_32 = t_int8Data_0[263 : 256];
  assign int8Data_33 = t_int8Data_0[271 : 264];
  assign int8Data_34 = t_int8Data_0[279 : 272];
  assign int8Data_35 = t_int8Data_0[287 : 280];
  assign int8Data_36 = t_int8Data_0[295 : 288];
  assign int8Data_37 = t_int8Data_0[303 : 296];
  assign int8Data_38 = t_int8Data_0[311 : 304];
  assign int8Data_39 = t_int8Data_0[319 : 312];
  assign int8Data_40 = t_int8Data_0[327 : 320];
  assign int8Data_41 = t_int8Data_0[335 : 328];
  assign int8Data_42 = t_int8Data_0[343 : 336];
  assign int8Data_43 = t_int8Data_0[351 : 344];
  assign int8Data_44 = t_int8Data_0[359 : 352];
  assign int8Data_45 = t_int8Data_0[367 : 360];
  assign int8Data_46 = t_int8Data_0[375 : 368];
  assign int8Data_47 = t_int8Data_0[383 : 376];
  assign int8Data_48 = t_int8Data_0[391 : 384];
  assign int8Data_49 = t_int8Data_0[399 : 392];
  assign int8Data_50 = t_int8Data_0[407 : 400];
  assign int8Data_51 = t_int8Data_0[415 : 408];
  assign int8Data_52 = t_int8Data_0[423 : 416];
  assign int8Data_53 = t_int8Data_0[431 : 424];
  assign int8Data_54 = t_int8Data_0[439 : 432];
  assign int8Data_55 = t_int8Data_0[447 : 440];
  assign int8Data_56 = t_int8Data_0[455 : 448];
  assign int8Data_57 = t_int8Data_0[463 : 456];
  assign int8Data_58 = t_int8Data_0[471 : 464];
  assign int8Data_59 = t_int8Data_0[479 : 472];
  assign int8Data_60 = t_int8Data_0[487 : 480];
  assign int8Data_61 = t_int8Data_0[495 : 488];
  assign int8Data_62 = t_int8Data_0[503 : 496];
  assign int8Data_63 = t_int8Data_0[511 : 504];
  assign int8Data_64 = t_int8Data_0[519 : 512];
  assign int8Data_65 = t_int8Data_0[527 : 520];
  assign int8Data_66 = t_int8Data_0[535 : 528];
  assign int8Data_67 = t_int8Data_0[543 : 536];
  assign int8Data_68 = t_int8Data_0[551 : 544];
  assign int8Data_69 = t_int8Data_0[559 : 552];
  assign int8Data_70 = t_int8Data_0[567 : 560];
  assign int8Data_71 = t_int8Data_0[575 : 568];
  assign int8Data_72 = t_int8Data_0[583 : 576];
  assign int8Data_73 = t_int8Data_0[591 : 584];
  assign int8Data_74 = t_int8Data_0[599 : 592];
  assign int8Data_75 = t_int8Data_0[607 : 600];
  assign int8Data_76 = t_int8Data_0[615 : 608];
  assign int8Data_77 = t_int8Data_0[623 : 616];
  assign int8Data_78 = t_int8Data_0[631 : 624];
  assign int8Data_79 = t_int8Data_0[639 : 632];
  assign int8Data_80 = t_int8Data_0[647 : 640];
  assign int8Data_81 = t_int8Data_0[655 : 648];
  assign int8Data_82 = t_int8Data_0[663 : 656];
  assign int8Data_83 = t_int8Data_0[671 : 664];
  assign int8Data_84 = t_int8Data_0[679 : 672];
  assign int8Data_85 = t_int8Data_0[687 : 680];
  assign int8Data_86 = t_int8Data_0[695 : 688];
  assign int8Data_87 = t_int8Data_0[703 : 696];
  assign int8Data_88 = t_int8Data_0[711 : 704];
  assign int8Data_89 = t_int8Data_0[719 : 712];
  assign int8Data_90 = t_int8Data_0[727 : 720];
  assign int8Data_91 = t_int8Data_0[735 : 728];
  assign int8Data_92 = t_int8Data_0[743 : 736];
  assign int8Data_93 = t_int8Data_0[751 : 744];
  assign int8Data_94 = t_int8Data_0[759 : 752];
  assign int8Data_95 = t_int8Data_0[767 : 760];
  assign int8Data_96 = t_int8Data_0[775 : 768];
  assign int8Data_97 = t_int8Data_0[783 : 776];
  assign int8Data_98 = t_int8Data_0[791 : 784];
  assign int8Data_99 = t_int8Data_0[799 : 792];
  assign int8Data_100 = t_int8Data_0[807 : 800];
  assign int8Data_101 = t_int8Data_0[815 : 808];
  assign int8Data_102 = t_int8Data_0[823 : 816];
  assign int8Data_103 = t_int8Data_0[831 : 824];
  assign int8Data_104 = t_int8Data_0[839 : 832];
  assign int8Data_105 = t_int8Data_0[847 : 840];
  assign int8Data_106 = t_int8Data_0[855 : 848];
  assign int8Data_107 = t_int8Data_0[863 : 856];
  assign int8Data_108 = t_int8Data_0[871 : 864];
  assign int8Data_109 = t_int8Data_0[879 : 872];
  assign int8Data_110 = t_int8Data_0[887 : 880];
  assign int8Data_111 = t_int8Data_0[895 : 888];
  assign int8Data_112 = t_int8Data_0[903 : 896];
  assign int8Data_113 = t_int8Data_0[911 : 904];
  assign int8Data_114 = t_int8Data_0[919 : 912];
  assign int8Data_115 = t_int8Data_0[927 : 920];
  assign int8Data_116 = t_int8Data_0[935 : 928];
  assign int8Data_117 = t_int8Data_0[943 : 936];
  assign int8Data_118 = t_int8Data_0[951 : 944];
  assign int8Data_119 = t_int8Data_0[959 : 952];
  assign int8Data_120 = t_int8Data_0[967 : 960];
  assign int8Data_121 = t_int8Data_0[975 : 968];
  assign int8Data_122 = t_int8Data_0[983 : 976];
  assign int8Data_123 = t_int8Data_0[991 : 984];
  assign int8Data_124 = t_int8Data_0[999 : 992];
  assign int8Data_125 = t_int8Data_0[1007 : 1000];
  assign int8Data_126 = t_int8Data_0[1015 : 1008];
  assign int8Data_127 = t_int8Data_0[1023 : 1016];
  assign int4Data_0 = {4'd0, t_int4Data_0};
  assign int4Data_1 = {4'd0, t_int4Data_1};
  assign int4Data_2 = {4'd0, t_int4Data_2};
  assign int4Data_3 = {4'd0, t_int4Data_3};
  assign int4Data_4 = {4'd0, t_int4Data_4};
  assign int4Data_5 = {4'd0, t_int4Data_5};
  assign int4Data_6 = {4'd0, t_int4Data_6};
  assign int4Data_7 = {4'd0, t_int4Data_7};
  assign int4Data_8 = {4'd0, t_int4Data_8};
  assign int4Data_9 = {4'd0, t_int4Data_9};
  assign int4Data_10 = {4'd0, t_int4Data_10};
  assign int4Data_11 = {4'd0, t_int4Data_11};
  assign int4Data_12 = {4'd0, t_int4Data_12};
  assign int4Data_13 = {4'd0, t_int4Data_13};
  assign int4Data_14 = {4'd0, t_int4Data_14};
  assign int4Data_15 = {4'd0, t_int4Data_15};
  assign int4Data_16 = {4'd0, t_int4Data_16};
  assign int4Data_17 = {4'd0, t_int4Data_17};
  assign int4Data_18 = {4'd0, t_int4Data_18};
  assign int4Data_19 = {4'd0, t_int4Data_19};
  assign int4Data_20 = {4'd0, t_int4Data_20};
  assign int4Data_21 = {4'd0, t_int4Data_21};
  assign int4Data_22 = {4'd0, t_int4Data_22};
  assign int4Data_23 = {4'd0, t_int4Data_23};
  assign int4Data_24 = {4'd0, t_int4Data_24};
  assign int4Data_25 = {4'd0, t_int4Data_25};
  assign int4Data_26 = {4'd0, t_int4Data_26};
  assign int4Data_27 = {4'd0, t_int4Data_27};
  assign int4Data_28 = {4'd0, t_int4Data_28};
  assign int4Data_29 = {4'd0, t_int4Data_29};
  assign int4Data_30 = {4'd0, t_int4Data_30};
  assign int4Data_31 = {4'd0, t_int4Data_31};
  assign int4Data_32 = {4'd0, t_int4Data_32};
  assign int4Data_33 = {4'd0, t_int4Data_33};
  assign int4Data_34 = {4'd0, t_int4Data_34};
  assign int4Data_35 = {4'd0, t_int4Data_35};
  assign int4Data_36 = {4'd0, t_int4Data_36};
  assign int4Data_37 = {4'd0, t_int4Data_37};
  assign int4Data_38 = {4'd0, t_int4Data_38};
  assign int4Data_39 = {4'd0, t_int4Data_39};
  assign int4Data_40 = {4'd0, t_int4Data_40};
  assign int4Data_41 = {4'd0, t_int4Data_41};
  assign int4Data_42 = {4'd0, t_int4Data_42};
  assign int4Data_43 = {4'd0, t_int4Data_43};
  assign int4Data_44 = {4'd0, t_int4Data_44};
  assign int4Data_45 = {4'd0, t_int4Data_45};
  assign int4Data_46 = {4'd0, t_int4Data_46};
  assign int4Data_47 = {4'd0, t_int4Data_47};
  assign int4Data_48 = {4'd0, t_int4Data_48};
  assign int4Data_49 = {4'd0, t_int4Data_49};
  assign int4Data_50 = {4'd0, t_int4Data_50};
  assign int4Data_51 = {4'd0, t_int4Data_51};
  assign int4Data_52 = {4'd0, t_int4Data_52};
  assign int4Data_53 = {4'd0, t_int4Data_53};
  assign int4Data_54 = {4'd0, t_int4Data_54};
  assign int4Data_55 = {4'd0, t_int4Data_55};
  assign int4Data_56 = {4'd0, t_int4Data_56};
  assign int4Data_57 = {4'd0, t_int4Data_57};
  assign int4Data_58 = {4'd0, t_int4Data_58};
  assign int4Data_59 = {4'd0, t_int4Data_59};
  assign int4Data_60 = {4'd0, t_int4Data_60};
  assign int4Data_61 = {4'd0, t_int4Data_61};
  assign int4Data_62 = {4'd0, t_int4Data_62};
  assign int4Data_63 = {4'd0, t_int4Data_63};
  assign int4Data_64 = {4'd0, t_int4Data_64};
  assign int4Data_65 = {4'd0, t_int4Data_65};
  assign int4Data_66 = {4'd0, t_int4Data_66};
  assign int4Data_67 = {4'd0, t_int4Data_67};
  assign int4Data_68 = {4'd0, t_int4Data_68};
  assign int4Data_69 = {4'd0, t_int4Data_69};
  assign int4Data_70 = {4'd0, t_int4Data_70};
  assign int4Data_71 = {4'd0, t_int4Data_71};
  assign int4Data_72 = {4'd0, t_int4Data_72};
  assign int4Data_73 = {4'd0, t_int4Data_73};
  assign int4Data_74 = {4'd0, t_int4Data_74};
  assign int4Data_75 = {4'd0, t_int4Data_75};
  assign int4Data_76 = {4'd0, t_int4Data_76};
  assign int4Data_77 = {4'd0, t_int4Data_77};
  assign int4Data_78 = {4'd0, t_int4Data_78};
  assign int4Data_79 = {4'd0, t_int4Data_79};
  assign int4Data_80 = {4'd0, t_int4Data_80};
  assign int4Data_81 = {4'd0, t_int4Data_81};
  assign int4Data_82 = {4'd0, t_int4Data_82};
  assign int4Data_83 = {4'd0, t_int4Data_83};
  assign int4Data_84 = {4'd0, t_int4Data_84};
  assign int4Data_85 = {4'd0, t_int4Data_85};
  assign int4Data_86 = {4'd0, t_int4Data_86};
  assign int4Data_87 = {4'd0, t_int4Data_87};
  assign int4Data_88 = {4'd0, t_int4Data_88};
  assign int4Data_89 = {4'd0, t_int4Data_89};
  assign int4Data_90 = {4'd0, t_int4Data_90};
  assign int4Data_91 = {4'd0, t_int4Data_91};
  assign int4Data_92 = {4'd0, t_int4Data_92};
  assign int4Data_93 = {4'd0, t_int4Data_93};
  assign int4Data_94 = {4'd0, t_int4Data_94};
  assign int4Data_95 = {4'd0, t_int4Data_95};
  assign int4Data_96 = {4'd0, t_int4Data_96};
  assign int4Data_97 = {4'd0, t_int4Data_97};
  assign int4Data_98 = {4'd0, t_int4Data_98};
  assign int4Data_99 = {4'd0, t_int4Data_99};
  assign int4Data_100 = {4'd0, t_int4Data_100};
  assign int4Data_101 = {4'd0, t_int4Data_101};
  assign int4Data_102 = {4'd0, t_int4Data_102};
  assign int4Data_103 = {4'd0, t_int4Data_103};
  assign int4Data_104 = {4'd0, t_int4Data_104};
  assign int4Data_105 = {4'd0, t_int4Data_105};
  assign int4Data_106 = {4'd0, t_int4Data_106};
  assign int4Data_107 = {4'd0, t_int4Data_107};
  assign int4Data_108 = {4'd0, t_int4Data_108};
  assign int4Data_109 = {4'd0, t_int4Data_109};
  assign int4Data_110 = {4'd0, t_int4Data_110};
  assign int4Data_111 = {4'd0, t_int4Data_111};
  assign int4Data_112 = {4'd0, t_int4Data_112};
  assign int4Data_113 = {4'd0, t_int4Data_113};
  assign int4Data_114 = {4'd0, t_int4Data_114};
  assign int4Data_115 = {4'd0, t_int4Data_115};
  assign int4Data_116 = {4'd0, t_int4Data_116};
  assign int4Data_117 = {4'd0, t_int4Data_117};
  assign int4Data_118 = {4'd0, t_int4Data_118};
  assign int4Data_119 = {4'd0, t_int4Data_119};
  assign int4Data_120 = {4'd0, t_int4Data_120};
  assign int4Data_121 = {4'd0, t_int4Data_121};
  assign int4Data_122 = {4'd0, t_int4Data_122};
  assign int4Data_123 = {4'd0, t_int4Data_123};
  assign int4Data_124 = {4'd0, t_int4Data_124};
  assign int4Data_125 = {4'd0, t_int4Data_125};
  assign int4Data_126 = {4'd0, t_int4Data_126};
  assign int4Data_127 = {4'd0, t_int4Data_127};
  assign vldConv = (selInt8 ? int8Vld : int4InVld);
  assign dataConv_0 = (selInt8 ? int8Data_0 : int4Data_0);
  assign dataConv_1 = (selInt8 ? int8Data_1 : int4Data_1);
  assign dataConv_2 = (selInt8 ? int8Data_2 : int4Data_2);
  assign dataConv_3 = (selInt8 ? int8Data_3 : int4Data_3);
  assign dataConv_4 = (selInt8 ? int8Data_4 : int4Data_4);
  assign dataConv_5 = (selInt8 ? int8Data_5 : int4Data_5);
  assign dataConv_6 = (selInt8 ? int8Data_6 : int4Data_6);
  assign dataConv_7 = (selInt8 ? int8Data_7 : int4Data_7);
  assign dataConv_8 = (selInt8 ? int8Data_8 : int4Data_8);
  assign dataConv_9 = (selInt8 ? int8Data_9 : int4Data_9);
  assign dataConv_10 = (selInt8 ? int8Data_10 : int4Data_10);
  assign dataConv_11 = (selInt8 ? int8Data_11 : int4Data_11);
  assign dataConv_12 = (selInt8 ? int8Data_12 : int4Data_12);
  assign dataConv_13 = (selInt8 ? int8Data_13 : int4Data_13);
  assign dataConv_14 = (selInt8 ? int8Data_14 : int4Data_14);
  assign dataConv_15 = (selInt8 ? int8Data_15 : int4Data_15);
  assign dataConv_16 = (selInt8 ? int8Data_16 : int4Data_16);
  assign dataConv_17 = (selInt8 ? int8Data_17 : int4Data_17);
  assign dataConv_18 = (selInt8 ? int8Data_18 : int4Data_18);
  assign dataConv_19 = (selInt8 ? int8Data_19 : int4Data_19);
  assign dataConv_20 = (selInt8 ? int8Data_20 : int4Data_20);
  assign dataConv_21 = (selInt8 ? int8Data_21 : int4Data_21);
  assign dataConv_22 = (selInt8 ? int8Data_22 : int4Data_22);
  assign dataConv_23 = (selInt8 ? int8Data_23 : int4Data_23);
  assign dataConv_24 = (selInt8 ? int8Data_24 : int4Data_24);
  assign dataConv_25 = (selInt8 ? int8Data_25 : int4Data_25);
  assign dataConv_26 = (selInt8 ? int8Data_26 : int4Data_26);
  assign dataConv_27 = (selInt8 ? int8Data_27 : int4Data_27);
  assign dataConv_28 = (selInt8 ? int8Data_28 : int4Data_28);
  assign dataConv_29 = (selInt8 ? int8Data_29 : int4Data_29);
  assign dataConv_30 = (selInt8 ? int8Data_30 : int4Data_30);
  assign dataConv_31 = (selInt8 ? int8Data_31 : int4Data_31);
  assign dataConv_32 = (selInt8 ? int8Data_32 : int4Data_32);
  assign dataConv_33 = (selInt8 ? int8Data_33 : int4Data_33);
  assign dataConv_34 = (selInt8 ? int8Data_34 : int4Data_34);
  assign dataConv_35 = (selInt8 ? int8Data_35 : int4Data_35);
  assign dataConv_36 = (selInt8 ? int8Data_36 : int4Data_36);
  assign dataConv_37 = (selInt8 ? int8Data_37 : int4Data_37);
  assign dataConv_38 = (selInt8 ? int8Data_38 : int4Data_38);
  assign dataConv_39 = (selInt8 ? int8Data_39 : int4Data_39);
  assign dataConv_40 = (selInt8 ? int8Data_40 : int4Data_40);
  assign dataConv_41 = (selInt8 ? int8Data_41 : int4Data_41);
  assign dataConv_42 = (selInt8 ? int8Data_42 : int4Data_42);
  assign dataConv_43 = (selInt8 ? int8Data_43 : int4Data_43);
  assign dataConv_44 = (selInt8 ? int8Data_44 : int4Data_44);
  assign dataConv_45 = (selInt8 ? int8Data_45 : int4Data_45);
  assign dataConv_46 = (selInt8 ? int8Data_46 : int4Data_46);
  assign dataConv_47 = (selInt8 ? int8Data_47 : int4Data_47);
  assign dataConv_48 = (selInt8 ? int8Data_48 : int4Data_48);
  assign dataConv_49 = (selInt8 ? int8Data_49 : int4Data_49);
  assign dataConv_50 = (selInt8 ? int8Data_50 : int4Data_50);
  assign dataConv_51 = (selInt8 ? int8Data_51 : int4Data_51);
  assign dataConv_52 = (selInt8 ? int8Data_52 : int4Data_52);
  assign dataConv_53 = (selInt8 ? int8Data_53 : int4Data_53);
  assign dataConv_54 = (selInt8 ? int8Data_54 : int4Data_54);
  assign dataConv_55 = (selInt8 ? int8Data_55 : int4Data_55);
  assign dataConv_56 = (selInt8 ? int8Data_56 : int4Data_56);
  assign dataConv_57 = (selInt8 ? int8Data_57 : int4Data_57);
  assign dataConv_58 = (selInt8 ? int8Data_58 : int4Data_58);
  assign dataConv_59 = (selInt8 ? int8Data_59 : int4Data_59);
  assign dataConv_60 = (selInt8 ? int8Data_60 : int4Data_60);
  assign dataConv_61 = (selInt8 ? int8Data_61 : int4Data_61);
  assign dataConv_62 = (selInt8 ? int8Data_62 : int4Data_62);
  assign dataConv_63 = (selInt8 ? int8Data_63 : int4Data_63);
  assign dataConv_64 = (selInt8 ? int8Data_64 : int4Data_64);
  assign dataConv_65 = (selInt8 ? int8Data_65 : int4Data_65);
  assign dataConv_66 = (selInt8 ? int8Data_66 : int4Data_66);
  assign dataConv_67 = (selInt8 ? int8Data_67 : int4Data_67);
  assign dataConv_68 = (selInt8 ? int8Data_68 : int4Data_68);
  assign dataConv_69 = (selInt8 ? int8Data_69 : int4Data_69);
  assign dataConv_70 = (selInt8 ? int8Data_70 : int4Data_70);
  assign dataConv_71 = (selInt8 ? int8Data_71 : int4Data_71);
  assign dataConv_72 = (selInt8 ? int8Data_72 : int4Data_72);
  assign dataConv_73 = (selInt8 ? int8Data_73 : int4Data_73);
  assign dataConv_74 = (selInt8 ? int8Data_74 : int4Data_74);
  assign dataConv_75 = (selInt8 ? int8Data_75 : int4Data_75);
  assign dataConv_76 = (selInt8 ? int8Data_76 : int4Data_76);
  assign dataConv_77 = (selInt8 ? int8Data_77 : int4Data_77);
  assign dataConv_78 = (selInt8 ? int8Data_78 : int4Data_78);
  assign dataConv_79 = (selInt8 ? int8Data_79 : int4Data_79);
  assign dataConv_80 = (selInt8 ? int8Data_80 : int4Data_80);
  assign dataConv_81 = (selInt8 ? int8Data_81 : int4Data_81);
  assign dataConv_82 = (selInt8 ? int8Data_82 : int4Data_82);
  assign dataConv_83 = (selInt8 ? int8Data_83 : int4Data_83);
  assign dataConv_84 = (selInt8 ? int8Data_84 : int4Data_84);
  assign dataConv_85 = (selInt8 ? int8Data_85 : int4Data_85);
  assign dataConv_86 = (selInt8 ? int8Data_86 : int4Data_86);
  assign dataConv_87 = (selInt8 ? int8Data_87 : int4Data_87);
  assign dataConv_88 = (selInt8 ? int8Data_88 : int4Data_88);
  assign dataConv_89 = (selInt8 ? int8Data_89 : int4Data_89);
  assign dataConv_90 = (selInt8 ? int8Data_90 : int4Data_90);
  assign dataConv_91 = (selInt8 ? int8Data_91 : int4Data_91);
  assign dataConv_92 = (selInt8 ? int8Data_92 : int4Data_92);
  assign dataConv_93 = (selInt8 ? int8Data_93 : int4Data_93);
  assign dataConv_94 = (selInt8 ? int8Data_94 : int4Data_94);
  assign dataConv_95 = (selInt8 ? int8Data_95 : int4Data_95);
  assign dataConv_96 = (selInt8 ? int8Data_96 : int4Data_96);
  assign dataConv_97 = (selInt8 ? int8Data_97 : int4Data_97);
  assign dataConv_98 = (selInt8 ? int8Data_98 : int4Data_98);
  assign dataConv_99 = (selInt8 ? int8Data_99 : int4Data_99);
  assign dataConv_100 = (selInt8 ? int8Data_100 : int4Data_100);
  assign dataConv_101 = (selInt8 ? int8Data_101 : int4Data_101);
  assign dataConv_102 = (selInt8 ? int8Data_102 : int4Data_102);
  assign dataConv_103 = (selInt8 ? int8Data_103 : int4Data_103);
  assign dataConv_104 = (selInt8 ? int8Data_104 : int4Data_104);
  assign dataConv_105 = (selInt8 ? int8Data_105 : int4Data_105);
  assign dataConv_106 = (selInt8 ? int8Data_106 : int4Data_106);
  assign dataConv_107 = (selInt8 ? int8Data_107 : int4Data_107);
  assign dataConv_108 = (selInt8 ? int8Data_108 : int4Data_108);
  assign dataConv_109 = (selInt8 ? int8Data_109 : int4Data_109);
  assign dataConv_110 = (selInt8 ? int8Data_110 : int4Data_110);
  assign dataConv_111 = (selInt8 ? int8Data_111 : int4Data_111);
  assign dataConv_112 = (selInt8 ? int8Data_112 : int4Data_112);
  assign dataConv_113 = (selInt8 ? int8Data_113 : int4Data_113);
  assign dataConv_114 = (selInt8 ? int8Data_114 : int4Data_114);
  assign dataConv_115 = (selInt8 ? int8Data_115 : int4Data_115);
  assign dataConv_116 = (selInt8 ? int8Data_116 : int4Data_116);
  assign dataConv_117 = (selInt8 ? int8Data_117 : int4Data_117);
  assign dataConv_118 = (selInt8 ? int8Data_118 : int4Data_118);
  assign dataConv_119 = (selInt8 ? int8Data_119 : int4Data_119);
  assign dataConv_120 = (selInt8 ? int8Data_120 : int4Data_120);
  assign dataConv_121 = (selInt8 ? int8Data_121 : int4Data_121);
  assign dataConv_122 = (selInt8 ? int8Data_122 : int4Data_122);
  assign dataConv_123 = (selInt8 ? int8Data_123 : int4Data_123);
  assign dataConv_124 = (selInt8 ? int8Data_124 : int4Data_124);
  assign dataConv_125 = (selInt8 ? int8Data_125 : int4Data_125);
  assign dataConv_126 = (selInt8 ? int8Data_126 : int4Data_126);
  assign dataConv_127 = (selInt8 ? int8Data_127 : int4Data_127);
  assign dSub_0 = t_dSub_0;
  assign dSub_1 = t_dSub_1;
  assign dSub_2 = t_dSub_2;
  assign dSub_3 = t_dSub_3;
  assign dSub_4 = t_dSub_4;
  assign dSub_5 = t_dSub_5;
  assign dSub_6 = t_dSub_6;
  assign dSub_7 = t_dSub_7;
  assign dSub_8 = t_dSub_8;
  assign dSub_9 = t_dSub_9;
  assign dSub_10 = t_dSub_10;
  assign dSub_11 = t_dSub_11;
  assign dSub_12 = t_dSub_12;
  assign dSub_13 = t_dSub_13;
  assign dSub_14 = t_dSub_14;
  assign dSub_15 = t_dSub_15;
  assign dSub_16 = t_dSub_16;
  assign dSub_17 = t_dSub_17;
  assign dSub_18 = t_dSub_18;
  assign dSub_19 = t_dSub_19;
  assign dSub_20 = t_dSub_20;
  assign dSub_21 = t_dSub_21;
  assign dSub_22 = t_dSub_22;
  assign dSub_23 = t_dSub_23;
  assign dSub_24 = t_dSub_24;
  assign dSub_25 = t_dSub_25;
  assign dSub_26 = t_dSub_26;
  assign dSub_27 = t_dSub_27;
  assign dSub_28 = t_dSub_28;
  assign dSub_29 = t_dSub_29;
  assign dSub_30 = t_dSub_30;
  assign dSub_31 = t_dSub_31;
  assign dSub_32 = t_dSub_32;
  assign dSub_33 = t_dSub_33;
  assign dSub_34 = t_dSub_34;
  assign dSub_35 = t_dSub_35;
  assign dSub_36 = t_dSub_36;
  assign dSub_37 = t_dSub_37;
  assign dSub_38 = t_dSub_38;
  assign dSub_39 = t_dSub_39;
  assign dSub_40 = t_dSub_40;
  assign dSub_41 = t_dSub_41;
  assign dSub_42 = t_dSub_42;
  assign dSub_43 = t_dSub_43;
  assign dSub_44 = t_dSub_44;
  assign dSub_45 = t_dSub_45;
  assign dSub_46 = t_dSub_46;
  assign dSub_47 = t_dSub_47;
  assign dSub_48 = t_dSub_48;
  assign dSub_49 = t_dSub_49;
  assign dSub_50 = t_dSub_50;
  assign dSub_51 = t_dSub_51;
  assign dSub_52 = t_dSub_52;
  assign dSub_53 = t_dSub_53;
  assign dSub_54 = t_dSub_54;
  assign dSub_55 = t_dSub_55;
  assign dSub_56 = t_dSub_56;
  assign dSub_57 = t_dSub_57;
  assign dSub_58 = t_dSub_58;
  assign dSub_59 = t_dSub_59;
  assign dSub_60 = t_dSub_60;
  assign dSub_61 = t_dSub_61;
  assign dSub_62 = t_dSub_62;
  assign dSub_63 = t_dSub_63;
  assign dSub_64 = t_dSub_64;
  assign dSub_65 = t_dSub_65;
  assign dSub_66 = t_dSub_66;
  assign dSub_67 = t_dSub_67;
  assign dSub_68 = t_dSub_68;
  assign dSub_69 = t_dSub_69;
  assign dSub_70 = t_dSub_70;
  assign dSub_71 = t_dSub_71;
  assign dSub_72 = t_dSub_72;
  assign dSub_73 = t_dSub_73;
  assign dSub_74 = t_dSub_74;
  assign dSub_75 = t_dSub_75;
  assign dSub_76 = t_dSub_76;
  assign dSub_77 = t_dSub_77;
  assign dSub_78 = t_dSub_78;
  assign dSub_79 = t_dSub_79;
  assign dSub_80 = t_dSub_80;
  assign dSub_81 = t_dSub_81;
  assign dSub_82 = t_dSub_82;
  assign dSub_83 = t_dSub_83;
  assign dSub_84 = t_dSub_84;
  assign dSub_85 = t_dSub_85;
  assign dSub_86 = t_dSub_86;
  assign dSub_87 = t_dSub_87;
  assign dSub_88 = t_dSub_88;
  assign dSub_89 = t_dSub_89;
  assign dSub_90 = t_dSub_90;
  assign dSub_91 = t_dSub_91;
  assign dSub_92 = t_dSub_92;
  assign dSub_93 = t_dSub_93;
  assign dSub_94 = t_dSub_94;
  assign dSub_95 = t_dSub_95;
  assign dSub_96 = t_dSub_96;
  assign dSub_97 = t_dSub_97;
  assign dSub_98 = t_dSub_98;
  assign dSub_99 = t_dSub_99;
  assign dSub_100 = t_dSub_100;
  assign dSub_101 = t_dSub_101;
  assign dSub_102 = t_dSub_102;
  assign dSub_103 = t_dSub_103;
  assign dSub_104 = t_dSub_104;
  assign dSub_105 = t_dSub_105;
  assign dSub_106 = t_dSub_106;
  assign dSub_107 = t_dSub_107;
  assign dSub_108 = t_dSub_108;
  assign dSub_109 = t_dSub_109;
  assign dSub_110 = t_dSub_110;
  assign dSub_111 = t_dSub_111;
  assign dSub_112 = t_dSub_112;
  assign dSub_113 = t_dSub_113;
  assign dSub_114 = t_dSub_114;
  assign dSub_115 = t_dSub_115;
  assign dSub_116 = t_dSub_116;
  assign dSub_117 = t_dSub_117;
  assign dSub_118 = t_dSub_118;
  assign dSub_119 = t_dSub_119;
  assign dSub_120 = t_dSub_120;
  assign dSub_121 = t_dSub_121;
  assign dSub_122 = t_dSub_122;
  assign dSub_123 = t_dSub_123;
  assign dSub_124 = t_dSub_124;
  assign dSub_125 = t_dSub_125;
  assign dSub_126 = t_dSub_126;
  assign dSub_127 = t_dSub_127;
  assign dDly_0 = {7'd0, dSub_0};
  assign dDly_1 = {7'd0, dSub_1};
  assign dDly_2 = {7'd0, dSub_2};
  assign dDly_3 = {7'd0, dSub_3};
  assign dDly_4 = {7'd0, dSub_4};
  assign dDly_5 = {7'd0, dSub_5};
  assign dDly_6 = {7'd0, dSub_6};
  assign dDly_7 = {7'd0, dSub_7};
  assign dDly_8 = {7'd0, dSub_8};
  assign dDly_9 = {7'd0, dSub_9};
  assign dDly_10 = {7'd0, dSub_10};
  assign dDly_11 = {7'd0, dSub_11};
  assign dDly_12 = {7'd0, dSub_12};
  assign dDly_13 = {7'd0, dSub_13};
  assign dDly_14 = {7'd0, dSub_14};
  assign dDly_15 = {7'd0, dSub_15};
  assign dDly_16 = {7'd0, dSub_16};
  assign dDly_17 = {7'd0, dSub_17};
  assign dDly_18 = {7'd0, dSub_18};
  assign dDly_19 = {7'd0, dSub_19};
  assign dDly_20 = {7'd0, dSub_20};
  assign dDly_21 = {7'd0, dSub_21};
  assign dDly_22 = {7'd0, dSub_22};
  assign dDly_23 = {7'd0, dSub_23};
  assign dDly_24 = {7'd0, dSub_24};
  assign dDly_25 = {7'd0, dSub_25};
  assign dDly_26 = {7'd0, dSub_26};
  assign dDly_27 = {7'd0, dSub_27};
  assign dDly_28 = {7'd0, dSub_28};
  assign dDly_29 = {7'd0, dSub_29};
  assign dDly_30 = {7'd0, dSub_30};
  assign dDly_31 = {7'd0, dSub_31};
  assign dDly_32 = {7'd0, dSub_32};
  assign dDly_33 = {7'd0, dSub_33};
  assign dDly_34 = {7'd0, dSub_34};
  assign dDly_35 = {7'd0, dSub_35};
  assign dDly_36 = {7'd0, dSub_36};
  assign dDly_37 = {7'd0, dSub_37};
  assign dDly_38 = {7'd0, dSub_38};
  assign dDly_39 = {7'd0, dSub_39};
  assign dDly_40 = {7'd0, dSub_40};
  assign dDly_41 = {7'd0, dSub_41};
  assign dDly_42 = {7'd0, dSub_42};
  assign dDly_43 = {7'd0, dSub_43};
  assign dDly_44 = {7'd0, dSub_44};
  assign dDly_45 = {7'd0, dSub_45};
  assign dDly_46 = {7'd0, dSub_46};
  assign dDly_47 = {7'd0, dSub_47};
  assign dDly_48 = {7'd0, dSub_48};
  assign dDly_49 = {7'd0, dSub_49};
  assign dDly_50 = {7'd0, dSub_50};
  assign dDly_51 = {7'd0, dSub_51};
  assign dDly_52 = {7'd0, dSub_52};
  assign dDly_53 = {7'd0, dSub_53};
  assign dDly_54 = {7'd0, dSub_54};
  assign dDly_55 = {7'd0, dSub_55};
  assign dDly_56 = {7'd0, dSub_56};
  assign dDly_57 = {7'd0, dSub_57};
  assign dDly_58 = {7'd0, dSub_58};
  assign dDly_59 = {7'd0, dSub_59};
  assign dDly_60 = {7'd0, dSub_60};
  assign dDly_61 = {7'd0, dSub_61};
  assign dDly_62 = {7'd0, dSub_62};
  assign dDly_63 = {7'd0, dSub_63};
  assign dDly_64 = {7'd0, dSub_64};
  assign dDly_65 = {7'd0, dSub_65};
  assign dDly_66 = {7'd0, dSub_66};
  assign dDly_67 = {7'd0, dSub_67};
  assign dDly_68 = {7'd0, dSub_68};
  assign dDly_69 = {7'd0, dSub_69};
  assign dDly_70 = {7'd0, dSub_70};
  assign dDly_71 = {7'd0, dSub_71};
  assign dDly_72 = {7'd0, dSub_72};
  assign dDly_73 = {7'd0, dSub_73};
  assign dDly_74 = {7'd0, dSub_74};
  assign dDly_75 = {7'd0, dSub_75};
  assign dDly_76 = {7'd0, dSub_76};
  assign dDly_77 = {7'd0, dSub_77};
  assign dDly_78 = {7'd0, dSub_78};
  assign dDly_79 = {7'd0, dSub_79};
  assign dDly_80 = {7'd0, dSub_80};
  assign dDly_81 = {7'd0, dSub_81};
  assign dDly_82 = {7'd0, dSub_82};
  assign dDly_83 = {7'd0, dSub_83};
  assign dDly_84 = {7'd0, dSub_84};
  assign dDly_85 = {7'd0, dSub_85};
  assign dDly_86 = {7'd0, dSub_86};
  assign dDly_87 = {7'd0, dSub_87};
  assign dDly_88 = {7'd0, dSub_88};
  assign dDly_89 = {7'd0, dSub_89};
  assign dDly_90 = {7'd0, dSub_90};
  assign dDly_91 = {7'd0, dSub_91};
  assign dDly_92 = {7'd0, dSub_92};
  assign dDly_93 = {7'd0, dSub_93};
  assign dDly_94 = {7'd0, dSub_94};
  assign dDly_95 = {7'd0, dSub_95};
  assign dDly_96 = {7'd0, dSub_96};
  assign dDly_97 = {7'd0, dSub_97};
  assign dDly_98 = {7'd0, dSub_98};
  assign dDly_99 = {7'd0, dSub_99};
  assign dDly_100 = {7'd0, dSub_100};
  assign dDly_101 = {7'd0, dSub_101};
  assign dDly_102 = {7'd0, dSub_102};
  assign dDly_103 = {7'd0, dSub_103};
  assign dDly_104 = {7'd0, dSub_104};
  assign dDly_105 = {7'd0, dSub_105};
  assign dDly_106 = {7'd0, dSub_106};
  assign dDly_107 = {7'd0, dSub_107};
  assign dDly_108 = {7'd0, dSub_108};
  assign dDly_109 = {7'd0, dSub_109};
  assign dDly_110 = {7'd0, dSub_110};
  assign dDly_111 = {7'd0, dSub_111};
  assign dDly_112 = {7'd0, dSub_112};
  assign dDly_113 = {7'd0, dSub_113};
  assign dDly_114 = {7'd0, dSub_114};
  assign dDly_115 = {7'd0, dSub_115};
  assign dDly_116 = {7'd0, dSub_116};
  assign dDly_117 = {7'd0, dSub_117};
  assign dDly_118 = {7'd0, dSub_118};
  assign dDly_119 = {7'd0, dSub_119};
  assign dDly_120 = {7'd0, dSub_120};
  assign dDly_121 = {7'd0, dSub_121};
  assign dDly_122 = {7'd0, dSub_122};
  assign dDly_123 = {7'd0, dSub_123};
  assign dDly_124 = {7'd0, dSub_124};
  assign dDly_125 = {7'd0, dSub_125};
  assign dDly_126 = {7'd0, dSub_126};
  assign dDly_127 = {7'd0, dSub_127};
  assign d_0_valid = 1'b1;
  assign d_1_valid = 1'b1;
  assign d_2_valid = 1'b1;
  assign d_3_valid = 1'b1;
  assign d_4_valid = 1'b1;
  assign d_5_valid = 1'b1;
  assign d_6_valid = 1'b1;
  assign d_7_valid = 1'b1;
  assign d_8_valid = 1'b1;
  assign d_9_valid = 1'b1;
  assign d_10_valid = 1'b1;
  assign d_11_valid = 1'b1;
  assign d_12_valid = 1'b1;
  assign d_13_valid = 1'b1;
  assign d_14_valid = 1'b1;
  assign d_15_valid = 1'b1;
  assign d_16_valid = 1'b1;
  assign d_17_valid = 1'b1;
  assign d_18_valid = 1'b1;
  assign d_19_valid = 1'b1;
  assign d_20_valid = 1'b1;
  assign d_21_valid = 1'b1;
  assign d_22_valid = 1'b1;
  assign d_23_valid = 1'b1;
  assign d_24_valid = 1'b1;
  assign d_25_valid = 1'b1;
  assign d_26_valid = 1'b1;
  assign d_27_valid = 1'b1;
  assign d_28_valid = 1'b1;
  assign d_29_valid = 1'b1;
  assign d_30_valid = 1'b1;
  assign d_31_valid = 1'b1;
  assign d_32_valid = 1'b1;
  assign d_33_valid = 1'b1;
  assign d_34_valid = 1'b1;
  assign d_35_valid = 1'b1;
  assign d_36_valid = 1'b1;
  assign d_37_valid = 1'b1;
  assign d_38_valid = 1'b1;
  assign d_39_valid = 1'b1;
  assign d_40_valid = 1'b1;
  assign d_41_valid = 1'b1;
  assign d_42_valid = 1'b1;
  assign d_43_valid = 1'b1;
  assign d_44_valid = 1'b1;
  assign d_45_valid = 1'b1;
  assign d_46_valid = 1'b1;
  assign d_47_valid = 1'b1;
  assign d_48_valid = 1'b1;
  assign d_49_valid = 1'b1;
  assign d_50_valid = 1'b1;
  assign d_51_valid = 1'b1;
  assign d_52_valid = 1'b1;
  assign d_53_valid = 1'b1;
  assign d_54_valid = 1'b1;
  assign d_55_valid = 1'b1;
  assign d_56_valid = 1'b1;
  assign d_57_valid = 1'b1;
  assign d_58_valid = 1'b1;
  assign d_59_valid = 1'b1;
  assign d_60_valid = 1'b1;
  assign d_61_valid = 1'b1;
  assign d_62_valid = 1'b1;
  assign d_63_valid = 1'b1;
  assign d_64_valid = 1'b1;
  assign d_65_valid = 1'b1;
  assign d_66_valid = 1'b1;
  assign d_67_valid = 1'b1;
  assign d_68_valid = 1'b1;
  assign d_69_valid = 1'b1;
  assign d_70_valid = 1'b1;
  assign d_71_valid = 1'b1;
  assign d_72_valid = 1'b1;
  assign d_73_valid = 1'b1;
  assign d_74_valid = 1'b1;
  assign d_75_valid = 1'b1;
  assign d_76_valid = 1'b1;
  assign d_77_valid = 1'b1;
  assign d_78_valid = 1'b1;
  assign d_79_valid = 1'b1;
  assign d_80_valid = 1'b1;
  assign d_81_valid = 1'b1;
  assign d_82_valid = 1'b1;
  assign d_83_valid = 1'b1;
  assign d_84_valid = 1'b1;
  assign d_85_valid = 1'b1;
  assign d_86_valid = 1'b1;
  assign d_87_valid = 1'b1;
  assign d_88_valid = 1'b1;
  assign d_89_valid = 1'b1;
  assign d_90_valid = 1'b1;
  assign d_91_valid = 1'b1;
  assign d_92_valid = 1'b1;
  assign d_93_valid = 1'b1;
  assign d_94_valid = 1'b1;
  assign d_95_valid = 1'b1;
  assign d_96_valid = 1'b1;
  assign d_97_valid = 1'b1;
  assign d_98_valid = 1'b1;
  assign d_99_valid = 1'b1;
  assign d_100_valid = 1'b1;
  assign d_101_valid = 1'b1;
  assign d_102_valid = 1'b1;
  assign d_103_valid = 1'b1;
  assign d_104_valid = 1'b1;
  assign d_105_valid = 1'b1;
  assign d_106_valid = 1'b1;
  assign d_107_valid = 1'b1;
  assign d_108_valid = 1'b1;
  assign d_109_valid = 1'b1;
  assign d_110_valid = 1'b1;
  assign d_111_valid = 1'b1;
  assign d_112_valid = 1'b1;
  assign d_113_valid = 1'b1;
  assign d_114_valid = 1'b1;
  assign d_115_valid = 1'b1;
  assign d_116_valid = 1'b1;
  assign d_117_valid = 1'b1;
  assign d_118_valid = 1'b1;
  assign d_119_valid = 1'b1;
  assign d_120_valid = 1'b1;
  assign d_121_valid = 1'b1;
  assign d_122_valid = 1'b1;
  assign d_123_valid = 1'b1;
  assign d_124_valid = 1'b1;
  assign d_125_valid = 1'b1;
  assign d_126_valid = 1'b1;
  assign d_127_valid = 1'b1;
  assign d_0_payload = dDly_0;
  assign d_1_payload = dDly_1;
  assign d_2_payload = dDly_2;
  assign d_3_payload = dDly_3;
  assign d_4_payload = dDly_4;
  assign d_5_payload = dDly_5;
  assign d_6_payload = dDly_6;
  assign d_7_payload = dDly_7;
  assign d_8_payload = dDly_8;
  assign d_9_payload = dDly_9;
  assign d_10_payload = dDly_10;
  assign d_11_payload = dDly_11;
  assign d_12_payload = dDly_12;
  assign d_13_payload = dDly_13;
  assign d_14_payload = dDly_14;
  assign d_15_payload = dDly_15;
  assign d_16_payload = dDly_16;
  assign d_17_payload = dDly_17;
  assign d_18_payload = dDly_18;
  assign d_19_payload = dDly_19;
  assign d_20_payload = dDly_20;
  assign d_21_payload = dDly_21;
  assign d_22_payload = dDly_22;
  assign d_23_payload = dDly_23;
  assign d_24_payload = dDly_24;
  assign d_25_payload = dDly_25;
  assign d_26_payload = dDly_26;
  assign d_27_payload = dDly_27;
  assign d_28_payload = dDly_28;
  assign d_29_payload = dDly_29;
  assign d_30_payload = dDly_30;
  assign d_31_payload = dDly_31;
  assign d_32_payload = dDly_32;
  assign d_33_payload = dDly_33;
  assign d_34_payload = dDly_34;
  assign d_35_payload = dDly_35;
  assign d_36_payload = dDly_36;
  assign d_37_payload = dDly_37;
  assign d_38_payload = dDly_38;
  assign d_39_payload = dDly_39;
  assign d_40_payload = dDly_40;
  assign d_41_payload = dDly_41;
  assign d_42_payload = dDly_42;
  assign d_43_payload = dDly_43;
  assign d_44_payload = dDly_44;
  assign d_45_payload = dDly_45;
  assign d_46_payload = dDly_46;
  assign d_47_payload = dDly_47;
  assign d_48_payload = dDly_48;
  assign d_49_payload = dDly_49;
  assign d_50_payload = dDly_50;
  assign d_51_payload = dDly_51;
  assign d_52_payload = dDly_52;
  assign d_53_payload = dDly_53;
  assign d_54_payload = dDly_54;
  assign d_55_payload = dDly_55;
  assign d_56_payload = dDly_56;
  assign d_57_payload = dDly_57;
  assign d_58_payload = dDly_58;
  assign d_59_payload = dDly_59;
  assign d_60_payload = dDly_60;
  assign d_61_payload = dDly_61;
  assign d_62_payload = dDly_62;
  assign d_63_payload = dDly_63;
  assign d_64_payload = dDly_64;
  assign d_65_payload = dDly_65;
  assign d_66_payload = dDly_66;
  assign d_67_payload = dDly_67;
  assign d_68_payload = dDly_68;
  assign d_69_payload = dDly_69;
  assign d_70_payload = dDly_70;
  assign d_71_payload = dDly_71;
  assign d_72_payload = dDly_72;
  assign d_73_payload = dDly_73;
  assign d_74_payload = dDly_74;
  assign d_75_payload = dDly_75;
  assign d_76_payload = dDly_76;
  assign d_77_payload = dDly_77;
  assign d_78_payload = dDly_78;
  assign d_79_payload = dDly_79;
  assign d_80_payload = dDly_80;
  assign d_81_payload = dDly_81;
  assign d_82_payload = dDly_82;
  assign d_83_payload = dDly_83;
  assign d_84_payload = dDly_84;
  assign d_85_payload = dDly_85;
  assign d_86_payload = dDly_86;
  assign d_87_payload = dDly_87;
  assign d_88_payload = dDly_88;
  assign d_89_payload = dDly_89;
  assign d_90_payload = dDly_90;
  assign d_91_payload = dDly_91;
  assign d_92_payload = dDly_92;
  assign d_93_payload = dDly_93;
  assign d_94_payload = dDly_94;
  assign d_95_payload = dDly_95;
  assign d_96_payload = dDly_96;
  assign d_97_payload = dDly_97;
  assign d_98_payload = dDly_98;
  assign d_99_payload = dDly_99;
  assign d_100_payload = dDly_100;
  assign d_101_payload = dDly_101;
  assign d_102_payload = dDly_102;
  assign d_103_payload = dDly_103;
  assign d_104_payload = dDly_104;
  assign d_105_payload = dDly_105;
  assign d_106_payload = dDly_106;
  assign d_107_payload = dDly_107;
  assign d_108_payload = dDly_108;
  assign d_109_payload = dDly_109;
  assign d_110_payload = dDly_110;
  assign d_111_payload = dDly_111;
  assign d_112_payload = dDly_112;
  assign d_113_payload = dDly_113;
  assign d_114_payload = dDly_114;
  assign d_115_payload = dDly_115;
  assign d_116_payload = dDly_116;
  assign d_117_payload = dDly_117;
  assign d_118_payload = dDly_118;
  assign d_119_payload = dDly_119;
  assign d_120_payload = dDly_120;
  assign d_121_payload = dDly_121;
  assign d_122_payload = dDly_122;
  assign d_123_payload = dDly_123;
  assign d_124_payload = dDly_124;
  assign d_125_payload = dDly_125;
  assign d_126_payload = dDly_126;
  assign d_127_payload = dDly_127;
  assign wPy = {d_127_from_ip_m_axis_result_tdata,{d_126_from_ip_m_axis_result_tdata,{d_125_from_ip_m_axis_result_tdata,{d_124_from_ip_m_axis_result_tdata,{d_123_from_ip_m_axis_result_tdata,{d_122_from_ip_m_axis_result_tdata,{d_121_from_ip_m_axis_result_tdata,{d_120_from_ip_m_axis_result_tdata,{d_119_from_ip_m_axis_result_tdata,{d_118_from_ip_m_axis_result_tdata,{d_117_from_ip_m_axis_result_tdata,{d_116_from_ip_m_axis_result_tdata,{d_115_from_ip_m_axis_result_tdata,{d_114_from_ip_m_axis_result_tdata,{d_113_from_ip_m_axis_result_tdata,{d_112_from_ip_m_axis_result_tdata,t_wPy}}}}}}}}}}}}}}}};
  assign output_tvalid = vld;
  assign t_output_tdata = wPy[15 : 0];
  assign t_output_tdata_1 = wPy[31 : 16];
  assign t_output_tdata_2 = wPy[47 : 32];
  assign t_output_tdata_3 = wPy[63 : 48];
  assign t_output_tdata_4 = wPy[79 : 64];
  assign t_output_tdata_5 = wPy[95 : 80];
  assign t_output_tdata_6 = wPy[111 : 96];
  assign t_output_tdata_7 = wPy[127 : 112];
  assign t_output_tdata_8 = wPy[143 : 128];
  assign t_output_tdata_9 = wPy[159 : 144];
  assign t_output_tdata_10 = wPy[175 : 160];
  assign t_output_tdata_11 = wPy[191 : 176];
  assign t_output_tdata_12 = wPy[207 : 192];
  assign t_output_tdata_13 = wPy[223 : 208];
  assign t_output_tdata_14 = wPy[239 : 224];
  assign t_output_tdata_15 = wPy[255 : 240];
  assign t_output_tdata_16 = wPy[271 : 256];
  assign t_output_tdata_17 = wPy[287 : 272];
  assign t_output_tdata_18 = wPy[303 : 288];
  assign t_output_tdata_19 = wPy[319 : 304];
  assign t_output_tdata_20 = wPy[335 : 320];
  assign t_output_tdata_21 = wPy[351 : 336];
  assign t_output_tdata_22 = wPy[367 : 352];
  assign t_output_tdata_23 = wPy[383 : 368];
  assign t_output_tdata_24 = wPy[399 : 384];
  assign t_output_tdata_25 = wPy[415 : 400];
  assign t_output_tdata_26 = wPy[431 : 416];
  assign t_output_tdata_27 = wPy[447 : 432];
  assign t_output_tdata_28 = wPy[463 : 448];
  assign t_output_tdata_29 = wPy[479 : 464];
  assign t_output_tdata_30 = wPy[495 : 480];
  assign t_output_tdata_31 = wPy[511 : 496];
  assign t_output_tdata_32 = wPy[527 : 512];
  assign t_output_tdata_33 = wPy[543 : 528];
  assign t_output_tdata_34 = wPy[559 : 544];
  assign t_output_tdata_35 = wPy[575 : 560];
  assign t_output_tdata_36 = wPy[591 : 576];
  assign t_output_tdata_37 = wPy[607 : 592];
  assign t_output_tdata_38 = wPy[623 : 608];
  assign t_output_tdata_39 = wPy[639 : 624];
  assign t_output_tdata_40 = wPy[655 : 640];
  assign t_output_tdata_41 = wPy[671 : 656];
  assign t_output_tdata_42 = wPy[687 : 672];
  assign t_output_tdata_43 = wPy[703 : 688];
  assign t_output_tdata_44 = wPy[719 : 704];
  assign t_output_tdata_45 = wPy[735 : 720];
  assign t_output_tdata_46 = wPy[751 : 736];
  assign t_output_tdata_47 = wPy[767 : 752];
  assign t_output_tdata_48 = wPy[783 : 768];
  assign t_output_tdata_49 = wPy[799 : 784];
  assign t_output_tdata_50 = wPy[815 : 800];
  assign t_output_tdata_51 = wPy[831 : 816];
  assign t_output_tdata_52 = wPy[847 : 832];
  assign t_output_tdata_53 = wPy[863 : 848];
  assign t_output_tdata_54 = wPy[879 : 864];
  assign t_output_tdata_55 = wPy[895 : 880];
  assign t_output_tdata_56 = wPy[911 : 896];
  assign t_output_tdata_57 = wPy[927 : 912];
  assign t_output_tdata_58 = wPy[943 : 928];
  assign t_output_tdata_59 = wPy[959 : 944];
  assign t_output_tdata_60 = wPy[975 : 960];
  assign t_output_tdata_61 = wPy[991 : 976];
  assign t_output_tdata_62 = wPy[1007 : 992];
  assign t_output_tdata_63 = wPy[1023 : 1008];
  assign t_output_tdata_64 = wPy[1039 : 1024];
  assign t_output_tdata_65 = wPy[1055 : 1040];
  assign t_output_tdata_66 = wPy[1071 : 1056];
  assign t_output_tdata_67 = wPy[1087 : 1072];
  assign t_output_tdata_68 = wPy[1103 : 1088];
  assign t_output_tdata_69 = wPy[1119 : 1104];
  assign t_output_tdata_70 = wPy[1135 : 1120];
  assign t_output_tdata_71 = wPy[1151 : 1136];
  assign t_output_tdata_72 = wPy[1167 : 1152];
  assign t_output_tdata_73 = wPy[1183 : 1168];
  assign t_output_tdata_74 = wPy[1199 : 1184];
  assign t_output_tdata_75 = wPy[1215 : 1200];
  assign t_output_tdata_76 = wPy[1231 : 1216];
  assign t_output_tdata_77 = wPy[1247 : 1232];
  assign t_output_tdata_78 = wPy[1263 : 1248];
  assign t_output_tdata_79 = wPy[1279 : 1264];
  assign t_output_tdata_80 = wPy[1295 : 1280];
  assign t_output_tdata_81 = wPy[1311 : 1296];
  assign t_output_tdata_82 = wPy[1327 : 1312];
  assign t_output_tdata_83 = wPy[1343 : 1328];
  assign t_output_tdata_84 = wPy[1359 : 1344];
  assign t_output_tdata_85 = wPy[1375 : 1360];
  assign t_output_tdata_86 = wPy[1391 : 1376];
  assign t_output_tdata_87 = wPy[1407 : 1392];
  assign t_output_tdata_88 = wPy[1423 : 1408];
  assign t_output_tdata_89 = wPy[1439 : 1424];
  assign t_output_tdata_90 = wPy[1455 : 1440];
  assign t_output_tdata_91 = wPy[1471 : 1456];
  assign t_output_tdata_92 = wPy[1487 : 1472];
  assign t_output_tdata_93 = wPy[1503 : 1488];
  assign t_output_tdata_94 = wPy[1519 : 1504];
  assign t_output_tdata_95 = wPy[1535 : 1520];
  assign t_output_tdata_96 = wPy[1551 : 1536];
  assign t_output_tdata_97 = wPy[1567 : 1552];
  assign t_output_tdata_98 = wPy[1583 : 1568];
  assign t_output_tdata_99 = wPy[1599 : 1584];
  assign t_output_tdata_100 = wPy[1615 : 1600];
  assign t_output_tdata_101 = wPy[1631 : 1616];
  assign t_output_tdata_102 = wPy[1647 : 1632];
  assign t_output_tdata_103 = wPy[1663 : 1648];
  assign t_output_tdata_104 = wPy[1679 : 1664];
  assign t_output_tdata_105 = wPy[1695 : 1680];
  assign t_output_tdata_106 = wPy[1711 : 1696];
  assign t_output_tdata_107 = wPy[1727 : 1712];
  assign t_output_tdata_108 = wPy[1743 : 1728];
  assign t_output_tdata_109 = wPy[1759 : 1744];
  assign t_output_tdata_110 = wPy[1775 : 1760];
  assign t_output_tdata_111 = wPy[1791 : 1776];
  assign t_output_tdata_112 = wPy[1807 : 1792];
  assign t_output_tdata_113 = wPy[1823 : 1808];
  assign t_output_tdata_114 = wPy[1839 : 1824];
  assign t_output_tdata_115 = wPy[1855 : 1840];
  assign t_output_tdata_116 = wPy[1871 : 1856];
  assign t_output_tdata_117 = wPy[1887 : 1872];
  assign t_output_tdata_118 = wPy[1903 : 1888];
  assign t_output_tdata_119 = wPy[1919 : 1904];
  assign t_output_tdata_120 = wPy[1935 : 1920];
  assign t_output_tdata_121 = wPy[1951 : 1936];
  assign t_output_tdata_122 = wPy[1967 : 1952];
  assign t_output_tdata_123 = wPy[1983 : 1968];
  assign t_output_tdata_124 = wPy[1999 : 1984];
  assign t_output_tdata_125 = wPy[2015 : 2000];
  assign t_output_tdata_126 = wPy[2031 : 2016];
  assign t_output_tdata_127 = wPy[2047 : 2032];
  assign t_output_tdata_128 = t_t_output_tdata_128[4 : 0];
  assign t_output_tdata_129 = t_t_output_tdata_129[4 : 0];
  assign t_output_tdata_130 = t_t_output_tdata_130[4 : 0];
  assign t_output_tdata_131 = t_t_output_tdata_131[4 : 0];
  assign t_output_tdata_132 = t_t_output_tdata_132[4 : 0];
  assign t_output_tdata_133 = t_t_output_tdata_133[4 : 0];
  assign t_output_tdata_134 = t_t_output_tdata_134[4 : 0];
  assign t_output_tdata_135 = t_t_output_tdata_135[4 : 0];
  assign t_output_tdata_136 = t_t_output_tdata_136[4 : 0];
  assign t_output_tdata_137 = t_t_output_tdata_137[4 : 0];
  assign t_output_tdata_138 = t_t_output_tdata_138[4 : 0];
  assign t_output_tdata_139 = t_t_output_tdata_139[4 : 0];
  assign t_output_tdata_140 = t_t_output_tdata_140[4 : 0];
  assign t_output_tdata_141 = t_t_output_tdata_141[4 : 0];
  assign t_output_tdata_142 = t_t_output_tdata_142[4 : 0];
  assign t_output_tdata_143 = t_t_output_tdata_143[4 : 0];
  assign t_output_tdata_144 = t_t_output_tdata_144[4 : 0];
  assign t_output_tdata_145 = t_t_output_tdata_145[4 : 0];
  assign t_output_tdata_146 = t_t_output_tdata_146[4 : 0];
  assign t_output_tdata_147 = t_t_output_tdata_147[4 : 0];
  assign t_output_tdata_148 = t_t_output_tdata_148[4 : 0];
  assign t_output_tdata_149 = t_t_output_tdata_149[4 : 0];
  assign t_output_tdata_150 = t_t_output_tdata_150[4 : 0];
  assign t_output_tdata_151 = t_t_output_tdata_151[4 : 0];
  assign t_output_tdata_152 = t_t_output_tdata_152[4 : 0];
  assign t_output_tdata_153 = t_t_output_tdata_153[4 : 0];
  assign t_output_tdata_154 = t_t_output_tdata_154[4 : 0];
  assign t_output_tdata_155 = t_t_output_tdata_155[4 : 0];
  assign t_output_tdata_156 = t_t_output_tdata_156[4 : 0];
  assign t_output_tdata_157 = t_t_output_tdata_157[4 : 0];
  assign t_output_tdata_158 = t_t_output_tdata_158[4 : 0];
  assign t_output_tdata_159 = t_t_output_tdata_159[4 : 0];
  assign t_output_tdata_160 = t_t_output_tdata_160[4 : 0];
  assign t_output_tdata_161 = t_t_output_tdata_161[4 : 0];
  assign t_output_tdata_162 = t_t_output_tdata_162[4 : 0];
  assign t_output_tdata_163 = t_t_output_tdata_163[4 : 0];
  assign t_output_tdata_164 = t_t_output_tdata_164[4 : 0];
  assign t_output_tdata_165 = t_t_output_tdata_165[4 : 0];
  assign t_output_tdata_166 = t_t_output_tdata_166[4 : 0];
  assign t_output_tdata_167 = t_t_output_tdata_167[4 : 0];
  assign t_output_tdata_168 = t_t_output_tdata_168[4 : 0];
  assign t_output_tdata_169 = t_t_output_tdata_169[4 : 0];
  assign t_output_tdata_170 = t_t_output_tdata_170[4 : 0];
  assign t_output_tdata_171 = t_t_output_tdata_171[4 : 0];
  assign t_output_tdata_172 = t_t_output_tdata_172[4 : 0];
  assign t_output_tdata_173 = t_t_output_tdata_173[4 : 0];
  assign t_output_tdata_174 = t_t_output_tdata_174[4 : 0];
  assign t_output_tdata_175 = t_t_output_tdata_175[4 : 0];
  assign t_output_tdata_176 = t_t_output_tdata_176[4 : 0];
  assign t_output_tdata_177 = t_t_output_tdata_177[4 : 0];
  assign t_output_tdata_178 = t_t_output_tdata_178[4 : 0];
  assign t_output_tdata_179 = t_t_output_tdata_179[4 : 0];
  assign t_output_tdata_180 = t_t_output_tdata_180[4 : 0];
  assign t_output_tdata_181 = t_t_output_tdata_181[4 : 0];
  assign t_output_tdata_182 = t_t_output_tdata_182[4 : 0];
  assign t_output_tdata_183 = t_t_output_tdata_183[4 : 0];
  assign t_output_tdata_184 = t_t_output_tdata_184[4 : 0];
  assign t_output_tdata_185 = t_t_output_tdata_185[4 : 0];
  assign t_output_tdata_186 = t_t_output_tdata_186[4 : 0];
  assign t_output_tdata_187 = t_t_output_tdata_187[4 : 0];
  assign t_output_tdata_188 = t_t_output_tdata_188[4 : 0];
  assign t_output_tdata_189 = t_t_output_tdata_189[4 : 0];
  assign t_output_tdata_190 = t_t_output_tdata_190[4 : 0];
  assign t_output_tdata_191 = t_t_output_tdata_191[4 : 0];
  assign t_output_tdata_192 = t_t_output_tdata_192[4 : 0];
  assign t_output_tdata_193 = t_t_output_tdata_193[4 : 0];
  assign t_output_tdata_194 = t_t_output_tdata_194[4 : 0];
  assign t_output_tdata_195 = t_t_output_tdata_195[4 : 0];
  assign t_output_tdata_196 = t_t_output_tdata_196[4 : 0];
  assign t_output_tdata_197 = t_t_output_tdata_197[4 : 0];
  assign t_output_tdata_198 = t_t_output_tdata_198[4 : 0];
  assign t_output_tdata_199 = t_t_output_tdata_199[4 : 0];
  assign t_output_tdata_200 = t_t_output_tdata_200[4 : 0];
  assign t_output_tdata_201 = t_t_output_tdata_201[4 : 0];
  assign t_output_tdata_202 = t_t_output_tdata_202[4 : 0];
  assign t_output_tdata_203 = t_t_output_tdata_203[4 : 0];
  assign t_output_tdata_204 = t_t_output_tdata_204[4 : 0];
  assign t_output_tdata_205 = t_t_output_tdata_205[4 : 0];
  assign t_output_tdata_206 = t_t_output_tdata_206[4 : 0];
  assign t_output_tdata_207 = t_t_output_tdata_207[4 : 0];
  assign t_output_tdata_208 = t_t_output_tdata_208[4 : 0];
  assign t_output_tdata_209 = t_t_output_tdata_209[4 : 0];
  assign t_output_tdata_210 = t_t_output_tdata_210[4 : 0];
  assign t_output_tdata_211 = t_t_output_tdata_211[4 : 0];
  assign t_output_tdata_212 = t_t_output_tdata_212[4 : 0];
  assign t_output_tdata_213 = t_t_output_tdata_213[4 : 0];
  assign t_output_tdata_214 = t_t_output_tdata_214[4 : 0];
  assign t_output_tdata_215 = t_t_output_tdata_215[4 : 0];
  assign t_output_tdata_216 = t_t_output_tdata_216[4 : 0];
  assign t_output_tdata_217 = t_t_output_tdata_217[4 : 0];
  assign t_output_tdata_218 = t_t_output_tdata_218[4 : 0];
  assign t_output_tdata_219 = t_t_output_tdata_219[4 : 0];
  assign t_output_tdata_220 = t_t_output_tdata_220[4 : 0];
  assign t_output_tdata_221 = t_t_output_tdata_221[4 : 0];
  assign t_output_tdata_222 = t_t_output_tdata_222[4 : 0];
  assign t_output_tdata_223 = t_t_output_tdata_223[4 : 0];
  assign t_output_tdata_224 = t_t_output_tdata_224[4 : 0];
  assign t_output_tdata_225 = t_t_output_tdata_225[4 : 0];
  assign t_output_tdata_226 = t_t_output_tdata_226[4 : 0];
  assign t_output_tdata_227 = t_t_output_tdata_227[4 : 0];
  assign t_output_tdata_228 = t_t_output_tdata_228[4 : 0];
  assign t_output_tdata_229 = t_t_output_tdata_229[4 : 0];
  assign t_output_tdata_230 = t_t_output_tdata_230[4 : 0];
  assign t_output_tdata_231 = t_t_output_tdata_231[4 : 0];
  assign t_output_tdata_232 = t_t_output_tdata_232[4 : 0];
  assign t_output_tdata_233 = t_t_output_tdata_233[4 : 0];
  assign t_output_tdata_234 = t_t_output_tdata_234[4 : 0];
  assign t_output_tdata_235 = t_t_output_tdata_235[4 : 0];
  assign t_output_tdata_236 = t_t_output_tdata_236[4 : 0];
  assign t_output_tdata_237 = t_t_output_tdata_237[4 : 0];
  assign t_output_tdata_238 = t_t_output_tdata_238[4 : 0];
  assign t_output_tdata_239 = t_t_output_tdata_239[4 : 0];
  assign t_output_tdata_240 = t_t_output_tdata_240[4 : 0];
  assign t_output_tdata_241 = t_t_output_tdata_241[4 : 0];
  assign t_output_tdata_242 = t_t_output_tdata_242[4 : 0];
  assign t_output_tdata_243 = t_t_output_tdata_243[4 : 0];
  assign t_output_tdata_244 = t_t_output_tdata_244[4 : 0];
  assign t_output_tdata_245 = t_t_output_tdata_245[4 : 0];
  assign t_output_tdata_246 = t_t_output_tdata_246[4 : 0];
  assign t_output_tdata_247 = t_t_output_tdata_247[4 : 0];
  assign t_output_tdata_248 = t_t_output_tdata_248[4 : 0];
  assign t_output_tdata_249 = t_t_output_tdata_249[4 : 0];
  assign t_output_tdata_250 = t_t_output_tdata_250[4 : 0];
  assign t_output_tdata_251 = t_t_output_tdata_251[4 : 0];
  assign t_output_tdata_252 = t_t_output_tdata_252[4 : 0];
  assign t_output_tdata_253 = t_t_output_tdata_253[4 : 0];
  assign t_output_tdata_254 = t_t_output_tdata_254[4 : 0];
  assign t_output_tdata_255 = t_t_output_tdata_255[4 : 0];
  assign output_tdata = {{{t_output_tdata_127[15],(t_output_tdata_256 ? t_output_tdata_257 : t_output_tdata_258)},t_output_tdata_127[9 : 0]},{{{t_output_tdata_259,t_output_tdata_260},t_output_tdata_126[9 : 0]},{{{t_output_tdata_262,t_output_tdata_263},t_output_tdata_125[9 : 0]},{{t_output_tdata_266,t_output_tdata_270},{t_output_tdata_271,t_output_tdata_275}}}}};
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      int8VldFlip <= 1'b0;
      vldConv_delay_1 <= 1'b0;
      vldConv_delay_2 <= 1'b0;
      vldConv_delay_3 <= 1'b0;
      vldConv_delay_4 <= 1'b0;
      vld <= 1'b0;
    end else begin
      if(int8InVld) begin
        int8VldFlip <= (! int8VldFlip);
      end
      vldConv_delay_1 <= vldConv;
      vldConv_delay_2 <= vldConv_delay_1;
      vldConv_delay_3 <= vldConv_delay_2;
      vldConv_delay_4 <= vldConv_delay_3;
      vld <= vldConv_delay_4;
    end
  end

  always @(posedge clk_1_clk) begin
    if(int8InVld) begin
      dataDly <= inputData_tdata;
    end
    zero <= {1'b0,zeroMux_io_output_payload};
    subDiv_0 <= dataConv_0;
    subDiv_1 <= dataConv_1;
    subDiv_2 <= dataConv_2;
    subDiv_3 <= dataConv_3;
    subDiv_4 <= dataConv_4;
    subDiv_5 <= dataConv_5;
    subDiv_6 <= dataConv_6;
    subDiv_7 <= dataConv_7;
    subDiv_8 <= dataConv_8;
    subDiv_9 <= dataConv_9;
    subDiv_10 <= dataConv_10;
    subDiv_11 <= dataConv_11;
    subDiv_12 <= dataConv_12;
    subDiv_13 <= dataConv_13;
    subDiv_14 <= dataConv_14;
    subDiv_15 <= dataConv_15;
    subDiv_16 <= dataConv_16;
    subDiv_17 <= dataConv_17;
    subDiv_18 <= dataConv_18;
    subDiv_19 <= dataConv_19;
    subDiv_20 <= dataConv_20;
    subDiv_21 <= dataConv_21;
    subDiv_22 <= dataConv_22;
    subDiv_23 <= dataConv_23;
    subDiv_24 <= dataConv_24;
    subDiv_25 <= dataConv_25;
    subDiv_26 <= dataConv_26;
    subDiv_27 <= dataConv_27;
    subDiv_28 <= dataConv_28;
    subDiv_29 <= dataConv_29;
    subDiv_30 <= dataConv_30;
    subDiv_31 <= dataConv_31;
    subDiv_32 <= dataConv_32;
    subDiv_33 <= dataConv_33;
    subDiv_34 <= dataConv_34;
    subDiv_35 <= dataConv_35;
    subDiv_36 <= dataConv_36;
    subDiv_37 <= dataConv_37;
    subDiv_38 <= dataConv_38;
    subDiv_39 <= dataConv_39;
    subDiv_40 <= dataConv_40;
    subDiv_41 <= dataConv_41;
    subDiv_42 <= dataConv_42;
    subDiv_43 <= dataConv_43;
    subDiv_44 <= dataConv_44;
    subDiv_45 <= dataConv_45;
    subDiv_46 <= dataConv_46;
    subDiv_47 <= dataConv_47;
    subDiv_48 <= dataConv_48;
    subDiv_49 <= dataConv_49;
    subDiv_50 <= dataConv_50;
    subDiv_51 <= dataConv_51;
    subDiv_52 <= dataConv_52;
    subDiv_53 <= dataConv_53;
    subDiv_54 <= dataConv_54;
    subDiv_55 <= dataConv_55;
    subDiv_56 <= dataConv_56;
    subDiv_57 <= dataConv_57;
    subDiv_58 <= dataConv_58;
    subDiv_59 <= dataConv_59;
    subDiv_60 <= dataConv_60;
    subDiv_61 <= dataConv_61;
    subDiv_62 <= dataConv_62;
    subDiv_63 <= dataConv_63;
    subDiv_64 <= dataConv_64;
    subDiv_65 <= dataConv_65;
    subDiv_66 <= dataConv_66;
    subDiv_67 <= dataConv_67;
    subDiv_68 <= dataConv_68;
    subDiv_69 <= dataConv_69;
    subDiv_70 <= dataConv_70;
    subDiv_71 <= dataConv_71;
    subDiv_72 <= dataConv_72;
    subDiv_73 <= dataConv_73;
    subDiv_74 <= dataConv_74;
    subDiv_75 <= dataConv_75;
    subDiv_76 <= dataConv_76;
    subDiv_77 <= dataConv_77;
    subDiv_78 <= dataConv_78;
    subDiv_79 <= dataConv_79;
    subDiv_80 <= dataConv_80;
    subDiv_81 <= dataConv_81;
    subDiv_82 <= dataConv_82;
    subDiv_83 <= dataConv_83;
    subDiv_84 <= dataConv_84;
    subDiv_85 <= dataConv_85;
    subDiv_86 <= dataConv_86;
    subDiv_87 <= dataConv_87;
    subDiv_88 <= dataConv_88;
    subDiv_89 <= dataConv_89;
    subDiv_90 <= dataConv_90;
    subDiv_91 <= dataConv_91;
    subDiv_92 <= dataConv_92;
    subDiv_93 <= dataConv_93;
    subDiv_94 <= dataConv_94;
    subDiv_95 <= dataConv_95;
    subDiv_96 <= dataConv_96;
    subDiv_97 <= dataConv_97;
    subDiv_98 <= dataConv_98;
    subDiv_99 <= dataConv_99;
    subDiv_100 <= dataConv_100;
    subDiv_101 <= dataConv_101;
    subDiv_102 <= dataConv_102;
    subDiv_103 <= dataConv_103;
    subDiv_104 <= dataConv_104;
    subDiv_105 <= dataConv_105;
    subDiv_106 <= dataConv_106;
    subDiv_107 <= dataConv_107;
    subDiv_108 <= dataConv_108;
    subDiv_109 <= dataConv_109;
    subDiv_110 <= dataConv_110;
    subDiv_111 <= dataConv_111;
    subDiv_112 <= dataConv_112;
    subDiv_113 <= dataConv_113;
    subDiv_114 <= dataConv_114;
    subDiv_115 <= dataConv_115;
    subDiv_116 <= dataConv_116;
    subDiv_117 <= dataConv_117;
    subDiv_118 <= dataConv_118;
    subDiv_119 <= dataConv_119;
    subDiv_120 <= dataConv_120;
    subDiv_121 <= dataConv_121;
    subDiv_122 <= dataConv_122;
    subDiv_123 <= dataConv_123;
    subDiv_124 <= dataConv_124;
    subDiv_125 <= dataConv_125;
    subDiv_126 <= dataConv_126;
    subDiv_127 <= dataConv_127;
  end


endmodule

module Serial2Parallel_1 (
  input  wire          input_valid,
  input  wire [511:0]  input_tdata,
  input  wire [5:0]    input_tuser,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [511:0]  dataDly;
  reg        [5:0]    userDly;
  (* max_fanout = 100 , keep = "true" *) reg                 vldDly;
  (* max_fanout = 100 , keep = "true" *) reg                 outVld;
  (* max_fanout = 100 *) reg                 outVldCond;
  reg        [1:0]    cnt;
  wire                cntAboutToOvf;
  wire                cntOvf;
  wire       [511:0]  t_output_tdata;
  reg        [511:0]  t_output_tdata_1;
  reg        [511:0]  t_output_tdata_2;
  reg        [511:0]  t_output_tdata_3;

  assign cntAboutToOvf = (cnt == 2'b10);
  assign cntOvf = (cnt == 2'b11);
  assign t_output_tdata = dataDly;
  assign output_tdata = {t_output_tdata,{t_output_tdata_1,{t_output_tdata_2,t_output_tdata_3}}};
  assign output_tvalid = (outVldCond && vldDly);
  assign output_tuser = userDly;
  always @(posedge clk_1_clk) begin
    dataDly <= input_tdata;
    userDly <= input_tuser;
    if(vldDly) begin
      t_output_tdata_1 <= t_output_tdata;
    end
    if(vldDly) begin
      t_output_tdata_2 <= t_output_tdata_1;
    end
    if(vldDly) begin
      t_output_tdata_3 <= t_output_tdata_2;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      vldDly <= 1'b0;
      outVld <= 1'b0;
      outVldCond <= 1'b0;
      cnt <= 2'b00;
    end else begin
      vldDly <= input_valid;
      outVld <= input_valid;
      if(vldDly) begin
        cnt <= (cnt + 2'b01);
        if(cntAboutToOvf) begin
          outVldCond <= 1'b1;
        end
        if(cntOvf) begin
          outVldCond <= 1'b0;
          cnt <= 2'b00;
        end
      end
    end
  end


endmodule

//URAM16x16384Fifo replaced by URAM16x16384Fifo_2

module UGMul (
  input  wire          predIndexIn_valid,
  input  wire          predIndexIn_payload_last,
  input  wire [15:0]   predIndexIn_payload_tdata,
  input  wire [5:0]    predIndexIn_payload_tuser,
  output wire          gateIndexOut_valid,
  output wire          gateIndexOut_payload_last,
  output wire [15:0]   gateIndexOut_payload_tdata,
  output wire [5:0]    gateIndexOut_payload_tuser,
  output wire          ugIndexOut_valid,
  output wire          ugIndexOut_payload_last,
  output wire [15:0]   ugIndexOut_payload_tdata,
  output wire [5:0]    ugIndexOut_payload_tuser,
  input  wire          allReduceOut_valid,
  input  wire [15:0]   allReduceOut_tdata,
  input  wire [5:0]    allReduceOut_tuser,
  output wire          ugOut_tvalid,
  output wire          ugOut_tlast,
  output wire [15:0]   ugOut_tdata,
  output wire [5:0]    ugOut_tuser,
  input  wire          status_enPredictor,
  input  wire          status_enFatRelu,
  output wire          silu_to_valid,
  output wire [15:0]   silu_to_payload,
  input  wire          silu_from_valid,
  input  wire [15:0]   silu_from_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_pop_ready;
  wire                gateFilterAlign_io_input_valid;
  wire                gateFilterAlign_io_input_payload_last;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire                fifo_io_pop_payload_last;
  wire       [15:0]   fifo_io_pop_payload_fragment;
  wire                threshold_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    threshold_lt_async_ip_m_axis_result_tdata;
  wire                indexAlign_io_output_valid;
  wire                indexAlign_io_output_payload_last;
  wire       [15:0]   indexAlign_io_output_payload_tdata;
  wire       [5:0]    indexAlign_io_output_payload_tuser;
  wire                gateFilterAlign_io_output_valid;
  wire                gateFilterAlign_io_output_payload_last;
  wire       [15:0]   gateFilterAlign_io_output_payload_fragment;
  wire                u_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   u_mul_ip_m_axis_result_tdata;
  wire                ugIndexFifo_io_push_ready;
  wire                ugIndexFifo_io_pop_valid;
  wire                ugIndexFifo_io_pop_payload_last;
  wire       [15:0]   ugIndexFifo_io_pop_payload_fragment;
  wire       [15:0]   fp16SiLUThresholdBits;
  wire       [15:0]   fatReluBits;
  wire                indexIn_valid;
  wire       [15:0]   indexIn_payload;
  reg        [15:0]   indexCnt;
  reg        [15:0]   indexCntLock;
  wire                gateIn_tvalid;
  wire       [15:0]   gateIn_tdata;
  reg        [15:0]   gateCnt;
  wire                gateCntOvf;
  wire                threshold_valid;
  wire       [15:0]   threshold_payload;
  wire                cmpRes_valid;
  wire                cmpRes_payload;
  wire                zeroLtIn_valid;
  wire                zeroLtIn_payload;
  wire                indexOut_valid;
  wire                indexOut_payload_last;
  wire       [15:0]   indexOut_payload_tdata;
  wire       [5:0]    indexOut_payload_tuser;
  reg                 indexOut_regNext_valid;
  reg                 indexOut_regNext_payload_last;
  reg        [15:0]   indexOut_regNext_payload_tdata;
  reg        [5:0]    indexOut_regNext_payload_tuser;
  wire                gateFilter_valid;
  wire       [15:0]   gateFilter_payload;
  wire                actOut_valid;
  wire       [15:0]   actOut_payload;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_1;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_2;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_3;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_4;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_5;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_6;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_7;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_8;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_9;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_10;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_11;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_12;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_13;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_14;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_15;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_16;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_17;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_18;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_19;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_20;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_21;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_22;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_23;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_24;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_25;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_26;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_27;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_28;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_29;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_30;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_31;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_32;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_33;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_34;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_35;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_36;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_37;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_38;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_39;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_40;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_41;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_42;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_43;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_44;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_45;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_46;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_47;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_48;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_49;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_50;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_51;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_52;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_53;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_54;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_55;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_56;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_57;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_58;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_59;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_60;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_61;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_62;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_63;
  reg                 siluOutLast;
  wire                actOutLast;
  wire                u_tvalid;
  wire       [15:0]   u_tdata;
  wire                g_tvalid;
  wire       [15:0]   g_tdata;
  reg                 t_io_push_valid;
  reg                 t_io_push_payload_last;
  reg        [15:0]   t_io_push_payload_fragment;
  reg        [15:0]   ugLastIndexLock;
  reg                 gateIndexOut_valid_regNext;
  reg        [15:0]   gateIndexOut_payload_tdata_regNext;
  reg                 gateIndexOut_payload_last_regNext;
  wire                hit;
  wire                ug_ugIndexFifo_io_pop_fire;

  URAM16x16384Fifo_2 fifo (
    .io_push_valid            (t_io_push_valid                   ), //i
    .io_push_ready            (fifo_io_push_ready                ), //o
    .io_push_payload_last     (t_io_push_payload_last            ), //i
    .io_push_payload_fragment (t_io_push_payload_fragment[15:0]  ), //i
    .io_pop_valid             (fifo_io_pop_valid                 ), //o
    .io_pop_ready             (fifo_io_pop_ready                 ), //i
    .io_pop_payload_last      (fifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (fifo_io_pop_payload_fragment[15:0]), //o
    .clk_1_clk                (clk_1_clk                         ), //i
    .clk_1_resetn             (clk_1_resetn                      )  //i
  );
  fp16lt0 threshold_lt_async_ip (
    .s_axis_a_tvalid      (threshold_valid                               ), //i
    .s_axis_a_tdata       (threshold_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (gateIn_tvalid                                 ), //i
    .s_axis_b_tdata       (gateIn_tdata[15:0]                            ), //i
    .m_axis_result_tvalid (threshold_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (threshold_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  FlowFragmentAlign indexAlign (
    .io_input_valid          (indexOut_regNext_valid                  ), //i
    .io_input_payload_last   (indexOut_regNext_payload_last           ), //i
    .io_input_payload_tdata  (indexOut_regNext_payload_tdata[15:0]    ), //i
    .io_input_payload_tuser  (indexOut_regNext_payload_tuser[5:0]     ), //i
    .io_output_valid         (indexAlign_io_output_valid              ), //o
    .io_output_payload_last  (indexAlign_io_output_payload_last       ), //o
    .io_output_payload_tdata (indexAlign_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (indexAlign_io_output_payload_tuser[5:0] ), //o
    .clk_1_clk               (clk_1_clk                               ), //i
    .clk_1_resetn            (clk_1_resetn                            )  //i
  );
  FlowFragmentAlign_1 gateFilterAlign (
    .io_input_valid             (gateFilterAlign_io_input_valid                  ), //i
    .io_input_payload_last      (gateFilterAlign_io_input_payload_last           ), //i
    .io_input_payload_fragment  (gateIn_tdata[15:0]                              ), //i
    .io_output_valid            (gateFilterAlign_io_output_valid                 ), //o
    .io_output_payload_last     (gateFilterAlign_io_output_payload_last          ), //o
    .io_output_payload_fragment (gateFilterAlign_io_output_payload_fragment[15:0]), //o
    .clk_1_clk                  (clk_1_clk                                       ), //i
    .clk_1_resetn               (clk_1_resetn                                    )  //i
  );
  fp16mul6 u_mul_ip (
    .aclk                 (clk_1_clk                         ), //i
    .s_axis_a_tvalid      (u_tvalid                          ), //i
    .s_axis_a_tdata       (u_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (g_tvalid                          ), //i
    .s_axis_b_tdata       (g_tdata[15:0]                     ), //i
    .m_axis_result_tvalid (u_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (u_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  URAM16x16384Fifo_2 ugIndexFifo (
    .io_push_valid            (gateIndexOut_valid_regNext               ), //i
    .io_push_ready            (ugIndexFifo_io_push_ready                ), //o
    .io_push_payload_last     (gateIndexOut_payload_last_regNext        ), //i
    .io_push_payload_fragment (gateIndexOut_payload_tdata_regNext[15:0] ), //i
    .io_pop_valid             (ugIndexFifo_io_pop_valid                 ), //o
    .io_pop_ready             (u_mul_ip_m_axis_result_tvalid            ), //i
    .io_pop_payload_last      (ugIndexFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (ugIndexFifo_io_pop_payload_fragment[15:0]), //o
    .clk_1_clk                (clk_1_clk                                ), //i
    .clk_1_resetn             (clk_1_resetn                             )  //i
  );
  assign fp16SiLUThresholdBits = 16'hc900;
  assign fatReluBits = 16'h211f;
  assign indexIn_valid = (predIndexIn_valid && (predIndexIn_payload_tuser == 6'h1e));
  assign indexIn_payload = predIndexIn_payload_tdata;
  assign gateIn_tvalid = (allReduceOut_valid && (allReduceOut_tuser == 6'h16));
  assign gateIn_tdata = allReduceOut_tdata;
  assign gateCntOvf = (gateCnt == (status_enPredictor ? indexCntLock : 16'h2aff));
  assign threshold_valid = 1'b1;
  assign threshold_payload = fatReluBits;
  assign cmpRes_valid = threshold_lt_async_ip_m_axis_result_tvalid;
  assign cmpRes_payload = threshold_lt_async_ip_m_axis_result_tdata[0];
  assign zeroLtIn_valid = gateIn_tvalid;
  assign zeroLtIn_payload = (status_enFatRelu ? cmpRes_payload : 1'b1);
  assign indexOut_valid = (gateIn_tvalid && zeroLtIn_payload);
  assign indexOut_payload_tdata = (status_enPredictor ? fifo_io_pop_payload_fragment : gateCnt);
  assign indexOut_payload_tuser = 6'h17;
  assign indexOut_payload_last = (gateIn_tvalid && gateCntOvf);
  assign gateIndexOut_valid = indexAlign_io_output_valid;
  assign gateIndexOut_payload_last = indexAlign_io_output_payload_last;
  assign gateIndexOut_payload_tdata = indexAlign_io_output_payload_tdata;
  assign gateIndexOut_payload_tuser = indexAlign_io_output_payload_tuser;
  assign gateFilterAlign_io_input_valid = (gateIn_tvalid && zeroLtIn_payload);
  assign gateFilterAlign_io_input_payload_last = (gateIn_tvalid && gateCntOvf);
  assign gateFilter_valid = gateFilterAlign_io_output_valid;
  assign gateFilter_payload = gateFilterAlign_io_output_payload_fragment;
  assign silu_to_valid = gateFilter_valid;
  assign silu_to_payload = gateFilter_payload;
  assign actOut_valid = (status_enFatRelu ? gateFilter_valid : silu_from_valid);
  assign actOut_payload = (status_enFatRelu ? gateFilter_payload : silu_from_payload);
  assign actOutLast = (status_enFatRelu ? gateFilterAlign_io_output_payload_last : siluOutLast);
  assign u_tvalid = (allReduceOut_valid && (allReduceOut_tuser == 6'h18));
  assign u_tdata = allReduceOut_tdata;
  assign g_tvalid = u_tvalid;
  assign g_tdata = fifo_io_pop_payload_fragment;
  assign fifo_io_pop_ready = (u_tvalid || (status_enPredictor && gateIn_tvalid));
  assign ugOut_tvalid = u_mul_ip_m_axis_result_tvalid;
  assign ugOut_tdata = u_mul_ip_m_axis_result_tdata;
  assign ugOut_tuser = 6'h19;
  assign hit = (ugLastIndexLock == ugIndexFifo_io_pop_payload_fragment);
  assign ug_ugIndexFifo_io_pop_fire = (ugIndexFifo_io_pop_valid && u_mul_ip_m_axis_result_tvalid);
  assign ugIndexOut_valid = ug_ugIndexFifo_io_pop_fire;
  assign ugIndexOut_payload_tdata = ugIndexFifo_io_pop_payload_fragment;
  assign ugIndexOut_payload_tuser = 6'h1a;
  assign ugIndexOut_payload_last = hit;
  assign ugOut_tlast = hit;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      indexCnt <= 16'h0;
      indexCntLock <= 16'h0;
      gateCnt <= 16'h0;
      indexOut_regNext_valid <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_1 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_2 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_3 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_4 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_5 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_6 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_7 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_8 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_9 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_10 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_11 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_12 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_13 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_14 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_15 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_16 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_17 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_18 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_19 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_20 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_21 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_22 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_23 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_24 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_25 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_26 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_27 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_28 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_29 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_30 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_31 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_32 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_33 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_34 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_35 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_36 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_37 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_38 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_39 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_40 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_41 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_42 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_43 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_44 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_45 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_46 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_47 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_48 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_49 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_50 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_51 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_52 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_53 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_54 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_55 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_56 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_57 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_58 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_59 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_60 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_61 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_62 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_63 <= 1'b0;
      siluOutLast <= 1'b0;
      t_io_push_valid <= 1'b0;
      t_io_push_payload_last <= 1'b0;
      ugLastIndexLock <= 16'hffff;
      gateIndexOut_valid_regNext <= 1'b0;
      gateIndexOut_payload_last_regNext <= 1'b0;
    end else begin
      if(indexIn_valid) begin
        indexCnt <= (indexCnt + 16'h0001);
        if((indexIn_valid && predIndexIn_payload_last)) begin
          indexCntLock <= indexCnt;
          indexCnt <= 16'h0;
        end
      end
      if(gateIn_tvalid) begin
        gateCnt <= (gateCnt + 16'h0001);
        if(gateCntOvf) begin
          gateCnt <= 16'h0;
          indexCntLock <= 16'h0;
        end
      end
      indexOut_regNext_valid <= indexOut_valid;
      ug_gateFilterAlign_io_output_payload_last_delay_1 <= gateFilterAlign_io_output_payload_last;
      ug_gateFilterAlign_io_output_payload_last_delay_2 <= ug_gateFilterAlign_io_output_payload_last_delay_1;
      ug_gateFilterAlign_io_output_payload_last_delay_3 <= ug_gateFilterAlign_io_output_payload_last_delay_2;
      ug_gateFilterAlign_io_output_payload_last_delay_4 <= ug_gateFilterAlign_io_output_payload_last_delay_3;
      ug_gateFilterAlign_io_output_payload_last_delay_5 <= ug_gateFilterAlign_io_output_payload_last_delay_4;
      ug_gateFilterAlign_io_output_payload_last_delay_6 <= ug_gateFilterAlign_io_output_payload_last_delay_5;
      ug_gateFilterAlign_io_output_payload_last_delay_7 <= ug_gateFilterAlign_io_output_payload_last_delay_6;
      ug_gateFilterAlign_io_output_payload_last_delay_8 <= ug_gateFilterAlign_io_output_payload_last_delay_7;
      ug_gateFilterAlign_io_output_payload_last_delay_9 <= ug_gateFilterAlign_io_output_payload_last_delay_8;
      ug_gateFilterAlign_io_output_payload_last_delay_10 <= ug_gateFilterAlign_io_output_payload_last_delay_9;
      ug_gateFilterAlign_io_output_payload_last_delay_11 <= ug_gateFilterAlign_io_output_payload_last_delay_10;
      ug_gateFilterAlign_io_output_payload_last_delay_12 <= ug_gateFilterAlign_io_output_payload_last_delay_11;
      ug_gateFilterAlign_io_output_payload_last_delay_13 <= ug_gateFilterAlign_io_output_payload_last_delay_12;
      ug_gateFilterAlign_io_output_payload_last_delay_14 <= ug_gateFilterAlign_io_output_payload_last_delay_13;
      ug_gateFilterAlign_io_output_payload_last_delay_15 <= ug_gateFilterAlign_io_output_payload_last_delay_14;
      ug_gateFilterAlign_io_output_payload_last_delay_16 <= ug_gateFilterAlign_io_output_payload_last_delay_15;
      ug_gateFilterAlign_io_output_payload_last_delay_17 <= ug_gateFilterAlign_io_output_payload_last_delay_16;
      ug_gateFilterAlign_io_output_payload_last_delay_18 <= ug_gateFilterAlign_io_output_payload_last_delay_17;
      ug_gateFilterAlign_io_output_payload_last_delay_19 <= ug_gateFilterAlign_io_output_payload_last_delay_18;
      ug_gateFilterAlign_io_output_payload_last_delay_20 <= ug_gateFilterAlign_io_output_payload_last_delay_19;
      ug_gateFilterAlign_io_output_payload_last_delay_21 <= ug_gateFilterAlign_io_output_payload_last_delay_20;
      ug_gateFilterAlign_io_output_payload_last_delay_22 <= ug_gateFilterAlign_io_output_payload_last_delay_21;
      ug_gateFilterAlign_io_output_payload_last_delay_23 <= ug_gateFilterAlign_io_output_payload_last_delay_22;
      ug_gateFilterAlign_io_output_payload_last_delay_24 <= ug_gateFilterAlign_io_output_payload_last_delay_23;
      ug_gateFilterAlign_io_output_payload_last_delay_25 <= ug_gateFilterAlign_io_output_payload_last_delay_24;
      ug_gateFilterAlign_io_output_payload_last_delay_26 <= ug_gateFilterAlign_io_output_payload_last_delay_25;
      ug_gateFilterAlign_io_output_payload_last_delay_27 <= ug_gateFilterAlign_io_output_payload_last_delay_26;
      ug_gateFilterAlign_io_output_payload_last_delay_28 <= ug_gateFilterAlign_io_output_payload_last_delay_27;
      ug_gateFilterAlign_io_output_payload_last_delay_29 <= ug_gateFilterAlign_io_output_payload_last_delay_28;
      ug_gateFilterAlign_io_output_payload_last_delay_30 <= ug_gateFilterAlign_io_output_payload_last_delay_29;
      ug_gateFilterAlign_io_output_payload_last_delay_31 <= ug_gateFilterAlign_io_output_payload_last_delay_30;
      ug_gateFilterAlign_io_output_payload_last_delay_32 <= ug_gateFilterAlign_io_output_payload_last_delay_31;
      ug_gateFilterAlign_io_output_payload_last_delay_33 <= ug_gateFilterAlign_io_output_payload_last_delay_32;
      ug_gateFilterAlign_io_output_payload_last_delay_34 <= ug_gateFilterAlign_io_output_payload_last_delay_33;
      ug_gateFilterAlign_io_output_payload_last_delay_35 <= ug_gateFilterAlign_io_output_payload_last_delay_34;
      ug_gateFilterAlign_io_output_payload_last_delay_36 <= ug_gateFilterAlign_io_output_payload_last_delay_35;
      ug_gateFilterAlign_io_output_payload_last_delay_37 <= ug_gateFilterAlign_io_output_payload_last_delay_36;
      ug_gateFilterAlign_io_output_payload_last_delay_38 <= ug_gateFilterAlign_io_output_payload_last_delay_37;
      ug_gateFilterAlign_io_output_payload_last_delay_39 <= ug_gateFilterAlign_io_output_payload_last_delay_38;
      ug_gateFilterAlign_io_output_payload_last_delay_40 <= ug_gateFilterAlign_io_output_payload_last_delay_39;
      ug_gateFilterAlign_io_output_payload_last_delay_41 <= ug_gateFilterAlign_io_output_payload_last_delay_40;
      ug_gateFilterAlign_io_output_payload_last_delay_42 <= ug_gateFilterAlign_io_output_payload_last_delay_41;
      ug_gateFilterAlign_io_output_payload_last_delay_43 <= ug_gateFilterAlign_io_output_payload_last_delay_42;
      ug_gateFilterAlign_io_output_payload_last_delay_44 <= ug_gateFilterAlign_io_output_payload_last_delay_43;
      ug_gateFilterAlign_io_output_payload_last_delay_45 <= ug_gateFilterAlign_io_output_payload_last_delay_44;
      ug_gateFilterAlign_io_output_payload_last_delay_46 <= ug_gateFilterAlign_io_output_payload_last_delay_45;
      ug_gateFilterAlign_io_output_payload_last_delay_47 <= ug_gateFilterAlign_io_output_payload_last_delay_46;
      ug_gateFilterAlign_io_output_payload_last_delay_48 <= ug_gateFilterAlign_io_output_payload_last_delay_47;
      ug_gateFilterAlign_io_output_payload_last_delay_49 <= ug_gateFilterAlign_io_output_payload_last_delay_48;
      ug_gateFilterAlign_io_output_payload_last_delay_50 <= ug_gateFilterAlign_io_output_payload_last_delay_49;
      ug_gateFilterAlign_io_output_payload_last_delay_51 <= ug_gateFilterAlign_io_output_payload_last_delay_50;
      ug_gateFilterAlign_io_output_payload_last_delay_52 <= ug_gateFilterAlign_io_output_payload_last_delay_51;
      ug_gateFilterAlign_io_output_payload_last_delay_53 <= ug_gateFilterAlign_io_output_payload_last_delay_52;
      ug_gateFilterAlign_io_output_payload_last_delay_54 <= ug_gateFilterAlign_io_output_payload_last_delay_53;
      ug_gateFilterAlign_io_output_payload_last_delay_55 <= ug_gateFilterAlign_io_output_payload_last_delay_54;
      ug_gateFilterAlign_io_output_payload_last_delay_56 <= ug_gateFilterAlign_io_output_payload_last_delay_55;
      ug_gateFilterAlign_io_output_payload_last_delay_57 <= ug_gateFilterAlign_io_output_payload_last_delay_56;
      ug_gateFilterAlign_io_output_payload_last_delay_58 <= ug_gateFilterAlign_io_output_payload_last_delay_57;
      ug_gateFilterAlign_io_output_payload_last_delay_59 <= ug_gateFilterAlign_io_output_payload_last_delay_58;
      ug_gateFilterAlign_io_output_payload_last_delay_60 <= ug_gateFilterAlign_io_output_payload_last_delay_59;
      ug_gateFilterAlign_io_output_payload_last_delay_61 <= ug_gateFilterAlign_io_output_payload_last_delay_60;
      ug_gateFilterAlign_io_output_payload_last_delay_62 <= ug_gateFilterAlign_io_output_payload_last_delay_61;
      ug_gateFilterAlign_io_output_payload_last_delay_63 <= ug_gateFilterAlign_io_output_payload_last_delay_62;
      siluOutLast <= ug_gateFilterAlign_io_output_payload_last_delay_63;
      t_io_push_valid <= (actOut_valid || indexIn_valid);
      t_io_push_payload_last <= ((actOut_valid && actOutLast) || (indexIn_valid && predIndexIn_payload_last));
      if((gateIndexOut_valid && gateIndexOut_payload_last)) begin
        ugLastIndexLock <= gateIndexOut_payload_tdata;
      end
      if((ugIndexOut_valid && ugIndexOut_payload_last)) begin
        ugLastIndexLock <= 16'hffff;
      end
      gateIndexOut_valid_regNext <= gateIndexOut_valid;
      gateIndexOut_payload_last_regNext <= gateIndexOut_payload_last;
    end
  end

  always @(posedge clk_1_clk) begin
    indexOut_regNext_payload_last <= indexOut_payload_last;
    indexOut_regNext_payload_tdata <= indexOut_payload_tdata;
    indexOut_regNext_payload_tuser <= indexOut_payload_tuser;
    t_io_push_payload_fragment <= (actOut_valid ? actOut_payload : indexIn_payload);
    gateIndexOut_payload_tdata_regNext <= gateIndexOut_payload_tdata;
  end


endmodule

module RMSNormFp32 (
  input  wire          io_toBeNorm_valid,
  input  wire [15:0]   io_toBeNorm_payload,
  input  wire          io_scale_valid,
  output wire          io_scale_ready,
  input  wire [15:0]   io_scale_payload,
  output wire          io_normOut_valid,
  output wire [15:0]   io_normOut_payload,
  input  wire          isAttnLn,
  input  wire          isLmHeadLn,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_push_valid;
  wire                io_toBeNorm_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_toBeNorm_to_ip_m_axis_result_tdata;
  wire                rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [31:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                rsqrtIn_rsqrt_ip_m_axis_result_tvalid;
  wire       [31:0]   rsqrtIn_rsqrt_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire                inputFp32_mul_ip_s_axis_a_tready;
  wire                inputFp32_mul_ip_s_axis_b_tready;
  wire                inputFp32_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   inputFp32_mul_ip_m_axis_result_tdata;
  wire                rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready;
  wire                rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid;
  wire       [31:0]   rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata;
  wire                io_scale_to_ip_s_axis_a_tready;
  wire                io_scale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_scale_to_ip_m_axis_result_tdata;
  wire                scaledOutFlow_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   scaledOutFlow_mul_ip_m_axis_result_tdata;
  wire                rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [15:0]   rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  wire       [8:0]    t_t_rsqrtIn_payload;
  wire       [7:0]    t_rsqrtIn_payload_1;
  reg        [11:0]   sqrCnt;
  wire                sqrCntOvf;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [31:0]   accIn_payload_fragment;
  wire                accOut_valid;
  wire                accOut_payload_last;
  wire       [31:0]   accOut_payload_fragment;
  wire                rsqrtIn_valid;
  wire       [31:0]   rsqrtIn_payload;
  wire       [7:0]    t_rsqrtIn_payload;
  reg                 rsqrtOutLock_valid;
  reg        [31:0]   rsqrtOutLock_payload;
  reg        [0:0]    coreCnt;
  reg        [10:0]   dimPerCoreCnt;
  wire                inputFp32_valid;
  wire                inputFp32_ready;
  wire       [31:0]   inputFp32_payload;
  wire                scaleFp32_valid;
  wire                scaleFp32_ready;
  wire       [31:0]   scaleFp32_payload;
  wire                enRsqrtCnt;
  reg        [11:0]   rsqrtCnt;
  wire                rsqrtCntOvf;
  wire                scaledOutFlow_valid;
  wire       [31:0]   scaledOutFlow_payload;
  wire                scaledOutFire;

  assign t_t_rsqrtIn_payload = accOut_payload_fragment[31 : 23];
  assign t_rsqrtIn_payload_1 = (t_rsqrtIn_payload - 8'h0c);
  fp16toFp32 io_toBeNorm_to_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (io_toBeNorm_valid                          ), //i
    .s_axis_a_tdata       (io_toBeNorm_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_toBeNorm_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (io_toBeNorm_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip (
    .aclk                 (clk_1_clk                                                               ), //i
    .s_axis_a_tvalid      (io_toBeNorm_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (io_toBeNorm_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (io_toBeNorm_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (io_toBeNorm_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32acc22 accIn_acc_ip (
    .aclk                 (clk_1_clk                             ), //i
    .aresetn              (clk_1_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[31:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32rsqrt32 rsqrtIn_rsqrt_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (rsqrtIn_valid                             ), //i
    .s_axis_a_tdata       (rsqrtIn_payload[31:0]                     ), //i
    .m_axis_result_tvalid (rsqrtIn_rsqrt_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rsqrtIn_rsqrt_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamFifo_76 fifo (
    .io_push_valid   (fifo_io_push_valid                       ), //i
    .io_push_ready   (fifo_io_push_ready                       ), //o
    .io_push_payload (io_toBeNorm_payload[15:0]                ), //i
    .io_pop_valid    (fifo_io_pop_valid                        ), //o
    .io_pop_ready    (rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]                ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]                  ), //o
    .io_availability (fifo_io_availability[12:0]               ), //o
    .clk_1_clk       (clk_1_clk                                ), //i
    .clk_1_resetn    (clk_1_resetn                             )  //i
  );
  fp32mul8s inputFp32_mul_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (inputFp32_valid                           ), //i
    .s_axis_a_tready      (inputFp32_mul_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (inputFp32_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (scaleFp32_valid                           ), //i
    .s_axis_b_tready      (inputFp32_mul_ip_s_axis_b_tready          ), //o
    .s_axis_b_tdata       (scaleFp32_payload[31:0]                   ), //i
    .m_axis_result_tvalid (inputFp32_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (rsqrtOutLock_valid                        ), //i
    .m_axis_result_tdata  (inputFp32_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s rmsNorm_fifo_io_pop_to_ip (
    .aclk                 (clk_1_clk                                          ), //i
    .s_axis_a_tvalid      (fifo_io_pop_valid                                  ), //i
    .s_axis_a_tready      (rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (fifo_io_pop_payload[15:0]                          ), //i
    .m_axis_result_tvalid (rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (inputFp32_ready                                    ), //i
    .m_axis_result_tdata  (rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s io_scale_to_ip (
    .aclk                 (clk_1_clk                               ), //i
    .s_axis_a_tvalid      (io_scale_valid                          ), //i
    .s_axis_a_tready      (io_scale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (io_scale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_scale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (scaleFp32_ready                         ), //i
    .m_axis_result_tdata  (io_scale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 scaledOutFlow_mul_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (scaledOutFlow_valid                           ), //i
    .s_axis_a_tdata       (scaledOutFlow_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (rsqrtOutLock_valid                            ), //i
    .s_axis_b_tdata       (rsqrtOutLock_payload[31:0]                    ), //i
    .m_axis_result_tvalid (scaledOutFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (scaledOutFlow_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toFp16 rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip (
    .aclk                 (clk_1_clk                                                                 ), //i
    .s_axis_a_tvalid      (scaledOutFlow_mul_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (scaledOutFlow_mul_ip_m_axis_result_tdata[31:0]                            ), //i
    .m_axis_result_tvalid (rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign sqrCntOvf = (sqrCnt == 12'hfff);
  assign accIn_valid = rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = sqrCntOvf;
  assign accOut_valid = accIn_acc_ip_m_axis_result_tvalid;
  assign accOut_payload_last = accIn_acc_ip_m_axis_result_tlast;
  assign accOut_payload_fragment = accIn_acc_ip_m_axis_result_tdata;
  assign rsqrtIn_valid = (accOut_valid && accOut_payload_last);
  assign t_rsqrtIn_payload = t_t_rsqrtIn_payload[7 : 0];
  assign rsqrtIn_payload = {{accOut_payload_fragment[31],((8'h0c < t_rsqrtIn_payload) ? t_rsqrtIn_payload_1 : 8'h0)},accOut_payload_fragment[22 : 0]};
  assign fifo_io_push_valid = (io_toBeNorm_valid && (isAttnLn ? 1'b1 : (isLmHeadLn ? (coreCnt == 1'b0) : (coreCnt == 1'b1))));
  assign inputFp32_ready = inputFp32_mul_ip_s_axis_a_tready;
  assign scaleFp32_ready = inputFp32_mul_ip_s_axis_b_tready;
  assign inputFp32_valid = rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid;
  assign inputFp32_payload = rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata;
  assign io_scale_ready = io_scale_to_ip_s_axis_a_tready;
  assign scaleFp32_valid = io_scale_to_ip_m_axis_result_tvalid;
  assign scaleFp32_payload = io_scale_to_ip_m_axis_result_tdata;
  assign rsqrtCntOvf = (rsqrtCnt == (isAttnLn ? 12'hfff : 12'h7ff));
  assign scaledOutFire = (inputFp32_mul_ip_m_axis_result_tvalid && rsqrtOutLock_valid);
  assign scaledOutFlow_valid = scaledOutFire;
  assign scaledOutFlow_payload = inputFp32_mul_ip_m_axis_result_tdata;
  assign enRsqrtCnt = scaledOutFire;
  assign io_normOut_valid = rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  assign io_normOut_payload = rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      sqrCnt <= 12'h0;
      rsqrtOutLock_valid <= 1'b0;
      coreCnt <= 1'b0;
      dimPerCoreCnt <= 11'h0;
      rsqrtCnt <= 12'h0;
    end else begin
      if(rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid) begin
        sqrCnt <= (sqrCnt + 12'h001);
        if(sqrCntOvf) begin
          sqrCnt <= 12'h0;
        end
      end
      if(rsqrtIn_rsqrt_ip_m_axis_result_tvalid) begin
        rsqrtOutLock_valid <= 1'b1;
      end
      if(io_toBeNorm_valid) begin
        dimPerCoreCnt <= (dimPerCoreCnt + 11'h001);
        if((dimPerCoreCnt == 11'h7ff)) begin
          dimPerCoreCnt <= 11'h0;
          coreCnt <= (coreCnt + 1'b1);
          if((coreCnt == 1'b1)) begin
            coreCnt <= 1'b0;
          end
        end
      end
      if(enRsqrtCnt) begin
        rsqrtCnt <= (rsqrtCnt + 12'h001);
        if(rsqrtCntOvf) begin
          rsqrtCnt <= 12'h0;
          rsqrtOutLock_valid <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(rsqrtIn_rsqrt_ip_m_axis_result_tvalid) begin
      rsqrtOutLock_payload <= rsqrtIn_rsqrt_ip_m_axis_result_tdata;
    end
  end


endmodule

module SerialSafeSoftmax (
  input  wire          io_input_0_valid,
  input  wire [15:0]   io_input_0_tdata,
  input  wire [5:0]    io_input_0_tuser,
  input  wire          io_input_1_valid,
  input  wire [15:0]   io_input_1_tdata,
  input  wire [5:0]    io_input_1_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          io_seqLen_valid,
  output reg           io_seqLen_ready,
  input  wire [9:0]    io_seqLen_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_push_valid;
  wire       [15:0]   fifo_io_push_payload;
  wire                fifo_io_pop_ready;
  wire                ipFlowIO_m_axis_result_tvalid;
  wire       [7:0]    ipFlowIO_m_axis_result_tdata;
  wire                toSubFlow_sub_ip_m_axis_result_tvalid;
  wire       [15:0]   toSubFlow_sub_ip_m_axis_result_tdata;
  wire                ipFlowIO_1_m_axis_result_tvalid;
  wire       [7:0]    ipFlowIO_1_m_axis_result_tdata;
  wire                toExpClip_exp_ip_m_axis_result_tvalid;
  wire       [15:0]   toExpClip_exp_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                toDivFlow_regNext_div_ip_m_axis_result_tvalid;
  wire       [15:0]   toDivFlow_regNext_div_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [10:0]   fifo_io_occupancy;
  wire       [10:0]   fifo_io_availability;
  wire       [15:0]   fp16Minus16Bits;
  wire                localQKIn_valid;
  wire       [15:0]   localQKIn_payload;
  wire                dotQKIn_valid;
  wire       [15:0]   dotQKIn_payload;
  wire                muxOut_valid;
  wire       [15:0]   muxOut_payload;
  reg                 input_valid;
  reg        [15:0]   input_payload;
  reg        [9:0]    inCnt;
  wire                inCntZero;
  wire                inCntOvf;
  reg                 maxValFlow_valid;
  reg        [15:0]   maxValFlow_payload;
  wire                toSubFlow_valid;
  wire       [15:0]   toSubFlow_payload;
  wire                toExpClip_valid;
  reg        [15:0]   toExpClip_payload;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [15:0]   accIn_payload_fragment;
  reg        [9:0]    accInCnt;
  wire                accInCntOvf;
  reg                 normFlow_valid;
  reg        [15:0]   normFlow_payload;
  wire                toDivFlow_valid;
  wire       [15:0]   toDivFlow_payload;
  reg                 toDivFlow_regNext_valid;
  reg        [15:0]   toDivFlow_regNext_payload;
  reg                 normFlow_regNext_valid;
  reg        [15:0]   normFlow_regNext_payload;
  reg        [9:0]    outCnt;
  wire                outCntOvf;
  wire       [16:0]   t_normFlow_valid;
  reg        [9:0]    subCnt;
  wire                subCntOvf;
  reg                 phase0;
  reg                 phase1;
  wire                conflict;

  fp16lt0 ipFlowIO (
    .s_axis_a_tvalid      (1'b1                             ), //i
    .s_axis_a_tdata       (maxValFlow_payload[15:0]         ), //i
    .s_axis_b_tvalid      (1'b1                             ), //i
    .s_axis_b_tdata       (input_payload[15:0]              ), //i
    .m_axis_result_tvalid (ipFlowIO_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (ipFlowIO_m_axis_result_tdata[7:0])  //o
  );
  fp16sub8 toSubFlow_sub_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (toSubFlow_valid                           ), //i
    .s_axis_a_tdata       (toSubFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (maxValFlow_valid                          ), //i
    .s_axis_b_tdata       (maxValFlow_payload[15:0]                  ), //i
    .m_axis_result_tvalid (toSubFlow_sub_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toSubFlow_sub_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16lt0 ipFlowIO_1 (
    .s_axis_a_tvalid      (1'b1                                      ), //i
    .s_axis_a_tdata       (toSubFlow_sub_ip_m_axis_result_tdata[15:0]), //i
    .s_axis_b_tvalid      (1'b1                                      ), //i
    .s_axis_b_tdata       (fp16Minus16Bits[15:0]                     ), //i
    .m_axis_result_tvalid (ipFlowIO_1_m_axis_result_tvalid           ), //o
    .m_axis_result_tdata  (ipFlowIO_1_m_axis_result_tdata[7:0]       )  //o
  );
  fp16ex12 toExpClip_exp_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (toExpClip_valid                           ), //i
    .s_axis_a_tdata       (toExpClip_payload[15:0]                   ), //i
    .m_axis_result_tvalid (toExpClip_exp_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toExpClip_exp_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16acc16 accIn_acc_ip (
    .aclk                 (clk_1_clk                             ), //i
    .aresetn              (clk_1_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 toDivFlow_regNext_div_ip (
    .aclk                 (clk_1_clk                                         ), //i
    .s_axis_a_tvalid      (toDivFlow_regNext_valid                           ), //i
    .s_axis_a_tdata       (toDivFlow_regNext_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (normFlow_regNext_valid                            ), //i
    .s_axis_b_tdata       (normFlow_regNext_payload[15:0]                    ), //i
    .m_axis_result_tvalid (toDivFlow_regNext_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toDivFlow_regNext_div_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamFifo_77 fifo (
    .io_push_valid   (fifo_io_push_valid        ), //i
    .io_push_ready   (fifo_io_push_ready        ), //o
    .io_push_payload (fifo_io_push_payload[15:0]), //i
    .io_pop_valid    (fifo_io_pop_valid         ), //o
    .io_pop_ready    (fifo_io_pop_ready         ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                      ), //i
    .io_occupancy    (fifo_io_occupancy[10:0]   ), //o
    .io_availability (fifo_io_availability[10:0]), //o
    .clk_1_clk       (clk_1_clk                 ), //i
    .clk_1_resetn    (clk_1_resetn              )  //i
  );
  assign fp16Minus16Bits = 16'hcc00;
  assign localQKIn_valid = (io_input_1_valid && (io_input_1_tuser == 6'h0c));
  assign localQKIn_payload = io_input_1_tdata;
  assign dotQKIn_valid = (io_input_0_valid && (io_input_0_tuser == 6'h0d));
  assign dotQKIn_payload = io_input_0_tdata;
  assign muxOut_valid = (|{dotQKIn_valid,localQKIn_valid});
  assign muxOut_payload = (localQKIn_valid ? localQKIn_payload : dotQKIn_payload);
  assign inCntZero = (inCnt == 10'h0);
  assign inCntOvf = (inCnt == io_seqLen_payload);
  assign toExpClip_valid = toSubFlow_sub_ip_m_axis_result_tvalid;
  always @(*) begin
    toExpClip_payload = toSubFlow_sub_ip_m_axis_result_tdata;
    if(ipFlowIO_1_m_axis_result_tdata[0]) begin
      toExpClip_payload = fp16Minus16Bits;
    end
  end

  assign accInCntOvf = (accInCnt == io_seqLen_payload);
  assign accIn_valid = toExpClip_exp_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = toExpClip_exp_ip_m_axis_result_tdata;
  assign accIn_payload_last = accInCntOvf;
  assign io_output_valid = toDivFlow_regNext_div_ip_m_axis_result_tvalid;
  assign io_output_payload_tdata = toDivFlow_regNext_div_ip_m_axis_result_tdata;
  assign io_output_payload_tuser = 6'h0e;
  always @(*) begin
    io_seqLen_ready = 1'b0;
    if(io_output_valid) begin
      if(outCntOvf) begin
        io_seqLen_ready = 1'b1;
      end
    end
  end

  assign outCntOvf = (outCnt == io_seqLen_payload);
  assign t_normFlow_valid = 17'h0;
  assign io_output_payload_last = outCntOvf;
  assign subCntOvf = (subCnt == io_seqLen_payload);
  assign conflict = (input_valid && accIn_valid);
  assign fifo_io_push_valid = (input_valid || accIn_valid);
  assign fifo_io_push_payload = (input_valid ? input_payload : accIn_payload_fragment);
  assign toSubFlow_valid = (fifo_io_pop_valid && phase1);
  assign toSubFlow_payload = fifo_io_pop_payload;
  assign toDivFlow_valid = (fifo_io_pop_valid && normFlow_valid);
  assign toDivFlow_payload = fifo_io_pop_payload;
  assign fifo_io_pop_ready = (phase1 ? phase1 : normFlow_valid);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      input_valid <= 1'b0;
      inCnt <= 10'h0;
      maxValFlow_payload <= 16'hfc00;
      maxValFlow_valid <= 1'b0;
      accInCnt <= 10'h0;
      normFlow_valid <= 1'b0;
      normFlow_payload <= 16'h0;
      toDivFlow_regNext_valid <= 1'b0;
      normFlow_regNext_valid <= 1'b0;
      outCnt <= 10'h0;
      subCnt <= 10'h0;
      phase0 <= 1'b1;
      phase1 <= 1'b0;
    end else begin
      input_valid <= muxOut_valid;
      if(input_valid) begin
        inCnt <= (inCnt + 10'h001);
        if(inCntOvf) begin
          inCnt <= 10'h0;
        end
      end
      if(input_valid) begin
        if(ipFlowIO_m_axis_result_tdata[0]) begin
          maxValFlow_payload <= input_payload;
        end
        if(inCntOvf) begin
          maxValFlow_valid <= 1'b1;
        end
      end
      if(accIn_valid) begin
        accInCnt <= (accInCnt + 10'h001);
        if(accInCntOvf) begin
          accInCnt <= 10'h0;
        end
      end
      if((accIn_acc_ip_m_axis_result_tvalid && accIn_acc_ip_m_axis_result_tlast)) begin
        normFlow_valid <= 1'b1;
        normFlow_payload <= accIn_acc_ip_m_axis_result_tdata;
      end
      toDivFlow_regNext_valid <= toDivFlow_valid;
      normFlow_regNext_valid <= normFlow_valid;
      if(io_output_valid) begin
        outCnt <= (outCnt + 10'h001);
        if(outCntOvf) begin
          outCnt <= 10'h0;
          maxValFlow_valid <= 1'b0;
          maxValFlow_payload <= 16'hfc00;
          normFlow_valid <= t_normFlow_valid[0];
          normFlow_payload <= t_normFlow_valid[16 : 1];
        end
      end
      if(toSubFlow_valid) begin
        subCnt <= (subCnt + 10'h001);
        if(subCntOvf) begin
          subCnt <= 10'h0;
        end
      end
      if(input_valid) begin
        if(inCntOvf) begin
          phase0 <= 1'b0;
          phase1 <= 1'b1;
        end
      end
      if(toSubFlow_valid) begin
        if(subCntOvf) begin
          phase1 <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    input_payload <= muxOut_payload;
    toDivFlow_regNext_payload <= toDivFlow_payload;
    normFlow_regNext_payload <= normFlow_payload;
  end


endmodule

module QKMul (
  input  wire          io_input_valid,
  input  wire [15:0]   io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  output wire          qProbe_valid,
  output wire [15:0]   qProbe_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                qIn_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qIn_mul_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [7:0]    fifo_io_occupancy;
  wire       [7:0]    fifo_io_availability;
  wire                qFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qFlow_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                qIn_tvalid;
  wire       [15:0]   qIn_tdata;
  reg        [6:0]    inCnt;
  reg        [4:0]    headCnt;
  wire                kInput_valid;
  wire       [15:0]   kInput_payload;
  wire                sqrtD_valid;
  wire       [15:0]   sqrtD_payload;
  wire                qFlow_valid;
  wire       [15:0]   qFlow_payload;
  wire                kFlow_valid;
  wire       [15:0]   kFlow_payload;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [15:0]   accIn_payload_fragment;
  reg        [6:0]    accInCnt;
  wire                accInCntOvf;

  fp16mul6 qIn_mul_ip (
    .aclk                 (clk_1_clk                           ), //i
    .s_axis_a_tvalid      (qIn_tvalid                          ), //i
    .s_axis_a_tdata       (qIn_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (sqrtD_valid                         ), //i
    .s_axis_b_tdata       (sqrtD_payload[15:0]                 ), //i
    .m_axis_result_tvalid (qIn_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qIn_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamFifo_78 fifo (
    .io_push_valid   (qIn_mul_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (fifo_io_push_ready                  ), //o
    .io_push_payload (qIn_mul_ip_m_axis_result_tdata[15:0]), //i
    .io_pop_valid    (fifo_io_pop_valid                   ), //o
    .io_pop_ready    (kFlow_valid                         ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]           ), //o
    .io_flush        (1'b0                                ), //i
    .io_occupancy    (fifo_io_occupancy[7:0]              ), //o
    .io_availability (fifo_io_availability[7:0]           ), //o
    .clk_1_clk       (clk_1_clk                           ), //i
    .clk_1_resetn    (clk_1_resetn                        )  //i
  );
  fp16mul6 qFlow_mul_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (qFlow_valid                           ), //i
    .s_axis_a_tdata       (qFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (kFlow_valid                           ), //i
    .s_axis_b_tdata       (kFlow_payload[15:0]                   ), //i
    .m_axis_result_tvalid (qFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16acc16 accIn_acc_ip (
    .aclk                 (clk_1_clk                             ), //i
    .aresetn              (clk_1_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  assign qIn_tvalid = (io_input_valid && (io_input_tuser == 6'h08));
  assign qIn_tdata = io_input_tdata;
  assign qProbe_valid = ((qIn_tvalid && (inCnt == 7'h0)) && (headCnt == 5'h0));
  assign qProbe_payload = qIn_tdata;
  assign kInput_valid = (io_input_valid && (io_input_tuser == 6'h09));
  assign kInput_payload = io_input_tdata;
  assign sqrtD_payload = 16'h2da8;
  assign sqrtD_valid = 1'b1;
  assign qFlow_valid = kFlow_valid;
  assign qFlow_payload = fifo_io_pop_payload;
  assign kFlow_payload = kInput_payload;
  assign kFlow_valid = kInput_valid;
  assign accInCntOvf = (accInCnt == 7'h7f);
  assign accIn_valid = qFlow_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = qFlow_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = accInCntOvf;
  assign io_output_valid = (accIn_acc_ip_m_axis_result_tvalid && accIn_acc_ip_m_axis_result_tlast);
  assign io_output_tdata = accIn_acc_ip_m_axis_result_tdata;
  assign io_output_tuser = 6'h0c;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      inCnt <= 7'h0;
      headCnt <= 5'h0;
      accInCnt <= 7'h0;
    end else begin
      if(qIn_tvalid) begin
        inCnt <= (inCnt + 7'h01);
        if((inCnt == 7'h7f)) begin
          inCnt <= 7'h0;
          headCnt <= (headCnt + 5'h01);
        end
      end
      if(qFlow_mul_ip_m_axis_result_tvalid) begin
        accInCnt <= (accInCnt + 7'h01);
        if(accInCntOvf) begin
          accInCnt <= 7'h0;
        end
      end
    end
  end


endmodule

module QuantWrapper (
  input  wire          io_toBeQuant_0_valid,
  input  wire [15:0]   io_toBeQuant_0_tdata,
  input  wire [5:0]    io_toBeQuant_0_tuser,
  input  wire          io_toBeQuant_1_valid,
  input  wire [15:0]   io_toBeQuant_1_tdata,
  input  wire [5:0]    io_toBeQuant_1_tuser,
  output wire          io_quantZero_valid,
  output wire [7:0]    io_quantZero_payload,
  output wire          io_quantScale_valid,
  output wire [15:0]   io_quantScale_payload,
  output wire          io_afterQuant_valid,
  output wire          io_afterQuant_payload_last,
  output wire [7:0]    io_afterQuant_payload_fragment,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                scaleFifo_io_pop_ready;
  wire                zeroFifo_io_pop_ready;
  wire                find_max_tvalid;
  wire       [15:0]   find_max_tdata;
  wire                find_min_tvalid;
  wire       [15:0]   find_min_tdata;
  wire                getCfg_scale_tvalid;
  wire       [15:0]   getCfg_scale_tdata;
  wire                getCfg_zero_tvalid;
  wire       [7:0]    getCfg_zero_tdata;
  wire                quant_zero_tready;
  wire                quant_q_tvalid;
  wire       [7:0]    quant_q_tdata;
  wire                xFifo_io_push_ready;
  wire                xFifo_io_pop_valid;
  wire       [15:0]   xFifo_io_pop_payload;
  wire       [10:0]   xFifo_io_occupancy;
  wire       [10:0]   xFifo_io_availability;
  wire                scaleFifo_io_push_ready;
  wire                scaleFifo_io_pop_valid;
  wire       [15:0]   scaleFifo_io_pop_payload;
  wire       [5:0]    scaleFifo_io_occupancy;
  wire       [5:0]    scaleFifo_io_availability;
  wire                zeroFifo_io_push_ready;
  wire                zeroFifo_io_pop_valid;
  wire       [7:0]    zeroFifo_io_pop_payload;
  wire       [5:0]    zeroFifo_io_occupancy;
  wire       [5:0]    zeroFifo_io_availability;
  wire       [1:0]    t_kToBeQuant_tuser;
  wire       [1:0]    t_vToBeQuant_tuser;
  wire       [6:0]    t_t_io_pop_ready_2;
  wire       [0:0]    t_t_io_pop_ready_2_1;
  wire       [6:0]    t_t_io_pop_ready_7;
  wire       [0:0]    t_t_io_pop_ready_7_1;
  reg                 kToBeQuant_valid;
  reg        [15:0]   kToBeQuant_tdata;
  reg        [5:0]    kToBeQuant_tuser;
  reg                 vToBeQuant_valid;
  reg        [15:0]   vToBeQuant_tdata;
  reg        [5:0]    vToBeQuant_tuser;
  wire                toBeQuant_tvalid;
  wire       [15:0]   toBeQuant_tdata;
  wire       [5:0]    toBeQuant_tuser;
  wire                t_scaleRep_valid;
  reg                 t_io_pop_ready;
  reg                 t_io_pop_ready_1;
  reg        [6:0]    t_io_pop_ready_2;
  reg        [6:0]    t_io_pop_ready_3;
  wire                t_io_pop_ready_4;
  wire                scaleRep_valid;
  wire                scaleRep_ready;
  wire       [15:0]   scaleRep_payload;
  reg                 t_scaleRep_valid_1;
  reg        [15:0]   t_scaleRep_payload;
  wire                t_zeroRep_valid;
  reg                 t_io_pop_ready_5;
  reg                 t_io_pop_ready_6;
  reg        [6:0]    t_io_pop_ready_7;
  reg        [6:0]    t_io_pop_ready_8;
  wire                t_io_pop_ready_9;
  wire                zeroRep_valid;
  wire                zeroRep_ready;
  wire       [7:0]    zeroRep_payload;
  reg                 t_zeroRep_valid_1;
  reg        [7:0]    t_zeroRep_payload;
  wire                joinEvent_valid;
  wire                joinEvent_ready;
  wire                joinEventFire;
  wire                afterQuant_valid;
  wire                afterQuant_payload_last;
  wire       [7:0]    afterQuant_payload_fragment;
  reg        [6:0]    cnt;
  wire                cntOvf;
  reg                 afterQuant_regNext_valid;
  reg                 afterQuant_regNext_payload_last;
  reg        [7:0]    afterQuant_regNext_payload_fragment;
  reg                 quant_getCfg_scale_regNext_valid;
  reg        [15:0]   quant_getCfg_scale_regNext_payload;
  reg                 quant_getCfg_zero_regNext_valid;
  reg        [7:0]    quant_getCfg_zero_regNext_payload;

  assign t_kToBeQuant_tuser = {(io_toBeQuant_0_tuser == 6'h12),(io_toBeQuant_0_tuser == 6'h09)};
  assign t_vToBeQuant_tuser = {(io_toBeQuant_1_tuser == 6'h13),(io_toBeQuant_1_tuser == 6'h07)};
  assign t_t_io_pop_ready_2_1 = t_io_pop_ready_1;
  assign t_t_io_pop_ready_2 = {6'd0, t_t_io_pop_ready_2_1};
  assign t_t_io_pop_ready_7_1 = t_io_pop_ready_6;
  assign t_t_io_pop_ready_7 = {6'd0, t_t_io_pop_ready_7_1};
  FindRange find (
    .x_tvalid     (toBeQuant_tvalid     ), //i
    .x_tdata      (toBeQuant_tdata[15:0]), //i
    .max_tvalid   (find_max_tvalid      ), //o
    .max_tdata    (find_max_tdata[15:0] ), //o
    .min_tvalid   (find_min_tvalid      ), //o
    .min_tdata    (find_min_tdata[15:0] ), //o
    .cfg_length   (16'h007f             ), //i
    .clk_1_clk    (clk_1_clk            ), //i
    .clk_1_resetn (clk_1_resetn         )  //i
  );
  GetScaleZero getCfg (
    .max_tvalid   (find_max_tvalid         ), //i
    .max_tdata    (find_max_tdata[15:0]    ), //i
    .min_tvalid   (find_min_tvalid         ), //i
    .min_tdata    (find_min_tdata[15:0]    ), //i
    .scale_tvalid (getCfg_scale_tvalid     ), //o
    .scale_tdata  (getCfg_scale_tdata[15:0]), //o
    .zero_tvalid  (getCfg_zero_tvalid      ), //o
    .zero_tdata   (getCfg_zero_tdata[7:0]  ), //o
    .clk_1_clk    (clk_1_clk               ), //i
    .clk_1_resetn (clk_1_resetn            )  //i
  );
  LinearQuant quant (
    .x_tvalid     (joinEventFire             ), //i
    .x_tdata      (xFifo_io_pop_payload[15:0]), //i
    .scale_tvalid (joinEventFire             ), //i
    .scale_tdata  (scaleRep_payload[15:0]    ), //i
    .zero_tvalid  (zeroRep_valid             ), //i
    .zero_tready  (quant_zero_tready         ), //o
    .zero_tdata   (zeroRep_payload[7:0]      ), //i
    .q_tvalid     (quant_q_tvalid            ), //o
    .q_tdata      (quant_q_tdata[7:0]        ), //o
    .clk_1_clk    (clk_1_clk                 ), //i
    .clk_1_resetn (clk_1_resetn              )  //i
  );
  StreamFifo_79 xFifo (
    .io_push_valid   (toBeQuant_tvalid           ), //i
    .io_push_ready   (xFifo_io_push_ready        ), //o
    .io_push_payload (toBeQuant_tdata[15:0]      ), //i
    .io_pop_valid    (xFifo_io_pop_valid         ), //o
    .io_pop_ready    (joinEventFire              ), //i
    .io_pop_payload  (xFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                       ), //i
    .io_occupancy    (xFifo_io_occupancy[10:0]   ), //o
    .io_availability (xFifo_io_availability[10:0]), //o
    .clk_1_clk       (clk_1_clk                  ), //i
    .clk_1_resetn    (clk_1_resetn               )  //i
  );
  StreamFifo_80 scaleFifo (
    .io_push_valid   (getCfg_scale_tvalid           ), //i
    .io_push_ready   (scaleFifo_io_push_ready       ), //o
    .io_push_payload (getCfg_scale_tdata[15:0]      ), //i
    .io_pop_valid    (scaleFifo_io_pop_valid        ), //o
    .io_pop_ready    (scaleFifo_io_pop_ready        ), //i
    .io_pop_payload  (scaleFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (scaleFifo_io_occupancy[5:0]   ), //o
    .io_availability (scaleFifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                     ), //i
    .clk_1_resetn    (clk_1_resetn                  )  //i
  );
  StreamFifo_81 zeroFifo (
    .io_push_valid   (getCfg_zero_tvalid           ), //i
    .io_push_ready   (zeroFifo_io_push_ready       ), //o
    .io_push_payload (getCfg_zero_tdata[7:0]       ), //i
    .io_pop_valid    (zeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (zeroFifo_io_pop_ready        ), //i
    .io_pop_payload  (zeroFifo_io_pop_payload[7:0] ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (zeroFifo_io_occupancy[5:0]   ), //o
    .io_availability (zeroFifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                    ), //i
    .clk_1_resetn    (clk_1_resetn                 )  //i
  );
  assign toBeQuant_tvalid = (|{vToBeQuant_valid,kToBeQuant_valid});
  assign toBeQuant_tdata = (kToBeQuant_valid ? kToBeQuant_tdata : vToBeQuant_tdata);
  assign toBeQuant_tuser = (kToBeQuant_valid ? kToBeQuant_tuser : vToBeQuant_tuser);
  always @(*) begin
    t_io_pop_ready_1 = 1'b0;
    if((t_scaleRep_valid && t_io_pop_ready)) begin
      t_io_pop_ready_1 = 1'b1;
    end
  end

  assign t_io_pop_ready_4 = (t_io_pop_ready_3 == 7'h7f);
  always @(*) begin
    t_io_pop_ready_2 = (t_io_pop_ready_3 + t_t_io_pop_ready_2);
    if(1'b0) begin
      t_io_pop_ready_2 = 7'h0;
    end
  end

  assign t_scaleRep_valid = scaleFifo_io_pop_valid;
  assign scaleFifo_io_pop_ready = (t_io_pop_ready && t_io_pop_ready_4);
  always @(*) begin
    t_io_pop_ready = scaleRep_ready;
    if((! scaleRep_valid)) begin
      t_io_pop_ready = 1'b1;
    end
  end

  assign scaleRep_valid = t_scaleRep_valid_1;
  assign scaleRep_payload = t_scaleRep_payload;
  always @(*) begin
    t_io_pop_ready_6 = 1'b0;
    if((t_zeroRep_valid && t_io_pop_ready_5)) begin
      t_io_pop_ready_6 = 1'b1;
    end
  end

  assign t_io_pop_ready_9 = (t_io_pop_ready_8 == 7'h7f);
  always @(*) begin
    t_io_pop_ready_7 = (t_io_pop_ready_8 + t_t_io_pop_ready_7);
    if(1'b0) begin
      t_io_pop_ready_7 = 7'h0;
    end
  end

  assign t_zeroRep_valid = zeroFifo_io_pop_valid;
  assign zeroFifo_io_pop_ready = (t_io_pop_ready_5 && t_io_pop_ready_9);
  always @(*) begin
    t_io_pop_ready_5 = zeroRep_ready;
    if((! zeroRep_valid)) begin
      t_io_pop_ready_5 = 1'b1;
    end
  end

  assign zeroRep_valid = t_zeroRep_valid_1;
  assign zeroRep_payload = t_zeroRep_payload;
  assign scaleRep_ready = joinEventFire;
  assign joinEvent_valid = (xFifo_io_pop_valid && scaleRep_valid);
  assign joinEventFire = (joinEvent_valid && joinEvent_ready);
  assign joinEvent_ready = 1'b1;
  assign zeroRep_ready = quant_zero_tready;
  assign cntOvf = (cnt == 7'h7f);
  assign afterQuant_valid = quant_q_tvalid;
  assign afterQuant_payload_fragment = quant_q_tdata;
  assign afterQuant_payload_last = (cntOvf && quant_q_tvalid);
  assign io_afterQuant_valid = afterQuant_regNext_valid;
  assign io_afterQuant_payload_last = afterQuant_regNext_payload_last;
  assign io_afterQuant_payload_fragment = afterQuant_regNext_payload_fragment;
  assign io_quantScale_valid = quant_getCfg_scale_regNext_valid;
  assign io_quantScale_payload = quant_getCfg_scale_regNext_payload;
  assign io_quantZero_valid = quant_getCfg_zero_regNext_valid;
  assign io_quantZero_payload = quant_getCfg_zero_regNext_payload;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      kToBeQuant_valid <= 1'b0;
      vToBeQuant_valid <= 1'b0;
      t_io_pop_ready_3 <= 7'h0;
      t_scaleRep_valid_1 <= 1'b0;
      t_io_pop_ready_8 <= 7'h0;
      t_zeroRep_valid_1 <= 1'b0;
      cnt <= 7'h0;
      afterQuant_regNext_valid <= 1'b0;
      quant_getCfg_scale_regNext_valid <= 1'b0;
      quant_getCfg_zero_regNext_valid <= 1'b0;
    end else begin
      kToBeQuant_valid <= (io_toBeQuant_0_valid && (|{(6'h12 == io_toBeQuant_0_tuser),(6'h09 == io_toBeQuant_0_tuser)}));
      vToBeQuant_valid <= (io_toBeQuant_1_valid && (|{(6'h13 == io_toBeQuant_1_tuser),(6'h07 == io_toBeQuant_1_tuser)}));
      t_io_pop_ready_3 <= t_io_pop_ready_2;
      if(t_io_pop_ready) begin
        t_scaleRep_valid_1 <= t_scaleRep_valid;
      end
      t_io_pop_ready_8 <= t_io_pop_ready_7;
      if(t_io_pop_ready_5) begin
        t_zeroRep_valid_1 <= t_zeroRep_valid;
      end
      if(afterQuant_valid) begin
        cnt <= (cnt + 7'h01);
        if(cntOvf) begin
          cnt <= 7'h0;
        end
      end
      afterQuant_regNext_valid <= afterQuant_valid;
      quant_getCfg_scale_regNext_valid <= getCfg_scale_tvalid;
      quant_getCfg_zero_regNext_valid <= getCfg_zero_tvalid;
    end
  end

  always @(posedge clk_1_clk) begin
    kToBeQuant_tdata <= io_toBeQuant_0_tdata;
    kToBeQuant_tuser <= (t_kToBeQuant_tuser[0] ? 6'h0a : 6'h0a);
    vToBeQuant_tdata <= io_toBeQuant_1_tdata;
    vToBeQuant_tuser <= (t_vToBeQuant_tuser[0] ? 6'h0b : 6'h0b);
    if(t_io_pop_ready) begin
      t_scaleRep_payload <= scaleFifo_io_pop_payload;
    end
    if(t_io_pop_ready_5) begin
      t_zeroRep_payload <= zeroFifo_io_pop_payload;
    end
    afterQuant_regNext_payload_last <= afterQuant_payload_last;
    afterQuant_regNext_payload_fragment <= afterQuant_payload_fragment;
    quant_getCfg_scale_regNext_payload <= getCfg_scale_tdata;
    quant_getCfg_zero_regNext_payload <= getCfg_zero_tdata;
  end


endmodule

module SerialRoPE (
  input  wire [15:0]   io_pos,
  input  wire          io_input_0_valid,
  input  wire [15:0]   io_input_0_tdata,
  input  wire [5:0]    io_input_0_tuser,
  output wire          output_tvalid,
  output wire [15:0]   output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                indexGen_pos_valid;
  wire                rotator_io_output_valid;
  wire       [15:0]   rotator_io_output_payload_A;
  wire       [15:0]   rotator_io_output_payload_B;
  wire                indexGen_index_tvalid;
  wire       [15:0]   indexGen_index_tdata;
  wire                cosSinGen_2_index_tready;
  wire                cosSinGen_2_sinCos_tvalid;
  wire       [31:0]   cosSinGen_2_sinCos_tdata;
  wire                qkFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qkFlow_mul_ip_m_axis_result_tdata;
  wire                qkRotateFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qkRotateFlow_mul_ip_m_axis_result_tdata;
  wire                rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [15:0]   rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata;
  reg        [5:0]    t_ropeTgM_tuser_4;
  wire       [1:0]    t_ropeTgM_tuser_5;
  wire       [5:0]    t_ropeTgM_tuser;
  wire                ropeErr;
  wire       [2:0]    t_ropeTgM_tuser_1;
  wire                t_ropeTgM_tuser_2;
  wire                t_ropeTgM_tuser_3;
  wire                ropeTgM_valid;
  wire       [15:0]   ropeTgM_tdata;
  wire       [5:0]    ropeTgM_tuser;
  reg                 ropeIn_tvalid;
  reg        [15:0]   ropeIn_tdata;
  reg        [5:0]    ropeIn_tuser;
  reg        [6:0]    inCnt;
  wire                inCntOvf;
  wire                inCntZero;
  wire                usrStream_valid;
  reg                 usrStream_ready;
  wire       [5:0]    usrStream_payload;
  wire                usrStream_m2sPipe_valid;
  reg                 usrStream_m2sPipe_ready;
  wire       [5:0]    usrStream_m2sPipe_payload;
  reg                 usrStream_rValid;
  reg        [5:0]    usrStream_rData;
  wire                usrStreamPipe_valid;
  wire                usrStreamPipe_ready;
  wire       [5:0]    usrStreamPipe_payload;
  reg                 usrStream_m2sPipe_rValid;
  reg        [5:0]    usrStream_m2sPipe_rData;
  wire                indexMon_tvalid;
  wire       [15:0]   indexMon_tdata;
  wire                rope_indexGen_index_fire;
  wire                joinEvent_valid;
  wire                qkFlow_valid;
  wire       [15:0]   qkFlow_payload;
  wire                cosFlow_tvalid;
  wire       [15:0]   cosFlow_tdata;
  wire                qkRotateFlow_valid;
  wire       [15:0]   qkRotateFlow_payload;
  wire                sinFlow_tvalid;
  wire       [15:0]   sinFlow_tdata;
  reg        [6:0]    outCnt;
  wire                outCntOvf;

  assign t_ropeTgM_tuser_5 = {t_ropeTgM_tuser_3,t_ropeTgM_tuser_2};
  RoPERotate rotator (
    .io_input_valid      (ropeIn_tvalid                    ), //i
    .io_input_payload    (ropeIn_tdata[15:0]               ), //i
    .io_output_valid     (rotator_io_output_valid          ), //o
    .io_output_payload_A (rotator_io_output_payload_A[15:0]), //o
    .io_output_payload_B (rotator_io_output_payload_B[15:0]), //o
    .cfg_dim             (7'h7f                            ), //i
    .clk_1_clk           (clk_1_clk                        ), //i
    .clk_1_resetn        (clk_1_resetn                     )  //i
  );
  CosSinIndexGen indexGen (
    .pos_valid    (indexGen_pos_valid        ), //i
    .pos_payload  (io_pos[15:0]              ), //i
    .index_tvalid (indexGen_index_tvalid     ), //o
    .index_tready (cosSinGen_2_index_tready  ), //i
    .index_tdata  (indexGen_index_tdata[15:0]), //o
    .clk_1_clk    (clk_1_clk                 ), //i
    .clk_1_resetn (clk_1_resetn              )  //i
  );
  CosSinGen cosSinGen_2 (
    .index_tvalid  (indexGen_index_tvalid         ), //i
    .index_tready  (cosSinGen_2_index_tready      ), //o
    .index_tdata   (indexGen_index_tdata[15:0]    ), //i
    .sinCos_tvalid (cosSinGen_2_sinCos_tvalid     ), //o
    .sinCos_tready (rotator_io_output_valid       ), //i
    .sinCos_tdata  (cosSinGen_2_sinCos_tdata[31:0]), //o
    .clk_1_clk     (clk_1_clk                     ), //i
    .clk_1_resetn  (clk_1_resetn                  )  //i
  );
  fp16mul6 qkFlow_mul_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (qkFlow_valid                           ), //i
    .s_axis_a_tdata       (qkFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (cosFlow_tvalid                         ), //i
    .s_axis_b_tdata       (cosFlow_tdata[15:0]                    ), //i
    .m_axis_result_tvalid (qkFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qkFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 qkRotateFlow_mul_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (qkRotateFlow_valid                           ), //i
    .s_axis_a_tdata       (qkRotateFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (sinFlow_tvalid                               ), //i
    .s_axis_b_tdata       (sinFlow_tdata[15:0]                          ), //i
    .m_axis_result_tvalid (qkRotateFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qkRotateFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 rope_qkFlow_mul_ip_m_axis_result_add_ip (
    .aclk                 (clk_1_clk                                                        ), //i
    .s_axis_a_tvalid      (qkFlow_mul_ip_m_axis_result_tvalid                               ), //i
    .s_axis_a_tdata       (qkFlow_mul_ip_m_axis_result_tdata[15:0]                          ), //i
    .s_axis_b_tvalid      (qkRotateFlow_mul_ip_m_axis_result_tvalid                         ), //i
    .s_axis_b_tdata       (qkRotateFlow_mul_ip_m_axis_result_tdata[15:0]                    ), //i
    .m_axis_result_tvalid (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    case(t_ropeTgM_tuser_5)
      2'b00 : t_ropeTgM_tuser_4 = 6'h08;
      2'b01 : t_ropeTgM_tuser_4 = 6'h09;
      default : t_ropeTgM_tuser_4 = 6'h12;
    endcase
  end

  assign ropeErr = 1'b0;
  assign t_ropeTgM_tuser = io_input_0_tuser;
  assign t_ropeTgM_tuser_1 = {(t_ropeTgM_tuser == 6'h11),{(t_ropeTgM_tuser == 6'h06),(t_ropeTgM_tuser == 6'h05)}};
  assign t_ropeTgM_tuser_2 = t_ropeTgM_tuser_1[1];
  assign t_ropeTgM_tuser_3 = t_ropeTgM_tuser_1[2];
  assign ropeTgM_valid = (|(io_input_0_valid && (((io_input_0_tuser == 6'h05) || (io_input_0_tuser == 6'h06)) || (io_input_0_tuser == 6'h11))));
  assign ropeTgM_tdata = io_input_0_tdata;
  assign ropeTgM_tuser = t_ropeTgM_tuser_4;
  assign inCntOvf = (inCnt == 7'h7f);
  assign inCntZero = (inCnt == 7'h0);
  always @(*) begin
    usrStream_ready = usrStream_m2sPipe_ready;
    if((! usrStream_m2sPipe_valid)) begin
      usrStream_ready = 1'b1;
    end
  end

  assign usrStream_m2sPipe_valid = usrStream_rValid;
  assign usrStream_m2sPipe_payload = usrStream_rData;
  always @(*) begin
    usrStream_m2sPipe_ready = usrStreamPipe_ready;
    if((! usrStreamPipe_valid)) begin
      usrStream_m2sPipe_ready = 1'b1;
    end
  end

  assign usrStreamPipe_valid = usrStream_m2sPipe_rValid;
  assign usrStreamPipe_payload = usrStream_m2sPipe_rData;
  assign usrStream_valid = (inCntZero && ropeIn_tvalid);
  assign usrStream_payload = ropeIn_tuser;
  assign rope_indexGen_index_fire = (indexGen_index_tvalid && cosSinGen_2_index_tready);
  assign indexMon_tvalid = rope_indexGen_index_fire;
  assign indexMon_tdata = indexGen_index_tdata;
  assign indexGen_pos_valid = (ropeIn_tvalid && inCntZero);
  assign joinEvent_valid = rotator_io_output_valid;
  assign qkFlow_valid = joinEvent_valid;
  assign qkFlow_payload = rotator_io_output_payload_A;
  assign cosFlow_tvalid = joinEvent_valid;
  assign cosFlow_tdata = cosSinGen_2_sinCos_tdata[15 : 0];
  assign qkRotateFlow_valid = joinEvent_valid;
  assign qkRotateFlow_payload = rotator_io_output_payload_B;
  assign sinFlow_tvalid = joinEvent_valid;
  assign sinFlow_tdata = cosSinGen_2_sinCos_tdata[31 : 16];
  assign output_tvalid = rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  assign output_tdata = rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata;
  assign output_tuser = usrStreamPipe_payload;
  assign outCntOvf = (outCnt == 7'h7f);
  assign usrStreamPipe_ready = (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid && outCntOvf);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      ropeIn_tvalid <= 1'b0;
      inCnt <= 7'h0;
      usrStream_rValid <= 1'b0;
      usrStream_m2sPipe_rValid <= 1'b0;
      outCnt <= 7'h0;
    end else begin
      ropeIn_tvalid <= ropeTgM_valid;
      if(usrStream_ready) begin
        usrStream_rValid <= usrStream_valid;
      end
      if(usrStream_m2sPipe_ready) begin
        usrStream_m2sPipe_rValid <= usrStream_m2sPipe_valid;
      end
      if(ropeIn_tvalid) begin
        inCnt <= (inCnt + 7'h01);
        if(inCntOvf) begin
          inCnt <= 7'h0;
        end
      end
      if(rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid) begin
        outCnt <= (outCnt + 7'h01);
        if(outCntOvf) begin
          outCnt <= 7'h0;
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    ropeIn_tdata <= ropeTgM_tdata;
    ropeIn_tuser <= ropeTgM_tuser;
    if(usrStream_ready) begin
      usrStream_rData <= usrStream_payload;
    end
    if(usrStream_m2sPipe_ready) begin
      usrStream_m2sPipe_rData <= usrStream_m2sPipe_payload;
    end
  end


endmodule

//StreamMux_10 replaced by StreamMux_29

//StreamFifo_23 replaced by StreamFifo_19

//StreamMux_9 replaced by StreamMux_28

//StreamFifo_22 replaced by StreamFifo_20

//StreamFifo_21 replaced by StreamFifo_20

module StreamFifo_20 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [31:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [31:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [31:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [31:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [31:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [31:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [31:0] logic_ram [0:511];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamMux_8 replaced by StreamMux_27

module StreamFifo_19 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:511];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_18 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [7:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [7:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [7:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [7:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [7:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [7:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [7:0] logic_ram [0:511];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamMux_7 replaced by StreamMux_41

//StreamMux_6 replaced by StreamMux_25

//StreamFork_1 replaced by StreamFork

module StreamFork (
  input  wire          io_input_valid,
  output reg           io_input_ready,
  output wire          io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire          io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg                 logic_linkEnable_0;
  reg                 logic_linkEnable_1;
  wire                io_outputs_0_fire;
  wire                io_outputs_1_fire;

  always @(*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && logic_linkEnable_0)) begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && logic_linkEnable_1)) begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && logic_linkEnable_0);
  assign io_outputs_0_fire = (io_outputs_0_valid && io_outputs_0_ready);
  assign io_outputs_1_valid = (io_input_valid && logic_linkEnable_1);
  assign io_outputs_1_fire = (io_outputs_1_valid && io_outputs_1_ready);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_linkEnable_0 <= 1'b1;
      logic_linkEnable_1 <= 1'b1;
    end else begin
      if(io_outputs_0_fire) begin
        logic_linkEnable_0 <= 1'b0;
      end
      if(io_outputs_1_fire) begin
        logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ready) begin
        logic_linkEnable_0 <= 1'b1;
        logic_linkEnable_1 <= 1'b1;
      end
    end
  end


endmodule

//StreamMux_5 replaced by StreamMux_23

//StreamMux_4 replaced by StreamMux_23

//StreamDemux_4 replaced by StreamDemux_25

module KvCacheCase (
  input  wire [9:0]    io_token,
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [0:0]    deMux_io_select;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  wire       [15:0]   t_cntLv1Ovf;
  wire       [5:0]    t_cntLv1Ovf_1;
  wire       [15:0]   t_cntLv2Ovf;
  wire       [10:0]   t_cntLv2Ovf_1;
  wire       [10:0]   kvCnt;
  wire       [5:0]    kvSzCnt;
  reg        [15:0]   cntLv1;
  reg        [15:0]   cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [0:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;
  reg                 kvSzCntZeroDly;

  assign t_cntLv1Ovf_1 = (kvSzCnt - 6'h01);
  assign t_cntLv1Ovf = {10'd0, t_cntLv1Ovf_1};
  assign t_cntLv2Ovf_1 = (kvCnt - 11'h001);
  assign t_cntLv2Ovf = {5'd0, t_cntLv2Ovf_1};
  StreamDemux_17 deMux (
    .io_select          (deMux_io_select         ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign kvCnt = ({1'd0,io_token} <<< 1'd1);
  assign kvSzCnt = io_token[9 : 4];
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == t_cntLv1Ovf);
  assign cntLv2Ovf = (cntLv2 == t_cntLv2Ovf);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(*) begin
    deMux_io_select = sel;
    if(kvSzCntZeroDly) begin
      deMux_io_select = 1'b1;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cntLv1 <= 16'h0;
      cntLv2 <= 16'h0;
      sel <= 1'b0;
      kvSzCntZeroDly <= 1'b1;
    end else begin
      if(io_misc_fire) begin
        cntLv1 <= (cntLv1 + 16'h0001);
        if(cntLv1Ovf) begin
          cntLv1 <= 16'h0;
          sel <= 1'b1;
        end
      end
      if(io_main_fire) begin
        cntLv2 <= (cntLv2 + 16'h0001);
        if(cntLv2Ovf) begin
          cntLv2 <= 16'h0;
          sel <= 1'b0;
        end
      end
      kvSzCntZeroDly <= (kvSzCnt == 6'h0);
    end
  end


endmodule

module StreamFifo_17 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [3:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [3:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [3:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [3:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  wire                logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire       [3:0]    logic_pop_async_readed;
  wire                logic_pop_addressGen_translated_valid;
  wire                logic_pop_addressGen_translated_ready;
  wire       [3:0]    logic_pop_addressGen_translated_payload;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [3:0] logic_ram [0:63];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  assign logic_ram_spinal_port1 = logic_ram[logic_pop_addressGen_payload];
  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  assign logic_pop_async_readed = logic_ram_spinal_port1;
  assign logic_pop_addressGen_translated_valid = logic_pop_addressGen_valid;
  assign logic_pop_addressGen_ready = logic_pop_addressGen_translated_ready;
  assign logic_pop_addressGen_translated_payload = logic_pop_async_readed;
  assign io_pop_valid = logic_pop_addressGen_translated_valid;
  assign logic_pop_addressGen_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_addressGen_translated_payload;
  assign logic_ptr_popOnIo = logic_ptr_pop;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end


endmodule

//StreamFifo_16 replaced by StreamFifo_80

//StreamFifo_15 replaced by StreamFifo_80

module SparseCase (
  input  wire [5:0]    io_tag,
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  wire       [7:0]    t_cntLv1Ovf;
  wire       [7:0]    t_cntLv2Ovf;
  wire       [1:0]    tagHit;
  wire       [7:0]    miscLenVec_0;
  wire       [7:0]    miscLenVec_1;
  wire       [7:0]    mainLenVec_0;
  wire       [7:0]    mainLenVec_1;
  wire                t_miscLen;
  wire       [7:0]    miscLen;
  wire       [7:0]    mainLen;
  reg        [7:0]    cntLv1;
  reg        [7:0]    cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [0:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;

  assign t_cntLv1Ovf = (miscLen - 8'h01);
  assign t_cntLv2Ovf = (mainLen - 8'h01);
  StreamDemux_17 deMux (
    .io_select          (sel                     ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign tagHit = {(6'h11 == io_tag),(6'h10 == io_tag)};
  assign miscLenVec_0 = 8'h01;
  assign miscLenVec_1 = 8'h01;
  assign mainLenVec_0 = 8'h10;
  assign mainLenVec_1 = 8'h10;
  assign t_miscLen = tagHit[0];
  assign miscLen = (t_miscLen ? miscLenVec_0 : miscLenVec_1);
  assign mainLen = (t_miscLen ? mainLenVec_0 : mainLenVec_1);
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == t_cntLv1Ovf);
  assign cntLv2Ovf = (cntLv2 == t_cntLv2Ovf);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cntLv1 <= 8'h0;
      cntLv2 <= 8'h0;
      sel <= 1'b0;
    end else begin
      if(io_misc_fire) begin
        cntLv1 <= (cntLv1 + 8'h01);
        if(cntLv1Ovf) begin
          cntLv1 <= 8'h0;
          sel <= 1'b1;
        end
      end
      if(io_main_fire) begin
        cntLv2 <= (cntLv2 + 8'h01);
        if(cntLv2Ovf) begin
          cntLv2 <= 8'h0;
          sel <= 1'b0;
        end
      end
    end
  end


endmodule

module LargeBankFifo_4 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [3:0]    io_occupancy,
  output wire [3:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [3:0]    fifo_0_io_occupancy;
  wire       [3:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [3:0]    fifo_1_io_occupancy;
  wire       [3:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [3:0]    fifo_2_io_occupancy;
  wire       [3:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [3:0]    fifo_3_io_occupancy;
  wire       [3:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_82 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[3:0]    ), //o
    .io_availability (fifo_0_io_availability[3:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_82 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[3:0]    ), //o
    .io_availability (fifo_1_io_availability[3:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_82 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[3:0]    ), //o
    .io_availability (fifo_2_io_availability[3:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_82 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[3:0]    ), //o
    .io_availability (fifo_3_io_availability[3:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

//StreamDemux_3 replaced by StreamDemux_17

module DenseCase (
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [0:0]    deMux_io_select;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  reg        [7:0]    cntLv1;
  reg        [7:0]    cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [1:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;

  StreamDemux_17 deMux (
    .io_select          (deMux_io_select         ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == 8'h1f);
  assign cntLv2Ovf = (cntLv2 == 8'h03);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(*) begin
    if(((sel == 2'b00) || (sel == 2'b01))) begin
      deMux_io_select = 1'b0;
    end else begin
      deMux_io_select = 1'b1;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cntLv1 <= 8'h0;
      cntLv2 <= 8'h0;
      sel <= 2'b00;
    end else begin
      if((io_misc_fire && (sel == 2'b00))) begin
        sel <= 2'b01;
      end
      if((io_misc_fire && (sel == 2'b01))) begin
        sel <= 2'b10;
      end
      if(io_main_fire) begin
        cntLv1 <= (cntLv1 + 8'h01);
        if(cntLv1Ovf) begin
          cntLv1 <= 8'h0;
          cntLv2 <= (cntLv2 + 8'h01);
          sel <= 2'b01;
          if(cntLv2Ovf) begin
            cntLv2 <= 8'h0;
            sel <= 2'b00;
          end
        end
      end
    end
  end


endmodule

//StreamFifo_14 replaced by StreamFifo_80

module StreamFifo_13 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [127:0] logic_ram [0:511];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamDemux_2 replaced by StreamDemux_8

module StreamFifo_12 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [9:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [9:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [9:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [9:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [9:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [9:0] logic_ram [0:63];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_3 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [6:0]    fifo_0_io_occupancy;
  wire       [6:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [6:0]    fifo_1_io_occupancy;
  wire       [6:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [6:0]    fifo_2_io_occupancy;
  wire       [6:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [6:0]    fifo_3_io_occupancy;
  wire       [6:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_86 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[6:0]    ), //o
    .io_availability (fifo_0_io_availability[6:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_86 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[6:0]    ), //o
    .io_availability (fifo_1_io_availability[6:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_86 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[6:0]    ), //o
    .io_availability (fifo_2_io_availability[6:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_86 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[6:0]    ), //o
    .io_availability (fifo_3_io_availability[6:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

module StreamFifo_11 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [5:0]    io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [5:0]    io_pop_payload_fragment,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [6:0]    logic_ram_spinal_port1;
  wire       [6:0]    t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [5:0]    logic_push_onRam_write_payload_data_fragment;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [5:0]    logic_pop_sync_readPort_rsp_fragment;
  wire       [6:0]    t_logic_pop_sync_readPort_rsp_last;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_fragment;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [6:0] logic_ram [0:31];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_fragment,logic_push_onRam_write_payload_data_last};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_fragment = io_push_payload_fragment;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_fragment = t_logic_pop_sync_readPort_rsp_last[6 : 1];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_fragment = logic_pop_sync_readPort_rsp_fragment;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_fragment = logic_pop_sync_readArbitation_translated_payload_fragment;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_2 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [5:0]    fifo_0_io_occupancy;
  wire       [5:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [5:0]    fifo_1_io_occupancy;
  wire       [5:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [5:0]    fifo_2_io_occupancy;
  wire       [5:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [5:0]    fifo_3_io_occupancy;
  wire       [5:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_90 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[5:0]    ), //o
    .io_availability (fifo_0_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_90 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[5:0]    ), //o
    .io_availability (fifo_1_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_90 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[5:0]    ), //o
    .io_availability (fifo_2_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_90 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[5:0]    ), //o
    .io_availability (fifo_3_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

//StreamMux_3 replaced by StreamMux_22

//StreamMux_2 replaced by StreamMux_21

//StreamDemux_1 replaced by StreamDemux_7

module StreamFifo_26 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [71:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [71:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [71:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [71:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [71:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [71:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [71:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_25 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_24 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [5:0] logic_ram [0:63];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamMux_18 replaced by StreamMux_37

//StreamMux_17 replaced by StreamMux_36

//StreamMux_16 replaced by StreamMux_34

//StreamMux_15 replaced by StreamMux_34

//StreamMux_14 replaced by StreamMux_33

//StreamMux_13 replaced by StreamMux_32

//StreamMux_12 replaced by StreamMux_30

//StreamDemux_5 replaced by StreamDemux_11

module StreamFifoPipe_1 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [0:0]    logic_ram_spinal_port1;
  wire       [0:0]    t_logic_ram_port;
  reg                 t_1;
  wire                popOut_valid;
  reg                 popOut_ready;
  wire                popOut_payload;
  wire                popOut_m2sPipe_valid;
  wire                popOut_m2sPipe_ready;
  wire                popOut_m2sPipe_payload;
  reg                 popOut_rValid;
  reg                 popOut_rData;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [0:0] logic_ram [0:4095];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  always @(*) begin
    popOut_ready = popOut_m2sPipe_ready;
    if((! popOut_m2sPipe_valid)) begin
      popOut_ready = 1'b1;
    end
  end

  assign popOut_m2sPipe_valid = popOut_rValid;
  assign popOut_m2sPipe_payload = popOut_rData;
  assign io_pop_valid = popOut_m2sPipe_valid;
  assign popOut_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload = popOut_m2sPipe_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1[0];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      popOut_rValid <= 1'b0;
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if(popOut_ready) begin
        popOut_rValid <= popOut_valid;
      end
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(popOut_ready) begin
      popOut_rData <= popOut_payload;
    end
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifoPipe replaced by StreamFifoPipe_7

//StreamMux_11 replaced by StreamMux_30

//StreamFifo_28 replaced by StreamFifo_103

//StreamFifo_27 replaced by StreamFifo_103

//StreamFifo_29 replaced by StreamFifo_103

module StreamMux_19 (
  input  wire [2:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [31:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [31:0]   io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [31:0]   io_inputs_2_payload_fragment,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire          io_inputs_3_payload_last,
  input  wire [31:0]   io_inputs_3_payload_fragment,
  input  wire          io_inputs_4_valid,
  output wire          io_inputs_4_ready,
  input  wire          io_inputs_4_payload_last,
  input  wire [31:0]   io_inputs_4_payload_fragment,
  input  wire          io_inputs_5_valid,
  output wire          io_inputs_5_ready,
  input  wire          io_inputs_5_payload_last,
  input  wire [31:0]   io_inputs_5_payload_fragment,
  input  wire          io_inputs_6_valid,
  output wire          io_inputs_6_ready,
  input  wire          io_inputs_6_payload_last,
  input  wire [31:0]   io_inputs_6_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [31:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [31:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      3'b000 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      3'b001 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      3'b010 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
      3'b011 : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload_last = io_inputs_3_payload_last;
        t_io_output_payload_fragment = io_inputs_3_payload_fragment;
      end
      3'b100 : begin
        t_io_output_valid = io_inputs_4_valid;
        t_io_output_payload_last = io_inputs_4_payload_last;
        t_io_output_payload_fragment = io_inputs_4_payload_fragment;
      end
      3'b101 : begin
        t_io_output_valid = io_inputs_5_valid;
        t_io_output_payload_last = io_inputs_5_payload_last;
        t_io_output_payload_fragment = io_inputs_5_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_6_valid;
        t_io_output_payload_last = io_inputs_6_payload_last;
        t_io_output_payload_fragment = io_inputs_6_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 3'b000) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 3'b001) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 3'b010) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 3'b011) && io_output_ready);
  assign io_inputs_4_ready = ((io_select == 3'b100) && io_output_ready);
  assign io_inputs_5_ready = ((io_select == 3'b101) && io_output_ready);
  assign io_inputs_6_ready = ((io_select == 3'b110) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

module StreamMux_20 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [511:0]  io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [511:0]  io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [511:0]  io_inputs_2_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [511:0]  io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [511:0]  t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      2'b00 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      2'b01 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

module StreamFifo_32 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [511:0]  io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [511:0]  io_pop_payload_fragment,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [512:0]  logic_ram_spinal_port1;
  wire       [512:0]  t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [511:0]  logic_push_onRam_write_payload_data_fragment;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [511:0]  logic_pop_sync_readPort_rsp_fragment;
  wire       [512:0]  t_logic_pop_sync_readPort_rsp_last;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload_fragment;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [512:0] logic_ram [0:31];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_fragment,logic_push_onRam_write_payload_data_last};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_fragment = io_push_payload_fragment;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_fragment = t_logic_pop_sync_readPort_rsp_last[512 : 1];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_fragment = logic_pop_sync_readPort_rsp_fragment;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_fragment = logic_pop_sync_readArbitation_translated_payload_fragment;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module BottleNeckFifo_3 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [63:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [2:0]    t_t_adaptIn_payload_1;
  wire       [0:0]    t_t_adaptIn_payload_1_1;
  reg        [63:0]   t_adaptIn_payload_4;
  wire       [2:0]    t_t_adaptOut_valid_1;
  wire       [0:0]    t_t_adaptOut_valid_1_1;
  wire       [383:0]  t_t_adaptOut_payload;
  wire                pushIn_valid;
  reg                 pushIn_ready;
  wire       [511:0]  pushIn_payload;
  wire                pushInPipe_valid;
  wire                pushInPipe_ready;
  wire       [511:0]  pushInPipe_payload;
  reg                 pushIn_rValid;
  reg        [511:0]  pushIn_rData;
  wire                adaptIn_valid;
  reg                 adaptIn_ready;
  wire       [63:0]   adaptIn_payload;
  wire                adaptIn_fire;
  reg                 t_adaptIn_payload;
  reg        [2:0]    t_adaptIn_payload_1;
  reg        [2:0]    t_adaptIn_payload_2;
  wire                t_pushInPipe_ready;
  wire       [511:0]  t_adaptIn_payload_3;
  wire                adaptOut_valid;
  wire                adaptOut_ready;
  wire       [511:0]  adaptOut_payload;
  wire                v_fifo_fifo_io_pop_fire;
  reg                 t_adaptOut_valid;
  reg        [2:0]    t_adaptOut_valid_1;
  reg        [2:0]    t_adaptOut_valid_2;
  wire                t_adaptOut_valid_3;
  reg        [447:0]  t_adaptOut_payload;
  wire                adaptIn_m2sPipe_valid;
  wire                adaptIn_m2sPipe_ready;
  wire       [63:0]   adaptIn_m2sPipe_payload;
  reg                 adaptIn_rValid;
  reg        [63:0]   adaptIn_rData;

  assign t_t_adaptIn_payload_1_1 = t_adaptIn_payload;
  assign t_t_adaptIn_payload_1 = {2'd0, t_t_adaptIn_payload_1_1};
  assign t_t_adaptOut_valid_1_1 = t_adaptOut_valid;
  assign t_t_adaptOut_valid_1 = {2'd0, t_t_adaptOut_valid_1_1};
  assign t_t_adaptOut_payload = (t_adaptOut_payload >>> 7'd64);
  StreamFifo_95 fifo (
    .io_push_valid   (adaptIn_m2sPipe_valid        ), //i
    .io_push_ready   (fifo_io_push_ready           ), //o
    .io_push_payload (adaptIn_m2sPipe_payload[63:0]), //i
    .io_pop_valid    (fifo_io_pop_valid            ), //o
    .io_pop_ready    (fifo_io_pop_ready            ), //i
    .io_pop_payload  (fifo_io_pop_payload[63:0]    ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]      ), //o
    .io_availability (fifo_io_availability[12:0]   ), //o
    .clk_0_clk       (clk_0_clk                    ), //i
    .clk_0_resetn    (clk_0_resetn                 )  //i
  );
  always @(*) begin
    case(t_adaptIn_payload_2)
      3'b000 : t_adaptIn_payload_4 = t_adaptIn_payload_3[63 : 0];
      3'b001 : t_adaptIn_payload_4 = t_adaptIn_payload_3[127 : 64];
      3'b010 : t_adaptIn_payload_4 = t_adaptIn_payload_3[191 : 128];
      3'b011 : t_adaptIn_payload_4 = t_adaptIn_payload_3[255 : 192];
      3'b100 : t_adaptIn_payload_4 = t_adaptIn_payload_3[319 : 256];
      3'b101 : t_adaptIn_payload_4 = t_adaptIn_payload_3[383 : 320];
      3'b110 : t_adaptIn_payload_4 = t_adaptIn_payload_3[447 : 384];
      default : t_adaptIn_payload_4 = t_adaptIn_payload_3[511 : 448];
    endcase
  end

  assign pushIn_valid = io_push_valid;
  assign pushIn_payload = io_push_payload;
  always @(*) begin
    pushIn_ready = pushInPipe_ready;
    if((! pushInPipe_valid)) begin
      pushIn_ready = 1'b1;
    end
  end

  assign pushInPipe_valid = pushIn_rValid;
  assign pushInPipe_payload = pushIn_rData;
  assign adaptIn_fire = (adaptIn_valid && adaptIn_ready);
  always @(*) begin
    t_adaptIn_payload = 1'b0;
    if(adaptIn_fire) begin
      t_adaptIn_payload = 1'b1;
    end
  end

  assign t_pushInPipe_ready = (t_adaptIn_payload_2 == 3'b111);
  always @(*) begin
    t_adaptIn_payload_1 = (t_adaptIn_payload_2 + t_t_adaptIn_payload_1);
    if(1'b0) begin
      t_adaptIn_payload_1 = 3'b000;
    end
  end

  assign adaptIn_valid = pushInPipe_valid;
  assign t_adaptIn_payload_3 = pushInPipe_payload;
  assign adaptIn_payload = t_adaptIn_payload_4;
  assign pushInPipe_ready = (adaptIn_ready && t_pushInPipe_ready);
  assign v_fifo_fifo_io_pop_fire = (fifo_io_pop_valid && fifo_io_pop_ready);
  always @(*) begin
    t_adaptOut_valid = 1'b0;
    if(v_fifo_fifo_io_pop_fire) begin
      t_adaptOut_valid = 1'b1;
    end
  end

  assign t_adaptOut_valid_3 = (t_adaptOut_valid_2 == 3'b111);
  always @(*) begin
    t_adaptOut_valid_1 = (t_adaptOut_valid_2 + t_t_adaptOut_valid_1);
    if(1'b0) begin
      t_adaptOut_valid_1 = 3'b000;
    end
  end

  assign adaptOut_valid = (fifo_io_pop_valid && t_adaptOut_valid_3);
  assign adaptOut_payload = {fifo_io_pop_payload,t_adaptOut_payload};
  assign fifo_io_pop_ready = (! ((! adaptOut_ready) && t_adaptOut_valid_3));
  always @(*) begin
    adaptIn_ready = adaptIn_m2sPipe_ready;
    if((! adaptIn_m2sPipe_valid)) begin
      adaptIn_ready = 1'b1;
    end
  end

  assign adaptIn_m2sPipe_valid = adaptIn_rValid;
  assign adaptIn_m2sPipe_payload = adaptIn_rData;
  assign adaptIn_m2sPipe_ready = fifo_io_push_ready;
  assign io_pop_valid = adaptOut_valid;
  assign adaptOut_ready = io_pop_ready;
  assign io_pop_payload = adaptOut_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      pushIn_rValid <= 1'b0;
      t_adaptIn_payload_2 <= 3'b000;
      t_adaptOut_valid_2 <= 3'b000;
      adaptIn_rValid <= 1'b0;
    end else begin
      if(pushIn_ready) begin
        pushIn_rValid <= pushIn_valid;
      end
      t_adaptIn_payload_2 <= t_adaptIn_payload_1;
      t_adaptOut_valid_2 <= t_adaptOut_valid_1;
      if(adaptIn_ready) begin
        adaptIn_rValid <= adaptIn_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(pushIn_ready) begin
      pushIn_rData <= pushIn_payload;
    end
    if(v_fifo_fifo_io_pop_fire) begin
      t_adaptOut_payload <= {fifo_io_pop_payload,t_t_adaptOut_payload};
    end
    if(adaptIn_ready) begin
      adaptIn_rData <= adaptIn_payload;
    end
  end


endmodule

//StreamFifo_31 replaced by StreamFifo_103

module BottleNeckFifo_2 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [63:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [2:0]    t_t_adaptIn_payload_1;
  wire       [0:0]    t_t_adaptIn_payload_1_1;
  reg        [63:0]   t_adaptIn_payload_4;
  wire       [2:0]    t_t_adaptOut_valid_1;
  wire       [0:0]    t_t_adaptOut_valid_1_1;
  wire       [383:0]  t_t_adaptOut_payload;
  wire                pushIn_valid;
  reg                 pushIn_ready;
  wire       [511:0]  pushIn_payload;
  wire                pushInPipe_valid;
  wire                pushInPipe_ready;
  wire       [511:0]  pushInPipe_payload;
  reg                 pushIn_rValid;
  reg        [511:0]  pushIn_rData;
  wire                adaptIn_valid;
  reg                 adaptIn_ready;
  wire       [63:0]   adaptIn_payload;
  wire                adaptIn_fire;
  reg                 t_adaptIn_payload;
  reg        [2:0]    t_adaptIn_payload_1;
  reg        [2:0]    t_adaptIn_payload_2;
  wire                t_pushInPipe_ready;
  wire       [511:0]  t_adaptIn_payload_3;
  wire                adaptOut_valid;
  wire                adaptOut_ready;
  wire       [511:0]  adaptOut_payload;
  wire                k_fifo_fifo_io_pop_fire;
  reg                 t_adaptOut_valid;
  reg        [2:0]    t_adaptOut_valid_1;
  reg        [2:0]    t_adaptOut_valid_2;
  wire                t_adaptOut_valid_3;
  reg        [447:0]  t_adaptOut_payload;
  wire                adaptIn_m2sPipe_valid;
  wire                adaptIn_m2sPipe_ready;
  wire       [63:0]   adaptIn_m2sPipe_payload;
  reg                 adaptIn_rValid;
  reg        [63:0]   adaptIn_rData;

  assign t_t_adaptIn_payload_1_1 = t_adaptIn_payload;
  assign t_t_adaptIn_payload_1 = {2'd0, t_t_adaptIn_payload_1_1};
  assign t_t_adaptOut_valid_1_1 = t_adaptOut_valid;
  assign t_t_adaptOut_valid_1 = {2'd0, t_t_adaptOut_valid_1_1};
  assign t_t_adaptOut_payload = (t_adaptOut_payload >>> 7'd64);
  StreamFifo_95 fifo (
    .io_push_valid   (adaptIn_m2sPipe_valid        ), //i
    .io_push_ready   (fifo_io_push_ready           ), //o
    .io_push_payload (adaptIn_m2sPipe_payload[63:0]), //i
    .io_pop_valid    (fifo_io_pop_valid            ), //o
    .io_pop_ready    (fifo_io_pop_ready            ), //i
    .io_pop_payload  (fifo_io_pop_payload[63:0]    ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]      ), //o
    .io_availability (fifo_io_availability[12:0]   ), //o
    .clk_0_clk       (clk_0_clk                    ), //i
    .clk_0_resetn    (clk_0_resetn                 )  //i
  );
  always @(*) begin
    case(t_adaptIn_payload_2)
      3'b000 : t_adaptIn_payload_4 = t_adaptIn_payload_3[63 : 0];
      3'b001 : t_adaptIn_payload_4 = t_adaptIn_payload_3[127 : 64];
      3'b010 : t_adaptIn_payload_4 = t_adaptIn_payload_3[191 : 128];
      3'b011 : t_adaptIn_payload_4 = t_adaptIn_payload_3[255 : 192];
      3'b100 : t_adaptIn_payload_4 = t_adaptIn_payload_3[319 : 256];
      3'b101 : t_adaptIn_payload_4 = t_adaptIn_payload_3[383 : 320];
      3'b110 : t_adaptIn_payload_4 = t_adaptIn_payload_3[447 : 384];
      default : t_adaptIn_payload_4 = t_adaptIn_payload_3[511 : 448];
    endcase
  end

  assign pushIn_valid = io_push_valid;
  assign pushIn_payload = io_push_payload;
  always @(*) begin
    pushIn_ready = pushInPipe_ready;
    if((! pushInPipe_valid)) begin
      pushIn_ready = 1'b1;
    end
  end

  assign pushInPipe_valid = pushIn_rValid;
  assign pushInPipe_payload = pushIn_rData;
  assign adaptIn_fire = (adaptIn_valid && adaptIn_ready);
  always @(*) begin
    t_adaptIn_payload = 1'b0;
    if(adaptIn_fire) begin
      t_adaptIn_payload = 1'b1;
    end
  end

  assign t_pushInPipe_ready = (t_adaptIn_payload_2 == 3'b111);
  always @(*) begin
    t_adaptIn_payload_1 = (t_adaptIn_payload_2 + t_t_adaptIn_payload_1);
    if(1'b0) begin
      t_adaptIn_payload_1 = 3'b000;
    end
  end

  assign adaptIn_valid = pushInPipe_valid;
  assign t_adaptIn_payload_3 = pushInPipe_payload;
  assign adaptIn_payload = t_adaptIn_payload_4;
  assign pushInPipe_ready = (adaptIn_ready && t_pushInPipe_ready);
  assign k_fifo_fifo_io_pop_fire = (fifo_io_pop_valid && fifo_io_pop_ready);
  always @(*) begin
    t_adaptOut_valid = 1'b0;
    if(k_fifo_fifo_io_pop_fire) begin
      t_adaptOut_valid = 1'b1;
    end
  end

  assign t_adaptOut_valid_3 = (t_adaptOut_valid_2 == 3'b111);
  always @(*) begin
    t_adaptOut_valid_1 = (t_adaptOut_valid_2 + t_t_adaptOut_valid_1);
    if(1'b0) begin
      t_adaptOut_valid_1 = 3'b000;
    end
  end

  assign adaptOut_valid = (fifo_io_pop_valid && t_adaptOut_valid_3);
  assign adaptOut_payload = {fifo_io_pop_payload,t_adaptOut_payload};
  assign fifo_io_pop_ready = (! ((! adaptOut_ready) && t_adaptOut_valid_3));
  always @(*) begin
    adaptIn_ready = adaptIn_m2sPipe_ready;
    if((! adaptIn_m2sPipe_valid)) begin
      adaptIn_ready = 1'b1;
    end
  end

  assign adaptIn_m2sPipe_valid = adaptIn_rValid;
  assign adaptIn_m2sPipe_payload = adaptIn_rData;
  assign adaptIn_m2sPipe_ready = fifo_io_push_ready;
  assign io_pop_valid = adaptOut_valid;
  assign adaptOut_ready = io_pop_ready;
  assign io_pop_payload = adaptOut_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      pushIn_rValid <= 1'b0;
      t_adaptIn_payload_2 <= 3'b000;
      t_adaptOut_valid_2 <= 3'b000;
      adaptIn_rValid <= 1'b0;
    end else begin
      if(pushIn_ready) begin
        pushIn_rValid <= pushIn_valid;
      end
      t_adaptIn_payload_2 <= t_adaptIn_payload_1;
      t_adaptOut_valid_2 <= t_adaptOut_valid_1;
      if(adaptIn_ready) begin
        adaptIn_rValid <= adaptIn_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(pushIn_ready) begin
      pushIn_rData <= pushIn_payload;
    end
    if(k_fifo_fifo_io_pop_fire) begin
      t_adaptOut_payload <= {fifo_io_pop_payload,t_t_adaptOut_payload};
    end
    if(adaptIn_ready) begin
      adaptIn_rData <= adaptIn_payload;
    end
  end


endmodule

//StreamFifo_30 replaced by StreamFifo_103

module GtZeroCnt_1 (
  input  wire          io_index_valid,
  input  wire          io_index_payload_last,
  input  wire [15:0]   io_index_payload_tdata,
  input  wire [5:0]    io_index_payload_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   cnt;
  wire                output_valid;
  reg                 output_ready;
  wire       [15:0]   output_tdata;
  wire       [5:0]    output_tuser;
  wire                output_m2sPipe_valid;
  wire                output_m2sPipe_ready;
  wire       [15:0]   output_m2sPipe_tdata;
  wire       [5:0]    output_m2sPipe_tuser;
  reg                 output_rValid;
  reg        [15:0]   t_output_m2sPipe_tdata;
  reg        [5:0]    t_output_m2sPipe_tuser;

  assign output_valid = (io_index_valid && io_index_payload_last);
  assign output_tdata = cnt;
  assign output_tuser = io_index_payload_tuser;
  always @(*) begin
    output_ready = output_m2sPipe_ready;
    if((! output_m2sPipe_valid)) begin
      output_ready = 1'b1;
    end
  end

  assign output_m2sPipe_valid = output_rValid;
  assign output_m2sPipe_tdata = t_output_m2sPipe_tdata;
  assign output_m2sPipe_tuser = t_output_m2sPipe_tuser;
  assign io_output_valid = output_m2sPipe_valid;
  assign output_m2sPipe_ready = io_output_ready;
  assign io_output_tdata = output_m2sPipe_tdata;
  assign io_output_tuser = output_m2sPipe_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cnt <= 16'h0;
      output_rValid <= 1'b0;
    end else begin
      if(io_index_valid) begin
        cnt <= (cnt + 16'h0001);
        if(io_index_payload_last) begin
          cnt <= 16'h0;
        end
      end
      if(output_ready) begin
        output_rValid <= output_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(output_ready) begin
      t_output_m2sPipe_tdata <= output_tdata;
      t_output_m2sPipe_tuser <= output_tuser;
    end
  end


endmodule

module AllReduce_1 (
  input  wire          input_valid,
  input  wire [15:0]   input_tdata,
  input  wire [5:0]    input_tuser,
  input  wire [0:0]    input_tdest,
  output wire          output_tvalid,
  output wire [15:0]   output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_0_resetn,
  input  wire          clk_0_clk
);

  wire                multiCore_tuser_fifo_io_push_ready;
  wire                multiCore_tuser_fifo_io_pop_valid;
  wire       [5:0]    multiCore_tuser_fifo_io_pop_payload;
  wire       [5:0]    multiCore_tuser_fifo_io_occupancy;
  wire       [5:0]    multiCore_tuser_fifo_io_availability;
  wire                multiCore_accIn_acc_ip_m_axis_result_tvalid;
  wire                multiCore_accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   multiCore_accIn_acc_ip_m_axis_result_tdata;
  wire                input_valid_1;
  wire       [15:0]   input_tdata_1;
  wire       [5:0]    input_tuser_1;
  wire                cond;
  wire                multiCore_tuser_valid;
  wire                multiCore_tuser_ready;
  wire       [5:0]    multiCore_tuser_payload;
  reg        [0:0]    multiCore_idCnt;
  wire                multiCore_idOvf;
  wire                multiCore_accIn_valid;
  wire                multiCore_accIn_payload_last;
  wire       [15:0]   multiCore_accIn_payload_fragment;

  StreamFifo_96 multiCore_tuser_fifo (
    .io_push_valid   (multiCore_tuser_valid                    ), //i
    .io_push_ready   (multiCore_tuser_fifo_io_push_ready       ), //o
    .io_push_payload (multiCore_tuser_payload[5:0]             ), //i
    .io_pop_valid    (multiCore_tuser_fifo_io_pop_valid        ), //o
    .io_pop_ready    (output_tvalid                            ), //i
    .io_pop_payload  (multiCore_tuser_fifo_io_pop_payload[5:0] ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (multiCore_tuser_fifo_io_occupancy[5:0]   ), //o
    .io_availability (multiCore_tuser_fifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                                ), //i
    .clk_0_resetn    (clk_0_resetn                             )  //i
  );
  fp16acc16 multiCore_accIn_acc_ip (
    .aclk                 (clk_0_clk                                       ), //i
    .aresetn              (clk_0_resetn                                    ), //i
    .s_axis_a_tvalid      (multiCore_accIn_valid                           ), //i
    .s_axis_a_tlast       (multiCore_accIn_payload_last                    ), //i
    .s_axis_a_tdata       (multiCore_accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (multiCore_accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (multiCore_accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (multiCore_accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  assign cond = ((((((input_tuser == 6'h1b) || (input_tuser == 6'h18)) || (input_tuser == 6'h16)) || (input_tuser == 6'h20)) || (input_tuser == 6'h23)) || (input_tuser == 6'h10));
  assign input_valid_1 = (input_valid && cond);
  assign input_tdata_1 = input_tdata;
  assign input_tuser_1 = input_tuser;
  assign multiCore_tuser_ready = multiCore_tuser_fifo_io_push_ready;
  assign multiCore_idOvf = (multiCore_idCnt == 1'b1);
  assign multiCore_tuser_valid = (input_valid_1 && multiCore_idOvf);
  assign multiCore_tuser_payload = input_tuser;
  assign multiCore_accIn_valid = input_valid_1;
  assign multiCore_accIn_payload_fragment = input_tdata_1;
  assign multiCore_accIn_payload_last = multiCore_idOvf;
  assign output_tvalid = (multiCore_accIn_acc_ip_m_axis_result_tvalid && multiCore_accIn_acc_ip_m_axis_result_tlast);
  assign output_tdata = multiCore_accIn_acc_ip_m_axis_result_tdata;
  assign output_tuser = multiCore_tuser_fifo_io_pop_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      multiCore_idCnt <= 1'b0;
    end else begin
      if(input_valid_1) begin
        multiCore_idCnt <= (multiCore_idCnt + 1'b1);
      end
    end
  end


endmodule

module AllGatherNode_1 (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_tdata,
  input  wire [5:0]    io_input_payload_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  output wire [0:0]    io_output_payload_tdest,
  input  wire          io_from_valid,
  input  wire          io_from_payload_last,
  input  wire [15:0]   io_from_payload_tdata,
  input  wire [5:0]    io_from_payload_tuser,
  input  wire [0:0]    io_from_payload_tdest,
  output wire          io_to_valid,
  output wire          io_to_payload_last,
  output wire [15:0]   io_to_payload_tdata,
  output wire [5:0]    io_to_payload_tuser,
  output wire [0:0]    io_to_payload_tdest,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [0:0]    multiCore_mux_io_select;
  wire                multiCore_mux_io_output_ready;
  wire                multiCore_inFifo_io_push_ready;
  wire                multiCore_inFifo_io_pop_valid;
  wire                multiCore_inFifo_io_pop_payload_last;
  wire       [15:0]   multiCore_inFifo_io_pop_payload_tdata;
  wire       [5:0]    multiCore_inFifo_io_pop_payload_tuser;
  wire       [14:0]   multiCore_inFifo_io_occupancy;
  wire       [14:0]   multiCore_inFifo_io_availability;
  wire                multiCore_fromFifo_io_push_ready;
  wire                multiCore_fromFifo_io_pop_valid;
  wire                multiCore_fromFifo_io_pop_payload_last;
  wire       [15:0]   multiCore_fromFifo_io_pop_payload_tdata;
  wire       [5:0]    multiCore_fromFifo_io_pop_payload_tuser;
  wire       [0:0]    multiCore_fromFifo_io_pop_payload_tdest;
  wire       [14:0]   multiCore_fromFifo_io_occupancy;
  wire       [14:0]   multiCore_fromFifo_io_availability;
  wire                multiCore_mux_io_inputs_0_ready;
  wire                multiCore_mux_io_inputs_1_ready;
  wire                multiCore_mux_io_output_valid;
  wire                multiCore_mux_io_output_payload_last;
  wire       [15:0]   multiCore_mux_io_output_payload_tdata;
  wire       [5:0]    multiCore_mux_io_output_payload_tuser;
  wire       [0:0]    multiCore_mux_io_output_payload_tdest;
  wire                io_from_takeWhen_valid;
  wire                io_from_takeWhen_payload_last;
  wire       [15:0]   io_from_takeWhen_payload_tdata;
  wire       [5:0]    io_from_takeWhen_payload_tuser;
  wire       [0:0]    io_from_takeWhen_payload_tdest;
  wire                io_from_takeWhen_toStream_valid;
  wire                io_from_takeWhen_toStream_ready;
  wire                io_from_takeWhen_toStream_payload_last;
  wire       [15:0]   io_from_takeWhen_toStream_payload_tdata;
  wire       [5:0]    io_from_takeWhen_toStream_payload_tuser;
  wire       [0:0]    io_from_takeWhen_toStream_payload_tdest;
  wire                multiCore_insert_valid;
  wire                multiCore_insert_ready;
  wire                multiCore_insert_payload_last;
  wire       [15:0]   multiCore_insert_payload_tdata;
  wire       [5:0]    multiCore_insert_payload_tuser;
  wire       [0:0]    multiCore_insert_payload_tdest;
  wire                multiCore_muxOutput_valid;
  wire                multiCore_muxOutput_payload_last;
  wire       [15:0]   multiCore_muxOutput_payload_tdata;
  wire       [5:0]    multiCore_muxOutput_payload_tuser;
  wire       [0:0]    multiCore_muxOutput_payload_tdest;
  reg                 multiCore_muxOutput_regNext_valid;
  reg                 multiCore_muxOutput_regNext_payload_last;
  reg        [15:0]   multiCore_muxOutput_regNext_payload_tdata;
  reg        [5:0]    multiCore_muxOutput_regNext_payload_tuser;
  reg        [0:0]    multiCore_muxOutput_regNext_payload_tdest;
  reg                 multiCore_muxPipe_valid;
  reg                 multiCore_muxPipe_payload_last;
  reg        [15:0]   multiCore_muxPipe_payload_tdata;
  reg        [5:0]    multiCore_muxPipe_payload_tuser;
  reg        [0:0]    multiCore_muxPipe_payload_tdest;
  wire                multiCore_enCnt;
  reg        [0:0]    multiCore_cnt;
  wire                multiCore_insertSel;

  StreamFifo_97 multiCore_inFifo (
    .io_push_valid         (io_input_valid                             ), //i
    .io_push_ready         (multiCore_inFifo_io_push_ready             ), //o
    .io_push_payload_last  (io_input_payload_last                      ), //i
    .io_push_payload_tdata (io_input_payload_tdata[15:0]               ), //i
    .io_push_payload_tuser (io_input_payload_tuser[5:0]                ), //i
    .io_pop_valid          (multiCore_inFifo_io_pop_valid              ), //o
    .io_pop_ready          (multiCore_insert_ready                     ), //i
    .io_pop_payload_last   (multiCore_inFifo_io_pop_payload_last       ), //o
    .io_pop_payload_tdata  (multiCore_inFifo_io_pop_payload_tdata[15:0]), //o
    .io_pop_payload_tuser  (multiCore_inFifo_io_pop_payload_tuser[5:0] ), //o
    .io_flush              (1'b0                                       ), //i
    .io_occupancy          (multiCore_inFifo_io_occupancy[14:0]        ), //o
    .io_availability       (multiCore_inFifo_io_availability[14:0]     ), //o
    .clk_0_clk             (clk_0_clk                                  ), //i
    .clk_0_resetn          (clk_0_resetn                               )  //i
  );
  StreamFifo_98 multiCore_fromFifo (
    .io_push_valid         (io_from_takeWhen_toStream_valid              ), //i
    .io_push_ready         (multiCore_fromFifo_io_push_ready             ), //o
    .io_push_payload_last  (io_from_takeWhen_toStream_payload_last       ), //i
    .io_push_payload_tdata (io_from_takeWhen_toStream_payload_tdata[15:0]), //i
    .io_push_payload_tuser (io_from_takeWhen_toStream_payload_tuser[5:0] ), //i
    .io_push_payload_tdest (io_from_takeWhen_toStream_payload_tdest      ), //i
    .io_pop_valid          (multiCore_fromFifo_io_pop_valid              ), //o
    .io_pop_ready          (multiCore_mux_io_inputs_0_ready              ), //i
    .io_pop_payload_last   (multiCore_fromFifo_io_pop_payload_last       ), //o
    .io_pop_payload_tdata  (multiCore_fromFifo_io_pop_payload_tdata[15:0]), //o
    .io_pop_payload_tuser  (multiCore_fromFifo_io_pop_payload_tuser[5:0] ), //o
    .io_pop_payload_tdest  (multiCore_fromFifo_io_pop_payload_tdest      ), //o
    .io_flush              (1'b0                                         ), //i
    .io_occupancy          (multiCore_fromFifo_io_occupancy[14:0]        ), //o
    .io_availability       (multiCore_fromFifo_io_availability[14:0]     ), //o
    .clk_0_clk             (clk_0_clk                                    ), //i
    .clk_0_resetn          (clk_0_resetn                                 )  //i
  );
  StreamMux_40 multiCore_mux (
    .io_select                 (multiCore_mux_io_select                      ), //i
    .io_inputs_0_valid         (multiCore_fromFifo_io_pop_valid              ), //i
    .io_inputs_0_ready         (multiCore_mux_io_inputs_0_ready              ), //o
    .io_inputs_0_payload_last  (multiCore_fromFifo_io_pop_payload_last       ), //i
    .io_inputs_0_payload_tdata (multiCore_fromFifo_io_pop_payload_tdata[15:0]), //i
    .io_inputs_0_payload_tuser (multiCore_fromFifo_io_pop_payload_tuser[5:0] ), //i
    .io_inputs_0_payload_tdest (multiCore_fromFifo_io_pop_payload_tdest      ), //i
    .io_inputs_1_valid         (multiCore_insert_valid                       ), //i
    .io_inputs_1_ready         (multiCore_mux_io_inputs_1_ready              ), //o
    .io_inputs_1_payload_last  (multiCore_insert_payload_last                ), //i
    .io_inputs_1_payload_tdata (multiCore_insert_payload_tdata[15:0]         ), //i
    .io_inputs_1_payload_tuser (multiCore_insert_payload_tuser[5:0]          ), //i
    .io_inputs_1_payload_tdest (multiCore_insert_payload_tdest               ), //i
    .io_output_valid           (multiCore_mux_io_output_valid                ), //o
    .io_output_ready           (multiCore_mux_io_output_ready                ), //i
    .io_output_payload_last    (multiCore_mux_io_output_payload_last         ), //o
    .io_output_payload_tdata   (multiCore_mux_io_output_payload_tdata[15:0]  ), //o
    .io_output_payload_tuser   (multiCore_mux_io_output_payload_tuser[5:0]   ), //o
    .io_output_payload_tdest   (multiCore_mux_io_output_payload_tdest        )  //o
  );
  assign io_from_takeWhen_valid = (io_from_valid && (! (io_from_payload_tdest == 1'b0)));
  assign io_from_takeWhen_payload_last = io_from_payload_last;
  assign io_from_takeWhen_payload_tdata = io_from_payload_tdata;
  assign io_from_takeWhen_payload_tuser = io_from_payload_tuser;
  assign io_from_takeWhen_payload_tdest = io_from_payload_tdest;
  assign io_from_takeWhen_toStream_valid = io_from_takeWhen_valid;
  assign io_from_takeWhen_toStream_payload_last = io_from_takeWhen_payload_last;
  assign io_from_takeWhen_toStream_payload_tdata = io_from_takeWhen_payload_tdata;
  assign io_from_takeWhen_toStream_payload_tuser = io_from_takeWhen_payload_tuser;
  assign io_from_takeWhen_toStream_payload_tdest = io_from_takeWhen_payload_tdest;
  assign io_from_takeWhen_toStream_ready = multiCore_fromFifo_io_push_ready;
  assign multiCore_insert_valid = multiCore_inFifo_io_pop_valid;
  assign multiCore_insert_payload_tdata = multiCore_inFifo_io_pop_payload_tdata;
  assign multiCore_insert_payload_tuser = multiCore_inFifo_io_pop_payload_tuser;
  assign multiCore_insert_payload_tdest = 1'b0;
  assign multiCore_insert_payload_last = multiCore_inFifo_io_pop_payload_last;
  assign multiCore_insert_ready = multiCore_mux_io_inputs_1_ready;
  assign multiCore_mux_io_output_ready = 1'b1;
  assign multiCore_muxOutput_valid = multiCore_mux_io_output_valid;
  assign multiCore_muxOutput_payload_last = multiCore_mux_io_output_payload_last;
  assign multiCore_muxOutput_payload_tdata = multiCore_mux_io_output_payload_tdata;
  assign multiCore_muxOutput_payload_tuser = multiCore_mux_io_output_payload_tuser;
  assign multiCore_muxOutput_payload_tdest = multiCore_mux_io_output_payload_tdest;
  assign io_to_valid = multiCore_muxPipe_valid;
  assign io_to_payload_last = multiCore_muxPipe_payload_last;
  assign io_to_payload_tdata = multiCore_muxPipe_payload_tdata;
  assign io_to_payload_tuser = multiCore_muxPipe_payload_tuser;
  assign io_to_payload_tdest = multiCore_muxPipe_payload_tdest;
  assign multiCore_enCnt = (multiCore_mux_io_output_valid && multiCore_mux_io_output_ready);
  assign io_output_payload_tdest = multiCore_muxOutput_payload_tdest;
  assign io_output_payload_tdata = multiCore_muxOutput_payload_tdata;
  assign io_output_payload_tuser = multiCore_muxOutput_payload_tuser;
  assign io_output_valid = multiCore_enCnt;
  assign io_output_payload_last = multiCore_muxOutput_payload_last;
  assign multiCore_insertSel = (multiCore_cnt == 1'b0);
  assign multiCore_mux_io_select = multiCore_insertSel;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      multiCore_muxOutput_regNext_valid <= 1'b0;
      multiCore_muxPipe_valid <= 1'b0;
      multiCore_cnt <= 1'b0;
    end else begin
      multiCore_muxOutput_regNext_valid <= multiCore_muxOutput_valid;
      multiCore_muxPipe_valid <= multiCore_muxOutput_regNext_valid;
      if(multiCore_enCnt) begin
        if(multiCore_mux_io_output_payload_last) begin
          multiCore_cnt <= (multiCore_cnt + 1'b1);
          if((multiCore_cnt == 1'b1)) begin
            multiCore_cnt <= 1'b0;
          end
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    multiCore_muxOutput_regNext_payload_last <= multiCore_muxOutput_payload_last;
    multiCore_muxOutput_regNext_payload_tdata <= multiCore_muxOutput_payload_tdata;
    multiCore_muxOutput_regNext_payload_tuser <= multiCore_muxOutput_payload_tuser;
    multiCore_muxOutput_regNext_payload_tdest <= multiCore_muxOutput_payload_tdest;
    multiCore_muxPipe_payload_last <= multiCore_muxOutput_regNext_payload_last;
    multiCore_muxPipe_payload_tdata <= multiCore_muxOutput_regNext_payload_tdata;
    multiCore_muxPipe_payload_tuser <= multiCore_muxOutput_regNext_payload_tuser;
    multiCore_muxPipe_payload_tdest <= multiCore_muxOutput_regNext_payload_tdest;
  end


endmodule

module Fp32AccEngine_1 (
  input  wire          io_inputs_0_valid,
  input  wire          io_inputs_0_payload_last,
  input  wire [15:0]   io_inputs_0_payload_tdata,
  input  wire [5:0]    io_inputs_0_payload_tuser,
  input  wire          io_inputs_1_valid,
  input  wire          io_inputs_1_payload_last,
  input  wire [15:0]   io_inputs_1_payload_tdata,
  input  wire [5:0]    io_inputs_1_payload_tuser,
  input  wire          io_inputs_2_valid,
  input  wire          io_inputs_2_payload_last,
  input  wire [15:0]   io_inputs_2_payload_tdata,
  input  wire [5:0]    io_inputs_2_payload_tuser,
  input  wire          io_inputs_3_valid,
  input  wire          io_inputs_3_payload_last,
  input  wire [15:0]   io_inputs_3_payload_tdata,
  input  wire [5:0]    io_inputs_3_payload_tuser,
  input  wire          io_postScale_valid,
  output wire          io_postScale_ready,
  input  wire [31:0]   io_postScale_payload,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                inputs_0_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_0_to_ip_m_axis_result_tdata;
  wire                inputs_1_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_1_to_ip_m_axis_result_tdata;
  wire                inputs_2_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_2_to_ip_m_axis_result_tdata;
  wire                inputs_3_to_ip_m_axis_result_tvalid;
  wire       [31:0]   inputs_3_to_ip_m_axis_result_tdata;
  wire                fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [31:0]   fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata;
  wire                scaleFlow_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   scaleFlow_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [31:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                fp32Out_to_ip_m_axis_result_tvalid;
  wire       [15:0]   fp32Out_to_ip_m_axis_result_tdata;
  wire                inputs_0_valid;
  wire       [15:0]   inputs_0_payload;
  wire                inputs_1_valid;
  wire       [15:0]   inputs_1_payload;
  wire                inputs_2_valid;
  wire       [15:0]   inputs_2_payload;
  wire                inputs_3_valid;
  wire       [15:0]   inputs_3_payload;
  wire                scaleFlow_valid;
  wire       [31:0]   scaleFlow_payload;
  wire                reduceFlow_valid;
  wire       [31:0]   reduceFlow_payload;
  reg                 io_inputs_0_payload_last_delay_1;
  reg                 io_inputs_0_payload_last_delay_2;
  reg                 io_inputs_0_payload_last_delay_3;
  reg                 io_inputs_0_payload_last_delay_4;
  reg                 io_inputs_0_payload_last_delay_5;
  reg                 io_inputs_0_payload_last_delay_6;
  reg                 io_inputs_0_payload_last_delay_7;
  reg                 io_inputs_0_payload_last_delay_8;
  reg                 io_inputs_0_payload_last_delay_9;
  reg                 io_inputs_0_payload_last_delay_10;
  reg                 io_inputs_0_payload_last_delay_11;
  reg                 io_inputs_0_payload_last_delay_12;
  reg                 io_inputs_0_payload_last_delay_13;
  reg                 io_inputs_0_payload_last_delay_14;
  reg                 io_inputs_0_payload_last_delay_15;
  reg                 io_inputs_0_payload_last_delay_16;
  reg                 io_inputs_0_payload_last_delay_17;
  reg                 io_inputs_0_payload_last_delay_18;
  reg                 io_inputs_0_payload_last_delay_19;
  reg                 io_inputs_0_payload_last_delay_20;
  reg                 io_inputs_0_payload_last_delay_21;
  reg                 io_inputs_0_payload_last_delay_22;
  reg                 io_inputs_0_payload_last_delay_23;
  reg                 io_inputs_0_payload_last_delay_24;
  reg                 io_inputs_0_payload_last_delay_25;
  reg                 io_inputs_0_payload_last_delay_26;
  reg                 io_inputs_0_payload_last_delay_27;
  reg                 io_inputs_0_payload_last_delay_28;
  reg                 io_inputs_0_payload_last_delay_29;
  reg                 io_inputs_0_payload_last_delay_30;
  reg                 io_inputs_0_payload_last_delay_31;
  reg                 lastDly;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [31:0]   accIn_payload_fragment;
  wire                accOut_valid;
  wire                accOut_payload_last;
  wire       [31:0]   accOut_payload_fragment;
  wire                fp32Out_valid;
  wire       [31:0]   fp32Out_payload;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_1;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_2;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_3;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_4;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_5;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_6;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_7;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_8;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_9;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_10;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_11;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_12;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_13;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_14;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_15;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_16;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_17;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_18;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_19;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_20;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_21;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_22;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_23;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_24;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_25;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_26;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_27;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_28;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_29;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_30;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_31;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_32;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_33;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_34;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_35;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_36;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_37;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_38;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_39;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_40;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_41;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_42;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_43;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_44;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_45;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_46;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_47;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_48;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_49;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_50;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_51;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_52;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_53;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_54;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_55;
  reg        [5:0]    io_inputs_0_payload_tuser_delay_56;
  reg        [5:0]    tuserDly;

  fp16toFp32 inputs_0_to_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (inputs_0_valid                          ), //i
    .s_axis_a_tdata       (inputs_0_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_0_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_0_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_1_to_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (inputs_1_valid                          ), //i
    .s_axis_a_tdata       (inputs_1_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_1_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_1_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_2_to_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (inputs_2_valid                          ), //i
    .s_axis_a_tdata       (inputs_2_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_2_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_2_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32 inputs_3_to_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (inputs_3_valid                          ), //i
    .s_axis_a_tdata       (inputs_3_payload[15:0]                  ), //i
    .m_axis_result_tvalid (inputs_3_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (inputs_3_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_inputs_0_to_ip_m_axis_result_add_ip (
    .aclk                 (clk_0_clk                                                            ), //i
    .s_axis_a_tvalid      (inputs_0_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (inputs_0_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (inputs_1_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (inputs_1_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_inputs_2_to_ip_m_axis_result_add_ip (
    .aclk                 (clk_0_clk                                                            ), //i
    .s_axis_a_tvalid      (inputs_2_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (inputs_2_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (inputs_3_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (inputs_3_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32add11 fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip (
    .aclk                 (clk_0_clk                                                                                         ), //i
    .s_axis_a_tvalid      (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (fp32Acc_inputs_2_to_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 scaleFlow_mul_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (scaleFlow_valid                           ), //i
    .s_axis_a_tdata       (scaleFlow_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (reduceFlow_valid                          ), //i
    .s_axis_b_tdata       (reduceFlow_payload[31:0]                  ), //i
    .m_axis_result_tvalid (scaleFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (scaleFlow_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32acc22 accIn_acc_ip (
    .aclk                 (clk_0_clk                             ), //i
    .aresetn              (clk_0_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[31:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toFp16 fp32Out_to_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (fp32Out_valid                          ), //i
    .s_axis_a_tdata       (fp32Out_payload[31:0]                  ), //i
    .m_axis_result_tvalid (fp32Out_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (fp32Out_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign inputs_0_valid = io_inputs_0_valid;
  assign inputs_1_valid = io_inputs_1_valid;
  assign inputs_2_valid = io_inputs_2_valid;
  assign inputs_3_valid = io_inputs_3_valid;
  assign inputs_0_payload = io_inputs_0_payload_tdata;
  assign inputs_1_payload = io_inputs_1_payload_tdata;
  assign inputs_2_payload = io_inputs_2_payload_tdata;
  assign inputs_3_payload = io_inputs_3_payload_tdata;
  assign reduceFlow_valid = fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  assign reduceFlow_payload = fp32Acc_fp32Acc_inputs_0_to_ip_m_axis_result_add_ip_m_axis_result_add_ip_m_axis_result_tdata;
  assign scaleFlow_valid = reduceFlow_valid;
  assign scaleFlow_payload = io_postScale_payload;
  assign io_postScale_ready = reduceFlow_valid;
  assign accIn_valid = scaleFlow_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = scaleFlow_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = lastDly;
  assign accOut_valid = accIn_acc_ip_m_axis_result_tvalid;
  assign accOut_payload_last = accIn_acc_ip_m_axis_result_tlast;
  assign accOut_payload_fragment = accIn_acc_ip_m_axis_result_tdata;
  assign fp32Out_valid = (accOut_valid && accOut_payload_last);
  assign fp32Out_payload = accOut_payload_fragment;
  assign io_output_valid = fp32Out_to_ip_m_axis_result_tvalid;
  assign io_output_tdata = fp32Out_to_ip_m_axis_result_tdata;
  assign io_output_tuser = tuserDly;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      io_inputs_0_payload_last_delay_1 <= 1'b0;
      io_inputs_0_payload_last_delay_2 <= 1'b0;
      io_inputs_0_payload_last_delay_3 <= 1'b0;
      io_inputs_0_payload_last_delay_4 <= 1'b0;
      io_inputs_0_payload_last_delay_5 <= 1'b0;
      io_inputs_0_payload_last_delay_6 <= 1'b0;
      io_inputs_0_payload_last_delay_7 <= 1'b0;
      io_inputs_0_payload_last_delay_8 <= 1'b0;
      io_inputs_0_payload_last_delay_9 <= 1'b0;
      io_inputs_0_payload_last_delay_10 <= 1'b0;
      io_inputs_0_payload_last_delay_11 <= 1'b0;
      io_inputs_0_payload_last_delay_12 <= 1'b0;
      io_inputs_0_payload_last_delay_13 <= 1'b0;
      io_inputs_0_payload_last_delay_14 <= 1'b0;
      io_inputs_0_payload_last_delay_15 <= 1'b0;
      io_inputs_0_payload_last_delay_16 <= 1'b0;
      io_inputs_0_payload_last_delay_17 <= 1'b0;
      io_inputs_0_payload_last_delay_18 <= 1'b0;
      io_inputs_0_payload_last_delay_19 <= 1'b0;
      io_inputs_0_payload_last_delay_20 <= 1'b0;
      io_inputs_0_payload_last_delay_21 <= 1'b0;
      io_inputs_0_payload_last_delay_22 <= 1'b0;
      io_inputs_0_payload_last_delay_23 <= 1'b0;
      io_inputs_0_payload_last_delay_24 <= 1'b0;
      io_inputs_0_payload_last_delay_25 <= 1'b0;
      io_inputs_0_payload_last_delay_26 <= 1'b0;
      io_inputs_0_payload_last_delay_27 <= 1'b0;
      io_inputs_0_payload_last_delay_28 <= 1'b0;
      io_inputs_0_payload_last_delay_29 <= 1'b0;
      io_inputs_0_payload_last_delay_30 <= 1'b0;
      io_inputs_0_payload_last_delay_31 <= 1'b0;
      lastDly <= 1'b0;
      io_inputs_0_payload_tuser_delay_1 <= 6'h0;
      io_inputs_0_payload_tuser_delay_2 <= 6'h0;
      io_inputs_0_payload_tuser_delay_3 <= 6'h0;
      io_inputs_0_payload_tuser_delay_4 <= 6'h0;
      io_inputs_0_payload_tuser_delay_5 <= 6'h0;
      io_inputs_0_payload_tuser_delay_6 <= 6'h0;
      io_inputs_0_payload_tuser_delay_7 <= 6'h0;
      io_inputs_0_payload_tuser_delay_8 <= 6'h0;
      io_inputs_0_payload_tuser_delay_9 <= 6'h0;
      io_inputs_0_payload_tuser_delay_10 <= 6'h0;
      io_inputs_0_payload_tuser_delay_11 <= 6'h0;
      io_inputs_0_payload_tuser_delay_12 <= 6'h0;
      io_inputs_0_payload_tuser_delay_13 <= 6'h0;
      io_inputs_0_payload_tuser_delay_14 <= 6'h0;
      io_inputs_0_payload_tuser_delay_15 <= 6'h0;
      io_inputs_0_payload_tuser_delay_16 <= 6'h0;
      io_inputs_0_payload_tuser_delay_17 <= 6'h0;
      io_inputs_0_payload_tuser_delay_18 <= 6'h0;
      io_inputs_0_payload_tuser_delay_19 <= 6'h0;
      io_inputs_0_payload_tuser_delay_20 <= 6'h0;
      io_inputs_0_payload_tuser_delay_21 <= 6'h0;
      io_inputs_0_payload_tuser_delay_22 <= 6'h0;
      io_inputs_0_payload_tuser_delay_23 <= 6'h0;
      io_inputs_0_payload_tuser_delay_24 <= 6'h0;
      io_inputs_0_payload_tuser_delay_25 <= 6'h0;
      io_inputs_0_payload_tuser_delay_26 <= 6'h0;
      io_inputs_0_payload_tuser_delay_27 <= 6'h0;
      io_inputs_0_payload_tuser_delay_28 <= 6'h0;
      io_inputs_0_payload_tuser_delay_29 <= 6'h0;
      io_inputs_0_payload_tuser_delay_30 <= 6'h0;
      io_inputs_0_payload_tuser_delay_31 <= 6'h0;
      io_inputs_0_payload_tuser_delay_32 <= 6'h0;
      io_inputs_0_payload_tuser_delay_33 <= 6'h0;
      io_inputs_0_payload_tuser_delay_34 <= 6'h0;
      io_inputs_0_payload_tuser_delay_35 <= 6'h0;
      io_inputs_0_payload_tuser_delay_36 <= 6'h0;
      io_inputs_0_payload_tuser_delay_37 <= 6'h0;
      io_inputs_0_payload_tuser_delay_38 <= 6'h0;
      io_inputs_0_payload_tuser_delay_39 <= 6'h0;
      io_inputs_0_payload_tuser_delay_40 <= 6'h0;
      io_inputs_0_payload_tuser_delay_41 <= 6'h0;
      io_inputs_0_payload_tuser_delay_42 <= 6'h0;
      io_inputs_0_payload_tuser_delay_43 <= 6'h0;
      io_inputs_0_payload_tuser_delay_44 <= 6'h0;
      io_inputs_0_payload_tuser_delay_45 <= 6'h0;
      io_inputs_0_payload_tuser_delay_46 <= 6'h0;
      io_inputs_0_payload_tuser_delay_47 <= 6'h0;
      io_inputs_0_payload_tuser_delay_48 <= 6'h0;
      io_inputs_0_payload_tuser_delay_49 <= 6'h0;
      io_inputs_0_payload_tuser_delay_50 <= 6'h0;
      io_inputs_0_payload_tuser_delay_51 <= 6'h0;
      io_inputs_0_payload_tuser_delay_52 <= 6'h0;
      io_inputs_0_payload_tuser_delay_53 <= 6'h0;
      io_inputs_0_payload_tuser_delay_54 <= 6'h0;
      io_inputs_0_payload_tuser_delay_55 <= 6'h0;
      io_inputs_0_payload_tuser_delay_56 <= 6'h0;
      tuserDly <= 6'h0;
    end else begin
      io_inputs_0_payload_last_delay_1 <= io_inputs_0_payload_last;
      io_inputs_0_payload_last_delay_2 <= io_inputs_0_payload_last_delay_1;
      io_inputs_0_payload_last_delay_3 <= io_inputs_0_payload_last_delay_2;
      io_inputs_0_payload_last_delay_4 <= io_inputs_0_payload_last_delay_3;
      io_inputs_0_payload_last_delay_5 <= io_inputs_0_payload_last_delay_4;
      io_inputs_0_payload_last_delay_6 <= io_inputs_0_payload_last_delay_5;
      io_inputs_0_payload_last_delay_7 <= io_inputs_0_payload_last_delay_6;
      io_inputs_0_payload_last_delay_8 <= io_inputs_0_payload_last_delay_7;
      io_inputs_0_payload_last_delay_9 <= io_inputs_0_payload_last_delay_8;
      io_inputs_0_payload_last_delay_10 <= io_inputs_0_payload_last_delay_9;
      io_inputs_0_payload_last_delay_11 <= io_inputs_0_payload_last_delay_10;
      io_inputs_0_payload_last_delay_12 <= io_inputs_0_payload_last_delay_11;
      io_inputs_0_payload_last_delay_13 <= io_inputs_0_payload_last_delay_12;
      io_inputs_0_payload_last_delay_14 <= io_inputs_0_payload_last_delay_13;
      io_inputs_0_payload_last_delay_15 <= io_inputs_0_payload_last_delay_14;
      io_inputs_0_payload_last_delay_16 <= io_inputs_0_payload_last_delay_15;
      io_inputs_0_payload_last_delay_17 <= io_inputs_0_payload_last_delay_16;
      io_inputs_0_payload_last_delay_18 <= io_inputs_0_payload_last_delay_17;
      io_inputs_0_payload_last_delay_19 <= io_inputs_0_payload_last_delay_18;
      io_inputs_0_payload_last_delay_20 <= io_inputs_0_payload_last_delay_19;
      io_inputs_0_payload_last_delay_21 <= io_inputs_0_payload_last_delay_20;
      io_inputs_0_payload_last_delay_22 <= io_inputs_0_payload_last_delay_21;
      io_inputs_0_payload_last_delay_23 <= io_inputs_0_payload_last_delay_22;
      io_inputs_0_payload_last_delay_24 <= io_inputs_0_payload_last_delay_23;
      io_inputs_0_payload_last_delay_25 <= io_inputs_0_payload_last_delay_24;
      io_inputs_0_payload_last_delay_26 <= io_inputs_0_payload_last_delay_25;
      io_inputs_0_payload_last_delay_27 <= io_inputs_0_payload_last_delay_26;
      io_inputs_0_payload_last_delay_28 <= io_inputs_0_payload_last_delay_27;
      io_inputs_0_payload_last_delay_29 <= io_inputs_0_payload_last_delay_28;
      io_inputs_0_payload_last_delay_30 <= io_inputs_0_payload_last_delay_29;
      io_inputs_0_payload_last_delay_31 <= io_inputs_0_payload_last_delay_30;
      lastDly <= io_inputs_0_payload_last_delay_31;
      io_inputs_0_payload_tuser_delay_1 <= io_inputs_0_payload_tuser;
      io_inputs_0_payload_tuser_delay_2 <= io_inputs_0_payload_tuser_delay_1;
      io_inputs_0_payload_tuser_delay_3 <= io_inputs_0_payload_tuser_delay_2;
      io_inputs_0_payload_tuser_delay_4 <= io_inputs_0_payload_tuser_delay_3;
      io_inputs_0_payload_tuser_delay_5 <= io_inputs_0_payload_tuser_delay_4;
      io_inputs_0_payload_tuser_delay_6 <= io_inputs_0_payload_tuser_delay_5;
      io_inputs_0_payload_tuser_delay_7 <= io_inputs_0_payload_tuser_delay_6;
      io_inputs_0_payload_tuser_delay_8 <= io_inputs_0_payload_tuser_delay_7;
      io_inputs_0_payload_tuser_delay_9 <= io_inputs_0_payload_tuser_delay_8;
      io_inputs_0_payload_tuser_delay_10 <= io_inputs_0_payload_tuser_delay_9;
      io_inputs_0_payload_tuser_delay_11 <= io_inputs_0_payload_tuser_delay_10;
      io_inputs_0_payload_tuser_delay_12 <= io_inputs_0_payload_tuser_delay_11;
      io_inputs_0_payload_tuser_delay_13 <= io_inputs_0_payload_tuser_delay_12;
      io_inputs_0_payload_tuser_delay_14 <= io_inputs_0_payload_tuser_delay_13;
      io_inputs_0_payload_tuser_delay_15 <= io_inputs_0_payload_tuser_delay_14;
      io_inputs_0_payload_tuser_delay_16 <= io_inputs_0_payload_tuser_delay_15;
      io_inputs_0_payload_tuser_delay_17 <= io_inputs_0_payload_tuser_delay_16;
      io_inputs_0_payload_tuser_delay_18 <= io_inputs_0_payload_tuser_delay_17;
      io_inputs_0_payload_tuser_delay_19 <= io_inputs_0_payload_tuser_delay_18;
      io_inputs_0_payload_tuser_delay_20 <= io_inputs_0_payload_tuser_delay_19;
      io_inputs_0_payload_tuser_delay_21 <= io_inputs_0_payload_tuser_delay_20;
      io_inputs_0_payload_tuser_delay_22 <= io_inputs_0_payload_tuser_delay_21;
      io_inputs_0_payload_tuser_delay_23 <= io_inputs_0_payload_tuser_delay_22;
      io_inputs_0_payload_tuser_delay_24 <= io_inputs_0_payload_tuser_delay_23;
      io_inputs_0_payload_tuser_delay_25 <= io_inputs_0_payload_tuser_delay_24;
      io_inputs_0_payload_tuser_delay_26 <= io_inputs_0_payload_tuser_delay_25;
      io_inputs_0_payload_tuser_delay_27 <= io_inputs_0_payload_tuser_delay_26;
      io_inputs_0_payload_tuser_delay_28 <= io_inputs_0_payload_tuser_delay_27;
      io_inputs_0_payload_tuser_delay_29 <= io_inputs_0_payload_tuser_delay_28;
      io_inputs_0_payload_tuser_delay_30 <= io_inputs_0_payload_tuser_delay_29;
      io_inputs_0_payload_tuser_delay_31 <= io_inputs_0_payload_tuser_delay_30;
      io_inputs_0_payload_tuser_delay_32 <= io_inputs_0_payload_tuser_delay_31;
      io_inputs_0_payload_tuser_delay_33 <= io_inputs_0_payload_tuser_delay_32;
      io_inputs_0_payload_tuser_delay_34 <= io_inputs_0_payload_tuser_delay_33;
      io_inputs_0_payload_tuser_delay_35 <= io_inputs_0_payload_tuser_delay_34;
      io_inputs_0_payload_tuser_delay_36 <= io_inputs_0_payload_tuser_delay_35;
      io_inputs_0_payload_tuser_delay_37 <= io_inputs_0_payload_tuser_delay_36;
      io_inputs_0_payload_tuser_delay_38 <= io_inputs_0_payload_tuser_delay_37;
      io_inputs_0_payload_tuser_delay_39 <= io_inputs_0_payload_tuser_delay_38;
      io_inputs_0_payload_tuser_delay_40 <= io_inputs_0_payload_tuser_delay_39;
      io_inputs_0_payload_tuser_delay_41 <= io_inputs_0_payload_tuser_delay_40;
      io_inputs_0_payload_tuser_delay_42 <= io_inputs_0_payload_tuser_delay_41;
      io_inputs_0_payload_tuser_delay_43 <= io_inputs_0_payload_tuser_delay_42;
      io_inputs_0_payload_tuser_delay_44 <= io_inputs_0_payload_tuser_delay_43;
      io_inputs_0_payload_tuser_delay_45 <= io_inputs_0_payload_tuser_delay_44;
      io_inputs_0_payload_tuser_delay_46 <= io_inputs_0_payload_tuser_delay_45;
      io_inputs_0_payload_tuser_delay_47 <= io_inputs_0_payload_tuser_delay_46;
      io_inputs_0_payload_tuser_delay_48 <= io_inputs_0_payload_tuser_delay_47;
      io_inputs_0_payload_tuser_delay_49 <= io_inputs_0_payload_tuser_delay_48;
      io_inputs_0_payload_tuser_delay_50 <= io_inputs_0_payload_tuser_delay_49;
      io_inputs_0_payload_tuser_delay_51 <= io_inputs_0_payload_tuser_delay_50;
      io_inputs_0_payload_tuser_delay_52 <= io_inputs_0_payload_tuser_delay_51;
      io_inputs_0_payload_tuser_delay_53 <= io_inputs_0_payload_tuser_delay_52;
      io_inputs_0_payload_tuser_delay_54 <= io_inputs_0_payload_tuser_delay_53;
      io_inputs_0_payload_tuser_delay_55 <= io_inputs_0_payload_tuser_delay_54;
      io_inputs_0_payload_tuser_delay_56 <= io_inputs_0_payload_tuser_delay_55;
      tuserDly <= io_inputs_0_payload_tuser_delay_56;
    end
  end


endmodule

//MulAddEngineNew_7 replaced by MulAddEngineNew_4

//MulAddEngineNew_6 replaced by MulAddEngineNew_4

//MulAddEngineNew_5 replaced by MulAddEngineNew_4

module MulAddEngineNew_4 (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [511:0]  wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [511:0]  dotIn_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          preScale_tvalid,
  output wire          preScale_tready,
  input  wire [15:0]   preScale_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [511:0]  resAdd_tdata,
  output wire          vecOut_tvalid,
  output wire [511:0]  vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire          scalarOut_tlast,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output reg           cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [5:0]    postCfgTag,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                mul_wkvIn_tready;
  wire                mul_dotIn_tready;
  wire                mul_axpyIn_tready;
  wire                mul_scale_tready;
  wire                mul_output_tvalid;
  wire       [511:0]  mul_output_tdata;
  wire                mul_cfg_tready;
  wire       [5:0]    mul_preCfgTag;
  wire       [15:0]   mul_secondDim;
  wire                mul_popVldNext;
  wire                add_mulRes_tready;
  wire                add_resAdd_tready;
  wire                add_vecOut_tvalid;
  wire       [511:0]  add_vecOut_tdata;
  wire       [5:0]    add_vecOut_tuser;
  wire                add_scalarOut_tvalid;
  wire                add_scalarOut_tlast;
  wire       [15:0]   add_scalarOut_tdata;
  wire       [5:0]    add_scalarOut_tuser;
  wire                add_cfg_tready;
  wire       [5:0]    add_postCfgTag;
  wire                toMul_valid;
  reg                 toMul_ready;
  wire       [31:0]   toMul_payload;
  wire                toAdd_valid;
  reg                 toAdd_ready;
  wire       [31:0]   toAdd_payload;
  reg                 cfg_fork2_logic_linkEnable_0;
  reg                 cfg_fork2_logic_linkEnable_1;
  wire                toMul_fire;
  wire                toAdd_fire;
  wire                toMulPipe_valid;
  wire                toMulPipe_ready;
  wire       [31:0]   toMulPipe_payload;
  reg                 toMul_rValid;
  reg        [31:0]   toMul_rData;
  wire                toAddPipe_valid;
  wire                toAddPipe_ready;
  wire       [31:0]   toAddPipe_payload;
  reg                 toAdd_rValid;
  reg        [31:0]   toAdd_rData;

  MulEngine_7 mul (
    .wkvIn_tvalid  (wkvIn_tvalid           ), //i
    .wkvIn_tready  (mul_wkvIn_tready       ), //o
    .wkvIn_tdata   (wkvIn_tdata[511:0]     ), //i
    .dotIn_tvalid  (dotIn_tvalid           ), //i
    .dotIn_tready  (mul_dotIn_tready       ), //o
    .dotIn_tdata   (dotIn_tdata[511:0]     ), //i
    .axpyIn_tvalid (axpyIn_tvalid          ), //i
    .axpyIn_tready (mul_axpyIn_tready      ), //o
    .axpyIn_tdata  (axpyIn_tdata[15:0]     ), //i
    .scale_tvalid  (preScale_tvalid        ), //i
    .scale_tready  (mul_scale_tready       ), //o
    .scale_tdata   (preScale_tdata[15:0]   ), //i
    .output_tvalid (mul_output_tvalid      ), //o
    .output_tready (add_mulRes_tready      ), //i
    .output_tdata  (mul_output_tdata[511:0]), //o
    .cfg_tvalid    (toMulPipe_valid        ), //i
    .cfg_tready    (mul_cfg_tready         ), //o
    .cfg_tdata     (toMulPipe_payload[31:0]), //i
    .preCfgTag     (mul_preCfgTag[5:0]     ), //o
    .secondDim     (mul_secondDim[15:0]    ), //o
    .clk_0_clk     (clk_0_clk              ), //i
    .popVldNext    (mul_popVldNext         ), //o
    .clk_0_resetn  (clk_0_resetn           )  //i
  );
  AddEngineNew_7 add (
    .mulRes_tvalid    (mul_output_tvalid        ), //i
    .mulRes_tready    (add_mulRes_tready        ), //o
    .mulRes_tdata     (mul_output_tdata[511:0]  ), //i
    .resAdd_tvalid    (resAdd_tvalid            ), //i
    .resAdd_tready    (add_resAdd_tready        ), //o
    .resAdd_tdata     (resAdd_tdata[511:0]      ), //i
    .vecOut_tvalid    (add_vecOut_tvalid        ), //o
    .vecOut_tdata     (add_vecOut_tdata[511:0]  ), //o
    .vecOut_tuser     (add_vecOut_tuser[5:0]    ), //o
    .scalarOut_tvalid (add_scalarOut_tvalid     ), //o
    .scalarOut_tlast  (add_scalarOut_tlast      ), //o
    .scalarOut_tdata  (add_scalarOut_tdata[15:0]), //o
    .scalarOut_tuser  (add_scalarOut_tuser[5:0] ), //o
    .cfg_tvalid       (toAddPipe_valid          ), //i
    .cfg_tready       (add_cfg_tready           ), //o
    .cfg_tdata        (toAddPipe_payload[31:0]  ), //i
    .postCfgTag       (add_postCfgTag[5:0]      ), //o
    .popVldNext       (mul_popVldNext           ), //i
    .clk_0_clk        (clk_0_clk                ), //i
    .clk_0_resetn     (clk_0_resetn             )  //i
  );
  always @(*) begin
    cfg_tready = 1'b1;
    if(((! toMul_ready) && cfg_fork2_logic_linkEnable_0)) begin
      cfg_tready = 1'b0;
    end
    if(((! toAdd_ready) && cfg_fork2_logic_linkEnable_1)) begin
      cfg_tready = 1'b0;
    end
  end

  assign toMul_valid = (cfg_tvalid && cfg_fork2_logic_linkEnable_0);
  assign toMul_payload = cfg_tdata;
  assign toMul_fire = (toMul_valid && toMul_ready);
  assign toAdd_valid = (cfg_tvalid && cfg_fork2_logic_linkEnable_1);
  assign toAdd_payload = cfg_tdata;
  assign toAdd_fire = (toAdd_valid && toAdd_ready);
  always @(*) begin
    toMul_ready = toMulPipe_ready;
    if((! toMulPipe_valid)) begin
      toMul_ready = 1'b1;
    end
  end

  assign toMulPipe_valid = toMul_rValid;
  assign toMulPipe_payload = toMul_rData;
  always @(*) begin
    toAdd_ready = toAddPipe_ready;
    if((! toAddPipe_valid)) begin
      toAdd_ready = 1'b1;
    end
  end

  assign toAddPipe_valid = toAdd_rValid;
  assign toAddPipe_payload = toAdd_rData;
  assign wkvIn_tready = mul_wkvIn_tready;
  assign dotIn_tready = mul_dotIn_tready;
  assign axpyIn_tready = mul_axpyIn_tready;
  assign preScale_tready = mul_scale_tready;
  assign toMulPipe_ready = mul_cfg_tready;
  assign resAdd_tready = add_resAdd_tready;
  assign toAddPipe_ready = add_cfg_tready;
  assign vecOut_tvalid = add_vecOut_tvalid;
  assign vecOut_tdata = add_vecOut_tdata;
  assign vecOut_tuser = add_vecOut_tuser;
  assign scalarOut_tvalid = add_scalarOut_tvalid;
  assign scalarOut_tlast = add_scalarOut_tlast;
  assign scalarOut_tdata = add_scalarOut_tdata;
  assign scalarOut_tuser = add_scalarOut_tuser;
  assign preCfgTag = mul_preCfgTag;
  assign postCfgTag = add_postCfgTag;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cfg_fork2_logic_linkEnable_0 <= 1'b1;
      cfg_fork2_logic_linkEnable_1 <= 1'b1;
      toMul_rValid <= 1'b0;
      toAdd_rValid <= 1'b0;
    end else begin
      if(toMul_fire) begin
        cfg_fork2_logic_linkEnable_0 <= 1'b0;
      end
      if(toAdd_fire) begin
        cfg_fork2_logic_linkEnable_1 <= 1'b0;
      end
      if(cfg_tready) begin
        cfg_fork2_logic_linkEnable_0 <= 1'b1;
        cfg_fork2_logic_linkEnable_1 <= 1'b1;
      end
      if(toMul_ready) begin
        toMul_rValid <= toMul_valid;
      end
      if(toAdd_ready) begin
        toAdd_rValid <= toAdd_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(toMul_ready) begin
      toMul_rData <= toMul_payload;
    end
    if(toAdd_ready) begin
      toAdd_rData <= toAdd_payload;
    end
  end


endmodule

module StreamFifo_33 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  (* max_fanout = 100 *) output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamDemux_6 (
  input  wire [0:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  input  wire [2047:0] io_input_payload,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire [2047:0] io_outputs_0_payload,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output wire [2047:0] io_outputs_1_payload
);

  wire                t_when;
  wire                t_when_1;

  assign t_when = (1'b0 != io_select);
  assign t_when_1 = (1'b1 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
  end

  assign io_outputs_0_payload = io_input_payload;
  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  assign io_outputs_1_payload = io_input_payload;
  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end


endmodule

module LargeBankFifo_5 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [2047:0] io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [2047:0] io_pop_payload,
  output wire [4:0]    io_occupancy,
  output wire [4:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [511:0]  fifo_0_io_pop_payload;
  wire       [4:0]    fifo_0_io_occupancy;
  wire       [4:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [511:0]  fifo_1_io_pop_payload;
  wire       [4:0]    fifo_1_io_occupancy;
  wire       [4:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [511:0]  fifo_2_io_pop_payload;
  wire       [4:0]    fifo_2_io_occupancy;
  wire       [4:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [511:0]  fifo_3_io_pop_payload;
  wire       [4:0]    fifo_3_io_occupancy;
  wire       [4:0]    fifo_3_io_availability;
  wire       [2047:0] t_inPydSplit_0;
  wire       [511:0]  inPydSplit_0;
  wire       [511:0]  inPydSplit_1;
  wire       [511:0]  inPydSplit_2;
  wire       [511:0]  inPydSplit_3;
  wire       [2047:0] outPydMerge;

  StreamFifo_99 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[511:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[4:0]    ), //o
    .io_availability (fifo_0_io_availability[4:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_99 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[511:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[4:0]    ), //o
    .io_availability (fifo_1_io_availability[4:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_99 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[511:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[4:0]    ), //o
    .io_availability (fifo_2_io_availability[4:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_99 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[511:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[4:0]    ), //o
    .io_availability (fifo_3_io_availability[4:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[511 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[1023 : 512];
  assign inPydSplit_2 = t_inPydSplit_0[1535 : 1024];
  assign inPydSplit_3 = t_inPydSplit_0[2047 : 1536];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

module Serial2Parallel_2 (
  input  wire          input_valid,
  input  wire [15:0]   input_tdata,
  input  wire [5:0]    input_tuser,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [1791:0] t_output_tdata_128;
  wire       [1535:0] t_output_tdata_129;
  wire       [1279:0] t_output_tdata_130;
  wire       [1023:0] t_output_tdata_131;
  wire       [767:0]  t_output_tdata_132;
  wire       [511:0]  t_output_tdata_133;
  wire       [255:0]  t_output_tdata_134;
  reg        [15:0]   dataDly;
  reg        [5:0]    userDly;
  (* max_fanout = 100 , keep = "true" *) reg                 vldDly;
  (* max_fanout = 100 , keep = "true" *) reg                 outVld;
  (* max_fanout = 100 *) reg                 outVldCond;
  reg        [6:0]    cnt;
  wire                cntAboutToOvf;
  wire                cntOvf;
  wire       [15:0]   t_output_tdata;
  reg        [15:0]   t_output_tdata_1;
  reg        [15:0]   t_output_tdata_2;
  reg        [15:0]   t_output_tdata_3;
  reg        [15:0]   t_output_tdata_4;
  reg        [15:0]   t_output_tdata_5;
  reg        [15:0]   t_output_tdata_6;
  reg        [15:0]   t_output_tdata_7;
  reg        [15:0]   t_output_tdata_8;
  reg        [15:0]   t_output_tdata_9;
  reg        [15:0]   t_output_tdata_10;
  reg        [15:0]   t_output_tdata_11;
  reg        [15:0]   t_output_tdata_12;
  reg        [15:0]   t_output_tdata_13;
  reg        [15:0]   t_output_tdata_14;
  reg        [15:0]   t_output_tdata_15;
  reg        [15:0]   t_output_tdata_16;
  reg        [15:0]   t_output_tdata_17;
  reg        [15:0]   t_output_tdata_18;
  reg        [15:0]   t_output_tdata_19;
  reg        [15:0]   t_output_tdata_20;
  reg        [15:0]   t_output_tdata_21;
  reg        [15:0]   t_output_tdata_22;
  reg        [15:0]   t_output_tdata_23;
  reg        [15:0]   t_output_tdata_24;
  reg        [15:0]   t_output_tdata_25;
  reg        [15:0]   t_output_tdata_26;
  reg        [15:0]   t_output_tdata_27;
  reg        [15:0]   t_output_tdata_28;
  reg        [15:0]   t_output_tdata_29;
  reg        [15:0]   t_output_tdata_30;
  reg        [15:0]   t_output_tdata_31;
  reg        [15:0]   t_output_tdata_32;
  reg        [15:0]   t_output_tdata_33;
  reg        [15:0]   t_output_tdata_34;
  reg        [15:0]   t_output_tdata_35;
  reg        [15:0]   t_output_tdata_36;
  reg        [15:0]   t_output_tdata_37;
  reg        [15:0]   t_output_tdata_38;
  reg        [15:0]   t_output_tdata_39;
  reg        [15:0]   t_output_tdata_40;
  reg        [15:0]   t_output_tdata_41;
  reg        [15:0]   t_output_tdata_42;
  reg        [15:0]   t_output_tdata_43;
  reg        [15:0]   t_output_tdata_44;
  reg        [15:0]   t_output_tdata_45;
  reg        [15:0]   t_output_tdata_46;
  reg        [15:0]   t_output_tdata_47;
  reg        [15:0]   t_output_tdata_48;
  reg        [15:0]   t_output_tdata_49;
  reg        [15:0]   t_output_tdata_50;
  reg        [15:0]   t_output_tdata_51;
  reg        [15:0]   t_output_tdata_52;
  reg        [15:0]   t_output_tdata_53;
  reg        [15:0]   t_output_tdata_54;
  reg        [15:0]   t_output_tdata_55;
  reg        [15:0]   t_output_tdata_56;
  reg        [15:0]   t_output_tdata_57;
  reg        [15:0]   t_output_tdata_58;
  reg        [15:0]   t_output_tdata_59;
  reg        [15:0]   t_output_tdata_60;
  reg        [15:0]   t_output_tdata_61;
  reg        [15:0]   t_output_tdata_62;
  reg        [15:0]   t_output_tdata_63;
  reg        [15:0]   t_output_tdata_64;
  reg        [15:0]   t_output_tdata_65;
  reg        [15:0]   t_output_tdata_66;
  reg        [15:0]   t_output_tdata_67;
  reg        [15:0]   t_output_tdata_68;
  reg        [15:0]   t_output_tdata_69;
  reg        [15:0]   t_output_tdata_70;
  reg        [15:0]   t_output_tdata_71;
  reg        [15:0]   t_output_tdata_72;
  reg        [15:0]   t_output_tdata_73;
  reg        [15:0]   t_output_tdata_74;
  reg        [15:0]   t_output_tdata_75;
  reg        [15:0]   t_output_tdata_76;
  reg        [15:0]   t_output_tdata_77;
  reg        [15:0]   t_output_tdata_78;
  reg        [15:0]   t_output_tdata_79;
  reg        [15:0]   t_output_tdata_80;
  reg        [15:0]   t_output_tdata_81;
  reg        [15:0]   t_output_tdata_82;
  reg        [15:0]   t_output_tdata_83;
  reg        [15:0]   t_output_tdata_84;
  reg        [15:0]   t_output_tdata_85;
  reg        [15:0]   t_output_tdata_86;
  reg        [15:0]   t_output_tdata_87;
  reg        [15:0]   t_output_tdata_88;
  reg        [15:0]   t_output_tdata_89;
  reg        [15:0]   t_output_tdata_90;
  reg        [15:0]   t_output_tdata_91;
  reg        [15:0]   t_output_tdata_92;
  reg        [15:0]   t_output_tdata_93;
  reg        [15:0]   t_output_tdata_94;
  reg        [15:0]   t_output_tdata_95;
  reg        [15:0]   t_output_tdata_96;
  reg        [15:0]   t_output_tdata_97;
  reg        [15:0]   t_output_tdata_98;
  reg        [15:0]   t_output_tdata_99;
  reg        [15:0]   t_output_tdata_100;
  reg        [15:0]   t_output_tdata_101;
  reg        [15:0]   t_output_tdata_102;
  reg        [15:0]   t_output_tdata_103;
  reg        [15:0]   t_output_tdata_104;
  reg        [15:0]   t_output_tdata_105;
  reg        [15:0]   t_output_tdata_106;
  reg        [15:0]   t_output_tdata_107;
  reg        [15:0]   t_output_tdata_108;
  reg        [15:0]   t_output_tdata_109;
  reg        [15:0]   t_output_tdata_110;
  reg        [15:0]   t_output_tdata_111;
  reg        [15:0]   t_output_tdata_112;
  reg        [15:0]   t_output_tdata_113;
  reg        [15:0]   t_output_tdata_114;
  reg        [15:0]   t_output_tdata_115;
  reg        [15:0]   t_output_tdata_116;
  reg        [15:0]   t_output_tdata_117;
  reg        [15:0]   t_output_tdata_118;
  reg        [15:0]   t_output_tdata_119;
  reg        [15:0]   t_output_tdata_120;
  reg        [15:0]   t_output_tdata_121;
  reg        [15:0]   t_output_tdata_122;
  reg        [15:0]   t_output_tdata_123;
  reg        [15:0]   t_output_tdata_124;
  reg        [15:0]   t_output_tdata_125;
  reg        [15:0]   t_output_tdata_126;
  reg        [15:0]   t_output_tdata_127;

  assign t_output_tdata_128 = {t_output_tdata_16,{t_output_tdata_17,{t_output_tdata_18,{t_output_tdata_19,{t_output_tdata_20,{t_output_tdata_21,{t_output_tdata_22,{t_output_tdata_23,{t_output_tdata_24,{t_output_tdata_25,{t_output_tdata_26,{t_output_tdata_27,{t_output_tdata_28,{t_output_tdata_29,{t_output_tdata_30,{t_output_tdata_31,t_output_tdata_129}}}}}}}}}}}}}}}};
  assign t_output_tdata_129 = {t_output_tdata_32,{t_output_tdata_33,{t_output_tdata_34,{t_output_tdata_35,{t_output_tdata_36,{t_output_tdata_37,{t_output_tdata_38,{t_output_tdata_39,{t_output_tdata_40,{t_output_tdata_41,{t_output_tdata_42,{t_output_tdata_43,{t_output_tdata_44,{t_output_tdata_45,{t_output_tdata_46,{t_output_tdata_47,t_output_tdata_130}}}}}}}}}}}}}}}};
  assign t_output_tdata_130 = {t_output_tdata_48,{t_output_tdata_49,{t_output_tdata_50,{t_output_tdata_51,{t_output_tdata_52,{t_output_tdata_53,{t_output_tdata_54,{t_output_tdata_55,{t_output_tdata_56,{t_output_tdata_57,{t_output_tdata_58,{t_output_tdata_59,{t_output_tdata_60,{t_output_tdata_61,{t_output_tdata_62,{t_output_tdata_63,t_output_tdata_131}}}}}}}}}}}}}}}};
  assign t_output_tdata_131 = {t_output_tdata_64,{t_output_tdata_65,{t_output_tdata_66,{t_output_tdata_67,{t_output_tdata_68,{t_output_tdata_69,{t_output_tdata_70,{t_output_tdata_71,{t_output_tdata_72,{t_output_tdata_73,{t_output_tdata_74,{t_output_tdata_75,{t_output_tdata_76,{t_output_tdata_77,{t_output_tdata_78,{t_output_tdata_79,t_output_tdata_132}}}}}}}}}}}}}}}};
  assign t_output_tdata_132 = {t_output_tdata_80,{t_output_tdata_81,{t_output_tdata_82,{t_output_tdata_83,{t_output_tdata_84,{t_output_tdata_85,{t_output_tdata_86,{t_output_tdata_87,{t_output_tdata_88,{t_output_tdata_89,{t_output_tdata_90,{t_output_tdata_91,{t_output_tdata_92,{t_output_tdata_93,{t_output_tdata_94,{t_output_tdata_95,t_output_tdata_133}}}}}}}}}}}}}}}};
  assign t_output_tdata_133 = {t_output_tdata_96,{t_output_tdata_97,{t_output_tdata_98,{t_output_tdata_99,{t_output_tdata_100,{t_output_tdata_101,{t_output_tdata_102,{t_output_tdata_103,{t_output_tdata_104,{t_output_tdata_105,{t_output_tdata_106,{t_output_tdata_107,{t_output_tdata_108,{t_output_tdata_109,{t_output_tdata_110,{t_output_tdata_111,t_output_tdata_134}}}}}}}}}}}}}}}};
  assign t_output_tdata_134 = {t_output_tdata_112,{t_output_tdata_113,{t_output_tdata_114,{t_output_tdata_115,{t_output_tdata_116,{t_output_tdata_117,{t_output_tdata_118,{t_output_tdata_119,{t_output_tdata_120,{t_output_tdata_121,{t_output_tdata_122,{t_output_tdata_123,{t_output_tdata_124,{t_output_tdata_125,{t_output_tdata_126,t_output_tdata_127}}}}}}}}}}}}}}};
  assign cntAboutToOvf = (cnt == 7'h7e);
  assign cntOvf = (cnt == 7'h7f);
  assign t_output_tdata = dataDly;
  assign output_tdata = {t_output_tdata,{t_output_tdata_1,{t_output_tdata_2,{t_output_tdata_3,{t_output_tdata_4,{t_output_tdata_5,{t_output_tdata_6,{t_output_tdata_7,{t_output_tdata_8,{t_output_tdata_9,{t_output_tdata_10,{t_output_tdata_11,{t_output_tdata_12,{t_output_tdata_13,{t_output_tdata_14,{t_output_tdata_15,t_output_tdata_128}}}}}}}}}}}}}}}};
  assign output_tvalid = (outVldCond && vldDly);
  assign output_tuser = userDly;
  always @(posedge clk_0_clk) begin
    dataDly <= input_tdata;
    userDly <= input_tuser;
    if(vldDly) begin
      t_output_tdata_1 <= t_output_tdata;
    end
    if(vldDly) begin
      t_output_tdata_2 <= t_output_tdata_1;
    end
    if(vldDly) begin
      t_output_tdata_3 <= t_output_tdata_2;
    end
    if(vldDly) begin
      t_output_tdata_4 <= t_output_tdata_3;
    end
    if(vldDly) begin
      t_output_tdata_5 <= t_output_tdata_4;
    end
    if(vldDly) begin
      t_output_tdata_6 <= t_output_tdata_5;
    end
    if(vldDly) begin
      t_output_tdata_7 <= t_output_tdata_6;
    end
    if(vldDly) begin
      t_output_tdata_8 <= t_output_tdata_7;
    end
    if(vldDly) begin
      t_output_tdata_9 <= t_output_tdata_8;
    end
    if(vldDly) begin
      t_output_tdata_10 <= t_output_tdata_9;
    end
    if(vldDly) begin
      t_output_tdata_11 <= t_output_tdata_10;
    end
    if(vldDly) begin
      t_output_tdata_12 <= t_output_tdata_11;
    end
    if(vldDly) begin
      t_output_tdata_13 <= t_output_tdata_12;
    end
    if(vldDly) begin
      t_output_tdata_14 <= t_output_tdata_13;
    end
    if(vldDly) begin
      t_output_tdata_15 <= t_output_tdata_14;
    end
    if(vldDly) begin
      t_output_tdata_16 <= t_output_tdata_15;
    end
    if(vldDly) begin
      t_output_tdata_17 <= t_output_tdata_16;
    end
    if(vldDly) begin
      t_output_tdata_18 <= t_output_tdata_17;
    end
    if(vldDly) begin
      t_output_tdata_19 <= t_output_tdata_18;
    end
    if(vldDly) begin
      t_output_tdata_20 <= t_output_tdata_19;
    end
    if(vldDly) begin
      t_output_tdata_21 <= t_output_tdata_20;
    end
    if(vldDly) begin
      t_output_tdata_22 <= t_output_tdata_21;
    end
    if(vldDly) begin
      t_output_tdata_23 <= t_output_tdata_22;
    end
    if(vldDly) begin
      t_output_tdata_24 <= t_output_tdata_23;
    end
    if(vldDly) begin
      t_output_tdata_25 <= t_output_tdata_24;
    end
    if(vldDly) begin
      t_output_tdata_26 <= t_output_tdata_25;
    end
    if(vldDly) begin
      t_output_tdata_27 <= t_output_tdata_26;
    end
    if(vldDly) begin
      t_output_tdata_28 <= t_output_tdata_27;
    end
    if(vldDly) begin
      t_output_tdata_29 <= t_output_tdata_28;
    end
    if(vldDly) begin
      t_output_tdata_30 <= t_output_tdata_29;
    end
    if(vldDly) begin
      t_output_tdata_31 <= t_output_tdata_30;
    end
    if(vldDly) begin
      t_output_tdata_32 <= t_output_tdata_31;
    end
    if(vldDly) begin
      t_output_tdata_33 <= t_output_tdata_32;
    end
    if(vldDly) begin
      t_output_tdata_34 <= t_output_tdata_33;
    end
    if(vldDly) begin
      t_output_tdata_35 <= t_output_tdata_34;
    end
    if(vldDly) begin
      t_output_tdata_36 <= t_output_tdata_35;
    end
    if(vldDly) begin
      t_output_tdata_37 <= t_output_tdata_36;
    end
    if(vldDly) begin
      t_output_tdata_38 <= t_output_tdata_37;
    end
    if(vldDly) begin
      t_output_tdata_39 <= t_output_tdata_38;
    end
    if(vldDly) begin
      t_output_tdata_40 <= t_output_tdata_39;
    end
    if(vldDly) begin
      t_output_tdata_41 <= t_output_tdata_40;
    end
    if(vldDly) begin
      t_output_tdata_42 <= t_output_tdata_41;
    end
    if(vldDly) begin
      t_output_tdata_43 <= t_output_tdata_42;
    end
    if(vldDly) begin
      t_output_tdata_44 <= t_output_tdata_43;
    end
    if(vldDly) begin
      t_output_tdata_45 <= t_output_tdata_44;
    end
    if(vldDly) begin
      t_output_tdata_46 <= t_output_tdata_45;
    end
    if(vldDly) begin
      t_output_tdata_47 <= t_output_tdata_46;
    end
    if(vldDly) begin
      t_output_tdata_48 <= t_output_tdata_47;
    end
    if(vldDly) begin
      t_output_tdata_49 <= t_output_tdata_48;
    end
    if(vldDly) begin
      t_output_tdata_50 <= t_output_tdata_49;
    end
    if(vldDly) begin
      t_output_tdata_51 <= t_output_tdata_50;
    end
    if(vldDly) begin
      t_output_tdata_52 <= t_output_tdata_51;
    end
    if(vldDly) begin
      t_output_tdata_53 <= t_output_tdata_52;
    end
    if(vldDly) begin
      t_output_tdata_54 <= t_output_tdata_53;
    end
    if(vldDly) begin
      t_output_tdata_55 <= t_output_tdata_54;
    end
    if(vldDly) begin
      t_output_tdata_56 <= t_output_tdata_55;
    end
    if(vldDly) begin
      t_output_tdata_57 <= t_output_tdata_56;
    end
    if(vldDly) begin
      t_output_tdata_58 <= t_output_tdata_57;
    end
    if(vldDly) begin
      t_output_tdata_59 <= t_output_tdata_58;
    end
    if(vldDly) begin
      t_output_tdata_60 <= t_output_tdata_59;
    end
    if(vldDly) begin
      t_output_tdata_61 <= t_output_tdata_60;
    end
    if(vldDly) begin
      t_output_tdata_62 <= t_output_tdata_61;
    end
    if(vldDly) begin
      t_output_tdata_63 <= t_output_tdata_62;
    end
    if(vldDly) begin
      t_output_tdata_64 <= t_output_tdata_63;
    end
    if(vldDly) begin
      t_output_tdata_65 <= t_output_tdata_64;
    end
    if(vldDly) begin
      t_output_tdata_66 <= t_output_tdata_65;
    end
    if(vldDly) begin
      t_output_tdata_67 <= t_output_tdata_66;
    end
    if(vldDly) begin
      t_output_tdata_68 <= t_output_tdata_67;
    end
    if(vldDly) begin
      t_output_tdata_69 <= t_output_tdata_68;
    end
    if(vldDly) begin
      t_output_tdata_70 <= t_output_tdata_69;
    end
    if(vldDly) begin
      t_output_tdata_71 <= t_output_tdata_70;
    end
    if(vldDly) begin
      t_output_tdata_72 <= t_output_tdata_71;
    end
    if(vldDly) begin
      t_output_tdata_73 <= t_output_tdata_72;
    end
    if(vldDly) begin
      t_output_tdata_74 <= t_output_tdata_73;
    end
    if(vldDly) begin
      t_output_tdata_75 <= t_output_tdata_74;
    end
    if(vldDly) begin
      t_output_tdata_76 <= t_output_tdata_75;
    end
    if(vldDly) begin
      t_output_tdata_77 <= t_output_tdata_76;
    end
    if(vldDly) begin
      t_output_tdata_78 <= t_output_tdata_77;
    end
    if(vldDly) begin
      t_output_tdata_79 <= t_output_tdata_78;
    end
    if(vldDly) begin
      t_output_tdata_80 <= t_output_tdata_79;
    end
    if(vldDly) begin
      t_output_tdata_81 <= t_output_tdata_80;
    end
    if(vldDly) begin
      t_output_tdata_82 <= t_output_tdata_81;
    end
    if(vldDly) begin
      t_output_tdata_83 <= t_output_tdata_82;
    end
    if(vldDly) begin
      t_output_tdata_84 <= t_output_tdata_83;
    end
    if(vldDly) begin
      t_output_tdata_85 <= t_output_tdata_84;
    end
    if(vldDly) begin
      t_output_tdata_86 <= t_output_tdata_85;
    end
    if(vldDly) begin
      t_output_tdata_87 <= t_output_tdata_86;
    end
    if(vldDly) begin
      t_output_tdata_88 <= t_output_tdata_87;
    end
    if(vldDly) begin
      t_output_tdata_89 <= t_output_tdata_88;
    end
    if(vldDly) begin
      t_output_tdata_90 <= t_output_tdata_89;
    end
    if(vldDly) begin
      t_output_tdata_91 <= t_output_tdata_90;
    end
    if(vldDly) begin
      t_output_tdata_92 <= t_output_tdata_91;
    end
    if(vldDly) begin
      t_output_tdata_93 <= t_output_tdata_92;
    end
    if(vldDly) begin
      t_output_tdata_94 <= t_output_tdata_93;
    end
    if(vldDly) begin
      t_output_tdata_95 <= t_output_tdata_94;
    end
    if(vldDly) begin
      t_output_tdata_96 <= t_output_tdata_95;
    end
    if(vldDly) begin
      t_output_tdata_97 <= t_output_tdata_96;
    end
    if(vldDly) begin
      t_output_tdata_98 <= t_output_tdata_97;
    end
    if(vldDly) begin
      t_output_tdata_99 <= t_output_tdata_98;
    end
    if(vldDly) begin
      t_output_tdata_100 <= t_output_tdata_99;
    end
    if(vldDly) begin
      t_output_tdata_101 <= t_output_tdata_100;
    end
    if(vldDly) begin
      t_output_tdata_102 <= t_output_tdata_101;
    end
    if(vldDly) begin
      t_output_tdata_103 <= t_output_tdata_102;
    end
    if(vldDly) begin
      t_output_tdata_104 <= t_output_tdata_103;
    end
    if(vldDly) begin
      t_output_tdata_105 <= t_output_tdata_104;
    end
    if(vldDly) begin
      t_output_tdata_106 <= t_output_tdata_105;
    end
    if(vldDly) begin
      t_output_tdata_107 <= t_output_tdata_106;
    end
    if(vldDly) begin
      t_output_tdata_108 <= t_output_tdata_107;
    end
    if(vldDly) begin
      t_output_tdata_109 <= t_output_tdata_108;
    end
    if(vldDly) begin
      t_output_tdata_110 <= t_output_tdata_109;
    end
    if(vldDly) begin
      t_output_tdata_111 <= t_output_tdata_110;
    end
    if(vldDly) begin
      t_output_tdata_112 <= t_output_tdata_111;
    end
    if(vldDly) begin
      t_output_tdata_113 <= t_output_tdata_112;
    end
    if(vldDly) begin
      t_output_tdata_114 <= t_output_tdata_113;
    end
    if(vldDly) begin
      t_output_tdata_115 <= t_output_tdata_114;
    end
    if(vldDly) begin
      t_output_tdata_116 <= t_output_tdata_115;
    end
    if(vldDly) begin
      t_output_tdata_117 <= t_output_tdata_116;
    end
    if(vldDly) begin
      t_output_tdata_118 <= t_output_tdata_117;
    end
    if(vldDly) begin
      t_output_tdata_119 <= t_output_tdata_118;
    end
    if(vldDly) begin
      t_output_tdata_120 <= t_output_tdata_119;
    end
    if(vldDly) begin
      t_output_tdata_121 <= t_output_tdata_120;
    end
    if(vldDly) begin
      t_output_tdata_122 <= t_output_tdata_121;
    end
    if(vldDly) begin
      t_output_tdata_123 <= t_output_tdata_122;
    end
    if(vldDly) begin
      t_output_tdata_124 <= t_output_tdata_123;
    end
    if(vldDly) begin
      t_output_tdata_125 <= t_output_tdata_124;
    end
    if(vldDly) begin
      t_output_tdata_126 <= t_output_tdata_125;
    end
    if(vldDly) begin
      t_output_tdata_127 <= t_output_tdata_126;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      vldDly <= 1'b0;
      outVld <= 1'b0;
      outVldCond <= 1'b0;
      cnt <= 7'h0;
    end else begin
      vldDly <= input_valid;
      outVld <= input_valid;
      if(vldDly) begin
        cnt <= (cnt + 7'h01);
        if(cntAboutToOvf) begin
          outVldCond <= 1'b1;
        end
        if(cntOvf) begin
          outVldCond <= 1'b0;
          cnt <= 7'h0;
        end
      end
    end
  end


endmodule

//StreamFifo_34 replaced by StreamFifo_103

module VecOutBuf_1 (
  input  wire          io_input_valid,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [2047:0] io_output_payload,
  input  wire          status_tokenIndexFlow_valid,
  input  wire [5:0]    status_tokenIndexFlow_payload,
  input  wire          status_enPredictor,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                pushStatus_prefillIn_fifo_io_pop_ready;
  wire                popStatus_prefillIn_fifo_io_pop_ready;
  reg        [127:0]  ram_mem_0_spinal_port1;
  reg        [127:0]  ram_mem_1_spinal_port1;
  reg        [127:0]  ram_mem_2_spinal_port1;
  reg        [127:0]  ram_mem_3_spinal_port1;
  reg        [127:0]  ram_mem_4_spinal_port1;
  reg        [127:0]  ram_mem_5_spinal_port1;
  reg        [127:0]  ram_mem_6_spinal_port1;
  reg        [127:0]  ram_mem_7_spinal_port1;
  reg        [127:0]  ram_mem_8_spinal_port1;
  reg        [127:0]  ram_mem_9_spinal_port1;
  reg        [127:0]  ram_mem_10_spinal_port1;
  reg        [127:0]  ram_mem_11_spinal_port1;
  reg        [127:0]  ram_mem_12_spinal_port1;
  reg        [127:0]  ram_mem_13_spinal_port1;
  reg        [127:0]  ram_mem_14_spinal_port1;
  reg        [127:0]  ram_mem_15_spinal_port1;
  wire                pushStatus_prefillIn_fifo_io_push_ready;
  wire                pushStatus_prefillIn_fifo_io_pop_valid;
  wire                pushStatus_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    pushStatus_prefillIn_fifo_io_occupancy;
  wire       [6:0]    pushStatus_prefillIn_fifo_io_availability;
  wire                popStatus_prefillIn_fifo_io_push_ready;
  wire                popStatus_prefillIn_fifo_io_pop_valid;
  wire                popStatus_prefillIn_fifo_io_pop_payload;
  wire       [6:0]    popStatus_prefillIn_fifo_io_occupancy;
  wire       [6:0]    popStatus_prefillIn_fifo_io_availability;
  wire                lutInst_0_O;
  wire                lutInst_1_O;
  wire                lutInst_2_O;
  wire                lutInst_3_O;
  wire                lutInst_4_O;
  wire                lutInst_5_O;
  wire                lutInst_6_O;
  wire                lutInst_7_O;
  wire                lutInst_8_O;
  wire                lutInst_9_O;
  wire                lutInst_10_O;
  wire                lutInst_11_O;
  wire                lutInst_12_O;
  wire                lutInst_13_O;
  wire                lutInst_14_O;
  wire                lutInst_15_O;
  wire                t_when;
  wire                t_when_1;
  wire                t_when_2;
  wire                t_when_3;
  wire                t_when_4;
  wire                t_when_5;
  wire                t_when_6;
  wire                t_when_7;
  wire                t_when_8;
  wire                t_when_9;
  wire                t_when_10;
  wire                t_when_11;
  wire                t_when_12;
  wire                t_when_13;
  wire                t_when_14;
  wire       [5:0]    t_ram_mem_0_port;
  wire       [5:0]    t_ram_mem_1_port;
  wire       [5:0]    t_ram_mem_2_port;
  wire       [5:0]    t_ram_mem_3_port;
  wire       [5:0]    t_ram_mem_4_port;
  wire       [5:0]    t_ram_mem_5_port;
  wire       [5:0]    t_ram_mem_6_port;
  wire       [5:0]    t_ram_mem_7_port;
  wire       [5:0]    t_ram_mem_8_port;
  wire       [5:0]    t_ram_mem_9_port;
  wire       [5:0]    t_ram_mem_10_port;
  wire       [5:0]    t_ram_mem_11_port;
  wire       [5:0]    t_ram_mem_12_port;
  wire       [5:0]    t_ram_mem_13_port;
  wire       [5:0]    t_ram_mem_14_port;
  wire       [5:0]    t_ram_mem_15_port;
  reg                 validDly;
  reg        [2047:0] dataDly;
  wire                ptrPush_enPushCnt;
  reg        [4:0]    ptrPush_pushPackLen;
  reg        [4:0]    ptrPush_pushStartAt;
  reg        [4:0]    ptrPush_pushStartAtNext;
  reg                 ptrPush_pushReuse;
  reg                 ptrPush_pushReuseNext;
  reg        [4:0]    ptrPush_pushPtr;
  reg        [4:0]    ptrPush_pushNext;
  wire                ptrPush_pushPtrOvf;
  reg        [4:0]    pushStatus_layerCnt;
  reg                 pushStatus_lastLayer;
  wire                pushStatus_layerCntAbout2Ovf;
  reg                 pushStatus_enLayerCntInc;
  wire                pushStatus_prefillIn_valid;
  wire                pushStatus_prefillIn_ready;
  wire                pushStatus_prefillIn_payload;
  reg                 pushStatus_prefillFirstToken;
  reg                 pushStatus_logitsGen;
  wire                vecBuf_pushStatus_prefillIn_fifo_io_pop_fire;
  reg                 pushStatus_tokenIn;
  reg                 pushStatus_lnOut;
  reg                 pushStatus_qRotateOut;
  reg                 pushStatus_qkvOut;
  reg                 pushStatus_mlpLnOut;
  wire                pushStatus_stateTrig;
  reg        [4:0]    pushStatus_headCnt;
  wire                pushStatus_headCntOvf;
  reg        [4:0]    pushStatus_headCntNext;
  wire       [4:0]    pushStatus_headCntNextInc;
  wire                ptrPop_enPopCnt;
  reg        [4:0]    ptrPop_popPackLen;
  reg        [4:0]    ptrPop_popStartAt;
  reg        [4:0]    ptrPop_popStartAtNext;
  reg        [4:0]    ptrPop_popPtr;
  reg                 ptrPop_popReuse;
  reg                 ptrPop_popReuseNext;
  reg        [4:0]    ptrPop_popNext;
  wire                ptrPop_popPtrOvf;
  reg        [4:0]    popStatus_layerCnt;
  reg                 popStatus_lastLayer;
  wire                popStatus_layerCntAbout2Ovf;
  reg                 popStatus_enLayerCntInc;
  wire                popStatus_prefillIn_valid;
  wire                popStatus_prefillIn_ready;
  wire                popStatus_prefillIn_payload;
  reg                 popStatus_prefillFirstToken;
  reg                 popStatus_logitsGen;
  wire                vecBuf_popStatus_prefillIn_fifo_io_pop_fire;
  reg                 popStatus_throughToLn;
  reg                 popStatus_lnToLogits;
  reg                 popStatus_reuseToQ;
  reg                 popStatus_qToQK;
  reg                 popStatus_reuseToK;
  reg                 popStatus_reuseToV;
  reg                 popStatus_qkvToOutProj;
  reg                 popStatus_reuseToPredU;
  reg                 popStatus_reuseToGate;
  reg                 popStatus_reuseToUp;
  wire                popStatus_stateTrig;
  wire                popStatus_prefillCond;
  reg        [4:0]    popStatus_headCnt;
  wire                popStatus_headCntOvf;
  wire       [4:0]    popStatus_headCntNext;
  (* keep = "true" *) reg                 ram_pushEn_0;
  (* keep = "true" *) reg                 ram_pushEn_1;
  (* keep = "true" *) reg                 ram_pushEn_2;
  (* keep = "true" *) reg                 ram_pushEn_3;
  (* keep = "true" *) reg                 ram_pushEn_4;
  (* keep = "true" *) reg                 ram_pushEn_5;
  (* keep = "true" *) reg                 ram_pushEn_6;
  (* keep = "true" *) reg                 ram_pushEn_7;
  (* keep = "true" *) reg                 ram_pushEn_8;
  (* keep = "true" *) reg                 ram_pushEn_9;
  (* keep = "true" *) reg                 ram_pushEn_10;
  (* keep = "true" *) reg                 ram_pushEn_11;
  (* keep = "true" *) reg                 ram_pushEn_12;
  (* keep = "true" *) reg                 ram_pushEn_13;
  (* keep = "true" *) reg                 ram_pushEn_14;
  (* keep = "true" *) reg                 ram_pushEn_15;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_0;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_1;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_2;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_3;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_4;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_5;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_6;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_7;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_8;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_9;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_10;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_11;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_12;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_13;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_14;
  (* keep = "true" *) reg        [4:0]    ram_pushPtrLow_15;
  (* keep = "true" *) reg                 ram_pushPtrMsb_0;
  (* keep = "true" *) reg                 ram_pushPtrMsb_1;
  (* keep = "true" *) reg                 ram_pushPtrMsb_2;
  (* keep = "true" *) reg                 ram_pushPtrMsb_3;
  (* keep = "true" *) reg                 ram_pushPtrMsb_4;
  (* keep = "true" *) reg                 ram_pushPtrMsb_5;
  (* keep = "true" *) reg                 ram_pushPtrMsb_6;
  (* keep = "true" *) reg                 ram_pushPtrMsb_7;
  (* keep = "true" *) reg                 ram_pushPtrMsb_8;
  (* keep = "true" *) reg                 ram_pushPtrMsb_9;
  (* keep = "true" *) reg                 ram_pushPtrMsb_10;
  (* keep = "true" *) reg                 ram_pushPtrMsb_11;
  (* keep = "true" *) reg                 ram_pushPtrMsb_12;
  (* keep = "true" *) reg                 ram_pushPtrMsb_13;
  (* keep = "true" *) reg                 ram_pushPtrMsb_14;
  (* keep = "true" *) reg                 ram_pushPtrMsb_15;
  wire       [5:0]    ram_pushPtr_0;
  wire       [5:0]    ram_pushPtr_1;
  wire       [5:0]    ram_pushPtr_2;
  wire       [5:0]    ram_pushPtr_3;
  wire       [5:0]    ram_pushPtr_4;
  wire       [5:0]    ram_pushPtr_5;
  wire       [5:0]    ram_pushPtr_6;
  wire       [5:0]    ram_pushPtr_7;
  wire       [5:0]    ram_pushPtr_8;
  wire       [5:0]    ram_pushPtr_9;
  wire       [5:0]    ram_pushPtr_10;
  wire       [5:0]    ram_pushPtr_11;
  wire       [5:0]    ram_pushPtr_12;
  wire       [5:0]    ram_pushPtr_13;
  wire       [5:0]    ram_pushPtr_14;
  wire       [5:0]    ram_pushPtr_15;
  wire                ram_popEn_0;
  wire                ram_popEn_1;
  wire                ram_popEn_2;
  wire                ram_popEn_3;
  wire                ram_popEn_4;
  wire                ram_popEn_5;
  wire                ram_popEn_6;
  wire                ram_popEn_7;
  wire                ram_popEn_8;
  wire                ram_popEn_9;
  wire                ram_popEn_10;
  wire                ram_popEn_11;
  wire                ram_popEn_12;
  wire                ram_popEn_13;
  wire                ram_popEn_14;
  wire                ram_popEn_15;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_0;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_1;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_2;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_3;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_4;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_5;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_6;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_7;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_8;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_9;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_10;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_11;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_12;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_13;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_14;
  (* keep = "true" *) reg        [4:0]    ram_popPtrLow_15;
  (* keep = "true" *) reg                 ram_popPtrMsb_0;
  (* keep = "true" *) reg                 ram_popPtrMsb_1;
  (* keep = "true" *) reg                 ram_popPtrMsb_2;
  (* keep = "true" *) reg                 ram_popPtrMsb_3;
  (* keep = "true" *) reg                 ram_popPtrMsb_4;
  (* keep = "true" *) reg                 ram_popPtrMsb_5;
  (* keep = "true" *) reg                 ram_popPtrMsb_6;
  (* keep = "true" *) reg                 ram_popPtrMsb_7;
  (* keep = "true" *) reg                 ram_popPtrMsb_8;
  (* keep = "true" *) reg                 ram_popPtrMsb_9;
  (* keep = "true" *) reg                 ram_popPtrMsb_10;
  (* keep = "true" *) reg                 ram_popPtrMsb_11;
  (* keep = "true" *) reg                 ram_popPtrMsb_12;
  (* keep = "true" *) reg                 ram_popPtrMsb_13;
  (* keep = "true" *) reg                 ram_popPtrMsb_14;
  (* keep = "true" *) reg                 ram_popPtrMsb_15;
  wire       [5:0]    ram_popPtr_0;
  wire       [5:0]    ram_popPtr_1;
  wire       [5:0]    ram_popPtr_2;
  wire       [5:0]    ram_popPtr_3;
  wire       [5:0]    ram_popPtr_4;
  wire       [5:0]    ram_popPtr_5;
  wire       [5:0]    ram_popPtr_6;
  wire       [5:0]    ram_popPtr_7;
  wire       [5:0]    ram_popPtr_8;
  wire       [5:0]    ram_popPtr_9;
  wire       [5:0]    ram_popPtr_10;
  wire       [5:0]    ram_popPtr_11;
  wire       [5:0]    ram_popPtr_12;
  wire       [5:0]    ram_popPtr_13;
  wire       [5:0]    ram_popPtr_14;
  wire       [5:0]    ram_popPtr_15;
  wire       [127:0]  ram_ramIn_0;
  wire       [127:0]  ram_ramIn_1;
  wire       [127:0]  ram_ramIn_2;
  wire       [127:0]  ram_ramIn_3;
  wire       [127:0]  ram_ramIn_4;
  wire       [127:0]  ram_ramIn_5;
  wire       [127:0]  ram_ramIn_6;
  wire       [127:0]  ram_ramIn_7;
  wire       [127:0]  ram_ramIn_8;
  wire       [127:0]  ram_ramIn_9;
  wire       [127:0]  ram_ramIn_10;
  wire       [127:0]  ram_ramIn_11;
  wire       [127:0]  ram_ramIn_12;
  wire       [127:0]  ram_ramIn_13;
  wire       [127:0]  ram_ramIn_14;
  wire       [127:0]  ram_ramIn_15;
  wire       [127:0]  ram_ramOut_0;
  wire       [127:0]  ram_ramOut_1;
  wire       [127:0]  ram_ramOut_2;
  wire       [127:0]  ram_ramOut_3;
  wire       [127:0]  ram_ramOut_4;
  wire       [127:0]  ram_ramOut_5;
  wire       [127:0]  ram_ramOut_6;
  wire       [127:0]  ram_ramOut_7;
  wire       [127:0]  ram_ramOut_8;
  wire       [127:0]  ram_ramOut_9;
  wire       [127:0]  ram_ramOut_10;
  wire       [127:0]  ram_ramOut_11;
  wire       [127:0]  ram_ramOut_12;
  wire       [127:0]  ram_ramOut_13;
  wire       [127:0]  ram_ramOut_14;
  wire       [127:0]  ram_ramOut_15;
  wire       [5:0]    t_ram_ramOut_0;
  wire       [5:0]    t_ram_ramOut_1;
  wire       [5:0]    t_ram_ramOut_2;
  wire       [5:0]    t_ram_ramOut_3;
  wire       [5:0]    t_ram_ramOut_4;
  wire       [5:0]    t_ram_ramOut_5;
  wire       [5:0]    t_ram_ramOut_6;
  wire       [5:0]    t_ram_ramOut_7;
  wire       [5:0]    t_ram_ramOut_8;
  wire       [5:0]    t_ram_ramOut_9;
  wire       [5:0]    t_ram_ramOut_10;
  wire       [5:0]    t_ram_ramOut_11;
  wire       [5:0]    t_ram_ramOut_12;
  wire       [5:0]    t_ram_ramOut_13;
  wire       [5:0]    t_ram_ramOut_14;
  wire       [5:0]    t_ram_ramOut_15;
  reg                 reusePushFinish;
  wire                popLtPush;
  reg                 popPre_valid;
  reg                 popPre_ready;
  reg                 popPre_thrown_valid;
  reg                 popPre_thrown_ready;
  wire                popPrePipe_valid;
  wire                popPrePipe_ready;
  reg                 popPre_thrown_rValid;
  wire                popPre_fire;
  (* ram_style = "distributed" *) reg [127:0] ram_mem_0 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_1 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_2 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_3 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_4 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_5 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_6 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_7 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_8 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_9 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_10 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_11 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_12 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_13 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_14 [0:63];
  (* ram_style = "distributed" *) reg [127:0] ram_mem_15 [0:63];

  assign t_when = (pushStatus_tokenIn && pushStatus_stateTrig);
  assign t_when_1 = (pushStatus_lnOut && pushStatus_stateTrig);
  assign t_when_2 = (pushStatus_prefillIn_fifo_io_pop_payload && pushStatus_lastLayer);
  assign t_when_4 = (pushStatus_qkvOut && pushStatus_stateTrig);
  assign t_when_5 = (pushStatus_mlpLnOut && pushStatus_stateTrig);
  assign t_when_3 = (pushStatus_qRotateOut && pushStatus_stateTrig);
  assign t_when_6 = (popStatus_throughToLn && popStatus_stateTrig);
  assign t_when_7 = (popStatus_lnToLogits && popStatus_stateTrig);
  assign t_when_8 = (popStatus_reuseToQ && popStatus_stateTrig);
  assign t_when_9 = (popStatus_reuseToK && popStatus_stateTrig);
  assign t_when_10 = (popStatus_qToQK && popStatus_stateTrig);
  assign t_when_11 = (popStatus_reuseToV && popStatus_stateTrig);
  assign t_when_13 = (popStatus_qkvToOutProj && popStatus_stateTrig);
  assign t_when_14 = (popStatus_reuseToUp && popStatus_stateTrig);
  assign t_when_12 = (popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer);
  assign t_ram_mem_0_port = ram_pushPtr_0;
  assign t_ram_mem_1_port = ram_pushPtr_1;
  assign t_ram_mem_2_port = ram_pushPtr_2;
  assign t_ram_mem_3_port = ram_pushPtr_3;
  assign t_ram_mem_4_port = ram_pushPtr_4;
  assign t_ram_mem_5_port = ram_pushPtr_5;
  assign t_ram_mem_6_port = ram_pushPtr_6;
  assign t_ram_mem_7_port = ram_pushPtr_7;
  assign t_ram_mem_8_port = ram_pushPtr_8;
  assign t_ram_mem_9_port = ram_pushPtr_9;
  assign t_ram_mem_10_port = ram_pushPtr_10;
  assign t_ram_mem_11_port = ram_pushPtr_11;
  assign t_ram_mem_12_port = ram_pushPtr_12;
  assign t_ram_mem_13_port = ram_pushPtr_13;
  assign t_ram_mem_14_port = ram_pushPtr_14;
  assign t_ram_mem_15_port = ram_pushPtr_15;
  always @(posedge clk_0_clk) begin
    if(ram_pushEn_0) begin
      ram_mem_0[t_ram_mem_0_port] <= ram_ramIn_0;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_0) begin
      ram_mem_0_spinal_port1 <= ram_mem_0[t_ram_ramOut_0];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_1) begin
      ram_mem_1[t_ram_mem_1_port] <= ram_ramIn_1;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_1) begin
      ram_mem_1_spinal_port1 <= ram_mem_1[t_ram_ramOut_1];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_2) begin
      ram_mem_2[t_ram_mem_2_port] <= ram_ramIn_2;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_2) begin
      ram_mem_2_spinal_port1 <= ram_mem_2[t_ram_ramOut_2];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_3) begin
      ram_mem_3[t_ram_mem_3_port] <= ram_ramIn_3;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_3) begin
      ram_mem_3_spinal_port1 <= ram_mem_3[t_ram_ramOut_3];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_4) begin
      ram_mem_4[t_ram_mem_4_port] <= ram_ramIn_4;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_4) begin
      ram_mem_4_spinal_port1 <= ram_mem_4[t_ram_ramOut_4];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_5) begin
      ram_mem_5[t_ram_mem_5_port] <= ram_ramIn_5;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_5) begin
      ram_mem_5_spinal_port1 <= ram_mem_5[t_ram_ramOut_5];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_6) begin
      ram_mem_6[t_ram_mem_6_port] <= ram_ramIn_6;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_6) begin
      ram_mem_6_spinal_port1 <= ram_mem_6[t_ram_ramOut_6];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_7) begin
      ram_mem_7[t_ram_mem_7_port] <= ram_ramIn_7;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_7) begin
      ram_mem_7_spinal_port1 <= ram_mem_7[t_ram_ramOut_7];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_8) begin
      ram_mem_8[t_ram_mem_8_port] <= ram_ramIn_8;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_8) begin
      ram_mem_8_spinal_port1 <= ram_mem_8[t_ram_ramOut_8];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_9) begin
      ram_mem_9[t_ram_mem_9_port] <= ram_ramIn_9;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_9) begin
      ram_mem_9_spinal_port1 <= ram_mem_9[t_ram_ramOut_9];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_10) begin
      ram_mem_10[t_ram_mem_10_port] <= ram_ramIn_10;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_10) begin
      ram_mem_10_spinal_port1 <= ram_mem_10[t_ram_ramOut_10];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_11) begin
      ram_mem_11[t_ram_mem_11_port] <= ram_ramIn_11;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_11) begin
      ram_mem_11_spinal_port1 <= ram_mem_11[t_ram_ramOut_11];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_12) begin
      ram_mem_12[t_ram_mem_12_port] <= ram_ramIn_12;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_12) begin
      ram_mem_12_spinal_port1 <= ram_mem_12[t_ram_ramOut_12];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_13) begin
      ram_mem_13[t_ram_mem_13_port] <= ram_ramIn_13;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_13) begin
      ram_mem_13_spinal_port1 <= ram_mem_13[t_ram_ramOut_13];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_14) begin
      ram_mem_14[t_ram_mem_14_port] <= ram_ramIn_14;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_14) begin
      ram_mem_14_spinal_port1 <= ram_mem_14[t_ram_ramOut_14];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_pushEn_15) begin
      ram_mem_15[t_ram_mem_15_port] <= ram_ramIn_15;
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_popEn_15) begin
      ram_mem_15_spinal_port1 <= ram_mem_15[t_ram_ramOut_15];
    end
  end

  StreamFifo_103 pushStatus_prefillIn_fifo (
    .io_push_valid   (pushStatus_prefillIn_valid                    ), //i
    .io_push_ready   (pushStatus_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (pushStatus_prefillIn_payload                  ), //i
    .io_pop_valid    (pushStatus_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (pushStatus_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (pushStatus_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                          ), //i
    .io_occupancy    (pushStatus_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (pushStatus_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                                     ), //i
    .clk_0_resetn    (clk_0_resetn                                  )  //i
  );
  StreamFifo_103 popStatus_prefillIn_fifo (
    .io_push_valid   (popStatus_prefillIn_valid                    ), //i
    .io_push_ready   (popStatus_prefillIn_fifo_io_push_ready       ), //o
    .io_push_payload (popStatus_prefillIn_payload                  ), //i
    .io_pop_valid    (popStatus_prefillIn_fifo_io_pop_valid        ), //o
    .io_pop_ready    (popStatus_prefillIn_fifo_io_pop_ready        ), //i
    .io_pop_payload  (popStatus_prefillIn_fifo_io_pop_payload      ), //o
    .io_flush        (1'b0                                         ), //i
    .io_occupancy    (popStatus_prefillIn_fifo_io_occupancy[6:0]   ), //o
    .io_availability (popStatus_prefillIn_fifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                                    ), //i
    .clk_0_resetn    (clk_0_resetn                                 )  //i
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_0 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_0_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_1 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_1_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_2 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_2_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_3 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_3_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_4 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_4_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_5 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_5_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_6 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_6_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_7 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_7_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_8 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_8_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_9 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_9_O          )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_10 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_10_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_11 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_11_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_12 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_12_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_13 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_13_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_14 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_14_O         )  //o
  );
  (* keep_hierarchy = "yes" *) LUT3 #(
    .INIT (8'hfb)
  ) lutInst_15 (
    .I0 (popPrePipe_ready     ), //i
    .I1 (popPrePipe_valid     ), //i
    .I2 (popStatus_throughToLn), //i
    .O  (lutInst_15_O         )  //o
  );
  assign ptrPush_pushPtrOvf = (ptrPush_pushPtr == ptrPush_pushPackLen);
  always @(*) begin
    ptrPush_pushNext = ptrPush_pushPtr;
    if(ptrPush_enPushCnt) begin
      ptrPush_pushNext = (ptrPush_pushPtr + 5'h01);
      if(ptrPush_pushPtrOvf) begin
        ptrPush_pushNext = ptrPush_pushStartAtNext;
      end
    end
  end

  always @(*) begin
    ptrPush_pushReuseNext = ptrPush_pushReuse;
    if(t_when) begin
      ptrPush_pushReuseNext = (pushStatus_logitsGen ? 1'b0 : 1'b1);
    end
    if(t_when_1) begin
      if(t_when_2) begin
        ptrPush_pushReuseNext = 1'b0;
      end else begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushReuseNext = 1'b0;
        end else begin
          if(pushStatus_logitsGen) begin
            ptrPush_pushReuseNext = 1'b0;
          end else begin
            ptrPush_pushReuseNext = 1'b0;
          end
        end
      end
    end
    if(t_when_4) begin
      if(pushStatus_headCntOvf) begin
        ptrPush_pushReuseNext = 1'b1;
      end
    end
    if(t_when_5) begin
      ptrPush_pushReuseNext = 1'b0;
    end
  end

  always @(*) begin
    ptrPush_pushStartAtNext = ptrPush_pushStartAt;
    if(t_when) begin
      ptrPush_pushStartAtNext = 5'h0;
    end
    if(t_when_1) begin
      if(!t_when_2) begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
        end else begin
          if(!pushStatus_logitsGen) begin
            ptrPush_pushStartAtNext = 5'h0;
          end
        end
      end
    end
    if(t_when_3) begin
      ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
    end
    if(t_when_4) begin
      if(pushStatus_prefillFirstToken) begin
        ptrPush_pushStartAtNext = pushStatus_headCntNextInc;
      end else begin
        ptrPush_pushStartAtNext = 5'h0;
      end
      if(pushStatus_headCntOvf) begin
        ptrPush_pushStartAtNext = 5'h0;
      end
    end
  end

  assign pushStatus_layerCntAbout2Ovf = (pushStatus_layerCnt == 5'h1e);
  assign pushStatus_prefillIn_valid = status_tokenIndexFlow_valid;
  assign pushStatus_prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign pushStatus_prefillIn_ready = pushStatus_prefillIn_fifo_io_push_ready;
  assign pushStatus_prefillIn_fifo_io_pop_ready = (pushStatus_enLayerCntInc && pushStatus_lastLayer);
  assign vecBuf_pushStatus_prefillIn_fifo_io_pop_fire = (pushStatus_prefillIn_fifo_io_pop_valid && pushStatus_prefillIn_fifo_io_pop_ready);
  assign pushStatus_stateTrig = (ptrPush_enPushCnt && ptrPush_pushPtrOvf);
  assign pushStatus_headCntOvf = (pushStatus_headCnt == 5'h0f);
  assign pushStatus_headCntNextInc = (pushStatus_headCntNext + 5'h01);
  always @(*) begin
    pushStatus_headCntNext = pushStatus_headCnt;
    if(t_when_4) begin
      pushStatus_headCntNext = (pushStatus_headCnt + 5'h01);
      if(pushStatus_headCntOvf) begin
        pushStatus_headCntNext = 5'h0;
      end
    end
  end

  always @(*) begin
    pushStatus_enLayerCntInc = (pushStatus_mlpLnOut && pushStatus_stateTrig);
    if((pushStatus_prefillIn_fifo_io_pop_payload && pushStatus_lastLayer)) begin
      pushStatus_enLayerCntInc = (pushStatus_lnOut && pushStatus_stateTrig);
    end
  end

  assign ptrPop_popPtrOvf = (ptrPop_popPtr == ptrPop_popPackLen);
  always @(*) begin
    ptrPop_popNext = ptrPop_popPtr;
    if(ptrPop_enPopCnt) begin
      ptrPop_popNext = (ptrPop_popPtr + 5'h01);
      if(ptrPop_popPtrOvf) begin
        ptrPop_popNext = ptrPop_popStartAtNext;
      end
    end
  end

  always @(*) begin
    ptrPop_popReuseNext = ptrPop_popReuse;
    if(t_when_6) begin
      if(popStatus_logitsGen) begin
        ptrPop_popReuseNext = 1'b0;
      end else begin
        if(popStatus_prefillCond) begin
          ptrPop_popReuseNext = 1'b1;
        end else begin
          ptrPop_popReuseNext = 1'b1;
        end
      end
    end
    if(t_when_7) begin
      ptrPop_popReuseNext = 1'b0;
    end
    if(t_when_8) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_9) begin
      if(popStatus_prefillCond) begin
        ptrPop_popReuseNext = 1'b1;
      end else begin
        ptrPop_popReuseNext = 1'b0;
      end
    end
    if(t_when_10) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_11) begin
      if(popStatus_prefillCond) begin
        ptrPop_popReuseNext = 1'b1;
      end else begin
        ptrPop_popReuseNext = 1'b1;
      end
      if(popStatus_headCntOvf) begin
        ptrPop_popReuseNext = 1'b0;
      end
    end
    if(t_when_13) begin
      ptrPop_popReuseNext = 1'b1;
    end
    if(t_when_14) begin
      ptrPop_popReuseNext = 1'b0;
    end
  end

  always @(*) begin
    ptrPop_popStartAtNext = ptrPop_popStartAt;
    if(t_when_11) begin
      if(popStatus_headCntOvf) begin
        if(!t_when_12) begin
          ptrPop_popStartAtNext = 5'h01;
        end
      end
    end
    if(t_when_13) begin
      ptrPop_popStartAtNext = 5'h0;
    end
  end

  assign popStatus_layerCntAbout2Ovf = (popStatus_layerCnt == 5'h1e);
  assign popStatus_prefillIn_valid = status_tokenIndexFlow_valid;
  assign popStatus_prefillIn_payload = (status_tokenIndexFlow_payload == 6'h0);
  assign popStatus_prefillIn_ready = popStatus_prefillIn_fifo_io_push_ready;
  assign popStatus_prefillIn_fifo_io_pop_ready = (popStatus_enLayerCntInc && popStatus_lastLayer);
  assign vecBuf_popStatus_prefillIn_fifo_io_pop_fire = (popStatus_prefillIn_fifo_io_pop_valid && popStatus_prefillIn_fifo_io_pop_ready);
  assign popStatus_stateTrig = (ptrPop_enPopCnt && ptrPop_popPtrOvf);
  assign popStatus_prefillCond = (popStatus_prefillFirstToken || (popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer));
  assign popStatus_headCntOvf = (popStatus_headCnt == 5'h0f);
  assign popStatus_headCntNext = (popStatus_headCnt + 5'h01);
  always @(*) begin
    popStatus_enLayerCntInc = (popStatus_reuseToUp && popStatus_stateTrig);
    if((popStatus_prefillIn_fifo_io_pop_payload && popStatus_lastLayer)) begin
      popStatus_enLayerCntInc = ((popStatus_reuseToV && popStatus_stateTrig) && popStatus_headCntOvf);
    end
  end

  assign ram_pushPtr_0 = {ram_pushPtrMsb_0,ram_pushPtrLow_0};
  assign ram_pushPtr_1 = {ram_pushPtrMsb_1,ram_pushPtrLow_1};
  assign ram_pushPtr_2 = {ram_pushPtrMsb_2,ram_pushPtrLow_2};
  assign ram_pushPtr_3 = {ram_pushPtrMsb_3,ram_pushPtrLow_3};
  assign ram_pushPtr_4 = {ram_pushPtrMsb_4,ram_pushPtrLow_4};
  assign ram_pushPtr_5 = {ram_pushPtrMsb_5,ram_pushPtrLow_5};
  assign ram_pushPtr_6 = {ram_pushPtrMsb_6,ram_pushPtrLow_6};
  assign ram_pushPtr_7 = {ram_pushPtrMsb_7,ram_pushPtrLow_7};
  assign ram_pushPtr_8 = {ram_pushPtrMsb_8,ram_pushPtrLow_8};
  assign ram_pushPtr_9 = {ram_pushPtrMsb_9,ram_pushPtrLow_9};
  assign ram_pushPtr_10 = {ram_pushPtrMsb_10,ram_pushPtrLow_10};
  assign ram_pushPtr_11 = {ram_pushPtrMsb_11,ram_pushPtrLow_11};
  assign ram_pushPtr_12 = {ram_pushPtrMsb_12,ram_pushPtrLow_12};
  assign ram_pushPtr_13 = {ram_pushPtrMsb_13,ram_pushPtrLow_13};
  assign ram_pushPtr_14 = {ram_pushPtrMsb_14,ram_pushPtrLow_14};
  assign ram_pushPtr_15 = {ram_pushPtrMsb_15,ram_pushPtrLow_15};
  assign ram_popPtr_0 = {ram_popPtrMsb_0,ram_popPtrLow_0};
  assign ram_popPtr_1 = {ram_popPtrMsb_1,ram_popPtrLow_1};
  assign ram_popPtr_2 = {ram_popPtrMsb_2,ram_popPtrLow_2};
  assign ram_popPtr_3 = {ram_popPtrMsb_3,ram_popPtrLow_3};
  assign ram_popPtr_4 = {ram_popPtrMsb_4,ram_popPtrLow_4};
  assign ram_popPtr_5 = {ram_popPtrMsb_5,ram_popPtrLow_5};
  assign ram_popPtr_6 = {ram_popPtrMsb_6,ram_popPtrLow_6};
  assign ram_popPtr_7 = {ram_popPtrMsb_7,ram_popPtrLow_7};
  assign ram_popPtr_8 = {ram_popPtrMsb_8,ram_popPtrLow_8};
  assign ram_popPtr_9 = {ram_popPtrMsb_9,ram_popPtrLow_9};
  assign ram_popPtr_10 = {ram_popPtrMsb_10,ram_popPtrLow_10};
  assign ram_popPtr_11 = {ram_popPtrMsb_11,ram_popPtrLow_11};
  assign ram_popPtr_12 = {ram_popPtrMsb_12,ram_popPtrLow_12};
  assign ram_popPtr_13 = {ram_popPtrMsb_13,ram_popPtrLow_13};
  assign ram_popPtr_14 = {ram_popPtrMsb_14,ram_popPtrLow_14};
  assign ram_popPtr_15 = {ram_popPtrMsb_15,ram_popPtrLow_15};
  assign ram_ramIn_0 = dataDly[127 : 0];
  assign ram_ramIn_1 = dataDly[255 : 128];
  assign ram_ramIn_2 = dataDly[383 : 256];
  assign ram_ramIn_3 = dataDly[511 : 384];
  assign ram_ramIn_4 = dataDly[639 : 512];
  assign ram_ramIn_5 = dataDly[767 : 640];
  assign ram_ramIn_6 = dataDly[895 : 768];
  assign ram_ramIn_7 = dataDly[1023 : 896];
  assign ram_ramIn_8 = dataDly[1151 : 1024];
  assign ram_ramIn_9 = dataDly[1279 : 1152];
  assign ram_ramIn_10 = dataDly[1407 : 1280];
  assign ram_ramIn_11 = dataDly[1535 : 1408];
  assign ram_ramIn_12 = dataDly[1663 : 1536];
  assign ram_ramIn_13 = dataDly[1791 : 1664];
  assign ram_ramIn_14 = dataDly[1919 : 1792];
  assign ram_ramIn_15 = dataDly[2047 : 1920];
  assign t_ram_ramOut_0 = ram_popPtr_0;
  assign ram_ramOut_0 = ram_mem_0_spinal_port1;
  assign t_ram_ramOut_1 = ram_popPtr_1;
  assign ram_ramOut_1 = ram_mem_1_spinal_port1;
  assign t_ram_ramOut_2 = ram_popPtr_2;
  assign ram_ramOut_2 = ram_mem_2_spinal_port1;
  assign t_ram_ramOut_3 = ram_popPtr_3;
  assign ram_ramOut_3 = ram_mem_3_spinal_port1;
  assign t_ram_ramOut_4 = ram_popPtr_4;
  assign ram_ramOut_4 = ram_mem_4_spinal_port1;
  assign t_ram_ramOut_5 = ram_popPtr_5;
  assign ram_ramOut_5 = ram_mem_5_spinal_port1;
  assign t_ram_ramOut_6 = ram_popPtr_6;
  assign ram_ramOut_6 = ram_mem_6_spinal_port1;
  assign t_ram_ramOut_7 = ram_popPtr_7;
  assign ram_ramOut_7 = ram_mem_7_spinal_port1;
  assign t_ram_ramOut_8 = ram_popPtr_8;
  assign ram_ramOut_8 = ram_mem_8_spinal_port1;
  assign t_ram_ramOut_9 = ram_popPtr_9;
  assign ram_ramOut_9 = ram_mem_9_spinal_port1;
  assign t_ram_ramOut_10 = ram_popPtr_10;
  assign ram_ramOut_10 = ram_mem_10_spinal_port1;
  assign t_ram_ramOut_11 = ram_popPtr_11;
  assign ram_ramOut_11 = ram_mem_11_spinal_port1;
  assign t_ram_ramOut_12 = ram_popPtr_12;
  assign ram_ramOut_12 = ram_mem_12_spinal_port1;
  assign t_ram_ramOut_13 = ram_popPtr_13;
  assign ram_ramOut_13 = ram_mem_13_spinal_port1;
  assign t_ram_ramOut_14 = ram_popPtr_14;
  assign ram_ramOut_14 = ram_mem_14_spinal_port1;
  assign t_ram_ramOut_15 = ram_popPtr_15;
  assign ram_ramOut_15 = ram_mem_15_spinal_port1;
  assign popLtPush = (ptrPop_popPtr < ptrPush_pushPtr);
  always @(*) begin
    popPre_thrown_valid = popPre_valid;
    if(popStatus_throughToLn) begin
      popPre_thrown_valid = 1'b0;
    end
  end

  always @(*) begin
    popPre_ready = popPre_thrown_ready;
    if(popStatus_throughToLn) begin
      popPre_ready = 1'b1;
    end
  end

  always @(*) begin
    popPre_thrown_ready = popPrePipe_ready;
    if((! popPrePipe_valid)) begin
      popPre_thrown_ready = 1'b1;
    end
  end

  assign popPrePipe_valid = popPre_thrown_rValid;
  assign io_output_valid = popPrePipe_valid;
  assign popPrePipe_ready = io_output_ready;
  assign io_output_payload = {ram_ramOut_15,{ram_ramOut_14,{ram_ramOut_13,{ram_ramOut_12,{ram_ramOut_11,{ram_ramOut_10,{ram_ramOut_9,{ram_ramOut_8,{ram_ramOut_7,{ram_ramOut_6,{ram_ramOut_5,{ram_ramOut_4,{ram_ramOut_3,{ram_ramOut_2,{ram_ramOut_1,ram_ramOut_0}}}}}}}}}}}}}}};
  assign ptrPush_enPushCnt = validDly;
  assign popPre_fire = (popPre_valid && popPre_ready);
  assign ptrPop_enPopCnt = popPre_fire;
  always @(*) begin
    popPre_valid = 1'b0;
    if(ptrPop_popReuse) begin
      if(reusePushFinish) begin
        popPre_valid = 1'b1;
      end else begin
        popPre_valid = popLtPush;
      end
    end else begin
      if(popStatus_throughToLn) begin
        if(pushStatus_lnOut) begin
          popPre_valid = 1'b1;
        end else begin
          popPre_valid = popLtPush;
        end
      end
      if(popStatus_lnToLogits) begin
        if(pushStatus_tokenIn) begin
          popPre_valid = 1'b1;
        end else begin
          popPre_valid = popLtPush;
        end
      end
      if(popStatus_qToQK) begin
        popPre_valid = pushStatus_qkvOut;
      end
      if(popStatus_qkvToOutProj) begin
        popPre_valid = pushStatus_mlpLnOut;
      end
    end
  end

  assign ram_popEn_0 = lutInst_0_O;
  assign ram_popEn_1 = lutInst_1_O;
  assign ram_popEn_2 = lutInst_2_O;
  assign ram_popEn_3 = lutInst_3_O;
  assign ram_popEn_4 = lutInst_4_O;
  assign ram_popEn_5 = lutInst_5_O;
  assign ram_popEn_6 = lutInst_6_O;
  assign ram_popEn_7 = lutInst_7_O;
  assign ram_popEn_8 = lutInst_8_O;
  assign ram_popEn_9 = lutInst_9_O;
  assign ram_popEn_10 = lutInst_10_O;
  assign ram_popEn_11 = lutInst_11_O;
  assign ram_popEn_12 = lutInst_12_O;
  assign ram_popEn_13 = lutInst_13_O;
  assign ram_popEn_14 = lutInst_14_O;
  assign ram_popEn_15 = lutInst_15_O;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      validDly <= 1'b0;
      ptrPush_pushPackLen <= 5'h0;
      ptrPush_pushStartAt <= 5'h0;
      ptrPush_pushReuse <= 1'b0;
      ptrPush_pushPtr <= 5'h0;
      pushStatus_layerCnt <= 5'h0;
      pushStatus_lastLayer <= 1'b0;
      pushStatus_prefillFirstToken <= 1'b1;
      pushStatus_logitsGen <= 1'b0;
      pushStatus_tokenIn <= 1'b1;
      pushStatus_lnOut <= 1'b0;
      pushStatus_qRotateOut <= 1'b0;
      pushStatus_qkvOut <= 1'b0;
      pushStatus_mlpLnOut <= 1'b0;
      pushStatus_headCnt <= 5'h0;
      ptrPop_popPackLen <= 5'h0;
      ptrPop_popStartAt <= 5'h0;
      ptrPop_popPtr <= 5'h0;
      ptrPop_popReuse <= 1'b0;
      popStatus_layerCnt <= 5'h0;
      popStatus_lastLayer <= 1'b0;
      popStatus_prefillFirstToken <= 1'b1;
      popStatus_logitsGen <= 1'b0;
      popStatus_throughToLn <= 1'b1;
      popStatus_lnToLogits <= 1'b0;
      popStatus_reuseToQ <= 1'b0;
      popStatus_qToQK <= 1'b0;
      popStatus_reuseToK <= 1'b0;
      popStatus_reuseToV <= 1'b0;
      popStatus_qkvToOutProj <= 1'b0;
      popStatus_reuseToPredU <= 1'b0;
      popStatus_reuseToGate <= 1'b0;
      popStatus_reuseToUp <= 1'b0;
      popStatus_headCnt <= 5'h0;
      ram_pushEn_0 <= 1'b0;
      ram_pushEn_1 <= 1'b0;
      ram_pushEn_2 <= 1'b0;
      ram_pushEn_3 <= 1'b0;
      ram_pushEn_4 <= 1'b0;
      ram_pushEn_5 <= 1'b0;
      ram_pushEn_6 <= 1'b0;
      ram_pushEn_7 <= 1'b0;
      ram_pushEn_8 <= 1'b0;
      ram_pushEn_9 <= 1'b0;
      ram_pushEn_10 <= 1'b0;
      ram_pushEn_11 <= 1'b0;
      ram_pushEn_12 <= 1'b0;
      ram_pushEn_13 <= 1'b0;
      ram_pushEn_14 <= 1'b0;
      ram_pushEn_15 <= 1'b0;
      ram_pushPtrLow_0 <= 5'h0;
      ram_pushPtrLow_1 <= 5'h0;
      ram_pushPtrLow_2 <= 5'h0;
      ram_pushPtrLow_3 <= 5'h0;
      ram_pushPtrLow_4 <= 5'h0;
      ram_pushPtrLow_5 <= 5'h0;
      ram_pushPtrLow_6 <= 5'h0;
      ram_pushPtrLow_7 <= 5'h0;
      ram_pushPtrLow_8 <= 5'h0;
      ram_pushPtrLow_9 <= 5'h0;
      ram_pushPtrLow_10 <= 5'h0;
      ram_pushPtrLow_11 <= 5'h0;
      ram_pushPtrLow_12 <= 5'h0;
      ram_pushPtrLow_13 <= 5'h0;
      ram_pushPtrLow_14 <= 5'h0;
      ram_pushPtrLow_15 <= 5'h0;
      ram_pushPtrMsb_0 <= 1'b0;
      ram_pushPtrMsb_1 <= 1'b0;
      ram_pushPtrMsb_2 <= 1'b0;
      ram_pushPtrMsb_3 <= 1'b0;
      ram_pushPtrMsb_4 <= 1'b0;
      ram_pushPtrMsb_5 <= 1'b0;
      ram_pushPtrMsb_6 <= 1'b0;
      ram_pushPtrMsb_7 <= 1'b0;
      ram_pushPtrMsb_8 <= 1'b0;
      ram_pushPtrMsb_9 <= 1'b0;
      ram_pushPtrMsb_10 <= 1'b0;
      ram_pushPtrMsb_11 <= 1'b0;
      ram_pushPtrMsb_12 <= 1'b0;
      ram_pushPtrMsb_13 <= 1'b0;
      ram_pushPtrMsb_14 <= 1'b0;
      ram_pushPtrMsb_15 <= 1'b0;
      ram_popPtrLow_0 <= 5'h0;
      ram_popPtrLow_1 <= 5'h0;
      ram_popPtrLow_2 <= 5'h0;
      ram_popPtrLow_3 <= 5'h0;
      ram_popPtrLow_4 <= 5'h0;
      ram_popPtrLow_5 <= 5'h0;
      ram_popPtrLow_6 <= 5'h0;
      ram_popPtrLow_7 <= 5'h0;
      ram_popPtrLow_8 <= 5'h0;
      ram_popPtrLow_9 <= 5'h0;
      ram_popPtrLow_10 <= 5'h0;
      ram_popPtrLow_11 <= 5'h0;
      ram_popPtrLow_12 <= 5'h0;
      ram_popPtrLow_13 <= 5'h0;
      ram_popPtrLow_14 <= 5'h0;
      ram_popPtrLow_15 <= 5'h0;
      ram_popPtrMsb_0 <= 1'b0;
      ram_popPtrMsb_1 <= 1'b0;
      ram_popPtrMsb_2 <= 1'b0;
      ram_popPtrMsb_3 <= 1'b0;
      ram_popPtrMsb_4 <= 1'b0;
      ram_popPtrMsb_5 <= 1'b0;
      ram_popPtrMsb_6 <= 1'b0;
      ram_popPtrMsb_7 <= 1'b0;
      ram_popPtrMsb_8 <= 1'b0;
      ram_popPtrMsb_9 <= 1'b0;
      ram_popPtrMsb_10 <= 1'b0;
      ram_popPtrMsb_11 <= 1'b0;
      ram_popPtrMsb_12 <= 1'b0;
      ram_popPtrMsb_13 <= 1'b0;
      ram_popPtrMsb_14 <= 1'b0;
      ram_popPtrMsb_15 <= 1'b0;
      reusePushFinish <= 1'b0;
      popPre_thrown_rValid <= 1'b0;
    end else begin
      validDly <= io_input_valid;
      ptrPush_pushPtr <= ptrPush_pushNext;
      ptrPush_pushReuse <= ptrPush_pushReuseNext;
      ptrPush_pushStartAt <= ptrPush_pushStartAtNext;
      if(pushStatus_enLayerCntInc) begin
        pushStatus_layerCnt <= (pushStatus_layerCnt + 5'h01);
        if(pushStatus_layerCntAbout2Ovf) begin
          pushStatus_lastLayer <= 1'b1;
        end
        if(pushStatus_lastLayer) begin
          pushStatus_layerCnt <= 5'h0;
          pushStatus_lastLayer <= 1'b0;
        end
      end
      if(vecBuf_pushStatus_prefillIn_fifo_io_pop_fire) begin
        pushStatus_prefillFirstToken <= 1'b0;
      end
      if((vecBuf_pushStatus_prefillIn_fifo_io_pop_fire && (! pushStatus_prefillIn_fifo_io_pop_payload))) begin
        pushStatus_logitsGen <= 1'b1;
      end
      pushStatus_headCnt <= pushStatus_headCntNext;
      if(t_when) begin
        pushStatus_tokenIn <= 1'b0;
        pushStatus_lnOut <= 1'b1;
        ptrPush_pushPackLen <= (pushStatus_logitsGen ? 5'h0f : 5'h1f);
      end
      if(t_when_1) begin
        pushStatus_lnOut <= 1'b0;
        if(t_when_2) begin
          pushStatus_tokenIn <= 1'b1;
          ptrPush_pushPackLen <= 5'h0;
        end else begin
          if(pushStatus_prefillFirstToken) begin
            pushStatus_qkvOut <= 1'b1;
            ptrPush_pushPackLen <= pushStatus_headCntNextInc;
          end else begin
            if(pushStatus_logitsGen) begin
              pushStatus_tokenIn <= 1'b1;
              ptrPush_pushPackLen <= 5'h0;
            end else begin
              pushStatus_qRotateOut <= 1'b1;
              ptrPush_pushPackLen <= 5'h0;
            end
          end
        end
      end
      if(t_when_3) begin
        pushStatus_qRotateOut <= 1'b0;
        pushStatus_qkvOut <= 1'b1;
        ptrPush_pushPackLen <= pushStatus_headCntNextInc;
      end
      if(t_when_4) begin
        if(pushStatus_prefillFirstToken) begin
          ptrPush_pushPackLen <= pushStatus_headCntNextInc;
        end else begin
          pushStatus_qkvOut <= 1'b0;
          pushStatus_qRotateOut <= 1'b1;
          ptrPush_pushPackLen <= 5'h0;
        end
        if(pushStatus_headCntOvf) begin
          pushStatus_qkvOut <= 1'b0;
          pushStatus_qRotateOut <= 1'b0;
          pushStatus_mlpLnOut <= 1'b1;
          ptrPush_pushPackLen <= 5'h0f;
        end
      end
      if(t_when_5) begin
        pushStatus_mlpLnOut <= 1'b0;
        pushStatus_tokenIn <= 1'b1;
        ptrPush_pushPackLen <= 5'h0;
      end
      if((pushStatus_lnOut && pushStatus_stateTrig)) begin
        pushStatus_logitsGen <= 1'b0;
      end
      ptrPop_popPtr <= ptrPop_popNext;
      ptrPop_popReuse <= ptrPop_popReuseNext;
      ptrPop_popStartAt <= ptrPop_popStartAtNext;
      if(popStatus_enLayerCntInc) begin
        popStatus_layerCnt <= (popStatus_layerCnt + 5'h01);
        if(popStatus_layerCntAbout2Ovf) begin
          popStatus_lastLayer <= 1'b1;
        end
        if(popStatus_lastLayer) begin
          popStatus_layerCnt <= 5'h0;
          popStatus_lastLayer <= 1'b0;
        end
      end
      if(vecBuf_popStatus_prefillIn_fifo_io_pop_fire) begin
        popStatus_prefillFirstToken <= 1'b0;
      end
      if((vecBuf_popStatus_prefillIn_fifo_io_pop_fire && (! popStatus_prefillIn_fifo_io_pop_payload))) begin
        popStatus_logitsGen <= 1'b1;
      end
      if(t_when_6) begin
        popStatus_throughToLn <= 1'b0;
        if(popStatus_logitsGen) begin
          popStatus_lnToLogits <= 1'b1;
          ptrPop_popPackLen <= 5'h0f;
        end else begin
          if(popStatus_prefillCond) begin
            popStatus_reuseToK <= 1'b1;
            ptrPop_popPackLen <= 5'h1f;
          end else begin
            popStatus_reuseToQ <= 1'b1;
            ptrPop_popPackLen <= 5'h1f;
          end
        end
      end
      if(t_when_7) begin
        popStatus_lnToLogits <= 1'b0;
        popStatus_throughToLn <= 1'b1;
        ptrPop_popPackLen <= 5'h0;
      end
      if(t_when_8) begin
        popStatus_reuseToQ <= 1'b0;
        popStatus_reuseToK <= 1'b1;
        ptrPop_popPackLen <= 5'h1f;
      end
      if(t_when_9) begin
        popStatus_reuseToK <= 1'b0;
        if(popStatus_prefillCond) begin
          popStatus_reuseToV <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end else begin
          popStatus_qToQK <= 1'b1;
          ptrPop_popPackLen <= 5'h0;
        end
      end
      if(t_when_10) begin
        popStatus_qToQK <= 1'b0;
        popStatus_reuseToV <= 1'b1;
        ptrPop_popPackLen <= 5'h1f;
      end
      if(t_when_11) begin
        popStatus_reuseToV <= 1'b0;
        popStatus_headCnt <= popStatus_headCntNext;
        if(popStatus_prefillCond) begin
          popStatus_reuseToK <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end else begin
          popStatus_reuseToQ <= 1'b1;
          ptrPop_popPackLen <= 5'h1f;
        end
        if(popStatus_headCntOvf) begin
          popStatus_headCnt <= 5'h0;
          popStatus_reuseToQ <= 1'b0;
          popStatus_reuseToK <= 1'b0;
          if(t_when_12) begin
            popStatus_throughToLn <= 1'b1;
            ptrPop_popPackLen <= 5'h0;
          end else begin
            popStatus_qkvToOutProj <= 1'b1;
            ptrPop_popPackLen <= 5'h10;
          end
        end
      end
      if(t_when_13) begin
        popStatus_qkvToOutProj <= 1'b0;
        if(status_enPredictor) begin
          popStatus_reuseToPredU <= 1'b1;
        end else begin
          popStatus_reuseToGate <= 1'b1;
        end
        ptrPop_popPackLen <= 5'h0f;
      end
      if((popStatus_reuseToPredU && popStatus_stateTrig)) begin
        popStatus_reuseToPredU <= 1'b0;
        popStatus_reuseToGate <= 1'b1;
      end
      if((popStatus_reuseToGate && popStatus_stateTrig)) begin
        popStatus_reuseToGate <= 1'b0;
        popStatus_reuseToUp <= 1'b1;
      end
      if(t_when_14) begin
        popStatus_reuseToUp <= 1'b0;
        popStatus_throughToLn <= 1'b1;
        ptrPop_popPackLen <= 5'h0;
      end
      if((popStatus_lnToLogits && popStatus_stateTrig)) begin
        popStatus_logitsGen <= 1'b0;
      end
      if((pushStatus_stateTrig && ((pushStatus_lnOut && (! pushStatus_logitsGen)) || pushStatus_mlpLnOut))) begin
        reusePushFinish <= 1'b1;
      end
      if((popStatus_stateTrig && ((popStatus_reuseToV && popStatus_headCntOvf) || popStatus_reuseToUp))) begin
        reusePushFinish <= 1'b0;
      end
      if(popPre_thrown_ready) begin
        popPre_thrown_rValid <= popPre_thrown_valid;
      end
      ram_pushEn_0 <= io_input_valid;
      ram_pushEn_1 <= io_input_valid;
      ram_pushEn_2 <= io_input_valid;
      ram_pushEn_3 <= io_input_valid;
      ram_pushEn_4 <= io_input_valid;
      ram_pushEn_5 <= io_input_valid;
      ram_pushEn_6 <= io_input_valid;
      ram_pushEn_7 <= io_input_valid;
      ram_pushEn_8 <= io_input_valid;
      ram_pushEn_9 <= io_input_valid;
      ram_pushEn_10 <= io_input_valid;
      ram_pushEn_11 <= io_input_valid;
      ram_pushEn_12 <= io_input_valid;
      ram_pushEn_13 <= io_input_valid;
      ram_pushEn_14 <= io_input_valid;
      ram_pushEn_15 <= io_input_valid;
      ram_pushPtrLow_0 <= ptrPush_pushNext;
      ram_pushPtrLow_1 <= ptrPush_pushNext;
      ram_pushPtrLow_2 <= ptrPush_pushNext;
      ram_pushPtrLow_3 <= ptrPush_pushNext;
      ram_pushPtrLow_4 <= ptrPush_pushNext;
      ram_pushPtrLow_5 <= ptrPush_pushNext;
      ram_pushPtrLow_6 <= ptrPush_pushNext;
      ram_pushPtrLow_7 <= ptrPush_pushNext;
      ram_pushPtrLow_8 <= ptrPush_pushNext;
      ram_pushPtrLow_9 <= ptrPush_pushNext;
      ram_pushPtrLow_10 <= ptrPush_pushNext;
      ram_pushPtrLow_11 <= ptrPush_pushNext;
      ram_pushPtrLow_12 <= ptrPush_pushNext;
      ram_pushPtrLow_13 <= ptrPush_pushNext;
      ram_pushPtrLow_14 <= ptrPush_pushNext;
      ram_pushPtrLow_15 <= ptrPush_pushNext;
      ram_pushPtrMsb_0 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_1 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_2 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_3 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_4 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_5 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_6 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_7 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_8 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_9 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_10 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_11 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_12 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_13 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_14 <= ptrPush_pushReuseNext;
      ram_pushPtrMsb_15 <= ptrPush_pushReuseNext;
      ram_popPtrLow_0 <= ptrPop_popNext;
      ram_popPtrLow_1 <= ptrPop_popNext;
      ram_popPtrLow_2 <= ptrPop_popNext;
      ram_popPtrLow_3 <= ptrPop_popNext;
      ram_popPtrLow_4 <= ptrPop_popNext;
      ram_popPtrLow_5 <= ptrPop_popNext;
      ram_popPtrLow_6 <= ptrPop_popNext;
      ram_popPtrLow_7 <= ptrPop_popNext;
      ram_popPtrLow_8 <= ptrPop_popNext;
      ram_popPtrLow_9 <= ptrPop_popNext;
      ram_popPtrLow_10 <= ptrPop_popNext;
      ram_popPtrLow_11 <= ptrPop_popNext;
      ram_popPtrLow_12 <= ptrPop_popNext;
      ram_popPtrLow_13 <= ptrPop_popNext;
      ram_popPtrLow_14 <= ptrPop_popNext;
      ram_popPtrLow_15 <= ptrPop_popNext;
      ram_popPtrMsb_0 <= ptrPop_popReuseNext;
      ram_popPtrMsb_1 <= ptrPop_popReuseNext;
      ram_popPtrMsb_2 <= ptrPop_popReuseNext;
      ram_popPtrMsb_3 <= ptrPop_popReuseNext;
      ram_popPtrMsb_4 <= ptrPop_popReuseNext;
      ram_popPtrMsb_5 <= ptrPop_popReuseNext;
      ram_popPtrMsb_6 <= ptrPop_popReuseNext;
      ram_popPtrMsb_7 <= ptrPop_popReuseNext;
      ram_popPtrMsb_8 <= ptrPop_popReuseNext;
      ram_popPtrMsb_9 <= ptrPop_popReuseNext;
      ram_popPtrMsb_10 <= ptrPop_popReuseNext;
      ram_popPtrMsb_11 <= ptrPop_popReuseNext;
      ram_popPtrMsb_12 <= ptrPop_popReuseNext;
      ram_popPtrMsb_13 <= ptrPop_popReuseNext;
      ram_popPtrMsb_14 <= ptrPop_popReuseNext;
      ram_popPtrMsb_15 <= ptrPop_popReuseNext;
    end
  end

  always @(posedge clk_0_clk) begin
    dataDly <= io_input_tdata;
  end


endmodule

module Parallel2Serial_1 (
  input  wire          io_input_valid,
  output wire          io_input_ready,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [6:0]    t_t_output_payload_1;
  wire       [0:0]    t_t_output_payload_1_1;
  reg        [15:0]   t_output_payload_4;
  wire                input_valid;
  wire                input_ready;
  wire       [2047:0] input_payload;
  wire                output_valid;
  wire                output_ready;
  wire       [15:0]   output_payload;
  wire                output_fire;
  reg                 t_output_payload;
  reg        [6:0]    t_output_payload_1;
  reg        [6:0]    t_output_payload_2;
  wire                t_input_ready;
  wire       [2047:0] t_output_payload_3;

  assign t_t_output_payload_1_1 = t_output_payload;
  assign t_t_output_payload_1 = {6'd0, t_t_output_payload_1_1};
  always @(*) begin
    case(t_output_payload_2)
      7'b0000000 : t_output_payload_4 = t_output_payload_3[15 : 0];
      7'b0000001 : t_output_payload_4 = t_output_payload_3[31 : 16];
      7'b0000010 : t_output_payload_4 = t_output_payload_3[47 : 32];
      7'b0000011 : t_output_payload_4 = t_output_payload_3[63 : 48];
      7'b0000100 : t_output_payload_4 = t_output_payload_3[79 : 64];
      7'b0000101 : t_output_payload_4 = t_output_payload_3[95 : 80];
      7'b0000110 : t_output_payload_4 = t_output_payload_3[111 : 96];
      7'b0000111 : t_output_payload_4 = t_output_payload_3[127 : 112];
      7'b0001000 : t_output_payload_4 = t_output_payload_3[143 : 128];
      7'b0001001 : t_output_payload_4 = t_output_payload_3[159 : 144];
      7'b0001010 : t_output_payload_4 = t_output_payload_3[175 : 160];
      7'b0001011 : t_output_payload_4 = t_output_payload_3[191 : 176];
      7'b0001100 : t_output_payload_4 = t_output_payload_3[207 : 192];
      7'b0001101 : t_output_payload_4 = t_output_payload_3[223 : 208];
      7'b0001110 : t_output_payload_4 = t_output_payload_3[239 : 224];
      7'b0001111 : t_output_payload_4 = t_output_payload_3[255 : 240];
      7'b0010000 : t_output_payload_4 = t_output_payload_3[271 : 256];
      7'b0010001 : t_output_payload_4 = t_output_payload_3[287 : 272];
      7'b0010010 : t_output_payload_4 = t_output_payload_3[303 : 288];
      7'b0010011 : t_output_payload_4 = t_output_payload_3[319 : 304];
      7'b0010100 : t_output_payload_4 = t_output_payload_3[335 : 320];
      7'b0010101 : t_output_payload_4 = t_output_payload_3[351 : 336];
      7'b0010110 : t_output_payload_4 = t_output_payload_3[367 : 352];
      7'b0010111 : t_output_payload_4 = t_output_payload_3[383 : 368];
      7'b0011000 : t_output_payload_4 = t_output_payload_3[399 : 384];
      7'b0011001 : t_output_payload_4 = t_output_payload_3[415 : 400];
      7'b0011010 : t_output_payload_4 = t_output_payload_3[431 : 416];
      7'b0011011 : t_output_payload_4 = t_output_payload_3[447 : 432];
      7'b0011100 : t_output_payload_4 = t_output_payload_3[463 : 448];
      7'b0011101 : t_output_payload_4 = t_output_payload_3[479 : 464];
      7'b0011110 : t_output_payload_4 = t_output_payload_3[495 : 480];
      7'b0011111 : t_output_payload_4 = t_output_payload_3[511 : 496];
      7'b0100000 : t_output_payload_4 = t_output_payload_3[527 : 512];
      7'b0100001 : t_output_payload_4 = t_output_payload_3[543 : 528];
      7'b0100010 : t_output_payload_4 = t_output_payload_3[559 : 544];
      7'b0100011 : t_output_payload_4 = t_output_payload_3[575 : 560];
      7'b0100100 : t_output_payload_4 = t_output_payload_3[591 : 576];
      7'b0100101 : t_output_payload_4 = t_output_payload_3[607 : 592];
      7'b0100110 : t_output_payload_4 = t_output_payload_3[623 : 608];
      7'b0100111 : t_output_payload_4 = t_output_payload_3[639 : 624];
      7'b0101000 : t_output_payload_4 = t_output_payload_3[655 : 640];
      7'b0101001 : t_output_payload_4 = t_output_payload_3[671 : 656];
      7'b0101010 : t_output_payload_4 = t_output_payload_3[687 : 672];
      7'b0101011 : t_output_payload_4 = t_output_payload_3[703 : 688];
      7'b0101100 : t_output_payload_4 = t_output_payload_3[719 : 704];
      7'b0101101 : t_output_payload_4 = t_output_payload_3[735 : 720];
      7'b0101110 : t_output_payload_4 = t_output_payload_3[751 : 736];
      7'b0101111 : t_output_payload_4 = t_output_payload_3[767 : 752];
      7'b0110000 : t_output_payload_4 = t_output_payload_3[783 : 768];
      7'b0110001 : t_output_payload_4 = t_output_payload_3[799 : 784];
      7'b0110010 : t_output_payload_4 = t_output_payload_3[815 : 800];
      7'b0110011 : t_output_payload_4 = t_output_payload_3[831 : 816];
      7'b0110100 : t_output_payload_4 = t_output_payload_3[847 : 832];
      7'b0110101 : t_output_payload_4 = t_output_payload_3[863 : 848];
      7'b0110110 : t_output_payload_4 = t_output_payload_3[879 : 864];
      7'b0110111 : t_output_payload_4 = t_output_payload_3[895 : 880];
      7'b0111000 : t_output_payload_4 = t_output_payload_3[911 : 896];
      7'b0111001 : t_output_payload_4 = t_output_payload_3[927 : 912];
      7'b0111010 : t_output_payload_4 = t_output_payload_3[943 : 928];
      7'b0111011 : t_output_payload_4 = t_output_payload_3[959 : 944];
      7'b0111100 : t_output_payload_4 = t_output_payload_3[975 : 960];
      7'b0111101 : t_output_payload_4 = t_output_payload_3[991 : 976];
      7'b0111110 : t_output_payload_4 = t_output_payload_3[1007 : 992];
      7'b0111111 : t_output_payload_4 = t_output_payload_3[1023 : 1008];
      7'b1000000 : t_output_payload_4 = t_output_payload_3[1039 : 1024];
      7'b1000001 : t_output_payload_4 = t_output_payload_3[1055 : 1040];
      7'b1000010 : t_output_payload_4 = t_output_payload_3[1071 : 1056];
      7'b1000011 : t_output_payload_4 = t_output_payload_3[1087 : 1072];
      7'b1000100 : t_output_payload_4 = t_output_payload_3[1103 : 1088];
      7'b1000101 : t_output_payload_4 = t_output_payload_3[1119 : 1104];
      7'b1000110 : t_output_payload_4 = t_output_payload_3[1135 : 1120];
      7'b1000111 : t_output_payload_4 = t_output_payload_3[1151 : 1136];
      7'b1001000 : t_output_payload_4 = t_output_payload_3[1167 : 1152];
      7'b1001001 : t_output_payload_4 = t_output_payload_3[1183 : 1168];
      7'b1001010 : t_output_payload_4 = t_output_payload_3[1199 : 1184];
      7'b1001011 : t_output_payload_4 = t_output_payload_3[1215 : 1200];
      7'b1001100 : t_output_payload_4 = t_output_payload_3[1231 : 1216];
      7'b1001101 : t_output_payload_4 = t_output_payload_3[1247 : 1232];
      7'b1001110 : t_output_payload_4 = t_output_payload_3[1263 : 1248];
      7'b1001111 : t_output_payload_4 = t_output_payload_3[1279 : 1264];
      7'b1010000 : t_output_payload_4 = t_output_payload_3[1295 : 1280];
      7'b1010001 : t_output_payload_4 = t_output_payload_3[1311 : 1296];
      7'b1010010 : t_output_payload_4 = t_output_payload_3[1327 : 1312];
      7'b1010011 : t_output_payload_4 = t_output_payload_3[1343 : 1328];
      7'b1010100 : t_output_payload_4 = t_output_payload_3[1359 : 1344];
      7'b1010101 : t_output_payload_4 = t_output_payload_3[1375 : 1360];
      7'b1010110 : t_output_payload_4 = t_output_payload_3[1391 : 1376];
      7'b1010111 : t_output_payload_4 = t_output_payload_3[1407 : 1392];
      7'b1011000 : t_output_payload_4 = t_output_payload_3[1423 : 1408];
      7'b1011001 : t_output_payload_4 = t_output_payload_3[1439 : 1424];
      7'b1011010 : t_output_payload_4 = t_output_payload_3[1455 : 1440];
      7'b1011011 : t_output_payload_4 = t_output_payload_3[1471 : 1456];
      7'b1011100 : t_output_payload_4 = t_output_payload_3[1487 : 1472];
      7'b1011101 : t_output_payload_4 = t_output_payload_3[1503 : 1488];
      7'b1011110 : t_output_payload_4 = t_output_payload_3[1519 : 1504];
      7'b1011111 : t_output_payload_4 = t_output_payload_3[1535 : 1520];
      7'b1100000 : t_output_payload_4 = t_output_payload_3[1551 : 1536];
      7'b1100001 : t_output_payload_4 = t_output_payload_3[1567 : 1552];
      7'b1100010 : t_output_payload_4 = t_output_payload_3[1583 : 1568];
      7'b1100011 : t_output_payload_4 = t_output_payload_3[1599 : 1584];
      7'b1100100 : t_output_payload_4 = t_output_payload_3[1615 : 1600];
      7'b1100101 : t_output_payload_4 = t_output_payload_3[1631 : 1616];
      7'b1100110 : t_output_payload_4 = t_output_payload_3[1647 : 1632];
      7'b1100111 : t_output_payload_4 = t_output_payload_3[1663 : 1648];
      7'b1101000 : t_output_payload_4 = t_output_payload_3[1679 : 1664];
      7'b1101001 : t_output_payload_4 = t_output_payload_3[1695 : 1680];
      7'b1101010 : t_output_payload_4 = t_output_payload_3[1711 : 1696];
      7'b1101011 : t_output_payload_4 = t_output_payload_3[1727 : 1712];
      7'b1101100 : t_output_payload_4 = t_output_payload_3[1743 : 1728];
      7'b1101101 : t_output_payload_4 = t_output_payload_3[1759 : 1744];
      7'b1101110 : t_output_payload_4 = t_output_payload_3[1775 : 1760];
      7'b1101111 : t_output_payload_4 = t_output_payload_3[1791 : 1776];
      7'b1110000 : t_output_payload_4 = t_output_payload_3[1807 : 1792];
      7'b1110001 : t_output_payload_4 = t_output_payload_3[1823 : 1808];
      7'b1110010 : t_output_payload_4 = t_output_payload_3[1839 : 1824];
      7'b1110011 : t_output_payload_4 = t_output_payload_3[1855 : 1840];
      7'b1110100 : t_output_payload_4 = t_output_payload_3[1871 : 1856];
      7'b1110101 : t_output_payload_4 = t_output_payload_3[1887 : 1872];
      7'b1110110 : t_output_payload_4 = t_output_payload_3[1903 : 1888];
      7'b1110111 : t_output_payload_4 = t_output_payload_3[1919 : 1904];
      7'b1111000 : t_output_payload_4 = t_output_payload_3[1935 : 1920];
      7'b1111001 : t_output_payload_4 = t_output_payload_3[1951 : 1936];
      7'b1111010 : t_output_payload_4 = t_output_payload_3[1967 : 1952];
      7'b1111011 : t_output_payload_4 = t_output_payload_3[1983 : 1968];
      7'b1111100 : t_output_payload_4 = t_output_payload_3[1999 : 1984];
      7'b1111101 : t_output_payload_4 = t_output_payload_3[2015 : 2000];
      7'b1111110 : t_output_payload_4 = t_output_payload_3[2031 : 2016];
      default : t_output_payload_4 = t_output_payload_3[2047 : 2032];
    endcase
  end

  assign input_valid = io_input_valid;
  assign io_input_ready = input_ready;
  assign input_payload = io_input_tdata;
  assign output_fire = (output_valid && output_ready);
  always @(*) begin
    t_output_payload = 1'b0;
    if(output_fire) begin
      t_output_payload = 1'b1;
    end
  end

  assign t_input_ready = (t_output_payload_2 == 7'h7f);
  always @(*) begin
    t_output_payload_1 = (t_output_payload_2 + t_t_output_payload_1);
    if(1'b0) begin
      t_output_payload_1 = 7'h0;
    end
  end

  assign output_valid = input_valid;
  assign t_output_payload_3 = input_payload;
  assign output_payload = t_output_payload_4;
  assign input_ready = (output_ready && t_input_ready);
  assign output_ready = 1'b1;
  assign io_output_valid = output_valid;
  assign io_output_tdata = output_payload;
  assign io_output_tuser = io_input_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      t_output_payload_2 <= 7'h0;
    end else begin
      t_output_payload_2 <= t_output_payload_1;
    end
  end


endmodule

module StreamAxiFrameFifo_1 (
  input  wire          io_input_valid,
  output wire          io_input_ready,
  input  wire [2047:0] io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [2047:0] io_output_tdata,
  output wire [5:0]    io_output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                largeBankFifo_12_io_push_ready;
  wire                largeBankFifo_12_io_pop_valid;
  wire       [2047:0] largeBankFifo_12_io_pop_payload;
  wire       [5:0]    largeBankFifo_12_io_occupancy;
  wire       [5:0]    largeBankFifo_12_io_availability;
  wire                streamFifo_144_io_push_ready;
  wire                streamFifo_144_io_pop_valid;
  wire       [5:0]    streamFifo_144_io_pop_payload;
  wire       [5:0]    streamFifo_144_io_occupancy;
  wire       [5:0]    streamFifo_144_io_availability;

  LargeBankFifo_11 largeBankFifo_12 (
    .io_push_valid   (io_input_valid                         ), //i
    .io_push_ready   (largeBankFifo_12_io_push_ready         ), //o
    .io_push_payload (io_input_tdata[2047:0]                 ), //i
    .io_pop_valid    (largeBankFifo_12_io_pop_valid          ), //o
    .io_pop_ready    (io_output_ready                        ), //i
    .io_pop_payload  (largeBankFifo_12_io_pop_payload[2047:0]), //o
    .io_occupancy    (largeBankFifo_12_io_occupancy[5:0]     ), //o
    .io_availability (largeBankFifo_12_io_availability[5:0]  ), //o
    .clk_0_clk       (clk_0_clk                              ), //i
    .clk_0_resetn    (clk_0_resetn                           )  //i
  );
  StreamFifo_105 streamFifo_144 (
    .io_push_valid   (io_input_valid                     ), //i
    .io_push_ready   (streamFifo_144_io_push_ready       ), //o
    .io_push_payload (io_input_tuser[5:0]                ), //i
    .io_pop_valid    (streamFifo_144_io_pop_valid        ), //o
    .io_pop_ready    (io_output_ready                    ), //i
    .io_pop_payload  (streamFifo_144_io_pop_payload[5:0] ), //o
    .io_flush        (1'b0                               ), //i
    .io_occupancy    (streamFifo_144_io_occupancy[5:0]   ), //o
    .io_availability (streamFifo_144_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                          ), //i
    .clk_0_resetn    (clk_0_resetn                       )  //i
  );
  assign io_input_ready = largeBankFifo_12_io_push_ready;
  assign io_output_valid = largeBankFifo_12_io_pop_valid;
  assign io_output_tdata = largeBankFifo_12_io_pop_payload;
  assign io_output_tuser = streamFifo_144_io_pop_payload;

endmodule

//LargeBankFifo_6 replaced by LargeBankFifo_11

module Int4Int8FP16Conv_1 (
  input  wire          selInt8,
  input  wire          inputData_tvalid,
  input  wire [511:0]  inputData_tdata,
  input  wire          zeroInt4_tvalid,
  output wire          zeroInt4_tready,
  input  wire [7:0]    zeroInt4_tdata,
  input  wire          zeroInt8_tvalid,
  output wire          zeroInt8_tready,
  input  wire [7:0]    zeroInt8_tdata,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [0:0]    zeroMux_io_select;
  wire                zeroMux_io_inputs_0_ready;
  wire                zeroMux_io_inputs_1_ready;
  wire                zeroMux_io_output_valid;
  wire       [7:0]    zeroMux_io_output_payload;
  wire                d_0_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_0_from_ip_m_axis_result_tdata;
  wire                d_1_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_1_from_ip_m_axis_result_tdata;
  wire                d_2_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_2_from_ip_m_axis_result_tdata;
  wire                d_3_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_3_from_ip_m_axis_result_tdata;
  wire                d_4_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_4_from_ip_m_axis_result_tdata;
  wire                d_5_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_5_from_ip_m_axis_result_tdata;
  wire                d_6_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_6_from_ip_m_axis_result_tdata;
  wire                d_7_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_7_from_ip_m_axis_result_tdata;
  wire                d_8_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_8_from_ip_m_axis_result_tdata;
  wire                d_9_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_9_from_ip_m_axis_result_tdata;
  wire                d_10_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_10_from_ip_m_axis_result_tdata;
  wire                d_11_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_11_from_ip_m_axis_result_tdata;
  wire                d_12_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_12_from_ip_m_axis_result_tdata;
  wire                d_13_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_13_from_ip_m_axis_result_tdata;
  wire                d_14_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_14_from_ip_m_axis_result_tdata;
  wire                d_15_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_15_from_ip_m_axis_result_tdata;
  wire                d_16_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_16_from_ip_m_axis_result_tdata;
  wire                d_17_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_17_from_ip_m_axis_result_tdata;
  wire                d_18_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_18_from_ip_m_axis_result_tdata;
  wire                d_19_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_19_from_ip_m_axis_result_tdata;
  wire                d_20_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_20_from_ip_m_axis_result_tdata;
  wire                d_21_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_21_from_ip_m_axis_result_tdata;
  wire                d_22_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_22_from_ip_m_axis_result_tdata;
  wire                d_23_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_23_from_ip_m_axis_result_tdata;
  wire                d_24_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_24_from_ip_m_axis_result_tdata;
  wire                d_25_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_25_from_ip_m_axis_result_tdata;
  wire                d_26_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_26_from_ip_m_axis_result_tdata;
  wire                d_27_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_27_from_ip_m_axis_result_tdata;
  wire                d_28_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_28_from_ip_m_axis_result_tdata;
  wire                d_29_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_29_from_ip_m_axis_result_tdata;
  wire                d_30_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_30_from_ip_m_axis_result_tdata;
  wire                d_31_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_31_from_ip_m_axis_result_tdata;
  wire                d_32_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_32_from_ip_m_axis_result_tdata;
  wire                d_33_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_33_from_ip_m_axis_result_tdata;
  wire                d_34_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_34_from_ip_m_axis_result_tdata;
  wire                d_35_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_35_from_ip_m_axis_result_tdata;
  wire                d_36_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_36_from_ip_m_axis_result_tdata;
  wire                d_37_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_37_from_ip_m_axis_result_tdata;
  wire                d_38_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_38_from_ip_m_axis_result_tdata;
  wire                d_39_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_39_from_ip_m_axis_result_tdata;
  wire                d_40_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_40_from_ip_m_axis_result_tdata;
  wire                d_41_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_41_from_ip_m_axis_result_tdata;
  wire                d_42_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_42_from_ip_m_axis_result_tdata;
  wire                d_43_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_43_from_ip_m_axis_result_tdata;
  wire                d_44_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_44_from_ip_m_axis_result_tdata;
  wire                d_45_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_45_from_ip_m_axis_result_tdata;
  wire                d_46_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_46_from_ip_m_axis_result_tdata;
  wire                d_47_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_47_from_ip_m_axis_result_tdata;
  wire                d_48_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_48_from_ip_m_axis_result_tdata;
  wire                d_49_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_49_from_ip_m_axis_result_tdata;
  wire                d_50_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_50_from_ip_m_axis_result_tdata;
  wire                d_51_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_51_from_ip_m_axis_result_tdata;
  wire                d_52_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_52_from_ip_m_axis_result_tdata;
  wire                d_53_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_53_from_ip_m_axis_result_tdata;
  wire                d_54_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_54_from_ip_m_axis_result_tdata;
  wire                d_55_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_55_from_ip_m_axis_result_tdata;
  wire                d_56_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_56_from_ip_m_axis_result_tdata;
  wire                d_57_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_57_from_ip_m_axis_result_tdata;
  wire                d_58_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_58_from_ip_m_axis_result_tdata;
  wire                d_59_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_59_from_ip_m_axis_result_tdata;
  wire                d_60_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_60_from_ip_m_axis_result_tdata;
  wire                d_61_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_61_from_ip_m_axis_result_tdata;
  wire                d_62_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_62_from_ip_m_axis_result_tdata;
  wire                d_63_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_63_from_ip_m_axis_result_tdata;
  wire                d_64_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_64_from_ip_m_axis_result_tdata;
  wire                d_65_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_65_from_ip_m_axis_result_tdata;
  wire                d_66_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_66_from_ip_m_axis_result_tdata;
  wire                d_67_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_67_from_ip_m_axis_result_tdata;
  wire                d_68_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_68_from_ip_m_axis_result_tdata;
  wire                d_69_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_69_from_ip_m_axis_result_tdata;
  wire                d_70_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_70_from_ip_m_axis_result_tdata;
  wire                d_71_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_71_from_ip_m_axis_result_tdata;
  wire                d_72_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_72_from_ip_m_axis_result_tdata;
  wire                d_73_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_73_from_ip_m_axis_result_tdata;
  wire                d_74_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_74_from_ip_m_axis_result_tdata;
  wire                d_75_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_75_from_ip_m_axis_result_tdata;
  wire                d_76_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_76_from_ip_m_axis_result_tdata;
  wire                d_77_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_77_from_ip_m_axis_result_tdata;
  wire                d_78_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_78_from_ip_m_axis_result_tdata;
  wire                d_79_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_79_from_ip_m_axis_result_tdata;
  wire                d_80_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_80_from_ip_m_axis_result_tdata;
  wire                d_81_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_81_from_ip_m_axis_result_tdata;
  wire                d_82_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_82_from_ip_m_axis_result_tdata;
  wire                d_83_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_83_from_ip_m_axis_result_tdata;
  wire                d_84_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_84_from_ip_m_axis_result_tdata;
  wire                d_85_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_85_from_ip_m_axis_result_tdata;
  wire                d_86_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_86_from_ip_m_axis_result_tdata;
  wire                d_87_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_87_from_ip_m_axis_result_tdata;
  wire                d_88_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_88_from_ip_m_axis_result_tdata;
  wire                d_89_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_89_from_ip_m_axis_result_tdata;
  wire                d_90_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_90_from_ip_m_axis_result_tdata;
  wire                d_91_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_91_from_ip_m_axis_result_tdata;
  wire                d_92_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_92_from_ip_m_axis_result_tdata;
  wire                d_93_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_93_from_ip_m_axis_result_tdata;
  wire                d_94_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_94_from_ip_m_axis_result_tdata;
  wire                d_95_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_95_from_ip_m_axis_result_tdata;
  wire                d_96_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_96_from_ip_m_axis_result_tdata;
  wire                d_97_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_97_from_ip_m_axis_result_tdata;
  wire                d_98_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_98_from_ip_m_axis_result_tdata;
  wire                d_99_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_99_from_ip_m_axis_result_tdata;
  wire                d_100_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_100_from_ip_m_axis_result_tdata;
  wire                d_101_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_101_from_ip_m_axis_result_tdata;
  wire                d_102_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_102_from_ip_m_axis_result_tdata;
  wire                d_103_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_103_from_ip_m_axis_result_tdata;
  wire                d_104_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_104_from_ip_m_axis_result_tdata;
  wire                d_105_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_105_from_ip_m_axis_result_tdata;
  wire                d_106_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_106_from_ip_m_axis_result_tdata;
  wire                d_107_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_107_from_ip_m_axis_result_tdata;
  wire                d_108_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_108_from_ip_m_axis_result_tdata;
  wire                d_109_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_109_from_ip_m_axis_result_tdata;
  wire                d_110_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_110_from_ip_m_axis_result_tdata;
  wire                d_111_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_111_from_ip_m_axis_result_tdata;
  wire                d_112_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_112_from_ip_m_axis_result_tdata;
  wire                d_113_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_113_from_ip_m_axis_result_tdata;
  wire                d_114_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_114_from_ip_m_axis_result_tdata;
  wire                d_115_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_115_from_ip_m_axis_result_tdata;
  wire                d_116_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_116_from_ip_m_axis_result_tdata;
  wire                d_117_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_117_from_ip_m_axis_result_tdata;
  wire                d_118_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_118_from_ip_m_axis_result_tdata;
  wire                d_119_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_119_from_ip_m_axis_result_tdata;
  wire                d_120_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_120_from_ip_m_axis_result_tdata;
  wire                d_121_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_121_from_ip_m_axis_result_tdata;
  wire                d_122_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_122_from_ip_m_axis_result_tdata;
  wire                d_123_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_123_from_ip_m_axis_result_tdata;
  wire                d_124_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_124_from_ip_m_axis_result_tdata;
  wire                d_125_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_125_from_ip_m_axis_result_tdata;
  wire                d_126_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_126_from_ip_m_axis_result_tdata;
  wire                d_127_from_ip_m_axis_result_tvalid;
  wire       [15:0]   d_127_from_ip_m_axis_result_tdata;
  wire       [3:0]    t_int4Data_0;
  wire       [3:0]    t_int4Data_1;
  wire       [3:0]    t_int4Data_2;
  wire       [3:0]    t_int4Data_3;
  wire       [3:0]    t_int4Data_4;
  wire       [3:0]    t_int4Data_5;
  wire       [3:0]    t_int4Data_6;
  wire       [3:0]    t_int4Data_7;
  wire       [3:0]    t_int4Data_8;
  wire       [3:0]    t_int4Data_9;
  wire       [3:0]    t_int4Data_10;
  wire       [3:0]    t_int4Data_11;
  wire       [3:0]    t_int4Data_12;
  wire       [3:0]    t_int4Data_13;
  wire       [3:0]    t_int4Data_14;
  wire       [3:0]    t_int4Data_15;
  wire       [3:0]    t_int4Data_16;
  wire       [3:0]    t_int4Data_17;
  wire       [3:0]    t_int4Data_18;
  wire       [3:0]    t_int4Data_19;
  wire       [3:0]    t_int4Data_20;
  wire       [3:0]    t_int4Data_21;
  wire       [3:0]    t_int4Data_22;
  wire       [3:0]    t_int4Data_23;
  wire       [3:0]    t_int4Data_24;
  wire       [3:0]    t_int4Data_25;
  wire       [3:0]    t_int4Data_26;
  wire       [3:0]    t_int4Data_27;
  wire       [3:0]    t_int4Data_28;
  wire       [3:0]    t_int4Data_29;
  wire       [3:0]    t_int4Data_30;
  wire       [3:0]    t_int4Data_31;
  wire       [3:0]    t_int4Data_32;
  wire       [3:0]    t_int4Data_33;
  wire       [3:0]    t_int4Data_34;
  wire       [3:0]    t_int4Data_35;
  wire       [3:0]    t_int4Data_36;
  wire       [3:0]    t_int4Data_37;
  wire       [3:0]    t_int4Data_38;
  wire       [3:0]    t_int4Data_39;
  wire       [3:0]    t_int4Data_40;
  wire       [3:0]    t_int4Data_41;
  wire       [3:0]    t_int4Data_42;
  wire       [3:0]    t_int4Data_43;
  wire       [3:0]    t_int4Data_44;
  wire       [3:0]    t_int4Data_45;
  wire       [3:0]    t_int4Data_46;
  wire       [3:0]    t_int4Data_47;
  wire       [3:0]    t_int4Data_48;
  wire       [3:0]    t_int4Data_49;
  wire       [3:0]    t_int4Data_50;
  wire       [3:0]    t_int4Data_51;
  wire       [3:0]    t_int4Data_52;
  wire       [3:0]    t_int4Data_53;
  wire       [3:0]    t_int4Data_54;
  wire       [3:0]    t_int4Data_55;
  wire       [3:0]    t_int4Data_56;
  wire       [3:0]    t_int4Data_57;
  wire       [3:0]    t_int4Data_58;
  wire       [3:0]    t_int4Data_59;
  wire       [3:0]    t_int4Data_60;
  wire       [3:0]    t_int4Data_61;
  wire       [3:0]    t_int4Data_62;
  wire       [3:0]    t_int4Data_63;
  wire       [3:0]    t_int4Data_64;
  wire       [3:0]    t_int4Data_65;
  wire       [3:0]    t_int4Data_66;
  wire       [3:0]    t_int4Data_67;
  wire       [3:0]    t_int4Data_68;
  wire       [3:0]    t_int4Data_69;
  wire       [3:0]    t_int4Data_70;
  wire       [3:0]    t_int4Data_71;
  wire       [3:0]    t_int4Data_72;
  wire       [3:0]    t_int4Data_73;
  wire       [3:0]    t_int4Data_74;
  wire       [3:0]    t_int4Data_75;
  wire       [3:0]    t_int4Data_76;
  wire       [3:0]    t_int4Data_77;
  wire       [3:0]    t_int4Data_78;
  wire       [3:0]    t_int4Data_79;
  wire       [3:0]    t_int4Data_80;
  wire       [3:0]    t_int4Data_81;
  wire       [3:0]    t_int4Data_82;
  wire       [3:0]    t_int4Data_83;
  wire       [3:0]    t_int4Data_84;
  wire       [3:0]    t_int4Data_85;
  wire       [3:0]    t_int4Data_86;
  wire       [3:0]    t_int4Data_87;
  wire       [3:0]    t_int4Data_88;
  wire       [3:0]    t_int4Data_89;
  wire       [3:0]    t_int4Data_90;
  wire       [3:0]    t_int4Data_91;
  wire       [3:0]    t_int4Data_92;
  wire       [3:0]    t_int4Data_93;
  wire       [3:0]    t_int4Data_94;
  wire       [3:0]    t_int4Data_95;
  wire       [3:0]    t_int4Data_96;
  wire       [3:0]    t_int4Data_97;
  wire       [3:0]    t_int4Data_98;
  wire       [3:0]    t_int4Data_99;
  wire       [3:0]    t_int4Data_100;
  wire       [3:0]    t_int4Data_101;
  wire       [3:0]    t_int4Data_102;
  wire       [3:0]    t_int4Data_103;
  wire       [3:0]    t_int4Data_104;
  wire       [3:0]    t_int4Data_105;
  wire       [3:0]    t_int4Data_106;
  wire       [3:0]    t_int4Data_107;
  wire       [3:0]    t_int4Data_108;
  wire       [3:0]    t_int4Data_109;
  wire       [3:0]    t_int4Data_110;
  wire       [3:0]    t_int4Data_111;
  wire       [3:0]    t_int4Data_112;
  wire       [3:0]    t_int4Data_113;
  wire       [3:0]    t_int4Data_114;
  wire       [3:0]    t_int4Data_115;
  wire       [3:0]    t_int4Data_116;
  wire       [3:0]    t_int4Data_117;
  wire       [3:0]    t_int4Data_118;
  wire       [3:0]    t_int4Data_119;
  wire       [3:0]    t_int4Data_120;
  wire       [3:0]    t_int4Data_121;
  wire       [3:0]    t_int4Data_122;
  wire       [3:0]    t_int4Data_123;
  wire       [3:0]    t_int4Data_124;
  wire       [3:0]    t_int4Data_125;
  wire       [3:0]    t_int4Data_126;
  wire       [3:0]    t_int4Data_127;
  wire       [8:0]    t_dSub_0;
  wire       [8:0]    t_dSub_0_1;
  wire       [8:0]    t_dSub_1;
  wire       [8:0]    t_dSub_1_1;
  wire       [8:0]    t_dSub_2;
  wire       [8:0]    t_dSub_2_1;
  wire       [8:0]    t_dSub_3;
  wire       [8:0]    t_dSub_3_1;
  wire       [8:0]    t_dSub_4;
  wire       [8:0]    t_dSub_4_1;
  wire       [8:0]    t_dSub_5;
  wire       [8:0]    t_dSub_5_1;
  wire       [8:0]    t_dSub_6;
  wire       [8:0]    t_dSub_6_1;
  wire       [8:0]    t_dSub_7;
  wire       [8:0]    t_dSub_7_1;
  wire       [8:0]    t_dSub_8;
  wire       [8:0]    t_dSub_8_1;
  wire       [8:0]    t_dSub_9;
  wire       [8:0]    t_dSub_9_1;
  wire       [8:0]    t_dSub_10;
  wire       [8:0]    t_dSub_10_1;
  wire       [8:0]    t_dSub_11;
  wire       [8:0]    t_dSub_11_1;
  wire       [8:0]    t_dSub_12;
  wire       [8:0]    t_dSub_12_1;
  wire       [8:0]    t_dSub_13;
  wire       [8:0]    t_dSub_13_1;
  wire       [8:0]    t_dSub_14;
  wire       [8:0]    t_dSub_14_1;
  wire       [8:0]    t_dSub_15;
  wire       [8:0]    t_dSub_15_1;
  wire       [8:0]    t_dSub_16;
  wire       [8:0]    t_dSub_16_1;
  wire       [8:0]    t_dSub_17;
  wire       [8:0]    t_dSub_17_1;
  wire       [8:0]    t_dSub_18;
  wire       [8:0]    t_dSub_18_1;
  wire       [8:0]    t_dSub_19;
  wire       [8:0]    t_dSub_19_1;
  wire       [8:0]    t_dSub_20;
  wire       [8:0]    t_dSub_20_1;
  wire       [8:0]    t_dSub_21;
  wire       [8:0]    t_dSub_21_1;
  wire       [8:0]    t_dSub_22;
  wire       [8:0]    t_dSub_22_1;
  wire       [8:0]    t_dSub_23;
  wire       [8:0]    t_dSub_23_1;
  wire       [8:0]    t_dSub_24;
  wire       [8:0]    t_dSub_24_1;
  wire       [8:0]    t_dSub_25;
  wire       [8:0]    t_dSub_25_1;
  wire       [8:0]    t_dSub_26;
  wire       [8:0]    t_dSub_26_1;
  wire       [8:0]    t_dSub_27;
  wire       [8:0]    t_dSub_27_1;
  wire       [8:0]    t_dSub_28;
  wire       [8:0]    t_dSub_28_1;
  wire       [8:0]    t_dSub_29;
  wire       [8:0]    t_dSub_29_1;
  wire       [8:0]    t_dSub_30;
  wire       [8:0]    t_dSub_30_1;
  wire       [8:0]    t_dSub_31;
  wire       [8:0]    t_dSub_31_1;
  wire       [8:0]    t_dSub_32;
  wire       [8:0]    t_dSub_32_1;
  wire       [8:0]    t_dSub_33;
  wire       [8:0]    t_dSub_33_1;
  wire       [8:0]    t_dSub_34;
  wire       [8:0]    t_dSub_34_1;
  wire       [8:0]    t_dSub_35;
  wire       [8:0]    t_dSub_35_1;
  wire       [8:0]    t_dSub_36;
  wire       [8:0]    t_dSub_36_1;
  wire       [8:0]    t_dSub_37;
  wire       [8:0]    t_dSub_37_1;
  wire       [8:0]    t_dSub_38;
  wire       [8:0]    t_dSub_38_1;
  wire       [8:0]    t_dSub_39;
  wire       [8:0]    t_dSub_39_1;
  wire       [8:0]    t_dSub_40;
  wire       [8:0]    t_dSub_40_1;
  wire       [8:0]    t_dSub_41;
  wire       [8:0]    t_dSub_41_1;
  wire       [8:0]    t_dSub_42;
  wire       [8:0]    t_dSub_42_1;
  wire       [8:0]    t_dSub_43;
  wire       [8:0]    t_dSub_43_1;
  wire       [8:0]    t_dSub_44;
  wire       [8:0]    t_dSub_44_1;
  wire       [8:0]    t_dSub_45;
  wire       [8:0]    t_dSub_45_1;
  wire       [8:0]    t_dSub_46;
  wire       [8:0]    t_dSub_46_1;
  wire       [8:0]    t_dSub_47;
  wire       [8:0]    t_dSub_47_1;
  wire       [8:0]    t_dSub_48;
  wire       [8:0]    t_dSub_48_1;
  wire       [8:0]    t_dSub_49;
  wire       [8:0]    t_dSub_49_1;
  wire       [8:0]    t_dSub_50;
  wire       [8:0]    t_dSub_50_1;
  wire       [8:0]    t_dSub_51;
  wire       [8:0]    t_dSub_51_1;
  wire       [8:0]    t_dSub_52;
  wire       [8:0]    t_dSub_52_1;
  wire       [8:0]    t_dSub_53;
  wire       [8:0]    t_dSub_53_1;
  wire       [8:0]    t_dSub_54;
  wire       [8:0]    t_dSub_54_1;
  wire       [8:0]    t_dSub_55;
  wire       [8:0]    t_dSub_55_1;
  wire       [8:0]    t_dSub_56;
  wire       [8:0]    t_dSub_56_1;
  wire       [8:0]    t_dSub_57;
  wire       [8:0]    t_dSub_57_1;
  wire       [8:0]    t_dSub_58;
  wire       [8:0]    t_dSub_58_1;
  wire       [8:0]    t_dSub_59;
  wire       [8:0]    t_dSub_59_1;
  wire       [8:0]    t_dSub_60;
  wire       [8:0]    t_dSub_60_1;
  wire       [8:0]    t_dSub_61;
  wire       [8:0]    t_dSub_61_1;
  wire       [8:0]    t_dSub_62;
  wire       [8:0]    t_dSub_62_1;
  wire       [8:0]    t_dSub_63;
  wire       [8:0]    t_dSub_63_1;
  wire       [8:0]    t_dSub_64;
  wire       [8:0]    t_dSub_64_1;
  wire       [8:0]    t_dSub_65;
  wire       [8:0]    t_dSub_65_1;
  wire       [8:0]    t_dSub_66;
  wire       [8:0]    t_dSub_66_1;
  wire       [8:0]    t_dSub_67;
  wire       [8:0]    t_dSub_67_1;
  wire       [8:0]    t_dSub_68;
  wire       [8:0]    t_dSub_68_1;
  wire       [8:0]    t_dSub_69;
  wire       [8:0]    t_dSub_69_1;
  wire       [8:0]    t_dSub_70;
  wire       [8:0]    t_dSub_70_1;
  wire       [8:0]    t_dSub_71;
  wire       [8:0]    t_dSub_71_1;
  wire       [8:0]    t_dSub_72;
  wire       [8:0]    t_dSub_72_1;
  wire       [8:0]    t_dSub_73;
  wire       [8:0]    t_dSub_73_1;
  wire       [8:0]    t_dSub_74;
  wire       [8:0]    t_dSub_74_1;
  wire       [8:0]    t_dSub_75;
  wire       [8:0]    t_dSub_75_1;
  wire       [8:0]    t_dSub_76;
  wire       [8:0]    t_dSub_76_1;
  wire       [8:0]    t_dSub_77;
  wire       [8:0]    t_dSub_77_1;
  wire       [8:0]    t_dSub_78;
  wire       [8:0]    t_dSub_78_1;
  wire       [8:0]    t_dSub_79;
  wire       [8:0]    t_dSub_79_1;
  wire       [8:0]    t_dSub_80;
  wire       [8:0]    t_dSub_80_1;
  wire       [8:0]    t_dSub_81;
  wire       [8:0]    t_dSub_81_1;
  wire       [8:0]    t_dSub_82;
  wire       [8:0]    t_dSub_82_1;
  wire       [8:0]    t_dSub_83;
  wire       [8:0]    t_dSub_83_1;
  wire       [8:0]    t_dSub_84;
  wire       [8:0]    t_dSub_84_1;
  wire       [8:0]    t_dSub_85;
  wire       [8:0]    t_dSub_85_1;
  wire       [8:0]    t_dSub_86;
  wire       [8:0]    t_dSub_86_1;
  wire       [8:0]    t_dSub_87;
  wire       [8:0]    t_dSub_87_1;
  wire       [8:0]    t_dSub_88;
  wire       [8:0]    t_dSub_88_1;
  wire       [8:0]    t_dSub_89;
  wire       [8:0]    t_dSub_89_1;
  wire       [8:0]    t_dSub_90;
  wire       [8:0]    t_dSub_90_1;
  wire       [8:0]    t_dSub_91;
  wire       [8:0]    t_dSub_91_1;
  wire       [8:0]    t_dSub_92;
  wire       [8:0]    t_dSub_92_1;
  wire       [8:0]    t_dSub_93;
  wire       [8:0]    t_dSub_93_1;
  wire       [8:0]    t_dSub_94;
  wire       [8:0]    t_dSub_94_1;
  wire       [8:0]    t_dSub_95;
  wire       [8:0]    t_dSub_95_1;
  wire       [8:0]    t_dSub_96;
  wire       [8:0]    t_dSub_96_1;
  wire       [8:0]    t_dSub_97;
  wire       [8:0]    t_dSub_97_1;
  wire       [8:0]    t_dSub_98;
  wire       [8:0]    t_dSub_98_1;
  wire       [8:0]    t_dSub_99;
  wire       [8:0]    t_dSub_99_1;
  wire       [8:0]    t_dSub_100;
  wire       [8:0]    t_dSub_100_1;
  wire       [8:0]    t_dSub_101;
  wire       [8:0]    t_dSub_101_1;
  wire       [8:0]    t_dSub_102;
  wire       [8:0]    t_dSub_102_1;
  wire       [8:0]    t_dSub_103;
  wire       [8:0]    t_dSub_103_1;
  wire       [8:0]    t_dSub_104;
  wire       [8:0]    t_dSub_104_1;
  wire       [8:0]    t_dSub_105;
  wire       [8:0]    t_dSub_105_1;
  wire       [8:0]    t_dSub_106;
  wire       [8:0]    t_dSub_106_1;
  wire       [8:0]    t_dSub_107;
  wire       [8:0]    t_dSub_107_1;
  wire       [8:0]    t_dSub_108;
  wire       [8:0]    t_dSub_108_1;
  wire       [8:0]    t_dSub_109;
  wire       [8:0]    t_dSub_109_1;
  wire       [8:0]    t_dSub_110;
  wire       [8:0]    t_dSub_110_1;
  wire       [8:0]    t_dSub_111;
  wire       [8:0]    t_dSub_111_1;
  wire       [8:0]    t_dSub_112;
  wire       [8:0]    t_dSub_112_1;
  wire       [8:0]    t_dSub_113;
  wire       [8:0]    t_dSub_113_1;
  wire       [8:0]    t_dSub_114;
  wire       [8:0]    t_dSub_114_1;
  wire       [8:0]    t_dSub_115;
  wire       [8:0]    t_dSub_115_1;
  wire       [8:0]    t_dSub_116;
  wire       [8:0]    t_dSub_116_1;
  wire       [8:0]    t_dSub_117;
  wire       [8:0]    t_dSub_117_1;
  wire       [8:0]    t_dSub_118;
  wire       [8:0]    t_dSub_118_1;
  wire       [8:0]    t_dSub_119;
  wire       [8:0]    t_dSub_119_1;
  wire       [8:0]    t_dSub_120;
  wire       [8:0]    t_dSub_120_1;
  wire       [8:0]    t_dSub_121;
  wire       [8:0]    t_dSub_121_1;
  wire       [8:0]    t_dSub_122;
  wire       [8:0]    t_dSub_122_1;
  wire       [8:0]    t_dSub_123;
  wire       [8:0]    t_dSub_123_1;
  wire       [8:0]    t_dSub_124;
  wire       [8:0]    t_dSub_124_1;
  wire       [8:0]    t_dSub_125;
  wire       [8:0]    t_dSub_125_1;
  wire       [8:0]    t_dSub_126;
  wire       [8:0]    t_dSub_126_1;
  wire       [8:0]    t_dSub_127;
  wire       [8:0]    t_dSub_127_1;
  wire       [1791:0] t_wPy;
  wire       [1535:0] t_wPy_1;
  wire       [1279:0] t_wPy_2;
  wire       [1023:0] t_wPy_3;
  wire       [767:0]  t_wPy_4;
  wire       [511:0]  t_wPy_5;
  wire       [255:0]  t_wPy_6;
  wire       [5:0]    t_t_output_tdata_128;
  wire       [5:0]    t_t_output_tdata_129;
  wire       [5:0]    t_t_output_tdata_130;
  wire       [5:0]    t_t_output_tdata_131;
  wire       [5:0]    t_t_output_tdata_132;
  wire       [5:0]    t_t_output_tdata_133;
  wire       [5:0]    t_t_output_tdata_134;
  wire       [5:0]    t_t_output_tdata_135;
  wire       [5:0]    t_t_output_tdata_136;
  wire       [5:0]    t_t_output_tdata_137;
  wire       [5:0]    t_t_output_tdata_138;
  wire       [5:0]    t_t_output_tdata_139;
  wire       [5:0]    t_t_output_tdata_140;
  wire       [5:0]    t_t_output_tdata_141;
  wire       [5:0]    t_t_output_tdata_142;
  wire       [5:0]    t_t_output_tdata_143;
  wire       [5:0]    t_t_output_tdata_144;
  wire       [5:0]    t_t_output_tdata_145;
  wire       [5:0]    t_t_output_tdata_146;
  wire       [5:0]    t_t_output_tdata_147;
  wire       [5:0]    t_t_output_tdata_148;
  wire       [5:0]    t_t_output_tdata_149;
  wire       [5:0]    t_t_output_tdata_150;
  wire       [5:0]    t_t_output_tdata_151;
  wire       [5:0]    t_t_output_tdata_152;
  wire       [5:0]    t_t_output_tdata_153;
  wire       [5:0]    t_t_output_tdata_154;
  wire       [5:0]    t_t_output_tdata_155;
  wire       [5:0]    t_t_output_tdata_156;
  wire       [5:0]    t_t_output_tdata_157;
  wire       [5:0]    t_t_output_tdata_158;
  wire       [5:0]    t_t_output_tdata_159;
  wire       [5:0]    t_t_output_tdata_160;
  wire       [5:0]    t_t_output_tdata_161;
  wire       [5:0]    t_t_output_tdata_162;
  wire       [5:0]    t_t_output_tdata_163;
  wire       [5:0]    t_t_output_tdata_164;
  wire       [5:0]    t_t_output_tdata_165;
  wire       [5:0]    t_t_output_tdata_166;
  wire       [5:0]    t_t_output_tdata_167;
  wire       [5:0]    t_t_output_tdata_168;
  wire       [5:0]    t_t_output_tdata_169;
  wire       [5:0]    t_t_output_tdata_170;
  wire       [5:0]    t_t_output_tdata_171;
  wire       [5:0]    t_t_output_tdata_172;
  wire       [5:0]    t_t_output_tdata_173;
  wire       [5:0]    t_t_output_tdata_174;
  wire       [5:0]    t_t_output_tdata_175;
  wire       [5:0]    t_t_output_tdata_176;
  wire       [5:0]    t_t_output_tdata_177;
  wire       [5:0]    t_t_output_tdata_178;
  wire       [5:0]    t_t_output_tdata_179;
  wire       [5:0]    t_t_output_tdata_180;
  wire       [5:0]    t_t_output_tdata_181;
  wire       [5:0]    t_t_output_tdata_182;
  wire       [5:0]    t_t_output_tdata_183;
  wire       [5:0]    t_t_output_tdata_184;
  wire       [5:0]    t_t_output_tdata_185;
  wire       [5:0]    t_t_output_tdata_186;
  wire       [5:0]    t_t_output_tdata_187;
  wire       [5:0]    t_t_output_tdata_188;
  wire       [5:0]    t_t_output_tdata_189;
  wire       [5:0]    t_t_output_tdata_190;
  wire       [5:0]    t_t_output_tdata_191;
  wire       [5:0]    t_t_output_tdata_192;
  wire       [5:0]    t_t_output_tdata_193;
  wire       [5:0]    t_t_output_tdata_194;
  wire       [5:0]    t_t_output_tdata_195;
  wire       [5:0]    t_t_output_tdata_196;
  wire       [5:0]    t_t_output_tdata_197;
  wire       [5:0]    t_t_output_tdata_198;
  wire       [5:0]    t_t_output_tdata_199;
  wire       [5:0]    t_t_output_tdata_200;
  wire       [5:0]    t_t_output_tdata_201;
  wire       [5:0]    t_t_output_tdata_202;
  wire       [5:0]    t_t_output_tdata_203;
  wire       [5:0]    t_t_output_tdata_204;
  wire       [5:0]    t_t_output_tdata_205;
  wire       [5:0]    t_t_output_tdata_206;
  wire       [5:0]    t_t_output_tdata_207;
  wire       [5:0]    t_t_output_tdata_208;
  wire       [5:0]    t_t_output_tdata_209;
  wire       [5:0]    t_t_output_tdata_210;
  wire       [5:0]    t_t_output_tdata_211;
  wire       [5:0]    t_t_output_tdata_212;
  wire       [5:0]    t_t_output_tdata_213;
  wire       [5:0]    t_t_output_tdata_214;
  wire       [5:0]    t_t_output_tdata_215;
  wire       [5:0]    t_t_output_tdata_216;
  wire       [5:0]    t_t_output_tdata_217;
  wire       [5:0]    t_t_output_tdata_218;
  wire       [5:0]    t_t_output_tdata_219;
  wire       [5:0]    t_t_output_tdata_220;
  wire       [5:0]    t_t_output_tdata_221;
  wire       [5:0]    t_t_output_tdata_222;
  wire       [5:0]    t_t_output_tdata_223;
  wire       [5:0]    t_t_output_tdata_224;
  wire       [5:0]    t_t_output_tdata_225;
  wire       [5:0]    t_t_output_tdata_226;
  wire       [5:0]    t_t_output_tdata_227;
  wire       [5:0]    t_t_output_tdata_228;
  wire       [5:0]    t_t_output_tdata_229;
  wire       [5:0]    t_t_output_tdata_230;
  wire       [5:0]    t_t_output_tdata_231;
  wire       [5:0]    t_t_output_tdata_232;
  wire       [5:0]    t_t_output_tdata_233;
  wire       [5:0]    t_t_output_tdata_234;
  wire       [5:0]    t_t_output_tdata_235;
  wire       [5:0]    t_t_output_tdata_236;
  wire       [5:0]    t_t_output_tdata_237;
  wire       [5:0]    t_t_output_tdata_238;
  wire       [5:0]    t_t_output_tdata_239;
  wire       [5:0]    t_t_output_tdata_240;
  wire       [5:0]    t_t_output_tdata_241;
  wire       [5:0]    t_t_output_tdata_242;
  wire       [5:0]    t_t_output_tdata_243;
  wire       [5:0]    t_t_output_tdata_244;
  wire       [5:0]    t_t_output_tdata_245;
  wire       [5:0]    t_t_output_tdata_246;
  wire       [5:0]    t_t_output_tdata_247;
  wire       [5:0]    t_t_output_tdata_248;
  wire       [5:0]    t_t_output_tdata_249;
  wire       [5:0]    t_t_output_tdata_250;
  wire       [5:0]    t_t_output_tdata_251;
  wire       [5:0]    t_t_output_tdata_252;
  wire       [5:0]    t_t_output_tdata_253;
  wire       [5:0]    t_t_output_tdata_254;
  wire       [5:0]    t_t_output_tdata_255;
  wire                t_output_tdata_256;
  wire       [4:0]    t_output_tdata_257;
  wire       [4:0]    t_output_tdata_258;
  wire                t_output_tdata_259;
  wire       [4:0]    t_output_tdata_260;
  wire       [4:0]    t_output_tdata_261;
  wire       [0:0]    t_output_tdata_262;
  wire       [4:0]    t_output_tdata_263;
  wire       [4:0]    t_output_tdata_264;
  wire       [4:0]    t_output_tdata_265;
  wire       [5:0]    t_output_tdata_266;
  wire                t_output_tdata_267;
  wire       [4:0]    t_output_tdata_268;
  wire       [4:0]    t_output_tdata_269;
  wire       [9:0]    t_output_tdata_270;
  wire       [15:0]   t_output_tdata_271;
  wire                t_output_tdata_272;
  wire       [4:0]    t_output_tdata_273;
  wire       [4:0]    t_output_tdata_274;
  wire       [1967:0] t_output_tdata_275;
  wire       [0:0]    t_output_tdata_276;
  wire       [4:0]    t_output_tdata_277;
  wire       [4:0]    t_output_tdata_278;
  wire       [4:0]    t_output_tdata_279;
  wire       [5:0]    t_output_tdata_280;
  wire                t_output_tdata_281;
  wire       [4:0]    t_output_tdata_282;
  wire       [4:0]    t_output_tdata_283;
  wire       [9:0]    t_output_tdata_284;
  wire       [15:0]   t_output_tdata_285;
  wire                t_output_tdata_286;
  wire       [4:0]    t_output_tdata_287;
  wire       [4:0]    t_output_tdata_288;
  wire       [1919:0] t_output_tdata_289;
  wire       [0:0]    t_output_tdata_290;
  wire       [4:0]    t_output_tdata_291;
  wire       [4:0]    t_output_tdata_292;
  wire       [4:0]    t_output_tdata_293;
  wire       [5:0]    t_output_tdata_294;
  wire                t_output_tdata_295;
  wire       [4:0]    t_output_tdata_296;
  wire       [4:0]    t_output_tdata_297;
  wire       [9:0]    t_output_tdata_298;
  wire       [15:0]   t_output_tdata_299;
  wire                t_output_tdata_300;
  wire       [4:0]    t_output_tdata_301;
  wire       [4:0]    t_output_tdata_302;
  wire       [1871:0] t_output_tdata_303;
  wire       [0:0]    t_output_tdata_304;
  wire       [4:0]    t_output_tdata_305;
  wire       [4:0]    t_output_tdata_306;
  wire       [4:0]    t_output_tdata_307;
  wire       [5:0]    t_output_tdata_308;
  wire                t_output_tdata_309;
  wire       [4:0]    t_output_tdata_310;
  wire       [4:0]    t_output_tdata_311;
  wire       [9:0]    t_output_tdata_312;
  wire       [15:0]   t_output_tdata_313;
  wire                t_output_tdata_314;
  wire       [4:0]    t_output_tdata_315;
  wire       [4:0]    t_output_tdata_316;
  wire       [1823:0] t_output_tdata_317;
  wire       [0:0]    t_output_tdata_318;
  wire       [4:0]    t_output_tdata_319;
  wire       [4:0]    t_output_tdata_320;
  wire       [4:0]    t_output_tdata_321;
  wire       [5:0]    t_output_tdata_322;
  wire                t_output_tdata_323;
  wire       [4:0]    t_output_tdata_324;
  wire       [4:0]    t_output_tdata_325;
  wire       [9:0]    t_output_tdata_326;
  wire       [15:0]   t_output_tdata_327;
  wire                t_output_tdata_328;
  wire       [4:0]    t_output_tdata_329;
  wire       [4:0]    t_output_tdata_330;
  wire       [1775:0] t_output_tdata_331;
  wire       [0:0]    t_output_tdata_332;
  wire       [4:0]    t_output_tdata_333;
  wire       [4:0]    t_output_tdata_334;
  wire       [4:0]    t_output_tdata_335;
  wire       [5:0]    t_output_tdata_336;
  wire                t_output_tdata_337;
  wire       [4:0]    t_output_tdata_338;
  wire       [4:0]    t_output_tdata_339;
  wire       [9:0]    t_output_tdata_340;
  wire       [15:0]   t_output_tdata_341;
  wire                t_output_tdata_342;
  wire       [4:0]    t_output_tdata_343;
  wire       [4:0]    t_output_tdata_344;
  wire       [1727:0] t_output_tdata_345;
  wire       [0:0]    t_output_tdata_346;
  wire       [4:0]    t_output_tdata_347;
  wire       [4:0]    t_output_tdata_348;
  wire       [4:0]    t_output_tdata_349;
  wire       [5:0]    t_output_tdata_350;
  wire                t_output_tdata_351;
  wire       [4:0]    t_output_tdata_352;
  wire       [4:0]    t_output_tdata_353;
  wire       [9:0]    t_output_tdata_354;
  wire       [15:0]   t_output_tdata_355;
  wire                t_output_tdata_356;
  wire       [4:0]    t_output_tdata_357;
  wire       [4:0]    t_output_tdata_358;
  wire       [1679:0] t_output_tdata_359;
  wire       [0:0]    t_output_tdata_360;
  wire       [4:0]    t_output_tdata_361;
  wire       [4:0]    t_output_tdata_362;
  wire       [4:0]    t_output_tdata_363;
  wire       [5:0]    t_output_tdata_364;
  wire                t_output_tdata_365;
  wire       [4:0]    t_output_tdata_366;
  wire       [4:0]    t_output_tdata_367;
  wire       [9:0]    t_output_tdata_368;
  wire       [15:0]   t_output_tdata_369;
  wire                t_output_tdata_370;
  wire       [4:0]    t_output_tdata_371;
  wire       [4:0]    t_output_tdata_372;
  wire       [1631:0] t_output_tdata_373;
  wire       [0:0]    t_output_tdata_374;
  wire       [4:0]    t_output_tdata_375;
  wire       [4:0]    t_output_tdata_376;
  wire       [4:0]    t_output_tdata_377;
  wire       [5:0]    t_output_tdata_378;
  wire                t_output_tdata_379;
  wire       [4:0]    t_output_tdata_380;
  wire       [4:0]    t_output_tdata_381;
  wire       [9:0]    t_output_tdata_382;
  wire       [15:0]   t_output_tdata_383;
  wire                t_output_tdata_384;
  wire       [4:0]    t_output_tdata_385;
  wire       [4:0]    t_output_tdata_386;
  wire       [1583:0] t_output_tdata_387;
  wire       [0:0]    t_output_tdata_388;
  wire       [4:0]    t_output_tdata_389;
  wire       [4:0]    t_output_tdata_390;
  wire       [4:0]    t_output_tdata_391;
  wire       [5:0]    t_output_tdata_392;
  wire                t_output_tdata_393;
  wire       [4:0]    t_output_tdata_394;
  wire       [4:0]    t_output_tdata_395;
  wire       [9:0]    t_output_tdata_396;
  wire       [15:0]   t_output_tdata_397;
  wire                t_output_tdata_398;
  wire       [4:0]    t_output_tdata_399;
  wire       [4:0]    t_output_tdata_400;
  wire       [1535:0] t_output_tdata_401;
  wire       [0:0]    t_output_tdata_402;
  wire       [4:0]    t_output_tdata_403;
  wire       [4:0]    t_output_tdata_404;
  wire       [4:0]    t_output_tdata_405;
  wire       [5:0]    t_output_tdata_406;
  wire                t_output_tdata_407;
  wire       [4:0]    t_output_tdata_408;
  wire       [4:0]    t_output_tdata_409;
  wire       [9:0]    t_output_tdata_410;
  wire       [15:0]   t_output_tdata_411;
  wire                t_output_tdata_412;
  wire       [4:0]    t_output_tdata_413;
  wire       [4:0]    t_output_tdata_414;
  wire       [1487:0] t_output_tdata_415;
  wire       [0:0]    t_output_tdata_416;
  wire       [4:0]    t_output_tdata_417;
  wire       [4:0]    t_output_tdata_418;
  wire       [4:0]    t_output_tdata_419;
  wire       [5:0]    t_output_tdata_420;
  wire                t_output_tdata_421;
  wire       [4:0]    t_output_tdata_422;
  wire       [4:0]    t_output_tdata_423;
  wire       [9:0]    t_output_tdata_424;
  wire       [15:0]   t_output_tdata_425;
  wire                t_output_tdata_426;
  wire       [4:0]    t_output_tdata_427;
  wire       [4:0]    t_output_tdata_428;
  wire       [1439:0] t_output_tdata_429;
  wire       [0:0]    t_output_tdata_430;
  wire       [4:0]    t_output_tdata_431;
  wire       [4:0]    t_output_tdata_432;
  wire       [4:0]    t_output_tdata_433;
  wire       [5:0]    t_output_tdata_434;
  wire                t_output_tdata_435;
  wire       [4:0]    t_output_tdata_436;
  wire       [4:0]    t_output_tdata_437;
  wire       [9:0]    t_output_tdata_438;
  wire       [15:0]   t_output_tdata_439;
  wire                t_output_tdata_440;
  wire       [4:0]    t_output_tdata_441;
  wire       [4:0]    t_output_tdata_442;
  wire       [1391:0] t_output_tdata_443;
  wire       [0:0]    t_output_tdata_444;
  wire       [4:0]    t_output_tdata_445;
  wire       [4:0]    t_output_tdata_446;
  wire       [4:0]    t_output_tdata_447;
  wire       [5:0]    t_output_tdata_448;
  wire                t_output_tdata_449;
  wire       [4:0]    t_output_tdata_450;
  wire       [4:0]    t_output_tdata_451;
  wire       [9:0]    t_output_tdata_452;
  wire       [15:0]   t_output_tdata_453;
  wire                t_output_tdata_454;
  wire       [4:0]    t_output_tdata_455;
  wire       [4:0]    t_output_tdata_456;
  wire       [1343:0] t_output_tdata_457;
  wire       [0:0]    t_output_tdata_458;
  wire       [4:0]    t_output_tdata_459;
  wire       [4:0]    t_output_tdata_460;
  wire       [4:0]    t_output_tdata_461;
  wire       [5:0]    t_output_tdata_462;
  wire                t_output_tdata_463;
  wire       [4:0]    t_output_tdata_464;
  wire       [4:0]    t_output_tdata_465;
  wire       [9:0]    t_output_tdata_466;
  wire       [15:0]   t_output_tdata_467;
  wire                t_output_tdata_468;
  wire       [4:0]    t_output_tdata_469;
  wire       [4:0]    t_output_tdata_470;
  wire       [1295:0] t_output_tdata_471;
  wire       [0:0]    t_output_tdata_472;
  wire       [4:0]    t_output_tdata_473;
  wire       [4:0]    t_output_tdata_474;
  wire       [4:0]    t_output_tdata_475;
  wire       [5:0]    t_output_tdata_476;
  wire                t_output_tdata_477;
  wire       [4:0]    t_output_tdata_478;
  wire       [4:0]    t_output_tdata_479;
  wire       [9:0]    t_output_tdata_480;
  wire       [15:0]   t_output_tdata_481;
  wire                t_output_tdata_482;
  wire       [4:0]    t_output_tdata_483;
  wire       [4:0]    t_output_tdata_484;
  wire       [1247:0] t_output_tdata_485;
  wire       [0:0]    t_output_tdata_486;
  wire       [4:0]    t_output_tdata_487;
  wire       [4:0]    t_output_tdata_488;
  wire       [4:0]    t_output_tdata_489;
  wire       [5:0]    t_output_tdata_490;
  wire                t_output_tdata_491;
  wire       [4:0]    t_output_tdata_492;
  wire       [4:0]    t_output_tdata_493;
  wire       [9:0]    t_output_tdata_494;
  wire       [15:0]   t_output_tdata_495;
  wire                t_output_tdata_496;
  wire       [4:0]    t_output_tdata_497;
  wire       [4:0]    t_output_tdata_498;
  wire       [1199:0] t_output_tdata_499;
  wire       [0:0]    t_output_tdata_500;
  wire       [4:0]    t_output_tdata_501;
  wire       [4:0]    t_output_tdata_502;
  wire       [4:0]    t_output_tdata_503;
  wire       [5:0]    t_output_tdata_504;
  wire                t_output_tdata_505;
  wire       [4:0]    t_output_tdata_506;
  wire       [4:0]    t_output_tdata_507;
  wire       [9:0]    t_output_tdata_508;
  wire       [15:0]   t_output_tdata_509;
  wire                t_output_tdata_510;
  wire       [4:0]    t_output_tdata_511;
  wire       [4:0]    t_output_tdata_512;
  wire       [1151:0] t_output_tdata_513;
  wire       [0:0]    t_output_tdata_514;
  wire       [4:0]    t_output_tdata_515;
  wire       [4:0]    t_output_tdata_516;
  wire       [4:0]    t_output_tdata_517;
  wire       [5:0]    t_output_tdata_518;
  wire                t_output_tdata_519;
  wire       [4:0]    t_output_tdata_520;
  wire       [4:0]    t_output_tdata_521;
  wire       [9:0]    t_output_tdata_522;
  wire       [15:0]   t_output_tdata_523;
  wire                t_output_tdata_524;
  wire       [4:0]    t_output_tdata_525;
  wire       [4:0]    t_output_tdata_526;
  wire       [1103:0] t_output_tdata_527;
  wire       [0:0]    t_output_tdata_528;
  wire       [4:0]    t_output_tdata_529;
  wire       [4:0]    t_output_tdata_530;
  wire       [4:0]    t_output_tdata_531;
  wire       [5:0]    t_output_tdata_532;
  wire                t_output_tdata_533;
  wire       [4:0]    t_output_tdata_534;
  wire       [4:0]    t_output_tdata_535;
  wire       [9:0]    t_output_tdata_536;
  wire       [15:0]   t_output_tdata_537;
  wire                t_output_tdata_538;
  wire       [4:0]    t_output_tdata_539;
  wire       [4:0]    t_output_tdata_540;
  wire       [1055:0] t_output_tdata_541;
  wire       [0:0]    t_output_tdata_542;
  wire       [4:0]    t_output_tdata_543;
  wire       [4:0]    t_output_tdata_544;
  wire       [4:0]    t_output_tdata_545;
  wire       [5:0]    t_output_tdata_546;
  wire                t_output_tdata_547;
  wire       [4:0]    t_output_tdata_548;
  wire       [4:0]    t_output_tdata_549;
  wire       [9:0]    t_output_tdata_550;
  wire       [15:0]   t_output_tdata_551;
  wire                t_output_tdata_552;
  wire       [4:0]    t_output_tdata_553;
  wire       [4:0]    t_output_tdata_554;
  wire       [1007:0] t_output_tdata_555;
  wire       [0:0]    t_output_tdata_556;
  wire       [4:0]    t_output_tdata_557;
  wire       [4:0]    t_output_tdata_558;
  wire       [4:0]    t_output_tdata_559;
  wire       [5:0]    t_output_tdata_560;
  wire                t_output_tdata_561;
  wire       [4:0]    t_output_tdata_562;
  wire       [4:0]    t_output_tdata_563;
  wire       [9:0]    t_output_tdata_564;
  wire       [15:0]   t_output_tdata_565;
  wire                t_output_tdata_566;
  wire       [4:0]    t_output_tdata_567;
  wire       [4:0]    t_output_tdata_568;
  wire       [959:0]  t_output_tdata_569;
  wire       [0:0]    t_output_tdata_570;
  wire       [4:0]    t_output_tdata_571;
  wire       [4:0]    t_output_tdata_572;
  wire       [4:0]    t_output_tdata_573;
  wire       [5:0]    t_output_tdata_574;
  wire                t_output_tdata_575;
  wire       [4:0]    t_output_tdata_576;
  wire       [4:0]    t_output_tdata_577;
  wire       [9:0]    t_output_tdata_578;
  wire       [15:0]   t_output_tdata_579;
  wire                t_output_tdata_580;
  wire       [4:0]    t_output_tdata_581;
  wire       [4:0]    t_output_tdata_582;
  wire       [911:0]  t_output_tdata_583;
  wire       [0:0]    t_output_tdata_584;
  wire       [4:0]    t_output_tdata_585;
  wire       [4:0]    t_output_tdata_586;
  wire       [4:0]    t_output_tdata_587;
  wire       [5:0]    t_output_tdata_588;
  wire                t_output_tdata_589;
  wire       [4:0]    t_output_tdata_590;
  wire       [4:0]    t_output_tdata_591;
  wire       [9:0]    t_output_tdata_592;
  wire       [15:0]   t_output_tdata_593;
  wire                t_output_tdata_594;
  wire       [4:0]    t_output_tdata_595;
  wire       [4:0]    t_output_tdata_596;
  wire       [863:0]  t_output_tdata_597;
  wire       [0:0]    t_output_tdata_598;
  wire       [4:0]    t_output_tdata_599;
  wire       [4:0]    t_output_tdata_600;
  wire       [4:0]    t_output_tdata_601;
  wire       [5:0]    t_output_tdata_602;
  wire                t_output_tdata_603;
  wire       [4:0]    t_output_tdata_604;
  wire       [4:0]    t_output_tdata_605;
  wire       [9:0]    t_output_tdata_606;
  wire       [15:0]   t_output_tdata_607;
  wire                t_output_tdata_608;
  wire       [4:0]    t_output_tdata_609;
  wire       [4:0]    t_output_tdata_610;
  wire       [815:0]  t_output_tdata_611;
  wire       [0:0]    t_output_tdata_612;
  wire       [4:0]    t_output_tdata_613;
  wire       [4:0]    t_output_tdata_614;
  wire       [4:0]    t_output_tdata_615;
  wire       [5:0]    t_output_tdata_616;
  wire                t_output_tdata_617;
  wire       [4:0]    t_output_tdata_618;
  wire       [4:0]    t_output_tdata_619;
  wire       [9:0]    t_output_tdata_620;
  wire       [15:0]   t_output_tdata_621;
  wire                t_output_tdata_622;
  wire       [4:0]    t_output_tdata_623;
  wire       [4:0]    t_output_tdata_624;
  wire       [767:0]  t_output_tdata_625;
  wire       [0:0]    t_output_tdata_626;
  wire       [4:0]    t_output_tdata_627;
  wire       [4:0]    t_output_tdata_628;
  wire       [4:0]    t_output_tdata_629;
  wire       [5:0]    t_output_tdata_630;
  wire                t_output_tdata_631;
  wire       [4:0]    t_output_tdata_632;
  wire       [4:0]    t_output_tdata_633;
  wire       [9:0]    t_output_tdata_634;
  wire       [15:0]   t_output_tdata_635;
  wire                t_output_tdata_636;
  wire       [4:0]    t_output_tdata_637;
  wire       [4:0]    t_output_tdata_638;
  wire       [719:0]  t_output_tdata_639;
  wire       [0:0]    t_output_tdata_640;
  wire       [4:0]    t_output_tdata_641;
  wire       [4:0]    t_output_tdata_642;
  wire       [4:0]    t_output_tdata_643;
  wire       [5:0]    t_output_tdata_644;
  wire                t_output_tdata_645;
  wire       [4:0]    t_output_tdata_646;
  wire       [4:0]    t_output_tdata_647;
  wire       [9:0]    t_output_tdata_648;
  wire       [15:0]   t_output_tdata_649;
  wire                t_output_tdata_650;
  wire       [4:0]    t_output_tdata_651;
  wire       [4:0]    t_output_tdata_652;
  wire       [671:0]  t_output_tdata_653;
  wire       [0:0]    t_output_tdata_654;
  wire       [4:0]    t_output_tdata_655;
  wire       [4:0]    t_output_tdata_656;
  wire       [4:0]    t_output_tdata_657;
  wire       [5:0]    t_output_tdata_658;
  wire                t_output_tdata_659;
  wire       [4:0]    t_output_tdata_660;
  wire       [4:0]    t_output_tdata_661;
  wire       [9:0]    t_output_tdata_662;
  wire       [15:0]   t_output_tdata_663;
  wire                t_output_tdata_664;
  wire       [4:0]    t_output_tdata_665;
  wire       [4:0]    t_output_tdata_666;
  wire       [623:0]  t_output_tdata_667;
  wire       [0:0]    t_output_tdata_668;
  wire       [4:0]    t_output_tdata_669;
  wire       [4:0]    t_output_tdata_670;
  wire       [4:0]    t_output_tdata_671;
  wire       [5:0]    t_output_tdata_672;
  wire                t_output_tdata_673;
  wire       [4:0]    t_output_tdata_674;
  wire       [4:0]    t_output_tdata_675;
  wire       [9:0]    t_output_tdata_676;
  wire       [15:0]   t_output_tdata_677;
  wire                t_output_tdata_678;
  wire       [4:0]    t_output_tdata_679;
  wire       [4:0]    t_output_tdata_680;
  wire       [575:0]  t_output_tdata_681;
  wire       [0:0]    t_output_tdata_682;
  wire       [4:0]    t_output_tdata_683;
  wire       [4:0]    t_output_tdata_684;
  wire       [4:0]    t_output_tdata_685;
  wire       [5:0]    t_output_tdata_686;
  wire                t_output_tdata_687;
  wire       [4:0]    t_output_tdata_688;
  wire       [4:0]    t_output_tdata_689;
  wire       [9:0]    t_output_tdata_690;
  wire       [15:0]   t_output_tdata_691;
  wire                t_output_tdata_692;
  wire       [4:0]    t_output_tdata_693;
  wire       [4:0]    t_output_tdata_694;
  wire       [527:0]  t_output_tdata_695;
  wire       [0:0]    t_output_tdata_696;
  wire       [4:0]    t_output_tdata_697;
  wire       [4:0]    t_output_tdata_698;
  wire       [4:0]    t_output_tdata_699;
  wire       [5:0]    t_output_tdata_700;
  wire                t_output_tdata_701;
  wire       [4:0]    t_output_tdata_702;
  wire       [4:0]    t_output_tdata_703;
  wire       [9:0]    t_output_tdata_704;
  wire       [15:0]   t_output_tdata_705;
  wire                t_output_tdata_706;
  wire       [4:0]    t_output_tdata_707;
  wire       [4:0]    t_output_tdata_708;
  wire       [479:0]  t_output_tdata_709;
  wire       [0:0]    t_output_tdata_710;
  wire       [4:0]    t_output_tdata_711;
  wire       [4:0]    t_output_tdata_712;
  wire       [4:0]    t_output_tdata_713;
  wire       [5:0]    t_output_tdata_714;
  wire                t_output_tdata_715;
  wire       [4:0]    t_output_tdata_716;
  wire       [4:0]    t_output_tdata_717;
  wire       [9:0]    t_output_tdata_718;
  wire       [15:0]   t_output_tdata_719;
  wire                t_output_tdata_720;
  wire       [4:0]    t_output_tdata_721;
  wire       [4:0]    t_output_tdata_722;
  wire       [431:0]  t_output_tdata_723;
  wire       [0:0]    t_output_tdata_724;
  wire       [4:0]    t_output_tdata_725;
  wire       [4:0]    t_output_tdata_726;
  wire       [4:0]    t_output_tdata_727;
  wire       [5:0]    t_output_tdata_728;
  wire                t_output_tdata_729;
  wire       [4:0]    t_output_tdata_730;
  wire       [4:0]    t_output_tdata_731;
  wire       [9:0]    t_output_tdata_732;
  wire       [15:0]   t_output_tdata_733;
  wire                t_output_tdata_734;
  wire       [4:0]    t_output_tdata_735;
  wire       [4:0]    t_output_tdata_736;
  wire       [383:0]  t_output_tdata_737;
  wire       [0:0]    t_output_tdata_738;
  wire       [4:0]    t_output_tdata_739;
  wire       [4:0]    t_output_tdata_740;
  wire       [4:0]    t_output_tdata_741;
  wire       [5:0]    t_output_tdata_742;
  wire                t_output_tdata_743;
  wire       [4:0]    t_output_tdata_744;
  wire       [4:0]    t_output_tdata_745;
  wire       [9:0]    t_output_tdata_746;
  wire       [15:0]   t_output_tdata_747;
  wire                t_output_tdata_748;
  wire       [4:0]    t_output_tdata_749;
  wire       [4:0]    t_output_tdata_750;
  wire       [335:0]  t_output_tdata_751;
  wire       [0:0]    t_output_tdata_752;
  wire       [4:0]    t_output_tdata_753;
  wire       [4:0]    t_output_tdata_754;
  wire       [4:0]    t_output_tdata_755;
  wire       [5:0]    t_output_tdata_756;
  wire                t_output_tdata_757;
  wire       [4:0]    t_output_tdata_758;
  wire       [4:0]    t_output_tdata_759;
  wire       [9:0]    t_output_tdata_760;
  wire       [15:0]   t_output_tdata_761;
  wire                t_output_tdata_762;
  wire       [4:0]    t_output_tdata_763;
  wire       [4:0]    t_output_tdata_764;
  wire       [287:0]  t_output_tdata_765;
  wire       [0:0]    t_output_tdata_766;
  wire       [4:0]    t_output_tdata_767;
  wire       [4:0]    t_output_tdata_768;
  wire       [4:0]    t_output_tdata_769;
  wire       [5:0]    t_output_tdata_770;
  wire                t_output_tdata_771;
  wire       [4:0]    t_output_tdata_772;
  wire       [4:0]    t_output_tdata_773;
  wire       [9:0]    t_output_tdata_774;
  wire       [15:0]   t_output_tdata_775;
  wire                t_output_tdata_776;
  wire       [4:0]    t_output_tdata_777;
  wire       [4:0]    t_output_tdata_778;
  wire       [239:0]  t_output_tdata_779;
  wire       [0:0]    t_output_tdata_780;
  wire       [4:0]    t_output_tdata_781;
  wire       [4:0]    t_output_tdata_782;
  wire       [4:0]    t_output_tdata_783;
  wire       [5:0]    t_output_tdata_784;
  wire                t_output_tdata_785;
  wire       [4:0]    t_output_tdata_786;
  wire       [4:0]    t_output_tdata_787;
  wire       [9:0]    t_output_tdata_788;
  wire       [15:0]   t_output_tdata_789;
  wire                t_output_tdata_790;
  wire       [4:0]    t_output_tdata_791;
  wire       [4:0]    t_output_tdata_792;
  wire       [191:0]  t_output_tdata_793;
  wire       [0:0]    t_output_tdata_794;
  wire       [4:0]    t_output_tdata_795;
  wire       [4:0]    t_output_tdata_796;
  wire       [4:0]    t_output_tdata_797;
  wire       [5:0]    t_output_tdata_798;
  wire                t_output_tdata_799;
  wire       [4:0]    t_output_tdata_800;
  wire       [4:0]    t_output_tdata_801;
  wire       [9:0]    t_output_tdata_802;
  wire       [15:0]   t_output_tdata_803;
  wire                t_output_tdata_804;
  wire       [4:0]    t_output_tdata_805;
  wire       [4:0]    t_output_tdata_806;
  wire       [143:0]  t_output_tdata_807;
  wire       [0:0]    t_output_tdata_808;
  wire       [4:0]    t_output_tdata_809;
  wire       [4:0]    t_output_tdata_810;
  wire       [4:0]    t_output_tdata_811;
  wire       [5:0]    t_output_tdata_812;
  wire                t_output_tdata_813;
  wire       [4:0]    t_output_tdata_814;
  wire       [4:0]    t_output_tdata_815;
  wire       [9:0]    t_output_tdata_816;
  wire       [15:0]   t_output_tdata_817;
  wire                t_output_tdata_818;
  wire       [4:0]    t_output_tdata_819;
  wire       [4:0]    t_output_tdata_820;
  wire       [95:0]   t_output_tdata_821;
  wire       [0:0]    t_output_tdata_822;
  wire       [4:0]    t_output_tdata_823;
  wire       [4:0]    t_output_tdata_824;
  wire       [4:0]    t_output_tdata_825;
  wire       [5:0]    t_output_tdata_826;
  wire                t_output_tdata_827;
  wire       [4:0]    t_output_tdata_828;
  wire       [4:0]    t_output_tdata_829;
  wire       [9:0]    t_output_tdata_830;
  wire       [15:0]   t_output_tdata_831;
  wire                t_output_tdata_832;
  wire       [4:0]    t_output_tdata_833;
  wire       [4:0]    t_output_tdata_834;
  wire       [47:0]   t_output_tdata_835;
  wire       [0:0]    t_output_tdata_836;
  wire       [4:0]    t_output_tdata_837;
  wire       [4:0]    t_output_tdata_838;
  wire       [5:0]    t_output_tdata_839;
  wire       [4:0]    t_output_tdata_840;
  wire       [4:0]    t_output_tdata_841;
  wire       [9:0]    t_output_tdata_842;
  wire       [5:0]    t_output_tdata_843;
  wire       [4:0]    t_output_tdata_844;
  wire       [4:0]    t_output_tdata_845;
  wire       [9:0]    t_output_tdata_846;
  wire                int8InVld;
  wire                int4InVld;
  reg                 int8VldFlip;
  reg        [511:0]  dataDly;
  wire                int8Vld;
  wire       [1023:0] t_int8Data_0;
  wire       [7:0]    int8Data_0;
  wire       [7:0]    int8Data_1;
  wire       [7:0]    int8Data_2;
  wire       [7:0]    int8Data_3;
  wire       [7:0]    int8Data_4;
  wire       [7:0]    int8Data_5;
  wire       [7:0]    int8Data_6;
  wire       [7:0]    int8Data_7;
  wire       [7:0]    int8Data_8;
  wire       [7:0]    int8Data_9;
  wire       [7:0]    int8Data_10;
  wire       [7:0]    int8Data_11;
  wire       [7:0]    int8Data_12;
  wire       [7:0]    int8Data_13;
  wire       [7:0]    int8Data_14;
  wire       [7:0]    int8Data_15;
  wire       [7:0]    int8Data_16;
  wire       [7:0]    int8Data_17;
  wire       [7:0]    int8Data_18;
  wire       [7:0]    int8Data_19;
  wire       [7:0]    int8Data_20;
  wire       [7:0]    int8Data_21;
  wire       [7:0]    int8Data_22;
  wire       [7:0]    int8Data_23;
  wire       [7:0]    int8Data_24;
  wire       [7:0]    int8Data_25;
  wire       [7:0]    int8Data_26;
  wire       [7:0]    int8Data_27;
  wire       [7:0]    int8Data_28;
  wire       [7:0]    int8Data_29;
  wire       [7:0]    int8Data_30;
  wire       [7:0]    int8Data_31;
  wire       [7:0]    int8Data_32;
  wire       [7:0]    int8Data_33;
  wire       [7:0]    int8Data_34;
  wire       [7:0]    int8Data_35;
  wire       [7:0]    int8Data_36;
  wire       [7:0]    int8Data_37;
  wire       [7:0]    int8Data_38;
  wire       [7:0]    int8Data_39;
  wire       [7:0]    int8Data_40;
  wire       [7:0]    int8Data_41;
  wire       [7:0]    int8Data_42;
  wire       [7:0]    int8Data_43;
  wire       [7:0]    int8Data_44;
  wire       [7:0]    int8Data_45;
  wire       [7:0]    int8Data_46;
  wire       [7:0]    int8Data_47;
  wire       [7:0]    int8Data_48;
  wire       [7:0]    int8Data_49;
  wire       [7:0]    int8Data_50;
  wire       [7:0]    int8Data_51;
  wire       [7:0]    int8Data_52;
  wire       [7:0]    int8Data_53;
  wire       [7:0]    int8Data_54;
  wire       [7:0]    int8Data_55;
  wire       [7:0]    int8Data_56;
  wire       [7:0]    int8Data_57;
  wire       [7:0]    int8Data_58;
  wire       [7:0]    int8Data_59;
  wire       [7:0]    int8Data_60;
  wire       [7:0]    int8Data_61;
  wire       [7:0]    int8Data_62;
  wire       [7:0]    int8Data_63;
  wire       [7:0]    int8Data_64;
  wire       [7:0]    int8Data_65;
  wire       [7:0]    int8Data_66;
  wire       [7:0]    int8Data_67;
  wire       [7:0]    int8Data_68;
  wire       [7:0]    int8Data_69;
  wire       [7:0]    int8Data_70;
  wire       [7:0]    int8Data_71;
  wire       [7:0]    int8Data_72;
  wire       [7:0]    int8Data_73;
  wire       [7:0]    int8Data_74;
  wire       [7:0]    int8Data_75;
  wire       [7:0]    int8Data_76;
  wire       [7:0]    int8Data_77;
  wire       [7:0]    int8Data_78;
  wire       [7:0]    int8Data_79;
  wire       [7:0]    int8Data_80;
  wire       [7:0]    int8Data_81;
  wire       [7:0]    int8Data_82;
  wire       [7:0]    int8Data_83;
  wire       [7:0]    int8Data_84;
  wire       [7:0]    int8Data_85;
  wire       [7:0]    int8Data_86;
  wire       [7:0]    int8Data_87;
  wire       [7:0]    int8Data_88;
  wire       [7:0]    int8Data_89;
  wire       [7:0]    int8Data_90;
  wire       [7:0]    int8Data_91;
  wire       [7:0]    int8Data_92;
  wire       [7:0]    int8Data_93;
  wire       [7:0]    int8Data_94;
  wire       [7:0]    int8Data_95;
  wire       [7:0]    int8Data_96;
  wire       [7:0]    int8Data_97;
  wire       [7:0]    int8Data_98;
  wire       [7:0]    int8Data_99;
  wire       [7:0]    int8Data_100;
  wire       [7:0]    int8Data_101;
  wire       [7:0]    int8Data_102;
  wire       [7:0]    int8Data_103;
  wire       [7:0]    int8Data_104;
  wire       [7:0]    int8Data_105;
  wire       [7:0]    int8Data_106;
  wire       [7:0]    int8Data_107;
  wire       [7:0]    int8Data_108;
  wire       [7:0]    int8Data_109;
  wire       [7:0]    int8Data_110;
  wire       [7:0]    int8Data_111;
  wire       [7:0]    int8Data_112;
  wire       [7:0]    int8Data_113;
  wire       [7:0]    int8Data_114;
  wire       [7:0]    int8Data_115;
  wire       [7:0]    int8Data_116;
  wire       [7:0]    int8Data_117;
  wire       [7:0]    int8Data_118;
  wire       [7:0]    int8Data_119;
  wire       [7:0]    int8Data_120;
  wire       [7:0]    int8Data_121;
  wire       [7:0]    int8Data_122;
  wire       [7:0]    int8Data_123;
  wire       [7:0]    int8Data_124;
  wire       [7:0]    int8Data_125;
  wire       [7:0]    int8Data_126;
  wire       [7:0]    int8Data_127;
  wire       [7:0]    int4Data_0;
  wire       [7:0]    int4Data_1;
  wire       [7:0]    int4Data_2;
  wire       [7:0]    int4Data_3;
  wire       [7:0]    int4Data_4;
  wire       [7:0]    int4Data_5;
  wire       [7:0]    int4Data_6;
  wire       [7:0]    int4Data_7;
  wire       [7:0]    int4Data_8;
  wire       [7:0]    int4Data_9;
  wire       [7:0]    int4Data_10;
  wire       [7:0]    int4Data_11;
  wire       [7:0]    int4Data_12;
  wire       [7:0]    int4Data_13;
  wire       [7:0]    int4Data_14;
  wire       [7:0]    int4Data_15;
  wire       [7:0]    int4Data_16;
  wire       [7:0]    int4Data_17;
  wire       [7:0]    int4Data_18;
  wire       [7:0]    int4Data_19;
  wire       [7:0]    int4Data_20;
  wire       [7:0]    int4Data_21;
  wire       [7:0]    int4Data_22;
  wire       [7:0]    int4Data_23;
  wire       [7:0]    int4Data_24;
  wire       [7:0]    int4Data_25;
  wire       [7:0]    int4Data_26;
  wire       [7:0]    int4Data_27;
  wire       [7:0]    int4Data_28;
  wire       [7:0]    int4Data_29;
  wire       [7:0]    int4Data_30;
  wire       [7:0]    int4Data_31;
  wire       [7:0]    int4Data_32;
  wire       [7:0]    int4Data_33;
  wire       [7:0]    int4Data_34;
  wire       [7:0]    int4Data_35;
  wire       [7:0]    int4Data_36;
  wire       [7:0]    int4Data_37;
  wire       [7:0]    int4Data_38;
  wire       [7:0]    int4Data_39;
  wire       [7:0]    int4Data_40;
  wire       [7:0]    int4Data_41;
  wire       [7:0]    int4Data_42;
  wire       [7:0]    int4Data_43;
  wire       [7:0]    int4Data_44;
  wire       [7:0]    int4Data_45;
  wire       [7:0]    int4Data_46;
  wire       [7:0]    int4Data_47;
  wire       [7:0]    int4Data_48;
  wire       [7:0]    int4Data_49;
  wire       [7:0]    int4Data_50;
  wire       [7:0]    int4Data_51;
  wire       [7:0]    int4Data_52;
  wire       [7:0]    int4Data_53;
  wire       [7:0]    int4Data_54;
  wire       [7:0]    int4Data_55;
  wire       [7:0]    int4Data_56;
  wire       [7:0]    int4Data_57;
  wire       [7:0]    int4Data_58;
  wire       [7:0]    int4Data_59;
  wire       [7:0]    int4Data_60;
  wire       [7:0]    int4Data_61;
  wire       [7:0]    int4Data_62;
  wire       [7:0]    int4Data_63;
  wire       [7:0]    int4Data_64;
  wire       [7:0]    int4Data_65;
  wire       [7:0]    int4Data_66;
  wire       [7:0]    int4Data_67;
  wire       [7:0]    int4Data_68;
  wire       [7:0]    int4Data_69;
  wire       [7:0]    int4Data_70;
  wire       [7:0]    int4Data_71;
  wire       [7:0]    int4Data_72;
  wire       [7:0]    int4Data_73;
  wire       [7:0]    int4Data_74;
  wire       [7:0]    int4Data_75;
  wire       [7:0]    int4Data_76;
  wire       [7:0]    int4Data_77;
  wire       [7:0]    int4Data_78;
  wire       [7:0]    int4Data_79;
  wire       [7:0]    int4Data_80;
  wire       [7:0]    int4Data_81;
  wire       [7:0]    int4Data_82;
  wire       [7:0]    int4Data_83;
  wire       [7:0]    int4Data_84;
  wire       [7:0]    int4Data_85;
  wire       [7:0]    int4Data_86;
  wire       [7:0]    int4Data_87;
  wire       [7:0]    int4Data_88;
  wire       [7:0]    int4Data_89;
  wire       [7:0]    int4Data_90;
  wire       [7:0]    int4Data_91;
  wire       [7:0]    int4Data_92;
  wire       [7:0]    int4Data_93;
  wire       [7:0]    int4Data_94;
  wire       [7:0]    int4Data_95;
  wire       [7:0]    int4Data_96;
  wire       [7:0]    int4Data_97;
  wire       [7:0]    int4Data_98;
  wire       [7:0]    int4Data_99;
  wire       [7:0]    int4Data_100;
  wire       [7:0]    int4Data_101;
  wire       [7:0]    int4Data_102;
  wire       [7:0]    int4Data_103;
  wire       [7:0]    int4Data_104;
  wire       [7:0]    int4Data_105;
  wire       [7:0]    int4Data_106;
  wire       [7:0]    int4Data_107;
  wire       [7:0]    int4Data_108;
  wire       [7:0]    int4Data_109;
  wire       [7:0]    int4Data_110;
  wire       [7:0]    int4Data_111;
  wire       [7:0]    int4Data_112;
  wire       [7:0]    int4Data_113;
  wire       [7:0]    int4Data_114;
  wire       [7:0]    int4Data_115;
  wire       [7:0]    int4Data_116;
  wire       [7:0]    int4Data_117;
  wire       [7:0]    int4Data_118;
  wire       [7:0]    int4Data_119;
  wire       [7:0]    int4Data_120;
  wire       [7:0]    int4Data_121;
  wire       [7:0]    int4Data_122;
  wire       [7:0]    int4Data_123;
  wire       [7:0]    int4Data_124;
  wire       [7:0]    int4Data_125;
  wire       [7:0]    int4Data_126;
  wire       [7:0]    int4Data_127;
  wire                vldConv;
  wire       [7:0]    dataConv_0;
  wire       [7:0]    dataConv_1;
  wire       [7:0]    dataConv_2;
  wire       [7:0]    dataConv_3;
  wire       [7:0]    dataConv_4;
  wire       [7:0]    dataConv_5;
  wire       [7:0]    dataConv_6;
  wire       [7:0]    dataConv_7;
  wire       [7:0]    dataConv_8;
  wire       [7:0]    dataConv_9;
  wire       [7:0]    dataConv_10;
  wire       [7:0]    dataConv_11;
  wire       [7:0]    dataConv_12;
  wire       [7:0]    dataConv_13;
  wire       [7:0]    dataConv_14;
  wire       [7:0]    dataConv_15;
  wire       [7:0]    dataConv_16;
  wire       [7:0]    dataConv_17;
  wire       [7:0]    dataConv_18;
  wire       [7:0]    dataConv_19;
  wire       [7:0]    dataConv_20;
  wire       [7:0]    dataConv_21;
  wire       [7:0]    dataConv_22;
  wire       [7:0]    dataConv_23;
  wire       [7:0]    dataConv_24;
  wire       [7:0]    dataConv_25;
  wire       [7:0]    dataConv_26;
  wire       [7:0]    dataConv_27;
  wire       [7:0]    dataConv_28;
  wire       [7:0]    dataConv_29;
  wire       [7:0]    dataConv_30;
  wire       [7:0]    dataConv_31;
  wire       [7:0]    dataConv_32;
  wire       [7:0]    dataConv_33;
  wire       [7:0]    dataConv_34;
  wire       [7:0]    dataConv_35;
  wire       [7:0]    dataConv_36;
  wire       [7:0]    dataConv_37;
  wire       [7:0]    dataConv_38;
  wire       [7:0]    dataConv_39;
  wire       [7:0]    dataConv_40;
  wire       [7:0]    dataConv_41;
  wire       [7:0]    dataConv_42;
  wire       [7:0]    dataConv_43;
  wire       [7:0]    dataConv_44;
  wire       [7:0]    dataConv_45;
  wire       [7:0]    dataConv_46;
  wire       [7:0]    dataConv_47;
  wire       [7:0]    dataConv_48;
  wire       [7:0]    dataConv_49;
  wire       [7:0]    dataConv_50;
  wire       [7:0]    dataConv_51;
  wire       [7:0]    dataConv_52;
  wire       [7:0]    dataConv_53;
  wire       [7:0]    dataConv_54;
  wire       [7:0]    dataConv_55;
  wire       [7:0]    dataConv_56;
  wire       [7:0]    dataConv_57;
  wire       [7:0]    dataConv_58;
  wire       [7:0]    dataConv_59;
  wire       [7:0]    dataConv_60;
  wire       [7:0]    dataConv_61;
  wire       [7:0]    dataConv_62;
  wire       [7:0]    dataConv_63;
  wire       [7:0]    dataConv_64;
  wire       [7:0]    dataConv_65;
  wire       [7:0]    dataConv_66;
  wire       [7:0]    dataConv_67;
  wire       [7:0]    dataConv_68;
  wire       [7:0]    dataConv_69;
  wire       [7:0]    dataConv_70;
  wire       [7:0]    dataConv_71;
  wire       [7:0]    dataConv_72;
  wire       [7:0]    dataConv_73;
  wire       [7:0]    dataConv_74;
  wire       [7:0]    dataConv_75;
  wire       [7:0]    dataConv_76;
  wire       [7:0]    dataConv_77;
  wire       [7:0]    dataConv_78;
  wire       [7:0]    dataConv_79;
  wire       [7:0]    dataConv_80;
  wire       [7:0]    dataConv_81;
  wire       [7:0]    dataConv_82;
  wire       [7:0]    dataConv_83;
  wire       [7:0]    dataConv_84;
  wire       [7:0]    dataConv_85;
  wire       [7:0]    dataConv_86;
  wire       [7:0]    dataConv_87;
  wire       [7:0]    dataConv_88;
  wire       [7:0]    dataConv_89;
  wire       [7:0]    dataConv_90;
  wire       [7:0]    dataConv_91;
  wire       [7:0]    dataConv_92;
  wire       [7:0]    dataConv_93;
  wire       [7:0]    dataConv_94;
  wire       [7:0]    dataConv_95;
  wire       [7:0]    dataConv_96;
  wire       [7:0]    dataConv_97;
  wire       [7:0]    dataConv_98;
  wire       [7:0]    dataConv_99;
  wire       [7:0]    dataConv_100;
  wire       [7:0]    dataConv_101;
  wire       [7:0]    dataConv_102;
  wire       [7:0]    dataConv_103;
  wire       [7:0]    dataConv_104;
  wire       [7:0]    dataConv_105;
  wire       [7:0]    dataConv_106;
  wire       [7:0]    dataConv_107;
  wire       [7:0]    dataConv_108;
  wire       [7:0]    dataConv_109;
  wire       [7:0]    dataConv_110;
  wire       [7:0]    dataConv_111;
  wire       [7:0]    dataConv_112;
  wire       [7:0]    dataConv_113;
  wire       [7:0]    dataConv_114;
  wire       [7:0]    dataConv_115;
  wire       [7:0]    dataConv_116;
  wire       [7:0]    dataConv_117;
  wire       [7:0]    dataConv_118;
  wire       [7:0]    dataConv_119;
  wire       [7:0]    dataConv_120;
  wire       [7:0]    dataConv_121;
  wire       [7:0]    dataConv_122;
  wire       [7:0]    dataConv_123;
  wire       [7:0]    dataConv_124;
  wire       [7:0]    dataConv_125;
  wire       [7:0]    dataConv_126;
  wire       [7:0]    dataConv_127;
  (* max_fanout = 100 *) reg        [8:0]    zero;
  reg        [7:0]    subDiv_0;
  reg        [7:0]    subDiv_1;
  reg        [7:0]    subDiv_2;
  reg        [7:0]    subDiv_3;
  reg        [7:0]    subDiv_4;
  reg        [7:0]    subDiv_5;
  reg        [7:0]    subDiv_6;
  reg        [7:0]    subDiv_7;
  reg        [7:0]    subDiv_8;
  reg        [7:0]    subDiv_9;
  reg        [7:0]    subDiv_10;
  reg        [7:0]    subDiv_11;
  reg        [7:0]    subDiv_12;
  reg        [7:0]    subDiv_13;
  reg        [7:0]    subDiv_14;
  reg        [7:0]    subDiv_15;
  reg        [7:0]    subDiv_16;
  reg        [7:0]    subDiv_17;
  reg        [7:0]    subDiv_18;
  reg        [7:0]    subDiv_19;
  reg        [7:0]    subDiv_20;
  reg        [7:0]    subDiv_21;
  reg        [7:0]    subDiv_22;
  reg        [7:0]    subDiv_23;
  reg        [7:0]    subDiv_24;
  reg        [7:0]    subDiv_25;
  reg        [7:0]    subDiv_26;
  reg        [7:0]    subDiv_27;
  reg        [7:0]    subDiv_28;
  reg        [7:0]    subDiv_29;
  reg        [7:0]    subDiv_30;
  reg        [7:0]    subDiv_31;
  reg        [7:0]    subDiv_32;
  reg        [7:0]    subDiv_33;
  reg        [7:0]    subDiv_34;
  reg        [7:0]    subDiv_35;
  reg        [7:0]    subDiv_36;
  reg        [7:0]    subDiv_37;
  reg        [7:0]    subDiv_38;
  reg        [7:0]    subDiv_39;
  reg        [7:0]    subDiv_40;
  reg        [7:0]    subDiv_41;
  reg        [7:0]    subDiv_42;
  reg        [7:0]    subDiv_43;
  reg        [7:0]    subDiv_44;
  reg        [7:0]    subDiv_45;
  reg        [7:0]    subDiv_46;
  reg        [7:0]    subDiv_47;
  reg        [7:0]    subDiv_48;
  reg        [7:0]    subDiv_49;
  reg        [7:0]    subDiv_50;
  reg        [7:0]    subDiv_51;
  reg        [7:0]    subDiv_52;
  reg        [7:0]    subDiv_53;
  reg        [7:0]    subDiv_54;
  reg        [7:0]    subDiv_55;
  reg        [7:0]    subDiv_56;
  reg        [7:0]    subDiv_57;
  reg        [7:0]    subDiv_58;
  reg        [7:0]    subDiv_59;
  reg        [7:0]    subDiv_60;
  reg        [7:0]    subDiv_61;
  reg        [7:0]    subDiv_62;
  reg        [7:0]    subDiv_63;
  reg        [7:0]    subDiv_64;
  reg        [7:0]    subDiv_65;
  reg        [7:0]    subDiv_66;
  reg        [7:0]    subDiv_67;
  reg        [7:0]    subDiv_68;
  reg        [7:0]    subDiv_69;
  reg        [7:0]    subDiv_70;
  reg        [7:0]    subDiv_71;
  reg        [7:0]    subDiv_72;
  reg        [7:0]    subDiv_73;
  reg        [7:0]    subDiv_74;
  reg        [7:0]    subDiv_75;
  reg        [7:0]    subDiv_76;
  reg        [7:0]    subDiv_77;
  reg        [7:0]    subDiv_78;
  reg        [7:0]    subDiv_79;
  reg        [7:0]    subDiv_80;
  reg        [7:0]    subDiv_81;
  reg        [7:0]    subDiv_82;
  reg        [7:0]    subDiv_83;
  reg        [7:0]    subDiv_84;
  reg        [7:0]    subDiv_85;
  reg        [7:0]    subDiv_86;
  reg        [7:0]    subDiv_87;
  reg        [7:0]    subDiv_88;
  reg        [7:0]    subDiv_89;
  reg        [7:0]    subDiv_90;
  reg        [7:0]    subDiv_91;
  reg        [7:0]    subDiv_92;
  reg        [7:0]    subDiv_93;
  reg        [7:0]    subDiv_94;
  reg        [7:0]    subDiv_95;
  reg        [7:0]    subDiv_96;
  reg        [7:0]    subDiv_97;
  reg        [7:0]    subDiv_98;
  reg        [7:0]    subDiv_99;
  reg        [7:0]    subDiv_100;
  reg        [7:0]    subDiv_101;
  reg        [7:0]    subDiv_102;
  reg        [7:0]    subDiv_103;
  reg        [7:0]    subDiv_104;
  reg        [7:0]    subDiv_105;
  reg        [7:0]    subDiv_106;
  reg        [7:0]    subDiv_107;
  reg        [7:0]    subDiv_108;
  reg        [7:0]    subDiv_109;
  reg        [7:0]    subDiv_110;
  reg        [7:0]    subDiv_111;
  reg        [7:0]    subDiv_112;
  reg        [7:0]    subDiv_113;
  reg        [7:0]    subDiv_114;
  reg        [7:0]    subDiv_115;
  reg        [7:0]    subDiv_116;
  reg        [7:0]    subDiv_117;
  reg        [7:0]    subDiv_118;
  reg        [7:0]    subDiv_119;
  reg        [7:0]    subDiv_120;
  reg        [7:0]    subDiv_121;
  reg        [7:0]    subDiv_122;
  reg        [7:0]    subDiv_123;
  reg        [7:0]    subDiv_124;
  reg        [7:0]    subDiv_125;
  reg        [7:0]    subDiv_126;
  reg        [7:0]    subDiv_127;
  wire       [8:0]    dSub_0;
  wire       [8:0]    dSub_1;
  wire       [8:0]    dSub_2;
  wire       [8:0]    dSub_3;
  wire       [8:0]    dSub_4;
  wire       [8:0]    dSub_5;
  wire       [8:0]    dSub_6;
  wire       [8:0]    dSub_7;
  wire       [8:0]    dSub_8;
  wire       [8:0]    dSub_9;
  wire       [8:0]    dSub_10;
  wire       [8:0]    dSub_11;
  wire       [8:0]    dSub_12;
  wire       [8:0]    dSub_13;
  wire       [8:0]    dSub_14;
  wire       [8:0]    dSub_15;
  wire       [8:0]    dSub_16;
  wire       [8:0]    dSub_17;
  wire       [8:0]    dSub_18;
  wire       [8:0]    dSub_19;
  wire       [8:0]    dSub_20;
  wire       [8:0]    dSub_21;
  wire       [8:0]    dSub_22;
  wire       [8:0]    dSub_23;
  wire       [8:0]    dSub_24;
  wire       [8:0]    dSub_25;
  wire       [8:0]    dSub_26;
  wire       [8:0]    dSub_27;
  wire       [8:0]    dSub_28;
  wire       [8:0]    dSub_29;
  wire       [8:0]    dSub_30;
  wire       [8:0]    dSub_31;
  wire       [8:0]    dSub_32;
  wire       [8:0]    dSub_33;
  wire       [8:0]    dSub_34;
  wire       [8:0]    dSub_35;
  wire       [8:0]    dSub_36;
  wire       [8:0]    dSub_37;
  wire       [8:0]    dSub_38;
  wire       [8:0]    dSub_39;
  wire       [8:0]    dSub_40;
  wire       [8:0]    dSub_41;
  wire       [8:0]    dSub_42;
  wire       [8:0]    dSub_43;
  wire       [8:0]    dSub_44;
  wire       [8:0]    dSub_45;
  wire       [8:0]    dSub_46;
  wire       [8:0]    dSub_47;
  wire       [8:0]    dSub_48;
  wire       [8:0]    dSub_49;
  wire       [8:0]    dSub_50;
  wire       [8:0]    dSub_51;
  wire       [8:0]    dSub_52;
  wire       [8:0]    dSub_53;
  wire       [8:0]    dSub_54;
  wire       [8:0]    dSub_55;
  wire       [8:0]    dSub_56;
  wire       [8:0]    dSub_57;
  wire       [8:0]    dSub_58;
  wire       [8:0]    dSub_59;
  wire       [8:0]    dSub_60;
  wire       [8:0]    dSub_61;
  wire       [8:0]    dSub_62;
  wire       [8:0]    dSub_63;
  wire       [8:0]    dSub_64;
  wire       [8:0]    dSub_65;
  wire       [8:0]    dSub_66;
  wire       [8:0]    dSub_67;
  wire       [8:0]    dSub_68;
  wire       [8:0]    dSub_69;
  wire       [8:0]    dSub_70;
  wire       [8:0]    dSub_71;
  wire       [8:0]    dSub_72;
  wire       [8:0]    dSub_73;
  wire       [8:0]    dSub_74;
  wire       [8:0]    dSub_75;
  wire       [8:0]    dSub_76;
  wire       [8:0]    dSub_77;
  wire       [8:0]    dSub_78;
  wire       [8:0]    dSub_79;
  wire       [8:0]    dSub_80;
  wire       [8:0]    dSub_81;
  wire       [8:0]    dSub_82;
  wire       [8:0]    dSub_83;
  wire       [8:0]    dSub_84;
  wire       [8:0]    dSub_85;
  wire       [8:0]    dSub_86;
  wire       [8:0]    dSub_87;
  wire       [8:0]    dSub_88;
  wire       [8:0]    dSub_89;
  wire       [8:0]    dSub_90;
  wire       [8:0]    dSub_91;
  wire       [8:0]    dSub_92;
  wire       [8:0]    dSub_93;
  wire       [8:0]    dSub_94;
  wire       [8:0]    dSub_95;
  wire       [8:0]    dSub_96;
  wire       [8:0]    dSub_97;
  wire       [8:0]    dSub_98;
  wire       [8:0]    dSub_99;
  wire       [8:0]    dSub_100;
  wire       [8:0]    dSub_101;
  wire       [8:0]    dSub_102;
  wire       [8:0]    dSub_103;
  wire       [8:0]    dSub_104;
  wire       [8:0]    dSub_105;
  wire       [8:0]    dSub_106;
  wire       [8:0]    dSub_107;
  wire       [8:0]    dSub_108;
  wire       [8:0]    dSub_109;
  wire       [8:0]    dSub_110;
  wire       [8:0]    dSub_111;
  wire       [8:0]    dSub_112;
  wire       [8:0]    dSub_113;
  wire       [8:0]    dSub_114;
  wire       [8:0]    dSub_115;
  wire       [8:0]    dSub_116;
  wire       [8:0]    dSub_117;
  wire       [8:0]    dSub_118;
  wire       [8:0]    dSub_119;
  wire       [8:0]    dSub_120;
  wire       [8:0]    dSub_121;
  wire       [8:0]    dSub_122;
  wire       [8:0]    dSub_123;
  wire       [8:0]    dSub_124;
  wire       [8:0]    dSub_125;
  wire       [8:0]    dSub_126;
  wire       [8:0]    dSub_127;
  wire       [15:0]   dDly_0;
  wire       [15:0]   dDly_1;
  wire       [15:0]   dDly_2;
  wire       [15:0]   dDly_3;
  wire       [15:0]   dDly_4;
  wire       [15:0]   dDly_5;
  wire       [15:0]   dDly_6;
  wire       [15:0]   dDly_7;
  wire       [15:0]   dDly_8;
  wire       [15:0]   dDly_9;
  wire       [15:0]   dDly_10;
  wire       [15:0]   dDly_11;
  wire       [15:0]   dDly_12;
  wire       [15:0]   dDly_13;
  wire       [15:0]   dDly_14;
  wire       [15:0]   dDly_15;
  wire       [15:0]   dDly_16;
  wire       [15:0]   dDly_17;
  wire       [15:0]   dDly_18;
  wire       [15:0]   dDly_19;
  wire       [15:0]   dDly_20;
  wire       [15:0]   dDly_21;
  wire       [15:0]   dDly_22;
  wire       [15:0]   dDly_23;
  wire       [15:0]   dDly_24;
  wire       [15:0]   dDly_25;
  wire       [15:0]   dDly_26;
  wire       [15:0]   dDly_27;
  wire       [15:0]   dDly_28;
  wire       [15:0]   dDly_29;
  wire       [15:0]   dDly_30;
  wire       [15:0]   dDly_31;
  wire       [15:0]   dDly_32;
  wire       [15:0]   dDly_33;
  wire       [15:0]   dDly_34;
  wire       [15:0]   dDly_35;
  wire       [15:0]   dDly_36;
  wire       [15:0]   dDly_37;
  wire       [15:0]   dDly_38;
  wire       [15:0]   dDly_39;
  wire       [15:0]   dDly_40;
  wire       [15:0]   dDly_41;
  wire       [15:0]   dDly_42;
  wire       [15:0]   dDly_43;
  wire       [15:0]   dDly_44;
  wire       [15:0]   dDly_45;
  wire       [15:0]   dDly_46;
  wire       [15:0]   dDly_47;
  wire       [15:0]   dDly_48;
  wire       [15:0]   dDly_49;
  wire       [15:0]   dDly_50;
  wire       [15:0]   dDly_51;
  wire       [15:0]   dDly_52;
  wire       [15:0]   dDly_53;
  wire       [15:0]   dDly_54;
  wire       [15:0]   dDly_55;
  wire       [15:0]   dDly_56;
  wire       [15:0]   dDly_57;
  wire       [15:0]   dDly_58;
  wire       [15:0]   dDly_59;
  wire       [15:0]   dDly_60;
  wire       [15:0]   dDly_61;
  wire       [15:0]   dDly_62;
  wire       [15:0]   dDly_63;
  wire       [15:0]   dDly_64;
  wire       [15:0]   dDly_65;
  wire       [15:0]   dDly_66;
  wire       [15:0]   dDly_67;
  wire       [15:0]   dDly_68;
  wire       [15:0]   dDly_69;
  wire       [15:0]   dDly_70;
  wire       [15:0]   dDly_71;
  wire       [15:0]   dDly_72;
  wire       [15:0]   dDly_73;
  wire       [15:0]   dDly_74;
  wire       [15:0]   dDly_75;
  wire       [15:0]   dDly_76;
  wire       [15:0]   dDly_77;
  wire       [15:0]   dDly_78;
  wire       [15:0]   dDly_79;
  wire       [15:0]   dDly_80;
  wire       [15:0]   dDly_81;
  wire       [15:0]   dDly_82;
  wire       [15:0]   dDly_83;
  wire       [15:0]   dDly_84;
  wire       [15:0]   dDly_85;
  wire       [15:0]   dDly_86;
  wire       [15:0]   dDly_87;
  wire       [15:0]   dDly_88;
  wire       [15:0]   dDly_89;
  wire       [15:0]   dDly_90;
  wire       [15:0]   dDly_91;
  wire       [15:0]   dDly_92;
  wire       [15:0]   dDly_93;
  wire       [15:0]   dDly_94;
  wire       [15:0]   dDly_95;
  wire       [15:0]   dDly_96;
  wire       [15:0]   dDly_97;
  wire       [15:0]   dDly_98;
  wire       [15:0]   dDly_99;
  wire       [15:0]   dDly_100;
  wire       [15:0]   dDly_101;
  wire       [15:0]   dDly_102;
  wire       [15:0]   dDly_103;
  wire       [15:0]   dDly_104;
  wire       [15:0]   dDly_105;
  wire       [15:0]   dDly_106;
  wire       [15:0]   dDly_107;
  wire       [15:0]   dDly_108;
  wire       [15:0]   dDly_109;
  wire       [15:0]   dDly_110;
  wire       [15:0]   dDly_111;
  wire       [15:0]   dDly_112;
  wire       [15:0]   dDly_113;
  wire       [15:0]   dDly_114;
  wire       [15:0]   dDly_115;
  wire       [15:0]   dDly_116;
  wire       [15:0]   dDly_117;
  wire       [15:0]   dDly_118;
  wire       [15:0]   dDly_119;
  wire       [15:0]   dDly_120;
  wire       [15:0]   dDly_121;
  wire       [15:0]   dDly_122;
  wire       [15:0]   dDly_123;
  wire       [15:0]   dDly_124;
  wire       [15:0]   dDly_125;
  wire       [15:0]   dDly_126;
  wire       [15:0]   dDly_127;
  wire                d_0_valid;
  wire       [15:0]   d_0_payload;
  wire                d_1_valid;
  wire       [15:0]   d_1_payload;
  wire                d_2_valid;
  wire       [15:0]   d_2_payload;
  wire                d_3_valid;
  wire       [15:0]   d_3_payload;
  wire                d_4_valid;
  wire       [15:0]   d_4_payload;
  wire                d_5_valid;
  wire       [15:0]   d_5_payload;
  wire                d_6_valid;
  wire       [15:0]   d_6_payload;
  wire                d_7_valid;
  wire       [15:0]   d_7_payload;
  wire                d_8_valid;
  wire       [15:0]   d_8_payload;
  wire                d_9_valid;
  wire       [15:0]   d_9_payload;
  wire                d_10_valid;
  wire       [15:0]   d_10_payload;
  wire                d_11_valid;
  wire       [15:0]   d_11_payload;
  wire                d_12_valid;
  wire       [15:0]   d_12_payload;
  wire                d_13_valid;
  wire       [15:0]   d_13_payload;
  wire                d_14_valid;
  wire       [15:0]   d_14_payload;
  wire                d_15_valid;
  wire       [15:0]   d_15_payload;
  wire                d_16_valid;
  wire       [15:0]   d_16_payload;
  wire                d_17_valid;
  wire       [15:0]   d_17_payload;
  wire                d_18_valid;
  wire       [15:0]   d_18_payload;
  wire                d_19_valid;
  wire       [15:0]   d_19_payload;
  wire                d_20_valid;
  wire       [15:0]   d_20_payload;
  wire                d_21_valid;
  wire       [15:0]   d_21_payload;
  wire                d_22_valid;
  wire       [15:0]   d_22_payload;
  wire                d_23_valid;
  wire       [15:0]   d_23_payload;
  wire                d_24_valid;
  wire       [15:0]   d_24_payload;
  wire                d_25_valid;
  wire       [15:0]   d_25_payload;
  wire                d_26_valid;
  wire       [15:0]   d_26_payload;
  wire                d_27_valid;
  wire       [15:0]   d_27_payload;
  wire                d_28_valid;
  wire       [15:0]   d_28_payload;
  wire                d_29_valid;
  wire       [15:0]   d_29_payload;
  wire                d_30_valid;
  wire       [15:0]   d_30_payload;
  wire                d_31_valid;
  wire       [15:0]   d_31_payload;
  wire                d_32_valid;
  wire       [15:0]   d_32_payload;
  wire                d_33_valid;
  wire       [15:0]   d_33_payload;
  wire                d_34_valid;
  wire       [15:0]   d_34_payload;
  wire                d_35_valid;
  wire       [15:0]   d_35_payload;
  wire                d_36_valid;
  wire       [15:0]   d_36_payload;
  wire                d_37_valid;
  wire       [15:0]   d_37_payload;
  wire                d_38_valid;
  wire       [15:0]   d_38_payload;
  wire                d_39_valid;
  wire       [15:0]   d_39_payload;
  wire                d_40_valid;
  wire       [15:0]   d_40_payload;
  wire                d_41_valid;
  wire       [15:0]   d_41_payload;
  wire                d_42_valid;
  wire       [15:0]   d_42_payload;
  wire                d_43_valid;
  wire       [15:0]   d_43_payload;
  wire                d_44_valid;
  wire       [15:0]   d_44_payload;
  wire                d_45_valid;
  wire       [15:0]   d_45_payload;
  wire                d_46_valid;
  wire       [15:0]   d_46_payload;
  wire                d_47_valid;
  wire       [15:0]   d_47_payload;
  wire                d_48_valid;
  wire       [15:0]   d_48_payload;
  wire                d_49_valid;
  wire       [15:0]   d_49_payload;
  wire                d_50_valid;
  wire       [15:0]   d_50_payload;
  wire                d_51_valid;
  wire       [15:0]   d_51_payload;
  wire                d_52_valid;
  wire       [15:0]   d_52_payload;
  wire                d_53_valid;
  wire       [15:0]   d_53_payload;
  wire                d_54_valid;
  wire       [15:0]   d_54_payload;
  wire                d_55_valid;
  wire       [15:0]   d_55_payload;
  wire                d_56_valid;
  wire       [15:0]   d_56_payload;
  wire                d_57_valid;
  wire       [15:0]   d_57_payload;
  wire                d_58_valid;
  wire       [15:0]   d_58_payload;
  wire                d_59_valid;
  wire       [15:0]   d_59_payload;
  wire                d_60_valid;
  wire       [15:0]   d_60_payload;
  wire                d_61_valid;
  wire       [15:0]   d_61_payload;
  wire                d_62_valid;
  wire       [15:0]   d_62_payload;
  wire                d_63_valid;
  wire       [15:0]   d_63_payload;
  wire                d_64_valid;
  wire       [15:0]   d_64_payload;
  wire                d_65_valid;
  wire       [15:0]   d_65_payload;
  wire                d_66_valid;
  wire       [15:0]   d_66_payload;
  wire                d_67_valid;
  wire       [15:0]   d_67_payload;
  wire                d_68_valid;
  wire       [15:0]   d_68_payload;
  wire                d_69_valid;
  wire       [15:0]   d_69_payload;
  wire                d_70_valid;
  wire       [15:0]   d_70_payload;
  wire                d_71_valid;
  wire       [15:0]   d_71_payload;
  wire                d_72_valid;
  wire       [15:0]   d_72_payload;
  wire                d_73_valid;
  wire       [15:0]   d_73_payload;
  wire                d_74_valid;
  wire       [15:0]   d_74_payload;
  wire                d_75_valid;
  wire       [15:0]   d_75_payload;
  wire                d_76_valid;
  wire       [15:0]   d_76_payload;
  wire                d_77_valid;
  wire       [15:0]   d_77_payload;
  wire                d_78_valid;
  wire       [15:0]   d_78_payload;
  wire                d_79_valid;
  wire       [15:0]   d_79_payload;
  wire                d_80_valid;
  wire       [15:0]   d_80_payload;
  wire                d_81_valid;
  wire       [15:0]   d_81_payload;
  wire                d_82_valid;
  wire       [15:0]   d_82_payload;
  wire                d_83_valid;
  wire       [15:0]   d_83_payload;
  wire                d_84_valid;
  wire       [15:0]   d_84_payload;
  wire                d_85_valid;
  wire       [15:0]   d_85_payload;
  wire                d_86_valid;
  wire       [15:0]   d_86_payload;
  wire                d_87_valid;
  wire       [15:0]   d_87_payload;
  wire                d_88_valid;
  wire       [15:0]   d_88_payload;
  wire                d_89_valid;
  wire       [15:0]   d_89_payload;
  wire                d_90_valid;
  wire       [15:0]   d_90_payload;
  wire                d_91_valid;
  wire       [15:0]   d_91_payload;
  wire                d_92_valid;
  wire       [15:0]   d_92_payload;
  wire                d_93_valid;
  wire       [15:0]   d_93_payload;
  wire                d_94_valid;
  wire       [15:0]   d_94_payload;
  wire                d_95_valid;
  wire       [15:0]   d_95_payload;
  wire                d_96_valid;
  wire       [15:0]   d_96_payload;
  wire                d_97_valid;
  wire       [15:0]   d_97_payload;
  wire                d_98_valid;
  wire       [15:0]   d_98_payload;
  wire                d_99_valid;
  wire       [15:0]   d_99_payload;
  wire                d_100_valid;
  wire       [15:0]   d_100_payload;
  wire                d_101_valid;
  wire       [15:0]   d_101_payload;
  wire                d_102_valid;
  wire       [15:0]   d_102_payload;
  wire                d_103_valid;
  wire       [15:0]   d_103_payload;
  wire                d_104_valid;
  wire       [15:0]   d_104_payload;
  wire                d_105_valid;
  wire       [15:0]   d_105_payload;
  wire                d_106_valid;
  wire       [15:0]   d_106_payload;
  wire                d_107_valid;
  wire       [15:0]   d_107_payload;
  wire                d_108_valid;
  wire       [15:0]   d_108_payload;
  wire                d_109_valid;
  wire       [15:0]   d_109_payload;
  wire                d_110_valid;
  wire       [15:0]   d_110_payload;
  wire                d_111_valid;
  wire       [15:0]   d_111_payload;
  wire                d_112_valid;
  wire       [15:0]   d_112_payload;
  wire                d_113_valid;
  wire       [15:0]   d_113_payload;
  wire                d_114_valid;
  wire       [15:0]   d_114_payload;
  wire                d_115_valid;
  wire       [15:0]   d_115_payload;
  wire                d_116_valid;
  wire       [15:0]   d_116_payload;
  wire                d_117_valid;
  wire       [15:0]   d_117_payload;
  wire                d_118_valid;
  wire       [15:0]   d_118_payload;
  wire                d_119_valid;
  wire       [15:0]   d_119_payload;
  wire                d_120_valid;
  wire       [15:0]   d_120_payload;
  wire                d_121_valid;
  wire       [15:0]   d_121_payload;
  wire                d_122_valid;
  wire       [15:0]   d_122_payload;
  wire                d_123_valid;
  wire       [15:0]   d_123_payload;
  wire                d_124_valid;
  wire       [15:0]   d_124_payload;
  wire                d_125_valid;
  wire       [15:0]   d_125_payload;
  wire                d_126_valid;
  wire       [15:0]   d_126_payload;
  wire                d_127_valid;
  wire       [15:0]   d_127_payload;
  reg                 vldConv_delay_1;
  reg                 vldConv_delay_2;
  reg                 vldConv_delay_3;
  reg                 vldConv_delay_4;
  reg                 vld;
  wire       [2047:0] wPy;
  wire       [15:0]   t_output_tdata;
  wire       [15:0]   t_output_tdata_1;
  wire       [15:0]   t_output_tdata_2;
  wire       [15:0]   t_output_tdata_3;
  wire       [15:0]   t_output_tdata_4;
  wire       [15:0]   t_output_tdata_5;
  wire       [15:0]   t_output_tdata_6;
  wire       [15:0]   t_output_tdata_7;
  wire       [15:0]   t_output_tdata_8;
  wire       [15:0]   t_output_tdata_9;
  wire       [15:0]   t_output_tdata_10;
  wire       [15:0]   t_output_tdata_11;
  wire       [15:0]   t_output_tdata_12;
  wire       [15:0]   t_output_tdata_13;
  wire       [15:0]   t_output_tdata_14;
  wire       [15:0]   t_output_tdata_15;
  wire       [15:0]   t_output_tdata_16;
  wire       [15:0]   t_output_tdata_17;
  wire       [15:0]   t_output_tdata_18;
  wire       [15:0]   t_output_tdata_19;
  wire       [15:0]   t_output_tdata_20;
  wire       [15:0]   t_output_tdata_21;
  wire       [15:0]   t_output_tdata_22;
  wire       [15:0]   t_output_tdata_23;
  wire       [15:0]   t_output_tdata_24;
  wire       [15:0]   t_output_tdata_25;
  wire       [15:0]   t_output_tdata_26;
  wire       [15:0]   t_output_tdata_27;
  wire       [15:0]   t_output_tdata_28;
  wire       [15:0]   t_output_tdata_29;
  wire       [15:0]   t_output_tdata_30;
  wire       [15:0]   t_output_tdata_31;
  wire       [15:0]   t_output_tdata_32;
  wire       [15:0]   t_output_tdata_33;
  wire       [15:0]   t_output_tdata_34;
  wire       [15:0]   t_output_tdata_35;
  wire       [15:0]   t_output_tdata_36;
  wire       [15:0]   t_output_tdata_37;
  wire       [15:0]   t_output_tdata_38;
  wire       [15:0]   t_output_tdata_39;
  wire       [15:0]   t_output_tdata_40;
  wire       [15:0]   t_output_tdata_41;
  wire       [15:0]   t_output_tdata_42;
  wire       [15:0]   t_output_tdata_43;
  wire       [15:0]   t_output_tdata_44;
  wire       [15:0]   t_output_tdata_45;
  wire       [15:0]   t_output_tdata_46;
  wire       [15:0]   t_output_tdata_47;
  wire       [15:0]   t_output_tdata_48;
  wire       [15:0]   t_output_tdata_49;
  wire       [15:0]   t_output_tdata_50;
  wire       [15:0]   t_output_tdata_51;
  wire       [15:0]   t_output_tdata_52;
  wire       [15:0]   t_output_tdata_53;
  wire       [15:0]   t_output_tdata_54;
  wire       [15:0]   t_output_tdata_55;
  wire       [15:0]   t_output_tdata_56;
  wire       [15:0]   t_output_tdata_57;
  wire       [15:0]   t_output_tdata_58;
  wire       [15:0]   t_output_tdata_59;
  wire       [15:0]   t_output_tdata_60;
  wire       [15:0]   t_output_tdata_61;
  wire       [15:0]   t_output_tdata_62;
  wire       [15:0]   t_output_tdata_63;
  wire       [15:0]   t_output_tdata_64;
  wire       [15:0]   t_output_tdata_65;
  wire       [15:0]   t_output_tdata_66;
  wire       [15:0]   t_output_tdata_67;
  wire       [15:0]   t_output_tdata_68;
  wire       [15:0]   t_output_tdata_69;
  wire       [15:0]   t_output_tdata_70;
  wire       [15:0]   t_output_tdata_71;
  wire       [15:0]   t_output_tdata_72;
  wire       [15:0]   t_output_tdata_73;
  wire       [15:0]   t_output_tdata_74;
  wire       [15:0]   t_output_tdata_75;
  wire       [15:0]   t_output_tdata_76;
  wire       [15:0]   t_output_tdata_77;
  wire       [15:0]   t_output_tdata_78;
  wire       [15:0]   t_output_tdata_79;
  wire       [15:0]   t_output_tdata_80;
  wire       [15:0]   t_output_tdata_81;
  wire       [15:0]   t_output_tdata_82;
  wire       [15:0]   t_output_tdata_83;
  wire       [15:0]   t_output_tdata_84;
  wire       [15:0]   t_output_tdata_85;
  wire       [15:0]   t_output_tdata_86;
  wire       [15:0]   t_output_tdata_87;
  wire       [15:0]   t_output_tdata_88;
  wire       [15:0]   t_output_tdata_89;
  wire       [15:0]   t_output_tdata_90;
  wire       [15:0]   t_output_tdata_91;
  wire       [15:0]   t_output_tdata_92;
  wire       [15:0]   t_output_tdata_93;
  wire       [15:0]   t_output_tdata_94;
  wire       [15:0]   t_output_tdata_95;
  wire       [15:0]   t_output_tdata_96;
  wire       [15:0]   t_output_tdata_97;
  wire       [15:0]   t_output_tdata_98;
  wire       [15:0]   t_output_tdata_99;
  wire       [15:0]   t_output_tdata_100;
  wire       [15:0]   t_output_tdata_101;
  wire       [15:0]   t_output_tdata_102;
  wire       [15:0]   t_output_tdata_103;
  wire       [15:0]   t_output_tdata_104;
  wire       [15:0]   t_output_tdata_105;
  wire       [15:0]   t_output_tdata_106;
  wire       [15:0]   t_output_tdata_107;
  wire       [15:0]   t_output_tdata_108;
  wire       [15:0]   t_output_tdata_109;
  wire       [15:0]   t_output_tdata_110;
  wire       [15:0]   t_output_tdata_111;
  wire       [15:0]   t_output_tdata_112;
  wire       [15:0]   t_output_tdata_113;
  wire       [15:0]   t_output_tdata_114;
  wire       [15:0]   t_output_tdata_115;
  wire       [15:0]   t_output_tdata_116;
  wire       [15:0]   t_output_tdata_117;
  wire       [15:0]   t_output_tdata_118;
  wire       [15:0]   t_output_tdata_119;
  wire       [15:0]   t_output_tdata_120;
  wire       [15:0]   t_output_tdata_121;
  wire       [15:0]   t_output_tdata_122;
  wire       [15:0]   t_output_tdata_123;
  wire       [15:0]   t_output_tdata_124;
  wire       [15:0]   t_output_tdata_125;
  wire       [15:0]   t_output_tdata_126;
  wire       [15:0]   t_output_tdata_127;
  wire       [4:0]    t_output_tdata_128;
  wire       [4:0]    t_output_tdata_129;
  wire       [4:0]    t_output_tdata_130;
  wire       [4:0]    t_output_tdata_131;
  wire       [4:0]    t_output_tdata_132;
  wire       [4:0]    t_output_tdata_133;
  wire       [4:0]    t_output_tdata_134;
  wire       [4:0]    t_output_tdata_135;
  wire       [4:0]    t_output_tdata_136;
  wire       [4:0]    t_output_tdata_137;
  wire       [4:0]    t_output_tdata_138;
  wire       [4:0]    t_output_tdata_139;
  wire       [4:0]    t_output_tdata_140;
  wire       [4:0]    t_output_tdata_141;
  wire       [4:0]    t_output_tdata_142;
  wire       [4:0]    t_output_tdata_143;
  wire       [4:0]    t_output_tdata_144;
  wire       [4:0]    t_output_tdata_145;
  wire       [4:0]    t_output_tdata_146;
  wire       [4:0]    t_output_tdata_147;
  wire       [4:0]    t_output_tdata_148;
  wire       [4:0]    t_output_tdata_149;
  wire       [4:0]    t_output_tdata_150;
  wire       [4:0]    t_output_tdata_151;
  wire       [4:0]    t_output_tdata_152;
  wire       [4:0]    t_output_tdata_153;
  wire       [4:0]    t_output_tdata_154;
  wire       [4:0]    t_output_tdata_155;
  wire       [4:0]    t_output_tdata_156;
  wire       [4:0]    t_output_tdata_157;
  wire       [4:0]    t_output_tdata_158;
  wire       [4:0]    t_output_tdata_159;
  wire       [4:0]    t_output_tdata_160;
  wire       [4:0]    t_output_tdata_161;
  wire       [4:0]    t_output_tdata_162;
  wire       [4:0]    t_output_tdata_163;
  wire       [4:0]    t_output_tdata_164;
  wire       [4:0]    t_output_tdata_165;
  wire       [4:0]    t_output_tdata_166;
  wire       [4:0]    t_output_tdata_167;
  wire       [4:0]    t_output_tdata_168;
  wire       [4:0]    t_output_tdata_169;
  wire       [4:0]    t_output_tdata_170;
  wire       [4:0]    t_output_tdata_171;
  wire       [4:0]    t_output_tdata_172;
  wire       [4:0]    t_output_tdata_173;
  wire       [4:0]    t_output_tdata_174;
  wire       [4:0]    t_output_tdata_175;
  wire       [4:0]    t_output_tdata_176;
  wire       [4:0]    t_output_tdata_177;
  wire       [4:0]    t_output_tdata_178;
  wire       [4:0]    t_output_tdata_179;
  wire       [4:0]    t_output_tdata_180;
  wire       [4:0]    t_output_tdata_181;
  wire       [4:0]    t_output_tdata_182;
  wire       [4:0]    t_output_tdata_183;
  wire       [4:0]    t_output_tdata_184;
  wire       [4:0]    t_output_tdata_185;
  wire       [4:0]    t_output_tdata_186;
  wire       [4:0]    t_output_tdata_187;
  wire       [4:0]    t_output_tdata_188;
  wire       [4:0]    t_output_tdata_189;
  wire       [4:0]    t_output_tdata_190;
  wire       [4:0]    t_output_tdata_191;
  wire       [4:0]    t_output_tdata_192;
  wire       [4:0]    t_output_tdata_193;
  wire       [4:0]    t_output_tdata_194;
  wire       [4:0]    t_output_tdata_195;
  wire       [4:0]    t_output_tdata_196;
  wire       [4:0]    t_output_tdata_197;
  wire       [4:0]    t_output_tdata_198;
  wire       [4:0]    t_output_tdata_199;
  wire       [4:0]    t_output_tdata_200;
  wire       [4:0]    t_output_tdata_201;
  wire       [4:0]    t_output_tdata_202;
  wire       [4:0]    t_output_tdata_203;
  wire       [4:0]    t_output_tdata_204;
  wire       [4:0]    t_output_tdata_205;
  wire       [4:0]    t_output_tdata_206;
  wire       [4:0]    t_output_tdata_207;
  wire       [4:0]    t_output_tdata_208;
  wire       [4:0]    t_output_tdata_209;
  wire       [4:0]    t_output_tdata_210;
  wire       [4:0]    t_output_tdata_211;
  wire       [4:0]    t_output_tdata_212;
  wire       [4:0]    t_output_tdata_213;
  wire       [4:0]    t_output_tdata_214;
  wire       [4:0]    t_output_tdata_215;
  wire       [4:0]    t_output_tdata_216;
  wire       [4:0]    t_output_tdata_217;
  wire       [4:0]    t_output_tdata_218;
  wire       [4:0]    t_output_tdata_219;
  wire       [4:0]    t_output_tdata_220;
  wire       [4:0]    t_output_tdata_221;
  wire       [4:0]    t_output_tdata_222;
  wire       [4:0]    t_output_tdata_223;
  wire       [4:0]    t_output_tdata_224;
  wire       [4:0]    t_output_tdata_225;
  wire       [4:0]    t_output_tdata_226;
  wire       [4:0]    t_output_tdata_227;
  wire       [4:0]    t_output_tdata_228;
  wire       [4:0]    t_output_tdata_229;
  wire       [4:0]    t_output_tdata_230;
  wire       [4:0]    t_output_tdata_231;
  wire       [4:0]    t_output_tdata_232;
  wire       [4:0]    t_output_tdata_233;
  wire       [4:0]    t_output_tdata_234;
  wire       [4:0]    t_output_tdata_235;
  wire       [4:0]    t_output_tdata_236;
  wire       [4:0]    t_output_tdata_237;
  wire       [4:0]    t_output_tdata_238;
  wire       [4:0]    t_output_tdata_239;
  wire       [4:0]    t_output_tdata_240;
  wire       [4:0]    t_output_tdata_241;
  wire       [4:0]    t_output_tdata_242;
  wire       [4:0]    t_output_tdata_243;
  wire       [4:0]    t_output_tdata_244;
  wire       [4:0]    t_output_tdata_245;
  wire       [4:0]    t_output_tdata_246;
  wire       [4:0]    t_output_tdata_247;
  wire       [4:0]    t_output_tdata_248;
  wire       [4:0]    t_output_tdata_249;
  wire       [4:0]    t_output_tdata_250;
  wire       [4:0]    t_output_tdata_251;
  wire       [4:0]    t_output_tdata_252;
  wire       [4:0]    t_output_tdata_253;
  wire       [4:0]    t_output_tdata_254;
  wire       [4:0]    t_output_tdata_255;

  assign t_int4Data_0 = inputData_tdata[3 : 0];
  assign t_int4Data_1 = inputData_tdata[7 : 4];
  assign t_int4Data_2 = inputData_tdata[11 : 8];
  assign t_int4Data_3 = inputData_tdata[15 : 12];
  assign t_int4Data_4 = inputData_tdata[19 : 16];
  assign t_int4Data_5 = inputData_tdata[23 : 20];
  assign t_int4Data_6 = inputData_tdata[27 : 24];
  assign t_int4Data_7 = inputData_tdata[31 : 28];
  assign t_int4Data_8 = inputData_tdata[35 : 32];
  assign t_int4Data_9 = inputData_tdata[39 : 36];
  assign t_int4Data_10 = inputData_tdata[43 : 40];
  assign t_int4Data_11 = inputData_tdata[47 : 44];
  assign t_int4Data_12 = inputData_tdata[51 : 48];
  assign t_int4Data_13 = inputData_tdata[55 : 52];
  assign t_int4Data_14 = inputData_tdata[59 : 56];
  assign t_int4Data_15 = inputData_tdata[63 : 60];
  assign t_int4Data_16 = inputData_tdata[67 : 64];
  assign t_int4Data_17 = inputData_tdata[71 : 68];
  assign t_int4Data_18 = inputData_tdata[75 : 72];
  assign t_int4Data_19 = inputData_tdata[79 : 76];
  assign t_int4Data_20 = inputData_tdata[83 : 80];
  assign t_int4Data_21 = inputData_tdata[87 : 84];
  assign t_int4Data_22 = inputData_tdata[91 : 88];
  assign t_int4Data_23 = inputData_tdata[95 : 92];
  assign t_int4Data_24 = inputData_tdata[99 : 96];
  assign t_int4Data_25 = inputData_tdata[103 : 100];
  assign t_int4Data_26 = inputData_tdata[107 : 104];
  assign t_int4Data_27 = inputData_tdata[111 : 108];
  assign t_int4Data_28 = inputData_tdata[115 : 112];
  assign t_int4Data_29 = inputData_tdata[119 : 116];
  assign t_int4Data_30 = inputData_tdata[123 : 120];
  assign t_int4Data_31 = inputData_tdata[127 : 124];
  assign t_int4Data_32 = inputData_tdata[131 : 128];
  assign t_int4Data_33 = inputData_tdata[135 : 132];
  assign t_int4Data_34 = inputData_tdata[139 : 136];
  assign t_int4Data_35 = inputData_tdata[143 : 140];
  assign t_int4Data_36 = inputData_tdata[147 : 144];
  assign t_int4Data_37 = inputData_tdata[151 : 148];
  assign t_int4Data_38 = inputData_tdata[155 : 152];
  assign t_int4Data_39 = inputData_tdata[159 : 156];
  assign t_int4Data_40 = inputData_tdata[163 : 160];
  assign t_int4Data_41 = inputData_tdata[167 : 164];
  assign t_int4Data_42 = inputData_tdata[171 : 168];
  assign t_int4Data_43 = inputData_tdata[175 : 172];
  assign t_int4Data_44 = inputData_tdata[179 : 176];
  assign t_int4Data_45 = inputData_tdata[183 : 180];
  assign t_int4Data_46 = inputData_tdata[187 : 184];
  assign t_int4Data_47 = inputData_tdata[191 : 188];
  assign t_int4Data_48 = inputData_tdata[195 : 192];
  assign t_int4Data_49 = inputData_tdata[199 : 196];
  assign t_int4Data_50 = inputData_tdata[203 : 200];
  assign t_int4Data_51 = inputData_tdata[207 : 204];
  assign t_int4Data_52 = inputData_tdata[211 : 208];
  assign t_int4Data_53 = inputData_tdata[215 : 212];
  assign t_int4Data_54 = inputData_tdata[219 : 216];
  assign t_int4Data_55 = inputData_tdata[223 : 220];
  assign t_int4Data_56 = inputData_tdata[227 : 224];
  assign t_int4Data_57 = inputData_tdata[231 : 228];
  assign t_int4Data_58 = inputData_tdata[235 : 232];
  assign t_int4Data_59 = inputData_tdata[239 : 236];
  assign t_int4Data_60 = inputData_tdata[243 : 240];
  assign t_int4Data_61 = inputData_tdata[247 : 244];
  assign t_int4Data_62 = inputData_tdata[251 : 248];
  assign t_int4Data_63 = inputData_tdata[255 : 252];
  assign t_int4Data_64 = inputData_tdata[259 : 256];
  assign t_int4Data_65 = inputData_tdata[263 : 260];
  assign t_int4Data_66 = inputData_tdata[267 : 264];
  assign t_int4Data_67 = inputData_tdata[271 : 268];
  assign t_int4Data_68 = inputData_tdata[275 : 272];
  assign t_int4Data_69 = inputData_tdata[279 : 276];
  assign t_int4Data_70 = inputData_tdata[283 : 280];
  assign t_int4Data_71 = inputData_tdata[287 : 284];
  assign t_int4Data_72 = inputData_tdata[291 : 288];
  assign t_int4Data_73 = inputData_tdata[295 : 292];
  assign t_int4Data_74 = inputData_tdata[299 : 296];
  assign t_int4Data_75 = inputData_tdata[303 : 300];
  assign t_int4Data_76 = inputData_tdata[307 : 304];
  assign t_int4Data_77 = inputData_tdata[311 : 308];
  assign t_int4Data_78 = inputData_tdata[315 : 312];
  assign t_int4Data_79 = inputData_tdata[319 : 316];
  assign t_int4Data_80 = inputData_tdata[323 : 320];
  assign t_int4Data_81 = inputData_tdata[327 : 324];
  assign t_int4Data_82 = inputData_tdata[331 : 328];
  assign t_int4Data_83 = inputData_tdata[335 : 332];
  assign t_int4Data_84 = inputData_tdata[339 : 336];
  assign t_int4Data_85 = inputData_tdata[343 : 340];
  assign t_int4Data_86 = inputData_tdata[347 : 344];
  assign t_int4Data_87 = inputData_tdata[351 : 348];
  assign t_int4Data_88 = inputData_tdata[355 : 352];
  assign t_int4Data_89 = inputData_tdata[359 : 356];
  assign t_int4Data_90 = inputData_tdata[363 : 360];
  assign t_int4Data_91 = inputData_tdata[367 : 364];
  assign t_int4Data_92 = inputData_tdata[371 : 368];
  assign t_int4Data_93 = inputData_tdata[375 : 372];
  assign t_int4Data_94 = inputData_tdata[379 : 376];
  assign t_int4Data_95 = inputData_tdata[383 : 380];
  assign t_int4Data_96 = inputData_tdata[387 : 384];
  assign t_int4Data_97 = inputData_tdata[391 : 388];
  assign t_int4Data_98 = inputData_tdata[395 : 392];
  assign t_int4Data_99 = inputData_tdata[399 : 396];
  assign t_int4Data_100 = inputData_tdata[403 : 400];
  assign t_int4Data_101 = inputData_tdata[407 : 404];
  assign t_int4Data_102 = inputData_tdata[411 : 408];
  assign t_int4Data_103 = inputData_tdata[415 : 412];
  assign t_int4Data_104 = inputData_tdata[419 : 416];
  assign t_int4Data_105 = inputData_tdata[423 : 420];
  assign t_int4Data_106 = inputData_tdata[427 : 424];
  assign t_int4Data_107 = inputData_tdata[431 : 428];
  assign t_int4Data_108 = inputData_tdata[435 : 432];
  assign t_int4Data_109 = inputData_tdata[439 : 436];
  assign t_int4Data_110 = inputData_tdata[443 : 440];
  assign t_int4Data_111 = inputData_tdata[447 : 444];
  assign t_int4Data_112 = inputData_tdata[451 : 448];
  assign t_int4Data_113 = inputData_tdata[455 : 452];
  assign t_int4Data_114 = inputData_tdata[459 : 456];
  assign t_int4Data_115 = inputData_tdata[463 : 460];
  assign t_int4Data_116 = inputData_tdata[467 : 464];
  assign t_int4Data_117 = inputData_tdata[471 : 468];
  assign t_int4Data_118 = inputData_tdata[475 : 472];
  assign t_int4Data_119 = inputData_tdata[479 : 476];
  assign t_int4Data_120 = inputData_tdata[483 : 480];
  assign t_int4Data_121 = inputData_tdata[487 : 484];
  assign t_int4Data_122 = inputData_tdata[491 : 488];
  assign t_int4Data_123 = inputData_tdata[495 : 492];
  assign t_int4Data_124 = inputData_tdata[499 : 496];
  assign t_int4Data_125 = inputData_tdata[503 : 500];
  assign t_int4Data_126 = inputData_tdata[507 : 504];
  assign t_int4Data_127 = inputData_tdata[511 : 508];
  assign t_dSub_0 = ($signed(t_dSub_0_1) - $signed(zero));
  assign t_dSub_0_1 = {1'b0,subDiv_0};
  assign t_dSub_1 = ($signed(t_dSub_1_1) - $signed(zero));
  assign t_dSub_1_1 = {1'b0,subDiv_1};
  assign t_dSub_2 = ($signed(t_dSub_2_1) - $signed(zero));
  assign t_dSub_2_1 = {1'b0,subDiv_2};
  assign t_dSub_3 = ($signed(t_dSub_3_1) - $signed(zero));
  assign t_dSub_3_1 = {1'b0,subDiv_3};
  assign t_dSub_4 = ($signed(t_dSub_4_1) - $signed(zero));
  assign t_dSub_4_1 = {1'b0,subDiv_4};
  assign t_dSub_5 = ($signed(t_dSub_5_1) - $signed(zero));
  assign t_dSub_5_1 = {1'b0,subDiv_5};
  assign t_dSub_6 = ($signed(t_dSub_6_1) - $signed(zero));
  assign t_dSub_6_1 = {1'b0,subDiv_6};
  assign t_dSub_7 = ($signed(t_dSub_7_1) - $signed(zero));
  assign t_dSub_7_1 = {1'b0,subDiv_7};
  assign t_dSub_8 = ($signed(t_dSub_8_1) - $signed(zero));
  assign t_dSub_8_1 = {1'b0,subDiv_8};
  assign t_dSub_9 = ($signed(t_dSub_9_1) - $signed(zero));
  assign t_dSub_9_1 = {1'b0,subDiv_9};
  assign t_dSub_10 = ($signed(t_dSub_10_1) - $signed(zero));
  assign t_dSub_10_1 = {1'b0,subDiv_10};
  assign t_dSub_11 = ($signed(t_dSub_11_1) - $signed(zero));
  assign t_dSub_11_1 = {1'b0,subDiv_11};
  assign t_dSub_12 = ($signed(t_dSub_12_1) - $signed(zero));
  assign t_dSub_12_1 = {1'b0,subDiv_12};
  assign t_dSub_13 = ($signed(t_dSub_13_1) - $signed(zero));
  assign t_dSub_13_1 = {1'b0,subDiv_13};
  assign t_dSub_14 = ($signed(t_dSub_14_1) - $signed(zero));
  assign t_dSub_14_1 = {1'b0,subDiv_14};
  assign t_dSub_15 = ($signed(t_dSub_15_1) - $signed(zero));
  assign t_dSub_15_1 = {1'b0,subDiv_15};
  assign t_dSub_16 = ($signed(t_dSub_16_1) - $signed(zero));
  assign t_dSub_16_1 = {1'b0,subDiv_16};
  assign t_dSub_17 = ($signed(t_dSub_17_1) - $signed(zero));
  assign t_dSub_17_1 = {1'b0,subDiv_17};
  assign t_dSub_18 = ($signed(t_dSub_18_1) - $signed(zero));
  assign t_dSub_18_1 = {1'b0,subDiv_18};
  assign t_dSub_19 = ($signed(t_dSub_19_1) - $signed(zero));
  assign t_dSub_19_1 = {1'b0,subDiv_19};
  assign t_dSub_20 = ($signed(t_dSub_20_1) - $signed(zero));
  assign t_dSub_20_1 = {1'b0,subDiv_20};
  assign t_dSub_21 = ($signed(t_dSub_21_1) - $signed(zero));
  assign t_dSub_21_1 = {1'b0,subDiv_21};
  assign t_dSub_22 = ($signed(t_dSub_22_1) - $signed(zero));
  assign t_dSub_22_1 = {1'b0,subDiv_22};
  assign t_dSub_23 = ($signed(t_dSub_23_1) - $signed(zero));
  assign t_dSub_23_1 = {1'b0,subDiv_23};
  assign t_dSub_24 = ($signed(t_dSub_24_1) - $signed(zero));
  assign t_dSub_24_1 = {1'b0,subDiv_24};
  assign t_dSub_25 = ($signed(t_dSub_25_1) - $signed(zero));
  assign t_dSub_25_1 = {1'b0,subDiv_25};
  assign t_dSub_26 = ($signed(t_dSub_26_1) - $signed(zero));
  assign t_dSub_26_1 = {1'b0,subDiv_26};
  assign t_dSub_27 = ($signed(t_dSub_27_1) - $signed(zero));
  assign t_dSub_27_1 = {1'b0,subDiv_27};
  assign t_dSub_28 = ($signed(t_dSub_28_1) - $signed(zero));
  assign t_dSub_28_1 = {1'b0,subDiv_28};
  assign t_dSub_29 = ($signed(t_dSub_29_1) - $signed(zero));
  assign t_dSub_29_1 = {1'b0,subDiv_29};
  assign t_dSub_30 = ($signed(t_dSub_30_1) - $signed(zero));
  assign t_dSub_30_1 = {1'b0,subDiv_30};
  assign t_dSub_31 = ($signed(t_dSub_31_1) - $signed(zero));
  assign t_dSub_31_1 = {1'b0,subDiv_31};
  assign t_dSub_32 = ($signed(t_dSub_32_1) - $signed(zero));
  assign t_dSub_32_1 = {1'b0,subDiv_32};
  assign t_dSub_33 = ($signed(t_dSub_33_1) - $signed(zero));
  assign t_dSub_33_1 = {1'b0,subDiv_33};
  assign t_dSub_34 = ($signed(t_dSub_34_1) - $signed(zero));
  assign t_dSub_34_1 = {1'b0,subDiv_34};
  assign t_dSub_35 = ($signed(t_dSub_35_1) - $signed(zero));
  assign t_dSub_35_1 = {1'b0,subDiv_35};
  assign t_dSub_36 = ($signed(t_dSub_36_1) - $signed(zero));
  assign t_dSub_36_1 = {1'b0,subDiv_36};
  assign t_dSub_37 = ($signed(t_dSub_37_1) - $signed(zero));
  assign t_dSub_37_1 = {1'b0,subDiv_37};
  assign t_dSub_38 = ($signed(t_dSub_38_1) - $signed(zero));
  assign t_dSub_38_1 = {1'b0,subDiv_38};
  assign t_dSub_39 = ($signed(t_dSub_39_1) - $signed(zero));
  assign t_dSub_39_1 = {1'b0,subDiv_39};
  assign t_dSub_40 = ($signed(t_dSub_40_1) - $signed(zero));
  assign t_dSub_40_1 = {1'b0,subDiv_40};
  assign t_dSub_41 = ($signed(t_dSub_41_1) - $signed(zero));
  assign t_dSub_41_1 = {1'b0,subDiv_41};
  assign t_dSub_42 = ($signed(t_dSub_42_1) - $signed(zero));
  assign t_dSub_42_1 = {1'b0,subDiv_42};
  assign t_dSub_43 = ($signed(t_dSub_43_1) - $signed(zero));
  assign t_dSub_43_1 = {1'b0,subDiv_43};
  assign t_dSub_44 = ($signed(t_dSub_44_1) - $signed(zero));
  assign t_dSub_44_1 = {1'b0,subDiv_44};
  assign t_dSub_45 = ($signed(t_dSub_45_1) - $signed(zero));
  assign t_dSub_45_1 = {1'b0,subDiv_45};
  assign t_dSub_46 = ($signed(t_dSub_46_1) - $signed(zero));
  assign t_dSub_46_1 = {1'b0,subDiv_46};
  assign t_dSub_47 = ($signed(t_dSub_47_1) - $signed(zero));
  assign t_dSub_47_1 = {1'b0,subDiv_47};
  assign t_dSub_48 = ($signed(t_dSub_48_1) - $signed(zero));
  assign t_dSub_48_1 = {1'b0,subDiv_48};
  assign t_dSub_49 = ($signed(t_dSub_49_1) - $signed(zero));
  assign t_dSub_49_1 = {1'b0,subDiv_49};
  assign t_dSub_50 = ($signed(t_dSub_50_1) - $signed(zero));
  assign t_dSub_50_1 = {1'b0,subDiv_50};
  assign t_dSub_51 = ($signed(t_dSub_51_1) - $signed(zero));
  assign t_dSub_51_1 = {1'b0,subDiv_51};
  assign t_dSub_52 = ($signed(t_dSub_52_1) - $signed(zero));
  assign t_dSub_52_1 = {1'b0,subDiv_52};
  assign t_dSub_53 = ($signed(t_dSub_53_1) - $signed(zero));
  assign t_dSub_53_1 = {1'b0,subDiv_53};
  assign t_dSub_54 = ($signed(t_dSub_54_1) - $signed(zero));
  assign t_dSub_54_1 = {1'b0,subDiv_54};
  assign t_dSub_55 = ($signed(t_dSub_55_1) - $signed(zero));
  assign t_dSub_55_1 = {1'b0,subDiv_55};
  assign t_dSub_56 = ($signed(t_dSub_56_1) - $signed(zero));
  assign t_dSub_56_1 = {1'b0,subDiv_56};
  assign t_dSub_57 = ($signed(t_dSub_57_1) - $signed(zero));
  assign t_dSub_57_1 = {1'b0,subDiv_57};
  assign t_dSub_58 = ($signed(t_dSub_58_1) - $signed(zero));
  assign t_dSub_58_1 = {1'b0,subDiv_58};
  assign t_dSub_59 = ($signed(t_dSub_59_1) - $signed(zero));
  assign t_dSub_59_1 = {1'b0,subDiv_59};
  assign t_dSub_60 = ($signed(t_dSub_60_1) - $signed(zero));
  assign t_dSub_60_1 = {1'b0,subDiv_60};
  assign t_dSub_61 = ($signed(t_dSub_61_1) - $signed(zero));
  assign t_dSub_61_1 = {1'b0,subDiv_61};
  assign t_dSub_62 = ($signed(t_dSub_62_1) - $signed(zero));
  assign t_dSub_62_1 = {1'b0,subDiv_62};
  assign t_dSub_63 = ($signed(t_dSub_63_1) - $signed(zero));
  assign t_dSub_63_1 = {1'b0,subDiv_63};
  assign t_dSub_64 = ($signed(t_dSub_64_1) - $signed(zero));
  assign t_dSub_64_1 = {1'b0,subDiv_64};
  assign t_dSub_65 = ($signed(t_dSub_65_1) - $signed(zero));
  assign t_dSub_65_1 = {1'b0,subDiv_65};
  assign t_dSub_66 = ($signed(t_dSub_66_1) - $signed(zero));
  assign t_dSub_66_1 = {1'b0,subDiv_66};
  assign t_dSub_67 = ($signed(t_dSub_67_1) - $signed(zero));
  assign t_dSub_67_1 = {1'b0,subDiv_67};
  assign t_dSub_68 = ($signed(t_dSub_68_1) - $signed(zero));
  assign t_dSub_68_1 = {1'b0,subDiv_68};
  assign t_dSub_69 = ($signed(t_dSub_69_1) - $signed(zero));
  assign t_dSub_69_1 = {1'b0,subDiv_69};
  assign t_dSub_70 = ($signed(t_dSub_70_1) - $signed(zero));
  assign t_dSub_70_1 = {1'b0,subDiv_70};
  assign t_dSub_71 = ($signed(t_dSub_71_1) - $signed(zero));
  assign t_dSub_71_1 = {1'b0,subDiv_71};
  assign t_dSub_72 = ($signed(t_dSub_72_1) - $signed(zero));
  assign t_dSub_72_1 = {1'b0,subDiv_72};
  assign t_dSub_73 = ($signed(t_dSub_73_1) - $signed(zero));
  assign t_dSub_73_1 = {1'b0,subDiv_73};
  assign t_dSub_74 = ($signed(t_dSub_74_1) - $signed(zero));
  assign t_dSub_74_1 = {1'b0,subDiv_74};
  assign t_dSub_75 = ($signed(t_dSub_75_1) - $signed(zero));
  assign t_dSub_75_1 = {1'b0,subDiv_75};
  assign t_dSub_76 = ($signed(t_dSub_76_1) - $signed(zero));
  assign t_dSub_76_1 = {1'b0,subDiv_76};
  assign t_dSub_77 = ($signed(t_dSub_77_1) - $signed(zero));
  assign t_dSub_77_1 = {1'b0,subDiv_77};
  assign t_dSub_78 = ($signed(t_dSub_78_1) - $signed(zero));
  assign t_dSub_78_1 = {1'b0,subDiv_78};
  assign t_dSub_79 = ($signed(t_dSub_79_1) - $signed(zero));
  assign t_dSub_79_1 = {1'b0,subDiv_79};
  assign t_dSub_80 = ($signed(t_dSub_80_1) - $signed(zero));
  assign t_dSub_80_1 = {1'b0,subDiv_80};
  assign t_dSub_81 = ($signed(t_dSub_81_1) - $signed(zero));
  assign t_dSub_81_1 = {1'b0,subDiv_81};
  assign t_dSub_82 = ($signed(t_dSub_82_1) - $signed(zero));
  assign t_dSub_82_1 = {1'b0,subDiv_82};
  assign t_dSub_83 = ($signed(t_dSub_83_1) - $signed(zero));
  assign t_dSub_83_1 = {1'b0,subDiv_83};
  assign t_dSub_84 = ($signed(t_dSub_84_1) - $signed(zero));
  assign t_dSub_84_1 = {1'b0,subDiv_84};
  assign t_dSub_85 = ($signed(t_dSub_85_1) - $signed(zero));
  assign t_dSub_85_1 = {1'b0,subDiv_85};
  assign t_dSub_86 = ($signed(t_dSub_86_1) - $signed(zero));
  assign t_dSub_86_1 = {1'b0,subDiv_86};
  assign t_dSub_87 = ($signed(t_dSub_87_1) - $signed(zero));
  assign t_dSub_87_1 = {1'b0,subDiv_87};
  assign t_dSub_88 = ($signed(t_dSub_88_1) - $signed(zero));
  assign t_dSub_88_1 = {1'b0,subDiv_88};
  assign t_dSub_89 = ($signed(t_dSub_89_1) - $signed(zero));
  assign t_dSub_89_1 = {1'b0,subDiv_89};
  assign t_dSub_90 = ($signed(t_dSub_90_1) - $signed(zero));
  assign t_dSub_90_1 = {1'b0,subDiv_90};
  assign t_dSub_91 = ($signed(t_dSub_91_1) - $signed(zero));
  assign t_dSub_91_1 = {1'b0,subDiv_91};
  assign t_dSub_92 = ($signed(t_dSub_92_1) - $signed(zero));
  assign t_dSub_92_1 = {1'b0,subDiv_92};
  assign t_dSub_93 = ($signed(t_dSub_93_1) - $signed(zero));
  assign t_dSub_93_1 = {1'b0,subDiv_93};
  assign t_dSub_94 = ($signed(t_dSub_94_1) - $signed(zero));
  assign t_dSub_94_1 = {1'b0,subDiv_94};
  assign t_dSub_95 = ($signed(t_dSub_95_1) - $signed(zero));
  assign t_dSub_95_1 = {1'b0,subDiv_95};
  assign t_dSub_96 = ($signed(t_dSub_96_1) - $signed(zero));
  assign t_dSub_96_1 = {1'b0,subDiv_96};
  assign t_dSub_97 = ($signed(t_dSub_97_1) - $signed(zero));
  assign t_dSub_97_1 = {1'b0,subDiv_97};
  assign t_dSub_98 = ($signed(t_dSub_98_1) - $signed(zero));
  assign t_dSub_98_1 = {1'b0,subDiv_98};
  assign t_dSub_99 = ($signed(t_dSub_99_1) - $signed(zero));
  assign t_dSub_99_1 = {1'b0,subDiv_99};
  assign t_dSub_100 = ($signed(t_dSub_100_1) - $signed(zero));
  assign t_dSub_100_1 = {1'b0,subDiv_100};
  assign t_dSub_101 = ($signed(t_dSub_101_1) - $signed(zero));
  assign t_dSub_101_1 = {1'b0,subDiv_101};
  assign t_dSub_102 = ($signed(t_dSub_102_1) - $signed(zero));
  assign t_dSub_102_1 = {1'b0,subDiv_102};
  assign t_dSub_103 = ($signed(t_dSub_103_1) - $signed(zero));
  assign t_dSub_103_1 = {1'b0,subDiv_103};
  assign t_dSub_104 = ($signed(t_dSub_104_1) - $signed(zero));
  assign t_dSub_104_1 = {1'b0,subDiv_104};
  assign t_dSub_105 = ($signed(t_dSub_105_1) - $signed(zero));
  assign t_dSub_105_1 = {1'b0,subDiv_105};
  assign t_dSub_106 = ($signed(t_dSub_106_1) - $signed(zero));
  assign t_dSub_106_1 = {1'b0,subDiv_106};
  assign t_dSub_107 = ($signed(t_dSub_107_1) - $signed(zero));
  assign t_dSub_107_1 = {1'b0,subDiv_107};
  assign t_dSub_108 = ($signed(t_dSub_108_1) - $signed(zero));
  assign t_dSub_108_1 = {1'b0,subDiv_108};
  assign t_dSub_109 = ($signed(t_dSub_109_1) - $signed(zero));
  assign t_dSub_109_1 = {1'b0,subDiv_109};
  assign t_dSub_110 = ($signed(t_dSub_110_1) - $signed(zero));
  assign t_dSub_110_1 = {1'b0,subDiv_110};
  assign t_dSub_111 = ($signed(t_dSub_111_1) - $signed(zero));
  assign t_dSub_111_1 = {1'b0,subDiv_111};
  assign t_dSub_112 = ($signed(t_dSub_112_1) - $signed(zero));
  assign t_dSub_112_1 = {1'b0,subDiv_112};
  assign t_dSub_113 = ($signed(t_dSub_113_1) - $signed(zero));
  assign t_dSub_113_1 = {1'b0,subDiv_113};
  assign t_dSub_114 = ($signed(t_dSub_114_1) - $signed(zero));
  assign t_dSub_114_1 = {1'b0,subDiv_114};
  assign t_dSub_115 = ($signed(t_dSub_115_1) - $signed(zero));
  assign t_dSub_115_1 = {1'b0,subDiv_115};
  assign t_dSub_116 = ($signed(t_dSub_116_1) - $signed(zero));
  assign t_dSub_116_1 = {1'b0,subDiv_116};
  assign t_dSub_117 = ($signed(t_dSub_117_1) - $signed(zero));
  assign t_dSub_117_1 = {1'b0,subDiv_117};
  assign t_dSub_118 = ($signed(t_dSub_118_1) - $signed(zero));
  assign t_dSub_118_1 = {1'b0,subDiv_118};
  assign t_dSub_119 = ($signed(t_dSub_119_1) - $signed(zero));
  assign t_dSub_119_1 = {1'b0,subDiv_119};
  assign t_dSub_120 = ($signed(t_dSub_120_1) - $signed(zero));
  assign t_dSub_120_1 = {1'b0,subDiv_120};
  assign t_dSub_121 = ($signed(t_dSub_121_1) - $signed(zero));
  assign t_dSub_121_1 = {1'b0,subDiv_121};
  assign t_dSub_122 = ($signed(t_dSub_122_1) - $signed(zero));
  assign t_dSub_122_1 = {1'b0,subDiv_122};
  assign t_dSub_123 = ($signed(t_dSub_123_1) - $signed(zero));
  assign t_dSub_123_1 = {1'b0,subDiv_123};
  assign t_dSub_124 = ($signed(t_dSub_124_1) - $signed(zero));
  assign t_dSub_124_1 = {1'b0,subDiv_124};
  assign t_dSub_125 = ($signed(t_dSub_125_1) - $signed(zero));
  assign t_dSub_125_1 = {1'b0,subDiv_125};
  assign t_dSub_126 = ($signed(t_dSub_126_1) - $signed(zero));
  assign t_dSub_126_1 = {1'b0,subDiv_126};
  assign t_dSub_127 = ($signed(t_dSub_127_1) - $signed(zero));
  assign t_dSub_127_1 = {1'b0,subDiv_127};
  assign t_t_output_tdata_128 = t_output_tdata[15 : 10];
  assign t_t_output_tdata_129 = t_output_tdata_1[15 : 10];
  assign t_t_output_tdata_130 = t_output_tdata_2[15 : 10];
  assign t_t_output_tdata_131 = t_output_tdata_3[15 : 10];
  assign t_t_output_tdata_132 = t_output_tdata_4[15 : 10];
  assign t_t_output_tdata_133 = t_output_tdata_5[15 : 10];
  assign t_t_output_tdata_134 = t_output_tdata_6[15 : 10];
  assign t_t_output_tdata_135 = t_output_tdata_7[15 : 10];
  assign t_t_output_tdata_136 = t_output_tdata_8[15 : 10];
  assign t_t_output_tdata_137 = t_output_tdata_9[15 : 10];
  assign t_t_output_tdata_138 = t_output_tdata_10[15 : 10];
  assign t_t_output_tdata_139 = t_output_tdata_11[15 : 10];
  assign t_t_output_tdata_140 = t_output_tdata_12[15 : 10];
  assign t_t_output_tdata_141 = t_output_tdata_13[15 : 10];
  assign t_t_output_tdata_142 = t_output_tdata_14[15 : 10];
  assign t_t_output_tdata_143 = t_output_tdata_15[15 : 10];
  assign t_t_output_tdata_144 = t_output_tdata_16[15 : 10];
  assign t_t_output_tdata_145 = t_output_tdata_17[15 : 10];
  assign t_t_output_tdata_146 = t_output_tdata_18[15 : 10];
  assign t_t_output_tdata_147 = t_output_tdata_19[15 : 10];
  assign t_t_output_tdata_148 = t_output_tdata_20[15 : 10];
  assign t_t_output_tdata_149 = t_output_tdata_21[15 : 10];
  assign t_t_output_tdata_150 = t_output_tdata_22[15 : 10];
  assign t_t_output_tdata_151 = t_output_tdata_23[15 : 10];
  assign t_t_output_tdata_152 = t_output_tdata_24[15 : 10];
  assign t_t_output_tdata_153 = t_output_tdata_25[15 : 10];
  assign t_t_output_tdata_154 = t_output_tdata_26[15 : 10];
  assign t_t_output_tdata_155 = t_output_tdata_27[15 : 10];
  assign t_t_output_tdata_156 = t_output_tdata_28[15 : 10];
  assign t_t_output_tdata_157 = t_output_tdata_29[15 : 10];
  assign t_t_output_tdata_158 = t_output_tdata_30[15 : 10];
  assign t_t_output_tdata_159 = t_output_tdata_31[15 : 10];
  assign t_t_output_tdata_160 = t_output_tdata_32[15 : 10];
  assign t_t_output_tdata_161 = t_output_tdata_33[15 : 10];
  assign t_t_output_tdata_162 = t_output_tdata_34[15 : 10];
  assign t_t_output_tdata_163 = t_output_tdata_35[15 : 10];
  assign t_t_output_tdata_164 = t_output_tdata_36[15 : 10];
  assign t_t_output_tdata_165 = t_output_tdata_37[15 : 10];
  assign t_t_output_tdata_166 = t_output_tdata_38[15 : 10];
  assign t_t_output_tdata_167 = t_output_tdata_39[15 : 10];
  assign t_t_output_tdata_168 = t_output_tdata_40[15 : 10];
  assign t_t_output_tdata_169 = t_output_tdata_41[15 : 10];
  assign t_t_output_tdata_170 = t_output_tdata_42[15 : 10];
  assign t_t_output_tdata_171 = t_output_tdata_43[15 : 10];
  assign t_t_output_tdata_172 = t_output_tdata_44[15 : 10];
  assign t_t_output_tdata_173 = t_output_tdata_45[15 : 10];
  assign t_t_output_tdata_174 = t_output_tdata_46[15 : 10];
  assign t_t_output_tdata_175 = t_output_tdata_47[15 : 10];
  assign t_t_output_tdata_176 = t_output_tdata_48[15 : 10];
  assign t_t_output_tdata_177 = t_output_tdata_49[15 : 10];
  assign t_t_output_tdata_178 = t_output_tdata_50[15 : 10];
  assign t_t_output_tdata_179 = t_output_tdata_51[15 : 10];
  assign t_t_output_tdata_180 = t_output_tdata_52[15 : 10];
  assign t_t_output_tdata_181 = t_output_tdata_53[15 : 10];
  assign t_t_output_tdata_182 = t_output_tdata_54[15 : 10];
  assign t_t_output_tdata_183 = t_output_tdata_55[15 : 10];
  assign t_t_output_tdata_184 = t_output_tdata_56[15 : 10];
  assign t_t_output_tdata_185 = t_output_tdata_57[15 : 10];
  assign t_t_output_tdata_186 = t_output_tdata_58[15 : 10];
  assign t_t_output_tdata_187 = t_output_tdata_59[15 : 10];
  assign t_t_output_tdata_188 = t_output_tdata_60[15 : 10];
  assign t_t_output_tdata_189 = t_output_tdata_61[15 : 10];
  assign t_t_output_tdata_190 = t_output_tdata_62[15 : 10];
  assign t_t_output_tdata_191 = t_output_tdata_63[15 : 10];
  assign t_t_output_tdata_192 = t_output_tdata_64[15 : 10];
  assign t_t_output_tdata_193 = t_output_tdata_65[15 : 10];
  assign t_t_output_tdata_194 = t_output_tdata_66[15 : 10];
  assign t_t_output_tdata_195 = t_output_tdata_67[15 : 10];
  assign t_t_output_tdata_196 = t_output_tdata_68[15 : 10];
  assign t_t_output_tdata_197 = t_output_tdata_69[15 : 10];
  assign t_t_output_tdata_198 = t_output_tdata_70[15 : 10];
  assign t_t_output_tdata_199 = t_output_tdata_71[15 : 10];
  assign t_t_output_tdata_200 = t_output_tdata_72[15 : 10];
  assign t_t_output_tdata_201 = t_output_tdata_73[15 : 10];
  assign t_t_output_tdata_202 = t_output_tdata_74[15 : 10];
  assign t_t_output_tdata_203 = t_output_tdata_75[15 : 10];
  assign t_t_output_tdata_204 = t_output_tdata_76[15 : 10];
  assign t_t_output_tdata_205 = t_output_tdata_77[15 : 10];
  assign t_t_output_tdata_206 = t_output_tdata_78[15 : 10];
  assign t_t_output_tdata_207 = t_output_tdata_79[15 : 10];
  assign t_t_output_tdata_208 = t_output_tdata_80[15 : 10];
  assign t_t_output_tdata_209 = t_output_tdata_81[15 : 10];
  assign t_t_output_tdata_210 = t_output_tdata_82[15 : 10];
  assign t_t_output_tdata_211 = t_output_tdata_83[15 : 10];
  assign t_t_output_tdata_212 = t_output_tdata_84[15 : 10];
  assign t_t_output_tdata_213 = t_output_tdata_85[15 : 10];
  assign t_t_output_tdata_214 = t_output_tdata_86[15 : 10];
  assign t_t_output_tdata_215 = t_output_tdata_87[15 : 10];
  assign t_t_output_tdata_216 = t_output_tdata_88[15 : 10];
  assign t_t_output_tdata_217 = t_output_tdata_89[15 : 10];
  assign t_t_output_tdata_218 = t_output_tdata_90[15 : 10];
  assign t_t_output_tdata_219 = t_output_tdata_91[15 : 10];
  assign t_t_output_tdata_220 = t_output_tdata_92[15 : 10];
  assign t_t_output_tdata_221 = t_output_tdata_93[15 : 10];
  assign t_t_output_tdata_222 = t_output_tdata_94[15 : 10];
  assign t_t_output_tdata_223 = t_output_tdata_95[15 : 10];
  assign t_t_output_tdata_224 = t_output_tdata_96[15 : 10];
  assign t_t_output_tdata_225 = t_output_tdata_97[15 : 10];
  assign t_t_output_tdata_226 = t_output_tdata_98[15 : 10];
  assign t_t_output_tdata_227 = t_output_tdata_99[15 : 10];
  assign t_t_output_tdata_228 = t_output_tdata_100[15 : 10];
  assign t_t_output_tdata_229 = t_output_tdata_101[15 : 10];
  assign t_t_output_tdata_230 = t_output_tdata_102[15 : 10];
  assign t_t_output_tdata_231 = t_output_tdata_103[15 : 10];
  assign t_t_output_tdata_232 = t_output_tdata_104[15 : 10];
  assign t_t_output_tdata_233 = t_output_tdata_105[15 : 10];
  assign t_t_output_tdata_234 = t_output_tdata_106[15 : 10];
  assign t_t_output_tdata_235 = t_output_tdata_107[15 : 10];
  assign t_t_output_tdata_236 = t_output_tdata_108[15 : 10];
  assign t_t_output_tdata_237 = t_output_tdata_109[15 : 10];
  assign t_t_output_tdata_238 = t_output_tdata_110[15 : 10];
  assign t_t_output_tdata_239 = t_output_tdata_111[15 : 10];
  assign t_t_output_tdata_240 = t_output_tdata_112[15 : 10];
  assign t_t_output_tdata_241 = t_output_tdata_113[15 : 10];
  assign t_t_output_tdata_242 = t_output_tdata_114[15 : 10];
  assign t_t_output_tdata_243 = t_output_tdata_115[15 : 10];
  assign t_t_output_tdata_244 = t_output_tdata_116[15 : 10];
  assign t_t_output_tdata_245 = t_output_tdata_117[15 : 10];
  assign t_t_output_tdata_246 = t_output_tdata_118[15 : 10];
  assign t_t_output_tdata_247 = t_output_tdata_119[15 : 10];
  assign t_t_output_tdata_248 = t_output_tdata_120[15 : 10];
  assign t_t_output_tdata_249 = t_output_tdata_121[15 : 10];
  assign t_t_output_tdata_250 = t_output_tdata_122[15 : 10];
  assign t_t_output_tdata_251 = t_output_tdata_123[15 : 10];
  assign t_t_output_tdata_252 = t_output_tdata_124[15 : 10];
  assign t_t_output_tdata_253 = t_output_tdata_125[15 : 10];
  assign t_t_output_tdata_254 = t_output_tdata_126[15 : 10];
  assign t_t_output_tdata_255 = t_output_tdata_127[15 : 10];
  assign t_output_tdata_257 = (t_output_tdata_255 - 5'h02);
  assign t_output_tdata_261 = (t_output_tdata_254 - 5'h02);
  assign t_output_tdata_265 = (t_output_tdata_253 - 5'h02);
  assign t_output_tdata_268 = (t_output_tdata_252 - 5'h02);
  assign t_output_tdata_274 = (t_output_tdata_251 - 5'h02);
  assign t_output_tdata_279 = (t_output_tdata_250 - 5'h02);
  assign t_output_tdata_282 = (t_output_tdata_249 - 5'h02);
  assign t_output_tdata_288 = (t_output_tdata_248 - 5'h02);
  assign t_output_tdata_293 = (t_output_tdata_247 - 5'h02);
  assign t_output_tdata_296 = (t_output_tdata_246 - 5'h02);
  assign t_output_tdata_302 = (t_output_tdata_245 - 5'h02);
  assign t_output_tdata_307 = (t_output_tdata_244 - 5'h02);
  assign t_output_tdata_310 = (t_output_tdata_243 - 5'h02);
  assign t_output_tdata_316 = (t_output_tdata_242 - 5'h02);
  assign t_output_tdata_321 = (t_output_tdata_241 - 5'h02);
  assign t_output_tdata_324 = (t_output_tdata_240 - 5'h02);
  assign t_output_tdata_330 = (t_output_tdata_239 - 5'h02);
  assign t_output_tdata_335 = (t_output_tdata_238 - 5'h02);
  assign t_output_tdata_338 = (t_output_tdata_237 - 5'h02);
  assign t_output_tdata_344 = (t_output_tdata_236 - 5'h02);
  assign t_output_tdata_349 = (t_output_tdata_235 - 5'h02);
  assign t_output_tdata_352 = (t_output_tdata_234 - 5'h02);
  assign t_output_tdata_358 = (t_output_tdata_233 - 5'h02);
  assign t_output_tdata_363 = (t_output_tdata_232 - 5'h02);
  assign t_output_tdata_366 = (t_output_tdata_231 - 5'h02);
  assign t_output_tdata_372 = (t_output_tdata_230 - 5'h02);
  assign t_output_tdata_377 = (t_output_tdata_229 - 5'h02);
  assign t_output_tdata_380 = (t_output_tdata_228 - 5'h02);
  assign t_output_tdata_386 = (t_output_tdata_227 - 5'h02);
  assign t_output_tdata_391 = (t_output_tdata_226 - 5'h02);
  assign t_output_tdata_394 = (t_output_tdata_225 - 5'h02);
  assign t_output_tdata_400 = (t_output_tdata_224 - 5'h02);
  assign t_output_tdata_405 = (t_output_tdata_223 - 5'h02);
  assign t_output_tdata_408 = (t_output_tdata_222 - 5'h02);
  assign t_output_tdata_414 = (t_output_tdata_221 - 5'h02);
  assign t_output_tdata_419 = (t_output_tdata_220 - 5'h02);
  assign t_output_tdata_422 = (t_output_tdata_219 - 5'h02);
  assign t_output_tdata_428 = (t_output_tdata_218 - 5'h02);
  assign t_output_tdata_433 = (t_output_tdata_217 - 5'h02);
  assign t_output_tdata_436 = (t_output_tdata_216 - 5'h02);
  assign t_output_tdata_442 = (t_output_tdata_215 - 5'h02);
  assign t_output_tdata_447 = (t_output_tdata_214 - 5'h02);
  assign t_output_tdata_450 = (t_output_tdata_213 - 5'h02);
  assign t_output_tdata_456 = (t_output_tdata_212 - 5'h02);
  assign t_output_tdata_461 = (t_output_tdata_211 - 5'h02);
  assign t_output_tdata_464 = (t_output_tdata_210 - 5'h02);
  assign t_output_tdata_470 = (t_output_tdata_209 - 5'h02);
  assign t_output_tdata_475 = (t_output_tdata_208 - 5'h02);
  assign t_output_tdata_478 = (t_output_tdata_207 - 5'h02);
  assign t_output_tdata_484 = (t_output_tdata_206 - 5'h02);
  assign t_output_tdata_489 = (t_output_tdata_205 - 5'h02);
  assign t_output_tdata_492 = (t_output_tdata_204 - 5'h02);
  assign t_output_tdata_498 = (t_output_tdata_203 - 5'h02);
  assign t_output_tdata_503 = (t_output_tdata_202 - 5'h02);
  assign t_output_tdata_506 = (t_output_tdata_201 - 5'h02);
  assign t_output_tdata_512 = (t_output_tdata_200 - 5'h02);
  assign t_output_tdata_517 = (t_output_tdata_199 - 5'h02);
  assign t_output_tdata_520 = (t_output_tdata_198 - 5'h02);
  assign t_output_tdata_526 = (t_output_tdata_197 - 5'h02);
  assign t_output_tdata_531 = (t_output_tdata_196 - 5'h02);
  assign t_output_tdata_534 = (t_output_tdata_195 - 5'h02);
  assign t_output_tdata_540 = (t_output_tdata_194 - 5'h02);
  assign t_output_tdata_545 = (t_output_tdata_193 - 5'h02);
  assign t_output_tdata_548 = (t_output_tdata_192 - 5'h02);
  assign t_output_tdata_554 = (t_output_tdata_191 - 5'h02);
  assign t_output_tdata_559 = (t_output_tdata_190 - 5'h02);
  assign t_output_tdata_562 = (t_output_tdata_189 - 5'h02);
  assign t_output_tdata_568 = (t_output_tdata_188 - 5'h02);
  assign t_output_tdata_573 = (t_output_tdata_187 - 5'h02);
  assign t_output_tdata_576 = (t_output_tdata_186 - 5'h02);
  assign t_output_tdata_582 = (t_output_tdata_185 - 5'h02);
  assign t_output_tdata_587 = (t_output_tdata_184 - 5'h02);
  assign t_output_tdata_590 = (t_output_tdata_183 - 5'h02);
  assign t_output_tdata_596 = (t_output_tdata_182 - 5'h02);
  assign t_output_tdata_601 = (t_output_tdata_181 - 5'h02);
  assign t_output_tdata_604 = (t_output_tdata_180 - 5'h02);
  assign t_output_tdata_610 = (t_output_tdata_179 - 5'h02);
  assign t_output_tdata_615 = (t_output_tdata_178 - 5'h02);
  assign t_output_tdata_618 = (t_output_tdata_177 - 5'h02);
  assign t_output_tdata_624 = (t_output_tdata_176 - 5'h02);
  assign t_output_tdata_629 = (t_output_tdata_175 - 5'h02);
  assign t_output_tdata_632 = (t_output_tdata_174 - 5'h02);
  assign t_output_tdata_638 = (t_output_tdata_173 - 5'h02);
  assign t_output_tdata_643 = (t_output_tdata_172 - 5'h02);
  assign t_output_tdata_646 = (t_output_tdata_171 - 5'h02);
  assign t_output_tdata_652 = (t_output_tdata_170 - 5'h02);
  assign t_output_tdata_657 = (t_output_tdata_169 - 5'h02);
  assign t_output_tdata_660 = (t_output_tdata_168 - 5'h02);
  assign t_output_tdata_666 = (t_output_tdata_167 - 5'h02);
  assign t_output_tdata_671 = (t_output_tdata_166 - 5'h02);
  assign t_output_tdata_674 = (t_output_tdata_165 - 5'h02);
  assign t_output_tdata_680 = (t_output_tdata_164 - 5'h02);
  assign t_output_tdata_685 = (t_output_tdata_163 - 5'h02);
  assign t_output_tdata_688 = (t_output_tdata_162 - 5'h02);
  assign t_output_tdata_694 = (t_output_tdata_161 - 5'h02);
  assign t_output_tdata_699 = (t_output_tdata_160 - 5'h02);
  assign t_output_tdata_702 = (t_output_tdata_159 - 5'h02);
  assign t_output_tdata_708 = (t_output_tdata_158 - 5'h02);
  assign t_output_tdata_713 = (t_output_tdata_157 - 5'h02);
  assign t_output_tdata_716 = (t_output_tdata_156 - 5'h02);
  assign t_output_tdata_722 = (t_output_tdata_155 - 5'h02);
  assign t_output_tdata_727 = (t_output_tdata_154 - 5'h02);
  assign t_output_tdata_730 = (t_output_tdata_153 - 5'h02);
  assign t_output_tdata_736 = (t_output_tdata_152 - 5'h02);
  assign t_output_tdata_741 = (t_output_tdata_151 - 5'h02);
  assign t_output_tdata_744 = (t_output_tdata_150 - 5'h02);
  assign t_output_tdata_750 = (t_output_tdata_149 - 5'h02);
  assign t_output_tdata_755 = (t_output_tdata_148 - 5'h02);
  assign t_output_tdata_758 = (t_output_tdata_147 - 5'h02);
  assign t_output_tdata_764 = (t_output_tdata_146 - 5'h02);
  assign t_output_tdata_769 = (t_output_tdata_145 - 5'h02);
  assign t_output_tdata_772 = (t_output_tdata_144 - 5'h02);
  assign t_output_tdata_778 = (t_output_tdata_143 - 5'h02);
  assign t_output_tdata_783 = (t_output_tdata_142 - 5'h02);
  assign t_output_tdata_786 = (t_output_tdata_141 - 5'h02);
  assign t_output_tdata_792 = (t_output_tdata_140 - 5'h02);
  assign t_output_tdata_797 = (t_output_tdata_139 - 5'h02);
  assign t_output_tdata_800 = (t_output_tdata_138 - 5'h02);
  assign t_output_tdata_806 = (t_output_tdata_137 - 5'h02);
  assign t_output_tdata_811 = (t_output_tdata_136 - 5'h02);
  assign t_output_tdata_814 = (t_output_tdata_135 - 5'h02);
  assign t_output_tdata_820 = (t_output_tdata_134 - 5'h02);
  assign t_output_tdata_825 = (t_output_tdata_133 - 5'h02);
  assign t_output_tdata_828 = (t_output_tdata_132 - 5'h02);
  assign t_output_tdata_834 = (t_output_tdata_131 - 5'h02);
  assign t_output_tdata_838 = (t_output_tdata_130 - 5'h02);
  assign t_output_tdata_841 = (t_output_tdata_129 - 5'h02);
  assign t_output_tdata_845 = (t_output_tdata_128 - 5'h02);
  assign t_wPy = {d_111_from_ip_m_axis_result_tdata,{d_110_from_ip_m_axis_result_tdata,{d_109_from_ip_m_axis_result_tdata,{d_108_from_ip_m_axis_result_tdata,{d_107_from_ip_m_axis_result_tdata,{d_106_from_ip_m_axis_result_tdata,{d_105_from_ip_m_axis_result_tdata,{d_104_from_ip_m_axis_result_tdata,{d_103_from_ip_m_axis_result_tdata,{d_102_from_ip_m_axis_result_tdata,{d_101_from_ip_m_axis_result_tdata,{d_100_from_ip_m_axis_result_tdata,{d_99_from_ip_m_axis_result_tdata,{d_98_from_ip_m_axis_result_tdata,{d_97_from_ip_m_axis_result_tdata,{d_96_from_ip_m_axis_result_tdata,t_wPy_1}}}}}}}}}}}}}}}};
  assign t_wPy_1 = {d_95_from_ip_m_axis_result_tdata,{d_94_from_ip_m_axis_result_tdata,{d_93_from_ip_m_axis_result_tdata,{d_92_from_ip_m_axis_result_tdata,{d_91_from_ip_m_axis_result_tdata,{d_90_from_ip_m_axis_result_tdata,{d_89_from_ip_m_axis_result_tdata,{d_88_from_ip_m_axis_result_tdata,{d_87_from_ip_m_axis_result_tdata,{d_86_from_ip_m_axis_result_tdata,{d_85_from_ip_m_axis_result_tdata,{d_84_from_ip_m_axis_result_tdata,{d_83_from_ip_m_axis_result_tdata,{d_82_from_ip_m_axis_result_tdata,{d_81_from_ip_m_axis_result_tdata,{d_80_from_ip_m_axis_result_tdata,t_wPy_2}}}}}}}}}}}}}}}};
  assign t_wPy_2 = {d_79_from_ip_m_axis_result_tdata,{d_78_from_ip_m_axis_result_tdata,{d_77_from_ip_m_axis_result_tdata,{d_76_from_ip_m_axis_result_tdata,{d_75_from_ip_m_axis_result_tdata,{d_74_from_ip_m_axis_result_tdata,{d_73_from_ip_m_axis_result_tdata,{d_72_from_ip_m_axis_result_tdata,{d_71_from_ip_m_axis_result_tdata,{d_70_from_ip_m_axis_result_tdata,{d_69_from_ip_m_axis_result_tdata,{d_68_from_ip_m_axis_result_tdata,{d_67_from_ip_m_axis_result_tdata,{d_66_from_ip_m_axis_result_tdata,{d_65_from_ip_m_axis_result_tdata,{d_64_from_ip_m_axis_result_tdata,t_wPy_3}}}}}}}}}}}}}}}};
  assign t_wPy_3 = {d_63_from_ip_m_axis_result_tdata,{d_62_from_ip_m_axis_result_tdata,{d_61_from_ip_m_axis_result_tdata,{d_60_from_ip_m_axis_result_tdata,{d_59_from_ip_m_axis_result_tdata,{d_58_from_ip_m_axis_result_tdata,{d_57_from_ip_m_axis_result_tdata,{d_56_from_ip_m_axis_result_tdata,{d_55_from_ip_m_axis_result_tdata,{d_54_from_ip_m_axis_result_tdata,{d_53_from_ip_m_axis_result_tdata,{d_52_from_ip_m_axis_result_tdata,{d_51_from_ip_m_axis_result_tdata,{d_50_from_ip_m_axis_result_tdata,{d_49_from_ip_m_axis_result_tdata,{d_48_from_ip_m_axis_result_tdata,t_wPy_4}}}}}}}}}}}}}}}};
  assign t_wPy_4 = {d_47_from_ip_m_axis_result_tdata,{d_46_from_ip_m_axis_result_tdata,{d_45_from_ip_m_axis_result_tdata,{d_44_from_ip_m_axis_result_tdata,{d_43_from_ip_m_axis_result_tdata,{d_42_from_ip_m_axis_result_tdata,{d_41_from_ip_m_axis_result_tdata,{d_40_from_ip_m_axis_result_tdata,{d_39_from_ip_m_axis_result_tdata,{d_38_from_ip_m_axis_result_tdata,{d_37_from_ip_m_axis_result_tdata,{d_36_from_ip_m_axis_result_tdata,{d_35_from_ip_m_axis_result_tdata,{d_34_from_ip_m_axis_result_tdata,{d_33_from_ip_m_axis_result_tdata,{d_32_from_ip_m_axis_result_tdata,t_wPy_5}}}}}}}}}}}}}}}};
  assign t_wPy_5 = {d_31_from_ip_m_axis_result_tdata,{d_30_from_ip_m_axis_result_tdata,{d_29_from_ip_m_axis_result_tdata,{d_28_from_ip_m_axis_result_tdata,{d_27_from_ip_m_axis_result_tdata,{d_26_from_ip_m_axis_result_tdata,{d_25_from_ip_m_axis_result_tdata,{d_24_from_ip_m_axis_result_tdata,{d_23_from_ip_m_axis_result_tdata,{d_22_from_ip_m_axis_result_tdata,{d_21_from_ip_m_axis_result_tdata,{d_20_from_ip_m_axis_result_tdata,{d_19_from_ip_m_axis_result_tdata,{d_18_from_ip_m_axis_result_tdata,{d_17_from_ip_m_axis_result_tdata,{d_16_from_ip_m_axis_result_tdata,t_wPy_6}}}}}}}}}}}}}}}};
  assign t_wPy_6 = {d_15_from_ip_m_axis_result_tdata,{d_14_from_ip_m_axis_result_tdata,{d_13_from_ip_m_axis_result_tdata,{d_12_from_ip_m_axis_result_tdata,{d_11_from_ip_m_axis_result_tdata,{d_10_from_ip_m_axis_result_tdata,{d_9_from_ip_m_axis_result_tdata,{d_8_from_ip_m_axis_result_tdata,{d_7_from_ip_m_axis_result_tdata,{d_6_from_ip_m_axis_result_tdata,{d_5_from_ip_m_axis_result_tdata,{d_4_from_ip_m_axis_result_tdata,{d_3_from_ip_m_axis_result_tdata,{d_2_from_ip_m_axis_result_tdata,{d_1_from_ip_m_axis_result_tdata,d_0_from_ip_m_axis_result_tdata}}}}}}}}}}}}}}};
  assign t_output_tdata_256 = (5'h02 < t_output_tdata_255);
  assign t_output_tdata_258 = 5'h0;
  assign t_output_tdata_259 = t_output_tdata_126[15];
  assign t_output_tdata_260 = ((5'h02 < t_output_tdata_254) ? t_output_tdata_261 : 5'h0);
  assign t_output_tdata_262 = t_output_tdata_125[15];
  assign t_output_tdata_263 = ((t_output_tdata_264 < t_output_tdata_253) ? t_output_tdata_265 : 5'h0);
  assign t_output_tdata_266 = {t_output_tdata_124[15],(t_output_tdata_267 ? t_output_tdata_268 : t_output_tdata_269)};
  assign t_output_tdata_270 = t_output_tdata_124[9 : 0];
  assign t_output_tdata_271 = {{t_output_tdata_272,t_output_tdata_273},t_output_tdata_123[9 : 0]};
  assign t_output_tdata_275 = {{{t_output_tdata_276,t_output_tdata_277},t_output_tdata_122[9 : 0]},{{t_output_tdata_280,t_output_tdata_284},{t_output_tdata_285,t_output_tdata_289}}};
  assign t_output_tdata_264 = 5'h02;
  assign t_output_tdata_267 = (5'h02 < t_output_tdata_252);
  assign t_output_tdata_269 = 5'h0;
  assign t_output_tdata_272 = t_output_tdata_123[15];
  assign t_output_tdata_273 = ((5'h02 < t_output_tdata_251) ? t_output_tdata_274 : 5'h0);
  assign t_output_tdata_276 = t_output_tdata_122[15];
  assign t_output_tdata_277 = ((t_output_tdata_278 < t_output_tdata_250) ? t_output_tdata_279 : 5'h0);
  assign t_output_tdata_280 = {t_output_tdata_121[15],(t_output_tdata_281 ? t_output_tdata_282 : t_output_tdata_283)};
  assign t_output_tdata_284 = t_output_tdata_121[9 : 0];
  assign t_output_tdata_285 = {{t_output_tdata_286,t_output_tdata_287},t_output_tdata_120[9 : 0]};
  assign t_output_tdata_289 = {{{t_output_tdata_290,t_output_tdata_291},t_output_tdata_119[9 : 0]},{{t_output_tdata_294,t_output_tdata_298},{t_output_tdata_299,t_output_tdata_303}}};
  assign t_output_tdata_278 = 5'h02;
  assign t_output_tdata_281 = (5'h02 < t_output_tdata_249);
  assign t_output_tdata_283 = 5'h0;
  assign t_output_tdata_286 = t_output_tdata_120[15];
  assign t_output_tdata_287 = ((5'h02 < t_output_tdata_248) ? t_output_tdata_288 : 5'h0);
  assign t_output_tdata_290 = t_output_tdata_119[15];
  assign t_output_tdata_291 = ((t_output_tdata_292 < t_output_tdata_247) ? t_output_tdata_293 : 5'h0);
  assign t_output_tdata_294 = {t_output_tdata_118[15],(t_output_tdata_295 ? t_output_tdata_296 : t_output_tdata_297)};
  assign t_output_tdata_298 = t_output_tdata_118[9 : 0];
  assign t_output_tdata_299 = {{t_output_tdata_300,t_output_tdata_301},t_output_tdata_117[9 : 0]};
  assign t_output_tdata_303 = {{{t_output_tdata_304,t_output_tdata_305},t_output_tdata_116[9 : 0]},{{t_output_tdata_308,t_output_tdata_312},{t_output_tdata_313,t_output_tdata_317}}};
  assign t_output_tdata_292 = 5'h02;
  assign t_output_tdata_295 = (5'h02 < t_output_tdata_246);
  assign t_output_tdata_297 = 5'h0;
  assign t_output_tdata_300 = t_output_tdata_117[15];
  assign t_output_tdata_301 = ((5'h02 < t_output_tdata_245) ? t_output_tdata_302 : 5'h0);
  assign t_output_tdata_304 = t_output_tdata_116[15];
  assign t_output_tdata_305 = ((t_output_tdata_306 < t_output_tdata_244) ? t_output_tdata_307 : 5'h0);
  assign t_output_tdata_308 = {t_output_tdata_115[15],(t_output_tdata_309 ? t_output_tdata_310 : t_output_tdata_311)};
  assign t_output_tdata_312 = t_output_tdata_115[9 : 0];
  assign t_output_tdata_313 = {{t_output_tdata_314,t_output_tdata_315},t_output_tdata_114[9 : 0]};
  assign t_output_tdata_317 = {{{t_output_tdata_318,t_output_tdata_319},t_output_tdata_113[9 : 0]},{{t_output_tdata_322,t_output_tdata_326},{t_output_tdata_327,t_output_tdata_331}}};
  assign t_output_tdata_306 = 5'h02;
  assign t_output_tdata_309 = (5'h02 < t_output_tdata_243);
  assign t_output_tdata_311 = 5'h0;
  assign t_output_tdata_314 = t_output_tdata_114[15];
  assign t_output_tdata_315 = ((5'h02 < t_output_tdata_242) ? t_output_tdata_316 : 5'h0);
  assign t_output_tdata_318 = t_output_tdata_113[15];
  assign t_output_tdata_319 = ((t_output_tdata_320 < t_output_tdata_241) ? t_output_tdata_321 : 5'h0);
  assign t_output_tdata_322 = {t_output_tdata_112[15],(t_output_tdata_323 ? t_output_tdata_324 : t_output_tdata_325)};
  assign t_output_tdata_326 = t_output_tdata_112[9 : 0];
  assign t_output_tdata_327 = {{t_output_tdata_328,t_output_tdata_329},t_output_tdata_111[9 : 0]};
  assign t_output_tdata_331 = {{{t_output_tdata_332,t_output_tdata_333},t_output_tdata_110[9 : 0]},{{t_output_tdata_336,t_output_tdata_340},{t_output_tdata_341,t_output_tdata_345}}};
  assign t_output_tdata_320 = 5'h02;
  assign t_output_tdata_323 = (5'h02 < t_output_tdata_240);
  assign t_output_tdata_325 = 5'h0;
  assign t_output_tdata_328 = t_output_tdata_111[15];
  assign t_output_tdata_329 = ((5'h02 < t_output_tdata_239) ? t_output_tdata_330 : 5'h0);
  assign t_output_tdata_332 = t_output_tdata_110[15];
  assign t_output_tdata_333 = ((t_output_tdata_334 < t_output_tdata_238) ? t_output_tdata_335 : 5'h0);
  assign t_output_tdata_336 = {t_output_tdata_109[15],(t_output_tdata_337 ? t_output_tdata_338 : t_output_tdata_339)};
  assign t_output_tdata_340 = t_output_tdata_109[9 : 0];
  assign t_output_tdata_341 = {{t_output_tdata_342,t_output_tdata_343},t_output_tdata_108[9 : 0]};
  assign t_output_tdata_345 = {{{t_output_tdata_346,t_output_tdata_347},t_output_tdata_107[9 : 0]},{{t_output_tdata_350,t_output_tdata_354},{t_output_tdata_355,t_output_tdata_359}}};
  assign t_output_tdata_334 = 5'h02;
  assign t_output_tdata_337 = (5'h02 < t_output_tdata_237);
  assign t_output_tdata_339 = 5'h0;
  assign t_output_tdata_342 = t_output_tdata_108[15];
  assign t_output_tdata_343 = ((5'h02 < t_output_tdata_236) ? t_output_tdata_344 : 5'h0);
  assign t_output_tdata_346 = t_output_tdata_107[15];
  assign t_output_tdata_347 = ((t_output_tdata_348 < t_output_tdata_235) ? t_output_tdata_349 : 5'h0);
  assign t_output_tdata_350 = {t_output_tdata_106[15],(t_output_tdata_351 ? t_output_tdata_352 : t_output_tdata_353)};
  assign t_output_tdata_354 = t_output_tdata_106[9 : 0];
  assign t_output_tdata_355 = {{t_output_tdata_356,t_output_tdata_357},t_output_tdata_105[9 : 0]};
  assign t_output_tdata_359 = {{{t_output_tdata_360,t_output_tdata_361},t_output_tdata_104[9 : 0]},{{t_output_tdata_364,t_output_tdata_368},{t_output_tdata_369,t_output_tdata_373}}};
  assign t_output_tdata_348 = 5'h02;
  assign t_output_tdata_351 = (5'h02 < t_output_tdata_234);
  assign t_output_tdata_353 = 5'h0;
  assign t_output_tdata_356 = t_output_tdata_105[15];
  assign t_output_tdata_357 = ((5'h02 < t_output_tdata_233) ? t_output_tdata_358 : 5'h0);
  assign t_output_tdata_360 = t_output_tdata_104[15];
  assign t_output_tdata_361 = ((t_output_tdata_362 < t_output_tdata_232) ? t_output_tdata_363 : 5'h0);
  assign t_output_tdata_364 = {t_output_tdata_103[15],(t_output_tdata_365 ? t_output_tdata_366 : t_output_tdata_367)};
  assign t_output_tdata_368 = t_output_tdata_103[9 : 0];
  assign t_output_tdata_369 = {{t_output_tdata_370,t_output_tdata_371},t_output_tdata_102[9 : 0]};
  assign t_output_tdata_373 = {{{t_output_tdata_374,t_output_tdata_375},t_output_tdata_101[9 : 0]},{{t_output_tdata_378,t_output_tdata_382},{t_output_tdata_383,t_output_tdata_387}}};
  assign t_output_tdata_362 = 5'h02;
  assign t_output_tdata_365 = (5'h02 < t_output_tdata_231);
  assign t_output_tdata_367 = 5'h0;
  assign t_output_tdata_370 = t_output_tdata_102[15];
  assign t_output_tdata_371 = ((5'h02 < t_output_tdata_230) ? t_output_tdata_372 : 5'h0);
  assign t_output_tdata_374 = t_output_tdata_101[15];
  assign t_output_tdata_375 = ((t_output_tdata_376 < t_output_tdata_229) ? t_output_tdata_377 : 5'h0);
  assign t_output_tdata_378 = {t_output_tdata_100[15],(t_output_tdata_379 ? t_output_tdata_380 : t_output_tdata_381)};
  assign t_output_tdata_382 = t_output_tdata_100[9 : 0];
  assign t_output_tdata_383 = {{t_output_tdata_384,t_output_tdata_385},t_output_tdata_99[9 : 0]};
  assign t_output_tdata_387 = {{{t_output_tdata_388,t_output_tdata_389},t_output_tdata_98[9 : 0]},{{t_output_tdata_392,t_output_tdata_396},{t_output_tdata_397,t_output_tdata_401}}};
  assign t_output_tdata_376 = 5'h02;
  assign t_output_tdata_379 = (5'h02 < t_output_tdata_228);
  assign t_output_tdata_381 = 5'h0;
  assign t_output_tdata_384 = t_output_tdata_99[15];
  assign t_output_tdata_385 = ((5'h02 < t_output_tdata_227) ? t_output_tdata_386 : 5'h0);
  assign t_output_tdata_388 = t_output_tdata_98[15];
  assign t_output_tdata_389 = ((t_output_tdata_390 < t_output_tdata_226) ? t_output_tdata_391 : 5'h0);
  assign t_output_tdata_392 = {t_output_tdata_97[15],(t_output_tdata_393 ? t_output_tdata_394 : t_output_tdata_395)};
  assign t_output_tdata_396 = t_output_tdata_97[9 : 0];
  assign t_output_tdata_397 = {{t_output_tdata_398,t_output_tdata_399},t_output_tdata_96[9 : 0]};
  assign t_output_tdata_401 = {{{t_output_tdata_402,t_output_tdata_403},t_output_tdata_95[9 : 0]},{{t_output_tdata_406,t_output_tdata_410},{t_output_tdata_411,t_output_tdata_415}}};
  assign t_output_tdata_390 = 5'h02;
  assign t_output_tdata_393 = (5'h02 < t_output_tdata_225);
  assign t_output_tdata_395 = 5'h0;
  assign t_output_tdata_398 = t_output_tdata_96[15];
  assign t_output_tdata_399 = ((5'h02 < t_output_tdata_224) ? t_output_tdata_400 : 5'h0);
  assign t_output_tdata_402 = t_output_tdata_95[15];
  assign t_output_tdata_403 = ((t_output_tdata_404 < t_output_tdata_223) ? t_output_tdata_405 : 5'h0);
  assign t_output_tdata_406 = {t_output_tdata_94[15],(t_output_tdata_407 ? t_output_tdata_408 : t_output_tdata_409)};
  assign t_output_tdata_410 = t_output_tdata_94[9 : 0];
  assign t_output_tdata_411 = {{t_output_tdata_412,t_output_tdata_413},t_output_tdata_93[9 : 0]};
  assign t_output_tdata_415 = {{{t_output_tdata_416,t_output_tdata_417},t_output_tdata_92[9 : 0]},{{t_output_tdata_420,t_output_tdata_424},{t_output_tdata_425,t_output_tdata_429}}};
  assign t_output_tdata_404 = 5'h02;
  assign t_output_tdata_407 = (5'h02 < t_output_tdata_222);
  assign t_output_tdata_409 = 5'h0;
  assign t_output_tdata_412 = t_output_tdata_93[15];
  assign t_output_tdata_413 = ((5'h02 < t_output_tdata_221) ? t_output_tdata_414 : 5'h0);
  assign t_output_tdata_416 = t_output_tdata_92[15];
  assign t_output_tdata_417 = ((t_output_tdata_418 < t_output_tdata_220) ? t_output_tdata_419 : 5'h0);
  assign t_output_tdata_420 = {t_output_tdata_91[15],(t_output_tdata_421 ? t_output_tdata_422 : t_output_tdata_423)};
  assign t_output_tdata_424 = t_output_tdata_91[9 : 0];
  assign t_output_tdata_425 = {{t_output_tdata_426,t_output_tdata_427},t_output_tdata_90[9 : 0]};
  assign t_output_tdata_429 = {{{t_output_tdata_430,t_output_tdata_431},t_output_tdata_89[9 : 0]},{{t_output_tdata_434,t_output_tdata_438},{t_output_tdata_439,t_output_tdata_443}}};
  assign t_output_tdata_418 = 5'h02;
  assign t_output_tdata_421 = (5'h02 < t_output_tdata_219);
  assign t_output_tdata_423 = 5'h0;
  assign t_output_tdata_426 = t_output_tdata_90[15];
  assign t_output_tdata_427 = ((5'h02 < t_output_tdata_218) ? t_output_tdata_428 : 5'h0);
  assign t_output_tdata_430 = t_output_tdata_89[15];
  assign t_output_tdata_431 = ((t_output_tdata_432 < t_output_tdata_217) ? t_output_tdata_433 : 5'h0);
  assign t_output_tdata_434 = {t_output_tdata_88[15],(t_output_tdata_435 ? t_output_tdata_436 : t_output_tdata_437)};
  assign t_output_tdata_438 = t_output_tdata_88[9 : 0];
  assign t_output_tdata_439 = {{t_output_tdata_440,t_output_tdata_441},t_output_tdata_87[9 : 0]};
  assign t_output_tdata_443 = {{{t_output_tdata_444,t_output_tdata_445},t_output_tdata_86[9 : 0]},{{t_output_tdata_448,t_output_tdata_452},{t_output_tdata_453,t_output_tdata_457}}};
  assign t_output_tdata_432 = 5'h02;
  assign t_output_tdata_435 = (5'h02 < t_output_tdata_216);
  assign t_output_tdata_437 = 5'h0;
  assign t_output_tdata_440 = t_output_tdata_87[15];
  assign t_output_tdata_441 = ((5'h02 < t_output_tdata_215) ? t_output_tdata_442 : 5'h0);
  assign t_output_tdata_444 = t_output_tdata_86[15];
  assign t_output_tdata_445 = ((t_output_tdata_446 < t_output_tdata_214) ? t_output_tdata_447 : 5'h0);
  assign t_output_tdata_448 = {t_output_tdata_85[15],(t_output_tdata_449 ? t_output_tdata_450 : t_output_tdata_451)};
  assign t_output_tdata_452 = t_output_tdata_85[9 : 0];
  assign t_output_tdata_453 = {{t_output_tdata_454,t_output_tdata_455},t_output_tdata_84[9 : 0]};
  assign t_output_tdata_457 = {{{t_output_tdata_458,t_output_tdata_459},t_output_tdata_83[9 : 0]},{{t_output_tdata_462,t_output_tdata_466},{t_output_tdata_467,t_output_tdata_471}}};
  assign t_output_tdata_446 = 5'h02;
  assign t_output_tdata_449 = (5'h02 < t_output_tdata_213);
  assign t_output_tdata_451 = 5'h0;
  assign t_output_tdata_454 = t_output_tdata_84[15];
  assign t_output_tdata_455 = ((5'h02 < t_output_tdata_212) ? t_output_tdata_456 : 5'h0);
  assign t_output_tdata_458 = t_output_tdata_83[15];
  assign t_output_tdata_459 = ((t_output_tdata_460 < t_output_tdata_211) ? t_output_tdata_461 : 5'h0);
  assign t_output_tdata_462 = {t_output_tdata_82[15],(t_output_tdata_463 ? t_output_tdata_464 : t_output_tdata_465)};
  assign t_output_tdata_466 = t_output_tdata_82[9 : 0];
  assign t_output_tdata_467 = {{t_output_tdata_468,t_output_tdata_469},t_output_tdata_81[9 : 0]};
  assign t_output_tdata_471 = {{{t_output_tdata_472,t_output_tdata_473},t_output_tdata_80[9 : 0]},{{t_output_tdata_476,t_output_tdata_480},{t_output_tdata_481,t_output_tdata_485}}};
  assign t_output_tdata_460 = 5'h02;
  assign t_output_tdata_463 = (5'h02 < t_output_tdata_210);
  assign t_output_tdata_465 = 5'h0;
  assign t_output_tdata_468 = t_output_tdata_81[15];
  assign t_output_tdata_469 = ((5'h02 < t_output_tdata_209) ? t_output_tdata_470 : 5'h0);
  assign t_output_tdata_472 = t_output_tdata_80[15];
  assign t_output_tdata_473 = ((t_output_tdata_474 < t_output_tdata_208) ? t_output_tdata_475 : 5'h0);
  assign t_output_tdata_476 = {t_output_tdata_79[15],(t_output_tdata_477 ? t_output_tdata_478 : t_output_tdata_479)};
  assign t_output_tdata_480 = t_output_tdata_79[9 : 0];
  assign t_output_tdata_481 = {{t_output_tdata_482,t_output_tdata_483},t_output_tdata_78[9 : 0]};
  assign t_output_tdata_485 = {{{t_output_tdata_486,t_output_tdata_487},t_output_tdata_77[9 : 0]},{{t_output_tdata_490,t_output_tdata_494},{t_output_tdata_495,t_output_tdata_499}}};
  assign t_output_tdata_474 = 5'h02;
  assign t_output_tdata_477 = (5'h02 < t_output_tdata_207);
  assign t_output_tdata_479 = 5'h0;
  assign t_output_tdata_482 = t_output_tdata_78[15];
  assign t_output_tdata_483 = ((5'h02 < t_output_tdata_206) ? t_output_tdata_484 : 5'h0);
  assign t_output_tdata_486 = t_output_tdata_77[15];
  assign t_output_tdata_487 = ((t_output_tdata_488 < t_output_tdata_205) ? t_output_tdata_489 : 5'h0);
  assign t_output_tdata_490 = {t_output_tdata_76[15],(t_output_tdata_491 ? t_output_tdata_492 : t_output_tdata_493)};
  assign t_output_tdata_494 = t_output_tdata_76[9 : 0];
  assign t_output_tdata_495 = {{t_output_tdata_496,t_output_tdata_497},t_output_tdata_75[9 : 0]};
  assign t_output_tdata_499 = {{{t_output_tdata_500,t_output_tdata_501},t_output_tdata_74[9 : 0]},{{t_output_tdata_504,t_output_tdata_508},{t_output_tdata_509,t_output_tdata_513}}};
  assign t_output_tdata_488 = 5'h02;
  assign t_output_tdata_491 = (5'h02 < t_output_tdata_204);
  assign t_output_tdata_493 = 5'h0;
  assign t_output_tdata_496 = t_output_tdata_75[15];
  assign t_output_tdata_497 = ((5'h02 < t_output_tdata_203) ? t_output_tdata_498 : 5'h0);
  assign t_output_tdata_500 = t_output_tdata_74[15];
  assign t_output_tdata_501 = ((t_output_tdata_502 < t_output_tdata_202) ? t_output_tdata_503 : 5'h0);
  assign t_output_tdata_504 = {t_output_tdata_73[15],(t_output_tdata_505 ? t_output_tdata_506 : t_output_tdata_507)};
  assign t_output_tdata_508 = t_output_tdata_73[9 : 0];
  assign t_output_tdata_509 = {{t_output_tdata_510,t_output_tdata_511},t_output_tdata_72[9 : 0]};
  assign t_output_tdata_513 = {{{t_output_tdata_514,t_output_tdata_515},t_output_tdata_71[9 : 0]},{{t_output_tdata_518,t_output_tdata_522},{t_output_tdata_523,t_output_tdata_527}}};
  assign t_output_tdata_502 = 5'h02;
  assign t_output_tdata_505 = (5'h02 < t_output_tdata_201);
  assign t_output_tdata_507 = 5'h0;
  assign t_output_tdata_510 = t_output_tdata_72[15];
  assign t_output_tdata_511 = ((5'h02 < t_output_tdata_200) ? t_output_tdata_512 : 5'h0);
  assign t_output_tdata_514 = t_output_tdata_71[15];
  assign t_output_tdata_515 = ((t_output_tdata_516 < t_output_tdata_199) ? t_output_tdata_517 : 5'h0);
  assign t_output_tdata_518 = {t_output_tdata_70[15],(t_output_tdata_519 ? t_output_tdata_520 : t_output_tdata_521)};
  assign t_output_tdata_522 = t_output_tdata_70[9 : 0];
  assign t_output_tdata_523 = {{t_output_tdata_524,t_output_tdata_525},t_output_tdata_69[9 : 0]};
  assign t_output_tdata_527 = {{{t_output_tdata_528,t_output_tdata_529},t_output_tdata_68[9 : 0]},{{t_output_tdata_532,t_output_tdata_536},{t_output_tdata_537,t_output_tdata_541}}};
  assign t_output_tdata_516 = 5'h02;
  assign t_output_tdata_519 = (5'h02 < t_output_tdata_198);
  assign t_output_tdata_521 = 5'h0;
  assign t_output_tdata_524 = t_output_tdata_69[15];
  assign t_output_tdata_525 = ((5'h02 < t_output_tdata_197) ? t_output_tdata_526 : 5'h0);
  assign t_output_tdata_528 = t_output_tdata_68[15];
  assign t_output_tdata_529 = ((t_output_tdata_530 < t_output_tdata_196) ? t_output_tdata_531 : 5'h0);
  assign t_output_tdata_532 = {t_output_tdata_67[15],(t_output_tdata_533 ? t_output_tdata_534 : t_output_tdata_535)};
  assign t_output_tdata_536 = t_output_tdata_67[9 : 0];
  assign t_output_tdata_537 = {{t_output_tdata_538,t_output_tdata_539},t_output_tdata_66[9 : 0]};
  assign t_output_tdata_541 = {{{t_output_tdata_542,t_output_tdata_543},t_output_tdata_65[9 : 0]},{{t_output_tdata_546,t_output_tdata_550},{t_output_tdata_551,t_output_tdata_555}}};
  assign t_output_tdata_530 = 5'h02;
  assign t_output_tdata_533 = (5'h02 < t_output_tdata_195);
  assign t_output_tdata_535 = 5'h0;
  assign t_output_tdata_538 = t_output_tdata_66[15];
  assign t_output_tdata_539 = ((5'h02 < t_output_tdata_194) ? t_output_tdata_540 : 5'h0);
  assign t_output_tdata_542 = t_output_tdata_65[15];
  assign t_output_tdata_543 = ((t_output_tdata_544 < t_output_tdata_193) ? t_output_tdata_545 : 5'h0);
  assign t_output_tdata_546 = {t_output_tdata_64[15],(t_output_tdata_547 ? t_output_tdata_548 : t_output_tdata_549)};
  assign t_output_tdata_550 = t_output_tdata_64[9 : 0];
  assign t_output_tdata_551 = {{t_output_tdata_552,t_output_tdata_553},t_output_tdata_63[9 : 0]};
  assign t_output_tdata_555 = {{{t_output_tdata_556,t_output_tdata_557},t_output_tdata_62[9 : 0]},{{t_output_tdata_560,t_output_tdata_564},{t_output_tdata_565,t_output_tdata_569}}};
  assign t_output_tdata_544 = 5'h02;
  assign t_output_tdata_547 = (5'h02 < t_output_tdata_192);
  assign t_output_tdata_549 = 5'h0;
  assign t_output_tdata_552 = t_output_tdata_63[15];
  assign t_output_tdata_553 = ((5'h02 < t_output_tdata_191) ? t_output_tdata_554 : 5'h0);
  assign t_output_tdata_556 = t_output_tdata_62[15];
  assign t_output_tdata_557 = ((t_output_tdata_558 < t_output_tdata_190) ? t_output_tdata_559 : 5'h0);
  assign t_output_tdata_560 = {t_output_tdata_61[15],(t_output_tdata_561 ? t_output_tdata_562 : t_output_tdata_563)};
  assign t_output_tdata_564 = t_output_tdata_61[9 : 0];
  assign t_output_tdata_565 = {{t_output_tdata_566,t_output_tdata_567},t_output_tdata_60[9 : 0]};
  assign t_output_tdata_569 = {{{t_output_tdata_570,t_output_tdata_571},t_output_tdata_59[9 : 0]},{{t_output_tdata_574,t_output_tdata_578},{t_output_tdata_579,t_output_tdata_583}}};
  assign t_output_tdata_558 = 5'h02;
  assign t_output_tdata_561 = (5'h02 < t_output_tdata_189);
  assign t_output_tdata_563 = 5'h0;
  assign t_output_tdata_566 = t_output_tdata_60[15];
  assign t_output_tdata_567 = ((5'h02 < t_output_tdata_188) ? t_output_tdata_568 : 5'h0);
  assign t_output_tdata_570 = t_output_tdata_59[15];
  assign t_output_tdata_571 = ((t_output_tdata_572 < t_output_tdata_187) ? t_output_tdata_573 : 5'h0);
  assign t_output_tdata_574 = {t_output_tdata_58[15],(t_output_tdata_575 ? t_output_tdata_576 : t_output_tdata_577)};
  assign t_output_tdata_578 = t_output_tdata_58[9 : 0];
  assign t_output_tdata_579 = {{t_output_tdata_580,t_output_tdata_581},t_output_tdata_57[9 : 0]};
  assign t_output_tdata_583 = {{{t_output_tdata_584,t_output_tdata_585},t_output_tdata_56[9 : 0]},{{t_output_tdata_588,t_output_tdata_592},{t_output_tdata_593,t_output_tdata_597}}};
  assign t_output_tdata_572 = 5'h02;
  assign t_output_tdata_575 = (5'h02 < t_output_tdata_186);
  assign t_output_tdata_577 = 5'h0;
  assign t_output_tdata_580 = t_output_tdata_57[15];
  assign t_output_tdata_581 = ((5'h02 < t_output_tdata_185) ? t_output_tdata_582 : 5'h0);
  assign t_output_tdata_584 = t_output_tdata_56[15];
  assign t_output_tdata_585 = ((t_output_tdata_586 < t_output_tdata_184) ? t_output_tdata_587 : 5'h0);
  assign t_output_tdata_588 = {t_output_tdata_55[15],(t_output_tdata_589 ? t_output_tdata_590 : t_output_tdata_591)};
  assign t_output_tdata_592 = t_output_tdata_55[9 : 0];
  assign t_output_tdata_593 = {{t_output_tdata_594,t_output_tdata_595},t_output_tdata_54[9 : 0]};
  assign t_output_tdata_597 = {{{t_output_tdata_598,t_output_tdata_599},t_output_tdata_53[9 : 0]},{{t_output_tdata_602,t_output_tdata_606},{t_output_tdata_607,t_output_tdata_611}}};
  assign t_output_tdata_586 = 5'h02;
  assign t_output_tdata_589 = (5'h02 < t_output_tdata_183);
  assign t_output_tdata_591 = 5'h0;
  assign t_output_tdata_594 = t_output_tdata_54[15];
  assign t_output_tdata_595 = ((5'h02 < t_output_tdata_182) ? t_output_tdata_596 : 5'h0);
  assign t_output_tdata_598 = t_output_tdata_53[15];
  assign t_output_tdata_599 = ((t_output_tdata_600 < t_output_tdata_181) ? t_output_tdata_601 : 5'h0);
  assign t_output_tdata_602 = {t_output_tdata_52[15],(t_output_tdata_603 ? t_output_tdata_604 : t_output_tdata_605)};
  assign t_output_tdata_606 = t_output_tdata_52[9 : 0];
  assign t_output_tdata_607 = {{t_output_tdata_608,t_output_tdata_609},t_output_tdata_51[9 : 0]};
  assign t_output_tdata_611 = {{{t_output_tdata_612,t_output_tdata_613},t_output_tdata_50[9 : 0]},{{t_output_tdata_616,t_output_tdata_620},{t_output_tdata_621,t_output_tdata_625}}};
  assign t_output_tdata_600 = 5'h02;
  assign t_output_tdata_603 = (5'h02 < t_output_tdata_180);
  assign t_output_tdata_605 = 5'h0;
  assign t_output_tdata_608 = t_output_tdata_51[15];
  assign t_output_tdata_609 = ((5'h02 < t_output_tdata_179) ? t_output_tdata_610 : 5'h0);
  assign t_output_tdata_612 = t_output_tdata_50[15];
  assign t_output_tdata_613 = ((t_output_tdata_614 < t_output_tdata_178) ? t_output_tdata_615 : 5'h0);
  assign t_output_tdata_616 = {t_output_tdata_49[15],(t_output_tdata_617 ? t_output_tdata_618 : t_output_tdata_619)};
  assign t_output_tdata_620 = t_output_tdata_49[9 : 0];
  assign t_output_tdata_621 = {{t_output_tdata_622,t_output_tdata_623},t_output_tdata_48[9 : 0]};
  assign t_output_tdata_625 = {{{t_output_tdata_626,t_output_tdata_627},t_output_tdata_47[9 : 0]},{{t_output_tdata_630,t_output_tdata_634},{t_output_tdata_635,t_output_tdata_639}}};
  assign t_output_tdata_614 = 5'h02;
  assign t_output_tdata_617 = (5'h02 < t_output_tdata_177);
  assign t_output_tdata_619 = 5'h0;
  assign t_output_tdata_622 = t_output_tdata_48[15];
  assign t_output_tdata_623 = ((5'h02 < t_output_tdata_176) ? t_output_tdata_624 : 5'h0);
  assign t_output_tdata_626 = t_output_tdata_47[15];
  assign t_output_tdata_627 = ((t_output_tdata_628 < t_output_tdata_175) ? t_output_tdata_629 : 5'h0);
  assign t_output_tdata_630 = {t_output_tdata_46[15],(t_output_tdata_631 ? t_output_tdata_632 : t_output_tdata_633)};
  assign t_output_tdata_634 = t_output_tdata_46[9 : 0];
  assign t_output_tdata_635 = {{t_output_tdata_636,t_output_tdata_637},t_output_tdata_45[9 : 0]};
  assign t_output_tdata_639 = {{{t_output_tdata_640,t_output_tdata_641},t_output_tdata_44[9 : 0]},{{t_output_tdata_644,t_output_tdata_648},{t_output_tdata_649,t_output_tdata_653}}};
  assign t_output_tdata_628 = 5'h02;
  assign t_output_tdata_631 = (5'h02 < t_output_tdata_174);
  assign t_output_tdata_633 = 5'h0;
  assign t_output_tdata_636 = t_output_tdata_45[15];
  assign t_output_tdata_637 = ((5'h02 < t_output_tdata_173) ? t_output_tdata_638 : 5'h0);
  assign t_output_tdata_640 = t_output_tdata_44[15];
  assign t_output_tdata_641 = ((t_output_tdata_642 < t_output_tdata_172) ? t_output_tdata_643 : 5'h0);
  assign t_output_tdata_644 = {t_output_tdata_43[15],(t_output_tdata_645 ? t_output_tdata_646 : t_output_tdata_647)};
  assign t_output_tdata_648 = t_output_tdata_43[9 : 0];
  assign t_output_tdata_649 = {{t_output_tdata_650,t_output_tdata_651},t_output_tdata_42[9 : 0]};
  assign t_output_tdata_653 = {{{t_output_tdata_654,t_output_tdata_655},t_output_tdata_41[9 : 0]},{{t_output_tdata_658,t_output_tdata_662},{t_output_tdata_663,t_output_tdata_667}}};
  assign t_output_tdata_642 = 5'h02;
  assign t_output_tdata_645 = (5'h02 < t_output_tdata_171);
  assign t_output_tdata_647 = 5'h0;
  assign t_output_tdata_650 = t_output_tdata_42[15];
  assign t_output_tdata_651 = ((5'h02 < t_output_tdata_170) ? t_output_tdata_652 : 5'h0);
  assign t_output_tdata_654 = t_output_tdata_41[15];
  assign t_output_tdata_655 = ((t_output_tdata_656 < t_output_tdata_169) ? t_output_tdata_657 : 5'h0);
  assign t_output_tdata_658 = {t_output_tdata_40[15],(t_output_tdata_659 ? t_output_tdata_660 : t_output_tdata_661)};
  assign t_output_tdata_662 = t_output_tdata_40[9 : 0];
  assign t_output_tdata_663 = {{t_output_tdata_664,t_output_tdata_665},t_output_tdata_39[9 : 0]};
  assign t_output_tdata_667 = {{{t_output_tdata_668,t_output_tdata_669},t_output_tdata_38[9 : 0]},{{t_output_tdata_672,t_output_tdata_676},{t_output_tdata_677,t_output_tdata_681}}};
  assign t_output_tdata_656 = 5'h02;
  assign t_output_tdata_659 = (5'h02 < t_output_tdata_168);
  assign t_output_tdata_661 = 5'h0;
  assign t_output_tdata_664 = t_output_tdata_39[15];
  assign t_output_tdata_665 = ((5'h02 < t_output_tdata_167) ? t_output_tdata_666 : 5'h0);
  assign t_output_tdata_668 = t_output_tdata_38[15];
  assign t_output_tdata_669 = ((t_output_tdata_670 < t_output_tdata_166) ? t_output_tdata_671 : 5'h0);
  assign t_output_tdata_672 = {t_output_tdata_37[15],(t_output_tdata_673 ? t_output_tdata_674 : t_output_tdata_675)};
  assign t_output_tdata_676 = t_output_tdata_37[9 : 0];
  assign t_output_tdata_677 = {{t_output_tdata_678,t_output_tdata_679},t_output_tdata_36[9 : 0]};
  assign t_output_tdata_681 = {{{t_output_tdata_682,t_output_tdata_683},t_output_tdata_35[9 : 0]},{{t_output_tdata_686,t_output_tdata_690},{t_output_tdata_691,t_output_tdata_695}}};
  assign t_output_tdata_670 = 5'h02;
  assign t_output_tdata_673 = (5'h02 < t_output_tdata_165);
  assign t_output_tdata_675 = 5'h0;
  assign t_output_tdata_678 = t_output_tdata_36[15];
  assign t_output_tdata_679 = ((5'h02 < t_output_tdata_164) ? t_output_tdata_680 : 5'h0);
  assign t_output_tdata_682 = t_output_tdata_35[15];
  assign t_output_tdata_683 = ((t_output_tdata_684 < t_output_tdata_163) ? t_output_tdata_685 : 5'h0);
  assign t_output_tdata_686 = {t_output_tdata_34[15],(t_output_tdata_687 ? t_output_tdata_688 : t_output_tdata_689)};
  assign t_output_tdata_690 = t_output_tdata_34[9 : 0];
  assign t_output_tdata_691 = {{t_output_tdata_692,t_output_tdata_693},t_output_tdata_33[9 : 0]};
  assign t_output_tdata_695 = {{{t_output_tdata_696,t_output_tdata_697},t_output_tdata_32[9 : 0]},{{t_output_tdata_700,t_output_tdata_704},{t_output_tdata_705,t_output_tdata_709}}};
  assign t_output_tdata_684 = 5'h02;
  assign t_output_tdata_687 = (5'h02 < t_output_tdata_162);
  assign t_output_tdata_689 = 5'h0;
  assign t_output_tdata_692 = t_output_tdata_33[15];
  assign t_output_tdata_693 = ((5'h02 < t_output_tdata_161) ? t_output_tdata_694 : 5'h0);
  assign t_output_tdata_696 = t_output_tdata_32[15];
  assign t_output_tdata_697 = ((t_output_tdata_698 < t_output_tdata_160) ? t_output_tdata_699 : 5'h0);
  assign t_output_tdata_700 = {t_output_tdata_31[15],(t_output_tdata_701 ? t_output_tdata_702 : t_output_tdata_703)};
  assign t_output_tdata_704 = t_output_tdata_31[9 : 0];
  assign t_output_tdata_705 = {{t_output_tdata_706,t_output_tdata_707},t_output_tdata_30[9 : 0]};
  assign t_output_tdata_709 = {{{t_output_tdata_710,t_output_tdata_711},t_output_tdata_29[9 : 0]},{{t_output_tdata_714,t_output_tdata_718},{t_output_tdata_719,t_output_tdata_723}}};
  assign t_output_tdata_698 = 5'h02;
  assign t_output_tdata_701 = (5'h02 < t_output_tdata_159);
  assign t_output_tdata_703 = 5'h0;
  assign t_output_tdata_706 = t_output_tdata_30[15];
  assign t_output_tdata_707 = ((5'h02 < t_output_tdata_158) ? t_output_tdata_708 : 5'h0);
  assign t_output_tdata_710 = t_output_tdata_29[15];
  assign t_output_tdata_711 = ((t_output_tdata_712 < t_output_tdata_157) ? t_output_tdata_713 : 5'h0);
  assign t_output_tdata_714 = {t_output_tdata_28[15],(t_output_tdata_715 ? t_output_tdata_716 : t_output_tdata_717)};
  assign t_output_tdata_718 = t_output_tdata_28[9 : 0];
  assign t_output_tdata_719 = {{t_output_tdata_720,t_output_tdata_721},t_output_tdata_27[9 : 0]};
  assign t_output_tdata_723 = {{{t_output_tdata_724,t_output_tdata_725},t_output_tdata_26[9 : 0]},{{t_output_tdata_728,t_output_tdata_732},{t_output_tdata_733,t_output_tdata_737}}};
  assign t_output_tdata_712 = 5'h02;
  assign t_output_tdata_715 = (5'h02 < t_output_tdata_156);
  assign t_output_tdata_717 = 5'h0;
  assign t_output_tdata_720 = t_output_tdata_27[15];
  assign t_output_tdata_721 = ((5'h02 < t_output_tdata_155) ? t_output_tdata_722 : 5'h0);
  assign t_output_tdata_724 = t_output_tdata_26[15];
  assign t_output_tdata_725 = ((t_output_tdata_726 < t_output_tdata_154) ? t_output_tdata_727 : 5'h0);
  assign t_output_tdata_728 = {t_output_tdata_25[15],(t_output_tdata_729 ? t_output_tdata_730 : t_output_tdata_731)};
  assign t_output_tdata_732 = t_output_tdata_25[9 : 0];
  assign t_output_tdata_733 = {{t_output_tdata_734,t_output_tdata_735},t_output_tdata_24[9 : 0]};
  assign t_output_tdata_737 = {{{t_output_tdata_738,t_output_tdata_739},t_output_tdata_23[9 : 0]},{{t_output_tdata_742,t_output_tdata_746},{t_output_tdata_747,t_output_tdata_751}}};
  assign t_output_tdata_726 = 5'h02;
  assign t_output_tdata_729 = (5'h02 < t_output_tdata_153);
  assign t_output_tdata_731 = 5'h0;
  assign t_output_tdata_734 = t_output_tdata_24[15];
  assign t_output_tdata_735 = ((5'h02 < t_output_tdata_152) ? t_output_tdata_736 : 5'h0);
  assign t_output_tdata_738 = t_output_tdata_23[15];
  assign t_output_tdata_739 = ((t_output_tdata_740 < t_output_tdata_151) ? t_output_tdata_741 : 5'h0);
  assign t_output_tdata_742 = {t_output_tdata_22[15],(t_output_tdata_743 ? t_output_tdata_744 : t_output_tdata_745)};
  assign t_output_tdata_746 = t_output_tdata_22[9 : 0];
  assign t_output_tdata_747 = {{t_output_tdata_748,t_output_tdata_749},t_output_tdata_21[9 : 0]};
  assign t_output_tdata_751 = {{{t_output_tdata_752,t_output_tdata_753},t_output_tdata_20[9 : 0]},{{t_output_tdata_756,t_output_tdata_760},{t_output_tdata_761,t_output_tdata_765}}};
  assign t_output_tdata_740 = 5'h02;
  assign t_output_tdata_743 = (5'h02 < t_output_tdata_150);
  assign t_output_tdata_745 = 5'h0;
  assign t_output_tdata_748 = t_output_tdata_21[15];
  assign t_output_tdata_749 = ((5'h02 < t_output_tdata_149) ? t_output_tdata_750 : 5'h0);
  assign t_output_tdata_752 = t_output_tdata_20[15];
  assign t_output_tdata_753 = ((t_output_tdata_754 < t_output_tdata_148) ? t_output_tdata_755 : 5'h0);
  assign t_output_tdata_756 = {t_output_tdata_19[15],(t_output_tdata_757 ? t_output_tdata_758 : t_output_tdata_759)};
  assign t_output_tdata_760 = t_output_tdata_19[9 : 0];
  assign t_output_tdata_761 = {{t_output_tdata_762,t_output_tdata_763},t_output_tdata_18[9 : 0]};
  assign t_output_tdata_765 = {{{t_output_tdata_766,t_output_tdata_767},t_output_tdata_17[9 : 0]},{{t_output_tdata_770,t_output_tdata_774},{t_output_tdata_775,t_output_tdata_779}}};
  assign t_output_tdata_754 = 5'h02;
  assign t_output_tdata_757 = (5'h02 < t_output_tdata_147);
  assign t_output_tdata_759 = 5'h0;
  assign t_output_tdata_762 = t_output_tdata_18[15];
  assign t_output_tdata_763 = ((5'h02 < t_output_tdata_146) ? t_output_tdata_764 : 5'h0);
  assign t_output_tdata_766 = t_output_tdata_17[15];
  assign t_output_tdata_767 = ((t_output_tdata_768 < t_output_tdata_145) ? t_output_tdata_769 : 5'h0);
  assign t_output_tdata_770 = {t_output_tdata_16[15],(t_output_tdata_771 ? t_output_tdata_772 : t_output_tdata_773)};
  assign t_output_tdata_774 = t_output_tdata_16[9 : 0];
  assign t_output_tdata_775 = {{t_output_tdata_776,t_output_tdata_777},t_output_tdata_15[9 : 0]};
  assign t_output_tdata_779 = {{{t_output_tdata_780,t_output_tdata_781},t_output_tdata_14[9 : 0]},{{t_output_tdata_784,t_output_tdata_788},{t_output_tdata_789,t_output_tdata_793}}};
  assign t_output_tdata_768 = 5'h02;
  assign t_output_tdata_771 = (5'h02 < t_output_tdata_144);
  assign t_output_tdata_773 = 5'h0;
  assign t_output_tdata_776 = t_output_tdata_15[15];
  assign t_output_tdata_777 = ((5'h02 < t_output_tdata_143) ? t_output_tdata_778 : 5'h0);
  assign t_output_tdata_780 = t_output_tdata_14[15];
  assign t_output_tdata_781 = ((t_output_tdata_782 < t_output_tdata_142) ? t_output_tdata_783 : 5'h0);
  assign t_output_tdata_784 = {t_output_tdata_13[15],(t_output_tdata_785 ? t_output_tdata_786 : t_output_tdata_787)};
  assign t_output_tdata_788 = t_output_tdata_13[9 : 0];
  assign t_output_tdata_789 = {{t_output_tdata_790,t_output_tdata_791},t_output_tdata_12[9 : 0]};
  assign t_output_tdata_793 = {{{t_output_tdata_794,t_output_tdata_795},t_output_tdata_11[9 : 0]},{{t_output_tdata_798,t_output_tdata_802},{t_output_tdata_803,t_output_tdata_807}}};
  assign t_output_tdata_782 = 5'h02;
  assign t_output_tdata_785 = (5'h02 < t_output_tdata_141);
  assign t_output_tdata_787 = 5'h0;
  assign t_output_tdata_790 = t_output_tdata_12[15];
  assign t_output_tdata_791 = ((5'h02 < t_output_tdata_140) ? t_output_tdata_792 : 5'h0);
  assign t_output_tdata_794 = t_output_tdata_11[15];
  assign t_output_tdata_795 = ((t_output_tdata_796 < t_output_tdata_139) ? t_output_tdata_797 : 5'h0);
  assign t_output_tdata_798 = {t_output_tdata_10[15],(t_output_tdata_799 ? t_output_tdata_800 : t_output_tdata_801)};
  assign t_output_tdata_802 = t_output_tdata_10[9 : 0];
  assign t_output_tdata_803 = {{t_output_tdata_804,t_output_tdata_805},t_output_tdata_9[9 : 0]};
  assign t_output_tdata_807 = {{{t_output_tdata_808,t_output_tdata_809},t_output_tdata_8[9 : 0]},{{t_output_tdata_812,t_output_tdata_816},{t_output_tdata_817,t_output_tdata_821}}};
  assign t_output_tdata_796 = 5'h02;
  assign t_output_tdata_799 = (5'h02 < t_output_tdata_138);
  assign t_output_tdata_801 = 5'h0;
  assign t_output_tdata_804 = t_output_tdata_9[15];
  assign t_output_tdata_805 = ((5'h02 < t_output_tdata_137) ? t_output_tdata_806 : 5'h0);
  assign t_output_tdata_808 = t_output_tdata_8[15];
  assign t_output_tdata_809 = ((t_output_tdata_810 < t_output_tdata_136) ? t_output_tdata_811 : 5'h0);
  assign t_output_tdata_812 = {t_output_tdata_7[15],(t_output_tdata_813 ? t_output_tdata_814 : t_output_tdata_815)};
  assign t_output_tdata_816 = t_output_tdata_7[9 : 0];
  assign t_output_tdata_817 = {{t_output_tdata_818,t_output_tdata_819},t_output_tdata_6[9 : 0]};
  assign t_output_tdata_821 = {{{t_output_tdata_822,t_output_tdata_823},t_output_tdata_5[9 : 0]},{{t_output_tdata_826,t_output_tdata_830},{t_output_tdata_831,t_output_tdata_835}}};
  assign t_output_tdata_810 = 5'h02;
  assign t_output_tdata_813 = (5'h02 < t_output_tdata_135);
  assign t_output_tdata_815 = 5'h0;
  assign t_output_tdata_818 = t_output_tdata_6[15];
  assign t_output_tdata_819 = ((5'h02 < t_output_tdata_134) ? t_output_tdata_820 : 5'h0);
  assign t_output_tdata_822 = t_output_tdata_5[15];
  assign t_output_tdata_823 = ((t_output_tdata_824 < t_output_tdata_133) ? t_output_tdata_825 : 5'h0);
  assign t_output_tdata_826 = {t_output_tdata_4[15],(t_output_tdata_827 ? t_output_tdata_828 : t_output_tdata_829)};
  assign t_output_tdata_830 = t_output_tdata_4[9 : 0];
  assign t_output_tdata_831 = {{t_output_tdata_832,t_output_tdata_833},t_output_tdata_3[9 : 0]};
  assign t_output_tdata_835 = {{{t_output_tdata_836,t_output_tdata_837},t_output_tdata_2[9 : 0]},{{t_output_tdata_839,t_output_tdata_842},{t_output_tdata_843,t_output_tdata_846}}};
  assign t_output_tdata_824 = 5'h02;
  assign t_output_tdata_827 = (5'h02 < t_output_tdata_132);
  assign t_output_tdata_829 = 5'h0;
  assign t_output_tdata_832 = t_output_tdata_3[15];
  assign t_output_tdata_833 = ((5'h02 < t_output_tdata_131) ? t_output_tdata_834 : 5'h0);
  assign t_output_tdata_836 = t_output_tdata_2[15];
  assign t_output_tdata_837 = ((5'h02 < t_output_tdata_130) ? t_output_tdata_838 : 5'h0);
  assign t_output_tdata_839 = {t_output_tdata_1[15],((t_output_tdata_840 < t_output_tdata_129) ? t_output_tdata_841 : 5'h0)};
  assign t_output_tdata_842 = t_output_tdata_1[9 : 0];
  assign t_output_tdata_843 = {t_output_tdata[15],((t_output_tdata_844 < t_output_tdata_128) ? t_output_tdata_845 : 5'h0)};
  assign t_output_tdata_846 = t_output_tdata[9 : 0];
  assign t_output_tdata_840 = 5'h02;
  assign t_output_tdata_844 = 5'h02;
  StreamMux_41 zeroMux (
    .io_select           (zeroMux_io_select             ), //i
    .io_inputs_0_valid   (zeroInt4_tvalid               ), //i
    .io_inputs_0_ready   (zeroMux_io_inputs_0_ready     ), //o
    .io_inputs_0_payload (zeroInt4_tdata[7:0]           ), //i
    .io_inputs_1_valid   (zeroInt8_tvalid               ), //i
    .io_inputs_1_ready   (zeroMux_io_inputs_1_ready     ), //o
    .io_inputs_1_payload (zeroInt8_tdata[7:0]           ), //i
    .io_output_valid     (zeroMux_io_output_valid       ), //o
    .io_output_ready     (vldConv                       ), //i
    .io_output_payload   (zeroMux_io_output_payload[7:0])  //o
  );
  fp16int9d4 d_0_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_0_valid                            ), //i
    .s_axis_a_tdata       (d_0_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_0_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_0_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_1_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_1_valid                            ), //i
    .s_axis_a_tdata       (d_1_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_1_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_1_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_2_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_2_valid                            ), //i
    .s_axis_a_tdata       (d_2_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_2_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_2_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_3_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_3_valid                            ), //i
    .s_axis_a_tdata       (d_3_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_3_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_3_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_4_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_4_valid                            ), //i
    .s_axis_a_tdata       (d_4_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_4_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_4_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_5_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_5_valid                            ), //i
    .s_axis_a_tdata       (d_5_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_5_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_5_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_6_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_6_valid                            ), //i
    .s_axis_a_tdata       (d_6_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_6_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_6_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_7_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_7_valid                            ), //i
    .s_axis_a_tdata       (d_7_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_7_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_7_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_8_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_8_valid                            ), //i
    .s_axis_a_tdata       (d_8_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_8_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_8_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_9_from_ip (
    .aclk                 (clk_0_clk                            ), //i
    .s_axis_a_tvalid      (d_9_valid                            ), //i
    .s_axis_a_tdata       (d_9_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_9_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_9_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_10_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_10_valid                            ), //i
    .s_axis_a_tdata       (d_10_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_10_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_10_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_11_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_11_valid                            ), //i
    .s_axis_a_tdata       (d_11_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_11_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_11_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_12_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_12_valid                            ), //i
    .s_axis_a_tdata       (d_12_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_12_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_12_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_13_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_13_valid                            ), //i
    .s_axis_a_tdata       (d_13_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_13_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_13_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_14_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_14_valid                            ), //i
    .s_axis_a_tdata       (d_14_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_14_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_14_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_15_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_15_valid                            ), //i
    .s_axis_a_tdata       (d_15_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_15_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_15_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_16_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_16_valid                            ), //i
    .s_axis_a_tdata       (d_16_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_16_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_16_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_17_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_17_valid                            ), //i
    .s_axis_a_tdata       (d_17_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_17_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_17_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_18_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_18_valid                            ), //i
    .s_axis_a_tdata       (d_18_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_18_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_18_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_19_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_19_valid                            ), //i
    .s_axis_a_tdata       (d_19_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_19_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_19_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_20_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_20_valid                            ), //i
    .s_axis_a_tdata       (d_20_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_20_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_20_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_21_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_21_valid                            ), //i
    .s_axis_a_tdata       (d_21_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_21_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_21_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_22_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_22_valid                            ), //i
    .s_axis_a_tdata       (d_22_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_22_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_22_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_23_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_23_valid                            ), //i
    .s_axis_a_tdata       (d_23_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_23_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_23_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_24_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_24_valid                            ), //i
    .s_axis_a_tdata       (d_24_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_24_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_24_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_25_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_25_valid                            ), //i
    .s_axis_a_tdata       (d_25_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_25_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_25_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_26_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_26_valid                            ), //i
    .s_axis_a_tdata       (d_26_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_26_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_26_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_27_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_27_valid                            ), //i
    .s_axis_a_tdata       (d_27_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_27_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_27_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_28_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_28_valid                            ), //i
    .s_axis_a_tdata       (d_28_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_28_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_28_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_29_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_29_valid                            ), //i
    .s_axis_a_tdata       (d_29_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_29_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_29_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_30_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_30_valid                            ), //i
    .s_axis_a_tdata       (d_30_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_30_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_30_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_31_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_31_valid                            ), //i
    .s_axis_a_tdata       (d_31_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_31_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_31_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_32_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_32_valid                            ), //i
    .s_axis_a_tdata       (d_32_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_32_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_32_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_33_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_33_valid                            ), //i
    .s_axis_a_tdata       (d_33_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_33_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_33_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_34_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_34_valid                            ), //i
    .s_axis_a_tdata       (d_34_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_34_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_34_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_35_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_35_valid                            ), //i
    .s_axis_a_tdata       (d_35_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_35_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_35_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_36_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_36_valid                            ), //i
    .s_axis_a_tdata       (d_36_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_36_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_36_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_37_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_37_valid                            ), //i
    .s_axis_a_tdata       (d_37_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_37_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_37_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_38_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_38_valid                            ), //i
    .s_axis_a_tdata       (d_38_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_38_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_38_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_39_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_39_valid                            ), //i
    .s_axis_a_tdata       (d_39_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_39_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_39_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_40_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_40_valid                            ), //i
    .s_axis_a_tdata       (d_40_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_40_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_40_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_41_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_41_valid                            ), //i
    .s_axis_a_tdata       (d_41_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_41_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_41_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_42_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_42_valid                            ), //i
    .s_axis_a_tdata       (d_42_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_42_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_42_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_43_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_43_valid                            ), //i
    .s_axis_a_tdata       (d_43_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_43_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_43_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_44_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_44_valid                            ), //i
    .s_axis_a_tdata       (d_44_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_44_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_44_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_45_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_45_valid                            ), //i
    .s_axis_a_tdata       (d_45_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_45_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_45_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_46_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_46_valid                            ), //i
    .s_axis_a_tdata       (d_46_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_46_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_46_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_47_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_47_valid                            ), //i
    .s_axis_a_tdata       (d_47_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_47_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_47_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_48_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_48_valid                            ), //i
    .s_axis_a_tdata       (d_48_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_48_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_48_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_49_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_49_valid                            ), //i
    .s_axis_a_tdata       (d_49_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_49_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_49_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_50_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_50_valid                            ), //i
    .s_axis_a_tdata       (d_50_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_50_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_50_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_51_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_51_valid                            ), //i
    .s_axis_a_tdata       (d_51_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_51_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_51_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_52_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_52_valid                            ), //i
    .s_axis_a_tdata       (d_52_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_52_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_52_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_53_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_53_valid                            ), //i
    .s_axis_a_tdata       (d_53_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_53_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_53_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_54_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_54_valid                            ), //i
    .s_axis_a_tdata       (d_54_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_54_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_54_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_55_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_55_valid                            ), //i
    .s_axis_a_tdata       (d_55_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_55_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_55_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_56_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_56_valid                            ), //i
    .s_axis_a_tdata       (d_56_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_56_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_56_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_57_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_57_valid                            ), //i
    .s_axis_a_tdata       (d_57_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_57_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_57_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_58_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_58_valid                            ), //i
    .s_axis_a_tdata       (d_58_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_58_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_58_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_59_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_59_valid                            ), //i
    .s_axis_a_tdata       (d_59_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_59_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_59_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_60_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_60_valid                            ), //i
    .s_axis_a_tdata       (d_60_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_60_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_60_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_61_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_61_valid                            ), //i
    .s_axis_a_tdata       (d_61_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_61_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_61_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_62_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_62_valid                            ), //i
    .s_axis_a_tdata       (d_62_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_62_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_62_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_63_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_63_valid                            ), //i
    .s_axis_a_tdata       (d_63_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_63_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_63_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_64_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_64_valid                            ), //i
    .s_axis_a_tdata       (d_64_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_64_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_64_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_65_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_65_valid                            ), //i
    .s_axis_a_tdata       (d_65_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_65_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_65_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_66_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_66_valid                            ), //i
    .s_axis_a_tdata       (d_66_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_66_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_66_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_67_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_67_valid                            ), //i
    .s_axis_a_tdata       (d_67_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_67_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_67_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_68_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_68_valid                            ), //i
    .s_axis_a_tdata       (d_68_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_68_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_68_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_69_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_69_valid                            ), //i
    .s_axis_a_tdata       (d_69_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_69_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_69_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_70_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_70_valid                            ), //i
    .s_axis_a_tdata       (d_70_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_70_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_70_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_71_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_71_valid                            ), //i
    .s_axis_a_tdata       (d_71_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_71_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_71_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_72_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_72_valid                            ), //i
    .s_axis_a_tdata       (d_72_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_72_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_72_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_73_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_73_valid                            ), //i
    .s_axis_a_tdata       (d_73_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_73_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_73_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_74_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_74_valid                            ), //i
    .s_axis_a_tdata       (d_74_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_74_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_74_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_75_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_75_valid                            ), //i
    .s_axis_a_tdata       (d_75_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_75_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_75_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_76_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_76_valid                            ), //i
    .s_axis_a_tdata       (d_76_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_76_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_76_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_77_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_77_valid                            ), //i
    .s_axis_a_tdata       (d_77_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_77_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_77_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_78_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_78_valid                            ), //i
    .s_axis_a_tdata       (d_78_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_78_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_78_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_79_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_79_valid                            ), //i
    .s_axis_a_tdata       (d_79_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_79_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_79_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_80_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_80_valid                            ), //i
    .s_axis_a_tdata       (d_80_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_80_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_80_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_81_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_81_valid                            ), //i
    .s_axis_a_tdata       (d_81_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_81_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_81_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_82_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_82_valid                            ), //i
    .s_axis_a_tdata       (d_82_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_82_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_82_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_83_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_83_valid                            ), //i
    .s_axis_a_tdata       (d_83_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_83_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_83_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_84_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_84_valid                            ), //i
    .s_axis_a_tdata       (d_84_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_84_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_84_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_85_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_85_valid                            ), //i
    .s_axis_a_tdata       (d_85_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_85_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_85_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_86_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_86_valid                            ), //i
    .s_axis_a_tdata       (d_86_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_86_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_86_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_87_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_87_valid                            ), //i
    .s_axis_a_tdata       (d_87_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_87_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_87_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_88_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_88_valid                            ), //i
    .s_axis_a_tdata       (d_88_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_88_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_88_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_89_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_89_valid                            ), //i
    .s_axis_a_tdata       (d_89_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_89_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_89_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_90_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_90_valid                            ), //i
    .s_axis_a_tdata       (d_90_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_90_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_90_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_91_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_91_valid                            ), //i
    .s_axis_a_tdata       (d_91_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_91_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_91_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_92_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_92_valid                            ), //i
    .s_axis_a_tdata       (d_92_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_92_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_92_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_93_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_93_valid                            ), //i
    .s_axis_a_tdata       (d_93_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_93_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_93_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_94_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_94_valid                            ), //i
    .s_axis_a_tdata       (d_94_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_94_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_94_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_95_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_95_valid                            ), //i
    .s_axis_a_tdata       (d_95_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_95_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_95_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_96_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_96_valid                            ), //i
    .s_axis_a_tdata       (d_96_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_96_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_96_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_97_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_97_valid                            ), //i
    .s_axis_a_tdata       (d_97_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_97_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_97_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_98_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_98_valid                            ), //i
    .s_axis_a_tdata       (d_98_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_98_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_98_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_99_from_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (d_99_valid                            ), //i
    .s_axis_a_tdata       (d_99_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_99_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_99_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_100_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_100_valid                            ), //i
    .s_axis_a_tdata       (d_100_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_100_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_100_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_101_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_101_valid                            ), //i
    .s_axis_a_tdata       (d_101_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_101_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_101_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_102_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_102_valid                            ), //i
    .s_axis_a_tdata       (d_102_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_102_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_102_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_103_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_103_valid                            ), //i
    .s_axis_a_tdata       (d_103_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_103_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_103_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_104_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_104_valid                            ), //i
    .s_axis_a_tdata       (d_104_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_104_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_104_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_105_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_105_valid                            ), //i
    .s_axis_a_tdata       (d_105_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_105_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_105_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_106_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_106_valid                            ), //i
    .s_axis_a_tdata       (d_106_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_106_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_106_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_107_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_107_valid                            ), //i
    .s_axis_a_tdata       (d_107_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_107_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_107_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_108_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_108_valid                            ), //i
    .s_axis_a_tdata       (d_108_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_108_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_108_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_109_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_109_valid                            ), //i
    .s_axis_a_tdata       (d_109_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_109_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_109_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_110_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_110_valid                            ), //i
    .s_axis_a_tdata       (d_110_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_110_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_110_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_111_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_111_valid                            ), //i
    .s_axis_a_tdata       (d_111_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_111_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_111_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_112_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_112_valid                            ), //i
    .s_axis_a_tdata       (d_112_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_112_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_112_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_113_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_113_valid                            ), //i
    .s_axis_a_tdata       (d_113_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_113_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_113_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_114_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_114_valid                            ), //i
    .s_axis_a_tdata       (d_114_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_114_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_114_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_115_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_115_valid                            ), //i
    .s_axis_a_tdata       (d_115_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_115_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_115_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_116_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_116_valid                            ), //i
    .s_axis_a_tdata       (d_116_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_116_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_116_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_117_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_117_valid                            ), //i
    .s_axis_a_tdata       (d_117_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_117_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_117_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_118_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_118_valid                            ), //i
    .s_axis_a_tdata       (d_118_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_118_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_118_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_119_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_119_valid                            ), //i
    .s_axis_a_tdata       (d_119_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_119_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_119_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_120_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_120_valid                            ), //i
    .s_axis_a_tdata       (d_120_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_120_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_120_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_121_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_121_valid                            ), //i
    .s_axis_a_tdata       (d_121_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_121_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_121_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_122_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_122_valid                            ), //i
    .s_axis_a_tdata       (d_122_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_122_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_122_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_123_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_123_valid                            ), //i
    .s_axis_a_tdata       (d_123_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_123_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_123_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_124_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_124_valid                            ), //i
    .s_axis_a_tdata       (d_124_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_124_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_124_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_125_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_125_valid                            ), //i
    .s_axis_a_tdata       (d_125_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_125_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_125_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_126_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_126_valid                            ), //i
    .s_axis_a_tdata       (d_126_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_126_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_126_from_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16int9d4 d_127_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (d_127_valid                            ), //i
    .s_axis_a_tdata       (d_127_payload[15:0]                    ), //i
    .m_axis_result_tvalid (d_127_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (d_127_from_ip_m_axis_result_tdata[15:0])  //o
  );
  assign int8InVld = (inputData_tvalid && selInt8);
  assign int4InVld = (inputData_tvalid && (! selInt8));
  assign zeroInt4_tready = zeroMux_io_inputs_0_ready;
  assign zeroInt8_tready = zeroMux_io_inputs_1_ready;
  assign zeroMux_io_select = selInt8;
  assign int8Vld = (int8VldFlip && int8InVld);
  assign t_int8Data_0 = {inputData_tdata,dataDly};
  assign int8Data_0 = t_int8Data_0[7 : 0];
  assign int8Data_1 = t_int8Data_0[15 : 8];
  assign int8Data_2 = t_int8Data_0[23 : 16];
  assign int8Data_3 = t_int8Data_0[31 : 24];
  assign int8Data_4 = t_int8Data_0[39 : 32];
  assign int8Data_5 = t_int8Data_0[47 : 40];
  assign int8Data_6 = t_int8Data_0[55 : 48];
  assign int8Data_7 = t_int8Data_0[63 : 56];
  assign int8Data_8 = t_int8Data_0[71 : 64];
  assign int8Data_9 = t_int8Data_0[79 : 72];
  assign int8Data_10 = t_int8Data_0[87 : 80];
  assign int8Data_11 = t_int8Data_0[95 : 88];
  assign int8Data_12 = t_int8Data_0[103 : 96];
  assign int8Data_13 = t_int8Data_0[111 : 104];
  assign int8Data_14 = t_int8Data_0[119 : 112];
  assign int8Data_15 = t_int8Data_0[127 : 120];
  assign int8Data_16 = t_int8Data_0[135 : 128];
  assign int8Data_17 = t_int8Data_0[143 : 136];
  assign int8Data_18 = t_int8Data_0[151 : 144];
  assign int8Data_19 = t_int8Data_0[159 : 152];
  assign int8Data_20 = t_int8Data_0[167 : 160];
  assign int8Data_21 = t_int8Data_0[175 : 168];
  assign int8Data_22 = t_int8Data_0[183 : 176];
  assign int8Data_23 = t_int8Data_0[191 : 184];
  assign int8Data_24 = t_int8Data_0[199 : 192];
  assign int8Data_25 = t_int8Data_0[207 : 200];
  assign int8Data_26 = t_int8Data_0[215 : 208];
  assign int8Data_27 = t_int8Data_0[223 : 216];
  assign int8Data_28 = t_int8Data_0[231 : 224];
  assign int8Data_29 = t_int8Data_0[239 : 232];
  assign int8Data_30 = t_int8Data_0[247 : 240];
  assign int8Data_31 = t_int8Data_0[255 : 248];
  assign int8Data_32 = t_int8Data_0[263 : 256];
  assign int8Data_33 = t_int8Data_0[271 : 264];
  assign int8Data_34 = t_int8Data_0[279 : 272];
  assign int8Data_35 = t_int8Data_0[287 : 280];
  assign int8Data_36 = t_int8Data_0[295 : 288];
  assign int8Data_37 = t_int8Data_0[303 : 296];
  assign int8Data_38 = t_int8Data_0[311 : 304];
  assign int8Data_39 = t_int8Data_0[319 : 312];
  assign int8Data_40 = t_int8Data_0[327 : 320];
  assign int8Data_41 = t_int8Data_0[335 : 328];
  assign int8Data_42 = t_int8Data_0[343 : 336];
  assign int8Data_43 = t_int8Data_0[351 : 344];
  assign int8Data_44 = t_int8Data_0[359 : 352];
  assign int8Data_45 = t_int8Data_0[367 : 360];
  assign int8Data_46 = t_int8Data_0[375 : 368];
  assign int8Data_47 = t_int8Data_0[383 : 376];
  assign int8Data_48 = t_int8Data_0[391 : 384];
  assign int8Data_49 = t_int8Data_0[399 : 392];
  assign int8Data_50 = t_int8Data_0[407 : 400];
  assign int8Data_51 = t_int8Data_0[415 : 408];
  assign int8Data_52 = t_int8Data_0[423 : 416];
  assign int8Data_53 = t_int8Data_0[431 : 424];
  assign int8Data_54 = t_int8Data_0[439 : 432];
  assign int8Data_55 = t_int8Data_0[447 : 440];
  assign int8Data_56 = t_int8Data_0[455 : 448];
  assign int8Data_57 = t_int8Data_0[463 : 456];
  assign int8Data_58 = t_int8Data_0[471 : 464];
  assign int8Data_59 = t_int8Data_0[479 : 472];
  assign int8Data_60 = t_int8Data_0[487 : 480];
  assign int8Data_61 = t_int8Data_0[495 : 488];
  assign int8Data_62 = t_int8Data_0[503 : 496];
  assign int8Data_63 = t_int8Data_0[511 : 504];
  assign int8Data_64 = t_int8Data_0[519 : 512];
  assign int8Data_65 = t_int8Data_0[527 : 520];
  assign int8Data_66 = t_int8Data_0[535 : 528];
  assign int8Data_67 = t_int8Data_0[543 : 536];
  assign int8Data_68 = t_int8Data_0[551 : 544];
  assign int8Data_69 = t_int8Data_0[559 : 552];
  assign int8Data_70 = t_int8Data_0[567 : 560];
  assign int8Data_71 = t_int8Data_0[575 : 568];
  assign int8Data_72 = t_int8Data_0[583 : 576];
  assign int8Data_73 = t_int8Data_0[591 : 584];
  assign int8Data_74 = t_int8Data_0[599 : 592];
  assign int8Data_75 = t_int8Data_0[607 : 600];
  assign int8Data_76 = t_int8Data_0[615 : 608];
  assign int8Data_77 = t_int8Data_0[623 : 616];
  assign int8Data_78 = t_int8Data_0[631 : 624];
  assign int8Data_79 = t_int8Data_0[639 : 632];
  assign int8Data_80 = t_int8Data_0[647 : 640];
  assign int8Data_81 = t_int8Data_0[655 : 648];
  assign int8Data_82 = t_int8Data_0[663 : 656];
  assign int8Data_83 = t_int8Data_0[671 : 664];
  assign int8Data_84 = t_int8Data_0[679 : 672];
  assign int8Data_85 = t_int8Data_0[687 : 680];
  assign int8Data_86 = t_int8Data_0[695 : 688];
  assign int8Data_87 = t_int8Data_0[703 : 696];
  assign int8Data_88 = t_int8Data_0[711 : 704];
  assign int8Data_89 = t_int8Data_0[719 : 712];
  assign int8Data_90 = t_int8Data_0[727 : 720];
  assign int8Data_91 = t_int8Data_0[735 : 728];
  assign int8Data_92 = t_int8Data_0[743 : 736];
  assign int8Data_93 = t_int8Data_0[751 : 744];
  assign int8Data_94 = t_int8Data_0[759 : 752];
  assign int8Data_95 = t_int8Data_0[767 : 760];
  assign int8Data_96 = t_int8Data_0[775 : 768];
  assign int8Data_97 = t_int8Data_0[783 : 776];
  assign int8Data_98 = t_int8Data_0[791 : 784];
  assign int8Data_99 = t_int8Data_0[799 : 792];
  assign int8Data_100 = t_int8Data_0[807 : 800];
  assign int8Data_101 = t_int8Data_0[815 : 808];
  assign int8Data_102 = t_int8Data_0[823 : 816];
  assign int8Data_103 = t_int8Data_0[831 : 824];
  assign int8Data_104 = t_int8Data_0[839 : 832];
  assign int8Data_105 = t_int8Data_0[847 : 840];
  assign int8Data_106 = t_int8Data_0[855 : 848];
  assign int8Data_107 = t_int8Data_0[863 : 856];
  assign int8Data_108 = t_int8Data_0[871 : 864];
  assign int8Data_109 = t_int8Data_0[879 : 872];
  assign int8Data_110 = t_int8Data_0[887 : 880];
  assign int8Data_111 = t_int8Data_0[895 : 888];
  assign int8Data_112 = t_int8Data_0[903 : 896];
  assign int8Data_113 = t_int8Data_0[911 : 904];
  assign int8Data_114 = t_int8Data_0[919 : 912];
  assign int8Data_115 = t_int8Data_0[927 : 920];
  assign int8Data_116 = t_int8Data_0[935 : 928];
  assign int8Data_117 = t_int8Data_0[943 : 936];
  assign int8Data_118 = t_int8Data_0[951 : 944];
  assign int8Data_119 = t_int8Data_0[959 : 952];
  assign int8Data_120 = t_int8Data_0[967 : 960];
  assign int8Data_121 = t_int8Data_0[975 : 968];
  assign int8Data_122 = t_int8Data_0[983 : 976];
  assign int8Data_123 = t_int8Data_0[991 : 984];
  assign int8Data_124 = t_int8Data_0[999 : 992];
  assign int8Data_125 = t_int8Data_0[1007 : 1000];
  assign int8Data_126 = t_int8Data_0[1015 : 1008];
  assign int8Data_127 = t_int8Data_0[1023 : 1016];
  assign int4Data_0 = {4'd0, t_int4Data_0};
  assign int4Data_1 = {4'd0, t_int4Data_1};
  assign int4Data_2 = {4'd0, t_int4Data_2};
  assign int4Data_3 = {4'd0, t_int4Data_3};
  assign int4Data_4 = {4'd0, t_int4Data_4};
  assign int4Data_5 = {4'd0, t_int4Data_5};
  assign int4Data_6 = {4'd0, t_int4Data_6};
  assign int4Data_7 = {4'd0, t_int4Data_7};
  assign int4Data_8 = {4'd0, t_int4Data_8};
  assign int4Data_9 = {4'd0, t_int4Data_9};
  assign int4Data_10 = {4'd0, t_int4Data_10};
  assign int4Data_11 = {4'd0, t_int4Data_11};
  assign int4Data_12 = {4'd0, t_int4Data_12};
  assign int4Data_13 = {4'd0, t_int4Data_13};
  assign int4Data_14 = {4'd0, t_int4Data_14};
  assign int4Data_15 = {4'd0, t_int4Data_15};
  assign int4Data_16 = {4'd0, t_int4Data_16};
  assign int4Data_17 = {4'd0, t_int4Data_17};
  assign int4Data_18 = {4'd0, t_int4Data_18};
  assign int4Data_19 = {4'd0, t_int4Data_19};
  assign int4Data_20 = {4'd0, t_int4Data_20};
  assign int4Data_21 = {4'd0, t_int4Data_21};
  assign int4Data_22 = {4'd0, t_int4Data_22};
  assign int4Data_23 = {4'd0, t_int4Data_23};
  assign int4Data_24 = {4'd0, t_int4Data_24};
  assign int4Data_25 = {4'd0, t_int4Data_25};
  assign int4Data_26 = {4'd0, t_int4Data_26};
  assign int4Data_27 = {4'd0, t_int4Data_27};
  assign int4Data_28 = {4'd0, t_int4Data_28};
  assign int4Data_29 = {4'd0, t_int4Data_29};
  assign int4Data_30 = {4'd0, t_int4Data_30};
  assign int4Data_31 = {4'd0, t_int4Data_31};
  assign int4Data_32 = {4'd0, t_int4Data_32};
  assign int4Data_33 = {4'd0, t_int4Data_33};
  assign int4Data_34 = {4'd0, t_int4Data_34};
  assign int4Data_35 = {4'd0, t_int4Data_35};
  assign int4Data_36 = {4'd0, t_int4Data_36};
  assign int4Data_37 = {4'd0, t_int4Data_37};
  assign int4Data_38 = {4'd0, t_int4Data_38};
  assign int4Data_39 = {4'd0, t_int4Data_39};
  assign int4Data_40 = {4'd0, t_int4Data_40};
  assign int4Data_41 = {4'd0, t_int4Data_41};
  assign int4Data_42 = {4'd0, t_int4Data_42};
  assign int4Data_43 = {4'd0, t_int4Data_43};
  assign int4Data_44 = {4'd0, t_int4Data_44};
  assign int4Data_45 = {4'd0, t_int4Data_45};
  assign int4Data_46 = {4'd0, t_int4Data_46};
  assign int4Data_47 = {4'd0, t_int4Data_47};
  assign int4Data_48 = {4'd0, t_int4Data_48};
  assign int4Data_49 = {4'd0, t_int4Data_49};
  assign int4Data_50 = {4'd0, t_int4Data_50};
  assign int4Data_51 = {4'd0, t_int4Data_51};
  assign int4Data_52 = {4'd0, t_int4Data_52};
  assign int4Data_53 = {4'd0, t_int4Data_53};
  assign int4Data_54 = {4'd0, t_int4Data_54};
  assign int4Data_55 = {4'd0, t_int4Data_55};
  assign int4Data_56 = {4'd0, t_int4Data_56};
  assign int4Data_57 = {4'd0, t_int4Data_57};
  assign int4Data_58 = {4'd0, t_int4Data_58};
  assign int4Data_59 = {4'd0, t_int4Data_59};
  assign int4Data_60 = {4'd0, t_int4Data_60};
  assign int4Data_61 = {4'd0, t_int4Data_61};
  assign int4Data_62 = {4'd0, t_int4Data_62};
  assign int4Data_63 = {4'd0, t_int4Data_63};
  assign int4Data_64 = {4'd0, t_int4Data_64};
  assign int4Data_65 = {4'd0, t_int4Data_65};
  assign int4Data_66 = {4'd0, t_int4Data_66};
  assign int4Data_67 = {4'd0, t_int4Data_67};
  assign int4Data_68 = {4'd0, t_int4Data_68};
  assign int4Data_69 = {4'd0, t_int4Data_69};
  assign int4Data_70 = {4'd0, t_int4Data_70};
  assign int4Data_71 = {4'd0, t_int4Data_71};
  assign int4Data_72 = {4'd0, t_int4Data_72};
  assign int4Data_73 = {4'd0, t_int4Data_73};
  assign int4Data_74 = {4'd0, t_int4Data_74};
  assign int4Data_75 = {4'd0, t_int4Data_75};
  assign int4Data_76 = {4'd0, t_int4Data_76};
  assign int4Data_77 = {4'd0, t_int4Data_77};
  assign int4Data_78 = {4'd0, t_int4Data_78};
  assign int4Data_79 = {4'd0, t_int4Data_79};
  assign int4Data_80 = {4'd0, t_int4Data_80};
  assign int4Data_81 = {4'd0, t_int4Data_81};
  assign int4Data_82 = {4'd0, t_int4Data_82};
  assign int4Data_83 = {4'd0, t_int4Data_83};
  assign int4Data_84 = {4'd0, t_int4Data_84};
  assign int4Data_85 = {4'd0, t_int4Data_85};
  assign int4Data_86 = {4'd0, t_int4Data_86};
  assign int4Data_87 = {4'd0, t_int4Data_87};
  assign int4Data_88 = {4'd0, t_int4Data_88};
  assign int4Data_89 = {4'd0, t_int4Data_89};
  assign int4Data_90 = {4'd0, t_int4Data_90};
  assign int4Data_91 = {4'd0, t_int4Data_91};
  assign int4Data_92 = {4'd0, t_int4Data_92};
  assign int4Data_93 = {4'd0, t_int4Data_93};
  assign int4Data_94 = {4'd0, t_int4Data_94};
  assign int4Data_95 = {4'd0, t_int4Data_95};
  assign int4Data_96 = {4'd0, t_int4Data_96};
  assign int4Data_97 = {4'd0, t_int4Data_97};
  assign int4Data_98 = {4'd0, t_int4Data_98};
  assign int4Data_99 = {4'd0, t_int4Data_99};
  assign int4Data_100 = {4'd0, t_int4Data_100};
  assign int4Data_101 = {4'd0, t_int4Data_101};
  assign int4Data_102 = {4'd0, t_int4Data_102};
  assign int4Data_103 = {4'd0, t_int4Data_103};
  assign int4Data_104 = {4'd0, t_int4Data_104};
  assign int4Data_105 = {4'd0, t_int4Data_105};
  assign int4Data_106 = {4'd0, t_int4Data_106};
  assign int4Data_107 = {4'd0, t_int4Data_107};
  assign int4Data_108 = {4'd0, t_int4Data_108};
  assign int4Data_109 = {4'd0, t_int4Data_109};
  assign int4Data_110 = {4'd0, t_int4Data_110};
  assign int4Data_111 = {4'd0, t_int4Data_111};
  assign int4Data_112 = {4'd0, t_int4Data_112};
  assign int4Data_113 = {4'd0, t_int4Data_113};
  assign int4Data_114 = {4'd0, t_int4Data_114};
  assign int4Data_115 = {4'd0, t_int4Data_115};
  assign int4Data_116 = {4'd0, t_int4Data_116};
  assign int4Data_117 = {4'd0, t_int4Data_117};
  assign int4Data_118 = {4'd0, t_int4Data_118};
  assign int4Data_119 = {4'd0, t_int4Data_119};
  assign int4Data_120 = {4'd0, t_int4Data_120};
  assign int4Data_121 = {4'd0, t_int4Data_121};
  assign int4Data_122 = {4'd0, t_int4Data_122};
  assign int4Data_123 = {4'd0, t_int4Data_123};
  assign int4Data_124 = {4'd0, t_int4Data_124};
  assign int4Data_125 = {4'd0, t_int4Data_125};
  assign int4Data_126 = {4'd0, t_int4Data_126};
  assign int4Data_127 = {4'd0, t_int4Data_127};
  assign vldConv = (selInt8 ? int8Vld : int4InVld);
  assign dataConv_0 = (selInt8 ? int8Data_0 : int4Data_0);
  assign dataConv_1 = (selInt8 ? int8Data_1 : int4Data_1);
  assign dataConv_2 = (selInt8 ? int8Data_2 : int4Data_2);
  assign dataConv_3 = (selInt8 ? int8Data_3 : int4Data_3);
  assign dataConv_4 = (selInt8 ? int8Data_4 : int4Data_4);
  assign dataConv_5 = (selInt8 ? int8Data_5 : int4Data_5);
  assign dataConv_6 = (selInt8 ? int8Data_6 : int4Data_6);
  assign dataConv_7 = (selInt8 ? int8Data_7 : int4Data_7);
  assign dataConv_8 = (selInt8 ? int8Data_8 : int4Data_8);
  assign dataConv_9 = (selInt8 ? int8Data_9 : int4Data_9);
  assign dataConv_10 = (selInt8 ? int8Data_10 : int4Data_10);
  assign dataConv_11 = (selInt8 ? int8Data_11 : int4Data_11);
  assign dataConv_12 = (selInt8 ? int8Data_12 : int4Data_12);
  assign dataConv_13 = (selInt8 ? int8Data_13 : int4Data_13);
  assign dataConv_14 = (selInt8 ? int8Data_14 : int4Data_14);
  assign dataConv_15 = (selInt8 ? int8Data_15 : int4Data_15);
  assign dataConv_16 = (selInt8 ? int8Data_16 : int4Data_16);
  assign dataConv_17 = (selInt8 ? int8Data_17 : int4Data_17);
  assign dataConv_18 = (selInt8 ? int8Data_18 : int4Data_18);
  assign dataConv_19 = (selInt8 ? int8Data_19 : int4Data_19);
  assign dataConv_20 = (selInt8 ? int8Data_20 : int4Data_20);
  assign dataConv_21 = (selInt8 ? int8Data_21 : int4Data_21);
  assign dataConv_22 = (selInt8 ? int8Data_22 : int4Data_22);
  assign dataConv_23 = (selInt8 ? int8Data_23 : int4Data_23);
  assign dataConv_24 = (selInt8 ? int8Data_24 : int4Data_24);
  assign dataConv_25 = (selInt8 ? int8Data_25 : int4Data_25);
  assign dataConv_26 = (selInt8 ? int8Data_26 : int4Data_26);
  assign dataConv_27 = (selInt8 ? int8Data_27 : int4Data_27);
  assign dataConv_28 = (selInt8 ? int8Data_28 : int4Data_28);
  assign dataConv_29 = (selInt8 ? int8Data_29 : int4Data_29);
  assign dataConv_30 = (selInt8 ? int8Data_30 : int4Data_30);
  assign dataConv_31 = (selInt8 ? int8Data_31 : int4Data_31);
  assign dataConv_32 = (selInt8 ? int8Data_32 : int4Data_32);
  assign dataConv_33 = (selInt8 ? int8Data_33 : int4Data_33);
  assign dataConv_34 = (selInt8 ? int8Data_34 : int4Data_34);
  assign dataConv_35 = (selInt8 ? int8Data_35 : int4Data_35);
  assign dataConv_36 = (selInt8 ? int8Data_36 : int4Data_36);
  assign dataConv_37 = (selInt8 ? int8Data_37 : int4Data_37);
  assign dataConv_38 = (selInt8 ? int8Data_38 : int4Data_38);
  assign dataConv_39 = (selInt8 ? int8Data_39 : int4Data_39);
  assign dataConv_40 = (selInt8 ? int8Data_40 : int4Data_40);
  assign dataConv_41 = (selInt8 ? int8Data_41 : int4Data_41);
  assign dataConv_42 = (selInt8 ? int8Data_42 : int4Data_42);
  assign dataConv_43 = (selInt8 ? int8Data_43 : int4Data_43);
  assign dataConv_44 = (selInt8 ? int8Data_44 : int4Data_44);
  assign dataConv_45 = (selInt8 ? int8Data_45 : int4Data_45);
  assign dataConv_46 = (selInt8 ? int8Data_46 : int4Data_46);
  assign dataConv_47 = (selInt8 ? int8Data_47 : int4Data_47);
  assign dataConv_48 = (selInt8 ? int8Data_48 : int4Data_48);
  assign dataConv_49 = (selInt8 ? int8Data_49 : int4Data_49);
  assign dataConv_50 = (selInt8 ? int8Data_50 : int4Data_50);
  assign dataConv_51 = (selInt8 ? int8Data_51 : int4Data_51);
  assign dataConv_52 = (selInt8 ? int8Data_52 : int4Data_52);
  assign dataConv_53 = (selInt8 ? int8Data_53 : int4Data_53);
  assign dataConv_54 = (selInt8 ? int8Data_54 : int4Data_54);
  assign dataConv_55 = (selInt8 ? int8Data_55 : int4Data_55);
  assign dataConv_56 = (selInt8 ? int8Data_56 : int4Data_56);
  assign dataConv_57 = (selInt8 ? int8Data_57 : int4Data_57);
  assign dataConv_58 = (selInt8 ? int8Data_58 : int4Data_58);
  assign dataConv_59 = (selInt8 ? int8Data_59 : int4Data_59);
  assign dataConv_60 = (selInt8 ? int8Data_60 : int4Data_60);
  assign dataConv_61 = (selInt8 ? int8Data_61 : int4Data_61);
  assign dataConv_62 = (selInt8 ? int8Data_62 : int4Data_62);
  assign dataConv_63 = (selInt8 ? int8Data_63 : int4Data_63);
  assign dataConv_64 = (selInt8 ? int8Data_64 : int4Data_64);
  assign dataConv_65 = (selInt8 ? int8Data_65 : int4Data_65);
  assign dataConv_66 = (selInt8 ? int8Data_66 : int4Data_66);
  assign dataConv_67 = (selInt8 ? int8Data_67 : int4Data_67);
  assign dataConv_68 = (selInt8 ? int8Data_68 : int4Data_68);
  assign dataConv_69 = (selInt8 ? int8Data_69 : int4Data_69);
  assign dataConv_70 = (selInt8 ? int8Data_70 : int4Data_70);
  assign dataConv_71 = (selInt8 ? int8Data_71 : int4Data_71);
  assign dataConv_72 = (selInt8 ? int8Data_72 : int4Data_72);
  assign dataConv_73 = (selInt8 ? int8Data_73 : int4Data_73);
  assign dataConv_74 = (selInt8 ? int8Data_74 : int4Data_74);
  assign dataConv_75 = (selInt8 ? int8Data_75 : int4Data_75);
  assign dataConv_76 = (selInt8 ? int8Data_76 : int4Data_76);
  assign dataConv_77 = (selInt8 ? int8Data_77 : int4Data_77);
  assign dataConv_78 = (selInt8 ? int8Data_78 : int4Data_78);
  assign dataConv_79 = (selInt8 ? int8Data_79 : int4Data_79);
  assign dataConv_80 = (selInt8 ? int8Data_80 : int4Data_80);
  assign dataConv_81 = (selInt8 ? int8Data_81 : int4Data_81);
  assign dataConv_82 = (selInt8 ? int8Data_82 : int4Data_82);
  assign dataConv_83 = (selInt8 ? int8Data_83 : int4Data_83);
  assign dataConv_84 = (selInt8 ? int8Data_84 : int4Data_84);
  assign dataConv_85 = (selInt8 ? int8Data_85 : int4Data_85);
  assign dataConv_86 = (selInt8 ? int8Data_86 : int4Data_86);
  assign dataConv_87 = (selInt8 ? int8Data_87 : int4Data_87);
  assign dataConv_88 = (selInt8 ? int8Data_88 : int4Data_88);
  assign dataConv_89 = (selInt8 ? int8Data_89 : int4Data_89);
  assign dataConv_90 = (selInt8 ? int8Data_90 : int4Data_90);
  assign dataConv_91 = (selInt8 ? int8Data_91 : int4Data_91);
  assign dataConv_92 = (selInt8 ? int8Data_92 : int4Data_92);
  assign dataConv_93 = (selInt8 ? int8Data_93 : int4Data_93);
  assign dataConv_94 = (selInt8 ? int8Data_94 : int4Data_94);
  assign dataConv_95 = (selInt8 ? int8Data_95 : int4Data_95);
  assign dataConv_96 = (selInt8 ? int8Data_96 : int4Data_96);
  assign dataConv_97 = (selInt8 ? int8Data_97 : int4Data_97);
  assign dataConv_98 = (selInt8 ? int8Data_98 : int4Data_98);
  assign dataConv_99 = (selInt8 ? int8Data_99 : int4Data_99);
  assign dataConv_100 = (selInt8 ? int8Data_100 : int4Data_100);
  assign dataConv_101 = (selInt8 ? int8Data_101 : int4Data_101);
  assign dataConv_102 = (selInt8 ? int8Data_102 : int4Data_102);
  assign dataConv_103 = (selInt8 ? int8Data_103 : int4Data_103);
  assign dataConv_104 = (selInt8 ? int8Data_104 : int4Data_104);
  assign dataConv_105 = (selInt8 ? int8Data_105 : int4Data_105);
  assign dataConv_106 = (selInt8 ? int8Data_106 : int4Data_106);
  assign dataConv_107 = (selInt8 ? int8Data_107 : int4Data_107);
  assign dataConv_108 = (selInt8 ? int8Data_108 : int4Data_108);
  assign dataConv_109 = (selInt8 ? int8Data_109 : int4Data_109);
  assign dataConv_110 = (selInt8 ? int8Data_110 : int4Data_110);
  assign dataConv_111 = (selInt8 ? int8Data_111 : int4Data_111);
  assign dataConv_112 = (selInt8 ? int8Data_112 : int4Data_112);
  assign dataConv_113 = (selInt8 ? int8Data_113 : int4Data_113);
  assign dataConv_114 = (selInt8 ? int8Data_114 : int4Data_114);
  assign dataConv_115 = (selInt8 ? int8Data_115 : int4Data_115);
  assign dataConv_116 = (selInt8 ? int8Data_116 : int4Data_116);
  assign dataConv_117 = (selInt8 ? int8Data_117 : int4Data_117);
  assign dataConv_118 = (selInt8 ? int8Data_118 : int4Data_118);
  assign dataConv_119 = (selInt8 ? int8Data_119 : int4Data_119);
  assign dataConv_120 = (selInt8 ? int8Data_120 : int4Data_120);
  assign dataConv_121 = (selInt8 ? int8Data_121 : int4Data_121);
  assign dataConv_122 = (selInt8 ? int8Data_122 : int4Data_122);
  assign dataConv_123 = (selInt8 ? int8Data_123 : int4Data_123);
  assign dataConv_124 = (selInt8 ? int8Data_124 : int4Data_124);
  assign dataConv_125 = (selInt8 ? int8Data_125 : int4Data_125);
  assign dataConv_126 = (selInt8 ? int8Data_126 : int4Data_126);
  assign dataConv_127 = (selInt8 ? int8Data_127 : int4Data_127);
  assign dSub_0 = t_dSub_0;
  assign dSub_1 = t_dSub_1;
  assign dSub_2 = t_dSub_2;
  assign dSub_3 = t_dSub_3;
  assign dSub_4 = t_dSub_4;
  assign dSub_5 = t_dSub_5;
  assign dSub_6 = t_dSub_6;
  assign dSub_7 = t_dSub_7;
  assign dSub_8 = t_dSub_8;
  assign dSub_9 = t_dSub_9;
  assign dSub_10 = t_dSub_10;
  assign dSub_11 = t_dSub_11;
  assign dSub_12 = t_dSub_12;
  assign dSub_13 = t_dSub_13;
  assign dSub_14 = t_dSub_14;
  assign dSub_15 = t_dSub_15;
  assign dSub_16 = t_dSub_16;
  assign dSub_17 = t_dSub_17;
  assign dSub_18 = t_dSub_18;
  assign dSub_19 = t_dSub_19;
  assign dSub_20 = t_dSub_20;
  assign dSub_21 = t_dSub_21;
  assign dSub_22 = t_dSub_22;
  assign dSub_23 = t_dSub_23;
  assign dSub_24 = t_dSub_24;
  assign dSub_25 = t_dSub_25;
  assign dSub_26 = t_dSub_26;
  assign dSub_27 = t_dSub_27;
  assign dSub_28 = t_dSub_28;
  assign dSub_29 = t_dSub_29;
  assign dSub_30 = t_dSub_30;
  assign dSub_31 = t_dSub_31;
  assign dSub_32 = t_dSub_32;
  assign dSub_33 = t_dSub_33;
  assign dSub_34 = t_dSub_34;
  assign dSub_35 = t_dSub_35;
  assign dSub_36 = t_dSub_36;
  assign dSub_37 = t_dSub_37;
  assign dSub_38 = t_dSub_38;
  assign dSub_39 = t_dSub_39;
  assign dSub_40 = t_dSub_40;
  assign dSub_41 = t_dSub_41;
  assign dSub_42 = t_dSub_42;
  assign dSub_43 = t_dSub_43;
  assign dSub_44 = t_dSub_44;
  assign dSub_45 = t_dSub_45;
  assign dSub_46 = t_dSub_46;
  assign dSub_47 = t_dSub_47;
  assign dSub_48 = t_dSub_48;
  assign dSub_49 = t_dSub_49;
  assign dSub_50 = t_dSub_50;
  assign dSub_51 = t_dSub_51;
  assign dSub_52 = t_dSub_52;
  assign dSub_53 = t_dSub_53;
  assign dSub_54 = t_dSub_54;
  assign dSub_55 = t_dSub_55;
  assign dSub_56 = t_dSub_56;
  assign dSub_57 = t_dSub_57;
  assign dSub_58 = t_dSub_58;
  assign dSub_59 = t_dSub_59;
  assign dSub_60 = t_dSub_60;
  assign dSub_61 = t_dSub_61;
  assign dSub_62 = t_dSub_62;
  assign dSub_63 = t_dSub_63;
  assign dSub_64 = t_dSub_64;
  assign dSub_65 = t_dSub_65;
  assign dSub_66 = t_dSub_66;
  assign dSub_67 = t_dSub_67;
  assign dSub_68 = t_dSub_68;
  assign dSub_69 = t_dSub_69;
  assign dSub_70 = t_dSub_70;
  assign dSub_71 = t_dSub_71;
  assign dSub_72 = t_dSub_72;
  assign dSub_73 = t_dSub_73;
  assign dSub_74 = t_dSub_74;
  assign dSub_75 = t_dSub_75;
  assign dSub_76 = t_dSub_76;
  assign dSub_77 = t_dSub_77;
  assign dSub_78 = t_dSub_78;
  assign dSub_79 = t_dSub_79;
  assign dSub_80 = t_dSub_80;
  assign dSub_81 = t_dSub_81;
  assign dSub_82 = t_dSub_82;
  assign dSub_83 = t_dSub_83;
  assign dSub_84 = t_dSub_84;
  assign dSub_85 = t_dSub_85;
  assign dSub_86 = t_dSub_86;
  assign dSub_87 = t_dSub_87;
  assign dSub_88 = t_dSub_88;
  assign dSub_89 = t_dSub_89;
  assign dSub_90 = t_dSub_90;
  assign dSub_91 = t_dSub_91;
  assign dSub_92 = t_dSub_92;
  assign dSub_93 = t_dSub_93;
  assign dSub_94 = t_dSub_94;
  assign dSub_95 = t_dSub_95;
  assign dSub_96 = t_dSub_96;
  assign dSub_97 = t_dSub_97;
  assign dSub_98 = t_dSub_98;
  assign dSub_99 = t_dSub_99;
  assign dSub_100 = t_dSub_100;
  assign dSub_101 = t_dSub_101;
  assign dSub_102 = t_dSub_102;
  assign dSub_103 = t_dSub_103;
  assign dSub_104 = t_dSub_104;
  assign dSub_105 = t_dSub_105;
  assign dSub_106 = t_dSub_106;
  assign dSub_107 = t_dSub_107;
  assign dSub_108 = t_dSub_108;
  assign dSub_109 = t_dSub_109;
  assign dSub_110 = t_dSub_110;
  assign dSub_111 = t_dSub_111;
  assign dSub_112 = t_dSub_112;
  assign dSub_113 = t_dSub_113;
  assign dSub_114 = t_dSub_114;
  assign dSub_115 = t_dSub_115;
  assign dSub_116 = t_dSub_116;
  assign dSub_117 = t_dSub_117;
  assign dSub_118 = t_dSub_118;
  assign dSub_119 = t_dSub_119;
  assign dSub_120 = t_dSub_120;
  assign dSub_121 = t_dSub_121;
  assign dSub_122 = t_dSub_122;
  assign dSub_123 = t_dSub_123;
  assign dSub_124 = t_dSub_124;
  assign dSub_125 = t_dSub_125;
  assign dSub_126 = t_dSub_126;
  assign dSub_127 = t_dSub_127;
  assign dDly_0 = {7'd0, dSub_0};
  assign dDly_1 = {7'd0, dSub_1};
  assign dDly_2 = {7'd0, dSub_2};
  assign dDly_3 = {7'd0, dSub_3};
  assign dDly_4 = {7'd0, dSub_4};
  assign dDly_5 = {7'd0, dSub_5};
  assign dDly_6 = {7'd0, dSub_6};
  assign dDly_7 = {7'd0, dSub_7};
  assign dDly_8 = {7'd0, dSub_8};
  assign dDly_9 = {7'd0, dSub_9};
  assign dDly_10 = {7'd0, dSub_10};
  assign dDly_11 = {7'd0, dSub_11};
  assign dDly_12 = {7'd0, dSub_12};
  assign dDly_13 = {7'd0, dSub_13};
  assign dDly_14 = {7'd0, dSub_14};
  assign dDly_15 = {7'd0, dSub_15};
  assign dDly_16 = {7'd0, dSub_16};
  assign dDly_17 = {7'd0, dSub_17};
  assign dDly_18 = {7'd0, dSub_18};
  assign dDly_19 = {7'd0, dSub_19};
  assign dDly_20 = {7'd0, dSub_20};
  assign dDly_21 = {7'd0, dSub_21};
  assign dDly_22 = {7'd0, dSub_22};
  assign dDly_23 = {7'd0, dSub_23};
  assign dDly_24 = {7'd0, dSub_24};
  assign dDly_25 = {7'd0, dSub_25};
  assign dDly_26 = {7'd0, dSub_26};
  assign dDly_27 = {7'd0, dSub_27};
  assign dDly_28 = {7'd0, dSub_28};
  assign dDly_29 = {7'd0, dSub_29};
  assign dDly_30 = {7'd0, dSub_30};
  assign dDly_31 = {7'd0, dSub_31};
  assign dDly_32 = {7'd0, dSub_32};
  assign dDly_33 = {7'd0, dSub_33};
  assign dDly_34 = {7'd0, dSub_34};
  assign dDly_35 = {7'd0, dSub_35};
  assign dDly_36 = {7'd0, dSub_36};
  assign dDly_37 = {7'd0, dSub_37};
  assign dDly_38 = {7'd0, dSub_38};
  assign dDly_39 = {7'd0, dSub_39};
  assign dDly_40 = {7'd0, dSub_40};
  assign dDly_41 = {7'd0, dSub_41};
  assign dDly_42 = {7'd0, dSub_42};
  assign dDly_43 = {7'd0, dSub_43};
  assign dDly_44 = {7'd0, dSub_44};
  assign dDly_45 = {7'd0, dSub_45};
  assign dDly_46 = {7'd0, dSub_46};
  assign dDly_47 = {7'd0, dSub_47};
  assign dDly_48 = {7'd0, dSub_48};
  assign dDly_49 = {7'd0, dSub_49};
  assign dDly_50 = {7'd0, dSub_50};
  assign dDly_51 = {7'd0, dSub_51};
  assign dDly_52 = {7'd0, dSub_52};
  assign dDly_53 = {7'd0, dSub_53};
  assign dDly_54 = {7'd0, dSub_54};
  assign dDly_55 = {7'd0, dSub_55};
  assign dDly_56 = {7'd0, dSub_56};
  assign dDly_57 = {7'd0, dSub_57};
  assign dDly_58 = {7'd0, dSub_58};
  assign dDly_59 = {7'd0, dSub_59};
  assign dDly_60 = {7'd0, dSub_60};
  assign dDly_61 = {7'd0, dSub_61};
  assign dDly_62 = {7'd0, dSub_62};
  assign dDly_63 = {7'd0, dSub_63};
  assign dDly_64 = {7'd0, dSub_64};
  assign dDly_65 = {7'd0, dSub_65};
  assign dDly_66 = {7'd0, dSub_66};
  assign dDly_67 = {7'd0, dSub_67};
  assign dDly_68 = {7'd0, dSub_68};
  assign dDly_69 = {7'd0, dSub_69};
  assign dDly_70 = {7'd0, dSub_70};
  assign dDly_71 = {7'd0, dSub_71};
  assign dDly_72 = {7'd0, dSub_72};
  assign dDly_73 = {7'd0, dSub_73};
  assign dDly_74 = {7'd0, dSub_74};
  assign dDly_75 = {7'd0, dSub_75};
  assign dDly_76 = {7'd0, dSub_76};
  assign dDly_77 = {7'd0, dSub_77};
  assign dDly_78 = {7'd0, dSub_78};
  assign dDly_79 = {7'd0, dSub_79};
  assign dDly_80 = {7'd0, dSub_80};
  assign dDly_81 = {7'd0, dSub_81};
  assign dDly_82 = {7'd0, dSub_82};
  assign dDly_83 = {7'd0, dSub_83};
  assign dDly_84 = {7'd0, dSub_84};
  assign dDly_85 = {7'd0, dSub_85};
  assign dDly_86 = {7'd0, dSub_86};
  assign dDly_87 = {7'd0, dSub_87};
  assign dDly_88 = {7'd0, dSub_88};
  assign dDly_89 = {7'd0, dSub_89};
  assign dDly_90 = {7'd0, dSub_90};
  assign dDly_91 = {7'd0, dSub_91};
  assign dDly_92 = {7'd0, dSub_92};
  assign dDly_93 = {7'd0, dSub_93};
  assign dDly_94 = {7'd0, dSub_94};
  assign dDly_95 = {7'd0, dSub_95};
  assign dDly_96 = {7'd0, dSub_96};
  assign dDly_97 = {7'd0, dSub_97};
  assign dDly_98 = {7'd0, dSub_98};
  assign dDly_99 = {7'd0, dSub_99};
  assign dDly_100 = {7'd0, dSub_100};
  assign dDly_101 = {7'd0, dSub_101};
  assign dDly_102 = {7'd0, dSub_102};
  assign dDly_103 = {7'd0, dSub_103};
  assign dDly_104 = {7'd0, dSub_104};
  assign dDly_105 = {7'd0, dSub_105};
  assign dDly_106 = {7'd0, dSub_106};
  assign dDly_107 = {7'd0, dSub_107};
  assign dDly_108 = {7'd0, dSub_108};
  assign dDly_109 = {7'd0, dSub_109};
  assign dDly_110 = {7'd0, dSub_110};
  assign dDly_111 = {7'd0, dSub_111};
  assign dDly_112 = {7'd0, dSub_112};
  assign dDly_113 = {7'd0, dSub_113};
  assign dDly_114 = {7'd0, dSub_114};
  assign dDly_115 = {7'd0, dSub_115};
  assign dDly_116 = {7'd0, dSub_116};
  assign dDly_117 = {7'd0, dSub_117};
  assign dDly_118 = {7'd0, dSub_118};
  assign dDly_119 = {7'd0, dSub_119};
  assign dDly_120 = {7'd0, dSub_120};
  assign dDly_121 = {7'd0, dSub_121};
  assign dDly_122 = {7'd0, dSub_122};
  assign dDly_123 = {7'd0, dSub_123};
  assign dDly_124 = {7'd0, dSub_124};
  assign dDly_125 = {7'd0, dSub_125};
  assign dDly_126 = {7'd0, dSub_126};
  assign dDly_127 = {7'd0, dSub_127};
  assign d_0_valid = 1'b1;
  assign d_1_valid = 1'b1;
  assign d_2_valid = 1'b1;
  assign d_3_valid = 1'b1;
  assign d_4_valid = 1'b1;
  assign d_5_valid = 1'b1;
  assign d_6_valid = 1'b1;
  assign d_7_valid = 1'b1;
  assign d_8_valid = 1'b1;
  assign d_9_valid = 1'b1;
  assign d_10_valid = 1'b1;
  assign d_11_valid = 1'b1;
  assign d_12_valid = 1'b1;
  assign d_13_valid = 1'b1;
  assign d_14_valid = 1'b1;
  assign d_15_valid = 1'b1;
  assign d_16_valid = 1'b1;
  assign d_17_valid = 1'b1;
  assign d_18_valid = 1'b1;
  assign d_19_valid = 1'b1;
  assign d_20_valid = 1'b1;
  assign d_21_valid = 1'b1;
  assign d_22_valid = 1'b1;
  assign d_23_valid = 1'b1;
  assign d_24_valid = 1'b1;
  assign d_25_valid = 1'b1;
  assign d_26_valid = 1'b1;
  assign d_27_valid = 1'b1;
  assign d_28_valid = 1'b1;
  assign d_29_valid = 1'b1;
  assign d_30_valid = 1'b1;
  assign d_31_valid = 1'b1;
  assign d_32_valid = 1'b1;
  assign d_33_valid = 1'b1;
  assign d_34_valid = 1'b1;
  assign d_35_valid = 1'b1;
  assign d_36_valid = 1'b1;
  assign d_37_valid = 1'b1;
  assign d_38_valid = 1'b1;
  assign d_39_valid = 1'b1;
  assign d_40_valid = 1'b1;
  assign d_41_valid = 1'b1;
  assign d_42_valid = 1'b1;
  assign d_43_valid = 1'b1;
  assign d_44_valid = 1'b1;
  assign d_45_valid = 1'b1;
  assign d_46_valid = 1'b1;
  assign d_47_valid = 1'b1;
  assign d_48_valid = 1'b1;
  assign d_49_valid = 1'b1;
  assign d_50_valid = 1'b1;
  assign d_51_valid = 1'b1;
  assign d_52_valid = 1'b1;
  assign d_53_valid = 1'b1;
  assign d_54_valid = 1'b1;
  assign d_55_valid = 1'b1;
  assign d_56_valid = 1'b1;
  assign d_57_valid = 1'b1;
  assign d_58_valid = 1'b1;
  assign d_59_valid = 1'b1;
  assign d_60_valid = 1'b1;
  assign d_61_valid = 1'b1;
  assign d_62_valid = 1'b1;
  assign d_63_valid = 1'b1;
  assign d_64_valid = 1'b1;
  assign d_65_valid = 1'b1;
  assign d_66_valid = 1'b1;
  assign d_67_valid = 1'b1;
  assign d_68_valid = 1'b1;
  assign d_69_valid = 1'b1;
  assign d_70_valid = 1'b1;
  assign d_71_valid = 1'b1;
  assign d_72_valid = 1'b1;
  assign d_73_valid = 1'b1;
  assign d_74_valid = 1'b1;
  assign d_75_valid = 1'b1;
  assign d_76_valid = 1'b1;
  assign d_77_valid = 1'b1;
  assign d_78_valid = 1'b1;
  assign d_79_valid = 1'b1;
  assign d_80_valid = 1'b1;
  assign d_81_valid = 1'b1;
  assign d_82_valid = 1'b1;
  assign d_83_valid = 1'b1;
  assign d_84_valid = 1'b1;
  assign d_85_valid = 1'b1;
  assign d_86_valid = 1'b1;
  assign d_87_valid = 1'b1;
  assign d_88_valid = 1'b1;
  assign d_89_valid = 1'b1;
  assign d_90_valid = 1'b1;
  assign d_91_valid = 1'b1;
  assign d_92_valid = 1'b1;
  assign d_93_valid = 1'b1;
  assign d_94_valid = 1'b1;
  assign d_95_valid = 1'b1;
  assign d_96_valid = 1'b1;
  assign d_97_valid = 1'b1;
  assign d_98_valid = 1'b1;
  assign d_99_valid = 1'b1;
  assign d_100_valid = 1'b1;
  assign d_101_valid = 1'b1;
  assign d_102_valid = 1'b1;
  assign d_103_valid = 1'b1;
  assign d_104_valid = 1'b1;
  assign d_105_valid = 1'b1;
  assign d_106_valid = 1'b1;
  assign d_107_valid = 1'b1;
  assign d_108_valid = 1'b1;
  assign d_109_valid = 1'b1;
  assign d_110_valid = 1'b1;
  assign d_111_valid = 1'b1;
  assign d_112_valid = 1'b1;
  assign d_113_valid = 1'b1;
  assign d_114_valid = 1'b1;
  assign d_115_valid = 1'b1;
  assign d_116_valid = 1'b1;
  assign d_117_valid = 1'b1;
  assign d_118_valid = 1'b1;
  assign d_119_valid = 1'b1;
  assign d_120_valid = 1'b1;
  assign d_121_valid = 1'b1;
  assign d_122_valid = 1'b1;
  assign d_123_valid = 1'b1;
  assign d_124_valid = 1'b1;
  assign d_125_valid = 1'b1;
  assign d_126_valid = 1'b1;
  assign d_127_valid = 1'b1;
  assign d_0_payload = dDly_0;
  assign d_1_payload = dDly_1;
  assign d_2_payload = dDly_2;
  assign d_3_payload = dDly_3;
  assign d_4_payload = dDly_4;
  assign d_5_payload = dDly_5;
  assign d_6_payload = dDly_6;
  assign d_7_payload = dDly_7;
  assign d_8_payload = dDly_8;
  assign d_9_payload = dDly_9;
  assign d_10_payload = dDly_10;
  assign d_11_payload = dDly_11;
  assign d_12_payload = dDly_12;
  assign d_13_payload = dDly_13;
  assign d_14_payload = dDly_14;
  assign d_15_payload = dDly_15;
  assign d_16_payload = dDly_16;
  assign d_17_payload = dDly_17;
  assign d_18_payload = dDly_18;
  assign d_19_payload = dDly_19;
  assign d_20_payload = dDly_20;
  assign d_21_payload = dDly_21;
  assign d_22_payload = dDly_22;
  assign d_23_payload = dDly_23;
  assign d_24_payload = dDly_24;
  assign d_25_payload = dDly_25;
  assign d_26_payload = dDly_26;
  assign d_27_payload = dDly_27;
  assign d_28_payload = dDly_28;
  assign d_29_payload = dDly_29;
  assign d_30_payload = dDly_30;
  assign d_31_payload = dDly_31;
  assign d_32_payload = dDly_32;
  assign d_33_payload = dDly_33;
  assign d_34_payload = dDly_34;
  assign d_35_payload = dDly_35;
  assign d_36_payload = dDly_36;
  assign d_37_payload = dDly_37;
  assign d_38_payload = dDly_38;
  assign d_39_payload = dDly_39;
  assign d_40_payload = dDly_40;
  assign d_41_payload = dDly_41;
  assign d_42_payload = dDly_42;
  assign d_43_payload = dDly_43;
  assign d_44_payload = dDly_44;
  assign d_45_payload = dDly_45;
  assign d_46_payload = dDly_46;
  assign d_47_payload = dDly_47;
  assign d_48_payload = dDly_48;
  assign d_49_payload = dDly_49;
  assign d_50_payload = dDly_50;
  assign d_51_payload = dDly_51;
  assign d_52_payload = dDly_52;
  assign d_53_payload = dDly_53;
  assign d_54_payload = dDly_54;
  assign d_55_payload = dDly_55;
  assign d_56_payload = dDly_56;
  assign d_57_payload = dDly_57;
  assign d_58_payload = dDly_58;
  assign d_59_payload = dDly_59;
  assign d_60_payload = dDly_60;
  assign d_61_payload = dDly_61;
  assign d_62_payload = dDly_62;
  assign d_63_payload = dDly_63;
  assign d_64_payload = dDly_64;
  assign d_65_payload = dDly_65;
  assign d_66_payload = dDly_66;
  assign d_67_payload = dDly_67;
  assign d_68_payload = dDly_68;
  assign d_69_payload = dDly_69;
  assign d_70_payload = dDly_70;
  assign d_71_payload = dDly_71;
  assign d_72_payload = dDly_72;
  assign d_73_payload = dDly_73;
  assign d_74_payload = dDly_74;
  assign d_75_payload = dDly_75;
  assign d_76_payload = dDly_76;
  assign d_77_payload = dDly_77;
  assign d_78_payload = dDly_78;
  assign d_79_payload = dDly_79;
  assign d_80_payload = dDly_80;
  assign d_81_payload = dDly_81;
  assign d_82_payload = dDly_82;
  assign d_83_payload = dDly_83;
  assign d_84_payload = dDly_84;
  assign d_85_payload = dDly_85;
  assign d_86_payload = dDly_86;
  assign d_87_payload = dDly_87;
  assign d_88_payload = dDly_88;
  assign d_89_payload = dDly_89;
  assign d_90_payload = dDly_90;
  assign d_91_payload = dDly_91;
  assign d_92_payload = dDly_92;
  assign d_93_payload = dDly_93;
  assign d_94_payload = dDly_94;
  assign d_95_payload = dDly_95;
  assign d_96_payload = dDly_96;
  assign d_97_payload = dDly_97;
  assign d_98_payload = dDly_98;
  assign d_99_payload = dDly_99;
  assign d_100_payload = dDly_100;
  assign d_101_payload = dDly_101;
  assign d_102_payload = dDly_102;
  assign d_103_payload = dDly_103;
  assign d_104_payload = dDly_104;
  assign d_105_payload = dDly_105;
  assign d_106_payload = dDly_106;
  assign d_107_payload = dDly_107;
  assign d_108_payload = dDly_108;
  assign d_109_payload = dDly_109;
  assign d_110_payload = dDly_110;
  assign d_111_payload = dDly_111;
  assign d_112_payload = dDly_112;
  assign d_113_payload = dDly_113;
  assign d_114_payload = dDly_114;
  assign d_115_payload = dDly_115;
  assign d_116_payload = dDly_116;
  assign d_117_payload = dDly_117;
  assign d_118_payload = dDly_118;
  assign d_119_payload = dDly_119;
  assign d_120_payload = dDly_120;
  assign d_121_payload = dDly_121;
  assign d_122_payload = dDly_122;
  assign d_123_payload = dDly_123;
  assign d_124_payload = dDly_124;
  assign d_125_payload = dDly_125;
  assign d_126_payload = dDly_126;
  assign d_127_payload = dDly_127;
  assign wPy = {d_127_from_ip_m_axis_result_tdata,{d_126_from_ip_m_axis_result_tdata,{d_125_from_ip_m_axis_result_tdata,{d_124_from_ip_m_axis_result_tdata,{d_123_from_ip_m_axis_result_tdata,{d_122_from_ip_m_axis_result_tdata,{d_121_from_ip_m_axis_result_tdata,{d_120_from_ip_m_axis_result_tdata,{d_119_from_ip_m_axis_result_tdata,{d_118_from_ip_m_axis_result_tdata,{d_117_from_ip_m_axis_result_tdata,{d_116_from_ip_m_axis_result_tdata,{d_115_from_ip_m_axis_result_tdata,{d_114_from_ip_m_axis_result_tdata,{d_113_from_ip_m_axis_result_tdata,{d_112_from_ip_m_axis_result_tdata,t_wPy}}}}}}}}}}}}}}}};
  assign output_tvalid = vld;
  assign t_output_tdata = wPy[15 : 0];
  assign t_output_tdata_1 = wPy[31 : 16];
  assign t_output_tdata_2 = wPy[47 : 32];
  assign t_output_tdata_3 = wPy[63 : 48];
  assign t_output_tdata_4 = wPy[79 : 64];
  assign t_output_tdata_5 = wPy[95 : 80];
  assign t_output_tdata_6 = wPy[111 : 96];
  assign t_output_tdata_7 = wPy[127 : 112];
  assign t_output_tdata_8 = wPy[143 : 128];
  assign t_output_tdata_9 = wPy[159 : 144];
  assign t_output_tdata_10 = wPy[175 : 160];
  assign t_output_tdata_11 = wPy[191 : 176];
  assign t_output_tdata_12 = wPy[207 : 192];
  assign t_output_tdata_13 = wPy[223 : 208];
  assign t_output_tdata_14 = wPy[239 : 224];
  assign t_output_tdata_15 = wPy[255 : 240];
  assign t_output_tdata_16 = wPy[271 : 256];
  assign t_output_tdata_17 = wPy[287 : 272];
  assign t_output_tdata_18 = wPy[303 : 288];
  assign t_output_tdata_19 = wPy[319 : 304];
  assign t_output_tdata_20 = wPy[335 : 320];
  assign t_output_tdata_21 = wPy[351 : 336];
  assign t_output_tdata_22 = wPy[367 : 352];
  assign t_output_tdata_23 = wPy[383 : 368];
  assign t_output_tdata_24 = wPy[399 : 384];
  assign t_output_tdata_25 = wPy[415 : 400];
  assign t_output_tdata_26 = wPy[431 : 416];
  assign t_output_tdata_27 = wPy[447 : 432];
  assign t_output_tdata_28 = wPy[463 : 448];
  assign t_output_tdata_29 = wPy[479 : 464];
  assign t_output_tdata_30 = wPy[495 : 480];
  assign t_output_tdata_31 = wPy[511 : 496];
  assign t_output_tdata_32 = wPy[527 : 512];
  assign t_output_tdata_33 = wPy[543 : 528];
  assign t_output_tdata_34 = wPy[559 : 544];
  assign t_output_tdata_35 = wPy[575 : 560];
  assign t_output_tdata_36 = wPy[591 : 576];
  assign t_output_tdata_37 = wPy[607 : 592];
  assign t_output_tdata_38 = wPy[623 : 608];
  assign t_output_tdata_39 = wPy[639 : 624];
  assign t_output_tdata_40 = wPy[655 : 640];
  assign t_output_tdata_41 = wPy[671 : 656];
  assign t_output_tdata_42 = wPy[687 : 672];
  assign t_output_tdata_43 = wPy[703 : 688];
  assign t_output_tdata_44 = wPy[719 : 704];
  assign t_output_tdata_45 = wPy[735 : 720];
  assign t_output_tdata_46 = wPy[751 : 736];
  assign t_output_tdata_47 = wPy[767 : 752];
  assign t_output_tdata_48 = wPy[783 : 768];
  assign t_output_tdata_49 = wPy[799 : 784];
  assign t_output_tdata_50 = wPy[815 : 800];
  assign t_output_tdata_51 = wPy[831 : 816];
  assign t_output_tdata_52 = wPy[847 : 832];
  assign t_output_tdata_53 = wPy[863 : 848];
  assign t_output_tdata_54 = wPy[879 : 864];
  assign t_output_tdata_55 = wPy[895 : 880];
  assign t_output_tdata_56 = wPy[911 : 896];
  assign t_output_tdata_57 = wPy[927 : 912];
  assign t_output_tdata_58 = wPy[943 : 928];
  assign t_output_tdata_59 = wPy[959 : 944];
  assign t_output_tdata_60 = wPy[975 : 960];
  assign t_output_tdata_61 = wPy[991 : 976];
  assign t_output_tdata_62 = wPy[1007 : 992];
  assign t_output_tdata_63 = wPy[1023 : 1008];
  assign t_output_tdata_64 = wPy[1039 : 1024];
  assign t_output_tdata_65 = wPy[1055 : 1040];
  assign t_output_tdata_66 = wPy[1071 : 1056];
  assign t_output_tdata_67 = wPy[1087 : 1072];
  assign t_output_tdata_68 = wPy[1103 : 1088];
  assign t_output_tdata_69 = wPy[1119 : 1104];
  assign t_output_tdata_70 = wPy[1135 : 1120];
  assign t_output_tdata_71 = wPy[1151 : 1136];
  assign t_output_tdata_72 = wPy[1167 : 1152];
  assign t_output_tdata_73 = wPy[1183 : 1168];
  assign t_output_tdata_74 = wPy[1199 : 1184];
  assign t_output_tdata_75 = wPy[1215 : 1200];
  assign t_output_tdata_76 = wPy[1231 : 1216];
  assign t_output_tdata_77 = wPy[1247 : 1232];
  assign t_output_tdata_78 = wPy[1263 : 1248];
  assign t_output_tdata_79 = wPy[1279 : 1264];
  assign t_output_tdata_80 = wPy[1295 : 1280];
  assign t_output_tdata_81 = wPy[1311 : 1296];
  assign t_output_tdata_82 = wPy[1327 : 1312];
  assign t_output_tdata_83 = wPy[1343 : 1328];
  assign t_output_tdata_84 = wPy[1359 : 1344];
  assign t_output_tdata_85 = wPy[1375 : 1360];
  assign t_output_tdata_86 = wPy[1391 : 1376];
  assign t_output_tdata_87 = wPy[1407 : 1392];
  assign t_output_tdata_88 = wPy[1423 : 1408];
  assign t_output_tdata_89 = wPy[1439 : 1424];
  assign t_output_tdata_90 = wPy[1455 : 1440];
  assign t_output_tdata_91 = wPy[1471 : 1456];
  assign t_output_tdata_92 = wPy[1487 : 1472];
  assign t_output_tdata_93 = wPy[1503 : 1488];
  assign t_output_tdata_94 = wPy[1519 : 1504];
  assign t_output_tdata_95 = wPy[1535 : 1520];
  assign t_output_tdata_96 = wPy[1551 : 1536];
  assign t_output_tdata_97 = wPy[1567 : 1552];
  assign t_output_tdata_98 = wPy[1583 : 1568];
  assign t_output_tdata_99 = wPy[1599 : 1584];
  assign t_output_tdata_100 = wPy[1615 : 1600];
  assign t_output_tdata_101 = wPy[1631 : 1616];
  assign t_output_tdata_102 = wPy[1647 : 1632];
  assign t_output_tdata_103 = wPy[1663 : 1648];
  assign t_output_tdata_104 = wPy[1679 : 1664];
  assign t_output_tdata_105 = wPy[1695 : 1680];
  assign t_output_tdata_106 = wPy[1711 : 1696];
  assign t_output_tdata_107 = wPy[1727 : 1712];
  assign t_output_tdata_108 = wPy[1743 : 1728];
  assign t_output_tdata_109 = wPy[1759 : 1744];
  assign t_output_tdata_110 = wPy[1775 : 1760];
  assign t_output_tdata_111 = wPy[1791 : 1776];
  assign t_output_tdata_112 = wPy[1807 : 1792];
  assign t_output_tdata_113 = wPy[1823 : 1808];
  assign t_output_tdata_114 = wPy[1839 : 1824];
  assign t_output_tdata_115 = wPy[1855 : 1840];
  assign t_output_tdata_116 = wPy[1871 : 1856];
  assign t_output_tdata_117 = wPy[1887 : 1872];
  assign t_output_tdata_118 = wPy[1903 : 1888];
  assign t_output_tdata_119 = wPy[1919 : 1904];
  assign t_output_tdata_120 = wPy[1935 : 1920];
  assign t_output_tdata_121 = wPy[1951 : 1936];
  assign t_output_tdata_122 = wPy[1967 : 1952];
  assign t_output_tdata_123 = wPy[1983 : 1968];
  assign t_output_tdata_124 = wPy[1999 : 1984];
  assign t_output_tdata_125 = wPy[2015 : 2000];
  assign t_output_tdata_126 = wPy[2031 : 2016];
  assign t_output_tdata_127 = wPy[2047 : 2032];
  assign t_output_tdata_128 = t_t_output_tdata_128[4 : 0];
  assign t_output_tdata_129 = t_t_output_tdata_129[4 : 0];
  assign t_output_tdata_130 = t_t_output_tdata_130[4 : 0];
  assign t_output_tdata_131 = t_t_output_tdata_131[4 : 0];
  assign t_output_tdata_132 = t_t_output_tdata_132[4 : 0];
  assign t_output_tdata_133 = t_t_output_tdata_133[4 : 0];
  assign t_output_tdata_134 = t_t_output_tdata_134[4 : 0];
  assign t_output_tdata_135 = t_t_output_tdata_135[4 : 0];
  assign t_output_tdata_136 = t_t_output_tdata_136[4 : 0];
  assign t_output_tdata_137 = t_t_output_tdata_137[4 : 0];
  assign t_output_tdata_138 = t_t_output_tdata_138[4 : 0];
  assign t_output_tdata_139 = t_t_output_tdata_139[4 : 0];
  assign t_output_tdata_140 = t_t_output_tdata_140[4 : 0];
  assign t_output_tdata_141 = t_t_output_tdata_141[4 : 0];
  assign t_output_tdata_142 = t_t_output_tdata_142[4 : 0];
  assign t_output_tdata_143 = t_t_output_tdata_143[4 : 0];
  assign t_output_tdata_144 = t_t_output_tdata_144[4 : 0];
  assign t_output_tdata_145 = t_t_output_tdata_145[4 : 0];
  assign t_output_tdata_146 = t_t_output_tdata_146[4 : 0];
  assign t_output_tdata_147 = t_t_output_tdata_147[4 : 0];
  assign t_output_tdata_148 = t_t_output_tdata_148[4 : 0];
  assign t_output_tdata_149 = t_t_output_tdata_149[4 : 0];
  assign t_output_tdata_150 = t_t_output_tdata_150[4 : 0];
  assign t_output_tdata_151 = t_t_output_tdata_151[4 : 0];
  assign t_output_tdata_152 = t_t_output_tdata_152[4 : 0];
  assign t_output_tdata_153 = t_t_output_tdata_153[4 : 0];
  assign t_output_tdata_154 = t_t_output_tdata_154[4 : 0];
  assign t_output_tdata_155 = t_t_output_tdata_155[4 : 0];
  assign t_output_tdata_156 = t_t_output_tdata_156[4 : 0];
  assign t_output_tdata_157 = t_t_output_tdata_157[4 : 0];
  assign t_output_tdata_158 = t_t_output_tdata_158[4 : 0];
  assign t_output_tdata_159 = t_t_output_tdata_159[4 : 0];
  assign t_output_tdata_160 = t_t_output_tdata_160[4 : 0];
  assign t_output_tdata_161 = t_t_output_tdata_161[4 : 0];
  assign t_output_tdata_162 = t_t_output_tdata_162[4 : 0];
  assign t_output_tdata_163 = t_t_output_tdata_163[4 : 0];
  assign t_output_tdata_164 = t_t_output_tdata_164[4 : 0];
  assign t_output_tdata_165 = t_t_output_tdata_165[4 : 0];
  assign t_output_tdata_166 = t_t_output_tdata_166[4 : 0];
  assign t_output_tdata_167 = t_t_output_tdata_167[4 : 0];
  assign t_output_tdata_168 = t_t_output_tdata_168[4 : 0];
  assign t_output_tdata_169 = t_t_output_tdata_169[4 : 0];
  assign t_output_tdata_170 = t_t_output_tdata_170[4 : 0];
  assign t_output_tdata_171 = t_t_output_tdata_171[4 : 0];
  assign t_output_tdata_172 = t_t_output_tdata_172[4 : 0];
  assign t_output_tdata_173 = t_t_output_tdata_173[4 : 0];
  assign t_output_tdata_174 = t_t_output_tdata_174[4 : 0];
  assign t_output_tdata_175 = t_t_output_tdata_175[4 : 0];
  assign t_output_tdata_176 = t_t_output_tdata_176[4 : 0];
  assign t_output_tdata_177 = t_t_output_tdata_177[4 : 0];
  assign t_output_tdata_178 = t_t_output_tdata_178[4 : 0];
  assign t_output_tdata_179 = t_t_output_tdata_179[4 : 0];
  assign t_output_tdata_180 = t_t_output_tdata_180[4 : 0];
  assign t_output_tdata_181 = t_t_output_tdata_181[4 : 0];
  assign t_output_tdata_182 = t_t_output_tdata_182[4 : 0];
  assign t_output_tdata_183 = t_t_output_tdata_183[4 : 0];
  assign t_output_tdata_184 = t_t_output_tdata_184[4 : 0];
  assign t_output_tdata_185 = t_t_output_tdata_185[4 : 0];
  assign t_output_tdata_186 = t_t_output_tdata_186[4 : 0];
  assign t_output_tdata_187 = t_t_output_tdata_187[4 : 0];
  assign t_output_tdata_188 = t_t_output_tdata_188[4 : 0];
  assign t_output_tdata_189 = t_t_output_tdata_189[4 : 0];
  assign t_output_tdata_190 = t_t_output_tdata_190[4 : 0];
  assign t_output_tdata_191 = t_t_output_tdata_191[4 : 0];
  assign t_output_tdata_192 = t_t_output_tdata_192[4 : 0];
  assign t_output_tdata_193 = t_t_output_tdata_193[4 : 0];
  assign t_output_tdata_194 = t_t_output_tdata_194[4 : 0];
  assign t_output_tdata_195 = t_t_output_tdata_195[4 : 0];
  assign t_output_tdata_196 = t_t_output_tdata_196[4 : 0];
  assign t_output_tdata_197 = t_t_output_tdata_197[4 : 0];
  assign t_output_tdata_198 = t_t_output_tdata_198[4 : 0];
  assign t_output_tdata_199 = t_t_output_tdata_199[4 : 0];
  assign t_output_tdata_200 = t_t_output_tdata_200[4 : 0];
  assign t_output_tdata_201 = t_t_output_tdata_201[4 : 0];
  assign t_output_tdata_202 = t_t_output_tdata_202[4 : 0];
  assign t_output_tdata_203 = t_t_output_tdata_203[4 : 0];
  assign t_output_tdata_204 = t_t_output_tdata_204[4 : 0];
  assign t_output_tdata_205 = t_t_output_tdata_205[4 : 0];
  assign t_output_tdata_206 = t_t_output_tdata_206[4 : 0];
  assign t_output_tdata_207 = t_t_output_tdata_207[4 : 0];
  assign t_output_tdata_208 = t_t_output_tdata_208[4 : 0];
  assign t_output_tdata_209 = t_t_output_tdata_209[4 : 0];
  assign t_output_tdata_210 = t_t_output_tdata_210[4 : 0];
  assign t_output_tdata_211 = t_t_output_tdata_211[4 : 0];
  assign t_output_tdata_212 = t_t_output_tdata_212[4 : 0];
  assign t_output_tdata_213 = t_t_output_tdata_213[4 : 0];
  assign t_output_tdata_214 = t_t_output_tdata_214[4 : 0];
  assign t_output_tdata_215 = t_t_output_tdata_215[4 : 0];
  assign t_output_tdata_216 = t_t_output_tdata_216[4 : 0];
  assign t_output_tdata_217 = t_t_output_tdata_217[4 : 0];
  assign t_output_tdata_218 = t_t_output_tdata_218[4 : 0];
  assign t_output_tdata_219 = t_t_output_tdata_219[4 : 0];
  assign t_output_tdata_220 = t_t_output_tdata_220[4 : 0];
  assign t_output_tdata_221 = t_t_output_tdata_221[4 : 0];
  assign t_output_tdata_222 = t_t_output_tdata_222[4 : 0];
  assign t_output_tdata_223 = t_t_output_tdata_223[4 : 0];
  assign t_output_tdata_224 = t_t_output_tdata_224[4 : 0];
  assign t_output_tdata_225 = t_t_output_tdata_225[4 : 0];
  assign t_output_tdata_226 = t_t_output_tdata_226[4 : 0];
  assign t_output_tdata_227 = t_t_output_tdata_227[4 : 0];
  assign t_output_tdata_228 = t_t_output_tdata_228[4 : 0];
  assign t_output_tdata_229 = t_t_output_tdata_229[4 : 0];
  assign t_output_tdata_230 = t_t_output_tdata_230[4 : 0];
  assign t_output_tdata_231 = t_t_output_tdata_231[4 : 0];
  assign t_output_tdata_232 = t_t_output_tdata_232[4 : 0];
  assign t_output_tdata_233 = t_t_output_tdata_233[4 : 0];
  assign t_output_tdata_234 = t_t_output_tdata_234[4 : 0];
  assign t_output_tdata_235 = t_t_output_tdata_235[4 : 0];
  assign t_output_tdata_236 = t_t_output_tdata_236[4 : 0];
  assign t_output_tdata_237 = t_t_output_tdata_237[4 : 0];
  assign t_output_tdata_238 = t_t_output_tdata_238[4 : 0];
  assign t_output_tdata_239 = t_t_output_tdata_239[4 : 0];
  assign t_output_tdata_240 = t_t_output_tdata_240[4 : 0];
  assign t_output_tdata_241 = t_t_output_tdata_241[4 : 0];
  assign t_output_tdata_242 = t_t_output_tdata_242[4 : 0];
  assign t_output_tdata_243 = t_t_output_tdata_243[4 : 0];
  assign t_output_tdata_244 = t_t_output_tdata_244[4 : 0];
  assign t_output_tdata_245 = t_t_output_tdata_245[4 : 0];
  assign t_output_tdata_246 = t_t_output_tdata_246[4 : 0];
  assign t_output_tdata_247 = t_t_output_tdata_247[4 : 0];
  assign t_output_tdata_248 = t_t_output_tdata_248[4 : 0];
  assign t_output_tdata_249 = t_t_output_tdata_249[4 : 0];
  assign t_output_tdata_250 = t_t_output_tdata_250[4 : 0];
  assign t_output_tdata_251 = t_t_output_tdata_251[4 : 0];
  assign t_output_tdata_252 = t_t_output_tdata_252[4 : 0];
  assign t_output_tdata_253 = t_t_output_tdata_253[4 : 0];
  assign t_output_tdata_254 = t_t_output_tdata_254[4 : 0];
  assign t_output_tdata_255 = t_t_output_tdata_255[4 : 0];
  assign output_tdata = {{{t_output_tdata_127[15],(t_output_tdata_256 ? t_output_tdata_257 : t_output_tdata_258)},t_output_tdata_127[9 : 0]},{{{t_output_tdata_259,t_output_tdata_260},t_output_tdata_126[9 : 0]},{{{t_output_tdata_262,t_output_tdata_263},t_output_tdata_125[9 : 0]},{{t_output_tdata_266,t_output_tdata_270},{t_output_tdata_271,t_output_tdata_275}}}}};
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      int8VldFlip <= 1'b0;
      vldConv_delay_1 <= 1'b0;
      vldConv_delay_2 <= 1'b0;
      vldConv_delay_3 <= 1'b0;
      vldConv_delay_4 <= 1'b0;
      vld <= 1'b0;
    end else begin
      if(int8InVld) begin
        int8VldFlip <= (! int8VldFlip);
      end
      vldConv_delay_1 <= vldConv;
      vldConv_delay_2 <= vldConv_delay_1;
      vldConv_delay_3 <= vldConv_delay_2;
      vldConv_delay_4 <= vldConv_delay_3;
      vld <= vldConv_delay_4;
    end
  end

  always @(posedge clk_0_clk) begin
    if(int8InVld) begin
      dataDly <= inputData_tdata;
    end
    zero <= {1'b0,zeroMux_io_output_payload};
    subDiv_0 <= dataConv_0;
    subDiv_1 <= dataConv_1;
    subDiv_2 <= dataConv_2;
    subDiv_3 <= dataConv_3;
    subDiv_4 <= dataConv_4;
    subDiv_5 <= dataConv_5;
    subDiv_6 <= dataConv_6;
    subDiv_7 <= dataConv_7;
    subDiv_8 <= dataConv_8;
    subDiv_9 <= dataConv_9;
    subDiv_10 <= dataConv_10;
    subDiv_11 <= dataConv_11;
    subDiv_12 <= dataConv_12;
    subDiv_13 <= dataConv_13;
    subDiv_14 <= dataConv_14;
    subDiv_15 <= dataConv_15;
    subDiv_16 <= dataConv_16;
    subDiv_17 <= dataConv_17;
    subDiv_18 <= dataConv_18;
    subDiv_19 <= dataConv_19;
    subDiv_20 <= dataConv_20;
    subDiv_21 <= dataConv_21;
    subDiv_22 <= dataConv_22;
    subDiv_23 <= dataConv_23;
    subDiv_24 <= dataConv_24;
    subDiv_25 <= dataConv_25;
    subDiv_26 <= dataConv_26;
    subDiv_27 <= dataConv_27;
    subDiv_28 <= dataConv_28;
    subDiv_29 <= dataConv_29;
    subDiv_30 <= dataConv_30;
    subDiv_31 <= dataConv_31;
    subDiv_32 <= dataConv_32;
    subDiv_33 <= dataConv_33;
    subDiv_34 <= dataConv_34;
    subDiv_35 <= dataConv_35;
    subDiv_36 <= dataConv_36;
    subDiv_37 <= dataConv_37;
    subDiv_38 <= dataConv_38;
    subDiv_39 <= dataConv_39;
    subDiv_40 <= dataConv_40;
    subDiv_41 <= dataConv_41;
    subDiv_42 <= dataConv_42;
    subDiv_43 <= dataConv_43;
    subDiv_44 <= dataConv_44;
    subDiv_45 <= dataConv_45;
    subDiv_46 <= dataConv_46;
    subDiv_47 <= dataConv_47;
    subDiv_48 <= dataConv_48;
    subDiv_49 <= dataConv_49;
    subDiv_50 <= dataConv_50;
    subDiv_51 <= dataConv_51;
    subDiv_52 <= dataConv_52;
    subDiv_53 <= dataConv_53;
    subDiv_54 <= dataConv_54;
    subDiv_55 <= dataConv_55;
    subDiv_56 <= dataConv_56;
    subDiv_57 <= dataConv_57;
    subDiv_58 <= dataConv_58;
    subDiv_59 <= dataConv_59;
    subDiv_60 <= dataConv_60;
    subDiv_61 <= dataConv_61;
    subDiv_62 <= dataConv_62;
    subDiv_63 <= dataConv_63;
    subDiv_64 <= dataConv_64;
    subDiv_65 <= dataConv_65;
    subDiv_66 <= dataConv_66;
    subDiv_67 <= dataConv_67;
    subDiv_68 <= dataConv_68;
    subDiv_69 <= dataConv_69;
    subDiv_70 <= dataConv_70;
    subDiv_71 <= dataConv_71;
    subDiv_72 <= dataConv_72;
    subDiv_73 <= dataConv_73;
    subDiv_74 <= dataConv_74;
    subDiv_75 <= dataConv_75;
    subDiv_76 <= dataConv_76;
    subDiv_77 <= dataConv_77;
    subDiv_78 <= dataConv_78;
    subDiv_79 <= dataConv_79;
    subDiv_80 <= dataConv_80;
    subDiv_81 <= dataConv_81;
    subDiv_82 <= dataConv_82;
    subDiv_83 <= dataConv_83;
    subDiv_84 <= dataConv_84;
    subDiv_85 <= dataConv_85;
    subDiv_86 <= dataConv_86;
    subDiv_87 <= dataConv_87;
    subDiv_88 <= dataConv_88;
    subDiv_89 <= dataConv_89;
    subDiv_90 <= dataConv_90;
    subDiv_91 <= dataConv_91;
    subDiv_92 <= dataConv_92;
    subDiv_93 <= dataConv_93;
    subDiv_94 <= dataConv_94;
    subDiv_95 <= dataConv_95;
    subDiv_96 <= dataConv_96;
    subDiv_97 <= dataConv_97;
    subDiv_98 <= dataConv_98;
    subDiv_99 <= dataConv_99;
    subDiv_100 <= dataConv_100;
    subDiv_101 <= dataConv_101;
    subDiv_102 <= dataConv_102;
    subDiv_103 <= dataConv_103;
    subDiv_104 <= dataConv_104;
    subDiv_105 <= dataConv_105;
    subDiv_106 <= dataConv_106;
    subDiv_107 <= dataConv_107;
    subDiv_108 <= dataConv_108;
    subDiv_109 <= dataConv_109;
    subDiv_110 <= dataConv_110;
    subDiv_111 <= dataConv_111;
    subDiv_112 <= dataConv_112;
    subDiv_113 <= dataConv_113;
    subDiv_114 <= dataConv_114;
    subDiv_115 <= dataConv_115;
    subDiv_116 <= dataConv_116;
    subDiv_117 <= dataConv_117;
    subDiv_118 <= dataConv_118;
    subDiv_119 <= dataConv_119;
    subDiv_120 <= dataConv_120;
    subDiv_121 <= dataConv_121;
    subDiv_122 <= dataConv_122;
    subDiv_123 <= dataConv_123;
    subDiv_124 <= dataConv_124;
    subDiv_125 <= dataConv_125;
    subDiv_126 <= dataConv_126;
    subDiv_127 <= dataConv_127;
  end


endmodule

module Serial2Parallel_3 (
  input  wire          input_valid,
  input  wire [511:0]  input_tdata,
  input  wire [5:0]    input_tuser,
  output wire          output_tvalid,
  output wire [2047:0] output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [511:0]  dataDly;
  reg        [5:0]    userDly;
  (* max_fanout = 100 , keep = "true" *) reg                 vldDly;
  (* max_fanout = 100 , keep = "true" *) reg                 outVld;
  (* max_fanout = 100 *) reg                 outVldCond;
  reg        [1:0]    cnt;
  wire                cntAboutToOvf;
  wire                cntOvf;
  wire       [511:0]  t_output_tdata;
  reg        [511:0]  t_output_tdata_1;
  reg        [511:0]  t_output_tdata_2;
  reg        [511:0]  t_output_tdata_3;

  assign cntAboutToOvf = (cnt == 2'b10);
  assign cntOvf = (cnt == 2'b11);
  assign t_output_tdata = dataDly;
  assign output_tdata = {t_output_tdata,{t_output_tdata_1,{t_output_tdata_2,t_output_tdata_3}}};
  assign output_tvalid = (outVldCond && vldDly);
  assign output_tuser = userDly;
  always @(posedge clk_0_clk) begin
    dataDly <= input_tdata;
    userDly <= input_tuser;
    if(vldDly) begin
      t_output_tdata_1 <= t_output_tdata;
    end
    if(vldDly) begin
      t_output_tdata_2 <= t_output_tdata_1;
    end
    if(vldDly) begin
      t_output_tdata_3 <= t_output_tdata_2;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      vldDly <= 1'b0;
      outVld <= 1'b0;
      outVldCond <= 1'b0;
      cnt <= 2'b00;
    end else begin
      vldDly <= input_valid;
      outVld <= input_valid;
      if(vldDly) begin
        cnt <= (cnt + 2'b01);
        if(cntAboutToOvf) begin
          outVldCond <= 1'b1;
        end
        if(cntOvf) begin
          outVldCond <= 1'b0;
          cnt <= 2'b00;
        end
      end
    end
  end


endmodule

//URAM16x16384Fifo_1 replaced by URAM16x16384Fifo_4

module UGMul_1 (
  input  wire          predIndexIn_valid,
  input  wire          predIndexIn_payload_last,
  input  wire [15:0]   predIndexIn_payload_tdata,
  input  wire [5:0]    predIndexIn_payload_tuser,
  output wire          gateIndexOut_valid,
  output wire          gateIndexOut_payload_last,
  output wire [15:0]   gateIndexOut_payload_tdata,
  output wire [5:0]    gateIndexOut_payload_tuser,
  output wire          ugIndexOut_valid,
  output wire          ugIndexOut_payload_last,
  output wire [15:0]   ugIndexOut_payload_tdata,
  output wire [5:0]    ugIndexOut_payload_tuser,
  input  wire          allReduceOut_valid,
  input  wire [15:0]   allReduceOut_tdata,
  input  wire [5:0]    allReduceOut_tuser,
  output wire          ugOut_tvalid,
  output wire          ugOut_tlast,
  output wire [15:0]   ugOut_tdata,
  output wire [5:0]    ugOut_tuser,
  input  wire          status_enPredictor,
  input  wire          status_enFatRelu,
  output wire          silu_to_valid,
  output wire [15:0]   silu_to_payload,
  input  wire          silu_from_valid,
  input  wire [15:0]   silu_from_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_pop_ready;
  wire                gateFilterAlign_io_input_valid;
  wire                gateFilterAlign_io_input_payload_last;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire                fifo_io_pop_payload_last;
  wire       [15:0]   fifo_io_pop_payload_fragment;
  wire                threshold_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    threshold_lt_async_ip_m_axis_result_tdata;
  wire                indexAlign_io_output_valid;
  wire                indexAlign_io_output_payload_last;
  wire       [15:0]   indexAlign_io_output_payload_tdata;
  wire       [5:0]    indexAlign_io_output_payload_tuser;
  wire                gateFilterAlign_io_output_valid;
  wire                gateFilterAlign_io_output_payload_last;
  wire       [15:0]   gateFilterAlign_io_output_payload_fragment;
  wire                u_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   u_mul_ip_m_axis_result_tdata;
  wire                ugIndexFifo_io_push_ready;
  wire                ugIndexFifo_io_pop_valid;
  wire                ugIndexFifo_io_pop_payload_last;
  wire       [15:0]   ugIndexFifo_io_pop_payload_fragment;
  wire       [15:0]   fp16SiLUThresholdBits;
  wire       [15:0]   fatReluBits;
  wire                indexIn_valid;
  wire       [15:0]   indexIn_payload;
  reg        [15:0]   indexCnt;
  reg        [15:0]   indexCntLock;
  wire                gateIn_tvalid;
  wire       [15:0]   gateIn_tdata;
  reg        [15:0]   gateCnt;
  wire                gateCntOvf;
  wire                threshold_valid;
  wire       [15:0]   threshold_payload;
  wire                cmpRes_valid;
  wire                cmpRes_payload;
  wire                zeroLtIn_valid;
  wire                zeroLtIn_payload;
  wire                indexOut_valid;
  wire                indexOut_payload_last;
  wire       [15:0]   indexOut_payload_tdata;
  wire       [5:0]    indexOut_payload_tuser;
  reg                 indexOut_regNext_valid;
  reg                 indexOut_regNext_payload_last;
  reg        [15:0]   indexOut_regNext_payload_tdata;
  reg        [5:0]    indexOut_regNext_payload_tuser;
  wire                gateFilter_valid;
  wire       [15:0]   gateFilter_payload;
  wire                actOut_valid;
  wire       [15:0]   actOut_payload;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_1;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_2;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_3;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_4;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_5;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_6;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_7;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_8;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_9;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_10;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_11;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_12;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_13;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_14;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_15;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_16;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_17;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_18;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_19;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_20;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_21;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_22;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_23;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_24;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_25;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_26;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_27;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_28;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_29;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_30;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_31;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_32;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_33;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_34;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_35;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_36;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_37;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_38;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_39;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_40;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_41;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_42;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_43;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_44;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_45;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_46;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_47;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_48;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_49;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_50;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_51;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_52;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_53;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_54;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_55;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_56;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_57;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_58;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_59;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_60;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_61;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_62;
  reg                 ug_gateFilterAlign_io_output_payload_last_delay_63;
  reg                 siluOutLast;
  wire                actOutLast;
  wire                u_tvalid;
  wire       [15:0]   u_tdata;
  wire                g_tvalid;
  wire       [15:0]   g_tdata;
  reg                 t_io_push_valid;
  reg                 t_io_push_payload_last;
  reg        [15:0]   t_io_push_payload_fragment;
  reg        [15:0]   ugLastIndexLock;
  reg                 gateIndexOut_valid_regNext;
  reg        [15:0]   gateIndexOut_payload_tdata_regNext;
  reg                 gateIndexOut_payload_last_regNext;
  wire                hit;
  wire                ug_ugIndexFifo_io_pop_fire;

  URAM16x16384Fifo_4 fifo (
    .io_push_valid            (t_io_push_valid                   ), //i
    .io_push_ready            (fifo_io_push_ready                ), //o
    .io_push_payload_last     (t_io_push_payload_last            ), //i
    .io_push_payload_fragment (t_io_push_payload_fragment[15:0]  ), //i
    .io_pop_valid             (fifo_io_pop_valid                 ), //o
    .io_pop_ready             (fifo_io_pop_ready                 ), //i
    .io_pop_payload_last      (fifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (fifo_io_pop_payload_fragment[15:0]), //o
    .clk_0_clk                (clk_0_clk                         ), //i
    .clk_0_resetn             (clk_0_resetn                      )  //i
  );
  fp16lt0 threshold_lt_async_ip (
    .s_axis_a_tvalid      (threshold_valid                               ), //i
    .s_axis_a_tdata       (threshold_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (gateIn_tvalid                                 ), //i
    .s_axis_b_tdata       (gateIn_tdata[15:0]                            ), //i
    .m_axis_result_tvalid (threshold_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (threshold_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  FlowFragmentAlign_2 indexAlign (
    .io_input_valid          (indexOut_regNext_valid                  ), //i
    .io_input_payload_last   (indexOut_regNext_payload_last           ), //i
    .io_input_payload_tdata  (indexOut_regNext_payload_tdata[15:0]    ), //i
    .io_input_payload_tuser  (indexOut_regNext_payload_tuser[5:0]     ), //i
    .io_output_valid         (indexAlign_io_output_valid              ), //o
    .io_output_payload_last  (indexAlign_io_output_payload_last       ), //o
    .io_output_payload_tdata (indexAlign_io_output_payload_tdata[15:0]), //o
    .io_output_payload_tuser (indexAlign_io_output_payload_tuser[5:0] ), //o
    .clk_0_clk               (clk_0_clk                               ), //i
    .clk_0_resetn            (clk_0_resetn                            )  //i
  );
  FlowFragmentAlign_3 gateFilterAlign (
    .io_input_valid             (gateFilterAlign_io_input_valid                  ), //i
    .io_input_payload_last      (gateFilterAlign_io_input_payload_last           ), //i
    .io_input_payload_fragment  (gateIn_tdata[15:0]                              ), //i
    .io_output_valid            (gateFilterAlign_io_output_valid                 ), //o
    .io_output_payload_last     (gateFilterAlign_io_output_payload_last          ), //o
    .io_output_payload_fragment (gateFilterAlign_io_output_payload_fragment[15:0]), //o
    .clk_0_clk                  (clk_0_clk                                       ), //i
    .clk_0_resetn               (clk_0_resetn                                    )  //i
  );
  fp16mul6 u_mul_ip (
    .aclk                 (clk_0_clk                         ), //i
    .s_axis_a_tvalid      (u_tvalid                          ), //i
    .s_axis_a_tdata       (u_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (g_tvalid                          ), //i
    .s_axis_b_tdata       (g_tdata[15:0]                     ), //i
    .m_axis_result_tvalid (u_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (u_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  URAM16x16384Fifo_4 ugIndexFifo (
    .io_push_valid            (gateIndexOut_valid_regNext               ), //i
    .io_push_ready            (ugIndexFifo_io_push_ready                ), //o
    .io_push_payload_last     (gateIndexOut_payload_last_regNext        ), //i
    .io_push_payload_fragment (gateIndexOut_payload_tdata_regNext[15:0] ), //i
    .io_pop_valid             (ugIndexFifo_io_pop_valid                 ), //o
    .io_pop_ready             (u_mul_ip_m_axis_result_tvalid            ), //i
    .io_pop_payload_last      (ugIndexFifo_io_pop_payload_last          ), //o
    .io_pop_payload_fragment  (ugIndexFifo_io_pop_payload_fragment[15:0]), //o
    .clk_0_clk                (clk_0_clk                                ), //i
    .clk_0_resetn             (clk_0_resetn                             )  //i
  );
  assign fp16SiLUThresholdBits = 16'hc900;
  assign fatReluBits = 16'h211f;
  assign indexIn_valid = (predIndexIn_valid && (predIndexIn_payload_tuser == 6'h1e));
  assign indexIn_payload = predIndexIn_payload_tdata;
  assign gateIn_tvalid = (allReduceOut_valid && (allReduceOut_tuser == 6'h16));
  assign gateIn_tdata = allReduceOut_tdata;
  assign gateCntOvf = (gateCnt == (status_enPredictor ? indexCntLock : 16'h2aff));
  assign threshold_valid = 1'b1;
  assign threshold_payload = fatReluBits;
  assign cmpRes_valid = threshold_lt_async_ip_m_axis_result_tvalid;
  assign cmpRes_payload = threshold_lt_async_ip_m_axis_result_tdata[0];
  assign zeroLtIn_valid = gateIn_tvalid;
  assign zeroLtIn_payload = (status_enFatRelu ? cmpRes_payload : 1'b1);
  assign indexOut_valid = (gateIn_tvalid && zeroLtIn_payload);
  assign indexOut_payload_tdata = (status_enPredictor ? fifo_io_pop_payload_fragment : gateCnt);
  assign indexOut_payload_tuser = 6'h17;
  assign indexOut_payload_last = (gateIn_tvalid && gateCntOvf);
  assign gateIndexOut_valid = indexAlign_io_output_valid;
  assign gateIndexOut_payload_last = indexAlign_io_output_payload_last;
  assign gateIndexOut_payload_tdata = indexAlign_io_output_payload_tdata;
  assign gateIndexOut_payload_tuser = indexAlign_io_output_payload_tuser;
  assign gateFilterAlign_io_input_valid = (gateIn_tvalid && zeroLtIn_payload);
  assign gateFilterAlign_io_input_payload_last = (gateIn_tvalid && gateCntOvf);
  assign gateFilter_valid = gateFilterAlign_io_output_valid;
  assign gateFilter_payload = gateFilterAlign_io_output_payload_fragment;
  assign silu_to_valid = gateFilter_valid;
  assign silu_to_payload = gateFilter_payload;
  assign actOut_valid = (status_enFatRelu ? gateFilter_valid : silu_from_valid);
  assign actOut_payload = (status_enFatRelu ? gateFilter_payload : silu_from_payload);
  assign actOutLast = (status_enFatRelu ? gateFilterAlign_io_output_payload_last : siluOutLast);
  assign u_tvalid = (allReduceOut_valid && (allReduceOut_tuser == 6'h18));
  assign u_tdata = allReduceOut_tdata;
  assign g_tvalid = u_tvalid;
  assign g_tdata = fifo_io_pop_payload_fragment;
  assign fifo_io_pop_ready = (u_tvalid || (status_enPredictor && gateIn_tvalid));
  assign ugOut_tvalid = u_mul_ip_m_axis_result_tvalid;
  assign ugOut_tdata = u_mul_ip_m_axis_result_tdata;
  assign ugOut_tuser = 6'h19;
  assign hit = (ugLastIndexLock == ugIndexFifo_io_pop_payload_fragment);
  assign ug_ugIndexFifo_io_pop_fire = (ugIndexFifo_io_pop_valid && u_mul_ip_m_axis_result_tvalid);
  assign ugIndexOut_valid = ug_ugIndexFifo_io_pop_fire;
  assign ugIndexOut_payload_tdata = ugIndexFifo_io_pop_payload_fragment;
  assign ugIndexOut_payload_tuser = 6'h1a;
  assign ugIndexOut_payload_last = hit;
  assign ugOut_tlast = hit;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      indexCnt <= 16'h0;
      indexCntLock <= 16'h0;
      gateCnt <= 16'h0;
      indexOut_regNext_valid <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_1 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_2 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_3 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_4 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_5 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_6 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_7 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_8 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_9 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_10 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_11 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_12 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_13 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_14 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_15 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_16 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_17 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_18 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_19 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_20 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_21 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_22 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_23 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_24 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_25 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_26 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_27 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_28 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_29 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_30 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_31 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_32 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_33 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_34 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_35 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_36 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_37 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_38 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_39 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_40 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_41 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_42 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_43 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_44 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_45 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_46 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_47 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_48 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_49 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_50 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_51 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_52 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_53 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_54 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_55 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_56 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_57 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_58 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_59 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_60 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_61 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_62 <= 1'b0;
      ug_gateFilterAlign_io_output_payload_last_delay_63 <= 1'b0;
      siluOutLast <= 1'b0;
      t_io_push_valid <= 1'b0;
      t_io_push_payload_last <= 1'b0;
      ugLastIndexLock <= 16'hffff;
      gateIndexOut_valid_regNext <= 1'b0;
      gateIndexOut_payload_last_regNext <= 1'b0;
    end else begin
      if(indexIn_valid) begin
        indexCnt <= (indexCnt + 16'h0001);
        if((indexIn_valid && predIndexIn_payload_last)) begin
          indexCntLock <= indexCnt;
          indexCnt <= 16'h0;
        end
      end
      if(gateIn_tvalid) begin
        gateCnt <= (gateCnt + 16'h0001);
        if(gateCntOvf) begin
          gateCnt <= 16'h0;
          indexCntLock <= 16'h0;
        end
      end
      indexOut_regNext_valid <= indexOut_valid;
      ug_gateFilterAlign_io_output_payload_last_delay_1 <= gateFilterAlign_io_output_payload_last;
      ug_gateFilterAlign_io_output_payload_last_delay_2 <= ug_gateFilterAlign_io_output_payload_last_delay_1;
      ug_gateFilterAlign_io_output_payload_last_delay_3 <= ug_gateFilterAlign_io_output_payload_last_delay_2;
      ug_gateFilterAlign_io_output_payload_last_delay_4 <= ug_gateFilterAlign_io_output_payload_last_delay_3;
      ug_gateFilterAlign_io_output_payload_last_delay_5 <= ug_gateFilterAlign_io_output_payload_last_delay_4;
      ug_gateFilterAlign_io_output_payload_last_delay_6 <= ug_gateFilterAlign_io_output_payload_last_delay_5;
      ug_gateFilterAlign_io_output_payload_last_delay_7 <= ug_gateFilterAlign_io_output_payload_last_delay_6;
      ug_gateFilterAlign_io_output_payload_last_delay_8 <= ug_gateFilterAlign_io_output_payload_last_delay_7;
      ug_gateFilterAlign_io_output_payload_last_delay_9 <= ug_gateFilterAlign_io_output_payload_last_delay_8;
      ug_gateFilterAlign_io_output_payload_last_delay_10 <= ug_gateFilterAlign_io_output_payload_last_delay_9;
      ug_gateFilterAlign_io_output_payload_last_delay_11 <= ug_gateFilterAlign_io_output_payload_last_delay_10;
      ug_gateFilterAlign_io_output_payload_last_delay_12 <= ug_gateFilterAlign_io_output_payload_last_delay_11;
      ug_gateFilterAlign_io_output_payload_last_delay_13 <= ug_gateFilterAlign_io_output_payload_last_delay_12;
      ug_gateFilterAlign_io_output_payload_last_delay_14 <= ug_gateFilterAlign_io_output_payload_last_delay_13;
      ug_gateFilterAlign_io_output_payload_last_delay_15 <= ug_gateFilterAlign_io_output_payload_last_delay_14;
      ug_gateFilterAlign_io_output_payload_last_delay_16 <= ug_gateFilterAlign_io_output_payload_last_delay_15;
      ug_gateFilterAlign_io_output_payload_last_delay_17 <= ug_gateFilterAlign_io_output_payload_last_delay_16;
      ug_gateFilterAlign_io_output_payload_last_delay_18 <= ug_gateFilterAlign_io_output_payload_last_delay_17;
      ug_gateFilterAlign_io_output_payload_last_delay_19 <= ug_gateFilterAlign_io_output_payload_last_delay_18;
      ug_gateFilterAlign_io_output_payload_last_delay_20 <= ug_gateFilterAlign_io_output_payload_last_delay_19;
      ug_gateFilterAlign_io_output_payload_last_delay_21 <= ug_gateFilterAlign_io_output_payload_last_delay_20;
      ug_gateFilterAlign_io_output_payload_last_delay_22 <= ug_gateFilterAlign_io_output_payload_last_delay_21;
      ug_gateFilterAlign_io_output_payload_last_delay_23 <= ug_gateFilterAlign_io_output_payload_last_delay_22;
      ug_gateFilterAlign_io_output_payload_last_delay_24 <= ug_gateFilterAlign_io_output_payload_last_delay_23;
      ug_gateFilterAlign_io_output_payload_last_delay_25 <= ug_gateFilterAlign_io_output_payload_last_delay_24;
      ug_gateFilterAlign_io_output_payload_last_delay_26 <= ug_gateFilterAlign_io_output_payload_last_delay_25;
      ug_gateFilterAlign_io_output_payload_last_delay_27 <= ug_gateFilterAlign_io_output_payload_last_delay_26;
      ug_gateFilterAlign_io_output_payload_last_delay_28 <= ug_gateFilterAlign_io_output_payload_last_delay_27;
      ug_gateFilterAlign_io_output_payload_last_delay_29 <= ug_gateFilterAlign_io_output_payload_last_delay_28;
      ug_gateFilterAlign_io_output_payload_last_delay_30 <= ug_gateFilterAlign_io_output_payload_last_delay_29;
      ug_gateFilterAlign_io_output_payload_last_delay_31 <= ug_gateFilterAlign_io_output_payload_last_delay_30;
      ug_gateFilterAlign_io_output_payload_last_delay_32 <= ug_gateFilterAlign_io_output_payload_last_delay_31;
      ug_gateFilterAlign_io_output_payload_last_delay_33 <= ug_gateFilterAlign_io_output_payload_last_delay_32;
      ug_gateFilterAlign_io_output_payload_last_delay_34 <= ug_gateFilterAlign_io_output_payload_last_delay_33;
      ug_gateFilterAlign_io_output_payload_last_delay_35 <= ug_gateFilterAlign_io_output_payload_last_delay_34;
      ug_gateFilterAlign_io_output_payload_last_delay_36 <= ug_gateFilterAlign_io_output_payload_last_delay_35;
      ug_gateFilterAlign_io_output_payload_last_delay_37 <= ug_gateFilterAlign_io_output_payload_last_delay_36;
      ug_gateFilterAlign_io_output_payload_last_delay_38 <= ug_gateFilterAlign_io_output_payload_last_delay_37;
      ug_gateFilterAlign_io_output_payload_last_delay_39 <= ug_gateFilterAlign_io_output_payload_last_delay_38;
      ug_gateFilterAlign_io_output_payload_last_delay_40 <= ug_gateFilterAlign_io_output_payload_last_delay_39;
      ug_gateFilterAlign_io_output_payload_last_delay_41 <= ug_gateFilterAlign_io_output_payload_last_delay_40;
      ug_gateFilterAlign_io_output_payload_last_delay_42 <= ug_gateFilterAlign_io_output_payload_last_delay_41;
      ug_gateFilterAlign_io_output_payload_last_delay_43 <= ug_gateFilterAlign_io_output_payload_last_delay_42;
      ug_gateFilterAlign_io_output_payload_last_delay_44 <= ug_gateFilterAlign_io_output_payload_last_delay_43;
      ug_gateFilterAlign_io_output_payload_last_delay_45 <= ug_gateFilterAlign_io_output_payload_last_delay_44;
      ug_gateFilterAlign_io_output_payload_last_delay_46 <= ug_gateFilterAlign_io_output_payload_last_delay_45;
      ug_gateFilterAlign_io_output_payload_last_delay_47 <= ug_gateFilterAlign_io_output_payload_last_delay_46;
      ug_gateFilterAlign_io_output_payload_last_delay_48 <= ug_gateFilterAlign_io_output_payload_last_delay_47;
      ug_gateFilterAlign_io_output_payload_last_delay_49 <= ug_gateFilterAlign_io_output_payload_last_delay_48;
      ug_gateFilterAlign_io_output_payload_last_delay_50 <= ug_gateFilterAlign_io_output_payload_last_delay_49;
      ug_gateFilterAlign_io_output_payload_last_delay_51 <= ug_gateFilterAlign_io_output_payload_last_delay_50;
      ug_gateFilterAlign_io_output_payload_last_delay_52 <= ug_gateFilterAlign_io_output_payload_last_delay_51;
      ug_gateFilterAlign_io_output_payload_last_delay_53 <= ug_gateFilterAlign_io_output_payload_last_delay_52;
      ug_gateFilterAlign_io_output_payload_last_delay_54 <= ug_gateFilterAlign_io_output_payload_last_delay_53;
      ug_gateFilterAlign_io_output_payload_last_delay_55 <= ug_gateFilterAlign_io_output_payload_last_delay_54;
      ug_gateFilterAlign_io_output_payload_last_delay_56 <= ug_gateFilterAlign_io_output_payload_last_delay_55;
      ug_gateFilterAlign_io_output_payload_last_delay_57 <= ug_gateFilterAlign_io_output_payload_last_delay_56;
      ug_gateFilterAlign_io_output_payload_last_delay_58 <= ug_gateFilterAlign_io_output_payload_last_delay_57;
      ug_gateFilterAlign_io_output_payload_last_delay_59 <= ug_gateFilterAlign_io_output_payload_last_delay_58;
      ug_gateFilterAlign_io_output_payload_last_delay_60 <= ug_gateFilterAlign_io_output_payload_last_delay_59;
      ug_gateFilterAlign_io_output_payload_last_delay_61 <= ug_gateFilterAlign_io_output_payload_last_delay_60;
      ug_gateFilterAlign_io_output_payload_last_delay_62 <= ug_gateFilterAlign_io_output_payload_last_delay_61;
      ug_gateFilterAlign_io_output_payload_last_delay_63 <= ug_gateFilterAlign_io_output_payload_last_delay_62;
      siluOutLast <= ug_gateFilterAlign_io_output_payload_last_delay_63;
      t_io_push_valid <= (actOut_valid || indexIn_valid);
      t_io_push_payload_last <= ((actOut_valid && actOutLast) || (indexIn_valid && predIndexIn_payload_last));
      if((gateIndexOut_valid && gateIndexOut_payload_last)) begin
        ugLastIndexLock <= gateIndexOut_payload_tdata;
      end
      if((ugIndexOut_valid && ugIndexOut_payload_last)) begin
        ugLastIndexLock <= 16'hffff;
      end
      gateIndexOut_valid_regNext <= gateIndexOut_valid;
      gateIndexOut_payload_last_regNext <= gateIndexOut_payload_last;
    end
  end

  always @(posedge clk_0_clk) begin
    indexOut_regNext_payload_last <= indexOut_payload_last;
    indexOut_regNext_payload_tdata <= indexOut_payload_tdata;
    indexOut_regNext_payload_tuser <= indexOut_payload_tuser;
    t_io_push_payload_fragment <= (actOut_valid ? actOut_payload : indexIn_payload);
    gateIndexOut_payload_tdata_regNext <= gateIndexOut_payload_tdata;
  end


endmodule

module RMSNormFp32_1 (
  input  wire          io_toBeNorm_valid,
  input  wire [15:0]   io_toBeNorm_payload,
  input  wire          io_scale_valid,
  output wire          io_scale_ready,
  input  wire [15:0]   io_scale_payload,
  output wire          io_normOut_valid,
  output wire [15:0]   io_normOut_payload,
  input  wire          isAttnLn,
  input  wire          isLmHeadLn,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_push_valid;
  wire                io_toBeNorm_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_toBeNorm_to_ip_m_axis_result_tdata;
  wire                rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [31:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                rsqrtIn_rsqrt_ip_m_axis_result_tvalid;
  wire       [31:0]   rsqrtIn_rsqrt_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire                inputFp32_mul_ip_s_axis_a_tready;
  wire                inputFp32_mul_ip_s_axis_b_tready;
  wire                inputFp32_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   inputFp32_mul_ip_m_axis_result_tdata;
  wire                rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready;
  wire                rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid;
  wire       [31:0]   rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata;
  wire                io_scale_to_ip_s_axis_a_tready;
  wire                io_scale_to_ip_m_axis_result_tvalid;
  wire       [31:0]   io_scale_to_ip_m_axis_result_tdata;
  wire                scaledOutFlow_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   scaledOutFlow_mul_ip_m_axis_result_tdata;
  wire                rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [15:0]   rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  wire       [8:0]    t_t_rsqrtIn_payload;
  wire       [7:0]    t_rsqrtIn_payload_1;
  reg        [11:0]   sqrCnt;
  wire                sqrCntOvf;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [31:0]   accIn_payload_fragment;
  wire                accOut_valid;
  wire                accOut_payload_last;
  wire       [31:0]   accOut_payload_fragment;
  wire                rsqrtIn_valid;
  wire       [31:0]   rsqrtIn_payload;
  wire       [7:0]    t_rsqrtIn_payload;
  reg                 rsqrtOutLock_valid;
  reg        [31:0]   rsqrtOutLock_payload;
  reg        [0:0]    coreCnt;
  reg        [10:0]   dimPerCoreCnt;
  wire                inputFp32_valid;
  wire                inputFp32_ready;
  wire       [31:0]   inputFp32_payload;
  wire                scaleFp32_valid;
  wire                scaleFp32_ready;
  wire       [31:0]   scaleFp32_payload;
  wire                enRsqrtCnt;
  reg        [11:0]   rsqrtCnt;
  wire                rsqrtCntOvf;
  wire                scaledOutFlow_valid;
  wire       [31:0]   scaledOutFlow_payload;
  wire                scaledOutFire;

  assign t_t_rsqrtIn_payload = accOut_payload_fragment[31 : 23];
  assign t_rsqrtIn_payload_1 = (t_rsqrtIn_payload - 8'h0c);
  fp16toFp32 io_toBeNorm_to_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (io_toBeNorm_valid                          ), //i
    .s_axis_a_tdata       (io_toBeNorm_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_toBeNorm_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (io_toBeNorm_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip (
    .aclk                 (clk_0_clk                                                               ), //i
    .s_axis_a_tvalid      (io_toBeNorm_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (io_toBeNorm_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .s_axis_b_tvalid      (io_toBeNorm_to_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_b_tdata       (io_toBeNorm_to_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32acc22 accIn_acc_ip (
    .aclk                 (clk_0_clk                             ), //i
    .aresetn              (clk_0_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[31:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32rsqrt32 rsqrtIn_rsqrt_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (rsqrtIn_valid                             ), //i
    .s_axis_a_tdata       (rsqrtIn_payload[31:0]                     ), //i
    .m_axis_result_tvalid (rsqrtIn_rsqrt_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rsqrtIn_rsqrt_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamFifo_110 fifo (
    .io_push_valid   (fifo_io_push_valid                       ), //i
    .io_push_ready   (fifo_io_push_ready                       ), //o
    .io_push_payload (io_toBeNorm_payload[15:0]                ), //i
    .io_pop_valid    (fifo_io_pop_valid                        ), //o
    .io_pop_ready    (rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]                ), //o
    .io_flush        (1'b0                                     ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]                  ), //o
    .io_availability (fifo_io_availability[12:0]               ), //o
    .clk_0_clk       (clk_0_clk                                ), //i
    .clk_0_resetn    (clk_0_resetn                             )  //i
  );
  fp32mul8s inputFp32_mul_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (inputFp32_valid                           ), //i
    .s_axis_a_tready      (inputFp32_mul_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (inputFp32_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (scaleFp32_valid                           ), //i
    .s_axis_b_tready      (inputFp32_mul_ip_s_axis_b_tready          ), //o
    .s_axis_b_tdata       (scaleFp32_payload[31:0]                   ), //i
    .m_axis_result_tvalid (inputFp32_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (rsqrtOutLock_valid                        ), //i
    .m_axis_result_tdata  (inputFp32_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s rmsNorm_fifo_io_pop_to_ip (
    .aclk                 (clk_0_clk                                          ), //i
    .s_axis_a_tvalid      (fifo_io_pop_valid                                  ), //i
    .s_axis_a_tready      (rmsNorm_fifo_io_pop_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (fifo_io_pop_payload[15:0]                          ), //i
    .m_axis_result_tvalid (rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (inputFp32_ready                                    ), //i
    .m_axis_result_tdata  (rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp16toFp32s io_scale_to_ip (
    .aclk                 (clk_0_clk                               ), //i
    .s_axis_a_tvalid      (io_scale_valid                          ), //i
    .s_axis_a_tready      (io_scale_to_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (io_scale_payload[15:0]                  ), //i
    .m_axis_result_tvalid (io_scale_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (scaleFp32_ready                         ), //i
    .m_axis_result_tdata  (io_scale_to_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 scaledOutFlow_mul_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (scaledOutFlow_valid                           ), //i
    .s_axis_a_tdata       (scaledOutFlow_payload[31:0]                   ), //i
    .s_axis_b_tvalid      (rsqrtOutLock_valid                            ), //i
    .s_axis_b_tdata       (rsqrtOutLock_payload[31:0]                    ), //i
    .m_axis_result_tvalid (scaledOutFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (scaledOutFlow_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toFp16 rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip (
    .aclk                 (clk_0_clk                                                                 ), //i
    .s_axis_a_tvalid      (scaledOutFlow_mul_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (scaledOutFlow_mul_ip_m_axis_result_tdata[31:0]                            ), //i
    .m_axis_result_tvalid (rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign sqrCntOvf = (sqrCnt == 12'hfff);
  assign accIn_valid = rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = sqrCntOvf;
  assign accOut_valid = accIn_acc_ip_m_axis_result_tvalid;
  assign accOut_payload_last = accIn_acc_ip_m_axis_result_tlast;
  assign accOut_payload_fragment = accIn_acc_ip_m_axis_result_tdata;
  assign rsqrtIn_valid = (accOut_valid && accOut_payload_last);
  assign t_rsqrtIn_payload = t_t_rsqrtIn_payload[7 : 0];
  assign rsqrtIn_payload = {{accOut_payload_fragment[31],((8'h0c < t_rsqrtIn_payload) ? t_rsqrtIn_payload_1 : 8'h0)},accOut_payload_fragment[22 : 0]};
  assign fifo_io_push_valid = (io_toBeNorm_valid && (isAttnLn ? 1'b1 : (isLmHeadLn ? (coreCnt == 1'b0) : (coreCnt == 1'b0))));
  assign inputFp32_ready = inputFp32_mul_ip_s_axis_a_tready;
  assign scaleFp32_ready = inputFp32_mul_ip_s_axis_b_tready;
  assign inputFp32_valid = rmsNorm_fifo_io_pop_to_ip_m_axis_result_tvalid;
  assign inputFp32_payload = rmsNorm_fifo_io_pop_to_ip_m_axis_result_tdata;
  assign io_scale_ready = io_scale_to_ip_s_axis_a_tready;
  assign scaleFp32_valid = io_scale_to_ip_m_axis_result_tvalid;
  assign scaleFp32_payload = io_scale_to_ip_m_axis_result_tdata;
  assign rsqrtCntOvf = (rsqrtCnt == (isAttnLn ? 12'hfff : 12'h7ff));
  assign scaledOutFire = (inputFp32_mul_ip_m_axis_result_tvalid && rsqrtOutLock_valid);
  assign scaledOutFlow_valid = scaledOutFire;
  assign scaledOutFlow_payload = inputFp32_mul_ip_m_axis_result_tdata;
  assign enRsqrtCnt = scaledOutFire;
  assign io_normOut_valid = rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  assign io_normOut_payload = rmsNorm_scaledOutFlow_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      sqrCnt <= 12'h0;
      rsqrtOutLock_valid <= 1'b0;
      coreCnt <= 1'b0;
      dimPerCoreCnt <= 11'h0;
      rsqrtCnt <= 12'h0;
    end else begin
      if(rmsNorm_io_toBeNorm_to_ip_m_axis_result_mul_ip_m_axis_result_tvalid) begin
        sqrCnt <= (sqrCnt + 12'h001);
        if(sqrCntOvf) begin
          sqrCnt <= 12'h0;
        end
      end
      if(rsqrtIn_rsqrt_ip_m_axis_result_tvalid) begin
        rsqrtOutLock_valid <= 1'b1;
      end
      if(io_toBeNorm_valid) begin
        dimPerCoreCnt <= (dimPerCoreCnt + 11'h001);
        if((dimPerCoreCnt == 11'h7ff)) begin
          dimPerCoreCnt <= 11'h0;
          coreCnt <= (coreCnt + 1'b1);
          if((coreCnt == 1'b1)) begin
            coreCnt <= 1'b0;
          end
        end
      end
      if(enRsqrtCnt) begin
        rsqrtCnt <= (rsqrtCnt + 12'h001);
        if(rsqrtCntOvf) begin
          rsqrtCnt <= 12'h0;
          rsqrtOutLock_valid <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(rsqrtIn_rsqrt_ip_m_axis_result_tvalid) begin
      rsqrtOutLock_payload <= rsqrtIn_rsqrt_ip_m_axis_result_tdata;
    end
  end


endmodule

module SerialSafeSoftmax_1 (
  input  wire          io_input_0_valid,
  input  wire [15:0]   io_input_0_tdata,
  input  wire [5:0]    io_input_0_tuser,
  input  wire          io_input_1_valid,
  input  wire [15:0]   io_input_1_tdata,
  input  wire [5:0]    io_input_1_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          io_seqLen_valid,
  output reg           io_seqLen_ready,
  input  wire [9:0]    io_seqLen_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_push_valid;
  wire       [15:0]   fifo_io_push_payload;
  wire                fifo_io_pop_ready;
  wire                ipFlowIO_m_axis_result_tvalid;
  wire       [7:0]    ipFlowIO_m_axis_result_tdata;
  wire                toSubFlow_sub_ip_m_axis_result_tvalid;
  wire       [15:0]   toSubFlow_sub_ip_m_axis_result_tdata;
  wire                ipFlowIO_1_m_axis_result_tvalid;
  wire       [7:0]    ipFlowIO_1_m_axis_result_tdata;
  wire                toExpClip_exp_ip_m_axis_result_tvalid;
  wire       [15:0]   toExpClip_exp_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                toDivFlow_regNext_div_ip_m_axis_result_tvalid;
  wire       [15:0]   toDivFlow_regNext_div_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [10:0]   fifo_io_occupancy;
  wire       [10:0]   fifo_io_availability;
  wire       [15:0]   fp16Minus16Bits;
  wire                localQKIn_valid;
  wire       [15:0]   localQKIn_payload;
  wire                dotQKIn_valid;
  wire       [15:0]   dotQKIn_payload;
  wire                muxOut_valid;
  wire       [15:0]   muxOut_payload;
  reg                 input_valid;
  reg        [15:0]   input_payload;
  reg        [9:0]    inCnt;
  wire                inCntZero;
  wire                inCntOvf;
  reg                 maxValFlow_valid;
  reg        [15:0]   maxValFlow_payload;
  wire                toSubFlow_valid;
  wire       [15:0]   toSubFlow_payload;
  wire                toExpClip_valid;
  reg        [15:0]   toExpClip_payload;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [15:0]   accIn_payload_fragment;
  reg        [9:0]    accInCnt;
  wire                accInCntOvf;
  reg                 normFlow_valid;
  reg        [15:0]   normFlow_payload;
  wire                toDivFlow_valid;
  wire       [15:0]   toDivFlow_payload;
  reg                 toDivFlow_regNext_valid;
  reg        [15:0]   toDivFlow_regNext_payload;
  reg                 normFlow_regNext_valid;
  reg        [15:0]   normFlow_regNext_payload;
  reg        [9:0]    outCnt;
  wire                outCntOvf;
  wire       [16:0]   t_normFlow_valid;
  reg        [9:0]    subCnt;
  wire                subCntOvf;
  reg                 phase0;
  reg                 phase1;
  wire                conflict;

  fp16lt0 ipFlowIO (
    .s_axis_a_tvalid      (1'b1                             ), //i
    .s_axis_a_tdata       (maxValFlow_payload[15:0]         ), //i
    .s_axis_b_tvalid      (1'b1                             ), //i
    .s_axis_b_tdata       (input_payload[15:0]              ), //i
    .m_axis_result_tvalid (ipFlowIO_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (ipFlowIO_m_axis_result_tdata[7:0])  //o
  );
  fp16sub8 toSubFlow_sub_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (toSubFlow_valid                           ), //i
    .s_axis_a_tdata       (toSubFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (maxValFlow_valid                          ), //i
    .s_axis_b_tdata       (maxValFlow_payload[15:0]                  ), //i
    .m_axis_result_tvalid (toSubFlow_sub_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toSubFlow_sub_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16lt0 ipFlowIO_1 (
    .s_axis_a_tvalid      (1'b1                                      ), //i
    .s_axis_a_tdata       (toSubFlow_sub_ip_m_axis_result_tdata[15:0]), //i
    .s_axis_b_tvalid      (1'b1                                      ), //i
    .s_axis_b_tdata       (fp16Minus16Bits[15:0]                     ), //i
    .m_axis_result_tvalid (ipFlowIO_1_m_axis_result_tvalid           ), //o
    .m_axis_result_tdata  (ipFlowIO_1_m_axis_result_tdata[7:0]       )  //o
  );
  fp16ex12 toExpClip_exp_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (toExpClip_valid                           ), //i
    .s_axis_a_tdata       (toExpClip_payload[15:0]                   ), //i
    .m_axis_result_tvalid (toExpClip_exp_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toExpClip_exp_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16acc16 accIn_acc_ip (
    .aclk                 (clk_0_clk                             ), //i
    .aresetn              (clk_0_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 toDivFlow_regNext_div_ip (
    .aclk                 (clk_0_clk                                         ), //i
    .s_axis_a_tvalid      (toDivFlow_regNext_valid                           ), //i
    .s_axis_a_tdata       (toDivFlow_regNext_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (normFlow_regNext_valid                            ), //i
    .s_axis_b_tdata       (normFlow_regNext_payload[15:0]                    ), //i
    .m_axis_result_tvalid (toDivFlow_regNext_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (toDivFlow_regNext_div_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamFifo_111 fifo (
    .io_push_valid   (fifo_io_push_valid        ), //i
    .io_push_ready   (fifo_io_push_ready        ), //o
    .io_push_payload (fifo_io_push_payload[15:0]), //i
    .io_pop_valid    (fifo_io_pop_valid         ), //o
    .io_pop_ready    (fifo_io_pop_ready         ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                      ), //i
    .io_occupancy    (fifo_io_occupancy[10:0]   ), //o
    .io_availability (fifo_io_availability[10:0]), //o
    .clk_0_clk       (clk_0_clk                 ), //i
    .clk_0_resetn    (clk_0_resetn              )  //i
  );
  assign fp16Minus16Bits = 16'hcc00;
  assign localQKIn_valid = (io_input_1_valid && (io_input_1_tuser == 6'h0c));
  assign localQKIn_payload = io_input_1_tdata;
  assign dotQKIn_valid = (io_input_0_valid && (io_input_0_tuser == 6'h0d));
  assign dotQKIn_payload = io_input_0_tdata;
  assign muxOut_valid = (|{dotQKIn_valid,localQKIn_valid});
  assign muxOut_payload = (localQKIn_valid ? localQKIn_payload : dotQKIn_payload);
  assign inCntZero = (inCnt == 10'h0);
  assign inCntOvf = (inCnt == io_seqLen_payload);
  assign toExpClip_valid = toSubFlow_sub_ip_m_axis_result_tvalid;
  always @(*) begin
    toExpClip_payload = toSubFlow_sub_ip_m_axis_result_tdata;
    if(ipFlowIO_1_m_axis_result_tdata[0]) begin
      toExpClip_payload = fp16Minus16Bits;
    end
  end

  assign accInCntOvf = (accInCnt == io_seqLen_payload);
  assign accIn_valid = toExpClip_exp_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = toExpClip_exp_ip_m_axis_result_tdata;
  assign accIn_payload_last = accInCntOvf;
  assign io_output_valid = toDivFlow_regNext_div_ip_m_axis_result_tvalid;
  assign io_output_payload_tdata = toDivFlow_regNext_div_ip_m_axis_result_tdata;
  assign io_output_payload_tuser = 6'h0e;
  always @(*) begin
    io_seqLen_ready = 1'b0;
    if(io_output_valid) begin
      if(outCntOvf) begin
        io_seqLen_ready = 1'b1;
      end
    end
  end

  assign outCntOvf = (outCnt == io_seqLen_payload);
  assign t_normFlow_valid = 17'h0;
  assign io_output_payload_last = outCntOvf;
  assign subCntOvf = (subCnt == io_seqLen_payload);
  assign conflict = (input_valid && accIn_valid);
  assign fifo_io_push_valid = (input_valid || accIn_valid);
  assign fifo_io_push_payload = (input_valid ? input_payload : accIn_payload_fragment);
  assign toSubFlow_valid = (fifo_io_pop_valid && phase1);
  assign toSubFlow_payload = fifo_io_pop_payload;
  assign toDivFlow_valid = (fifo_io_pop_valid && normFlow_valid);
  assign toDivFlow_payload = fifo_io_pop_payload;
  assign fifo_io_pop_ready = (phase1 ? phase1 : normFlow_valid);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      input_valid <= 1'b0;
      inCnt <= 10'h0;
      maxValFlow_payload <= 16'hfc00;
      maxValFlow_valid <= 1'b0;
      accInCnt <= 10'h0;
      normFlow_valid <= 1'b0;
      normFlow_payload <= 16'h0;
      toDivFlow_regNext_valid <= 1'b0;
      normFlow_regNext_valid <= 1'b0;
      outCnt <= 10'h0;
      subCnt <= 10'h0;
      phase0 <= 1'b1;
      phase1 <= 1'b0;
    end else begin
      input_valid <= muxOut_valid;
      if(input_valid) begin
        inCnt <= (inCnt + 10'h001);
        if(inCntOvf) begin
          inCnt <= 10'h0;
        end
      end
      if(input_valid) begin
        if(ipFlowIO_m_axis_result_tdata[0]) begin
          maxValFlow_payload <= input_payload;
        end
        if(inCntOvf) begin
          maxValFlow_valid <= 1'b1;
        end
      end
      if(accIn_valid) begin
        accInCnt <= (accInCnt + 10'h001);
        if(accInCntOvf) begin
          accInCnt <= 10'h0;
        end
      end
      if((accIn_acc_ip_m_axis_result_tvalid && accIn_acc_ip_m_axis_result_tlast)) begin
        normFlow_valid <= 1'b1;
        normFlow_payload <= accIn_acc_ip_m_axis_result_tdata;
      end
      toDivFlow_regNext_valid <= toDivFlow_valid;
      normFlow_regNext_valid <= normFlow_valid;
      if(io_output_valid) begin
        outCnt <= (outCnt + 10'h001);
        if(outCntOvf) begin
          outCnt <= 10'h0;
          maxValFlow_valid <= 1'b0;
          maxValFlow_payload <= 16'hfc00;
          normFlow_valid <= t_normFlow_valid[0];
          normFlow_payload <= t_normFlow_valid[16 : 1];
        end
      end
      if(toSubFlow_valid) begin
        subCnt <= (subCnt + 10'h001);
        if(subCntOvf) begin
          subCnt <= 10'h0;
        end
      end
      if(input_valid) begin
        if(inCntOvf) begin
          phase0 <= 1'b0;
          phase1 <= 1'b1;
        end
      end
      if(toSubFlow_valid) begin
        if(subCntOvf) begin
          phase1 <= 1'b0;
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    input_payload <= muxOut_payload;
    toDivFlow_regNext_payload <= toDivFlow_payload;
    normFlow_regNext_payload <= normFlow_payload;
  end


endmodule

module QKMul_1 (
  input  wire          io_input_valid,
  input  wire [15:0]   io_input_tdata,
  input  wire [5:0]    io_input_tuser,
  output wire          io_output_valid,
  output wire [15:0]   io_output_tdata,
  output wire [5:0]    io_output_tuser,
  output wire          qProbe_valid,
  output wire [15:0]   qProbe_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                qIn_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qIn_mul_ip_m_axis_result_tdata;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [7:0]    fifo_io_occupancy;
  wire       [7:0]    fifo_io_availability;
  wire                qFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qFlow_mul_ip_m_axis_result_tdata;
  wire                accIn_acc_ip_m_axis_result_tvalid;
  wire                accIn_acc_ip_m_axis_result_tlast;
  wire       [15:0]   accIn_acc_ip_m_axis_result_tdata;
  wire                qIn_tvalid;
  wire       [15:0]   qIn_tdata;
  reg        [6:0]    inCnt;
  reg        [4:0]    headCnt;
  wire                kInput_valid;
  wire       [15:0]   kInput_payload;
  wire                sqrtD_valid;
  wire       [15:0]   sqrtD_payload;
  wire                qFlow_valid;
  wire       [15:0]   qFlow_payload;
  wire                kFlow_valid;
  wire       [15:0]   kFlow_payload;
  wire                accIn_valid;
  wire                accIn_payload_last;
  wire       [15:0]   accIn_payload_fragment;
  reg        [6:0]    accInCnt;
  wire                accInCntOvf;

  fp16mul6 qIn_mul_ip (
    .aclk                 (clk_0_clk                           ), //i
    .s_axis_a_tvalid      (qIn_tvalid                          ), //i
    .s_axis_a_tdata       (qIn_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (sqrtD_valid                         ), //i
    .s_axis_b_tdata       (sqrtD_payload[15:0]                 ), //i
    .m_axis_result_tvalid (qIn_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qIn_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamFifo_112 fifo (
    .io_push_valid   (qIn_mul_ip_m_axis_result_tvalid     ), //i
    .io_push_ready   (fifo_io_push_ready                  ), //o
    .io_push_payload (qIn_mul_ip_m_axis_result_tdata[15:0]), //i
    .io_pop_valid    (fifo_io_pop_valid                   ), //o
    .io_pop_ready    (kFlow_valid                         ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]           ), //o
    .io_flush        (1'b0                                ), //i
    .io_occupancy    (fifo_io_occupancy[7:0]              ), //o
    .io_availability (fifo_io_availability[7:0]           ), //o
    .clk_0_clk       (clk_0_clk                           ), //i
    .clk_0_resetn    (clk_0_resetn                        )  //i
  );
  fp16mul6 qFlow_mul_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (qFlow_valid                           ), //i
    .s_axis_a_tdata       (qFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (kFlow_valid                           ), //i
    .s_axis_b_tdata       (kFlow_payload[15:0]                   ), //i
    .m_axis_result_tvalid (qFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16acc16 accIn_acc_ip (
    .aclk                 (clk_0_clk                             ), //i
    .aresetn              (clk_0_resetn                          ), //i
    .s_axis_a_tvalid      (accIn_valid                           ), //i
    .s_axis_a_tlast       (accIn_payload_last                    ), //i
    .s_axis_a_tdata       (accIn_payload_fragment[15:0]          ), //i
    .m_axis_result_tvalid (accIn_acc_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tlast  (accIn_acc_ip_m_axis_result_tlast      ), //o
    .m_axis_result_tdata  (accIn_acc_ip_m_axis_result_tdata[15:0])  //o
  );
  assign qIn_tvalid = (io_input_valid && (io_input_tuser == 6'h08));
  assign qIn_tdata = io_input_tdata;
  assign qProbe_valid = ((qIn_tvalid && (inCnt == 7'h0)) && (headCnt == 5'h0));
  assign qProbe_payload = qIn_tdata;
  assign kInput_valid = (io_input_valid && (io_input_tuser == 6'h09));
  assign kInput_payload = io_input_tdata;
  assign sqrtD_payload = 16'h2da8;
  assign sqrtD_valid = 1'b1;
  assign qFlow_valid = kFlow_valid;
  assign qFlow_payload = fifo_io_pop_payload;
  assign kFlow_payload = kInput_payload;
  assign kFlow_valid = kInput_valid;
  assign accInCntOvf = (accInCnt == 7'h7f);
  assign accIn_valid = qFlow_mul_ip_m_axis_result_tvalid;
  assign accIn_payload_fragment = qFlow_mul_ip_m_axis_result_tdata;
  assign accIn_payload_last = accInCntOvf;
  assign io_output_valid = (accIn_acc_ip_m_axis_result_tvalid && accIn_acc_ip_m_axis_result_tlast);
  assign io_output_tdata = accIn_acc_ip_m_axis_result_tdata;
  assign io_output_tuser = 6'h0c;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      inCnt <= 7'h0;
      headCnt <= 5'h0;
      accInCnt <= 7'h0;
    end else begin
      if(qIn_tvalid) begin
        inCnt <= (inCnt + 7'h01);
        if((inCnt == 7'h7f)) begin
          inCnt <= 7'h0;
          headCnt <= (headCnt + 5'h01);
        end
      end
      if(qFlow_mul_ip_m_axis_result_tvalid) begin
        accInCnt <= (accInCnt + 7'h01);
        if(accInCntOvf) begin
          accInCnt <= 7'h0;
        end
      end
    end
  end


endmodule

module QuantWrapper_1 (
  input  wire          io_toBeQuant_0_valid,
  input  wire [15:0]   io_toBeQuant_0_tdata,
  input  wire [5:0]    io_toBeQuant_0_tuser,
  input  wire          io_toBeQuant_1_valid,
  input  wire [15:0]   io_toBeQuant_1_tdata,
  input  wire [5:0]    io_toBeQuant_1_tuser,
  output wire          io_quantZero_valid,
  output wire [7:0]    io_quantZero_payload,
  output wire          io_quantScale_valid,
  output wire [15:0]   io_quantScale_payload,
  output wire          io_afterQuant_valid,
  output wire          io_afterQuant_payload_last,
  output wire [7:0]    io_afterQuant_payload_fragment,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                scaleFifo_io_pop_ready;
  wire                zeroFifo_io_pop_ready;
  wire                find_max_tvalid;
  wire       [15:0]   find_max_tdata;
  wire                find_min_tvalid;
  wire       [15:0]   find_min_tdata;
  wire                getCfg_scale_tvalid;
  wire       [15:0]   getCfg_scale_tdata;
  wire                getCfg_zero_tvalid;
  wire       [7:0]    getCfg_zero_tdata;
  wire                quant_zero_tready;
  wire                quant_q_tvalid;
  wire       [7:0]    quant_q_tdata;
  wire                xFifo_io_push_ready;
  wire                xFifo_io_pop_valid;
  wire       [15:0]   xFifo_io_pop_payload;
  wire       [10:0]   xFifo_io_occupancy;
  wire       [10:0]   xFifo_io_availability;
  wire                scaleFifo_io_push_ready;
  wire                scaleFifo_io_pop_valid;
  wire       [15:0]   scaleFifo_io_pop_payload;
  wire       [5:0]    scaleFifo_io_occupancy;
  wire       [5:0]    scaleFifo_io_availability;
  wire                zeroFifo_io_push_ready;
  wire                zeroFifo_io_pop_valid;
  wire       [7:0]    zeroFifo_io_pop_payload;
  wire       [5:0]    zeroFifo_io_occupancy;
  wire       [5:0]    zeroFifo_io_availability;
  wire       [1:0]    t_kToBeQuant_tuser;
  wire       [1:0]    t_vToBeQuant_tuser;
  wire       [6:0]    t_t_io_pop_ready_2;
  wire       [0:0]    t_t_io_pop_ready_2_1;
  wire       [6:0]    t_t_io_pop_ready_7;
  wire       [0:0]    t_t_io_pop_ready_7_1;
  reg                 kToBeQuant_valid;
  reg        [15:0]   kToBeQuant_tdata;
  reg        [5:0]    kToBeQuant_tuser;
  reg                 vToBeQuant_valid;
  reg        [15:0]   vToBeQuant_tdata;
  reg        [5:0]    vToBeQuant_tuser;
  wire                toBeQuant_tvalid;
  wire       [15:0]   toBeQuant_tdata;
  wire       [5:0]    toBeQuant_tuser;
  wire                t_scaleRep_valid;
  reg                 t_io_pop_ready;
  reg                 t_io_pop_ready_1;
  reg        [6:0]    t_io_pop_ready_2;
  reg        [6:0]    t_io_pop_ready_3;
  wire                t_io_pop_ready_4;
  wire                scaleRep_valid;
  wire                scaleRep_ready;
  wire       [15:0]   scaleRep_payload;
  reg                 t_scaleRep_valid_1;
  reg        [15:0]   t_scaleRep_payload;
  wire                t_zeroRep_valid;
  reg                 t_io_pop_ready_5;
  reg                 t_io_pop_ready_6;
  reg        [6:0]    t_io_pop_ready_7;
  reg        [6:0]    t_io_pop_ready_8;
  wire                t_io_pop_ready_9;
  wire                zeroRep_valid;
  wire                zeroRep_ready;
  wire       [7:0]    zeroRep_payload;
  reg                 t_zeroRep_valid_1;
  reg        [7:0]    t_zeroRep_payload;
  wire                joinEvent_valid;
  wire                joinEvent_ready;
  wire                joinEventFire;
  wire                afterQuant_valid;
  wire                afterQuant_payload_last;
  wire       [7:0]    afterQuant_payload_fragment;
  reg        [6:0]    cnt;
  wire                cntOvf;
  reg                 afterQuant_regNext_valid;
  reg                 afterQuant_regNext_payload_last;
  reg        [7:0]    afterQuant_regNext_payload_fragment;
  reg                 quant_getCfg_scale_regNext_valid;
  reg        [15:0]   quant_getCfg_scale_regNext_payload;
  reg                 quant_getCfg_zero_regNext_valid;
  reg        [7:0]    quant_getCfg_zero_regNext_payload;

  assign t_kToBeQuant_tuser = {(io_toBeQuant_0_tuser == 6'h12),(io_toBeQuant_0_tuser == 6'h09)};
  assign t_vToBeQuant_tuser = {(io_toBeQuant_1_tuser == 6'h13),(io_toBeQuant_1_tuser == 6'h07)};
  assign t_t_io_pop_ready_2_1 = t_io_pop_ready_1;
  assign t_t_io_pop_ready_2 = {6'd0, t_t_io_pop_ready_2_1};
  assign t_t_io_pop_ready_7_1 = t_io_pop_ready_6;
  assign t_t_io_pop_ready_7 = {6'd0, t_t_io_pop_ready_7_1};
  FindRange_1 find (
    .x_tvalid     (toBeQuant_tvalid     ), //i
    .x_tdata      (toBeQuant_tdata[15:0]), //i
    .max_tvalid   (find_max_tvalid      ), //o
    .max_tdata    (find_max_tdata[15:0] ), //o
    .min_tvalid   (find_min_tvalid      ), //o
    .min_tdata    (find_min_tdata[15:0] ), //o
    .cfg_length   (16'h007f             ), //i
    .clk_0_clk    (clk_0_clk            ), //i
    .clk_0_resetn (clk_0_resetn         )  //i
  );
  GetScaleZero_1 getCfg (
    .max_tvalid   (find_max_tvalid         ), //i
    .max_tdata    (find_max_tdata[15:0]    ), //i
    .min_tvalid   (find_min_tvalid         ), //i
    .min_tdata    (find_min_tdata[15:0]    ), //i
    .scale_tvalid (getCfg_scale_tvalid     ), //o
    .scale_tdata  (getCfg_scale_tdata[15:0]), //o
    .zero_tvalid  (getCfg_zero_tvalid      ), //o
    .zero_tdata   (getCfg_zero_tdata[7:0]  ), //o
    .clk_0_clk    (clk_0_clk               ), //i
    .clk_0_resetn (clk_0_resetn            )  //i
  );
  LinearQuant_1 quant (
    .x_tvalid     (joinEventFire             ), //i
    .x_tdata      (xFifo_io_pop_payload[15:0]), //i
    .scale_tvalid (joinEventFire             ), //i
    .scale_tdata  (scaleRep_payload[15:0]    ), //i
    .zero_tvalid  (zeroRep_valid             ), //i
    .zero_tready  (quant_zero_tready         ), //o
    .zero_tdata   (zeroRep_payload[7:0]      ), //i
    .q_tvalid     (quant_q_tvalid            ), //o
    .q_tdata      (quant_q_tdata[7:0]        ), //o
    .clk_0_clk    (clk_0_clk                 ), //i
    .clk_0_resetn (clk_0_resetn              )  //i
  );
  StreamFifo_113 xFifo (
    .io_push_valid   (toBeQuant_tvalid           ), //i
    .io_push_ready   (xFifo_io_push_ready        ), //o
    .io_push_payload (toBeQuant_tdata[15:0]      ), //i
    .io_pop_valid    (xFifo_io_pop_valid         ), //o
    .io_pop_ready    (joinEventFire              ), //i
    .io_pop_payload  (xFifo_io_pop_payload[15:0] ), //o
    .io_flush        (1'b0                       ), //i
    .io_occupancy    (xFifo_io_occupancy[10:0]   ), //o
    .io_availability (xFifo_io_availability[10:0]), //o
    .clk_0_clk       (clk_0_clk                  ), //i
    .clk_0_resetn    (clk_0_resetn               )  //i
  );
  StreamFifo_114 scaleFifo (
    .io_push_valid   (getCfg_scale_tvalid           ), //i
    .io_push_ready   (scaleFifo_io_push_ready       ), //o
    .io_push_payload (getCfg_scale_tdata[15:0]      ), //i
    .io_pop_valid    (scaleFifo_io_pop_valid        ), //o
    .io_pop_ready    (scaleFifo_io_pop_ready        ), //i
    .io_pop_payload  (scaleFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                          ), //i
    .io_occupancy    (scaleFifo_io_occupancy[5:0]   ), //o
    .io_availability (scaleFifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                     ), //i
    .clk_0_resetn    (clk_0_resetn                  )  //i
  );
  StreamFifo_115 zeroFifo (
    .io_push_valid   (getCfg_zero_tvalid           ), //i
    .io_push_ready   (zeroFifo_io_push_ready       ), //o
    .io_push_payload (getCfg_zero_tdata[7:0]       ), //i
    .io_pop_valid    (zeroFifo_io_pop_valid        ), //o
    .io_pop_ready    (zeroFifo_io_pop_ready        ), //i
    .io_pop_payload  (zeroFifo_io_pop_payload[7:0] ), //o
    .io_flush        (1'b0                         ), //i
    .io_occupancy    (zeroFifo_io_occupancy[5:0]   ), //o
    .io_availability (zeroFifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                    ), //i
    .clk_0_resetn    (clk_0_resetn                 )  //i
  );
  assign toBeQuant_tvalid = (|{vToBeQuant_valid,kToBeQuant_valid});
  assign toBeQuant_tdata = (kToBeQuant_valid ? kToBeQuant_tdata : vToBeQuant_tdata);
  assign toBeQuant_tuser = (kToBeQuant_valid ? kToBeQuant_tuser : vToBeQuant_tuser);
  always @(*) begin
    t_io_pop_ready_1 = 1'b0;
    if((t_scaleRep_valid && t_io_pop_ready)) begin
      t_io_pop_ready_1 = 1'b1;
    end
  end

  assign t_io_pop_ready_4 = (t_io_pop_ready_3 == 7'h7f);
  always @(*) begin
    t_io_pop_ready_2 = (t_io_pop_ready_3 + t_t_io_pop_ready_2);
    if(1'b0) begin
      t_io_pop_ready_2 = 7'h0;
    end
  end

  assign t_scaleRep_valid = scaleFifo_io_pop_valid;
  assign scaleFifo_io_pop_ready = (t_io_pop_ready && t_io_pop_ready_4);
  always @(*) begin
    t_io_pop_ready = scaleRep_ready;
    if((! scaleRep_valid)) begin
      t_io_pop_ready = 1'b1;
    end
  end

  assign scaleRep_valid = t_scaleRep_valid_1;
  assign scaleRep_payload = t_scaleRep_payload;
  always @(*) begin
    t_io_pop_ready_6 = 1'b0;
    if((t_zeroRep_valid && t_io_pop_ready_5)) begin
      t_io_pop_ready_6 = 1'b1;
    end
  end

  assign t_io_pop_ready_9 = (t_io_pop_ready_8 == 7'h7f);
  always @(*) begin
    t_io_pop_ready_7 = (t_io_pop_ready_8 + t_t_io_pop_ready_7);
    if(1'b0) begin
      t_io_pop_ready_7 = 7'h0;
    end
  end

  assign t_zeroRep_valid = zeroFifo_io_pop_valid;
  assign zeroFifo_io_pop_ready = (t_io_pop_ready_5 && t_io_pop_ready_9);
  always @(*) begin
    t_io_pop_ready_5 = zeroRep_ready;
    if((! zeroRep_valid)) begin
      t_io_pop_ready_5 = 1'b1;
    end
  end

  assign zeroRep_valid = t_zeroRep_valid_1;
  assign zeroRep_payload = t_zeroRep_payload;
  assign scaleRep_ready = joinEventFire;
  assign joinEvent_valid = (xFifo_io_pop_valid && scaleRep_valid);
  assign joinEventFire = (joinEvent_valid && joinEvent_ready);
  assign joinEvent_ready = 1'b1;
  assign zeroRep_ready = quant_zero_tready;
  assign cntOvf = (cnt == 7'h7f);
  assign afterQuant_valid = quant_q_tvalid;
  assign afterQuant_payload_fragment = quant_q_tdata;
  assign afterQuant_payload_last = (cntOvf && quant_q_tvalid);
  assign io_afterQuant_valid = afterQuant_regNext_valid;
  assign io_afterQuant_payload_last = afterQuant_regNext_payload_last;
  assign io_afterQuant_payload_fragment = afterQuant_regNext_payload_fragment;
  assign io_quantScale_valid = quant_getCfg_scale_regNext_valid;
  assign io_quantScale_payload = quant_getCfg_scale_regNext_payload;
  assign io_quantZero_valid = quant_getCfg_zero_regNext_valid;
  assign io_quantZero_payload = quant_getCfg_zero_regNext_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      kToBeQuant_valid <= 1'b0;
      vToBeQuant_valid <= 1'b0;
      t_io_pop_ready_3 <= 7'h0;
      t_scaleRep_valid_1 <= 1'b0;
      t_io_pop_ready_8 <= 7'h0;
      t_zeroRep_valid_1 <= 1'b0;
      cnt <= 7'h0;
      afterQuant_regNext_valid <= 1'b0;
      quant_getCfg_scale_regNext_valid <= 1'b0;
      quant_getCfg_zero_regNext_valid <= 1'b0;
    end else begin
      kToBeQuant_valid <= (io_toBeQuant_0_valid && (|{(6'h12 == io_toBeQuant_0_tuser),(6'h09 == io_toBeQuant_0_tuser)}));
      vToBeQuant_valid <= (io_toBeQuant_1_valid && (|{(6'h13 == io_toBeQuant_1_tuser),(6'h07 == io_toBeQuant_1_tuser)}));
      t_io_pop_ready_3 <= t_io_pop_ready_2;
      if(t_io_pop_ready) begin
        t_scaleRep_valid_1 <= t_scaleRep_valid;
      end
      t_io_pop_ready_8 <= t_io_pop_ready_7;
      if(t_io_pop_ready_5) begin
        t_zeroRep_valid_1 <= t_zeroRep_valid;
      end
      if(afterQuant_valid) begin
        cnt <= (cnt + 7'h01);
        if(cntOvf) begin
          cnt <= 7'h0;
        end
      end
      afterQuant_regNext_valid <= afterQuant_valid;
      quant_getCfg_scale_regNext_valid <= getCfg_scale_tvalid;
      quant_getCfg_zero_regNext_valid <= getCfg_zero_tvalid;
    end
  end

  always @(posedge clk_0_clk) begin
    kToBeQuant_tdata <= io_toBeQuant_0_tdata;
    kToBeQuant_tuser <= (t_kToBeQuant_tuser[0] ? 6'h0a : 6'h0a);
    vToBeQuant_tdata <= io_toBeQuant_1_tdata;
    vToBeQuant_tuser <= (t_vToBeQuant_tuser[0] ? 6'h0b : 6'h0b);
    if(t_io_pop_ready) begin
      t_scaleRep_payload <= scaleFifo_io_pop_payload;
    end
    if(t_io_pop_ready_5) begin
      t_zeroRep_payload <= zeroFifo_io_pop_payload;
    end
    afterQuant_regNext_payload_last <= afterQuant_payload_last;
    afterQuant_regNext_payload_fragment <= afterQuant_payload_fragment;
    quant_getCfg_scale_regNext_payload <= getCfg_scale_tdata;
    quant_getCfg_zero_regNext_payload <= getCfg_zero_tdata;
  end


endmodule

module SerialRoPE_1 (
  input  wire [15:0]   io_pos,
  input  wire          io_input_0_valid,
  input  wire [15:0]   io_input_0_tdata,
  input  wire [5:0]    io_input_0_tuser,
  output wire          output_tvalid,
  output wire [15:0]   output_tdata,
  output wire [5:0]    output_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                indexGen_pos_valid;
  wire                rotator_io_output_valid;
  wire       [15:0]   rotator_io_output_payload_A;
  wire       [15:0]   rotator_io_output_payload_B;
  wire                indexGen_index_tvalid;
  wire       [15:0]   indexGen_index_tdata;
  wire                cosSinGen_2_index_tready;
  wire                cosSinGen_2_sinCos_tvalid;
  wire       [31:0]   cosSinGen_2_sinCos_tdata;
  wire                qkFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qkFlow_mul_ip_m_axis_result_tdata;
  wire                qkRotateFlow_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   qkRotateFlow_mul_ip_m_axis_result_tdata;
  wire                rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  wire       [15:0]   rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata;
  reg        [5:0]    t_ropeTgM_tuser_4;
  wire       [1:0]    t_ropeTgM_tuser_5;
  wire       [5:0]    t_ropeTgM_tuser;
  wire                ropeErr;
  wire       [2:0]    t_ropeTgM_tuser_1;
  wire                t_ropeTgM_tuser_2;
  wire                t_ropeTgM_tuser_3;
  wire                ropeTgM_valid;
  wire       [15:0]   ropeTgM_tdata;
  wire       [5:0]    ropeTgM_tuser;
  reg                 ropeIn_tvalid;
  reg        [15:0]   ropeIn_tdata;
  reg        [5:0]    ropeIn_tuser;
  reg        [6:0]    inCnt;
  wire                inCntOvf;
  wire                inCntZero;
  wire                usrStream_valid;
  reg                 usrStream_ready;
  wire       [5:0]    usrStream_payload;
  wire                usrStream_m2sPipe_valid;
  reg                 usrStream_m2sPipe_ready;
  wire       [5:0]    usrStream_m2sPipe_payload;
  reg                 usrStream_rValid;
  reg        [5:0]    usrStream_rData;
  wire                usrStreamPipe_valid;
  wire                usrStreamPipe_ready;
  wire       [5:0]    usrStreamPipe_payload;
  reg                 usrStream_m2sPipe_rValid;
  reg        [5:0]    usrStream_m2sPipe_rData;
  wire                indexMon_tvalid;
  wire       [15:0]   indexMon_tdata;
  wire                rope_indexGen_index_fire;
  wire                joinEvent_valid;
  wire                qkFlow_valid;
  wire       [15:0]   qkFlow_payload;
  wire                cosFlow_tvalid;
  wire       [15:0]   cosFlow_tdata;
  wire                qkRotateFlow_valid;
  wire       [15:0]   qkRotateFlow_payload;
  wire                sinFlow_tvalid;
  wire       [15:0]   sinFlow_tdata;
  reg        [6:0]    outCnt;
  wire                outCntOvf;

  assign t_ropeTgM_tuser_5 = {t_ropeTgM_tuser_3,t_ropeTgM_tuser_2};
  RoPERotate_1 rotator (
    .io_input_valid      (ropeIn_tvalid                    ), //i
    .io_input_payload    (ropeIn_tdata[15:0]               ), //i
    .io_output_valid     (rotator_io_output_valid          ), //o
    .io_output_payload_A (rotator_io_output_payload_A[15:0]), //o
    .io_output_payload_B (rotator_io_output_payload_B[15:0]), //o
    .cfg_dim             (7'h7f                            ), //i
    .clk_0_clk           (clk_0_clk                        ), //i
    .clk_0_resetn        (clk_0_resetn                     )  //i
  );
  CosSinIndexGen_1 indexGen (
    .pos_valid    (indexGen_pos_valid        ), //i
    .pos_payload  (io_pos[15:0]              ), //i
    .index_tvalid (indexGen_index_tvalid     ), //o
    .index_tready (cosSinGen_2_index_tready  ), //i
    .index_tdata  (indexGen_index_tdata[15:0]), //o
    .clk_0_clk    (clk_0_clk                 ), //i
    .clk_0_resetn (clk_0_resetn              )  //i
  );
  CosSinGen_1 cosSinGen_2 (
    .index_tvalid  (indexGen_index_tvalid         ), //i
    .index_tready  (cosSinGen_2_index_tready      ), //o
    .index_tdata   (indexGen_index_tdata[15:0]    ), //i
    .sinCos_tvalid (cosSinGen_2_sinCos_tvalid     ), //o
    .sinCos_tready (rotator_io_output_valid       ), //i
    .sinCos_tdata  (cosSinGen_2_sinCos_tdata[31:0]), //o
    .clk_0_clk     (clk_0_clk                     ), //i
    .clk_0_resetn  (clk_0_resetn                  )  //i
  );
  fp16mul6 qkFlow_mul_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (qkFlow_valid                           ), //i
    .s_axis_a_tdata       (qkFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (cosFlow_tvalid                         ), //i
    .s_axis_b_tdata       (cosFlow_tdata[15:0]                    ), //i
    .m_axis_result_tvalid (qkFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qkFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 qkRotateFlow_mul_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (qkRotateFlow_valid                           ), //i
    .s_axis_a_tdata       (qkRotateFlow_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (sinFlow_tvalid                               ), //i
    .s_axis_b_tdata       (sinFlow_tdata[15:0]                          ), //i
    .m_axis_result_tvalid (qkRotateFlow_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (qkRotateFlow_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 rope_qkFlow_mul_ip_m_axis_result_add_ip (
    .aclk                 (clk_0_clk                                                        ), //i
    .s_axis_a_tvalid      (qkFlow_mul_ip_m_axis_result_tvalid                               ), //i
    .s_axis_a_tdata       (qkFlow_mul_ip_m_axis_result_tdata[15:0]                          ), //i
    .s_axis_b_tvalid      (qkRotateFlow_mul_ip_m_axis_result_tvalid                         ), //i
    .s_axis_b_tdata       (qkRotateFlow_mul_ip_m_axis_result_tdata[15:0]                    ), //i
    .m_axis_result_tvalid (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    case(t_ropeTgM_tuser_5)
      2'b00 : t_ropeTgM_tuser_4 = 6'h08;
      2'b01 : t_ropeTgM_tuser_4 = 6'h09;
      default : t_ropeTgM_tuser_4 = 6'h12;
    endcase
  end

  assign ropeErr = 1'b0;
  assign t_ropeTgM_tuser = io_input_0_tuser;
  assign t_ropeTgM_tuser_1 = {(t_ropeTgM_tuser == 6'h11),{(t_ropeTgM_tuser == 6'h06),(t_ropeTgM_tuser == 6'h05)}};
  assign t_ropeTgM_tuser_2 = t_ropeTgM_tuser_1[1];
  assign t_ropeTgM_tuser_3 = t_ropeTgM_tuser_1[2];
  assign ropeTgM_valid = (|(io_input_0_valid && (((io_input_0_tuser == 6'h05) || (io_input_0_tuser == 6'h06)) || (io_input_0_tuser == 6'h11))));
  assign ropeTgM_tdata = io_input_0_tdata;
  assign ropeTgM_tuser = t_ropeTgM_tuser_4;
  assign inCntOvf = (inCnt == 7'h7f);
  assign inCntZero = (inCnt == 7'h0);
  always @(*) begin
    usrStream_ready = usrStream_m2sPipe_ready;
    if((! usrStream_m2sPipe_valid)) begin
      usrStream_ready = 1'b1;
    end
  end

  assign usrStream_m2sPipe_valid = usrStream_rValid;
  assign usrStream_m2sPipe_payload = usrStream_rData;
  always @(*) begin
    usrStream_m2sPipe_ready = usrStreamPipe_ready;
    if((! usrStreamPipe_valid)) begin
      usrStream_m2sPipe_ready = 1'b1;
    end
  end

  assign usrStreamPipe_valid = usrStream_m2sPipe_rValid;
  assign usrStreamPipe_payload = usrStream_m2sPipe_rData;
  assign usrStream_valid = (inCntZero && ropeIn_tvalid);
  assign usrStream_payload = ropeIn_tuser;
  assign rope_indexGen_index_fire = (indexGen_index_tvalid && cosSinGen_2_index_tready);
  assign indexMon_tvalid = rope_indexGen_index_fire;
  assign indexMon_tdata = indexGen_index_tdata;
  assign indexGen_pos_valid = (ropeIn_tvalid && inCntZero);
  assign joinEvent_valid = rotator_io_output_valid;
  assign qkFlow_valid = joinEvent_valid;
  assign qkFlow_payload = rotator_io_output_payload_A;
  assign cosFlow_tvalid = joinEvent_valid;
  assign cosFlow_tdata = cosSinGen_2_sinCos_tdata[15 : 0];
  assign qkRotateFlow_valid = joinEvent_valid;
  assign qkRotateFlow_payload = rotator_io_output_payload_B;
  assign sinFlow_tvalid = joinEvent_valid;
  assign sinFlow_tdata = cosSinGen_2_sinCos_tdata[31 : 16];
  assign output_tvalid = rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid;
  assign output_tdata = rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tdata;
  assign output_tuser = usrStreamPipe_payload;
  assign outCntOvf = (outCnt == 7'h7f);
  assign usrStreamPipe_ready = (rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid && outCntOvf);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      ropeIn_tvalid <= 1'b0;
      inCnt <= 7'h0;
      usrStream_rValid <= 1'b0;
      usrStream_m2sPipe_rValid <= 1'b0;
      outCnt <= 7'h0;
    end else begin
      ropeIn_tvalid <= ropeTgM_valid;
      if(usrStream_ready) begin
        usrStream_rValid <= usrStream_valid;
      end
      if(usrStream_m2sPipe_ready) begin
        usrStream_m2sPipe_rValid <= usrStream_m2sPipe_valid;
      end
      if(ropeIn_tvalid) begin
        inCnt <= (inCnt + 7'h01);
        if(inCntOvf) begin
          inCnt <= 7'h0;
        end
      end
      if(rope_qkFlow_mul_ip_m_axis_result_add_ip_m_axis_result_tvalid) begin
        outCnt <= (outCnt + 7'h01);
        if(outCntOvf) begin
          outCnt <= 7'h0;
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    ropeIn_tdata <= ropeTgM_tdata;
    ropeIn_tuser <= ropeTgM_tuser;
    if(usrStream_ready) begin
      usrStream_rData <= usrStream_payload;
    end
    if(usrStream_m2sPipe_ready) begin
      usrStream_m2sPipe_rData <= usrStream_m2sPipe_payload;
    end
  end


endmodule

module StreamMux_29 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [15:0]   io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [15:0]   io_inputs_1_payload,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire [15:0]   io_inputs_2_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [15:0]   io_output_payload
);

  reg                 t_io_output_valid;
  reg        [15:0]   t_io_output_payload;

  always @(*) begin
    case(io_select)
      2'b00 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      2'b01 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload = io_inputs_2_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

//StreamFifo_47 replaced by StreamFifo_43

module StreamMux_28 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [31:0]   io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [31:0]   io_inputs_1_payload,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire [31:0]   io_inputs_2_payload,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire [31:0]   io_inputs_3_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [31:0]   io_output_payload
);

  reg                 t_io_output_valid;
  reg        [31:0]   t_io_output_payload;

  always @(*) begin
    case(io_select)
      2'b00 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      2'b01 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
      2'b10 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload = io_inputs_2_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload = io_inputs_3_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 2'b11) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

//StreamFifo_46 replaced by StreamFifo_44

//StreamFifo_45 replaced by StreamFifo_44

module StreamFifo_44 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [31:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [31:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [31:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [31:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [31:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [31:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [31:0] logic_ram [0:511];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamMux_27 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [7:0]    io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [7:0]    io_inputs_1_payload,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire [7:0]    io_inputs_2_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [7:0]    io_output_payload
);

  reg                 t_io_output_valid;
  reg        [7:0]    t_io_output_payload;

  always @(*) begin
    case(io_select)
      2'b00 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      2'b01 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload = io_inputs_2_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

module StreamFifo_43 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:511];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_42 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [7:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [7:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [7:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [7:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [7:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [7:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [7:0] logic_ram [0:511];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamMux_26 replaced by StreamMux_41

module StreamMux_25 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [15:0]   io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [15:0]   io_inputs_1_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [15:0]   io_output_payload
);

  reg                 t_io_output_valid;
  reg        [15:0]   t_io_output_payload;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

//StreamFork_3 replaced by StreamFork_2

module StreamFork_2 (
  input  wire          io_input_valid,
  output reg           io_input_ready,
  output wire          io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire          io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg                 logic_linkEnable_0;
  reg                 logic_linkEnable_1;
  wire                io_outputs_0_fire;
  wire                io_outputs_1_fire;

  always @(*) begin
    io_input_ready = 1'b1;
    if(((! io_outputs_0_ready) && logic_linkEnable_0)) begin
      io_input_ready = 1'b0;
    end
    if(((! io_outputs_1_ready) && logic_linkEnable_1)) begin
      io_input_ready = 1'b0;
    end
  end

  assign io_outputs_0_valid = (io_input_valid && logic_linkEnable_0);
  assign io_outputs_0_fire = (io_outputs_0_valid && io_outputs_0_ready);
  assign io_outputs_1_valid = (io_input_valid && logic_linkEnable_1);
  assign io_outputs_1_fire = (io_outputs_1_valid && io_outputs_1_ready);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_linkEnable_0 <= 1'b1;
      logic_linkEnable_1 <= 1'b1;
    end else begin
      if(io_outputs_0_fire) begin
        logic_linkEnable_0 <= 1'b0;
      end
      if(io_outputs_1_fire) begin
        logic_linkEnable_1 <= 1'b0;
      end
      if(io_input_ready) begin
        logic_linkEnable_0 <= 1'b1;
        logic_linkEnable_1 <= 1'b1;
      end
    end
  end


endmodule

//StreamMux_24 replaced by StreamMux_23

module StreamMux_23 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [31:0]   io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [31:0]   io_inputs_1_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [31:0]   io_output_payload
);

  reg                 t_io_output_valid;
  reg        [31:0]   t_io_output_payload;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

//StreamDemux_10 replaced by StreamDemux_25

module KvCacheCase_1 (
  input  wire [9:0]    io_token,
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [0:0]    deMux_io_select;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  wire       [15:0]   t_cntLv1Ovf;
  wire       [5:0]    t_cntLv1Ovf_1;
  wire       [15:0]   t_cntLv2Ovf;
  wire       [10:0]   t_cntLv2Ovf_1;
  wire       [10:0]   kvCnt;
  wire       [5:0]    kvSzCnt;
  reg        [15:0]   cntLv1;
  reg        [15:0]   cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [0:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;
  reg                 kvSzCntZeroDly;

  assign t_cntLv1Ovf_1 = (kvSzCnt - 6'h01);
  assign t_cntLv1Ovf = {10'd0, t_cntLv1Ovf_1};
  assign t_cntLv2Ovf_1 = (kvCnt - 11'h001);
  assign t_cntLv2Ovf = {5'd0, t_cntLv2Ovf_1};
  StreamDemux_17 deMux (
    .io_select          (deMux_io_select         ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign kvCnt = ({1'd0,io_token} <<< 1'd1);
  assign kvSzCnt = io_token[9 : 4];
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == t_cntLv1Ovf);
  assign cntLv2Ovf = (cntLv2 == t_cntLv2Ovf);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(*) begin
    deMux_io_select = sel;
    if(kvSzCntZeroDly) begin
      deMux_io_select = 1'b1;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cntLv1 <= 16'h0;
      cntLv2 <= 16'h0;
      sel <= 1'b0;
      kvSzCntZeroDly <= 1'b1;
    end else begin
      if(io_misc_fire) begin
        cntLv1 <= (cntLv1 + 16'h0001);
        if(cntLv1Ovf) begin
          cntLv1 <= 16'h0;
          sel <= 1'b1;
        end
      end
      if(io_main_fire) begin
        cntLv2 <= (cntLv2 + 16'h0001);
        if(cntLv2Ovf) begin
          cntLv2 <= 16'h0;
          sel <= 1'b0;
        end
      end
      kvSzCntZeroDly <= (kvSzCnt == 6'h0);
    end
  end


endmodule

module StreamFifo_41 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [3:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [3:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [3:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [3:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  wire                logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire       [3:0]    logic_pop_async_readed;
  wire                logic_pop_addressGen_translated_valid;
  wire                logic_pop_addressGen_translated_ready;
  wire       [3:0]    logic_pop_addressGen_translated_payload;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [3:0] logic_ram [0:63];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  assign logic_ram_spinal_port1 = logic_ram[logic_pop_addressGen_payload];
  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  assign logic_pop_async_readed = logic_ram_spinal_port1;
  assign logic_pop_addressGen_translated_valid = logic_pop_addressGen_valid;
  assign logic_pop_addressGen_ready = logic_pop_addressGen_translated_ready;
  assign logic_pop_addressGen_translated_payload = logic_pop_async_readed;
  assign io_pop_valid = logic_pop_addressGen_translated_valid;
  assign logic_pop_addressGen_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_addressGen_translated_payload;
  assign logic_ptr_popOnIo = logic_ptr_pop;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end


endmodule

//StreamFifo_40 replaced by StreamFifo_114

//StreamFifo_39 replaced by StreamFifo_114

module SparseCase_1 (
  input  wire [5:0]    io_tag,
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  wire       [7:0]    t_cntLv1Ovf;
  wire       [7:0]    t_cntLv2Ovf;
  wire       [1:0]    tagHit;
  wire       [7:0]    miscLenVec_0;
  wire       [7:0]    miscLenVec_1;
  wire       [7:0]    mainLenVec_0;
  wire       [7:0]    mainLenVec_1;
  wire                t_miscLen;
  wire       [7:0]    miscLen;
  wire       [7:0]    mainLen;
  reg        [7:0]    cntLv1;
  reg        [7:0]    cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [0:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;

  assign t_cntLv1Ovf = (miscLen - 8'h01);
  assign t_cntLv2Ovf = (mainLen - 8'h01);
  StreamDemux_17 deMux (
    .io_select          (sel                     ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign tagHit = {(6'h11 == io_tag),(6'h10 == io_tag)};
  assign miscLenVec_0 = 8'h01;
  assign miscLenVec_1 = 8'h01;
  assign mainLenVec_0 = 8'h10;
  assign mainLenVec_1 = 8'h10;
  assign t_miscLen = tagHit[0];
  assign miscLen = (t_miscLen ? miscLenVec_0 : miscLenVec_1);
  assign mainLen = (t_miscLen ? mainLenVec_0 : mainLenVec_1);
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == t_cntLv1Ovf);
  assign cntLv2Ovf = (cntLv2 == t_cntLv2Ovf);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cntLv1 <= 8'h0;
      cntLv2 <= 8'h0;
      sel <= 1'b0;
    end else begin
      if(io_misc_fire) begin
        cntLv1 <= (cntLv1 + 8'h01);
        if(cntLv1Ovf) begin
          cntLv1 <= 8'h0;
          sel <= 1'b1;
        end
      end
      if(io_main_fire) begin
        cntLv2 <= (cntLv2 + 8'h01);
        if(cntLv2Ovf) begin
          cntLv2 <= 8'h0;
          sel <= 1'b0;
        end
      end
    end
  end


endmodule

module LargeBankFifo_9 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [3:0]    io_occupancy,
  output wire [3:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [3:0]    fifo_0_io_occupancy;
  wire       [3:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [3:0]    fifo_1_io_occupancy;
  wire       [3:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [3:0]    fifo_2_io_occupancy;
  wire       [3:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [3:0]    fifo_3_io_occupancy;
  wire       [3:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_116 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[3:0]    ), //o
    .io_availability (fifo_0_io_availability[3:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_116 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[3:0]    ), //o
    .io_availability (fifo_1_io_availability[3:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_116 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[3:0]    ), //o
    .io_availability (fifo_2_io_availability[3:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_116 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[3:0]    ), //o
    .io_availability (fifo_3_io_availability[3:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

//StreamDemux_9 replaced by StreamDemux_17

module DenseCase_1 (
  input  wire          io_bus_valid,
  output wire          io_bus_ready,
  output wire          io_main_valid,
  input  wire          io_main_ready,
  output wire          io_misc_valid,
  input  wire          io_misc_ready,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [0:0]    deMux_io_select;
  wire                deMux_io_input_ready;
  wire                deMux_io_outputs_0_valid;
  wire                deMux_io_outputs_1_valid;
  reg        [7:0]    cntLv1;
  reg        [7:0]    cntLv2;
  wire                cntLv1Ovf;
  wire                cntLv2Ovf;
  reg        [1:0]    sel;
  wire                io_misc_fire;
  wire                io_main_fire;

  StreamDemux_17 deMux (
    .io_select          (deMux_io_select         ), //i
    .io_input_valid     (io_bus_valid            ), //i
    .io_input_ready     (deMux_io_input_ready    ), //o
    .io_outputs_0_valid (deMux_io_outputs_0_valid), //o
    .io_outputs_0_ready (io_misc_ready           ), //i
    .io_outputs_1_valid (deMux_io_outputs_1_valid), //o
    .io_outputs_1_ready (io_main_ready           )  //i
  );
  assign io_bus_ready = deMux_io_input_ready;
  assign io_main_valid = deMux_io_outputs_1_valid;
  assign io_misc_valid = deMux_io_outputs_0_valid;
  assign cntLv1Ovf = (cntLv1 == 8'h1f);
  assign cntLv2Ovf = (cntLv2 == 8'h03);
  assign io_misc_fire = (io_misc_valid && io_misc_ready);
  assign io_main_fire = (io_main_valid && io_main_ready);
  always @(*) begin
    if(((sel == 2'b00) || (sel == 2'b01))) begin
      deMux_io_select = 1'b0;
    end else begin
      deMux_io_select = 1'b1;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cntLv1 <= 8'h0;
      cntLv2 <= 8'h0;
      sel <= 2'b00;
    end else begin
      if((io_misc_fire && (sel == 2'b00))) begin
        sel <= 2'b01;
      end
      if((io_misc_fire && (sel == 2'b01))) begin
        sel <= 2'b10;
      end
      if(io_main_fire) begin
        cntLv1 <= (cntLv1 + 8'h01);
        if(cntLv1Ovf) begin
          cntLv1 <= 8'h0;
          cntLv2 <= (cntLv2 + 8'h01);
          sel <= 2'b01;
          if(cntLv2Ovf) begin
            cntLv2 <= 8'h0;
            sel <= 2'b00;
          end
        end
      end
    end
  end


endmodule

//StreamFifo_38 replaced by StreamFifo_114

//StreamFifo_37 replaced by StreamFifo_48

module StreamDemux_8 (
  input  wire [1:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output reg           io_outputs_2_valid,
  input  wire          io_outputs_2_ready
);

  wire                t_when;
  wire                t_when_1;
  wire                t_when_2;

  assign t_when = (2'b00 != io_select);
  assign t_when_1 = (2'b01 != io_select);
  assign t_when_2 = (2'b10 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
    if(!t_when_2) begin
      io_input_ready = io_outputs_2_ready;
    end
  end

  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_2) begin
      io_outputs_2_valid = 1'b0;
    end else begin
      io_outputs_2_valid = io_input_valid;
    end
  end


endmodule

module StreamFifo_36 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [9:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [9:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [9:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [9:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [9:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [9:0] logic_ram [0:63];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_8 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [6:0]    fifo_0_io_occupancy;
  wire       [6:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [6:0]    fifo_1_io_occupancy;
  wire       [6:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [6:0]    fifo_2_io_occupancy;
  wire       [6:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [6:0]    fifo_3_io_occupancy;
  wire       [6:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_120 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[6:0]    ), //o
    .io_availability (fifo_0_io_availability[6:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_120 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[6:0]    ), //o
    .io_availability (fifo_1_io_availability[6:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_120 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[6:0]    ), //o
    .io_availability (fifo_2_io_availability[6:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_120 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[6:0]    ), //o
    .io_availability (fifo_3_io_availability[6:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

module StreamFifo_35 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [5:0]    io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [5:0]    io_pop_payload_fragment,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [6:0]    logic_ram_spinal_port1;
  wire       [6:0]    t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [5:0]    logic_push_onRam_write_payload_data_fragment;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [5:0]    logic_pop_sync_readPort_rsp_fragment;
  wire       [6:0]    t_logic_pop_sync_readPort_rsp_last;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_fragment;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [6:0] logic_ram [0:31];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_fragment,logic_push_onRam_write_payload_data_last};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_fragment = io_push_payload_fragment;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_fragment = t_logic_pop_sync_readPort_rsp_last[6 : 1];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_fragment = logic_pop_sync_readPort_rsp_fragment;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_fragment = logic_pop_sync_readArbitation_translated_payload_fragment;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_7 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [127:0]  fifo_0_io_pop_payload;
  wire       [5:0]    fifo_0_io_occupancy;
  wire       [5:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [127:0]  fifo_1_io_pop_payload;
  wire       [5:0]    fifo_1_io_occupancy;
  wire       [5:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [127:0]  fifo_2_io_pop_payload;
  wire       [5:0]    fifo_2_io_occupancy;
  wire       [5:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [127:0]  fifo_3_io_pop_payload;
  wire       [5:0]    fifo_3_io_occupancy;
  wire       [5:0]    fifo_3_io_availability;
  wire       [511:0]  t_inPydSplit_0;
  wire       [127:0]  inPydSplit_0;
  wire       [127:0]  inPydSplit_1;
  wire       [127:0]  inPydSplit_2;
  wire       [127:0]  inPydSplit_3;
  wire       [511:0]  outPydMerge;

  StreamFifo_124 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[127:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[5:0]    ), //o
    .io_availability (fifo_0_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_124 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[127:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[5:0]    ), //o
    .io_availability (fifo_1_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_124 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[127:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[5:0]    ), //o
    .io_availability (fifo_2_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_124 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[127:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[127:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[5:0]    ), //o
    .io_availability (fifo_3_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[127 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[255 : 128];
  assign inPydSplit_2 = t_inPydSplit_0[383 : 256];
  assign inPydSplit_3 = t_inPydSplit_0[511 : 384];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

module StreamMux_22 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  output wire          io_output_valid,
  input  wire          io_output_ready
);

  reg                 t_io_output_valid;

  always @(*) begin
    case(io_select)
      2'b00 : t_io_output_valid = io_inputs_0_valid;
      2'b01 : t_io_output_valid = io_inputs_1_valid;
      default : t_io_output_valid = io_inputs_2_valid;
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_output_valid = t_io_output_valid;

endmodule

module StreamMux_21 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  output wire          io_output_valid,
  input  wire          io_output_ready
);

  reg                 t_io_output_valid;

  always @(*) begin
    case(io_select)
      2'b00 : t_io_output_valid = io_inputs_0_valid;
      2'b01 : t_io_output_valid = io_inputs_1_valid;
      2'b10 : t_io_output_valid = io_inputs_2_valid;
      default : t_io_output_valid = io_inputs_3_valid;
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 2'b11) && io_output_ready);
  assign io_output_valid = t_io_output_valid;

endmodule

module StreamDemux_7 (
  input  wire [2:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output reg           io_outputs_2_valid,
  input  wire          io_outputs_2_ready,
  output reg           io_outputs_3_valid,
  input  wire          io_outputs_3_ready,
  output reg           io_outputs_4_valid,
  input  wire          io_outputs_4_ready
);

  wire                t_when;
  wire                t_when_1;
  wire                t_when_2;
  wire                t_when_3;
  wire                t_when_4;

  assign t_when = (3'b000 != io_select);
  assign t_when_1 = (3'b001 != io_select);
  assign t_when_2 = (3'b010 != io_select);
  assign t_when_3 = (3'b011 != io_select);
  assign t_when_4 = (3'b100 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
    if(!t_when_2) begin
      io_input_ready = io_outputs_2_ready;
    end
    if(!t_when_3) begin
      io_input_ready = io_outputs_3_ready;
    end
    if(!t_when_4) begin
      io_input_ready = io_outputs_4_ready;
    end
  end

  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_2) begin
      io_outputs_2_valid = 1'b0;
    end else begin
      io_outputs_2_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_3) begin
      io_outputs_3_valid = 1'b0;
    end else begin
      io_outputs_3_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_4) begin
      io_outputs_4_valid = 1'b0;
    end else begin
      io_outputs_4_valid = io_input_valid;
    end
  end


endmodule

//StreamFork_4 replaced by StreamFork_6

//StreamFifo_56 replaced by StreamFifo_53

//StreamFifo_55 replaced by StreamFifo_53

//StreamFifo_54 replaced by StreamFifo_53

module StreamFifo_53 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [127:0]  io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [127:0]  io_pop_payload_fragment,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [128:0]  logic_ram_spinal_port1;
  wire       [128:0]  t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [127:0]  logic_push_onRam_write_payload_data_fragment;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [127:0]  logic_pop_sync_readPort_rsp_fragment;
  wire       [128:0]  t_logic_pop_sync_readPort_rsp_last;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload_fragment;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [128:0] logic_ram [0:511];

  assign t_logic_ram_port = {logic_push_onRam_write_payload_data_fragment,logic_push_onRam_write_payload_data_last};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_fragment = io_push_payload_fragment;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_fragment = t_logic_pop_sync_readPort_rsp_last[128 : 1];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_fragment = logic_pop_sync_readPort_rsp_fragment;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_fragment = logic_pop_sync_readArbitation_translated_payload_fragment;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_52 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [0:0]    logic_ram_spinal_port1;
  wire       [0:0]    t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [0:0] logic_ram [0:511];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1[0];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_51 replaced by StreamFifo_48

//StreamFifo_50 replaced by StreamFifo_48

//StreamFifo_49 replaced by StreamFifo_48

module StreamFifo_48 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [9:0]    io_occupancy,
  output wire [9:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [9:0]    logic_ptr_push;
  reg        [9:0]    logic_ptr_pop;
  wire       [9:0]    logic_ptr_occupancy;
  wire       [9:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [9:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [9:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [8:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [8:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [8:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [8:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [8:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [9:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [9:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [9:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [127:0] logic_ram [0:511];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 10'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[9];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 10'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 10'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[9];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 10'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 10'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[8:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[8:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 10'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 10'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 10'h0;
      logic_ptr_pop <= 10'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      logic_ptr_fmax_value <= 10'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 10'h0;
      logic_fmaxAvail_value <= 10'h200;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 10'h200;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 10'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 10'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 10'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 10'h0;
        logic_ptr_pop <= 10'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 10'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 10'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 10'h200;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//SplitAxiDatamoverCmd_1 replaced by SplitAxiDatamoverCmd

module SplitAxiDatamoverCmd (
  input  wire          io_inCmd_valid,
  output wire          io_inCmd_ready,
  input  wire [71:0]   io_inCmd_payload,
  output wire          io_outCmd_0_valid,
  input  wire          io_outCmd_0_ready,
  output wire [71:0]   io_outCmd_0_payload,
  output wire          io_outCmd_1_valid,
  input  wire          io_outCmd_1_ready,
  output wire [71:0]   io_outCmd_1_payload,
  output wire          io_outCmd_2_valid,
  input  wire          io_outCmd_2_ready,
  output wire [71:0]   io_outCmd_2_payload,
  output wire          io_outCmd_3_valid,
  input  wire          io_outCmd_3_ready,
  output wire [71:0]   io_outCmd_3_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                forks_io_input_ready;
  wire                forks_io_outputs_0_valid;
  wire                forks_io_outputs_1_valid;
  wire                forks_io_outputs_2_valid;
  wire                forks_io_outputs_3_valid;
  wire       [63:0]   t_addr;
  wire       [7:0]    t_tag;
  reg        [21:0]   t_offsetSel;
  wire       [21:0]   t_offsetSel_1;
  wire       [21:0]   t_offsetSel_2;
  wire       [21:0]   t_offsetBase;
  wire       [31:0]   t_forkCmd_0_payload;
  wire       [31:0]   t_forkCmd_0_payload_1;
  wire       [22:0]   t_forkCmd_0_payload_2;
  wire       [31:0]   t_forkCmd_1_payload;
  wire       [31:0]   t_forkCmd_1_payload_1;
  wire       [22:0]   t_forkCmd_1_payload_2;
  wire       [31:0]   t_forkCmd_2_payload;
  wire       [31:0]   t_forkCmd_2_payload_1;
  wire       [22:0]   t_forkCmd_2_payload_2;
  wire       [31:0]   t_forkCmd_3_payload;
  wire       [31:0]   t_forkCmd_3_payload_1;
  wire       [22:0]   t_forkCmd_3_payload_2;
  wire       [31:0]   addr;
  wire       [22:0]   len;
  wire                inc;
  wire                eof;
  wire       [3:0]    tag;
  wire       [20:0]   splitLen;
  wire       [15:0]   offsetVec_1;
  wire       [10:0]   offsetVec_2;
  wire       [21:0]   offsetVec_4;
  wire       [21:0]   offsetVec_5;
  wire       [21:0]   offsetSel;
  wire       [21:0]   offsetBase;
  wire       [21:0]   offset_0;
  wire       [22:0]   offset_1;
  wire       [23:0]   offset_2;
  wire       [23:0]   offset_3;
  wire                forkCmd_0_valid;
  reg                 forkCmd_0_ready;
  wire       [71:0]   forkCmd_0_payload;
  wire                forkCmd_1_valid;
  reg                 forkCmd_1_ready;
  wire       [71:0]   forkCmd_1_payload;
  wire                forkCmd_2_valid;
  reg                 forkCmd_2_ready;
  wire       [71:0]   forkCmd_2_payload;
  wire                forkCmd_3_valid;
  reg                 forkCmd_3_ready;
  wire       [71:0]   forkCmd_3_payload;
  wire                forkCmd_0_m2sPipe_valid;
  wire                forkCmd_0_m2sPipe_ready;
  wire       [71:0]   forkCmd_0_m2sPipe_payload;
  reg                 forkCmd_0_rValid;
  reg        [71:0]   forkCmd_0_rData;
  wire                forkCmd_1_m2sPipe_valid;
  wire                forkCmd_1_m2sPipe_ready;
  wire       [71:0]   forkCmd_1_m2sPipe_payload;
  reg                 forkCmd_1_rValid;
  reg        [71:0]   forkCmd_1_rData;
  wire                forkCmd_2_m2sPipe_valid;
  wire                forkCmd_2_m2sPipe_ready;
  wire       [71:0]   forkCmd_2_m2sPipe_payload;
  reg                 forkCmd_2_rValid;
  reg        [71:0]   forkCmd_2_rData;
  wire                forkCmd_3_m2sPipe_valid;
  wire                forkCmd_3_m2sPipe_ready;
  wire       [71:0]   forkCmd_3_m2sPipe_payload;
  reg                 forkCmd_3_rValid;
  reg        [71:0]   forkCmd_3_rData;

  assign t_addr = io_inCmd_payload[63 : 0];
  assign t_tag = io_inCmd_payload[71 : 64];
  assign t_offsetSel_1 = {6'd0, offsetVec_1};
  assign t_offsetSel_2 = {11'd0, offsetVec_2};
  assign t_offsetBase = {1'd0, splitLen};
  assign t_forkCmd_0_payload = (t_forkCmd_0_payload_1 + addr);
  assign t_forkCmd_0_payload_1 = {10'd0, offset_0};
  assign t_forkCmd_0_payload_2 = {2'd0, splitLen};
  assign t_forkCmd_1_payload = (t_forkCmd_1_payload_1 + addr);
  assign t_forkCmd_1_payload_1 = {9'd0, offset_1};
  assign t_forkCmd_1_payload_2 = {2'd0, splitLen};
  assign t_forkCmd_2_payload = (t_forkCmd_2_payload_1 + addr);
  assign t_forkCmd_2_payload_1 = {8'd0, offset_2};
  assign t_forkCmd_2_payload_2 = {2'd0, splitLen};
  assign t_forkCmd_3_payload = (t_forkCmd_3_payload_1 + addr);
  assign t_forkCmd_3_payload_1 = {8'd0, offset_3};
  assign t_forkCmd_3_payload_2 = {2'd0, splitLen};
  StreamFork_6 forks (
    .io_input_valid     (io_inCmd_valid          ), //i
    .io_input_ready     (forks_io_input_ready    ), //o
    .io_outputs_0_valid (forks_io_outputs_0_valid), //o
    .io_outputs_0_ready (forkCmd_0_ready         ), //i
    .io_outputs_1_valid (forks_io_outputs_1_valid), //o
    .io_outputs_1_ready (forkCmd_1_ready         ), //i
    .io_outputs_2_valid (forks_io_outputs_2_valid), //o
    .io_outputs_2_ready (forkCmd_2_ready         ), //i
    .io_outputs_3_valid (forks_io_outputs_3_valid), //o
    .io_outputs_3_ready (forkCmd_3_ready         )  //i
  );
  always @(*) begin
    case(tag)
      4'b0000 : t_offsetSel = 22'h0;
      4'b0001 : t_offsetSel = t_offsetSel_1;
      4'b0010 : t_offsetSel = t_offsetSel_2;
      4'b0011 : t_offsetSel = 22'h0;
      4'b0100 : t_offsetSel = offsetVec_4;
      4'b0101 : t_offsetSel = offsetVec_5;
      4'b0110 : t_offsetSel = 22'h0;
      4'b0111 : t_offsetSel = 22'h0;
      4'b1000 : t_offsetSel = 22'h0;
      4'b1001 : t_offsetSel = 22'h0;
      4'b1010 : t_offsetSel = 22'h0;
      4'b1011 : t_offsetSel = 22'h0;
      4'b1100 : t_offsetSel = 22'h0;
      4'b1101 : t_offsetSel = 22'h0;
      4'b1110 : t_offsetSel = 22'h0;
      default : t_offsetSel = 22'h0;
    endcase
  end

  assign addr = t_addr[63 : 32];
  assign len = io_inCmd_payload[22 : 0];
  assign inc = io_inCmd_payload[23];
  assign eof = io_inCmd_payload[30];
  assign tag = t_tag[3 : 0];
  assign splitLen = len[22 : 2];
  assign offsetVec_1 = 16'h8000;
  assign offsetVec_2 = 11'h400;
  assign offsetVec_4 = 22'h2db000;
  assign offsetVec_5 = 22'h2db000;
  assign offsetSel = t_offsetSel;
  assign offsetBase = ((tag == 4'b0000) ? t_offsetBase : offsetSel);
  assign offset_0 = 22'h0;
  assign offset_1 = (offsetBase * 1'b1);
  assign offset_2 = (offsetBase * 2'b10);
  assign offset_3 = (offsetBase * 2'b11);
  assign io_inCmd_ready = forks_io_input_ready;
  assign forkCmd_0_valid = forks_io_outputs_0_valid;
  assign forkCmd_0_payload = {{{{{{{4'b0000,tag},t_forkCmd_0_payload},1'b0},eof},6'h0},inc},t_forkCmd_0_payload_2};
  always @(*) begin
    forkCmd_0_ready = forkCmd_0_m2sPipe_ready;
    if((! forkCmd_0_m2sPipe_valid)) begin
      forkCmd_0_ready = 1'b1;
    end
  end

  assign forkCmd_0_m2sPipe_valid = forkCmd_0_rValid;
  assign forkCmd_0_m2sPipe_payload = forkCmd_0_rData;
  assign io_outCmd_0_valid = forkCmd_0_m2sPipe_valid;
  assign forkCmd_0_m2sPipe_ready = io_outCmd_0_ready;
  assign io_outCmd_0_payload = forkCmd_0_m2sPipe_payload;
  assign forkCmd_1_valid = forks_io_outputs_1_valid;
  assign forkCmd_1_payload = {{{{{{{4'b0000,tag},t_forkCmd_1_payload},1'b0},eof},6'h0},inc},t_forkCmd_1_payload_2};
  always @(*) begin
    forkCmd_1_ready = forkCmd_1_m2sPipe_ready;
    if((! forkCmd_1_m2sPipe_valid)) begin
      forkCmd_1_ready = 1'b1;
    end
  end

  assign forkCmd_1_m2sPipe_valid = forkCmd_1_rValid;
  assign forkCmd_1_m2sPipe_payload = forkCmd_1_rData;
  assign io_outCmd_1_valid = forkCmd_1_m2sPipe_valid;
  assign forkCmd_1_m2sPipe_ready = io_outCmd_1_ready;
  assign io_outCmd_1_payload = forkCmd_1_m2sPipe_payload;
  assign forkCmd_2_valid = forks_io_outputs_2_valid;
  assign forkCmd_2_payload = {{{{{{{4'b0000,tag},t_forkCmd_2_payload},1'b0},eof},6'h0},inc},t_forkCmd_2_payload_2};
  always @(*) begin
    forkCmd_2_ready = forkCmd_2_m2sPipe_ready;
    if((! forkCmd_2_m2sPipe_valid)) begin
      forkCmd_2_ready = 1'b1;
    end
  end

  assign forkCmd_2_m2sPipe_valid = forkCmd_2_rValid;
  assign forkCmd_2_m2sPipe_payload = forkCmd_2_rData;
  assign io_outCmd_2_valid = forkCmd_2_m2sPipe_valid;
  assign forkCmd_2_m2sPipe_ready = io_outCmd_2_ready;
  assign io_outCmd_2_payload = forkCmd_2_m2sPipe_payload;
  assign forkCmd_3_valid = forks_io_outputs_3_valid;
  assign forkCmd_3_payload = {{{{{{{4'b0000,tag},t_forkCmd_3_payload},1'b0},eof},6'h0},inc},t_forkCmd_3_payload_2};
  always @(*) begin
    forkCmd_3_ready = forkCmd_3_m2sPipe_ready;
    if((! forkCmd_3_m2sPipe_valid)) begin
      forkCmd_3_ready = 1'b1;
    end
  end

  assign forkCmd_3_m2sPipe_valid = forkCmd_3_rValid;
  assign forkCmd_3_m2sPipe_payload = forkCmd_3_rData;
  assign io_outCmd_3_valid = forkCmd_3_m2sPipe_valid;
  assign forkCmd_3_m2sPipe_ready = io_outCmd_3_ready;
  assign io_outCmd_3_payload = forkCmd_3_m2sPipe_payload;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      forkCmd_0_rValid <= 1'b0;
      forkCmd_1_rValid <= 1'b0;
      forkCmd_2_rValid <= 1'b0;
      forkCmd_3_rValid <= 1'b0;
    end else begin
      if(forkCmd_0_ready) begin
        forkCmd_0_rValid <= forkCmd_0_valid;
      end
      if(forkCmd_1_ready) begin
        forkCmd_1_rValid <= forkCmd_1_valid;
      end
      if(forkCmd_2_ready) begin
        forkCmd_2_rValid <= forkCmd_2_valid;
      end
      if(forkCmd_3_ready) begin
        forkCmd_3_rValid <= forkCmd_3_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(forkCmd_0_ready) begin
      forkCmd_0_rData <= forkCmd_0_payload;
    end
    if(forkCmd_1_ready) begin
      forkCmd_1_rData <= forkCmd_1_payload;
    end
    if(forkCmd_2_ready) begin
      forkCmd_2_rData <= forkCmd_2_payload;
    end
    if(forkCmd_3_ready) begin
      forkCmd_3_rData <= forkCmd_3_payload;
    end
  end


endmodule

module StreamFifo_59 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [71:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [71:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [71:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [71:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [71:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [71:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [71:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_58 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_57 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [5:0] logic_ram [0:63];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamMux_37 (
  input  wire [2:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [5:0]    io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [5:0]    io_inputs_1_payload,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire [5:0]    io_inputs_2_payload,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire [5:0]    io_inputs_3_payload,
  input  wire          io_inputs_4_valid,
  output wire          io_inputs_4_ready,
  input  wire [5:0]    io_inputs_4_payload,
  input  wire          io_inputs_5_valid,
  output wire          io_inputs_5_ready,
  input  wire [5:0]    io_inputs_5_payload,
  input  wire          io_inputs_6_valid,
  output wire          io_inputs_6_ready,
  input  wire [5:0]    io_inputs_6_payload,
  input  wire          io_inputs_7_valid,
  output wire          io_inputs_7_ready,
  input  wire [5:0]    io_inputs_7_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [5:0]    io_output_payload
);

  reg                 t_io_output_valid;
  reg        [5:0]    t_io_output_payload;

  always @(*) begin
    case(io_select)
      3'b000 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      3'b001 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
      3'b010 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload = io_inputs_2_payload;
      end
      3'b011 : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload = io_inputs_3_payload;
      end
      3'b100 : begin
        t_io_output_valid = io_inputs_4_valid;
        t_io_output_payload = io_inputs_4_payload;
      end
      3'b101 : begin
        t_io_output_valid = io_inputs_5_valid;
        t_io_output_payload = io_inputs_5_payload;
      end
      3'b110 : begin
        t_io_output_valid = io_inputs_6_valid;
        t_io_output_payload = io_inputs_6_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_7_valid;
        t_io_output_payload = io_inputs_7_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 3'b000) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 3'b001) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 3'b010) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 3'b011) && io_output_ready);
  assign io_inputs_4_ready = ((io_select == 3'b100) && io_output_ready);
  assign io_inputs_5_ready = ((io_select == 3'b101) && io_output_ready);
  assign io_inputs_6_ready = ((io_select == 3'b110) && io_output_ready);
  assign io_inputs_7_ready = ((io_select == 3'b111) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

module StreamMux_36 (
  input  wire [2:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [71:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [71:0]   io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [71:0]   io_inputs_2_payload_fragment,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire          io_inputs_3_payload_last,
  input  wire [71:0]   io_inputs_3_payload_fragment,
  input  wire          io_inputs_4_valid,
  output wire          io_inputs_4_ready,
  input  wire          io_inputs_4_payload_last,
  input  wire [71:0]   io_inputs_4_payload_fragment,
  input  wire          io_inputs_5_valid,
  output wire          io_inputs_5_ready,
  input  wire          io_inputs_5_payload_last,
  input  wire [71:0]   io_inputs_5_payload_fragment,
  input  wire          io_inputs_6_valid,
  output wire          io_inputs_6_ready,
  input  wire          io_inputs_6_payload_last,
  input  wire [71:0]   io_inputs_6_payload_fragment,
  input  wire          io_inputs_7_valid,
  output wire          io_inputs_7_ready,
  input  wire          io_inputs_7_payload_last,
  input  wire [71:0]   io_inputs_7_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [71:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [71:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      3'b000 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      3'b001 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      3'b010 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
      3'b011 : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload_last = io_inputs_3_payload_last;
        t_io_output_payload_fragment = io_inputs_3_payload_fragment;
      end
      3'b100 : begin
        t_io_output_valid = io_inputs_4_valid;
        t_io_output_payload_last = io_inputs_4_payload_last;
        t_io_output_payload_fragment = io_inputs_4_payload_fragment;
      end
      3'b101 : begin
        t_io_output_valid = io_inputs_5_valid;
        t_io_output_payload_last = io_inputs_5_payload_last;
        t_io_output_payload_fragment = io_inputs_5_payload_fragment;
      end
      3'b110 : begin
        t_io_output_valid = io_inputs_6_valid;
        t_io_output_payload_last = io_inputs_6_payload_last;
        t_io_output_payload_fragment = io_inputs_6_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_7_valid;
        t_io_output_payload_last = io_inputs_7_payload_last;
        t_io_output_payload_fragment = io_inputs_7_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 3'b000) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 3'b001) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 3'b010) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 3'b011) && io_output_ready);
  assign io_inputs_4_ready = ((io_select == 3'b100) && io_output_ready);
  assign io_inputs_5_ready = ((io_select == 3'b101) && io_output_ready);
  assign io_inputs_6_ready = ((io_select == 3'b110) && io_output_ready);
  assign io_inputs_7_ready = ((io_select == 3'b111) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

//StreamMux_35 replaced by StreamMux_34

module StreamMux_34 (
  input  wire [1:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [71:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [71:0]   io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [71:0]   io_inputs_2_payload_fragment,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire          io_inputs_3_payload_last,
  input  wire [71:0]   io_inputs_3_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [71:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [71:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      2'b00 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      2'b01 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      2'b10 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload_last = io_inputs_3_payload_last;
        t_io_output_payload_fragment = io_inputs_3_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 2'b00) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 2'b01) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 2'b10) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 2'b11) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

module StreamMux_33 (
  input  wire [2:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [71:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [71:0]   io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [71:0]   io_inputs_2_payload_fragment,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire          io_inputs_3_payload_last,
  input  wire [71:0]   io_inputs_3_payload_fragment,
  input  wire          io_inputs_4_valid,
  output wire          io_inputs_4_ready,
  input  wire          io_inputs_4_payload_last,
  input  wire [71:0]   io_inputs_4_payload_fragment,
  input  wire          io_inputs_5_valid,
  output wire          io_inputs_5_ready,
  input  wire          io_inputs_5_payload_last,
  input  wire [71:0]   io_inputs_5_payload_fragment,
  input  wire          io_inputs_6_valid,
  output wire          io_inputs_6_ready,
  input  wire          io_inputs_6_payload_last,
  input  wire [71:0]   io_inputs_6_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [71:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [71:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      3'b000 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      3'b001 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      3'b010 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
      3'b011 : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload_last = io_inputs_3_payload_last;
        t_io_output_payload_fragment = io_inputs_3_payload_fragment;
      end
      3'b100 : begin
        t_io_output_valid = io_inputs_4_valid;
        t_io_output_payload_last = io_inputs_4_payload_last;
        t_io_output_payload_fragment = io_inputs_4_payload_fragment;
      end
      3'b101 : begin
        t_io_output_valid = io_inputs_5_valid;
        t_io_output_payload_last = io_inputs_5_payload_last;
        t_io_output_payload_fragment = io_inputs_5_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_6_valid;
        t_io_output_payload_last = io_inputs_6_payload_last;
        t_io_output_payload_fragment = io_inputs_6_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 3'b000) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 3'b001) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 3'b010) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 3'b011) && io_output_ready);
  assign io_inputs_4_ready = ((io_select == 3'b100) && io_output_ready);
  assign io_inputs_5_ready = ((io_select == 3'b101) && io_output_ready);
  assign io_inputs_6_ready = ((io_select == 3'b110) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

module StreamMux_32 (
  input  wire [2:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [71:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [71:0]   io_inputs_1_payload_fragment,
  input  wire          io_inputs_2_valid,
  output wire          io_inputs_2_ready,
  input  wire          io_inputs_2_payload_last,
  input  wire [71:0]   io_inputs_2_payload_fragment,
  input  wire          io_inputs_3_valid,
  output wire          io_inputs_3_ready,
  input  wire          io_inputs_3_payload_last,
  input  wire [71:0]   io_inputs_3_payload_fragment,
  input  wire          io_inputs_4_valid,
  output wire          io_inputs_4_ready,
  input  wire          io_inputs_4_payload_last,
  input  wire [71:0]   io_inputs_4_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [71:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [71:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      3'b000 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      3'b001 : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
      3'b010 : begin
        t_io_output_valid = io_inputs_2_valid;
        t_io_output_payload_last = io_inputs_2_payload_last;
        t_io_output_payload_fragment = io_inputs_2_payload_fragment;
      end
      3'b011 : begin
        t_io_output_valid = io_inputs_3_valid;
        t_io_output_payload_last = io_inputs_3_payload_last;
        t_io_output_payload_fragment = io_inputs_3_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_4_valid;
        t_io_output_payload_last = io_inputs_4_payload_last;
        t_io_output_payload_fragment = io_inputs_4_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 3'b000) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 3'b001) && io_output_ready);
  assign io_inputs_2_ready = ((io_select == 3'b010) && io_output_ready);
  assign io_inputs_3_ready = ((io_select == 3'b011) && io_output_ready);
  assign io_inputs_4_ready = ((io_select == 3'b100) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

//StreamMux_31 replaced by StreamMux_30

module StreamDemux_11 (
  input  wire [0:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  input  wire          io_input_payload_last,
  input  wire [71:0]   io_input_payload_fragment,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire          io_outputs_0_payload_last,
  output wire [71:0]   io_outputs_0_payload_fragment,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output wire          io_outputs_1_payload_last,
  output wire [71:0]   io_outputs_1_payload_fragment
);

  wire                t_when;
  wire                t_when_1;

  assign t_when = (1'b0 != io_select);
  assign t_when_1 = (1'b1 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
  end

  assign io_outputs_0_payload_last = io_input_payload_last;
  assign io_outputs_0_payload_fragment = io_input_payload_fragment;
  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  assign io_outputs_1_payload_last = io_input_payload_last;
  assign io_outputs_1_payload_fragment = io_input_payload_fragment;
  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end


endmodule

module StreamFifoPipe_3 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [0:0]    logic_ram_spinal_port1;
  wire       [0:0]    t_logic_ram_port;
  reg                 t_1;
  wire                popOut_valid;
  reg                 popOut_ready;
  wire                popOut_payload;
  wire                popOut_m2sPipe_valid;
  wire                popOut_m2sPipe_ready;
  wire                popOut_m2sPipe_payload;
  reg                 popOut_rValid;
  reg                 popOut_rData;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [0:0] logic_ram [0:4095];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  always @(*) begin
    popOut_ready = popOut_m2sPipe_ready;
    if((! popOut_m2sPipe_valid)) begin
      popOut_ready = 1'b1;
    end
  end

  assign popOut_m2sPipe_valid = popOut_rValid;
  assign popOut_m2sPipe_payload = popOut_rData;
  assign io_pop_valid = popOut_m2sPipe_valid;
  assign popOut_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload = popOut_m2sPipe_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1[0];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      popOut_rValid <= 1'b0;
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if(popOut_ready) begin
        popOut_rValid <= popOut_valid;
      end
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(popOut_ready) begin
      popOut_rData <= popOut_payload;
    end
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifoPipe_2 replaced by StreamFifoPipe_9

module StreamMux_30 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [71:0]   io_inputs_0_payload_fragment,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [71:0]   io_inputs_1_payload_fragment,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [71:0]   io_output_payload_fragment
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [71:0]   t_io_output_payload_fragment;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_fragment = io_inputs_0_payload_fragment;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_fragment = io_inputs_1_payload_fragment;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_fragment = t_io_output_payload_fragment;

endmodule

//StreamFifo_60 replaced by StreamFifo_61

module StreamFifo_61 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [63:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [63:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [63:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [63:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [63:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [63:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "ultra" *) reg [63:0] logic_ram [0:4095];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_62 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [5:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamMux_38 replaced by StreamMux_40

module StreamFifo_64 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_tdata,
  input  wire [5:0]    io_push_payload_tuser,
  input  wire [0:0]    io_push_payload_tdest,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_tdata,
  output wire [5:0]    io_pop_payload_tuser,
  output wire [0:0]    io_pop_payload_tdest,
  input  wire          io_flush,
  output wire [14:0]   io_occupancy,
  output wire [14:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [23:0]   logic_ram_spinal_port1;
  wire       [23:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [14:0]   logic_ptr_push;
  reg        [14:0]   logic_ptr_pop;
  wire       [14:0]   logic_ptr_occupancy;
  wire       [14:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [14:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [13:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [15:0]   logic_push_onRam_write_payload_data_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_data_tuser;
  wire       [0:0]    logic_push_onRam_write_payload_data_tdest;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [13:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [13:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [13:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [15:0]   logic_pop_sync_readPort_rsp_tdata;
  wire       [5:0]    logic_pop_sync_readPort_rsp_tuser;
  wire       [0:0]    logic_pop_sync_readPort_rsp_tdest;
  wire       [23:0]   t_logic_pop_sync_readPort_rsp_last;
  wire       [22:0]   t_logic_pop_sync_readPort_rsp_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_tuser;
  wire       [0:0]    logic_pop_sync_readArbitation_translated_payload_tdest;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [14:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [14:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [23:0] logic_ram [0:16383];

  assign t_logic_ram_port = {{logic_push_onRam_write_payload_data_tdest,{logic_push_onRam_write_payload_data_tuser,logic_push_onRam_write_payload_data_tdata}},logic_push_onRam_write_payload_data_last};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[14];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 15'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[14];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 15'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 15'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[13:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_tdata = io_push_payload_tdata;
  assign logic_push_onRam_write_payload_data_tuser = io_push_payload_tuser;
  assign logic_push_onRam_write_payload_data_tdest = io_push_payload_tdest;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[13:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign t_logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_last[23 : 1];
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_tdata[15 : 0];
  assign logic_pop_sync_readPort_rsp_tuser = t_logic_pop_sync_readPort_rsp_tdata[21 : 16];
  assign logic_pop_sync_readPort_rsp_tdest = t_logic_pop_sync_readPort_rsp_tdata[22 : 22];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_tdata = logic_pop_sync_readPort_rsp_tdata;
  assign logic_pop_sync_readArbitation_translated_payload_tuser = logic_pop_sync_readPort_rsp_tuser;
  assign logic_pop_sync_readArbitation_translated_payload_tdest = logic_pop_sync_readPort_rsp_tdest;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_tdata = logic_pop_sync_readArbitation_translated_payload_tdata;
  assign io_pop_payload_tuser = logic_pop_sync_readArbitation_translated_payload_tuser;
  assign io_pop_payload_tdest = logic_pop_sync_readArbitation_translated_payload_tdest;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 15'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 15'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 15'h0;
      logic_ptr_pop <= 15'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      logic_ptr_fmax_value <= 15'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 15'h0;
      logic_fmaxAvail_value <= 15'h4000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 15'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 15'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 15'h0;
        logic_ptr_pop <= 15'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 15'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 15'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 15'h4000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_63 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_tdata,
  input  wire [5:0]    io_push_payload_tuser,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_tdata,
  output wire [5:0]    io_pop_payload_tuser,
  input  wire          io_flush,
  output wire [14:0]   io_occupancy,
  output wire [14:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [22:0]   logic_ram_spinal_port1;
  wire       [22:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [14:0]   logic_ptr_push;
  reg        [14:0]   logic_ptr_pop;
  wire       [14:0]   logic_ptr_occupancy;
  wire       [14:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [14:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [13:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [15:0]   logic_push_onRam_write_payload_data_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_data_tuser;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [13:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [13:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [13:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [15:0]   logic_pop_sync_readPort_rsp_tdata;
  wire       [5:0]    logic_pop_sync_readPort_rsp_tuser;
  wire       [22:0]   t_logic_pop_sync_readPort_rsp_last;
  wire       [21:0]   t_logic_pop_sync_readPort_rsp_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_tuser;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [14:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [14:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [22:0] logic_ram [0:16383];

  assign t_logic_ram_port = {{logic_push_onRam_write_payload_data_tuser,logic_push_onRam_write_payload_data_tdata},logic_push_onRam_write_payload_data_last};
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[14];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 15'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[14];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 15'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 15'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[13:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_tdata = io_push_payload_tdata;
  assign logic_push_onRam_write_payload_data_tuser = io_push_payload_tuser;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[13:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign t_logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_last[22 : 1];
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_tdata[15 : 0];
  assign logic_pop_sync_readPort_rsp_tuser = t_logic_pop_sync_readPort_rsp_tdata[21 : 16];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_tdata = logic_pop_sync_readPort_rsp_tdata;
  assign logic_pop_sync_readArbitation_translated_payload_tuser = logic_pop_sync_readPort_rsp_tuser;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_tdata = logic_pop_sync_readArbitation_translated_payload_tdata;
  assign io_pop_payload_tuser = logic_pop_sync_readArbitation_translated_payload_tuser;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 15'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 15'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 15'h0;
      logic_ptr_pop <= 15'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      logic_ptr_fmax_value <= 15'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 15'h0;
      logic_fmaxAvail_value <= 15'h4000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 15'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 15'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 15'h0;
        logic_ptr_pop <= 15'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 15'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 15'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 15'h4000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//AddEngineNew replaced by AddEngineNew_3

//MulEngine replaced by MulEngine_3

//AddEngineNew_1 replaced by AddEngineNew_3

//MulEngine_1 replaced by MulEngine_3

//AddEngineNew_2 replaced by AddEngineNew_3

//MulEngine_2 replaced by MulEngine_3

module AddEngineNew_3 (
  input  wire          mulRes_tvalid,
  output wire          mulRes_tready,
  input  wire [511:0]  mulRes_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [511:0]  resAdd_tdata,
  output wire          vecOut_tvalid,
  output wire [511:0]  vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire          scalarOut_tlast,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    postCfgTag,
  input  wire          popVldNext,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifoCtrl_io_push_valid;
  wire       [511:0]  fifoCtrl_io_push_payload;
  wire                fifoCtrl_io_pop_ready;
  wire       [511:0]  fifoCtrl_rdPort_rsp;
  reg        [511:0]  t_1_spinal_port1;
  wire                fifoCtrl_io_push_ready;
  wire                fifoCtrl_io_pop_valid;
  wire       [511:0]  fifoCtrl_io_pop_payload;
  wire       [5:0]    fifoCtrl_io_occupancy;
  wire       [5:0]    fifoCtrl_io_availability;
  wire                fifoCtrl_rdPort_cmd_valid;
  wire       [4:0]    fifoCtrl_rdPort_cmd_payload;
  wire                fifoCtrl_wrPort_valid;
  wire       [4:0]    fifoCtrl_wrPort_payload_address;
  wire       [511:0]  fifoCtrl_wrPort_payload_data;
  wire                addLogic_a_0_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_0_add_ip_m_axis_result_tdata;
  wire                addLogic_a_1_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_1_add_ip_m_axis_result_tdata;
  wire                addLogic_a_2_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_2_add_ip_m_axis_result_tdata;
  wire                addLogic_a_3_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_3_add_ip_m_axis_result_tdata;
  wire                addLogic_a_4_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_4_add_ip_m_axis_result_tdata;
  wire                addLogic_a_5_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_5_add_ip_m_axis_result_tdata;
  wire                addLogic_a_6_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_6_add_ip_m_axis_result_tdata;
  wire                addLogic_a_7_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_7_add_ip_m_axis_result_tdata;
  wire                addLogic_a_8_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_8_add_ip_m_axis_result_tdata;
  wire                addLogic_a_9_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_9_add_ip_m_axis_result_tdata;
  wire                addLogic_a_10_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_10_add_ip_m_axis_result_tdata;
  wire                addLogic_a_11_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_11_add_ip_m_axis_result_tdata;
  wire                addLogic_a_12_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_12_add_ip_m_axis_result_tdata;
  wire                addLogic_a_13_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_13_add_ip_m_axis_result_tdata;
  wire                addLogic_a_14_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_14_add_ip_m_axis_result_tdata;
  wire                addLogic_a_15_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_15_add_ip_m_axis_result_tdata;
  wire                addLogic_a_16_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_16_add_ip_m_axis_result_tdata;
  wire                addLogic_a_17_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_17_add_ip_m_axis_result_tdata;
  wire                addLogic_a_18_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_18_add_ip_m_axis_result_tdata;
  wire                addLogic_a_19_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_19_add_ip_m_axis_result_tdata;
  wire                addLogic_a_20_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_20_add_ip_m_axis_result_tdata;
  wire                addLogic_a_21_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_21_add_ip_m_axis_result_tdata;
  wire                addLogic_a_22_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_22_add_ip_m_axis_result_tdata;
  wire                addLogic_a_23_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_23_add_ip_m_axis_result_tdata;
  wire                addLogic_a_24_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_24_add_ip_m_axis_result_tdata;
  wire                addLogic_a_25_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_25_add_ip_m_axis_result_tdata;
  wire                addLogic_a_26_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_26_add_ip_m_axis_result_tdata;
  wire                addLogic_a_27_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_27_add_ip_m_axis_result_tdata;
  wire                addLogic_a_28_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_28_add_ip_m_axis_result_tdata;
  wire                addLogic_a_29_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_29_add_ip_m_axis_result_tdata;
  wire                addLogic_a_30_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_30_add_ip_m_axis_result_tdata;
  wire                addLogic_a_31_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_31_add_ip_m_axis_result_tdata;
  wire       [15:0]   t_fAxpyCond;
  wire       [15:0]   t_pAxpyCond;
  reg        [15:0]   t_addLogic_a_0_payload;
  reg        [15:0]   t_addLogic_b_0_payload;
  reg        [15:0]   t_addLogic_a_1_payload;
  reg        [15:0]   t_addLogic_b_1_payload;
  reg        [15:0]   t_addLogic_a_2_payload;
  reg        [15:0]   t_addLogic_b_2_payload;
  reg        [15:0]   t_addLogic_a_3_payload;
  reg        [15:0]   t_addLogic_b_3_payload;
  reg        [15:0]   t_addLogic_a_4_payload;
  reg        [15:0]   t_addLogic_b_4_payload;
  reg        [15:0]   t_addLogic_a_5_payload;
  reg        [15:0]   t_addLogic_b_5_payload;
  reg        [15:0]   t_addLogic_a_6_payload;
  reg        [15:0]   t_addLogic_b_6_payload;
  reg        [15:0]   t_addLogic_a_7_payload;
  reg        [15:0]   t_addLogic_b_7_payload;
  reg        [15:0]   t_addLogic_a_8_payload;
  reg        [15:0]   t_addLogic_b_8_payload;
  reg        [15:0]   t_addLogic_a_9_payload;
  reg        [15:0]   t_addLogic_b_9_payload;
  reg        [15:0]   t_addLogic_a_10_payload;
  reg        [15:0]   t_addLogic_b_10_payload;
  reg        [15:0]   t_addLogic_a_11_payload;
  reg        [15:0]   t_addLogic_b_11_payload;
  reg        [15:0]   t_addLogic_a_12_payload;
  reg        [15:0]   t_addLogic_b_12_payload;
  reg        [15:0]   t_addLogic_a_13_payload;
  reg        [15:0]   t_addLogic_b_13_payload;
  reg        [15:0]   t_addLogic_a_14_payload;
  reg        [15:0]   t_addLogic_b_14_payload;
  reg        [15:0]   t_addLogic_a_15_payload;
  reg        [15:0]   t_addLogic_b_15_payload;
  reg        [15:0]   t_addLogic_a_16_payload;
  reg        [15:0]   t_addLogic_b_16_payload;
  reg        [15:0]   t_addLogic_a_17_payload;
  reg        [15:0]   t_addLogic_b_17_payload;
  reg        [15:0]   t_addLogic_a_18_payload;
  reg        [15:0]   t_addLogic_b_18_payload;
  reg        [15:0]   t_addLogic_a_19_payload;
  reg        [15:0]   t_addLogic_b_19_payload;
  reg        [15:0]   t_addLogic_a_20_payload;
  reg        [15:0]   t_addLogic_b_20_payload;
  reg        [15:0]   t_addLogic_a_21_payload;
  reg        [15:0]   t_addLogic_b_21_payload;
  reg        [15:0]   t_addLogic_a_22_payload;
  reg        [15:0]   t_addLogic_b_22_payload;
  reg        [15:0]   t_addLogic_a_23_payload;
  reg        [15:0]   t_addLogic_b_23_payload;
  reg        [15:0]   t_addLogic_a_24_payload;
  reg        [15:0]   t_addLogic_b_24_payload;
  reg        [15:0]   t_addLogic_a_25_payload;
  reg        [15:0]   t_addLogic_b_25_payload;
  reg        [15:0]   t_addLogic_a_26_payload;
  reg        [15:0]   t_addLogic_b_26_payload;
  reg        [15:0]   t_addLogic_a_27_payload;
  reg        [15:0]   t_addLogic_b_27_payload;
  reg        [15:0]   t_addLogic_a_28_payload;
  reg        [15:0]   t_addLogic_b_28_payload;
  reg        [15:0]   t_addLogic_a_29_payload;
  reg        [15:0]   t_addLogic_b_29_payload;
  reg        [15:0]   t_addLogic_a_30_payload;
  reg        [15:0]   t_addLogic_b_30_payload;
  reg        [15:0]   t_addLogic_a_31_payload;
  reg        [15:0]   t_addLogic_b_31_payload;
  wire       [255:0]  t_io_push_payload;
  wire       [255:0]  t_vecOut_tdata;
  wire       [15:0]   t_t_dotCtrl_mulResCntOvf_0;
  wire       [7:0]    t_dotCtrl_accCntOvf;
  wire       [15:0]   t_dotCtrl_accCntOvf_1;
  wire       [15:0]   t_t_fAxpyCtrl_mulResCntOvf_0;
  wire                t_when;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_2;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_3;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_4;
  reg                 t_io_push_valid;
  reg                 t_io_pop_ready;
  reg        [1:0]    t_aSelNext;
  reg        [1:0]    t_bSelNext;
  reg                 mulResFire;
  wire                mulResFireNext;
  wire       [5:0]    tag;
  reg        [5:0]    tag_delay_1;
  reg        [5:0]    tag_delay_2;
  reg        [5:0]    tag_delay_3;
  reg        [5:0]    tag_delay_4;
  reg        [5:0]    tag_delay_5;
  reg        [5:0]    tag_delay_6;
  reg        [5:0]    tag_delay_7;
  reg        [5:0]    tag_delay_8;
  reg        [5:0]    tag_delay_9;
  reg        [5:0]    tag_delay_10;
  reg        [5:0]    tag_delay_11;
  reg        [5:0]    tag_delay_12;
  reg        [5:0]    tag_delay_13;
  reg        [5:0]    tag_delay_14;
  reg        [5:0]    tag_delay_15;
  reg        [5:0]    tag_delay_16;
  reg        [5:0]    tag_delay_17;
  reg        [5:0]    tag_delay_18;
  reg        [5:0]    tag_delay_19;
  reg        [5:0]    tag_delay_20;
  reg        [5:0]    tag_delay_21;
  reg        [5:0]    tagReduceDly;
  reg        [5:0]    tag_delay_1_1;
  reg        [5:0]    tag_delay_2_1;
  reg        [5:0]    tag_delay_3_1;
  reg        [5:0]    tag_delay_4_1;
  reg        [5:0]    tag_delay_5_1;
  reg        [5:0]    tagAddDly;
  wire                dotCond;
  wire                fAxpyCond;
  wire                pAxpyCond;
  reg                 ret_0_valid;
  wire                ret_0_ready;
  wire       [31:0]   ret_0_payload;
  reg                 ret_1_valid;
  wire                ret_1_ready;
  wire       [31:0]   ret_1_payload;
  reg                 ret_2_valid;
  wire                ret_2_ready;
  wire       [31:0]   ret_2_payload;
  wire       [1:0]    addLogic_aSel;
  wire       [1:0]    addLogic_bSel;
  wire       [15:0]   addLogic_mul_0;
  wire       [15:0]   addLogic_mul_1;
  wire       [15:0]   addLogic_mul_2;
  wire       [15:0]   addLogic_mul_3;
  wire       [15:0]   addLogic_mul_4;
  wire       [15:0]   addLogic_mul_5;
  wire       [15:0]   addLogic_mul_6;
  wire       [15:0]   addLogic_mul_7;
  wire       [15:0]   addLogic_mul_8;
  wire       [15:0]   addLogic_mul_9;
  wire       [15:0]   addLogic_mul_10;
  wire       [15:0]   addLogic_mul_11;
  wire       [15:0]   addLogic_mul_12;
  wire       [15:0]   addLogic_mul_13;
  wire       [15:0]   addLogic_mul_14;
  wire       [15:0]   addLogic_mul_15;
  wire       [15:0]   addLogic_mul_16;
  wire       [15:0]   addLogic_mul_17;
  wire       [15:0]   addLogic_mul_18;
  wire       [15:0]   addLogic_mul_19;
  wire       [15:0]   addLogic_mul_20;
  wire       [15:0]   addLogic_mul_21;
  wire       [15:0]   addLogic_mul_22;
  wire       [15:0]   addLogic_mul_23;
  wire       [15:0]   addLogic_mul_24;
  wire       [15:0]   addLogic_mul_25;
  wire       [15:0]   addLogic_mul_26;
  wire       [15:0]   addLogic_mul_27;
  wire       [15:0]   addLogic_mul_28;
  wire       [15:0]   addLogic_mul_29;
  wire       [15:0]   addLogic_mul_30;
  wire       [15:0]   addLogic_mul_31;
  wire       [15:0]   addLogic_psum_0;
  wire       [15:0]   addLogic_psum_1;
  wire       [15:0]   addLogic_psum_2;
  wire       [15:0]   addLogic_psum_3;
  wire       [15:0]   addLogic_psum_4;
  wire       [15:0]   addLogic_psum_5;
  wire       [15:0]   addLogic_psum_6;
  wire       [15:0]   addLogic_psum_7;
  wire       [15:0]   addLogic_psum_8;
  wire       [15:0]   addLogic_psum_9;
  wire       [15:0]   addLogic_psum_10;
  wire       [15:0]   addLogic_psum_11;
  wire       [15:0]   addLogic_psum_12;
  wire       [15:0]   addLogic_psum_13;
  wire       [15:0]   addLogic_psum_14;
  wire       [15:0]   addLogic_psum_15;
  wire       [15:0]   addLogic_psum_16;
  wire       [15:0]   addLogic_psum_17;
  wire       [15:0]   addLogic_psum_18;
  wire       [15:0]   addLogic_psum_19;
  wire       [15:0]   addLogic_psum_20;
  wire       [15:0]   addLogic_psum_21;
  wire       [15:0]   addLogic_psum_22;
  wire       [15:0]   addLogic_psum_23;
  wire       [15:0]   addLogic_psum_24;
  wire       [15:0]   addLogic_psum_25;
  wire       [15:0]   addLogic_psum_26;
  wire       [15:0]   addLogic_psum_27;
  wire       [15:0]   addLogic_psum_28;
  wire       [15:0]   addLogic_psum_29;
  wire       [15:0]   addLogic_psum_30;
  wire       [15:0]   addLogic_psum_31;
  wire       [15:0]   addLogic_psumDly_0;
  wire       [15:0]   addLogic_psumDly_1;
  wire       [15:0]   addLogic_psumDly_2;
  wire       [15:0]   addLogic_psumDly_3;
  wire       [15:0]   addLogic_psumDly_4;
  wire       [15:0]   addLogic_psumDly_5;
  wire       [15:0]   addLogic_psumDly_6;
  wire       [15:0]   addLogic_psumDly_7;
  wire       [15:0]   addLogic_psumDly_8;
  wire       [15:0]   addLogic_psumDly_9;
  wire       [15:0]   addLogic_psumDly_10;
  wire       [15:0]   addLogic_psumDly_11;
  wire       [15:0]   addLogic_psumDly_12;
  wire       [15:0]   addLogic_psumDly_13;
  wire       [15:0]   addLogic_psumDly_14;
  wire       [15:0]   addLogic_psumDly_15;
  wire       [15:0]   addLogic_psumDly_16;
  wire       [15:0]   addLogic_psumDly_17;
  wire       [15:0]   addLogic_psumDly_18;
  wire       [15:0]   addLogic_psumDly_19;
  wire       [15:0]   addLogic_psumDly_20;
  wire       [15:0]   addLogic_psumDly_21;
  wire       [15:0]   addLogic_psumDly_22;
  wire       [15:0]   addLogic_psumDly_23;
  wire       [15:0]   addLogic_psumDly_24;
  wire       [15:0]   addLogic_psumDly_25;
  wire       [15:0]   addLogic_psumDly_26;
  wire       [15:0]   addLogic_psumDly_27;
  wire       [15:0]   addLogic_psumDly_28;
  wire       [15:0]   addLogic_psumDly_29;
  wire       [15:0]   addLogic_psumDly_30;
  wire       [15:0]   addLogic_psumDly_31;
  wire       [15:0]   addLogic_res_0;
  wire       [15:0]   addLogic_res_1;
  wire       [15:0]   addLogic_res_2;
  wire       [15:0]   addLogic_res_3;
  wire       [15:0]   addLogic_res_4;
  wire       [15:0]   addLogic_res_5;
  wire       [15:0]   addLogic_res_6;
  wire       [15:0]   addLogic_res_7;
  wire       [15:0]   addLogic_res_8;
  wire       [15:0]   addLogic_res_9;
  wire       [15:0]   addLogic_res_10;
  wire       [15:0]   addLogic_res_11;
  wire       [15:0]   addLogic_res_12;
  wire       [15:0]   addLogic_res_13;
  wire       [15:0]   addLogic_res_14;
  wire       [15:0]   addLogic_res_15;
  wire       [15:0]   addLogic_res_16;
  wire       [15:0]   addLogic_res_17;
  wire       [15:0]   addLogic_res_18;
  wire       [15:0]   addLogic_res_19;
  wire       [15:0]   addLogic_res_20;
  wire       [15:0]   addLogic_res_21;
  wire       [15:0]   addLogic_res_22;
  wire       [15:0]   addLogic_res_23;
  wire       [15:0]   addLogic_res_24;
  wire       [15:0]   addLogic_res_25;
  wire       [15:0]   addLogic_res_26;
  wire       [15:0]   addLogic_res_27;
  wire       [15:0]   addLogic_res_28;
  wire       [15:0]   addLogic_res_29;
  wire       [15:0]   addLogic_res_30;
  wire       [15:0]   addLogic_res_31;
  wire       [15:0]   addLogic_zero;
  wire                addLogic_a_0_valid;
  wire       [15:0]   addLogic_a_0_payload;
  wire                addLogic_a_1_valid;
  wire       [15:0]   addLogic_a_1_payload;
  wire                addLogic_a_2_valid;
  wire       [15:0]   addLogic_a_2_payload;
  wire                addLogic_a_3_valid;
  wire       [15:0]   addLogic_a_3_payload;
  wire                addLogic_a_4_valid;
  wire       [15:0]   addLogic_a_4_payload;
  wire                addLogic_a_5_valid;
  wire       [15:0]   addLogic_a_5_payload;
  wire                addLogic_a_6_valid;
  wire       [15:0]   addLogic_a_6_payload;
  wire                addLogic_a_7_valid;
  wire       [15:0]   addLogic_a_7_payload;
  wire                addLogic_a_8_valid;
  wire       [15:0]   addLogic_a_8_payload;
  wire                addLogic_a_9_valid;
  wire       [15:0]   addLogic_a_9_payload;
  wire                addLogic_a_10_valid;
  wire       [15:0]   addLogic_a_10_payload;
  wire                addLogic_a_11_valid;
  wire       [15:0]   addLogic_a_11_payload;
  wire                addLogic_a_12_valid;
  wire       [15:0]   addLogic_a_12_payload;
  wire                addLogic_a_13_valid;
  wire       [15:0]   addLogic_a_13_payload;
  wire                addLogic_a_14_valid;
  wire       [15:0]   addLogic_a_14_payload;
  wire                addLogic_a_15_valid;
  wire       [15:0]   addLogic_a_15_payload;
  wire                addLogic_a_16_valid;
  wire       [15:0]   addLogic_a_16_payload;
  wire                addLogic_a_17_valid;
  wire       [15:0]   addLogic_a_17_payload;
  wire                addLogic_a_18_valid;
  wire       [15:0]   addLogic_a_18_payload;
  wire                addLogic_a_19_valid;
  wire       [15:0]   addLogic_a_19_payload;
  wire                addLogic_a_20_valid;
  wire       [15:0]   addLogic_a_20_payload;
  wire                addLogic_a_21_valid;
  wire       [15:0]   addLogic_a_21_payload;
  wire                addLogic_a_22_valid;
  wire       [15:0]   addLogic_a_22_payload;
  wire                addLogic_a_23_valid;
  wire       [15:0]   addLogic_a_23_payload;
  wire                addLogic_a_24_valid;
  wire       [15:0]   addLogic_a_24_payload;
  wire                addLogic_a_25_valid;
  wire       [15:0]   addLogic_a_25_payload;
  wire                addLogic_a_26_valid;
  wire       [15:0]   addLogic_a_26_payload;
  wire                addLogic_a_27_valid;
  wire       [15:0]   addLogic_a_27_payload;
  wire                addLogic_a_28_valid;
  wire       [15:0]   addLogic_a_28_payload;
  wire                addLogic_a_29_valid;
  wire       [15:0]   addLogic_a_29_payload;
  wire                addLogic_a_30_valid;
  wire       [15:0]   addLogic_a_30_payload;
  wire                addLogic_a_31_valid;
  wire       [15:0]   addLogic_a_31_payload;
  wire                addLogic_b_0_valid;
  wire       [15:0]   addLogic_b_0_payload;
  wire                addLogic_b_1_valid;
  wire       [15:0]   addLogic_b_1_payload;
  wire                addLogic_b_2_valid;
  wire       [15:0]   addLogic_b_2_payload;
  wire                addLogic_b_3_valid;
  wire       [15:0]   addLogic_b_3_payload;
  wire                addLogic_b_4_valid;
  wire       [15:0]   addLogic_b_4_payload;
  wire                addLogic_b_5_valid;
  wire       [15:0]   addLogic_b_5_payload;
  wire                addLogic_b_6_valid;
  wire       [15:0]   addLogic_b_6_payload;
  wire                addLogic_b_7_valid;
  wire       [15:0]   addLogic_b_7_payload;
  wire                addLogic_b_8_valid;
  wire       [15:0]   addLogic_b_8_payload;
  wire                addLogic_b_9_valid;
  wire       [15:0]   addLogic_b_9_payload;
  wire                addLogic_b_10_valid;
  wire       [15:0]   addLogic_b_10_payload;
  wire                addLogic_b_11_valid;
  wire       [15:0]   addLogic_b_11_payload;
  wire                addLogic_b_12_valid;
  wire       [15:0]   addLogic_b_12_payload;
  wire                addLogic_b_13_valid;
  wire       [15:0]   addLogic_b_13_payload;
  wire                addLogic_b_14_valid;
  wire       [15:0]   addLogic_b_14_payload;
  wire                addLogic_b_15_valid;
  wire       [15:0]   addLogic_b_15_payload;
  wire                addLogic_b_16_valid;
  wire       [15:0]   addLogic_b_16_payload;
  wire                addLogic_b_17_valid;
  wire       [15:0]   addLogic_b_17_payload;
  wire                addLogic_b_18_valid;
  wire       [15:0]   addLogic_b_18_payload;
  wire                addLogic_b_19_valid;
  wire       [15:0]   addLogic_b_19_payload;
  wire                addLogic_b_20_valid;
  wire       [15:0]   addLogic_b_20_payload;
  wire                addLogic_b_21_valid;
  wire       [15:0]   addLogic_b_21_payload;
  wire                addLogic_b_22_valid;
  wire       [15:0]   addLogic_b_22_payload;
  wire                addLogic_b_23_valid;
  wire       [15:0]   addLogic_b_23_payload;
  wire                addLogic_b_24_valid;
  wire       [15:0]   addLogic_b_24_payload;
  wire                addLogic_b_25_valid;
  wire       [15:0]   addLogic_b_25_payload;
  wire                addLogic_b_26_valid;
  wire       [15:0]   addLogic_b_26_payload;
  wire                addLogic_b_27_valid;
  wire       [15:0]   addLogic_b_27_payload;
  wire                addLogic_b_28_valid;
  wire       [15:0]   addLogic_b_28_payload;
  wire                addLogic_b_29_valid;
  wire       [15:0]   addLogic_b_29_payload;
  wire                addLogic_b_30_valid;
  wire       [15:0]   addLogic_b_30_payload;
  wire                addLogic_b_31_valid;
  wire       [15:0]   addLogic_b_31_payload;
  wire                addLogic_c_0_valid;
  wire       [15:0]   addLogic_c_0_payload;
  wire                addLogic_c_1_valid;
  wire       [15:0]   addLogic_c_1_payload;
  wire                addLogic_c_2_valid;
  wire       [15:0]   addLogic_c_2_payload;
  wire                addLogic_c_3_valid;
  wire       [15:0]   addLogic_c_3_payload;
  wire                addLogic_c_4_valid;
  wire       [15:0]   addLogic_c_4_payload;
  wire                addLogic_c_5_valid;
  wire       [15:0]   addLogic_c_5_payload;
  wire                addLogic_c_6_valid;
  wire       [15:0]   addLogic_c_6_payload;
  wire                addLogic_c_7_valid;
  wire       [15:0]   addLogic_c_7_payload;
  wire                addLogic_c_8_valid;
  wire       [15:0]   addLogic_c_8_payload;
  wire                addLogic_c_9_valid;
  wire       [15:0]   addLogic_c_9_payload;
  wire                addLogic_c_10_valid;
  wire       [15:0]   addLogic_c_10_payload;
  wire                addLogic_c_11_valid;
  wire       [15:0]   addLogic_c_11_payload;
  wire                addLogic_c_12_valid;
  wire       [15:0]   addLogic_c_12_payload;
  wire                addLogic_c_13_valid;
  wire       [15:0]   addLogic_c_13_payload;
  wire                addLogic_c_14_valid;
  wire       [15:0]   addLogic_c_14_payload;
  wire                addLogic_c_15_valid;
  wire       [15:0]   addLogic_c_15_payload;
  wire                addLogic_c_16_valid;
  wire       [15:0]   addLogic_c_16_payload;
  wire                addLogic_c_17_valid;
  wire       [15:0]   addLogic_c_17_payload;
  wire                addLogic_c_18_valid;
  wire       [15:0]   addLogic_c_18_payload;
  wire                addLogic_c_19_valid;
  wire       [15:0]   addLogic_c_19_payload;
  wire                addLogic_c_20_valid;
  wire       [15:0]   addLogic_c_20_payload;
  wire                addLogic_c_21_valid;
  wire       [15:0]   addLogic_c_21_payload;
  wire                addLogic_c_22_valid;
  wire       [15:0]   addLogic_c_22_payload;
  wire                addLogic_c_23_valid;
  wire       [15:0]   addLogic_c_23_payload;
  wire                addLogic_c_24_valid;
  wire       [15:0]   addLogic_c_24_payload;
  wire                addLogic_c_25_valid;
  wire       [15:0]   addLogic_c_25_payload;
  wire                addLogic_c_26_valid;
  wire       [15:0]   addLogic_c_26_payload;
  wire                addLogic_c_27_valid;
  wire       [15:0]   addLogic_c_27_payload;
  wire                addLogic_c_28_valid;
  wire       [15:0]   addLogic_c_28_payload;
  wire                addLogic_c_29_valid;
  wire       [15:0]   addLogic_c_29_payload;
  wire                addLogic_c_30_valid;
  wire       [15:0]   addLogic_c_30_payload;
  wire                addLogic_c_31_valid;
  wire       [15:0]   addLogic_c_31_payload;
  wire       [15:0]   addLogic_vecOut_0;
  wire       [15:0]   addLogic_vecOut_1;
  wire       [15:0]   addLogic_vecOut_2;
  wire       [15:0]   addLogic_vecOut_3;
  wire       [15:0]   addLogic_vecOut_4;
  wire       [15:0]   addLogic_vecOut_5;
  wire       [15:0]   addLogic_vecOut_6;
  wire       [15:0]   addLogic_vecOut_7;
  wire       [15:0]   addLogic_vecOut_8;
  wire       [15:0]   addLogic_vecOut_9;
  wire       [15:0]   addLogic_vecOut_10;
  wire       [15:0]   addLogic_vecOut_11;
  wire       [15:0]   addLogic_vecOut_12;
  wire       [15:0]   addLogic_vecOut_13;
  wire       [15:0]   addLogic_vecOut_14;
  wire       [15:0]   addLogic_vecOut_15;
  wire       [15:0]   addLogic_vecOut_16;
  wire       [15:0]   addLogic_vecOut_17;
  wire       [15:0]   addLogic_vecOut_18;
  wire       [15:0]   addLogic_vecOut_19;
  wire       [15:0]   addLogic_vecOut_20;
  wire       [15:0]   addLogic_vecOut_21;
  wire       [15:0]   addLogic_vecOut_22;
  wire       [15:0]   addLogic_vecOut_23;
  wire       [15:0]   addLogic_vecOut_24;
  wire       [15:0]   addLogic_vecOut_25;
  wire       [15:0]   addLogic_vecOut_26;
  wire       [15:0]   addLogic_vecOut_27;
  wire       [15:0]   addLogic_vecOut_28;
  wire       [15:0]   addLogic_vecOut_29;
  wire       [15:0]   addLogic_vecOut_30;
  wire       [15:0]   addLogic_vecOut_31;
  wire       [15:0]   addLogic_scalarOut;
  reg        [511:0]  addLogic_popDly;
  reg        [31:0]   dotCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 dotCtrl_cfgVld;
  wire       [1:0]    dotCtrl_aSelNext;
  wire       [1:0]    dotCtrl_bSelNext;
  wire                dotCtrl_enMulResCntNext;
  reg                 dotCtrl_enMulResCnt;
  reg        [7:0]    dotCtrl_muResCnt_0;
  reg        [15:0]   dotCtrl_muResCnt_1;
  reg                 dotCtrl_mulResCntOvf_0;
  reg                 dotCtrl_mulResCntOvf_1;
  reg                 dotCtrl_mulResCntOvfReduce;
  reg        [7:0]    t_dotCtrl_muResCnt_0;
  reg        [15:0]   t_dotCtrl_muResCnt_1;
  wire                t_dotCtrl_mulResCntOvf_0;
  wire                t_dotCtrl_mulResCntOvf_1;
  reg                 dotCtrl_enMulResCnt_delay_1;
  reg                 dotCtrl_enMulResCnt_delay_2;
  reg                 dotCtrl_enMulResCnt_delay_3;
  reg                 dotCtrl_enMulResCnt_delay_4;
  reg                 dotCtrl_enMulResCnt_delay_5;
  reg                 dotCtrl_enMulResCnt_delay_6;
  reg                 dotCtrl_enMulResCnt_delay_7;
  reg                 dotCtrl_enMulResCnt_delay_8;
  reg                 dotCtrl_enMulResCnt_delay_9;
  reg                 dotCtrl_enMulResCnt_delay_10;
  reg                 dotCtrl_enMulResCnt_delay_11;
  reg                 dotCtrl_enMulResCnt_delay_12;
  reg                 dotCtrl_enMulResCnt_delay_13;
  reg                 dotCtrl_enMulResCnt_delay_14;
  reg                 dotCtrl_enMulResCnt_delay_15;
  reg                 dotCtrl_enMulResCnt_delay_16;
  reg                 dotCtrl_enMulResCnt_delay_17;
  reg                 dotCtrl_enMulResCnt_delay_18;
  reg                 dotCtrl_enMulResCnt_delay_19;
  reg                 dotCtrl_enMulResCnt_delay_20;
  reg                 dotCtrl_enMulResCnt_delay_21;
  reg                 dotCtrl_enMulResCnt_delay_22;
  reg                 dotCtrl_enMulResCnt_delay_23;
  reg                 dotCtrl_enMulResCnt_delay_24;
  reg                 dotCtrl_enMulResCnt_delay_25;
  reg                 dotCtrl_enMulResCnt_delay_26;
  reg                 dotCtrl_enMulResCnt_delay_27;
  reg                 dotCtrl_enMulResCnt_delay_28;
  reg                 dotCtrl_enMulResCnt_delay_29;
  reg                 dotCtrl_enAddOutCnt;
  reg                 dotCtrl_mulResCntOvf_0_delay_1;
  reg                 dotCtrl_mulResCntOvf_0_delay_2;
  reg                 dotCtrl_mulResCntOvf_0_delay_3;
  reg                 dotCtrl_mulResCntOvf_0_delay_4;
  reg                 dotCtrl_mulResCntOvf_0_delay_5;
  reg                 dotCtrl_mulResCntOvf_0_delay_6;
  reg                 dotCtrl_mulResCntOvf_0_delay_7;
  reg                 dotCtrl_mulResCntOvf_0_delay_8;
  reg                 dotCtrl_mulResCntOvf_0_delay_9;
  reg                 dotCtrl_mulResCntOvf_0_delay_10;
  reg                 dotCtrl_mulResCntOvf_0_delay_11;
  reg                 dotCtrl_mulResCntOvf_0_delay_12;
  reg                 dotCtrl_mulResCntOvf_0_delay_13;
  reg                 dotCtrl_mulResCntOvf_0_delay_14;
  reg                 dotCtrl_mulResCntOvf_0_delay_15;
  reg                 dotCtrl_mulResCntOvf_0_delay_16;
  reg                 dotCtrl_mulResCntOvf_0_delay_17;
  reg                 dotCtrl_mulResCntOvf_0_delay_18;
  reg                 dotCtrl_mulResCntOvf_0_delay_19;
  reg                 dotCtrl_mulResCntOvf_0_delay_20;
  reg                 dotCtrl_mulResCntOvf_0_delay_21;
  reg                 dotCtrl_mulResCntOvf_0_delay_22;
  reg                 dotCtrl_mulResCntOvf_0_delay_23;
  reg                 dotCtrl_mulResCntOvf_0_delay_24;
  reg                 dotCtrl_mulResCntOvf_0_delay_25;
  reg                 dotCtrl_mulResCntOvf_0_delay_26;
  reg                 dotCtrl_mulResCntOvf_0_delay_27;
  reg                 dotCtrl_mulResCntOvf_0_delay_28;
  reg                 dotCtrl_mulResCntOvf_0_delay_29;
  reg                 dotCtrl_addOutCntOvf_0;
  reg                 dotCtrl_mulResCntOvf_1_delay_1;
  reg                 dotCtrl_mulResCntOvf_1_delay_2;
  reg                 dotCtrl_mulResCntOvf_1_delay_3;
  reg                 dotCtrl_mulResCntOvf_1_delay_4;
  reg                 dotCtrl_mulResCntOvf_1_delay_5;
  reg                 dotCtrl_mulResCntOvf_1_delay_6;
  reg                 dotCtrl_mulResCntOvf_1_delay_7;
  reg                 dotCtrl_mulResCntOvf_1_delay_8;
  reg                 dotCtrl_mulResCntOvf_1_delay_9;
  reg                 dotCtrl_mulResCntOvf_1_delay_10;
  reg                 dotCtrl_mulResCntOvf_1_delay_11;
  reg                 dotCtrl_mulResCntOvf_1_delay_12;
  reg                 dotCtrl_mulResCntOvf_1_delay_13;
  reg                 dotCtrl_mulResCntOvf_1_delay_14;
  reg                 dotCtrl_mulResCntOvf_1_delay_15;
  reg                 dotCtrl_mulResCntOvf_1_delay_16;
  reg                 dotCtrl_mulResCntOvf_1_delay_17;
  reg                 dotCtrl_mulResCntOvf_1_delay_18;
  reg                 dotCtrl_mulResCntOvf_1_delay_19;
  reg                 dotCtrl_mulResCntOvf_1_delay_20;
  reg                 dotCtrl_mulResCntOvf_1_delay_21;
  reg                 dotCtrl_mulResCntOvf_1_delay_22;
  reg                 dotCtrl_mulResCntOvf_1_delay_23;
  reg                 dotCtrl_mulResCntOvf_1_delay_24;
  reg                 dotCtrl_mulResCntOvf_1_delay_25;
  reg                 dotCtrl_mulResCntOvf_1_delay_26;
  reg                 dotCtrl_mulResCntOvf_1_delay_27;
  reg                 dotCtrl_mulResCntOvf_1_delay_28;
  reg                 dotCtrl_mulResCntOvf_1_delay_29;
  reg                 dotCtrl_addOutCntOvf_1;
  wire                dotCtrl_flagClrCond;
  reg                 dotCtrl_flagSetCond;
  reg                 dotCtrl_flagInv;
  reg                 dotCtrl_flagInvNext;
  reg        [4:0]    dotCtrl_accCnt;
  wire                dotCtrl_accCntOvf;
  reg                 dotCtrl_accCntOvf_delay_1;
  reg                 dotCtrl_accCntOvf_delay_2;
  reg                 dotCtrl_accCntOvf_delay_3;
  reg                 dotCtrl_accCntOvf_delay_4;
  reg                 dotCtrl_accCntOvf_delay_5;
  reg                 dotCtrl_accCntOvf_delay_6;
  reg                 dotCtrl_accCntOvf_delay_7;
  reg                 dotCtrl_accCntOvf_delay_8;
  reg                 dotCtrl_accCntOvf_delay_9;
  reg                 dotCtrl_accCntOvf_delay_10;
  reg                 dotCtrl_accCntOvf_delay_11;
  reg                 dotCtrl_accCntOvf_delay_12;
  reg                 dotCtrl_accCntOvf_delay_13;
  reg                 dotCtrl_accCntOvf_delay_14;
  reg                 dotCtrl_accCntOvf_delay_15;
  reg                 dotCtrl_accCntOvf_delay_16;
  reg                 dotCtrl_accCntOvf_delay_17;
  reg                 dotCtrl_accCntOvf_delay_18;
  reg                 dotCtrl_accCntOvf_delay_19;
  reg                 dotCtrl_accCntOvf_delay_20;
  reg                 dotCtrl_accCntOvf_delay_21;
  reg                 dotCtrl_accCntOvf_delay_22;
  reg                 dotCtrl_accCntOvf_delay_23;
  reg                 dotCtrl_accCntOvf_delay_24;
  reg                 dotCtrl_accCntOvf_delay_25;
  reg                 dotCtrl_accCntOvf_delay_26;
  reg                 dotCtrl_accCntOvf_delay_27;
  reg                 dotCtrl_accCntOvf_delay_28;
  reg                 dotCtrl_accCntOvf_delay_29;
  reg                 dotCtrl_accCntOvf_delay_30;
  reg                 dotCtrl_accCntOvf_delay_31;
  reg                 dotCtrl_accCntOvf_delay_32;
  reg                 dotCtrl_accCntOvf_delay_33;
  reg                 dotCtrl_accCntOvf_delay_34;
  reg                 dotCtrl_accCntOvf_delay_35;
  reg                 dotCtrl_accCntOvfDly;
  reg                 dotCtrl_accCntOvf_delay_1_1;
  reg                 dotCtrl_accCntOvf_delay_2_1;
  reg                 dotCtrl_accCntOvf_delay_3_1;
  reg                 dotCtrl_accCntOvf_delay_4_1;
  reg                 dotCtrl_accCntOvf_delay_5_1;
  reg                 dotCtrl_accCntOvf_delay_6_1;
  reg                 dotCtrl_accCntOvf_delay_7_1;
  reg                 dotCtrl_accCntOvf_delay_8_1;
  reg                 dotCtrl_accCntOvf_delay_9_1;
  reg                 dotCtrl_accCntOvf_delay_10_1;
  reg                 dotCtrl_accCntOvf_delay_11_1;
  reg                 dotCtrl_accCntOvf_delay_12_1;
  reg                 dotCtrl_accCntOvf_delay_13_1;
  reg                 dotCtrl_accCntOvf_delay_14_1;
  reg                 dotCtrl_accCntOvf_delay_15_1;
  reg                 dotCtrl_accCntOvf_delay_16_1;
  reg                 dotCtrl_accCntOvf_delay_17_1;
  reg                 dotCtrl_accCntOvf_delay_18_1;
  reg                 dotCtrl_accCntOvf_delay_19_1;
  reg                 dotCtrl_accCntOvf_delay_20_1;
  reg                 dotCtrl_accCntOvf_delay_21_1;
  reg                 dotCtrl_accCntOvf_delay_22_1;
  reg                 dotCtrl_accCntOvf_delay_23_1;
  reg                 dotCtrl_accCntOvf_delay_24_1;
  reg                 dotCtrl_accCntOvf_delay_25_1;
  reg                 dotCtrl_accCntOvf_delay_26_1;
  reg                 dotCtrl_accCntOvf_delay_27_1;
  reg                 dotCtrl_accCntOvf_delay_28_1;
  reg                 dotCtrl_accCntOvf_delay_29_1;
  reg                 dotCtrl_accCntOvf_delay_30_1;
  reg        [31:0]   fAxpyCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 fAxpyCtrl_cfgVld;
  wire                fAxpyCtrl_psumPopEn;
  wire                fAxpyCtrl_psumPushEn;
  wire                fAxpyCtrl_enMulResCntNext;
  reg                 fAxpyCtrl_enMulResCnt;
  reg        [7:0]    fAxpyCtrl_muResCnt_0;
  reg        [15:0]   fAxpyCtrl_muResCnt_1;
  reg                 fAxpyCtrl_mulResCntOvf_0;
  reg                 fAxpyCtrl_mulResCntOvf_1;
  reg                 fAxpyCtrl_mulResCntOvfReduce;
  reg        [7:0]    t_fAxpyCtrl_muResCnt_0;
  reg        [15:0]   t_fAxpyCtrl_muResCnt_1;
  wire                t_fAxpyCtrl_mulResCntOvf_0;
  wire                t_fAxpyCtrl_mulResCntOvf_1;
  reg                 fAxpyCtrl_mulResCntLastZero;
  reg                 fAxpyCtrl_mulResCntLastZeroNext;
  reg                 fAxpyCtrl_mulResCntLastNotZero;
  reg                 fAxpyCtrl_mulResCntLastNotZeroNext;
  reg                 fAxpyCtrl_enMulResCnt_delay_1;
  reg                 fAxpyCtrl_enMulResCnt_delay_2;
  reg                 fAxpyCtrl_enMulResCnt_delay_3;
  reg                 fAxpyCtrl_enMulResCnt_delay_4;
  reg                 fAxpyCtrl_enMulResCnt_delay_5;
  reg                 fAxpyCtrl_enAddOutCnt;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_1;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_2;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_3;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_4;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_5;
  reg                 fAxpyCtrl_addOutCntOvf_0;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_1;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_2;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_3;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_4;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_5;
  reg                 fAxpyCtrl_addOutCntOvf_1;
  reg                 t_fAxpyCtrl_psumPushEnReg;
  reg                 t_fAxpyCtrl_psumPushEnReg_1;
  reg                 t_fAxpyCtrl_psumPushEnReg_2;
  reg                 t_fAxpyCtrl_psumPushEnReg_3;
  reg                 t_fAxpyCtrl_psumPushEnReg_4;
  reg                 fAxpyCtrl_psumPushEnReg;
  reg                 fAxpyCtrl_resAddReady;
  wire                fAxpyCtrl_resAddReadyNext;
  reg                 fAxpyCtrl_psumPopEnReg;
  wire                fAxpyCtrl_psumPopEnRegNext;
  wire       [1:0]    fAxpyCtrl_aSelNext;
  reg        [1:0]    fAxpyCtrl_bSelNext;
  wire                fAxpyCtrl_vecOutVld;
  reg        [31:0]   pAxpyCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 pAxpyCtrl_cfgVld;
  reg                 pAxpyCtrl_cycleReduce;
  reg                 pAxpyCtrl_cycleReduceNext;
  reg                 pAxpyCtrl_cycleReduceDly;
  wire                pAxpyCtrl_enMulResCntNext;
  reg                 pAxpyCtrl_enMulResCnt;
  reg        [15:0]   pAxpyCtrl_mulResCnt;
  reg        [15:0]   pAxpyCtrl_mulResCntNext;
  wire       [2:0]    pAxpyCtrl_mulResCntLow;
  wire       [12:0]   pAxpyCtrl_mulResCntHigh;
  reg                 pAxpyCtrl_mulResCntOvf;
  wire                pAxpyCtrl_mulResCntOvfNext;
  reg                 pAxpyCtrl_mulResCntHighZero;
  reg                 pAxpyCtrl_mulResCntHighZeroNext;
  reg                 pAxpyCtrl_mulResCntHighNotZero;
  reg                 pAxpyCtrl_mulResCntHighNotZeroNext;
  reg                 pAxpyCtrl_enMulResCnt_delay_1;
  reg                 pAxpyCtrl_enMulResCnt_delay_2;
  reg                 pAxpyCtrl_enMulResCnt_delay_3;
  reg                 pAxpyCtrl_enMulResCnt_delay_4;
  reg                 pAxpyCtrl_enMulResCnt_delay_5;
  reg                 pAxpyCtrl_enMulResCntDly;
  wire                pAxpyCtrl_enAddOutCnt;
  reg                 pAxpyCtrl_mulResCntOvf_delay_1;
  reg                 pAxpyCtrl_mulResCntOvf_delay_2;
  reg                 pAxpyCtrl_mulResCntOvf_delay_3;
  reg                 pAxpyCtrl_mulResCntOvf_delay_4;
  reg                 pAxpyCtrl_mulResCntOvf_delay_5;
  reg                 pAxpyCtrl_addOutCntOvf;
  wire                pAxpyCtrl_reduceVldDly;
  wire                pAxpyCtrl_enCycleCnt;
  reg        [2:0]    pAxpyCtrl_cycleCnt;
  reg        [2:0]    pAxpyCtrl_cycleCntNext;
  (* max_fanout = 100 *) reg                 pAxpyCtrl_lastElem;
  wire       [2:0]    t_pAxpyCtrl_lastElemNext;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_1;
  wire                pAxpyCtrl_lastElemNext;
  wire                pAxpyCtrl_psumPushEn;
  reg                 pAxpyCtrl_psumPopEn;
  reg                 pAxpyCtrl_psumPopEnNext;
  wire       [1:0]    pAxpyCtrl_aSelNext;
  wire       [1:0]    pAxpyCtrl_bSelNext;
  reg                 pAxpyCtrl_bSelBit;
  wire                pAxpyCtrl_bSelBitNext;
  wire                pAxpyCtrl_flagClrCond;
  reg                 pAxpyCtrl_flagSetCond;
  reg                 pAxpyCtrl_flagInv;
  reg                 pAxpyCtrl_flagInvNext;
  reg                 pAxpyCtrl_vldToggle;
  wire                add_fifoCtrl_io_pop_fire;
  wire                pAxpyCtrl_reduceVld;
  reg                 pAxpyCtrl_psumVld;
  reg                 t_pAxpyCtrl_reduceVldDly;
  reg                 t_pAxpyCtrl_reduceVldDly_1;
  reg                 t_pAxpyCtrl_reduceVldDly_2;
  reg                 t_pAxpyCtrl_reduceVldDly_3;
  reg                 t_pAxpyCtrl_reduceVldDly_4;
  reg                 t_pAxpyCtrl_reduceVldDly_5;
  wire                pAxpyCtrl_vecOutVld;
  wire       [2:0]    selVldNextOneHot;
  wire                t_selVldNextUInt;
  wire                t_selVldNextUInt_1;
  wire       [1:0]    selVldNextUInt;
  reg        [1:0]    selVldUIntReg;
  (* keep = "true" *) reg        [1:0]    selFifoPushUInt;
  (* keep = "true" *) reg        [1:0]    selFifoPopUInt;
  (* max_fanout = 100 *) reg        [1:0]    aSel;
  (* max_fanout = 100 *) reg        [1:0]    bSel;
  wire       [1:0]    aSelNext;
  wire       [1:0]    bSelNext;
  (* max_fanout = 100 *) reg                 ready;
  reg                 readyNext;
  (* ram_style = "distributed" *) reg [511:0] t_1 [0:31];

  assign t_when = (&pAxpyCtrl_mulResCntLow);
  assign t_fAxpyCond = cfg_tdata[31 : 16];
  assign t_pAxpyCond = cfg_tdata[31 : 16];
  assign t_t_dotCtrl_mulResCntOvf_0 = ret_0_payload[31 : 16];
  assign t_dotCtrl_accCntOvf = {3'd0, dotCtrl_accCnt};
  assign t_dotCtrl_accCntOvf_1 = dotCtrl_cfgPayload[31 : 16];
  assign t_t_fAxpyCtrl_mulResCntOvf_0 = ret_1_payload[31 : 16];
  assign t_pAxpyCtrl_lastElemNext_2 = {13'd0, pAxpyCtrl_cycleCntNext};
  assign t_pAxpyCtrl_lastElemNext_3 = {13'd0, t_pAxpyCtrl_lastElemNext};
  assign t_pAxpyCtrl_lastElemNext_4 = {13'd0, t_pAxpyCtrl_lastElemNext};
  assign t_io_push_payload = {addLogic_vecOut_15,{addLogic_vecOut_14,{addLogic_vecOut_13,{addLogic_vecOut_12,{addLogic_vecOut_11,{addLogic_vecOut_10,{addLogic_vecOut_9,{addLogic_vecOut_8,{addLogic_vecOut_7,{addLogic_vecOut_6,{addLogic_vecOut_5,{addLogic_vecOut_4,{addLogic_vecOut_3,{addLogic_vecOut_2,{addLogic_vecOut_1,addLogic_vecOut_0}}}}}}}}}}}}}}};
  assign t_vecOut_tdata = {addLogic_vecOut_15,{addLogic_vecOut_14,{addLogic_vecOut_13,{addLogic_vecOut_12,{addLogic_vecOut_11,{addLogic_vecOut_10,{addLogic_vecOut_9,{addLogic_vecOut_8,{addLogic_vecOut_7,{addLogic_vecOut_6,{addLogic_vecOut_5,{addLogic_vecOut_4,{addLogic_vecOut_3,{addLogic_vecOut_2,{addLogic_vecOut_1,addLogic_vecOut_0}}}}}}}}}}}}}}};
  always @(posedge clk_1_clk) begin
    if(fifoCtrl_wrPort_valid) begin
      t_1[fifoCtrl_wrPort_payload_address] <= fifoCtrl_wrPort_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(fifoCtrl_rdPort_cmd_valid) begin
      t_1_spinal_port1 <= t_1[fifoCtrl_rdPort_cmd_payload];
    end
  end

  StreamFifoCtrl_3 fifoCtrl (
    .io_push_valid          (fifoCtrl_io_push_valid              ), //i
    .io_push_ready          (fifoCtrl_io_push_ready              ), //o
    .io_push_payload        (fifoCtrl_io_push_payload[511:0]     ), //i
    .io_pop_valid           (fifoCtrl_io_pop_valid               ), //o
    .io_pop_ready           (fifoCtrl_io_pop_ready               ), //i
    .io_pop_payload         (fifoCtrl_io_pop_payload[511:0]      ), //o
    .io_flush               (1'b0                                ), //i
    .io_occupancy           (fifoCtrl_io_occupancy[5:0]          ), //o
    .io_availability        (fifoCtrl_io_availability[5:0]       ), //o
    .rdPort_cmd_valid       (fifoCtrl_rdPort_cmd_valid           ), //o
    .rdPort_cmd_payload     (fifoCtrl_rdPort_cmd_payload[4:0]    ), //o
    .rdPort_rsp             (fifoCtrl_rdPort_rsp[511:0]          ), //i
    .wrPort_valid           (fifoCtrl_wrPort_valid               ), //o
    .wrPort_payload_address (fifoCtrl_wrPort_payload_address[4:0]), //o
    .wrPort_payload_data    (fifoCtrl_wrPort_payload_data[511:0] ), //o
    .clk_1_clk              (clk_1_clk                           ), //i
    .clk_1_resetn           (clk_1_resetn                        )  //i
  );
  fp16add6 addLogic_a_0_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_0_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_0_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_0_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_0_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_0_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_0_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_1_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_1_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_1_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_1_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_1_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_1_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_1_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_2_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_2_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_2_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_2_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_2_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_2_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_2_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_3_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_3_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_3_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_3_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_3_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_3_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_3_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_4_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_4_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_4_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_4_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_4_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_4_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_4_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_5_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_5_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_5_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_5_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_5_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_5_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_5_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_6_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_6_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_6_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_6_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_6_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_6_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_6_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_7_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_7_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_7_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_7_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_7_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_7_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_7_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_8_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_8_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_8_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_8_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_8_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_8_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_8_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_9_add_ip (
    .aclk                 (clk_1_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_9_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_9_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_9_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_9_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_9_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_9_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_10_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_10_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_10_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_10_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_10_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_10_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_10_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_11_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_11_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_11_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_11_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_11_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_11_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_11_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_12_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_12_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_12_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_12_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_12_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_12_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_12_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_13_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_13_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_13_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_13_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_13_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_13_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_13_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_14_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_14_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_14_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_14_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_14_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_14_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_14_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_15_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_15_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_15_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_15_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_15_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_15_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_15_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_16_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_16_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_16_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_16_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_16_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_16_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_16_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_17_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_17_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_17_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_17_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_17_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_17_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_17_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_18_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_18_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_18_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_18_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_18_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_18_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_18_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_19_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_19_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_19_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_19_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_19_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_19_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_19_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_20_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_20_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_20_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_20_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_20_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_20_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_20_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_21_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_21_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_21_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_21_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_21_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_21_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_21_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_22_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_22_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_22_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_22_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_22_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_22_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_22_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_23_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_23_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_23_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_23_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_23_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_23_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_23_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_24_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_24_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_24_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_24_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_24_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_24_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_24_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_25_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_25_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_25_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_25_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_25_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_25_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_25_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_26_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_26_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_26_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_26_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_26_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_26_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_26_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_27_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_27_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_27_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_27_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_27_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_27_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_27_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_28_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_28_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_28_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_28_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_28_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_28_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_28_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_29_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_29_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_29_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_29_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_29_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_29_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_29_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_30_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_30_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_30_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_30_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_30_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_30_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_30_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_31_add_ip (
    .aclk                 (clk_1_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_31_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_31_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_31_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_31_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_31_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_31_add_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    case(addLogic_aSel)
      2'b00 : begin
        t_addLogic_a_0_payload = addLogic_mul_0;
        t_addLogic_a_1_payload = addLogic_mul_1;
        t_addLogic_a_2_payload = addLogic_mul_2;
        t_addLogic_a_3_payload = addLogic_mul_3;
        t_addLogic_a_4_payload = addLogic_mul_4;
        t_addLogic_a_5_payload = addLogic_mul_5;
        t_addLogic_a_6_payload = addLogic_mul_6;
        t_addLogic_a_7_payload = addLogic_mul_7;
        t_addLogic_a_8_payload = addLogic_mul_8;
        t_addLogic_a_9_payload = addLogic_mul_9;
        t_addLogic_a_10_payload = addLogic_mul_10;
        t_addLogic_a_11_payload = addLogic_mul_11;
        t_addLogic_a_12_payload = addLogic_mul_12;
        t_addLogic_a_13_payload = addLogic_mul_13;
        t_addLogic_a_14_payload = addLogic_mul_14;
        t_addLogic_a_15_payload = addLogic_mul_15;
        t_addLogic_a_16_payload = addLogic_mul_16;
        t_addLogic_a_17_payload = addLogic_mul_17;
        t_addLogic_a_18_payload = addLogic_mul_18;
        t_addLogic_a_19_payload = addLogic_mul_19;
        t_addLogic_a_20_payload = addLogic_mul_20;
        t_addLogic_a_21_payload = addLogic_mul_21;
        t_addLogic_a_22_payload = addLogic_mul_22;
        t_addLogic_a_23_payload = addLogic_mul_23;
        t_addLogic_a_24_payload = addLogic_mul_24;
        t_addLogic_a_25_payload = addLogic_mul_25;
        t_addLogic_a_26_payload = addLogic_mul_26;
        t_addLogic_a_27_payload = addLogic_mul_27;
        t_addLogic_a_28_payload = addLogic_mul_28;
        t_addLogic_a_29_payload = addLogic_mul_29;
        t_addLogic_a_30_payload = addLogic_mul_30;
        t_addLogic_a_31_payload = addLogic_mul_31;
      end
      2'b01 : begin
        t_addLogic_a_0_payload = addLogic_c_1_payload;
        t_addLogic_a_1_payload = addLogic_c_3_payload;
        t_addLogic_a_2_payload = addLogic_c_5_payload;
        t_addLogic_a_3_payload = addLogic_c_7_payload;
        t_addLogic_a_4_payload = addLogic_c_9_payload;
        t_addLogic_a_5_payload = addLogic_c_11_payload;
        t_addLogic_a_6_payload = addLogic_c_13_payload;
        t_addLogic_a_7_payload = addLogic_c_15_payload;
        t_addLogic_a_8_payload = addLogic_c_17_payload;
        t_addLogic_a_9_payload = addLogic_c_19_payload;
        t_addLogic_a_10_payload = addLogic_c_21_payload;
        t_addLogic_a_11_payload = addLogic_c_23_payload;
        t_addLogic_a_12_payload = addLogic_c_25_payload;
        t_addLogic_a_13_payload = addLogic_c_27_payload;
        t_addLogic_a_14_payload = addLogic_c_29_payload;
        t_addLogic_a_15_payload = addLogic_mul_0;
        t_addLogic_a_16_payload = addLogic_mul_2;
        t_addLogic_a_17_payload = addLogic_mul_4;
        t_addLogic_a_18_payload = addLogic_mul_6;
        t_addLogic_a_19_payload = addLogic_mul_8;
        t_addLogic_a_20_payload = addLogic_mul_10;
        t_addLogic_a_21_payload = addLogic_mul_12;
        t_addLogic_a_22_payload = addLogic_mul_14;
        t_addLogic_a_23_payload = addLogic_mul_16;
        t_addLogic_a_24_payload = addLogic_mul_18;
        t_addLogic_a_25_payload = addLogic_mul_20;
        t_addLogic_a_26_payload = addLogic_mul_22;
        t_addLogic_a_27_payload = addLogic_mul_24;
        t_addLogic_a_28_payload = addLogic_mul_26;
        t_addLogic_a_29_payload = addLogic_mul_28;
        t_addLogic_a_30_payload = addLogic_mul_30;
        t_addLogic_a_31_payload = addLogic_zero;
      end
      2'b10 : begin
        t_addLogic_a_0_payload = addLogic_psumDly_0;
        t_addLogic_a_1_payload = addLogic_psumDly_1;
        t_addLogic_a_2_payload = addLogic_psumDly_2;
        t_addLogic_a_3_payload = addLogic_psumDly_3;
        t_addLogic_a_4_payload = addLogic_psumDly_4;
        t_addLogic_a_5_payload = addLogic_psumDly_5;
        t_addLogic_a_6_payload = addLogic_psumDly_6;
        t_addLogic_a_7_payload = addLogic_psumDly_7;
        t_addLogic_a_8_payload = addLogic_psumDly_8;
        t_addLogic_a_9_payload = addLogic_psumDly_9;
        t_addLogic_a_10_payload = addLogic_psumDly_10;
        t_addLogic_a_11_payload = addLogic_psumDly_11;
        t_addLogic_a_12_payload = addLogic_psumDly_12;
        t_addLogic_a_13_payload = addLogic_psumDly_13;
        t_addLogic_a_14_payload = addLogic_psumDly_14;
        t_addLogic_a_15_payload = addLogic_psumDly_15;
        t_addLogic_a_16_payload = addLogic_psumDly_16;
        t_addLogic_a_17_payload = addLogic_psumDly_17;
        t_addLogic_a_18_payload = addLogic_psumDly_18;
        t_addLogic_a_19_payload = addLogic_psumDly_19;
        t_addLogic_a_20_payload = addLogic_psumDly_20;
        t_addLogic_a_21_payload = addLogic_psumDly_21;
        t_addLogic_a_22_payload = addLogic_psumDly_22;
        t_addLogic_a_23_payload = addLogic_psumDly_23;
        t_addLogic_a_24_payload = addLogic_psumDly_24;
        t_addLogic_a_25_payload = addLogic_psumDly_25;
        t_addLogic_a_26_payload = addLogic_psumDly_26;
        t_addLogic_a_27_payload = addLogic_psumDly_27;
        t_addLogic_a_28_payload = addLogic_psumDly_28;
        t_addLogic_a_29_payload = addLogic_psumDly_29;
        t_addLogic_a_30_payload = addLogic_psumDly_30;
        t_addLogic_a_31_payload = addLogic_psumDly_31;
      end
      default : begin
        t_addLogic_a_0_payload = addLogic_zero;
        t_addLogic_a_1_payload = addLogic_zero;
        t_addLogic_a_2_payload = addLogic_zero;
        t_addLogic_a_3_payload = addLogic_zero;
        t_addLogic_a_4_payload = addLogic_zero;
        t_addLogic_a_5_payload = addLogic_zero;
        t_addLogic_a_6_payload = addLogic_zero;
        t_addLogic_a_7_payload = addLogic_zero;
        t_addLogic_a_8_payload = addLogic_zero;
        t_addLogic_a_9_payload = addLogic_zero;
        t_addLogic_a_10_payload = addLogic_zero;
        t_addLogic_a_11_payload = addLogic_zero;
        t_addLogic_a_12_payload = addLogic_zero;
        t_addLogic_a_13_payload = addLogic_zero;
        t_addLogic_a_14_payload = addLogic_zero;
        t_addLogic_a_15_payload = addLogic_zero;
        t_addLogic_a_16_payload = addLogic_zero;
        t_addLogic_a_17_payload = addLogic_zero;
        t_addLogic_a_18_payload = addLogic_zero;
        t_addLogic_a_19_payload = addLogic_zero;
        t_addLogic_a_20_payload = addLogic_zero;
        t_addLogic_a_21_payload = addLogic_zero;
        t_addLogic_a_22_payload = addLogic_zero;
        t_addLogic_a_23_payload = addLogic_zero;
        t_addLogic_a_24_payload = addLogic_zero;
        t_addLogic_a_25_payload = addLogic_zero;
        t_addLogic_a_26_payload = addLogic_zero;
        t_addLogic_a_27_payload = addLogic_zero;
        t_addLogic_a_28_payload = addLogic_zero;
        t_addLogic_a_29_payload = addLogic_zero;
        t_addLogic_a_30_payload = addLogic_zero;
        t_addLogic_a_31_payload = addLogic_zero;
      end
    endcase
  end

  always @(*) begin
    case(addLogic_bSel)
      2'b00 : begin
        t_addLogic_b_0_payload = addLogic_psum_0;
        t_addLogic_b_1_payload = addLogic_psum_1;
        t_addLogic_b_2_payload = addLogic_psum_2;
        t_addLogic_b_3_payload = addLogic_psum_3;
        t_addLogic_b_4_payload = addLogic_psum_4;
        t_addLogic_b_5_payload = addLogic_psum_5;
        t_addLogic_b_6_payload = addLogic_psum_6;
        t_addLogic_b_7_payload = addLogic_psum_7;
        t_addLogic_b_8_payload = addLogic_psum_8;
        t_addLogic_b_9_payload = addLogic_psum_9;
        t_addLogic_b_10_payload = addLogic_psum_10;
        t_addLogic_b_11_payload = addLogic_psum_11;
        t_addLogic_b_12_payload = addLogic_psum_12;
        t_addLogic_b_13_payload = addLogic_psum_13;
        t_addLogic_b_14_payload = addLogic_psum_14;
        t_addLogic_b_15_payload = addLogic_psum_15;
        t_addLogic_b_16_payload = addLogic_psum_16;
        t_addLogic_b_17_payload = addLogic_psum_17;
        t_addLogic_b_18_payload = addLogic_psum_18;
        t_addLogic_b_19_payload = addLogic_psum_19;
        t_addLogic_b_20_payload = addLogic_psum_20;
        t_addLogic_b_21_payload = addLogic_psum_21;
        t_addLogic_b_22_payload = addLogic_psum_22;
        t_addLogic_b_23_payload = addLogic_psum_23;
        t_addLogic_b_24_payload = addLogic_psum_24;
        t_addLogic_b_25_payload = addLogic_psum_25;
        t_addLogic_b_26_payload = addLogic_psum_26;
        t_addLogic_b_27_payload = addLogic_psum_27;
        t_addLogic_b_28_payload = addLogic_psum_28;
        t_addLogic_b_29_payload = addLogic_psum_29;
        t_addLogic_b_30_payload = addLogic_psum_30;
        t_addLogic_b_31_payload = addLogic_psum_31;
      end
      2'b01 : begin
        t_addLogic_b_0_payload = addLogic_c_2_payload;
        t_addLogic_b_1_payload = addLogic_c_4_payload;
        t_addLogic_b_2_payload = addLogic_c_6_payload;
        t_addLogic_b_3_payload = addLogic_c_8_payload;
        t_addLogic_b_4_payload = addLogic_c_10_payload;
        t_addLogic_b_5_payload = addLogic_c_12_payload;
        t_addLogic_b_6_payload = addLogic_c_14_payload;
        t_addLogic_b_7_payload = addLogic_c_16_payload;
        t_addLogic_b_8_payload = addLogic_c_18_payload;
        t_addLogic_b_9_payload = addLogic_c_20_payload;
        t_addLogic_b_10_payload = addLogic_c_22_payload;
        t_addLogic_b_11_payload = addLogic_c_24_payload;
        t_addLogic_b_12_payload = addLogic_c_26_payload;
        t_addLogic_b_13_payload = addLogic_c_28_payload;
        t_addLogic_b_14_payload = addLogic_c_30_payload;
        t_addLogic_b_15_payload = addLogic_mul_1;
        t_addLogic_b_16_payload = addLogic_mul_3;
        t_addLogic_b_17_payload = addLogic_mul_5;
        t_addLogic_b_18_payload = addLogic_mul_7;
        t_addLogic_b_19_payload = addLogic_mul_9;
        t_addLogic_b_20_payload = addLogic_mul_11;
        t_addLogic_b_21_payload = addLogic_mul_13;
        t_addLogic_b_22_payload = addLogic_mul_15;
        t_addLogic_b_23_payload = addLogic_mul_17;
        t_addLogic_b_24_payload = addLogic_mul_19;
        t_addLogic_b_25_payload = addLogic_mul_21;
        t_addLogic_b_26_payload = addLogic_mul_23;
        t_addLogic_b_27_payload = addLogic_mul_25;
        t_addLogic_b_28_payload = addLogic_mul_27;
        t_addLogic_b_29_payload = addLogic_mul_29;
        t_addLogic_b_30_payload = addLogic_mul_31;
        t_addLogic_b_31_payload = addLogic_zero;
      end
      2'b10 : begin
        t_addLogic_b_0_payload = addLogic_res_0;
        t_addLogic_b_1_payload = addLogic_res_1;
        t_addLogic_b_2_payload = addLogic_res_2;
        t_addLogic_b_3_payload = addLogic_res_3;
        t_addLogic_b_4_payload = addLogic_res_4;
        t_addLogic_b_5_payload = addLogic_res_5;
        t_addLogic_b_6_payload = addLogic_res_6;
        t_addLogic_b_7_payload = addLogic_res_7;
        t_addLogic_b_8_payload = addLogic_res_8;
        t_addLogic_b_9_payload = addLogic_res_9;
        t_addLogic_b_10_payload = addLogic_res_10;
        t_addLogic_b_11_payload = addLogic_res_11;
        t_addLogic_b_12_payload = addLogic_res_12;
        t_addLogic_b_13_payload = addLogic_res_13;
        t_addLogic_b_14_payload = addLogic_res_14;
        t_addLogic_b_15_payload = addLogic_res_15;
        t_addLogic_b_16_payload = addLogic_res_16;
        t_addLogic_b_17_payload = addLogic_res_17;
        t_addLogic_b_18_payload = addLogic_res_18;
        t_addLogic_b_19_payload = addLogic_res_19;
        t_addLogic_b_20_payload = addLogic_res_20;
        t_addLogic_b_21_payload = addLogic_res_21;
        t_addLogic_b_22_payload = addLogic_res_22;
        t_addLogic_b_23_payload = addLogic_res_23;
        t_addLogic_b_24_payload = addLogic_res_24;
        t_addLogic_b_25_payload = addLogic_res_25;
        t_addLogic_b_26_payload = addLogic_res_26;
        t_addLogic_b_27_payload = addLogic_res_27;
        t_addLogic_b_28_payload = addLogic_res_28;
        t_addLogic_b_29_payload = addLogic_res_29;
        t_addLogic_b_30_payload = addLogic_res_30;
        t_addLogic_b_31_payload = addLogic_res_31;
      end
      default : begin
        t_addLogic_b_0_payload = addLogic_zero;
        t_addLogic_b_1_payload = addLogic_zero;
        t_addLogic_b_2_payload = addLogic_zero;
        t_addLogic_b_3_payload = addLogic_zero;
        t_addLogic_b_4_payload = addLogic_zero;
        t_addLogic_b_5_payload = addLogic_zero;
        t_addLogic_b_6_payload = addLogic_zero;
        t_addLogic_b_7_payload = addLogic_zero;
        t_addLogic_b_8_payload = addLogic_zero;
        t_addLogic_b_9_payload = addLogic_zero;
        t_addLogic_b_10_payload = addLogic_zero;
        t_addLogic_b_11_payload = addLogic_zero;
        t_addLogic_b_12_payload = addLogic_zero;
        t_addLogic_b_13_payload = addLogic_zero;
        t_addLogic_b_14_payload = addLogic_zero;
        t_addLogic_b_15_payload = addLogic_zero;
        t_addLogic_b_16_payload = addLogic_zero;
        t_addLogic_b_17_payload = addLogic_zero;
        t_addLogic_b_18_payload = addLogic_zero;
        t_addLogic_b_19_payload = addLogic_zero;
        t_addLogic_b_20_payload = addLogic_zero;
        t_addLogic_b_21_payload = addLogic_zero;
        t_addLogic_b_22_payload = addLogic_zero;
        t_addLogic_b_23_payload = addLogic_zero;
        t_addLogic_b_24_payload = addLogic_zero;
        t_addLogic_b_25_payload = addLogic_zero;
        t_addLogic_b_26_payload = addLogic_zero;
        t_addLogic_b_27_payload = addLogic_zero;
        t_addLogic_b_28_payload = addLogic_zero;
        t_addLogic_b_29_payload = addLogic_zero;
        t_addLogic_b_30_payload = addLogic_zero;
        t_addLogic_b_31_payload = addLogic_zero;
      end
    endcase
  end

  always @(*) begin
    case(selFifoPushUInt)
      2'b00 : t_io_push_valid = 1'b0;
      2'b01 : t_io_push_valid = fAxpyCtrl_psumPushEn;
      default : t_io_push_valid = pAxpyCtrl_psumPushEn;
    endcase
  end

  always @(*) begin
    case(selFifoPopUInt)
      2'b00 : t_io_pop_ready = 1'b0;
      2'b01 : t_io_pop_ready = fAxpyCtrl_psumPopEn;
      default : t_io_pop_ready = pAxpyCtrl_psumPopEn;
    endcase
  end

  always @(*) begin
    case(selVldNextUInt)
      2'b00 : begin
        t_aSelNext = dotCtrl_aSelNext;
        t_bSelNext = dotCtrl_bSelNext;
      end
      2'b01 : begin
        t_aSelNext = fAxpyCtrl_aSelNext;
        t_bSelNext = fAxpyCtrl_bSelNext;
      end
      default : begin
        t_aSelNext = pAxpyCtrl_aSelNext;
        t_bSelNext = pAxpyCtrl_bSelNext;
      end
    endcase
  end

  assign tag = cfg_tdata[31 : 26];
  assign dotCond = (! cfg_tdata[24]);
  assign fAxpyCond = (cfg_tdata[24] && (t_fAxpyCond[7 : 0] != 8'h0));
  assign pAxpyCond = (cfg_tdata[24] && (t_pAxpyCond[7 : 0] == 8'h0));
  always @(*) begin
    ret_0_valid = (cfg_tvalid && dotCond);
    if(ret_0_ready) begin
      ret_0_valid = 1'b0;
    end
  end

  assign ret_0_payload = cfg_tdata;
  always @(*) begin
    ret_1_valid = (cfg_tvalid && fAxpyCond);
    if(ret_1_ready) begin
      ret_1_valid = 1'b0;
    end
  end

  assign ret_1_payload = cfg_tdata;
  always @(*) begin
    ret_2_valid = (cfg_tvalid && pAxpyCond);
    if(ret_2_ready) begin
      ret_2_valid = 1'b0;
    end
  end

  assign ret_2_payload = cfg_tdata;
  assign cfg_tready = (|{(ret_2_ready && pAxpyCond),{(ret_1_ready && fAxpyCond),(ret_0_ready && dotCond)}});
  assign fifoCtrl_rdPort_rsp = t_1_spinal_port1;
  assign addLogic_zero = 16'h0;
  assign addLogic_mul_0 = mulRes_tdata[15 : 0];
  assign addLogic_mul_1 = mulRes_tdata[31 : 16];
  assign addLogic_mul_2 = mulRes_tdata[47 : 32];
  assign addLogic_mul_3 = mulRes_tdata[63 : 48];
  assign addLogic_mul_4 = mulRes_tdata[79 : 64];
  assign addLogic_mul_5 = mulRes_tdata[95 : 80];
  assign addLogic_mul_6 = mulRes_tdata[111 : 96];
  assign addLogic_mul_7 = mulRes_tdata[127 : 112];
  assign addLogic_mul_8 = mulRes_tdata[143 : 128];
  assign addLogic_mul_9 = mulRes_tdata[159 : 144];
  assign addLogic_mul_10 = mulRes_tdata[175 : 160];
  assign addLogic_mul_11 = mulRes_tdata[191 : 176];
  assign addLogic_mul_12 = mulRes_tdata[207 : 192];
  assign addLogic_mul_13 = mulRes_tdata[223 : 208];
  assign addLogic_mul_14 = mulRes_tdata[239 : 224];
  assign addLogic_mul_15 = mulRes_tdata[255 : 240];
  assign addLogic_mul_16 = mulRes_tdata[271 : 256];
  assign addLogic_mul_17 = mulRes_tdata[287 : 272];
  assign addLogic_mul_18 = mulRes_tdata[303 : 288];
  assign addLogic_mul_19 = mulRes_tdata[319 : 304];
  assign addLogic_mul_20 = mulRes_tdata[335 : 320];
  assign addLogic_mul_21 = mulRes_tdata[351 : 336];
  assign addLogic_mul_22 = mulRes_tdata[367 : 352];
  assign addLogic_mul_23 = mulRes_tdata[383 : 368];
  assign addLogic_mul_24 = mulRes_tdata[399 : 384];
  assign addLogic_mul_25 = mulRes_tdata[415 : 400];
  assign addLogic_mul_26 = mulRes_tdata[431 : 416];
  assign addLogic_mul_27 = mulRes_tdata[447 : 432];
  assign addLogic_mul_28 = mulRes_tdata[463 : 448];
  assign addLogic_mul_29 = mulRes_tdata[479 : 464];
  assign addLogic_mul_30 = mulRes_tdata[495 : 480];
  assign addLogic_mul_31 = mulRes_tdata[511 : 496];
  assign addLogic_res_0 = resAdd_tdata[15 : 0];
  assign addLogic_res_1 = resAdd_tdata[31 : 16];
  assign addLogic_res_2 = resAdd_tdata[47 : 32];
  assign addLogic_res_3 = resAdd_tdata[63 : 48];
  assign addLogic_res_4 = resAdd_tdata[79 : 64];
  assign addLogic_res_5 = resAdd_tdata[95 : 80];
  assign addLogic_res_6 = resAdd_tdata[111 : 96];
  assign addLogic_res_7 = resAdd_tdata[127 : 112];
  assign addLogic_res_8 = resAdd_tdata[143 : 128];
  assign addLogic_res_9 = resAdd_tdata[159 : 144];
  assign addLogic_res_10 = resAdd_tdata[175 : 160];
  assign addLogic_res_11 = resAdd_tdata[191 : 176];
  assign addLogic_res_12 = resAdd_tdata[207 : 192];
  assign addLogic_res_13 = resAdd_tdata[223 : 208];
  assign addLogic_res_14 = resAdd_tdata[239 : 224];
  assign addLogic_res_15 = resAdd_tdata[255 : 240];
  assign addLogic_res_16 = resAdd_tdata[271 : 256];
  assign addLogic_res_17 = resAdd_tdata[287 : 272];
  assign addLogic_res_18 = resAdd_tdata[303 : 288];
  assign addLogic_res_19 = resAdd_tdata[319 : 304];
  assign addLogic_res_20 = resAdd_tdata[335 : 320];
  assign addLogic_res_21 = resAdd_tdata[351 : 336];
  assign addLogic_res_22 = resAdd_tdata[367 : 352];
  assign addLogic_res_23 = resAdd_tdata[383 : 368];
  assign addLogic_res_24 = resAdd_tdata[399 : 384];
  assign addLogic_res_25 = resAdd_tdata[415 : 400];
  assign addLogic_res_26 = resAdd_tdata[431 : 416];
  assign addLogic_res_27 = resAdd_tdata[447 : 432];
  assign addLogic_res_28 = resAdd_tdata[463 : 448];
  assign addLogic_res_29 = resAdd_tdata[479 : 464];
  assign addLogic_res_30 = resAdd_tdata[495 : 480];
  assign addLogic_res_31 = resAdd_tdata[511 : 496];
  assign addLogic_a_0_valid = 1'b1;
  assign addLogic_a_1_valid = 1'b1;
  assign addLogic_a_2_valid = 1'b1;
  assign addLogic_a_3_valid = 1'b1;
  assign addLogic_a_4_valid = 1'b1;
  assign addLogic_a_5_valid = 1'b1;
  assign addLogic_a_6_valid = 1'b1;
  assign addLogic_a_7_valid = 1'b1;
  assign addLogic_a_8_valid = 1'b1;
  assign addLogic_a_9_valid = 1'b1;
  assign addLogic_a_10_valid = 1'b1;
  assign addLogic_a_11_valid = 1'b1;
  assign addLogic_a_12_valid = 1'b1;
  assign addLogic_a_13_valid = 1'b1;
  assign addLogic_a_14_valid = 1'b1;
  assign addLogic_a_15_valid = 1'b1;
  assign addLogic_a_16_valid = 1'b1;
  assign addLogic_a_17_valid = 1'b1;
  assign addLogic_a_18_valid = 1'b1;
  assign addLogic_a_19_valid = 1'b1;
  assign addLogic_a_20_valid = 1'b1;
  assign addLogic_a_21_valid = 1'b1;
  assign addLogic_a_22_valid = 1'b1;
  assign addLogic_a_23_valid = 1'b1;
  assign addLogic_a_24_valid = 1'b1;
  assign addLogic_a_25_valid = 1'b1;
  assign addLogic_a_26_valid = 1'b1;
  assign addLogic_a_27_valid = 1'b1;
  assign addLogic_a_28_valid = 1'b1;
  assign addLogic_a_29_valid = 1'b1;
  assign addLogic_a_30_valid = 1'b1;
  assign addLogic_a_31_valid = 1'b1;
  assign addLogic_b_0_valid = 1'b1;
  assign addLogic_b_1_valid = 1'b1;
  assign addLogic_b_2_valid = 1'b1;
  assign addLogic_b_3_valid = 1'b1;
  assign addLogic_b_4_valid = 1'b1;
  assign addLogic_b_5_valid = 1'b1;
  assign addLogic_b_6_valid = 1'b1;
  assign addLogic_b_7_valid = 1'b1;
  assign addLogic_b_8_valid = 1'b1;
  assign addLogic_b_9_valid = 1'b1;
  assign addLogic_b_10_valid = 1'b1;
  assign addLogic_b_11_valid = 1'b1;
  assign addLogic_b_12_valid = 1'b1;
  assign addLogic_b_13_valid = 1'b1;
  assign addLogic_b_14_valid = 1'b1;
  assign addLogic_b_15_valid = 1'b1;
  assign addLogic_b_16_valid = 1'b1;
  assign addLogic_b_17_valid = 1'b1;
  assign addLogic_b_18_valid = 1'b1;
  assign addLogic_b_19_valid = 1'b1;
  assign addLogic_b_20_valid = 1'b1;
  assign addLogic_b_21_valid = 1'b1;
  assign addLogic_b_22_valid = 1'b1;
  assign addLogic_b_23_valid = 1'b1;
  assign addLogic_b_24_valid = 1'b1;
  assign addLogic_b_25_valid = 1'b1;
  assign addLogic_b_26_valid = 1'b1;
  assign addLogic_b_27_valid = 1'b1;
  assign addLogic_b_28_valid = 1'b1;
  assign addLogic_b_29_valid = 1'b1;
  assign addLogic_b_30_valid = 1'b1;
  assign addLogic_b_31_valid = 1'b1;
  assign addLogic_c_0_valid = addLogic_a_0_add_ip_m_axis_result_tvalid;
  assign addLogic_c_0_payload = addLogic_a_0_add_ip_m_axis_result_tdata;
  assign addLogic_c_1_valid = addLogic_a_1_add_ip_m_axis_result_tvalid;
  assign addLogic_c_1_payload = addLogic_a_1_add_ip_m_axis_result_tdata;
  assign addLogic_c_2_valid = addLogic_a_2_add_ip_m_axis_result_tvalid;
  assign addLogic_c_2_payload = addLogic_a_2_add_ip_m_axis_result_tdata;
  assign addLogic_c_3_valid = addLogic_a_3_add_ip_m_axis_result_tvalid;
  assign addLogic_c_3_payload = addLogic_a_3_add_ip_m_axis_result_tdata;
  assign addLogic_c_4_valid = addLogic_a_4_add_ip_m_axis_result_tvalid;
  assign addLogic_c_4_payload = addLogic_a_4_add_ip_m_axis_result_tdata;
  assign addLogic_c_5_valid = addLogic_a_5_add_ip_m_axis_result_tvalid;
  assign addLogic_c_5_payload = addLogic_a_5_add_ip_m_axis_result_tdata;
  assign addLogic_c_6_valid = addLogic_a_6_add_ip_m_axis_result_tvalid;
  assign addLogic_c_6_payload = addLogic_a_6_add_ip_m_axis_result_tdata;
  assign addLogic_c_7_valid = addLogic_a_7_add_ip_m_axis_result_tvalid;
  assign addLogic_c_7_payload = addLogic_a_7_add_ip_m_axis_result_tdata;
  assign addLogic_c_8_valid = addLogic_a_8_add_ip_m_axis_result_tvalid;
  assign addLogic_c_8_payload = addLogic_a_8_add_ip_m_axis_result_tdata;
  assign addLogic_c_9_valid = addLogic_a_9_add_ip_m_axis_result_tvalid;
  assign addLogic_c_9_payload = addLogic_a_9_add_ip_m_axis_result_tdata;
  assign addLogic_c_10_valid = addLogic_a_10_add_ip_m_axis_result_tvalid;
  assign addLogic_c_10_payload = addLogic_a_10_add_ip_m_axis_result_tdata;
  assign addLogic_c_11_valid = addLogic_a_11_add_ip_m_axis_result_tvalid;
  assign addLogic_c_11_payload = addLogic_a_11_add_ip_m_axis_result_tdata;
  assign addLogic_c_12_valid = addLogic_a_12_add_ip_m_axis_result_tvalid;
  assign addLogic_c_12_payload = addLogic_a_12_add_ip_m_axis_result_tdata;
  assign addLogic_c_13_valid = addLogic_a_13_add_ip_m_axis_result_tvalid;
  assign addLogic_c_13_payload = addLogic_a_13_add_ip_m_axis_result_tdata;
  assign addLogic_c_14_valid = addLogic_a_14_add_ip_m_axis_result_tvalid;
  assign addLogic_c_14_payload = addLogic_a_14_add_ip_m_axis_result_tdata;
  assign addLogic_c_15_valid = addLogic_a_15_add_ip_m_axis_result_tvalid;
  assign addLogic_c_15_payload = addLogic_a_15_add_ip_m_axis_result_tdata;
  assign addLogic_c_16_valid = addLogic_a_16_add_ip_m_axis_result_tvalid;
  assign addLogic_c_16_payload = addLogic_a_16_add_ip_m_axis_result_tdata;
  assign addLogic_c_17_valid = addLogic_a_17_add_ip_m_axis_result_tvalid;
  assign addLogic_c_17_payload = addLogic_a_17_add_ip_m_axis_result_tdata;
  assign addLogic_c_18_valid = addLogic_a_18_add_ip_m_axis_result_tvalid;
  assign addLogic_c_18_payload = addLogic_a_18_add_ip_m_axis_result_tdata;
  assign addLogic_c_19_valid = addLogic_a_19_add_ip_m_axis_result_tvalid;
  assign addLogic_c_19_payload = addLogic_a_19_add_ip_m_axis_result_tdata;
  assign addLogic_c_20_valid = addLogic_a_20_add_ip_m_axis_result_tvalid;
  assign addLogic_c_20_payload = addLogic_a_20_add_ip_m_axis_result_tdata;
  assign addLogic_c_21_valid = addLogic_a_21_add_ip_m_axis_result_tvalid;
  assign addLogic_c_21_payload = addLogic_a_21_add_ip_m_axis_result_tdata;
  assign addLogic_c_22_valid = addLogic_a_22_add_ip_m_axis_result_tvalid;
  assign addLogic_c_22_payload = addLogic_a_22_add_ip_m_axis_result_tdata;
  assign addLogic_c_23_valid = addLogic_a_23_add_ip_m_axis_result_tvalid;
  assign addLogic_c_23_payload = addLogic_a_23_add_ip_m_axis_result_tdata;
  assign addLogic_c_24_valid = addLogic_a_24_add_ip_m_axis_result_tvalid;
  assign addLogic_c_24_payload = addLogic_a_24_add_ip_m_axis_result_tdata;
  assign addLogic_c_25_valid = addLogic_a_25_add_ip_m_axis_result_tvalid;
  assign addLogic_c_25_payload = addLogic_a_25_add_ip_m_axis_result_tdata;
  assign addLogic_c_26_valid = addLogic_a_26_add_ip_m_axis_result_tvalid;
  assign addLogic_c_26_payload = addLogic_a_26_add_ip_m_axis_result_tdata;
  assign addLogic_c_27_valid = addLogic_a_27_add_ip_m_axis_result_tvalid;
  assign addLogic_c_27_payload = addLogic_a_27_add_ip_m_axis_result_tdata;
  assign addLogic_c_28_valid = addLogic_a_28_add_ip_m_axis_result_tvalid;
  assign addLogic_c_28_payload = addLogic_a_28_add_ip_m_axis_result_tdata;
  assign addLogic_c_29_valid = addLogic_a_29_add_ip_m_axis_result_tvalid;
  assign addLogic_c_29_payload = addLogic_a_29_add_ip_m_axis_result_tdata;
  assign addLogic_c_30_valid = addLogic_a_30_add_ip_m_axis_result_tvalid;
  assign addLogic_c_30_payload = addLogic_a_30_add_ip_m_axis_result_tdata;
  assign addLogic_c_31_valid = addLogic_a_31_add_ip_m_axis_result_tvalid;
  assign addLogic_c_31_payload = addLogic_a_31_add_ip_m_axis_result_tdata;
  assign addLogic_a_0_payload = t_addLogic_a_0_payload;
  assign addLogic_b_0_payload = t_addLogic_b_0_payload;
  assign addLogic_a_1_payload = t_addLogic_a_1_payload;
  assign addLogic_b_1_payload = t_addLogic_b_1_payload;
  assign addLogic_a_2_payload = t_addLogic_a_2_payload;
  assign addLogic_b_2_payload = t_addLogic_b_2_payload;
  assign addLogic_a_3_payload = t_addLogic_a_3_payload;
  assign addLogic_b_3_payload = t_addLogic_b_3_payload;
  assign addLogic_a_4_payload = t_addLogic_a_4_payload;
  assign addLogic_b_4_payload = t_addLogic_b_4_payload;
  assign addLogic_a_5_payload = t_addLogic_a_5_payload;
  assign addLogic_b_5_payload = t_addLogic_b_5_payload;
  assign addLogic_a_6_payload = t_addLogic_a_6_payload;
  assign addLogic_b_6_payload = t_addLogic_b_6_payload;
  assign addLogic_a_7_payload = t_addLogic_a_7_payload;
  assign addLogic_b_7_payload = t_addLogic_b_7_payload;
  assign addLogic_a_8_payload = t_addLogic_a_8_payload;
  assign addLogic_b_8_payload = t_addLogic_b_8_payload;
  assign addLogic_a_9_payload = t_addLogic_a_9_payload;
  assign addLogic_b_9_payload = t_addLogic_b_9_payload;
  assign addLogic_a_10_payload = t_addLogic_a_10_payload;
  assign addLogic_b_10_payload = t_addLogic_b_10_payload;
  assign addLogic_a_11_payload = t_addLogic_a_11_payload;
  assign addLogic_b_11_payload = t_addLogic_b_11_payload;
  assign addLogic_a_12_payload = t_addLogic_a_12_payload;
  assign addLogic_b_12_payload = t_addLogic_b_12_payload;
  assign addLogic_a_13_payload = t_addLogic_a_13_payload;
  assign addLogic_b_13_payload = t_addLogic_b_13_payload;
  assign addLogic_a_14_payload = t_addLogic_a_14_payload;
  assign addLogic_b_14_payload = t_addLogic_b_14_payload;
  assign addLogic_a_15_payload = t_addLogic_a_15_payload;
  assign addLogic_b_15_payload = t_addLogic_b_15_payload;
  assign addLogic_a_16_payload = t_addLogic_a_16_payload;
  assign addLogic_b_16_payload = t_addLogic_b_16_payload;
  assign addLogic_a_17_payload = t_addLogic_a_17_payload;
  assign addLogic_b_17_payload = t_addLogic_b_17_payload;
  assign addLogic_a_18_payload = t_addLogic_a_18_payload;
  assign addLogic_b_18_payload = t_addLogic_b_18_payload;
  assign addLogic_a_19_payload = t_addLogic_a_19_payload;
  assign addLogic_b_19_payload = t_addLogic_b_19_payload;
  assign addLogic_a_20_payload = t_addLogic_a_20_payload;
  assign addLogic_b_20_payload = t_addLogic_b_20_payload;
  assign addLogic_a_21_payload = t_addLogic_a_21_payload;
  assign addLogic_b_21_payload = t_addLogic_b_21_payload;
  assign addLogic_a_22_payload = t_addLogic_a_22_payload;
  assign addLogic_b_22_payload = t_addLogic_b_22_payload;
  assign addLogic_a_23_payload = t_addLogic_a_23_payload;
  assign addLogic_b_23_payload = t_addLogic_b_23_payload;
  assign addLogic_a_24_payload = t_addLogic_a_24_payload;
  assign addLogic_b_24_payload = t_addLogic_b_24_payload;
  assign addLogic_a_25_payload = t_addLogic_a_25_payload;
  assign addLogic_b_25_payload = t_addLogic_b_25_payload;
  assign addLogic_a_26_payload = t_addLogic_a_26_payload;
  assign addLogic_b_26_payload = t_addLogic_b_26_payload;
  assign addLogic_a_27_payload = t_addLogic_a_27_payload;
  assign addLogic_b_27_payload = t_addLogic_b_27_payload;
  assign addLogic_a_28_payload = t_addLogic_a_28_payload;
  assign addLogic_b_28_payload = t_addLogic_b_28_payload;
  assign addLogic_a_29_payload = t_addLogic_a_29_payload;
  assign addLogic_b_29_payload = t_addLogic_b_29_payload;
  assign addLogic_a_30_payload = t_addLogic_a_30_payload;
  assign addLogic_b_30_payload = t_addLogic_b_30_payload;
  assign addLogic_a_31_payload = t_addLogic_a_31_payload;
  assign addLogic_b_31_payload = t_addLogic_b_31_payload;
  assign addLogic_vecOut_0 = addLogic_c_0_payload;
  assign addLogic_vecOut_1 = addLogic_c_1_payload;
  assign addLogic_vecOut_2 = addLogic_c_2_payload;
  assign addLogic_vecOut_3 = addLogic_c_3_payload;
  assign addLogic_vecOut_4 = addLogic_c_4_payload;
  assign addLogic_vecOut_5 = addLogic_c_5_payload;
  assign addLogic_vecOut_6 = addLogic_c_6_payload;
  assign addLogic_vecOut_7 = addLogic_c_7_payload;
  assign addLogic_vecOut_8 = addLogic_c_8_payload;
  assign addLogic_vecOut_9 = addLogic_c_9_payload;
  assign addLogic_vecOut_10 = addLogic_c_10_payload;
  assign addLogic_vecOut_11 = addLogic_c_11_payload;
  assign addLogic_vecOut_12 = addLogic_c_12_payload;
  assign addLogic_vecOut_13 = addLogic_c_13_payload;
  assign addLogic_vecOut_14 = addLogic_c_14_payload;
  assign addLogic_vecOut_15 = addLogic_c_15_payload;
  assign addLogic_vecOut_16 = addLogic_c_16_payload;
  assign addLogic_vecOut_17 = addLogic_c_17_payload;
  assign addLogic_vecOut_18 = addLogic_c_18_payload;
  assign addLogic_vecOut_19 = addLogic_c_19_payload;
  assign addLogic_vecOut_20 = addLogic_c_20_payload;
  assign addLogic_vecOut_21 = addLogic_c_21_payload;
  assign addLogic_vecOut_22 = addLogic_c_22_payload;
  assign addLogic_vecOut_23 = addLogic_c_23_payload;
  assign addLogic_vecOut_24 = addLogic_c_24_payload;
  assign addLogic_vecOut_25 = addLogic_c_25_payload;
  assign addLogic_vecOut_26 = addLogic_c_26_payload;
  assign addLogic_vecOut_27 = addLogic_c_27_payload;
  assign addLogic_vecOut_28 = addLogic_c_28_payload;
  assign addLogic_vecOut_29 = addLogic_c_29_payload;
  assign addLogic_vecOut_30 = addLogic_c_30_payload;
  assign addLogic_vecOut_31 = addLogic_c_31_payload;
  assign addLogic_scalarOut = addLogic_c_0_payload;
  assign addLogic_psumDly_0 = addLogic_popDly[15 : 0];
  assign addLogic_psumDly_1 = addLogic_popDly[31 : 16];
  assign addLogic_psumDly_2 = addLogic_popDly[47 : 32];
  assign addLogic_psumDly_3 = addLogic_popDly[63 : 48];
  assign addLogic_psumDly_4 = addLogic_popDly[79 : 64];
  assign addLogic_psumDly_5 = addLogic_popDly[95 : 80];
  assign addLogic_psumDly_6 = addLogic_popDly[111 : 96];
  assign addLogic_psumDly_7 = addLogic_popDly[127 : 112];
  assign addLogic_psumDly_8 = addLogic_popDly[143 : 128];
  assign addLogic_psumDly_9 = addLogic_popDly[159 : 144];
  assign addLogic_psumDly_10 = addLogic_popDly[175 : 160];
  assign addLogic_psumDly_11 = addLogic_popDly[191 : 176];
  assign addLogic_psumDly_12 = addLogic_popDly[207 : 192];
  assign addLogic_psumDly_13 = addLogic_popDly[223 : 208];
  assign addLogic_psumDly_14 = addLogic_popDly[239 : 224];
  assign addLogic_psumDly_15 = addLogic_popDly[255 : 240];
  assign addLogic_psumDly_16 = addLogic_popDly[271 : 256];
  assign addLogic_psumDly_17 = addLogic_popDly[287 : 272];
  assign addLogic_psumDly_18 = addLogic_popDly[303 : 288];
  assign addLogic_psumDly_19 = addLogic_popDly[319 : 304];
  assign addLogic_psumDly_20 = addLogic_popDly[335 : 320];
  assign addLogic_psumDly_21 = addLogic_popDly[351 : 336];
  assign addLogic_psumDly_22 = addLogic_popDly[367 : 352];
  assign addLogic_psumDly_23 = addLogic_popDly[383 : 368];
  assign addLogic_psumDly_24 = addLogic_popDly[399 : 384];
  assign addLogic_psumDly_25 = addLogic_popDly[415 : 400];
  assign addLogic_psumDly_26 = addLogic_popDly[431 : 416];
  assign addLogic_psumDly_27 = addLogic_popDly[447 : 432];
  assign addLogic_psumDly_28 = addLogic_popDly[463 : 448];
  assign addLogic_psumDly_29 = addLogic_popDly[479 : 464];
  assign addLogic_psumDly_30 = addLogic_popDly[495 : 480];
  assign addLogic_psumDly_31 = addLogic_popDly[511 : 496];
  assign addLogic_psum_0 = fifoCtrl_io_pop_payload[15 : 0];
  assign addLogic_psum_1 = fifoCtrl_io_pop_payload[31 : 16];
  assign addLogic_psum_2 = fifoCtrl_io_pop_payload[47 : 32];
  assign addLogic_psum_3 = fifoCtrl_io_pop_payload[63 : 48];
  assign addLogic_psum_4 = fifoCtrl_io_pop_payload[79 : 64];
  assign addLogic_psum_5 = fifoCtrl_io_pop_payload[95 : 80];
  assign addLogic_psum_6 = fifoCtrl_io_pop_payload[111 : 96];
  assign addLogic_psum_7 = fifoCtrl_io_pop_payload[127 : 112];
  assign addLogic_psum_8 = fifoCtrl_io_pop_payload[143 : 128];
  assign addLogic_psum_9 = fifoCtrl_io_pop_payload[159 : 144];
  assign addLogic_psum_10 = fifoCtrl_io_pop_payload[175 : 160];
  assign addLogic_psum_11 = fifoCtrl_io_pop_payload[191 : 176];
  assign addLogic_psum_12 = fifoCtrl_io_pop_payload[207 : 192];
  assign addLogic_psum_13 = fifoCtrl_io_pop_payload[223 : 208];
  assign addLogic_psum_14 = fifoCtrl_io_pop_payload[239 : 224];
  assign addLogic_psum_15 = fifoCtrl_io_pop_payload[255 : 240];
  assign addLogic_psum_16 = fifoCtrl_io_pop_payload[271 : 256];
  assign addLogic_psum_17 = fifoCtrl_io_pop_payload[287 : 272];
  assign addLogic_psum_18 = fifoCtrl_io_pop_payload[303 : 288];
  assign addLogic_psum_19 = fifoCtrl_io_pop_payload[319 : 304];
  assign addLogic_psum_20 = fifoCtrl_io_pop_payload[335 : 320];
  assign addLogic_psum_21 = fifoCtrl_io_pop_payload[351 : 336];
  assign addLogic_psum_22 = fifoCtrl_io_pop_payload[367 : 352];
  assign addLogic_psum_23 = fifoCtrl_io_pop_payload[383 : 368];
  assign addLogic_psum_24 = fifoCtrl_io_pop_payload[399 : 384];
  assign addLogic_psum_25 = fifoCtrl_io_pop_payload[415 : 400];
  assign addLogic_psum_26 = fifoCtrl_io_pop_payload[431 : 416];
  assign addLogic_psum_27 = fifoCtrl_io_pop_payload[447 : 432];
  assign addLogic_psum_28 = fifoCtrl_io_pop_payload[463 : 448];
  assign addLogic_psum_29 = fifoCtrl_io_pop_payload[479 : 464];
  assign addLogic_psum_30 = fifoCtrl_io_pop_payload[495 : 480];
  assign addLogic_psum_31 = fifoCtrl_io_pop_payload[511 : 496];
  assign fifoCtrl_io_push_payload = {addLogic_vecOut_31,{addLogic_vecOut_30,{addLogic_vecOut_29,{addLogic_vecOut_28,{addLogic_vecOut_27,{addLogic_vecOut_26,{addLogic_vecOut_25,{addLogic_vecOut_24,{addLogic_vecOut_23,{addLogic_vecOut_22,{addLogic_vecOut_21,{addLogic_vecOut_20,{addLogic_vecOut_19,{addLogic_vecOut_18,{addLogic_vecOut_17,{addLogic_vecOut_16,t_io_push_payload}}}}}}}}}}}}}}}};
  assign vecOut_tdata = {addLogic_vecOut_31,{addLogic_vecOut_30,{addLogic_vecOut_29,{addLogic_vecOut_28,{addLogic_vecOut_27,{addLogic_vecOut_26,{addLogic_vecOut_25,{addLogic_vecOut_24,{addLogic_vecOut_23,{addLogic_vecOut_22,{addLogic_vecOut_21,{addLogic_vecOut_20,{addLogic_vecOut_19,{addLogic_vecOut_18,{addLogic_vecOut_17,{addLogic_vecOut_16,t_vecOut_tdata}}}}}}}}}}}}}}}};
  assign dotCtrl_aSelNext = 2'b01;
  assign dotCtrl_bSelNext = 2'b01;
  assign dotCtrl_enMulResCntNext = (mulResFireNext && ret_0_valid);
  assign t_dotCtrl_mulResCntOvf_0 = (t_dotCtrl_muResCnt_0 == t_t_dotCtrl_mulResCntOvf_0[7 : 0]);
  assign t_dotCtrl_mulResCntOvf_1 = (t_dotCtrl_muResCnt_1 == ret_0_payload[15 : 0]);
  always @(*) begin
    t_dotCtrl_muResCnt_0 = dotCtrl_muResCnt_0;
    if(dotCtrl_enMulResCnt) begin
      t_dotCtrl_muResCnt_0 = (dotCtrl_muResCnt_0 + 8'h01);
      if(dotCtrl_mulResCntOvf_0) begin
        t_dotCtrl_muResCnt_0 = 8'h0;
      end
    end
  end

  always @(*) begin
    t_dotCtrl_muResCnt_1 = dotCtrl_muResCnt_1;
    if(dotCtrl_enMulResCnt) begin
      if(dotCtrl_mulResCntOvf_0) begin
        t_dotCtrl_muResCnt_1 = (dotCtrl_muResCnt_1 + 16'h0001);
        if(dotCtrl_mulResCntOvf_1) begin
          t_dotCtrl_muResCnt_1 = 16'h0;
        end
      end
    end
  end

  assign dotCtrl_flagClrCond = (dotCtrl_enMulResCnt && dotCtrl_mulResCntOvfReduce);
  always @(*) begin
    dotCtrl_flagInvNext = dotCtrl_flagInv;
    if(dotCtrl_flagClrCond) begin
      dotCtrl_flagInvNext = 1'b0;
    end
    if(dotCtrl_flagSetCond) begin
      dotCtrl_flagInvNext = 1'b1;
    end
  end

  assign dotCtrl_accCntOvf = (t_dotCtrl_accCntOvf == t_dotCtrl_accCntOvf_1[7 : 0]);
  assign scalarOut_tvalid = dotCtrl_enAddOutCnt;
  assign scalarOut_tdata = addLogic_scalarOut;
  assign scalarOut_tuser = tag;
  assign scalarOut_tlast = dotCtrl_accCntOvf_delay_30_1;
  assign ret_0_ready = (dotCtrl_enAddOutCnt && (dotCtrl_addOutCntOvf_0 && dotCtrl_addOutCntOvf_1));
  assign postCfgTag = dotCtrl_cfgPayload[31 : 26];
  assign fAxpyCtrl_enMulResCntNext = (mulResFireNext && ret_1_valid);
  assign t_fAxpyCtrl_mulResCntOvf_0 = (t_fAxpyCtrl_muResCnt_0 == t_t_fAxpyCtrl_mulResCntOvf_0[7 : 0]);
  assign t_fAxpyCtrl_mulResCntOvf_1 = (t_fAxpyCtrl_muResCnt_1 == ret_1_payload[15 : 0]);
  always @(*) begin
    t_fAxpyCtrl_muResCnt_0 = fAxpyCtrl_muResCnt_0;
    if(fAxpyCtrl_enMulResCnt) begin
      t_fAxpyCtrl_muResCnt_0 = (fAxpyCtrl_muResCnt_0 + 8'h01);
      if(fAxpyCtrl_mulResCntOvf_0) begin
        t_fAxpyCtrl_muResCnt_0 = 8'h0;
      end
    end
  end

  always @(*) begin
    t_fAxpyCtrl_muResCnt_1 = fAxpyCtrl_muResCnt_1;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        t_fAxpyCtrl_muResCnt_1 = (fAxpyCtrl_muResCnt_1 + 16'h0001);
        if(fAxpyCtrl_mulResCntOvf_1) begin
          t_fAxpyCtrl_muResCnt_1 = 16'h0;
        end
      end
    end
  end

  always @(*) begin
    fAxpyCtrl_mulResCntLastZeroNext = fAxpyCtrl_mulResCntLastZero;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        fAxpyCtrl_mulResCntLastZeroNext = 1'b0;
        if(fAxpyCtrl_mulResCntOvf_1) begin
          fAxpyCtrl_mulResCntLastZeroNext = 1'b1;
        end
      end
    end
  end

  always @(*) begin
    fAxpyCtrl_mulResCntLastNotZeroNext = fAxpyCtrl_mulResCntLastNotZero;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        fAxpyCtrl_mulResCntLastNotZeroNext = 1'b1;
        if(fAxpyCtrl_mulResCntOvf_1) begin
          fAxpyCtrl_mulResCntLastNotZeroNext = 1'b0;
        end
      end
    end
  end

  assign fAxpyCtrl_psumPushEn = fAxpyCtrl_psumPushEnReg;
  assign fAxpyCtrl_resAddReadyNext = ((fAxpyCtrl_enMulResCntNext && fAxpyCtrl_mulResCntLastZeroNext) && ret_1_payload[25]);
  assign resAdd_tready = fAxpyCtrl_resAddReady;
  assign fAxpyCtrl_psumPopEnRegNext = (fAxpyCtrl_enMulResCntNext && fAxpyCtrl_mulResCntLastNotZeroNext);
  assign fAxpyCtrl_psumPopEn = fAxpyCtrl_psumPopEnReg;
  assign fAxpyCtrl_aSelNext = 2'b00;
  always @(*) begin
    fAxpyCtrl_bSelNext = 2'b11;
    if(fAxpyCtrl_resAddReadyNext) begin
      fAxpyCtrl_bSelNext = 2'b10;
    end
    if(fAxpyCtrl_psumPopEnRegNext) begin
      fAxpyCtrl_bSelNext = 2'b00;
    end
  end

  assign ret_1_ready = (fAxpyCtrl_enMulResCnt && fAxpyCtrl_mulResCntOvfReduce);
  assign fAxpyCtrl_vecOutVld = (fAxpyCtrl_enAddOutCnt && fAxpyCtrl_addOutCntOvf_1);
  always @(*) begin
    pAxpyCtrl_cycleReduceNext = pAxpyCtrl_cycleReduce;
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_cycleReduceNext = 1'b1;
      end
    end
    if(pAxpyCtrl_enCycleCnt) begin
      if(pAxpyCtrl_lastElem) begin
        pAxpyCtrl_cycleReduceNext = 1'b0;
      end
    end
  end

  assign pAxpyCtrl_enMulResCntNext = (mulResFireNext && ret_2_valid);
  assign pAxpyCtrl_mulResCntLow = pAxpyCtrl_mulResCnt[2 : 0];
  assign pAxpyCtrl_mulResCntHigh = pAxpyCtrl_mulResCnt[15 : 3];
  assign pAxpyCtrl_mulResCntOvfNext = (pAxpyCtrl_mulResCntNext == ret_2_payload[15 : 0]);
  always @(*) begin
    pAxpyCtrl_mulResCntHighZeroNext = pAxpyCtrl_mulResCntHighZero;
    if(pAxpyCtrl_enMulResCnt) begin
      if(t_when) begin
        pAxpyCtrl_mulResCntHighZeroNext = 1'b0;
      end
    end
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntHighZeroNext = 1'b1;
      end
    end
  end

  always @(*) begin
    pAxpyCtrl_mulResCntHighNotZeroNext = pAxpyCtrl_mulResCntHighNotZero;
    if(pAxpyCtrl_enMulResCnt) begin
      if(t_when) begin
        pAxpyCtrl_mulResCntHighNotZeroNext = 1'b1;
      end
    end
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntHighNotZeroNext = 1'b0;
      end
    end
  end

  always @(*) begin
    pAxpyCtrl_mulResCntNext = pAxpyCtrl_mulResCnt;
    if(pAxpyCtrl_enMulResCnt) begin
      pAxpyCtrl_mulResCntNext = (pAxpyCtrl_mulResCnt + 16'h0001);
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntNext = 16'h0;
      end
    end
  end

  assign pAxpyCtrl_enAddOutCnt = (pAxpyCtrl_enMulResCntDly && (! pAxpyCtrl_cycleReduceDly));
  assign pAxpyCtrl_enCycleCnt = (pAxpyCtrl_cycleReduceDly && pAxpyCtrl_reduceVldDly);
  assign t_pAxpyCtrl_lastElemNext = 3'b110;
  assign t_pAxpyCtrl_lastElemNext_1 = (ret_2_payload[15 : 0] - 16'h0001);
  assign pAxpyCtrl_lastElemNext = (t_pAxpyCtrl_lastElemNext_2 == ((t_pAxpyCtrl_lastElemNext_3 < t_pAxpyCtrl_lastElemNext_1) ? t_pAxpyCtrl_lastElemNext_4 : t_pAxpyCtrl_lastElemNext_1));
  always @(*) begin
    pAxpyCtrl_cycleCntNext = pAxpyCtrl_cycleCnt;
    if(pAxpyCtrl_enCycleCnt) begin
      pAxpyCtrl_cycleCntNext = (pAxpyCtrl_cycleCnt + 3'b001);
      if(pAxpyCtrl_lastElem) begin
        pAxpyCtrl_cycleCntNext = 3'b000;
      end
    end
  end

  assign pAxpyCtrl_psumPushEn = (pAxpyCtrl_cycleReduceDly ? (pAxpyCtrl_enCycleCnt && (! (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem))) : pAxpyCtrl_enMulResCntDly);
  always @(*) begin
    pAxpyCtrl_psumPopEnNext = 1'b0;
    if((pAxpyCtrl_enMulResCntNext && pAxpyCtrl_mulResCntHighNotZeroNext)) begin
      pAxpyCtrl_psumPopEnNext = 1'b1;
    end
    if(pAxpyCtrl_cycleReduceNext) begin
      pAxpyCtrl_psumPopEnNext = 1'b1;
    end
  end

  assign pAxpyCtrl_aSelNext = {pAxpyCtrl_cycleReduceNext,1'b0};
  assign pAxpyCtrl_bSelBitNext = (pAxpyCtrl_enMulResCntNext && pAxpyCtrl_mulResCntHighZeroNext);
  assign pAxpyCtrl_bSelNext = {pAxpyCtrl_bSelBitNext,pAxpyCtrl_bSelBitNext};
  assign pAxpyCtrl_flagClrCond = (pAxpyCtrl_enMulResCnt && pAxpyCtrl_mulResCntOvf);
  always @(*) begin
    pAxpyCtrl_flagInvNext = pAxpyCtrl_flagInv;
    if(pAxpyCtrl_flagClrCond) begin
      pAxpyCtrl_flagInvNext = 1'b0;
    end
    if(pAxpyCtrl_flagSetCond) begin
      pAxpyCtrl_flagInvNext = 1'b1;
    end
  end

  assign add_fifoCtrl_io_pop_fire = (fifoCtrl_io_pop_valid && fifoCtrl_io_pop_ready);
  assign pAxpyCtrl_reduceVld = (pAxpyCtrl_vldToggle && add_fifoCtrl_io_pop_fire);
  always @(*) begin
    pAxpyCtrl_psumVld = add_fifoCtrl_io_pop_fire;
    if(pAxpyCtrl_cycleReduce) begin
      pAxpyCtrl_psumVld = pAxpyCtrl_reduceVld;
    end
  end

  assign ret_2_ready = (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem);
  assign pAxpyCtrl_reduceVldDly = t_pAxpyCtrl_reduceVldDly_5;
  assign pAxpyCtrl_vecOutVld = ((pAxpyCtrl_cfgVld && pAxpyCtrl_enCycleCnt) && pAxpyCtrl_lastElem);
  assign vecOut_tvalid = (fAxpyCtrl_vecOutVld || pAxpyCtrl_vecOutVld);
  assign vecOut_tuser = (fAxpyCtrl_vecOutVld ? tagAddDly : tag);
  assign selVldNextOneHot = {{ret_2_valid,ret_1_valid},ret_0_valid};
  assign t_selVldNextUInt = selVldNextOneHot[1];
  assign t_selVldNextUInt_1 = selVldNextOneHot[2];
  assign selVldNextUInt = {t_selVldNextUInt_1,t_selVldNextUInt};
  assign fifoCtrl_io_push_valid = t_io_push_valid;
  assign fifoCtrl_io_pop_ready = t_io_pop_ready;
  assign aSelNext = t_aSelNext;
  assign bSelNext = t_bSelNext;
  assign addLogic_aSel = aSel;
  assign addLogic_bSel = bSel;
  always @(*) begin
    readyNext = 1'b0;
    if(ret_0_valid) begin
      readyNext = dotCtrl_flagInvNext;
    end
    if(ret_1_valid) begin
      readyNext = 1'b1;
    end
    if(ret_2_valid) begin
      readyNext = pAxpyCtrl_flagInvNext;
    end
  end

  assign mulRes_tready = ready;
  assign mulResFireNext = (popVldNext && readyNext);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      mulResFire <= 1'b0;
      tag_delay_1 <= 6'h0;
      tag_delay_2 <= 6'h0;
      tag_delay_3 <= 6'h0;
      tag_delay_4 <= 6'h0;
      tag_delay_5 <= 6'h0;
      tag_delay_6 <= 6'h0;
      tag_delay_7 <= 6'h0;
      tag_delay_8 <= 6'h0;
      tag_delay_9 <= 6'h0;
      tag_delay_10 <= 6'h0;
      tag_delay_11 <= 6'h0;
      tag_delay_12 <= 6'h0;
      tag_delay_13 <= 6'h0;
      tag_delay_14 <= 6'h0;
      tag_delay_15 <= 6'h0;
      tag_delay_16 <= 6'h0;
      tag_delay_17 <= 6'h0;
      tag_delay_18 <= 6'h0;
      tag_delay_19 <= 6'h0;
      tag_delay_20 <= 6'h0;
      tag_delay_21 <= 6'h0;
      tagReduceDly <= 6'h0;
      tag_delay_1_1 <= 6'h0;
      tag_delay_2_1 <= 6'h0;
      tag_delay_3_1 <= 6'h0;
      tag_delay_4_1 <= 6'h0;
      tag_delay_5_1 <= 6'h0;
      tagAddDly <= 6'h0;
      dotCtrl_cfgVld <= 1'b0;
      dotCtrl_enMulResCnt <= 1'b0;
      dotCtrl_muResCnt_0 <= 8'h0;
      dotCtrl_muResCnt_1 <= 16'h0;
      dotCtrl_mulResCntOvf_0 <= 1'b0;
      dotCtrl_mulResCntOvf_1 <= 1'b0;
      dotCtrl_mulResCntOvfReduce <= 1'b0;
      dotCtrl_enMulResCnt_delay_1 <= 1'b0;
      dotCtrl_enMulResCnt_delay_2 <= 1'b0;
      dotCtrl_enMulResCnt_delay_3 <= 1'b0;
      dotCtrl_enMulResCnt_delay_4 <= 1'b0;
      dotCtrl_enMulResCnt_delay_5 <= 1'b0;
      dotCtrl_enMulResCnt_delay_6 <= 1'b0;
      dotCtrl_enMulResCnt_delay_7 <= 1'b0;
      dotCtrl_enMulResCnt_delay_8 <= 1'b0;
      dotCtrl_enMulResCnt_delay_9 <= 1'b0;
      dotCtrl_enMulResCnt_delay_10 <= 1'b0;
      dotCtrl_enMulResCnt_delay_11 <= 1'b0;
      dotCtrl_enMulResCnt_delay_12 <= 1'b0;
      dotCtrl_enMulResCnt_delay_13 <= 1'b0;
      dotCtrl_enMulResCnt_delay_14 <= 1'b0;
      dotCtrl_enMulResCnt_delay_15 <= 1'b0;
      dotCtrl_enMulResCnt_delay_16 <= 1'b0;
      dotCtrl_enMulResCnt_delay_17 <= 1'b0;
      dotCtrl_enMulResCnt_delay_18 <= 1'b0;
      dotCtrl_enMulResCnt_delay_19 <= 1'b0;
      dotCtrl_enMulResCnt_delay_20 <= 1'b0;
      dotCtrl_enMulResCnt_delay_21 <= 1'b0;
      dotCtrl_enMulResCnt_delay_22 <= 1'b0;
      dotCtrl_enMulResCnt_delay_23 <= 1'b0;
      dotCtrl_enMulResCnt_delay_24 <= 1'b0;
      dotCtrl_enMulResCnt_delay_25 <= 1'b0;
      dotCtrl_enMulResCnt_delay_26 <= 1'b0;
      dotCtrl_enMulResCnt_delay_27 <= 1'b0;
      dotCtrl_enMulResCnt_delay_28 <= 1'b0;
      dotCtrl_enMulResCnt_delay_29 <= 1'b0;
      dotCtrl_enAddOutCnt <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_1 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_2 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_3 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_4 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_5 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_6 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_7 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_8 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_9 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_10 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_11 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_12 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_13 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_14 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_15 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_16 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_17 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_18 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_19 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_20 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_21 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_22 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_23 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_24 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_25 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_26 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_27 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_28 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_29 <= 1'b0;
      dotCtrl_addOutCntOvf_0 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_1 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_2 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_3 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_4 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_5 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_6 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_7 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_8 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_9 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_10 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_11 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_12 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_13 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_14 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_15 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_16 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_17 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_18 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_19 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_20 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_21 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_22 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_23 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_24 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_25 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_26 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_27 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_28 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_29 <= 1'b0;
      dotCtrl_addOutCntOvf_1 <= 1'b0;
      dotCtrl_flagSetCond <= 1'b0;
      dotCtrl_flagInv <= 1'b1;
      dotCtrl_accCnt <= 5'h0;
      dotCtrl_accCntOvf_delay_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_2 <= 1'b0;
      dotCtrl_accCntOvf_delay_3 <= 1'b0;
      dotCtrl_accCntOvf_delay_4 <= 1'b0;
      dotCtrl_accCntOvf_delay_5 <= 1'b0;
      dotCtrl_accCntOvf_delay_6 <= 1'b0;
      dotCtrl_accCntOvf_delay_7 <= 1'b0;
      dotCtrl_accCntOvf_delay_8 <= 1'b0;
      dotCtrl_accCntOvf_delay_9 <= 1'b0;
      dotCtrl_accCntOvf_delay_10 <= 1'b0;
      dotCtrl_accCntOvf_delay_11 <= 1'b0;
      dotCtrl_accCntOvf_delay_12 <= 1'b0;
      dotCtrl_accCntOvf_delay_13 <= 1'b0;
      dotCtrl_accCntOvf_delay_14 <= 1'b0;
      dotCtrl_accCntOvf_delay_15 <= 1'b0;
      dotCtrl_accCntOvf_delay_16 <= 1'b0;
      dotCtrl_accCntOvf_delay_17 <= 1'b0;
      dotCtrl_accCntOvf_delay_18 <= 1'b0;
      dotCtrl_accCntOvf_delay_19 <= 1'b0;
      dotCtrl_accCntOvf_delay_20 <= 1'b0;
      dotCtrl_accCntOvf_delay_21 <= 1'b0;
      dotCtrl_accCntOvf_delay_22 <= 1'b0;
      dotCtrl_accCntOvf_delay_23 <= 1'b0;
      dotCtrl_accCntOvf_delay_24 <= 1'b0;
      dotCtrl_accCntOvf_delay_25 <= 1'b0;
      dotCtrl_accCntOvf_delay_26 <= 1'b0;
      dotCtrl_accCntOvf_delay_27 <= 1'b0;
      dotCtrl_accCntOvf_delay_28 <= 1'b0;
      dotCtrl_accCntOvf_delay_29 <= 1'b0;
      dotCtrl_accCntOvf_delay_30 <= 1'b0;
      dotCtrl_accCntOvf_delay_31 <= 1'b0;
      dotCtrl_accCntOvf_delay_32 <= 1'b0;
      dotCtrl_accCntOvf_delay_33 <= 1'b0;
      dotCtrl_accCntOvf_delay_34 <= 1'b0;
      dotCtrl_accCntOvf_delay_35 <= 1'b0;
      dotCtrl_accCntOvfDly <= 1'b0;
      dotCtrl_accCntOvf_delay_1_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_2_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_3_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_4_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_5_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_6_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_7_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_8_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_9_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_10_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_11_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_12_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_13_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_14_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_15_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_16_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_17_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_18_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_19_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_20_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_21_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_22_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_23_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_24_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_25_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_26_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_27_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_28_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_29_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_30_1 <= 1'b0;
      fAxpyCtrl_cfgVld <= 1'b0;
      fAxpyCtrl_enMulResCnt <= 1'b0;
      fAxpyCtrl_muResCnt_0 <= 8'h0;
      fAxpyCtrl_muResCnt_1 <= 16'h0;
      fAxpyCtrl_mulResCntOvf_0 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvfReduce <= 1'b0;
      fAxpyCtrl_mulResCntLastZero <= 1'b1;
      fAxpyCtrl_mulResCntLastNotZero <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_1 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_2 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_3 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_4 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_5 <= 1'b0;
      fAxpyCtrl_enAddOutCnt <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_2 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_3 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_4 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_5 <= 1'b0;
      fAxpyCtrl_addOutCntOvf_0 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_2 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_3 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_4 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_5 <= 1'b0;
      fAxpyCtrl_addOutCntOvf_1 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_1 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_2 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_3 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_4 <= 1'b0;
      fAxpyCtrl_psumPushEnReg <= 1'b0;
      fAxpyCtrl_resAddReady <= 1'b0;
      fAxpyCtrl_psumPopEnReg <= 1'b0;
      pAxpyCtrl_cfgVld <= 1'b0;
      pAxpyCtrl_cycleReduce <= 1'b0;
      pAxpyCtrl_cycleReduceDly <= 1'b0;
      pAxpyCtrl_enMulResCnt <= 1'b0;
      pAxpyCtrl_mulResCnt <= 16'h0;
      pAxpyCtrl_mulResCntOvf <= 1'b0;
      pAxpyCtrl_mulResCntHighZero <= 1'b1;
      pAxpyCtrl_mulResCntHighNotZero <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_1 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_2 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_3 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_4 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_5 <= 1'b0;
      pAxpyCtrl_enMulResCntDly <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_1 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_2 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_3 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_4 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_5 <= 1'b0;
      pAxpyCtrl_addOutCntOvf <= 1'b0;
      pAxpyCtrl_cycleCnt <= 3'b000;
      pAxpyCtrl_lastElem <= 1'b0;
      pAxpyCtrl_psumPopEn <= 1'b0;
      pAxpyCtrl_bSelBit <= 1'b0;
      pAxpyCtrl_flagSetCond <= 1'b0;
      pAxpyCtrl_flagInv <= 1'b1;
      pAxpyCtrl_vldToggle <= 1'b0;
      t_pAxpyCtrl_reduceVldDly <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_1 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_2 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_3 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_4 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_5 <= 1'b0;
      selVldUIntReg <= 2'b00;
      selFifoPushUInt <= 2'b00;
      selFifoPopUInt <= 2'b00;
      aSel <= 2'b01;
      bSel <= 2'b01;
      ready <= 1'b0;
    end else begin
      tag_delay_1 <= tag;
      tag_delay_2 <= tag_delay_1;
      tag_delay_3 <= tag_delay_2;
      tag_delay_4 <= tag_delay_3;
      tag_delay_5 <= tag_delay_4;
      tag_delay_6 <= tag_delay_5;
      tag_delay_7 <= tag_delay_6;
      tag_delay_8 <= tag_delay_7;
      tag_delay_9 <= tag_delay_8;
      tag_delay_10 <= tag_delay_9;
      tag_delay_11 <= tag_delay_10;
      tag_delay_12 <= tag_delay_11;
      tag_delay_13 <= tag_delay_12;
      tag_delay_14 <= tag_delay_13;
      tag_delay_15 <= tag_delay_14;
      tag_delay_16 <= tag_delay_15;
      tag_delay_17 <= tag_delay_16;
      tag_delay_18 <= tag_delay_17;
      tag_delay_19 <= tag_delay_18;
      tag_delay_20 <= tag_delay_19;
      tag_delay_21 <= tag_delay_20;
      tagReduceDly <= tag_delay_21;
      tag_delay_1_1 <= tag;
      tag_delay_2_1 <= tag_delay_1_1;
      tag_delay_3_1 <= tag_delay_2_1;
      tag_delay_4_1 <= tag_delay_3_1;
      tag_delay_5_1 <= tag_delay_4_1;
      tagAddDly <= tag_delay_5_1;
      dotCtrl_cfgVld <= ret_0_valid;
      dotCtrl_enMulResCnt <= dotCtrl_enMulResCntNext;
      dotCtrl_muResCnt_0 <= t_dotCtrl_muResCnt_0;
      dotCtrl_muResCnt_1 <= t_dotCtrl_muResCnt_1;
      dotCtrl_mulResCntOvf_0 <= t_dotCtrl_mulResCntOvf_0;
      dotCtrl_mulResCntOvf_1 <= t_dotCtrl_mulResCntOvf_1;
      dotCtrl_mulResCntOvfReduce <= (t_dotCtrl_mulResCntOvf_0 && t_dotCtrl_mulResCntOvf_1);
      dotCtrl_enMulResCnt_delay_1 <= dotCtrl_enMulResCnt;
      dotCtrl_enMulResCnt_delay_2 <= dotCtrl_enMulResCnt_delay_1;
      dotCtrl_enMulResCnt_delay_3 <= dotCtrl_enMulResCnt_delay_2;
      dotCtrl_enMulResCnt_delay_4 <= dotCtrl_enMulResCnt_delay_3;
      dotCtrl_enMulResCnt_delay_5 <= dotCtrl_enMulResCnt_delay_4;
      dotCtrl_enMulResCnt_delay_6 <= dotCtrl_enMulResCnt_delay_5;
      dotCtrl_enMulResCnt_delay_7 <= dotCtrl_enMulResCnt_delay_6;
      dotCtrl_enMulResCnt_delay_8 <= dotCtrl_enMulResCnt_delay_7;
      dotCtrl_enMulResCnt_delay_9 <= dotCtrl_enMulResCnt_delay_8;
      dotCtrl_enMulResCnt_delay_10 <= dotCtrl_enMulResCnt_delay_9;
      dotCtrl_enMulResCnt_delay_11 <= dotCtrl_enMulResCnt_delay_10;
      dotCtrl_enMulResCnt_delay_12 <= dotCtrl_enMulResCnt_delay_11;
      dotCtrl_enMulResCnt_delay_13 <= dotCtrl_enMulResCnt_delay_12;
      dotCtrl_enMulResCnt_delay_14 <= dotCtrl_enMulResCnt_delay_13;
      dotCtrl_enMulResCnt_delay_15 <= dotCtrl_enMulResCnt_delay_14;
      dotCtrl_enMulResCnt_delay_16 <= dotCtrl_enMulResCnt_delay_15;
      dotCtrl_enMulResCnt_delay_17 <= dotCtrl_enMulResCnt_delay_16;
      dotCtrl_enMulResCnt_delay_18 <= dotCtrl_enMulResCnt_delay_17;
      dotCtrl_enMulResCnt_delay_19 <= dotCtrl_enMulResCnt_delay_18;
      dotCtrl_enMulResCnt_delay_20 <= dotCtrl_enMulResCnt_delay_19;
      dotCtrl_enMulResCnt_delay_21 <= dotCtrl_enMulResCnt_delay_20;
      dotCtrl_enMulResCnt_delay_22 <= dotCtrl_enMulResCnt_delay_21;
      dotCtrl_enMulResCnt_delay_23 <= dotCtrl_enMulResCnt_delay_22;
      dotCtrl_enMulResCnt_delay_24 <= dotCtrl_enMulResCnt_delay_23;
      dotCtrl_enMulResCnt_delay_25 <= dotCtrl_enMulResCnt_delay_24;
      dotCtrl_enMulResCnt_delay_26 <= dotCtrl_enMulResCnt_delay_25;
      dotCtrl_enMulResCnt_delay_27 <= dotCtrl_enMulResCnt_delay_26;
      dotCtrl_enMulResCnt_delay_28 <= dotCtrl_enMulResCnt_delay_27;
      dotCtrl_enMulResCnt_delay_29 <= dotCtrl_enMulResCnt_delay_28;
      dotCtrl_enAddOutCnt <= dotCtrl_enMulResCnt_delay_29;
      dotCtrl_mulResCntOvf_0_delay_1 <= dotCtrl_mulResCntOvf_0;
      dotCtrl_mulResCntOvf_0_delay_2 <= dotCtrl_mulResCntOvf_0_delay_1;
      dotCtrl_mulResCntOvf_0_delay_3 <= dotCtrl_mulResCntOvf_0_delay_2;
      dotCtrl_mulResCntOvf_0_delay_4 <= dotCtrl_mulResCntOvf_0_delay_3;
      dotCtrl_mulResCntOvf_0_delay_5 <= dotCtrl_mulResCntOvf_0_delay_4;
      dotCtrl_mulResCntOvf_0_delay_6 <= dotCtrl_mulResCntOvf_0_delay_5;
      dotCtrl_mulResCntOvf_0_delay_7 <= dotCtrl_mulResCntOvf_0_delay_6;
      dotCtrl_mulResCntOvf_0_delay_8 <= dotCtrl_mulResCntOvf_0_delay_7;
      dotCtrl_mulResCntOvf_0_delay_9 <= dotCtrl_mulResCntOvf_0_delay_8;
      dotCtrl_mulResCntOvf_0_delay_10 <= dotCtrl_mulResCntOvf_0_delay_9;
      dotCtrl_mulResCntOvf_0_delay_11 <= dotCtrl_mulResCntOvf_0_delay_10;
      dotCtrl_mulResCntOvf_0_delay_12 <= dotCtrl_mulResCntOvf_0_delay_11;
      dotCtrl_mulResCntOvf_0_delay_13 <= dotCtrl_mulResCntOvf_0_delay_12;
      dotCtrl_mulResCntOvf_0_delay_14 <= dotCtrl_mulResCntOvf_0_delay_13;
      dotCtrl_mulResCntOvf_0_delay_15 <= dotCtrl_mulResCntOvf_0_delay_14;
      dotCtrl_mulResCntOvf_0_delay_16 <= dotCtrl_mulResCntOvf_0_delay_15;
      dotCtrl_mulResCntOvf_0_delay_17 <= dotCtrl_mulResCntOvf_0_delay_16;
      dotCtrl_mulResCntOvf_0_delay_18 <= dotCtrl_mulResCntOvf_0_delay_17;
      dotCtrl_mulResCntOvf_0_delay_19 <= dotCtrl_mulResCntOvf_0_delay_18;
      dotCtrl_mulResCntOvf_0_delay_20 <= dotCtrl_mulResCntOvf_0_delay_19;
      dotCtrl_mulResCntOvf_0_delay_21 <= dotCtrl_mulResCntOvf_0_delay_20;
      dotCtrl_mulResCntOvf_0_delay_22 <= dotCtrl_mulResCntOvf_0_delay_21;
      dotCtrl_mulResCntOvf_0_delay_23 <= dotCtrl_mulResCntOvf_0_delay_22;
      dotCtrl_mulResCntOvf_0_delay_24 <= dotCtrl_mulResCntOvf_0_delay_23;
      dotCtrl_mulResCntOvf_0_delay_25 <= dotCtrl_mulResCntOvf_0_delay_24;
      dotCtrl_mulResCntOvf_0_delay_26 <= dotCtrl_mulResCntOvf_0_delay_25;
      dotCtrl_mulResCntOvf_0_delay_27 <= dotCtrl_mulResCntOvf_0_delay_26;
      dotCtrl_mulResCntOvf_0_delay_28 <= dotCtrl_mulResCntOvf_0_delay_27;
      dotCtrl_mulResCntOvf_0_delay_29 <= dotCtrl_mulResCntOvf_0_delay_28;
      dotCtrl_addOutCntOvf_0 <= dotCtrl_mulResCntOvf_0_delay_29;
      dotCtrl_mulResCntOvf_1_delay_1 <= dotCtrl_mulResCntOvf_1;
      dotCtrl_mulResCntOvf_1_delay_2 <= dotCtrl_mulResCntOvf_1_delay_1;
      dotCtrl_mulResCntOvf_1_delay_3 <= dotCtrl_mulResCntOvf_1_delay_2;
      dotCtrl_mulResCntOvf_1_delay_4 <= dotCtrl_mulResCntOvf_1_delay_3;
      dotCtrl_mulResCntOvf_1_delay_5 <= dotCtrl_mulResCntOvf_1_delay_4;
      dotCtrl_mulResCntOvf_1_delay_6 <= dotCtrl_mulResCntOvf_1_delay_5;
      dotCtrl_mulResCntOvf_1_delay_7 <= dotCtrl_mulResCntOvf_1_delay_6;
      dotCtrl_mulResCntOvf_1_delay_8 <= dotCtrl_mulResCntOvf_1_delay_7;
      dotCtrl_mulResCntOvf_1_delay_9 <= dotCtrl_mulResCntOvf_1_delay_8;
      dotCtrl_mulResCntOvf_1_delay_10 <= dotCtrl_mulResCntOvf_1_delay_9;
      dotCtrl_mulResCntOvf_1_delay_11 <= dotCtrl_mulResCntOvf_1_delay_10;
      dotCtrl_mulResCntOvf_1_delay_12 <= dotCtrl_mulResCntOvf_1_delay_11;
      dotCtrl_mulResCntOvf_1_delay_13 <= dotCtrl_mulResCntOvf_1_delay_12;
      dotCtrl_mulResCntOvf_1_delay_14 <= dotCtrl_mulResCntOvf_1_delay_13;
      dotCtrl_mulResCntOvf_1_delay_15 <= dotCtrl_mulResCntOvf_1_delay_14;
      dotCtrl_mulResCntOvf_1_delay_16 <= dotCtrl_mulResCntOvf_1_delay_15;
      dotCtrl_mulResCntOvf_1_delay_17 <= dotCtrl_mulResCntOvf_1_delay_16;
      dotCtrl_mulResCntOvf_1_delay_18 <= dotCtrl_mulResCntOvf_1_delay_17;
      dotCtrl_mulResCntOvf_1_delay_19 <= dotCtrl_mulResCntOvf_1_delay_18;
      dotCtrl_mulResCntOvf_1_delay_20 <= dotCtrl_mulResCntOvf_1_delay_19;
      dotCtrl_mulResCntOvf_1_delay_21 <= dotCtrl_mulResCntOvf_1_delay_20;
      dotCtrl_mulResCntOvf_1_delay_22 <= dotCtrl_mulResCntOvf_1_delay_21;
      dotCtrl_mulResCntOvf_1_delay_23 <= dotCtrl_mulResCntOvf_1_delay_22;
      dotCtrl_mulResCntOvf_1_delay_24 <= dotCtrl_mulResCntOvf_1_delay_23;
      dotCtrl_mulResCntOvf_1_delay_25 <= dotCtrl_mulResCntOvf_1_delay_24;
      dotCtrl_mulResCntOvf_1_delay_26 <= dotCtrl_mulResCntOvf_1_delay_25;
      dotCtrl_mulResCntOvf_1_delay_27 <= dotCtrl_mulResCntOvf_1_delay_26;
      dotCtrl_mulResCntOvf_1_delay_28 <= dotCtrl_mulResCntOvf_1_delay_27;
      dotCtrl_mulResCntOvf_1_delay_29 <= dotCtrl_mulResCntOvf_1_delay_28;
      dotCtrl_addOutCntOvf_1 <= dotCtrl_mulResCntOvf_1_delay_29;
      dotCtrl_flagSetCond <= (dotCtrl_enAddOutCnt && (dotCtrl_addOutCntOvf_0 && dotCtrl_addOutCntOvf_1));
      dotCtrl_flagInv <= dotCtrl_flagInvNext;
      dotCtrl_accCntOvf_delay_1 <= dotCtrl_accCntOvf;
      dotCtrl_accCntOvf_delay_2 <= dotCtrl_accCntOvf_delay_1;
      dotCtrl_accCntOvf_delay_3 <= dotCtrl_accCntOvf_delay_2;
      dotCtrl_accCntOvf_delay_4 <= dotCtrl_accCntOvf_delay_3;
      dotCtrl_accCntOvf_delay_5 <= dotCtrl_accCntOvf_delay_4;
      dotCtrl_accCntOvf_delay_6 <= dotCtrl_accCntOvf_delay_5;
      dotCtrl_accCntOvf_delay_7 <= dotCtrl_accCntOvf_delay_6;
      dotCtrl_accCntOvf_delay_8 <= dotCtrl_accCntOvf_delay_7;
      dotCtrl_accCntOvf_delay_9 <= dotCtrl_accCntOvf_delay_8;
      dotCtrl_accCntOvf_delay_10 <= dotCtrl_accCntOvf_delay_9;
      dotCtrl_accCntOvf_delay_11 <= dotCtrl_accCntOvf_delay_10;
      dotCtrl_accCntOvf_delay_12 <= dotCtrl_accCntOvf_delay_11;
      dotCtrl_accCntOvf_delay_13 <= dotCtrl_accCntOvf_delay_12;
      dotCtrl_accCntOvf_delay_14 <= dotCtrl_accCntOvf_delay_13;
      dotCtrl_accCntOvf_delay_15 <= dotCtrl_accCntOvf_delay_14;
      dotCtrl_accCntOvf_delay_16 <= dotCtrl_accCntOvf_delay_15;
      dotCtrl_accCntOvf_delay_17 <= dotCtrl_accCntOvf_delay_16;
      dotCtrl_accCntOvf_delay_18 <= dotCtrl_accCntOvf_delay_17;
      dotCtrl_accCntOvf_delay_19 <= dotCtrl_accCntOvf_delay_18;
      dotCtrl_accCntOvf_delay_20 <= dotCtrl_accCntOvf_delay_19;
      dotCtrl_accCntOvf_delay_21 <= dotCtrl_accCntOvf_delay_20;
      dotCtrl_accCntOvf_delay_22 <= dotCtrl_accCntOvf_delay_21;
      dotCtrl_accCntOvf_delay_23 <= dotCtrl_accCntOvf_delay_22;
      dotCtrl_accCntOvf_delay_24 <= dotCtrl_accCntOvf_delay_23;
      dotCtrl_accCntOvf_delay_25 <= dotCtrl_accCntOvf_delay_24;
      dotCtrl_accCntOvf_delay_26 <= dotCtrl_accCntOvf_delay_25;
      dotCtrl_accCntOvf_delay_27 <= dotCtrl_accCntOvf_delay_26;
      dotCtrl_accCntOvf_delay_28 <= dotCtrl_accCntOvf_delay_27;
      dotCtrl_accCntOvf_delay_29 <= dotCtrl_accCntOvf_delay_28;
      dotCtrl_accCntOvf_delay_30 <= dotCtrl_accCntOvf_delay_29;
      dotCtrl_accCntOvf_delay_31 <= dotCtrl_accCntOvf_delay_30;
      dotCtrl_accCntOvf_delay_32 <= dotCtrl_accCntOvf_delay_31;
      dotCtrl_accCntOvf_delay_33 <= dotCtrl_accCntOvf_delay_32;
      dotCtrl_accCntOvf_delay_34 <= dotCtrl_accCntOvf_delay_33;
      dotCtrl_accCntOvf_delay_35 <= dotCtrl_accCntOvf_delay_34;
      dotCtrl_accCntOvfDly <= dotCtrl_accCntOvf_delay_35;
      if(dotCtrl_enMulResCnt) begin
        dotCtrl_accCnt <= (dotCtrl_accCnt + 5'h01);
        if(dotCtrl_accCntOvf) begin
          dotCtrl_accCnt <= 5'h0;
        end
      end
      dotCtrl_accCntOvf_delay_1_1 <= dotCtrl_accCntOvf;
      dotCtrl_accCntOvf_delay_2_1 <= dotCtrl_accCntOvf_delay_1_1;
      dotCtrl_accCntOvf_delay_3_1 <= dotCtrl_accCntOvf_delay_2_1;
      dotCtrl_accCntOvf_delay_4_1 <= dotCtrl_accCntOvf_delay_3_1;
      dotCtrl_accCntOvf_delay_5_1 <= dotCtrl_accCntOvf_delay_4_1;
      dotCtrl_accCntOvf_delay_6_1 <= dotCtrl_accCntOvf_delay_5_1;
      dotCtrl_accCntOvf_delay_7_1 <= dotCtrl_accCntOvf_delay_6_1;
      dotCtrl_accCntOvf_delay_8_1 <= dotCtrl_accCntOvf_delay_7_1;
      dotCtrl_accCntOvf_delay_9_1 <= dotCtrl_accCntOvf_delay_8_1;
      dotCtrl_accCntOvf_delay_10_1 <= dotCtrl_accCntOvf_delay_9_1;
      dotCtrl_accCntOvf_delay_11_1 <= dotCtrl_accCntOvf_delay_10_1;
      dotCtrl_accCntOvf_delay_12_1 <= dotCtrl_accCntOvf_delay_11_1;
      dotCtrl_accCntOvf_delay_13_1 <= dotCtrl_accCntOvf_delay_12_1;
      dotCtrl_accCntOvf_delay_14_1 <= dotCtrl_accCntOvf_delay_13_1;
      dotCtrl_accCntOvf_delay_15_1 <= dotCtrl_accCntOvf_delay_14_1;
      dotCtrl_accCntOvf_delay_16_1 <= dotCtrl_accCntOvf_delay_15_1;
      dotCtrl_accCntOvf_delay_17_1 <= dotCtrl_accCntOvf_delay_16_1;
      dotCtrl_accCntOvf_delay_18_1 <= dotCtrl_accCntOvf_delay_17_1;
      dotCtrl_accCntOvf_delay_19_1 <= dotCtrl_accCntOvf_delay_18_1;
      dotCtrl_accCntOvf_delay_20_1 <= dotCtrl_accCntOvf_delay_19_1;
      dotCtrl_accCntOvf_delay_21_1 <= dotCtrl_accCntOvf_delay_20_1;
      dotCtrl_accCntOvf_delay_22_1 <= dotCtrl_accCntOvf_delay_21_1;
      dotCtrl_accCntOvf_delay_23_1 <= dotCtrl_accCntOvf_delay_22_1;
      dotCtrl_accCntOvf_delay_24_1 <= dotCtrl_accCntOvf_delay_23_1;
      dotCtrl_accCntOvf_delay_25_1 <= dotCtrl_accCntOvf_delay_24_1;
      dotCtrl_accCntOvf_delay_26_1 <= dotCtrl_accCntOvf_delay_25_1;
      dotCtrl_accCntOvf_delay_27_1 <= dotCtrl_accCntOvf_delay_26_1;
      dotCtrl_accCntOvf_delay_28_1 <= dotCtrl_accCntOvf_delay_27_1;
      dotCtrl_accCntOvf_delay_29_1 <= dotCtrl_accCntOvf_delay_28_1;
      dotCtrl_accCntOvf_delay_30_1 <= dotCtrl_accCntOvf_delay_29_1;
      fAxpyCtrl_cfgVld <= ret_1_valid;
      fAxpyCtrl_enMulResCnt <= fAxpyCtrl_enMulResCntNext;
      fAxpyCtrl_muResCnt_0 <= t_fAxpyCtrl_muResCnt_0;
      fAxpyCtrl_muResCnt_1 <= t_fAxpyCtrl_muResCnt_1;
      fAxpyCtrl_mulResCntOvf_0 <= t_fAxpyCtrl_mulResCntOvf_0;
      fAxpyCtrl_mulResCntOvf_1 <= t_fAxpyCtrl_mulResCntOvf_1;
      fAxpyCtrl_mulResCntOvfReduce <= (t_fAxpyCtrl_mulResCntOvf_0 && t_fAxpyCtrl_mulResCntOvf_1);
      fAxpyCtrl_mulResCntLastZero <= fAxpyCtrl_mulResCntLastZeroNext;
      fAxpyCtrl_mulResCntLastNotZero <= fAxpyCtrl_mulResCntLastNotZeroNext;
      fAxpyCtrl_enMulResCnt_delay_1 <= fAxpyCtrl_enMulResCnt;
      fAxpyCtrl_enMulResCnt_delay_2 <= fAxpyCtrl_enMulResCnt_delay_1;
      fAxpyCtrl_enMulResCnt_delay_3 <= fAxpyCtrl_enMulResCnt_delay_2;
      fAxpyCtrl_enMulResCnt_delay_4 <= fAxpyCtrl_enMulResCnt_delay_3;
      fAxpyCtrl_enMulResCnt_delay_5 <= fAxpyCtrl_enMulResCnt_delay_4;
      fAxpyCtrl_enAddOutCnt <= fAxpyCtrl_enMulResCnt_delay_5;
      fAxpyCtrl_mulResCntOvf_0_delay_1 <= fAxpyCtrl_mulResCntOvf_0;
      fAxpyCtrl_mulResCntOvf_0_delay_2 <= fAxpyCtrl_mulResCntOvf_0_delay_1;
      fAxpyCtrl_mulResCntOvf_0_delay_3 <= fAxpyCtrl_mulResCntOvf_0_delay_2;
      fAxpyCtrl_mulResCntOvf_0_delay_4 <= fAxpyCtrl_mulResCntOvf_0_delay_3;
      fAxpyCtrl_mulResCntOvf_0_delay_5 <= fAxpyCtrl_mulResCntOvf_0_delay_4;
      fAxpyCtrl_addOutCntOvf_0 <= fAxpyCtrl_mulResCntOvf_0_delay_5;
      fAxpyCtrl_mulResCntOvf_1_delay_1 <= fAxpyCtrl_mulResCntOvf_1;
      fAxpyCtrl_mulResCntOvf_1_delay_2 <= fAxpyCtrl_mulResCntOvf_1_delay_1;
      fAxpyCtrl_mulResCntOvf_1_delay_3 <= fAxpyCtrl_mulResCntOvf_1_delay_2;
      fAxpyCtrl_mulResCntOvf_1_delay_4 <= fAxpyCtrl_mulResCntOvf_1_delay_3;
      fAxpyCtrl_mulResCntOvf_1_delay_5 <= fAxpyCtrl_mulResCntOvf_1_delay_4;
      fAxpyCtrl_addOutCntOvf_1 <= fAxpyCtrl_mulResCntOvf_1_delay_5;
      t_fAxpyCtrl_psumPushEnReg <= (fAxpyCtrl_enMulResCnt && (! fAxpyCtrl_mulResCntOvf_1));
      t_fAxpyCtrl_psumPushEnReg_1 <= t_fAxpyCtrl_psumPushEnReg;
      t_fAxpyCtrl_psumPushEnReg_2 <= t_fAxpyCtrl_psumPushEnReg_1;
      t_fAxpyCtrl_psumPushEnReg_3 <= t_fAxpyCtrl_psumPushEnReg_2;
      t_fAxpyCtrl_psumPushEnReg_4 <= t_fAxpyCtrl_psumPushEnReg_3;
      fAxpyCtrl_psumPushEnReg <= t_fAxpyCtrl_psumPushEnReg_4;
      fAxpyCtrl_resAddReady <= fAxpyCtrl_resAddReadyNext;
      fAxpyCtrl_psumPopEnReg <= fAxpyCtrl_psumPopEnRegNext;
      pAxpyCtrl_cfgVld <= ret_2_valid;
      pAxpyCtrl_cycleReduce <= pAxpyCtrl_cycleReduceNext;
      pAxpyCtrl_enMulResCnt <= pAxpyCtrl_enMulResCntNext;
      pAxpyCtrl_mulResCntOvf <= pAxpyCtrl_mulResCntOvfNext;
      pAxpyCtrl_mulResCntHighZero <= pAxpyCtrl_mulResCntHighZeroNext;
      pAxpyCtrl_mulResCntHighNotZero <= pAxpyCtrl_mulResCntHighNotZeroNext;
      pAxpyCtrl_mulResCnt <= pAxpyCtrl_mulResCntNext;
      pAxpyCtrl_enMulResCnt_delay_1 <= pAxpyCtrl_enMulResCnt;
      pAxpyCtrl_enMulResCnt_delay_2 <= pAxpyCtrl_enMulResCnt_delay_1;
      pAxpyCtrl_enMulResCnt_delay_3 <= pAxpyCtrl_enMulResCnt_delay_2;
      pAxpyCtrl_enMulResCnt_delay_4 <= pAxpyCtrl_enMulResCnt_delay_3;
      pAxpyCtrl_enMulResCnt_delay_5 <= pAxpyCtrl_enMulResCnt_delay_4;
      pAxpyCtrl_enMulResCntDly <= pAxpyCtrl_enMulResCnt_delay_5;
      pAxpyCtrl_mulResCntOvf_delay_1 <= pAxpyCtrl_mulResCntOvf;
      pAxpyCtrl_mulResCntOvf_delay_2 <= pAxpyCtrl_mulResCntOvf_delay_1;
      pAxpyCtrl_mulResCntOvf_delay_3 <= pAxpyCtrl_mulResCntOvf_delay_2;
      pAxpyCtrl_mulResCntOvf_delay_4 <= pAxpyCtrl_mulResCntOvf_delay_3;
      pAxpyCtrl_mulResCntOvf_delay_5 <= pAxpyCtrl_mulResCntOvf_delay_4;
      pAxpyCtrl_addOutCntOvf <= pAxpyCtrl_mulResCntOvf_delay_5;
      if((pAxpyCtrl_enAddOutCnt && pAxpyCtrl_addOutCntOvf)) begin
        pAxpyCtrl_cycleReduceDly <= 1'b1;
      end
      pAxpyCtrl_lastElem <= pAxpyCtrl_lastElemNext;
      pAxpyCtrl_cycleCnt <= pAxpyCtrl_cycleCntNext;
      if(pAxpyCtrl_enCycleCnt) begin
        if(pAxpyCtrl_lastElem) begin
          pAxpyCtrl_cycleReduceDly <= 1'b0;
        end
      end
      pAxpyCtrl_psumPopEn <= pAxpyCtrl_psumPopEnNext;
      pAxpyCtrl_bSelBit <= pAxpyCtrl_bSelBitNext;
      pAxpyCtrl_flagSetCond <= (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem);
      pAxpyCtrl_flagInv <= pAxpyCtrl_flagInvNext;
      if((pAxpyCtrl_cycleReduce && add_fifoCtrl_io_pop_fire)) begin
        pAxpyCtrl_vldToggle <= (! pAxpyCtrl_vldToggle);
      end
      t_pAxpyCtrl_reduceVldDly <= (pAxpyCtrl_psumVld && pAxpyCtrl_reduceVld);
      t_pAxpyCtrl_reduceVldDly_1 <= t_pAxpyCtrl_reduceVldDly;
      t_pAxpyCtrl_reduceVldDly_2 <= t_pAxpyCtrl_reduceVldDly_1;
      t_pAxpyCtrl_reduceVldDly_3 <= t_pAxpyCtrl_reduceVldDly_2;
      t_pAxpyCtrl_reduceVldDly_4 <= t_pAxpyCtrl_reduceVldDly_3;
      t_pAxpyCtrl_reduceVldDly_5 <= t_pAxpyCtrl_reduceVldDly_4;
      selVldUIntReg <= selVldNextUInt;
      selFifoPopUInt <= selVldNextUInt;
      selFifoPushUInt <= selVldNextUInt;
      aSel <= aSelNext;
      bSel <= bSelNext;
      ready <= readyNext;
      mulResFire <= mulResFireNext;
    end
  end

  always @(posedge clk_1_clk) begin
    if(fifoCtrl_io_pop_valid) begin
      addLogic_popDly <= fifoCtrl_io_pop_payload;
    end
    dotCtrl_cfgPayload <= ret_0_payload;
    fAxpyCtrl_cfgPayload <= ret_1_payload;
    pAxpyCtrl_cfgPayload <= ret_2_payload;
  end


endmodule

module MulEngine_3 (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [511:0]  wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [511:0]  dotIn_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          scale_tvalid,
  output wire          scale_tready,
  input  wire [15:0]   scale_tdata,
  output wire          output_tvalid,
  input  wire          output_tready,
  output wire [511:0]  output_tdata,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [15:0]   secondDim,
  input  wire          clk_1_clk,
  output wire          popVldNext,
  input  wire          clk_1_resetn
);

  wire       [0:0]    cfgDeMux_io_select;
  reg                 axpyLogic_inpRepeat_mul_ip_m_axis_result_tready;
  wire       [0:0]    mux_io_select;
  wire       [511:0]  fifo_io_push_payload;
  reg        [511:0]  mem_spinal_port0;
  wire                cfgDeMux_io_input_ready;
  wire                cfgDeMux_io_outputs_0_valid;
  wire       [31:0]   cfgDeMux_io_outputs_0_payload;
  wire                cfgDeMux_io_outputs_1_valid;
  wire       [31:0]   cfgDeMux_io_outputs_1_payload;
  wire                axpyLogic_inpRepeat_mul_ip_s_axis_a_tready;
  wire                axpyLogic_inpRepeat_mul_ip_s_axis_b_tready;
  wire                axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata;
  wire                mux_io_inputs_0_ready;
  wire                mux_io_inputs_1_ready;
  wire                mux_io_output_valid;
  wire       [511:0]  mux_io_output_payload;
  wire                mul_io_res_valid;
  wire       [15:0]   mul_io_res_payload_0;
  wire       [15:0]   mul_io_res_payload_1;
  wire       [15:0]   mul_io_res_payload_2;
  wire       [15:0]   mul_io_res_payload_3;
  wire       [15:0]   mul_io_res_payload_4;
  wire       [15:0]   mul_io_res_payload_5;
  wire       [15:0]   mul_io_res_payload_6;
  wire       [15:0]   mul_io_res_payload_7;
  wire       [15:0]   mul_io_res_payload_8;
  wire       [15:0]   mul_io_res_payload_9;
  wire       [15:0]   mul_io_res_payload_10;
  wire       [15:0]   mul_io_res_payload_11;
  wire       [15:0]   mul_io_res_payload_12;
  wire       [15:0]   mul_io_res_payload_13;
  wire       [15:0]   mul_io_res_payload_14;
  wire       [15:0]   mul_io_res_payload_15;
  wire       [15:0]   mul_io_res_payload_16;
  wire       [15:0]   mul_io_res_payload_17;
  wire       [15:0]   mul_io_res_payload_18;
  wire       [15:0]   mul_io_res_payload_19;
  wire       [15:0]   mul_io_res_payload_20;
  wire       [15:0]   mul_io_res_payload_21;
  wire       [15:0]   mul_io_res_payload_22;
  wire       [15:0]   mul_io_res_payload_23;
  wire       [15:0]   mul_io_res_payload_24;
  wire       [15:0]   mul_io_res_payload_25;
  wire       [15:0]   mul_io_res_payload_26;
  wire       [15:0]   mul_io_res_payload_27;
  wire       [15:0]   mul_io_res_payload_28;
  wire       [15:0]   mul_io_res_payload_29;
  wire       [15:0]   mul_io_res_payload_30;
  wire       [15:0]   mul_io_res_payload_31;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [511:0]  fifo_io_pop_payload;
  wire                fifo_io_popVldNext;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire       [15:0]   t_dotLogic_cntOvf_0;
  wire       [7:0]    t_dotLogic_inCntOvf;
  wire       [15:0]   t_dotLogic_inCntOvf_1;
  wire       [7:0]    t_dotLogic_popPre_valid;
  wire       [15:0]   t_dotLogic_cntOvfPipe_0;
  wire       [15:0]   t_axpyLogic_cntOvf_0;
  wire       [15:0]   t_t_axpyLogic_inpHalt_ready_1;
  wire       [255:0]  t_axpyLogic_axpyOut_payload;
  wire       [255:0]  t_io_push_payload;
  wire                ram_rdPort_cmd_valid;
  wire       [4:0]    ram_rdPort_cmd_payload;
  wire       [511:0]  ram_rdPort_rsp;
  wire                ram_wrPort_valid;
  wire       [4:0]    ram_wrPort_payload_address;
  wire       [511:0]  ram_wrPort_payload_data;
  wire                dotLogic_enInc;
  (* max_fanout = 100 *) reg        [7:0]    dotLogic_cnt_0;
  reg        [15:0]   dotLogic_cnt_1;
  wire                dotLogic_cntOvf_0;
  wire                dotLogic_cntOvf_1;
  wire                dotLogic_cntOvfReduce;
  reg                 dotLogic_flag;
  reg                 dotLogic_notReadyFlag;
  (* max_fanout = 100 *) reg        [4:0]    dotLogic_inCnt;
  wire                dotLogic_inCntOvf;
  wire                dotIn_fire;
  wire                dotLogic_popPre_valid;
  reg                 dotLogic_popPre_ready;
  wire                dotLogic_dotOut_valid;
  wire                dotLogic_dotOut_ready;
  wire       [511:0]  dotLogic_dotOut_payload;
  wire                dotLogic_popPre_m2sPipe_valid;
  wire                dotLogic_popPre_m2sPipe_ready;
  reg                 dotLogic_popPre_rValid;
  wire                dotLogic_enIncPipe;
  reg        [7:0]    dotLogic_cntPipe_0;
  reg        [15:0]   dotLogic_cntPipe_1;
  wire                dotLogic_cntOvfPipe_0;
  wire                dotLogic_cntOvfPipe_1;
  wire                dotLogic_cntOvfReducePipe;
  wire                dotLogic_dotOut_fire;
  wire                dotLogic_clrCondPipe;
  wire                dotLogic_incCond;
  wire                dotLogic_clrCond;
  (* keep = "true" , max_fanout = 100 *) reg                 dotLogic_dotInReady;
  wire                axpyLogic_enInc;
  reg        [7:0]    axpyLogic_cnt_0;
  reg        [15:0]   axpyLogic_cnt_1;
  wire                axpyLogic_cntOvf_0;
  wire                axpyLogic_cntOvf_1;
  wire                axpyLogic_cntOvfReduce;
  wire                axpyLogic_inpHalt_valid;
  wire                axpyLogic_inpHalt_ready;
  wire       [15:0]   axpyLogic_inpHalt_payload;
  wire                axpyLogic_scaleHalt_valid;
  wire                axpyLogic_scaleHalt_ready;
  wire       [15:0]   axpyLogic_scaleHalt_payload;
  wire                axpyLogic_inpRepeat_valid;
  wire                axpyLogic_inpRepeat_ready;
  wire       [15:0]   axpyLogic_inpRepeat_payload;
  reg        [7:0]    t_axpyLogic_inpHalt_ready;
  wire                t_axpyLogic_inpHalt_ready_1;
  wire                axpyLogic_inpRepeat_fire;
  (* max_fanout = 100 *) wire                axpyLogic_res_valid;
  wire                axpyLogic_res_ready;
  wire       [15:0]   axpyLogic_res_payload;
  reg                 mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid;
  reg        [15:0]   mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData;
  wire                axpyLogic_axpyOut_valid;
  wire                axpyLogic_axpyOut_ready;
  wire       [511:0]  axpyLogic_axpyOut_payload;
  wire                axpyLogic_incCond;
  wire                axpyLogic_clrCond;
  wire       [15:0]   secondDim_1;
  wire                join_valid;
  wire                join_ready;
  wire                join_fire;
  wire                act_valid;
  wire       [15:0]   act_payload_0;
  wire       [15:0]   act_payload_1;
  wire       [15:0]   act_payload_2;
  wire       [15:0]   act_payload_3;
  wire       [15:0]   act_payload_4;
  wire       [15:0]   act_payload_5;
  wire       [15:0]   act_payload_6;
  wire       [15:0]   act_payload_7;
  wire       [15:0]   act_payload_8;
  wire       [15:0]   act_payload_9;
  wire       [15:0]   act_payload_10;
  wire       [15:0]   act_payload_11;
  wire       [15:0]   act_payload_12;
  wire       [15:0]   act_payload_13;
  wire       [15:0]   act_payload_14;
  wire       [15:0]   act_payload_15;
  wire       [15:0]   act_payload_16;
  wire       [15:0]   act_payload_17;
  wire       [15:0]   act_payload_18;
  wire       [15:0]   act_payload_19;
  wire       [15:0]   act_payload_20;
  wire       [15:0]   act_payload_21;
  wire       [15:0]   act_payload_22;
  wire       [15:0]   act_payload_23;
  wire       [15:0]   act_payload_24;
  wire       [15:0]   act_payload_25;
  wire       [15:0]   act_payload_26;
  wire       [15:0]   act_payload_27;
  wire       [15:0]   act_payload_28;
  wire       [15:0]   act_payload_29;
  wire       [15:0]   act_payload_30;
  wire       [15:0]   act_payload_31;
  wire                wkv_valid;
  wire       [15:0]   wkv_payload_0;
  wire       [15:0]   wkv_payload_1;
  wire       [15:0]   wkv_payload_2;
  wire       [15:0]   wkv_payload_3;
  wire       [15:0]   wkv_payload_4;
  wire       [15:0]   wkv_payload_5;
  wire       [15:0]   wkv_payload_6;
  wire       [15:0]   wkv_payload_7;
  wire       [15:0]   wkv_payload_8;
  wire       [15:0]   wkv_payload_9;
  wire       [15:0]   wkv_payload_10;
  wire       [15:0]   wkv_payload_11;
  wire       [15:0]   wkv_payload_12;
  wire       [15:0]   wkv_payload_13;
  wire       [15:0]   wkv_payload_14;
  wire       [15:0]   wkv_payload_15;
  wire       [15:0]   wkv_payload_16;
  wire       [15:0]   wkv_payload_17;
  wire       [15:0]   wkv_payload_18;
  wire       [15:0]   wkv_payload_19;
  wire       [15:0]   wkv_payload_20;
  wire       [15:0]   wkv_payload_21;
  wire       [15:0]   wkv_payload_22;
  wire       [15:0]   wkv_payload_23;
  wire       [15:0]   wkv_payload_24;
  wire       [15:0]   wkv_payload_25;
  wire       [15:0]   wkv_payload_26;
  wire       [15:0]   wkv_payload_27;
  wire       [15:0]   wkv_payload_28;
  wire       [15:0]   wkv_payload_29;
  wire       [15:0]   wkv_payload_30;
  wire       [15:0]   wkv_payload_31;
  (* max_fanout = 100 *) reg                 ready;
  (* ram_style = "distributed" *) reg [511:0] mem [0:31];

  assign t_dotLogic_cntOvf_0 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_dotLogic_inCntOvf = {3'd0, dotLogic_inCnt};
  assign t_dotLogic_inCntOvf_1 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_dotLogic_popPre_valid = {3'd0, dotLogic_inCnt};
  assign t_dotLogic_cntOvfPipe_0 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_axpyLogic_cntOvf_0 = cfgDeMux_io_outputs_1_payload[31 : 16];
  assign t_t_axpyLogic_inpHalt_ready_1 = cfgDeMux_io_outputs_1_payload[31 : 16];
  assign t_axpyLogic_axpyOut_payload = {axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,axpyLogic_res_payload}}}}}}}}}}}}}}};
  assign t_io_push_payload = {mul_io_res_payload_15,{mul_io_res_payload_14,{mul_io_res_payload_13,{mul_io_res_payload_12,{mul_io_res_payload_11,{mul_io_res_payload_10,{mul_io_res_payload_9,{mul_io_res_payload_8,{mul_io_res_payload_7,{mul_io_res_payload_6,{mul_io_res_payload_5,{mul_io_res_payload_4,{mul_io_res_payload_3,{mul_io_res_payload_2,{mul_io_res_payload_1,mul_io_res_payload_0}}}}}}}}}}}}}}};
  always @(posedge clk_1_clk) begin
    if(ram_rdPort_cmd_valid) begin
      mem_spinal_port0 <= mem[ram_rdPort_cmd_payload];
    end
  end

  always @(posedge clk_1_clk) begin
    if(ram_wrPort_valid) begin
      mem[ram_wrPort_payload_address] <= ram_wrPort_payload_data;
    end
  end

  StreamDemux_25 cfgDeMux (
    .io_select            (cfgDeMux_io_select                 ), //i
    .io_input_valid       (cfg_tvalid                         ), //i
    .io_input_ready       (cfgDeMux_io_input_ready            ), //o
    .io_input_payload     (cfg_tdata[31:0]                    ), //i
    .io_outputs_0_valid   (cfgDeMux_io_outputs_0_valid        ), //o
    .io_outputs_0_ready   (dotLogic_clrCondPipe               ), //i
    .io_outputs_0_payload (cfgDeMux_io_outputs_0_payload[31:0]), //o
    .io_outputs_1_valid   (cfgDeMux_io_outputs_1_valid        ), //o
    .io_outputs_1_ready   (axpyLogic_clrCond                  ), //i
    .io_outputs_1_payload (cfgDeMux_io_outputs_1_payload[31:0])  //o
  );
  fp16mul7s axpyLogic_inpRepeat_mul_ip (
    .aclk                 (clk_1_clk                                           ), //i
    .s_axis_a_tvalid      (axpyLogic_inpRepeat_valid                           ), //i
    .s_axis_a_tready      (axpyLogic_inpRepeat_mul_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (axpyLogic_inpRepeat_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (axpyLogic_scaleHalt_valid                           ), //i
    .s_axis_b_tready      (axpyLogic_inpRepeat_mul_ip_s_axis_b_tready          ), //o
    .s_axis_b_tdata       (axpyLogic_scaleHalt_payload[15:0]                   ), //i
    .m_axis_result_tvalid (axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (axpyLogic_inpRepeat_mul_ip_m_axis_result_tready     ), //i
    .m_axis_result_tdata  (axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamMux_49 mux (
    .io_select           (mux_io_select                   ), //i
    .io_inputs_0_valid   (dotLogic_dotOut_valid           ), //i
    .io_inputs_0_ready   (mux_io_inputs_0_ready           ), //o
    .io_inputs_0_payload (dotLogic_dotOut_payload[511:0]  ), //i
    .io_inputs_1_valid   (axpyLogic_axpyOut_valid         ), //i
    .io_inputs_1_ready   (mux_io_inputs_1_ready           ), //o
    .io_inputs_1_payload (axpyLogic_axpyOut_payload[511:0]), //i
    .io_output_valid     (mux_io_output_valid             ), //o
    .io_output_ready     (join_fire                       ), //i
    .io_output_payload   (mux_io_output_payload[511:0]    )  //o
  );
  Vec2to1_3 mul (
    .io_in0_valid      (act_valid                  ), //i
    .io_in0_payload_0  (act_payload_0[15:0]        ), //i
    .io_in0_payload_1  (act_payload_1[15:0]        ), //i
    .io_in0_payload_2  (act_payload_2[15:0]        ), //i
    .io_in0_payload_3  (act_payload_3[15:0]        ), //i
    .io_in0_payload_4  (act_payload_4[15:0]        ), //i
    .io_in0_payload_5  (act_payload_5[15:0]        ), //i
    .io_in0_payload_6  (act_payload_6[15:0]        ), //i
    .io_in0_payload_7  (act_payload_7[15:0]        ), //i
    .io_in0_payload_8  (act_payload_8[15:0]        ), //i
    .io_in0_payload_9  (act_payload_9[15:0]        ), //i
    .io_in0_payload_10 (act_payload_10[15:0]       ), //i
    .io_in0_payload_11 (act_payload_11[15:0]       ), //i
    .io_in0_payload_12 (act_payload_12[15:0]       ), //i
    .io_in0_payload_13 (act_payload_13[15:0]       ), //i
    .io_in0_payload_14 (act_payload_14[15:0]       ), //i
    .io_in0_payload_15 (act_payload_15[15:0]       ), //i
    .io_in0_payload_16 (act_payload_16[15:0]       ), //i
    .io_in0_payload_17 (act_payload_17[15:0]       ), //i
    .io_in0_payload_18 (act_payload_18[15:0]       ), //i
    .io_in0_payload_19 (act_payload_19[15:0]       ), //i
    .io_in0_payload_20 (act_payload_20[15:0]       ), //i
    .io_in0_payload_21 (act_payload_21[15:0]       ), //i
    .io_in0_payload_22 (act_payload_22[15:0]       ), //i
    .io_in0_payload_23 (act_payload_23[15:0]       ), //i
    .io_in0_payload_24 (act_payload_24[15:0]       ), //i
    .io_in0_payload_25 (act_payload_25[15:0]       ), //i
    .io_in0_payload_26 (act_payload_26[15:0]       ), //i
    .io_in0_payload_27 (act_payload_27[15:0]       ), //i
    .io_in0_payload_28 (act_payload_28[15:0]       ), //i
    .io_in0_payload_29 (act_payload_29[15:0]       ), //i
    .io_in0_payload_30 (act_payload_30[15:0]       ), //i
    .io_in0_payload_31 (act_payload_31[15:0]       ), //i
    .io_in1_valid      (wkv_valid                  ), //i
    .io_in1_payload_0  (wkv_payload_0[15:0]        ), //i
    .io_in1_payload_1  (wkv_payload_1[15:0]        ), //i
    .io_in1_payload_2  (wkv_payload_2[15:0]        ), //i
    .io_in1_payload_3  (wkv_payload_3[15:0]        ), //i
    .io_in1_payload_4  (wkv_payload_4[15:0]        ), //i
    .io_in1_payload_5  (wkv_payload_5[15:0]        ), //i
    .io_in1_payload_6  (wkv_payload_6[15:0]        ), //i
    .io_in1_payload_7  (wkv_payload_7[15:0]        ), //i
    .io_in1_payload_8  (wkv_payload_8[15:0]        ), //i
    .io_in1_payload_9  (wkv_payload_9[15:0]        ), //i
    .io_in1_payload_10 (wkv_payload_10[15:0]       ), //i
    .io_in1_payload_11 (wkv_payload_11[15:0]       ), //i
    .io_in1_payload_12 (wkv_payload_12[15:0]       ), //i
    .io_in1_payload_13 (wkv_payload_13[15:0]       ), //i
    .io_in1_payload_14 (wkv_payload_14[15:0]       ), //i
    .io_in1_payload_15 (wkv_payload_15[15:0]       ), //i
    .io_in1_payload_16 (wkv_payload_16[15:0]       ), //i
    .io_in1_payload_17 (wkv_payload_17[15:0]       ), //i
    .io_in1_payload_18 (wkv_payload_18[15:0]       ), //i
    .io_in1_payload_19 (wkv_payload_19[15:0]       ), //i
    .io_in1_payload_20 (wkv_payload_20[15:0]       ), //i
    .io_in1_payload_21 (wkv_payload_21[15:0]       ), //i
    .io_in1_payload_22 (wkv_payload_22[15:0]       ), //i
    .io_in1_payload_23 (wkv_payload_23[15:0]       ), //i
    .io_in1_payload_24 (wkv_payload_24[15:0]       ), //i
    .io_in1_payload_25 (wkv_payload_25[15:0]       ), //i
    .io_in1_payload_26 (wkv_payload_26[15:0]       ), //i
    .io_in1_payload_27 (wkv_payload_27[15:0]       ), //i
    .io_in1_payload_28 (wkv_payload_28[15:0]       ), //i
    .io_in1_payload_29 (wkv_payload_29[15:0]       ), //i
    .io_in1_payload_30 (wkv_payload_30[15:0]       ), //i
    .io_in1_payload_31 (wkv_payload_31[15:0]       ), //i
    .io_res_valid      (mul_io_res_valid           ), //o
    .io_res_payload_0  (mul_io_res_payload_0[15:0] ), //o
    .io_res_payload_1  (mul_io_res_payload_1[15:0] ), //o
    .io_res_payload_2  (mul_io_res_payload_2[15:0] ), //o
    .io_res_payload_3  (mul_io_res_payload_3[15:0] ), //o
    .io_res_payload_4  (mul_io_res_payload_4[15:0] ), //o
    .io_res_payload_5  (mul_io_res_payload_5[15:0] ), //o
    .io_res_payload_6  (mul_io_res_payload_6[15:0] ), //o
    .io_res_payload_7  (mul_io_res_payload_7[15:0] ), //o
    .io_res_payload_8  (mul_io_res_payload_8[15:0] ), //o
    .io_res_payload_9  (mul_io_res_payload_9[15:0] ), //o
    .io_res_payload_10 (mul_io_res_payload_10[15:0]), //o
    .io_res_payload_11 (mul_io_res_payload_11[15:0]), //o
    .io_res_payload_12 (mul_io_res_payload_12[15:0]), //o
    .io_res_payload_13 (mul_io_res_payload_13[15:0]), //o
    .io_res_payload_14 (mul_io_res_payload_14[15:0]), //o
    .io_res_payload_15 (mul_io_res_payload_15[15:0]), //o
    .io_res_payload_16 (mul_io_res_payload_16[15:0]), //o
    .io_res_payload_17 (mul_io_res_payload_17[15:0]), //o
    .io_res_payload_18 (mul_io_res_payload_18[15:0]), //o
    .io_res_payload_19 (mul_io_res_payload_19[15:0]), //o
    .io_res_payload_20 (mul_io_res_payload_20[15:0]), //o
    .io_res_payload_21 (mul_io_res_payload_21[15:0]), //o
    .io_res_payload_22 (mul_io_res_payload_22[15:0]), //o
    .io_res_payload_23 (mul_io_res_payload_23[15:0]), //o
    .io_res_payload_24 (mul_io_res_payload_24[15:0]), //o
    .io_res_payload_25 (mul_io_res_payload_25[15:0]), //o
    .io_res_payload_26 (mul_io_res_payload_26[15:0]), //o
    .io_res_payload_27 (mul_io_res_payload_27[15:0]), //o
    .io_res_payload_28 (mul_io_res_payload_28[15:0]), //o
    .io_res_payload_29 (mul_io_res_payload_29[15:0]), //o
    .io_res_payload_30 (mul_io_res_payload_30[15:0]), //o
    .io_res_payload_31 (mul_io_res_payload_31[15:0]), //o
    .clk_1_clk         (clk_1_clk                  ), //i
    .clk_1_resetn      (clk_1_resetn               )  //i
  );
  StreamFifoVldProbe_3 fifo (
    .io_push_valid   (mul_io_res_valid           ), //i
    .io_push_ready   (fifo_io_push_ready         ), //o
    .io_push_payload (fifo_io_push_payload[511:0]), //i
    .io_pop_valid    (fifo_io_pop_valid          ), //o
    .io_pop_ready    (output_tready              ), //i
    .io_pop_payload  (fifo_io_pop_payload[511:0] ), //o
    .io_popVldNext   (fifo_io_popVldNext         ), //o
    .io_occupancy    (fifo_io_occupancy[5:0]     ), //o
    .io_availability (fifo_io_availability[5:0]  ), //o
    .clk_1_clk       (clk_1_clk                  ), //i
    .clk_1_resetn    (clk_1_resetn               )  //i
  );
  assign cfg_tready = cfgDeMux_io_input_ready;
  assign cfgDeMux_io_select = cfg_tdata[24];
  assign ram_rdPort_rsp = mem_spinal_port0;
  assign dotLogic_cntOvf_0 = (dotLogic_cnt_0 == t_dotLogic_cntOvf_0[7 : 0]);
  assign dotLogic_cntOvf_1 = (dotLogic_cnt_1 == cfgDeMux_io_outputs_0_payload[15 : 0]);
  assign dotLogic_cntOvfReduce = (dotLogic_cntOvf_0 && dotLogic_cntOvf_1);
  assign dotLogic_inCntOvf = (t_dotLogic_inCntOvf == t_dotLogic_inCntOvf_1[7 : 0]);
  assign dotIn_fire = (dotIn_tvalid && dotIn_tready);
  assign dotLogic_popPre_valid = (dotLogic_flag ? 1'b1 : (dotLogic_cnt_0 < t_dotLogic_popPre_valid));
  assign ram_wrPort_valid = dotIn_fire;
  assign ram_wrPort_payload_address = dotLogic_inCnt;
  assign ram_wrPort_payload_data = dotIn_tdata;
  always @(*) begin
    dotLogic_popPre_ready = dotLogic_popPre_m2sPipe_ready;
    if((! dotLogic_popPre_m2sPipe_valid)) begin
      dotLogic_popPre_ready = 1'b1;
    end
  end

  assign dotLogic_popPre_m2sPipe_valid = dotLogic_popPre_rValid;
  assign dotLogic_dotOut_valid = dotLogic_popPre_m2sPipe_valid;
  assign dotLogic_popPre_m2sPipe_ready = dotLogic_dotOut_ready;
  assign dotLogic_dotOut_payload = ram_rdPort_rsp;
  assign ram_rdPort_cmd_valid = dotLogic_popPre_ready;
  assign ram_rdPort_cmd_payload = dotLogic_cnt_0[4:0];
  assign dotLogic_cntOvfPipe_0 = (dotLogic_cntPipe_0 == t_dotLogic_cntOvfPipe_0[7 : 0]);
  assign dotLogic_cntOvfPipe_1 = (dotLogic_cntPipe_1 == cfgDeMux_io_outputs_0_payload[15 : 0]);
  assign dotLogic_cntOvfReducePipe = (dotLogic_cntOvfPipe_0 && dotLogic_cntOvfPipe_1);
  assign dotLogic_dotOut_fire = (dotLogic_dotOut_valid && dotLogic_dotOut_ready);
  assign dotLogic_enIncPipe = dotLogic_dotOut_fire;
  assign dotLogic_clrCondPipe = (dotLogic_enIncPipe && dotLogic_cntOvfReducePipe);
  assign dotLogic_incCond = (dotLogic_popPre_valid && dotLogic_popPre_ready);
  assign dotLogic_clrCond = (dotLogic_incCond && dotLogic_cntOvfReduce);
  assign dotLogic_enInc = dotLogic_incCond;
  assign dotIn_tready = dotLogic_dotInReady;
  assign axpyLogic_cntOvf_0 = (axpyLogic_cnt_0 == t_axpyLogic_cntOvf_0[7 : 0]);
  assign axpyLogic_cntOvf_1 = (axpyLogic_cnt_1 == cfgDeMux_io_outputs_1_payload[15 : 0]);
  assign axpyLogic_cntOvfReduce = (axpyLogic_cntOvf_0 && axpyLogic_cntOvf_1);
  assign axpyLogic_inpHalt_valid = (axpyIn_tvalid && cfgDeMux_io_outputs_1_valid);
  assign axpyIn_tready = (axpyLogic_inpHalt_ready && cfgDeMux_io_outputs_1_valid);
  assign axpyLogic_inpHalt_payload = axpyIn_tdata;
  assign axpyLogic_scaleHalt_valid = (scale_tvalid && cfgDeMux_io_outputs_1_valid);
  assign scale_tready = (axpyLogic_scaleHalt_ready && cfgDeMux_io_outputs_1_valid);
  assign axpyLogic_scaleHalt_payload = scale_tdata;
  assign t_axpyLogic_inpHalt_ready_1 = (t_axpyLogic_inpHalt_ready == t_t_axpyLogic_inpHalt_ready_1[7 : 0]);
  assign axpyLogic_inpRepeat_fire = (axpyLogic_inpRepeat_valid && axpyLogic_inpRepeat_ready);
  assign axpyLogic_inpRepeat_valid = axpyLogic_inpHalt_valid;
  assign axpyLogic_inpRepeat_payload = axpyLogic_inpHalt_payload;
  assign axpyLogic_inpHalt_ready = (axpyLogic_inpRepeat_ready && t_axpyLogic_inpHalt_ready_1);
  assign axpyLogic_inpRepeat_ready = axpyLogic_inpRepeat_mul_ip_s_axis_a_tready;
  assign axpyLogic_scaleHalt_ready = axpyLogic_inpRepeat_mul_ip_s_axis_b_tready;
  always @(*) begin
    axpyLogic_inpRepeat_mul_ip_m_axis_result_tready = axpyLogic_res_ready;
    if((! axpyLogic_res_valid)) begin
      axpyLogic_inpRepeat_mul_ip_m_axis_result_tready = 1'b1;
    end
  end

  assign axpyLogic_res_valid = mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid;
  assign axpyLogic_res_payload = mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData;
  assign axpyLogic_axpyOut_valid = axpyLogic_res_valid;
  assign axpyLogic_res_ready = axpyLogic_axpyOut_ready;
  assign axpyLogic_axpyOut_payload = {axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,t_axpyLogic_axpyOut_payload}}}}}}}}}}}}}}}};
  assign axpyLogic_incCond = (axpyLogic_res_valid && axpyLogic_res_ready);
  assign axpyLogic_clrCond = (axpyLogic_incCond && axpyLogic_cntOvfReduce);
  assign axpyLogic_enInc = axpyLogic_incCond;
  assign secondDim_1 = cfgDeMux_io_outputs_1_payload[15 : 0];
  assign secondDim = secondDim_1;
  assign preCfgTag = cfgDeMux_io_outputs_1_payload[31 : 26];
  assign dotLogic_dotOut_ready = mux_io_inputs_0_ready;
  assign axpyLogic_axpyOut_ready = mux_io_inputs_1_ready;
  assign mux_io_select = axpyLogic_axpyOut_valid;
  assign wkvIn_tready = join_fire;
  assign join_valid = (wkvIn_tvalid && mux_io_output_valid);
  assign join_fire = (join_valid && join_ready);
  assign act_valid = join_fire;
  assign wkv_valid = join_fire;
  assign act_payload_0 = mux_io_output_payload[15 : 0];
  assign act_payload_1 = mux_io_output_payload[31 : 16];
  assign act_payload_2 = mux_io_output_payload[47 : 32];
  assign act_payload_3 = mux_io_output_payload[63 : 48];
  assign act_payload_4 = mux_io_output_payload[79 : 64];
  assign act_payload_5 = mux_io_output_payload[95 : 80];
  assign act_payload_6 = mux_io_output_payload[111 : 96];
  assign act_payload_7 = mux_io_output_payload[127 : 112];
  assign act_payload_8 = mux_io_output_payload[143 : 128];
  assign act_payload_9 = mux_io_output_payload[159 : 144];
  assign act_payload_10 = mux_io_output_payload[175 : 160];
  assign act_payload_11 = mux_io_output_payload[191 : 176];
  assign act_payload_12 = mux_io_output_payload[207 : 192];
  assign act_payload_13 = mux_io_output_payload[223 : 208];
  assign act_payload_14 = mux_io_output_payload[239 : 224];
  assign act_payload_15 = mux_io_output_payload[255 : 240];
  assign act_payload_16 = mux_io_output_payload[271 : 256];
  assign act_payload_17 = mux_io_output_payload[287 : 272];
  assign act_payload_18 = mux_io_output_payload[303 : 288];
  assign act_payload_19 = mux_io_output_payload[319 : 304];
  assign act_payload_20 = mux_io_output_payload[335 : 320];
  assign act_payload_21 = mux_io_output_payload[351 : 336];
  assign act_payload_22 = mux_io_output_payload[367 : 352];
  assign act_payload_23 = mux_io_output_payload[383 : 368];
  assign act_payload_24 = mux_io_output_payload[399 : 384];
  assign act_payload_25 = mux_io_output_payload[415 : 400];
  assign act_payload_26 = mux_io_output_payload[431 : 416];
  assign act_payload_27 = mux_io_output_payload[447 : 432];
  assign act_payload_28 = mux_io_output_payload[463 : 448];
  assign act_payload_29 = mux_io_output_payload[479 : 464];
  assign act_payload_30 = mux_io_output_payload[495 : 480];
  assign act_payload_31 = mux_io_output_payload[511 : 496];
  assign wkv_payload_0 = wkvIn_tdata[15 : 0];
  assign wkv_payload_1 = wkvIn_tdata[31 : 16];
  assign wkv_payload_2 = wkvIn_tdata[47 : 32];
  assign wkv_payload_3 = wkvIn_tdata[63 : 48];
  assign wkv_payload_4 = wkvIn_tdata[79 : 64];
  assign wkv_payload_5 = wkvIn_tdata[95 : 80];
  assign wkv_payload_6 = wkvIn_tdata[111 : 96];
  assign wkv_payload_7 = wkvIn_tdata[127 : 112];
  assign wkv_payload_8 = wkvIn_tdata[143 : 128];
  assign wkv_payload_9 = wkvIn_tdata[159 : 144];
  assign wkv_payload_10 = wkvIn_tdata[175 : 160];
  assign wkv_payload_11 = wkvIn_tdata[191 : 176];
  assign wkv_payload_12 = wkvIn_tdata[207 : 192];
  assign wkv_payload_13 = wkvIn_tdata[223 : 208];
  assign wkv_payload_14 = wkvIn_tdata[239 : 224];
  assign wkv_payload_15 = wkvIn_tdata[255 : 240];
  assign wkv_payload_16 = wkvIn_tdata[271 : 256];
  assign wkv_payload_17 = wkvIn_tdata[287 : 272];
  assign wkv_payload_18 = wkvIn_tdata[303 : 288];
  assign wkv_payload_19 = wkvIn_tdata[319 : 304];
  assign wkv_payload_20 = wkvIn_tdata[335 : 320];
  assign wkv_payload_21 = wkvIn_tdata[351 : 336];
  assign wkv_payload_22 = wkvIn_tdata[367 : 352];
  assign wkv_payload_23 = wkvIn_tdata[383 : 368];
  assign wkv_payload_24 = wkvIn_tdata[399 : 384];
  assign wkv_payload_25 = wkvIn_tdata[415 : 400];
  assign wkv_payload_26 = wkvIn_tdata[431 : 416];
  assign wkv_payload_27 = wkvIn_tdata[447 : 432];
  assign wkv_payload_28 = wkvIn_tdata[463 : 448];
  assign wkv_payload_29 = wkvIn_tdata[479 : 464];
  assign wkv_payload_30 = wkvIn_tdata[495 : 480];
  assign wkv_payload_31 = wkvIn_tdata[511 : 496];
  assign popVldNext = fifo_io_popVldNext;
  assign fifo_io_push_payload = {mul_io_res_payload_31,{mul_io_res_payload_30,{mul_io_res_payload_29,{mul_io_res_payload_28,{mul_io_res_payload_27,{mul_io_res_payload_26,{mul_io_res_payload_25,{mul_io_res_payload_24,{mul_io_res_payload_23,{mul_io_res_payload_22,{mul_io_res_payload_21,{mul_io_res_payload_20,{mul_io_res_payload_19,{mul_io_res_payload_18,{mul_io_res_payload_17,{mul_io_res_payload_16,t_io_push_payload}}}}}}}}}}}}}}}};
  assign output_tvalid = fifo_io_pop_valid;
  assign output_tdata = fifo_io_pop_payload;
  assign join_ready = ready;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      dotLogic_cnt_0 <= 8'h0;
      dotLogic_cnt_1 <= 16'h0;
      dotLogic_flag <= 1'b0;
      dotLogic_notReadyFlag <= 1'b0;
      dotLogic_inCnt <= 5'h0;
      dotLogic_popPre_rValid <= 1'b0;
      dotLogic_cntPipe_0 <= 8'h0;
      dotLogic_cntPipe_1 <= 16'h0;
      dotLogic_dotInReady <= 1'b0;
      axpyLogic_cnt_0 <= 8'h0;
      axpyLogic_cnt_1 <= 16'h0;
      t_axpyLogic_inpHalt_ready <= 8'h0;
      mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid <= 1'b0;
      ready <= 1'b0;
    end else begin
      if(dotLogic_enInc) begin
        dotLogic_cnt_0 <= (dotLogic_cnt_0 + 8'h01);
      end
      if((dotLogic_enInc && dotLogic_cntOvf_0)) begin
        dotLogic_cnt_0 <= 8'h0;
        dotLogic_cnt_1 <= (dotLogic_cnt_1 + 16'h0001);
      end
      if((dotLogic_enInc && (dotLogic_cntOvf_0 && dotLogic_cntOvf_1))) begin
        dotLogic_cnt_1 <= 16'h0;
      end
      if(dotIn_fire) begin
        dotLogic_inCnt <= (dotLogic_inCnt + 5'h01);
        if(dotLogic_inCntOvf) begin
          dotLogic_inCnt <= 5'h0;
          dotLogic_flag <= 1'b1;
          dotLogic_notReadyFlag <= 1'b1;
        end
      end
      if(dotLogic_popPre_ready) begin
        dotLogic_popPre_rValid <= dotLogic_popPre_valid;
      end
      if(dotLogic_enIncPipe) begin
        dotLogic_cntPipe_0 <= (dotLogic_cntPipe_0 + 8'h01);
      end
      if((dotLogic_enIncPipe && dotLogic_cntOvfPipe_0)) begin
        dotLogic_cntPipe_0 <= 8'h0;
        dotLogic_cntPipe_1 <= (dotLogic_cntPipe_1 + 16'h0001);
      end
      if((dotLogic_enIncPipe && (dotLogic_cntOvfPipe_0 && dotLogic_cntOvfPipe_1))) begin
        dotLogic_cntPipe_1 <= 16'h0;
      end
      if(dotLogic_clrCond) begin
        dotLogic_flag <= 1'b0;
      end
      if(dotLogic_clrCondPipe) begin
        dotLogic_notReadyFlag <= 1'b0;
      end
      if((cfgDeMux_io_outputs_0_valid && (! dotLogic_notReadyFlag))) begin
        dotLogic_dotInReady <= 1'b1;
      end
      if((dotIn_fire && dotLogic_inCntOvf)) begin
        dotLogic_dotInReady <= 1'b0;
      end
      if(axpyLogic_enInc) begin
        axpyLogic_cnt_0 <= (axpyLogic_cnt_0 + 8'h01);
      end
      if((axpyLogic_enInc && axpyLogic_cntOvf_0)) begin
        axpyLogic_cnt_0 <= 8'h0;
        axpyLogic_cnt_1 <= (axpyLogic_cnt_1 + 16'h0001);
      end
      if((axpyLogic_enInc && (axpyLogic_cntOvf_0 && axpyLogic_cntOvf_1))) begin
        axpyLogic_cnt_1 <= 16'h0;
      end
      if(axpyLogic_inpRepeat_fire) begin
        t_axpyLogic_inpHalt_ready <= (t_axpyLogic_inpHalt_ready + 8'h01);
        if(t_axpyLogic_inpHalt_ready_1) begin
          t_axpyLogic_inpHalt_ready <= 8'h0;
        end
      end
      if(axpyLogic_inpRepeat_mul_ip_m_axis_result_tready) begin
        mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid <= axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid;
      end
      ready <= (6'h08 <= fifo_io_availability);
    end
  end

  always @(posedge clk_1_clk) begin
    if(axpyLogic_inpRepeat_mul_ip_m_axis_result_tready) begin
      mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData <= axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata;
    end
  end


endmodule

//StreamFifo_68 replaced by StreamFifo_65

//StreamFifo_67 replaced by StreamFifo_65

//StreamFifo_66 replaced by StreamFifo_65

module StreamFifo_65 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [4:0]    io_occupancy,
  output wire [4:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [4:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [4:0]    logic_ptr_pop;
  wire       [4:0]    logic_ptr_occupancy;
  wire       [4:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [4:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [4:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [4:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [3:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [3:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [3:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [3:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [3:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [4:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [4:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [4:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [511:0] logic_ram [0:15];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 5'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 5'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[4];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 5'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 5'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[4];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 5'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 5'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[3:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[3:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 5'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 5'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 5'h0;
      logic_ptr_pop <= 5'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 5'h10;
      logic_ptr_arb_fmax_fullTracker_value <= 5'h0;
      logic_ptr_fmax_value <= 5'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 5'h0;
      logic_fmaxAvail_value <= 5'h10;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 5'h10;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 5'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 5'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 5'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 5'h0;
        logic_ptr_pop <= 5'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 5'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 5'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 5'h10;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_70 replaced by StreamFifo_69

module StreamFifo_69 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [0:0]    logic_ram_spinal_port1;
  wire       [0:0]    t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [0:0] logic_ram [0:63];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1[0];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_71 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg [5:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 6'h20) == 6'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (6'h20 - logic_ptr_occupancy);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_10 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [2047:0] io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [2047:0] io_pop_payload,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [511:0]  fifo_0_io_pop_payload;
  wire       [5:0]    fifo_0_io_occupancy;
  wire       [5:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [511:0]  fifo_1_io_pop_payload;
  wire       [5:0]    fifo_1_io_occupancy;
  wire       [5:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [511:0]  fifo_2_io_pop_payload;
  wire       [5:0]    fifo_2_io_occupancy;
  wire       [5:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [511:0]  fifo_3_io_pop_payload;
  wire       [5:0]    fifo_3_io_occupancy;
  wire       [5:0]    fifo_3_io_availability;
  wire       [2047:0] t_inPydSplit_0;
  wire       [511:0]  inPydSplit_0;
  wire       [511:0]  inPydSplit_1;
  wire       [511:0]  inPydSplit_2;
  wire       [511:0]  inPydSplit_3;
  wire       [2047:0] outPydMerge;

  StreamFifo_128 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[511:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[5:0]    ), //o
    .io_availability (fifo_0_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_128 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[511:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[5:0]    ), //o
    .io_availability (fifo_1_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_128 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[511:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[5:0]    ), //o
    .io_availability (fifo_2_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  StreamFifo_128 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[511:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[5:0]    ), //o
    .io_availability (fifo_3_io_availability[5:0] ), //o
    .clk_1_clk       (clk_1_clk                   ), //i
    .clk_1_resetn    (clk_1_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[511 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[1023 : 512];
  assign inPydSplit_2 = t_inPydSplit_0[1535 : 1024];
  assign inPydSplit_3 = t_inPydSplit_0[2047 : 1536];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

//StreamFifo_75 replaced by StreamFifo_128

//StreamFifo_74 replaced by StreamFifo_128

//StreamFifo_73 replaced by StreamFifo_128

//StreamFifo_72 replaced by StreamFifo_128

//StreamMux_39 replaced by StreamMux_41

//StreamFifoPipe_4 replaced by StreamFifoPipe_7

//URAM16x16384Fifo_3 replaced by URAM16x16384Fifo_2

module FlowFragmentAlign_1 (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_fragment,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_fragment,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg                 io_input_regNext_valid;
  reg                 io_input_regNext_payload_last;
  reg        [15:0]   io_input_regNext_payload_fragment;

  assign io_output_valid = io_input_regNext_valid;
  assign io_output_payload_last = io_input_regNext_payload_last;
  assign io_output_payload_fragment = io_input_regNext_payload_fragment;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      io_input_regNext_valid <= 1'b0;
    end else begin
      io_input_regNext_valid <= io_input_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    io_input_regNext_payload_last <= io_input_payload_last;
    io_input_regNext_payload_fragment <= io_input_payload_fragment;
  end


endmodule

module FlowFragmentAlign (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_tdata,
  input  wire [5:0]    io_input_payload_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg                 io_input_regNext_valid;
  reg                 io_input_regNext_payload_last;
  reg        [15:0]   io_input_regNext_payload_tdata;
  reg        [5:0]    io_input_regNext_payload_tuser;

  assign io_output_valid = io_input_regNext_valid;
  assign io_output_payload_last = io_input_regNext_payload_last;
  assign io_output_payload_tdata = io_input_regNext_payload_tdata;
  assign io_output_payload_tuser = io_input_regNext_payload_tuser;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      io_input_regNext_valid <= 1'b0;
    end else begin
      io_input_regNext_valid <= io_input_valid;
    end
  end

  always @(posedge clk_1_clk) begin
    io_input_regNext_payload_last <= io_input_payload_last;
    io_input_regNext_payload_tdata <= io_input_payload_tdata;
    io_input_regNext_payload_tuser <= io_input_payload_tuser;
  end


endmodule

module URAM16x16384Fifo_2 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_fragment,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [71:0]   fifo_io_push_payload;
  reg                 fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [71:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [1:0]    t_io_push_widthAdapter_counter_valueNext;
  wire       [0:0]    t_io_push_widthAdapter_counter_valueNext_1;
  wire       [2:0]    t_vldElemIn_8;
  wire       [2:0]    t_vldElemIn_9;
  reg        [2:0]    t_vldElemIn_10;
  wire       [2:0]    t_vldElemIn_11;
  reg        [2:0]    t_vldElemIn_12;
  wire       [2:0]    t_vldElemIn_13;
  wire       [0:0]    t_vldElemIn_14;
  wire       [7:0]    t_vldElemOut;
  reg        [15:0]   t_selectSlice_1;
  wire                adaptIn_valid;
  wire                adaptIn_ready;
  wire                adaptIn_payload_last;
  wire       [63:0]   adaptIn_payload_fragment;
  reg        [3:0]    inAdapter_dataMask;
  wire                io_push_fire;
  reg                 io_push_widthAdapter_counter_willIncrement;
  reg                 io_push_widthAdapter_counter_willClear;
  reg        [1:0]    io_push_widthAdapter_counter_valueNext;
  reg        [1:0]    io_push_widthAdapter_counter_value;
  wire                io_push_widthAdapter_counter_willOverflowIfInc;
  wire                io_push_widthAdapter_counter_willOverflow;
  reg        [47:0]   io_push_widthAdapter_buffer;
  reg                 io_push_widthAdapter_sendIt;
  reg        [63:0]   io_push_widthAdapter_data;
  wire       [2:0]    t_vldElemIn;
  wire       [2:0]    t_vldElemIn_1;
  wire       [2:0]    t_vldElemIn_2;
  wire       [2:0]    t_vldElemIn_3;
  wire       [2:0]    t_vldElemIn_4;
  wire       [2:0]    t_vldElemIn_5;
  wire       [2:0]    t_vldElemIn_6;
  wire       [2:0]    t_vldElemIn_7;
  wire       [1:0]    vldElemIn;
  wire       [1:0]    vldElemOut;
  wire                lastOut;
  wire                pop_valid;
  reg                 pop_ready;
  wire                pop_payload_last;
  wire       [15:0]   pop_payload_fragment;
  reg        [1:0]    cnt;
  wire                cntOvf;
  wire                pop_fire;
  wire       [63:0]   t_selectSlice;
  wire       [15:0]   selectSlice;
  wire                pop_m2sPipe_valid;
  wire                pop_m2sPipe_ready;
  wire                pop_m2sPipe_payload_last;
  wire       [15:0]   pop_m2sPipe_payload_fragment;
  reg                 pop_rValid;
  reg                 pop_rData_last;
  reg        [15:0]   pop_rData_fragment;

  assign t_io_push_widthAdapter_counter_valueNext_1 = io_push_widthAdapter_counter_willIncrement;
  assign t_io_push_widthAdapter_counter_valueNext = {1'd0, t_io_push_widthAdapter_counter_valueNext_1};
  assign t_vldElemIn_8 = (t_vldElemIn_9 - 3'b001);
  assign t_vldElemIn_9 = (t_vldElemIn_10 + t_vldElemIn_12);
  assign t_vldElemIn_14 = inAdapter_dataMask[3];
  assign t_vldElemIn_13 = {2'd0, t_vldElemIn_14};
  assign t_vldElemOut = fifo_io_pop_payload[71 : 64];
  assign t_vldElemIn_11 = {inAdapter_dataMask[2],{inAdapter_dataMask[1],inAdapter_dataMask[0]}};
  StreamFifoPipe_7 fifo (
    .io_push_valid   (adaptIn_valid             ), //i
    .io_push_ready   (fifo_io_push_ready        ), //o
    .io_push_payload (fifo_io_push_payload[71:0]), //i
    .io_pop_valid    (fifo_io_pop_valid         ), //o
    .io_pop_ready    (fifo_io_pop_ready         ), //i
    .io_pop_payload  (fifo_io_pop_payload[71:0] ), //o
    .io_flush        (1'b0                      ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]   ), //o
    .io_availability (fifo_io_availability[12:0]), //o
    .clk_1_clk       (clk_1_clk                 ), //i
    .clk_1_resetn    (clk_1_resetn              )  //i
  );
  always @(*) begin
    case(t_vldElemIn_11)
      3'b000 : t_vldElemIn_10 = t_vldElemIn;
      3'b001 : t_vldElemIn_10 = t_vldElemIn_1;
      3'b010 : t_vldElemIn_10 = t_vldElemIn_2;
      3'b011 : t_vldElemIn_10 = t_vldElemIn_3;
      3'b100 : t_vldElemIn_10 = t_vldElemIn_4;
      3'b101 : t_vldElemIn_10 = t_vldElemIn_5;
      3'b110 : t_vldElemIn_10 = t_vldElemIn_6;
      default : t_vldElemIn_10 = t_vldElemIn_7;
    endcase
  end

  always @(*) begin
    case(t_vldElemIn_13)
      3'b000 : t_vldElemIn_12 = t_vldElemIn;
      3'b001 : t_vldElemIn_12 = t_vldElemIn_1;
      3'b010 : t_vldElemIn_12 = t_vldElemIn_2;
      3'b011 : t_vldElemIn_12 = t_vldElemIn_3;
      3'b100 : t_vldElemIn_12 = t_vldElemIn_4;
      3'b101 : t_vldElemIn_12 = t_vldElemIn_5;
      3'b110 : t_vldElemIn_12 = t_vldElemIn_6;
      default : t_vldElemIn_12 = t_vldElemIn_7;
    endcase
  end

  always @(*) begin
    case(cnt)
      2'b00 : t_selectSlice_1 = t_selectSlice[15 : 0];
      2'b01 : t_selectSlice_1 = t_selectSlice[31 : 16];
      2'b10 : t_selectSlice_1 = t_selectSlice[47 : 32];
      default : t_selectSlice_1 = t_selectSlice[63 : 48];
    endcase
  end

  assign io_push_fire = (io_push_valid && io_push_ready);
  always @(*) begin
    io_push_widthAdapter_counter_willIncrement = 1'b0;
    if(io_push_fire) begin
      io_push_widthAdapter_counter_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    io_push_widthAdapter_counter_willClear = 1'b0;
    if(((io_push_valid && io_push_payload_last) && adaptIn_ready)) begin
      io_push_widthAdapter_counter_willClear = 1'b1;
    end
  end

  assign io_push_widthAdapter_counter_willOverflowIfInc = (io_push_widthAdapter_counter_value == 2'b11);
  assign io_push_widthAdapter_counter_willOverflow = (io_push_widthAdapter_counter_willOverflowIfInc && io_push_widthAdapter_counter_willIncrement);
  always @(*) begin
    io_push_widthAdapter_counter_valueNext = (io_push_widthAdapter_counter_value + t_io_push_widthAdapter_counter_valueNext);
    if(io_push_widthAdapter_counter_willClear) begin
      io_push_widthAdapter_counter_valueNext = 2'b00;
    end
  end

  always @(*) begin
    io_push_widthAdapter_sendIt = io_push_widthAdapter_counter_willOverflowIfInc;
    if(io_push_payload_last) begin
      io_push_widthAdapter_sendIt = 1'b1;
    end
  end

  assign adaptIn_valid = (io_push_valid && io_push_widthAdapter_sendIt);
  assign adaptIn_payload_last = io_push_payload_last;
  assign io_push_ready = (adaptIn_ready || (! io_push_widthAdapter_sendIt));
  always @(*) begin
    io_push_widthAdapter_data = {io_push_payload_fragment,io_push_widthAdapter_buffer};
    case(io_push_widthAdapter_counter_value)
      2'b00 : begin
        io_push_widthAdapter_data[15 : 0] = io_push_payload_fragment;
      end
      2'b01 : begin
        io_push_widthAdapter_data[31 : 16] = io_push_payload_fragment;
      end
      2'b10 : begin
        io_push_widthAdapter_data[47 : 32] = io_push_payload_fragment;
      end
      default : begin
      end
    endcase
  end

  assign adaptIn_payload_fragment = io_push_widthAdapter_data;
  always @(*) begin
    inAdapter_dataMask[0] = (2'b00 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[1] = (2'b01 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[2] = (2'b10 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[3] = (2'b11 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[0] = (2'b00 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[1] = (2'b01 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[2] = (2'b10 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[3] = (2'b11 <= io_push_widthAdapter_counter_value);
  end

  assign t_vldElemIn = 3'b000;
  assign t_vldElemIn_1 = 3'b001;
  assign t_vldElemIn_2 = 3'b001;
  assign t_vldElemIn_3 = 3'b010;
  assign t_vldElemIn_4 = 3'b001;
  assign t_vldElemIn_5 = 3'b010;
  assign t_vldElemIn_6 = 3'b010;
  assign t_vldElemIn_7 = 3'b011;
  assign vldElemIn = t_vldElemIn_8[1:0];
  assign adaptIn_ready = fifo_io_push_ready;
  assign fifo_io_push_payload = {{{adaptIn_payload_last,5'h0},vldElemIn},adaptIn_payload_fragment};
  assign vldElemOut = t_vldElemOut[1 : 0];
  assign lastOut = fifo_io_pop_payload[71];
  assign cntOvf = (cnt == vldElemOut);
  always @(*) begin
    fifo_io_pop_ready = 1'b0;
    if(pop_fire) begin
      if(cntOvf) begin
        fifo_io_pop_ready = 1'b1;
      end
    end
  end

  assign pop_fire = (pop_valid && pop_ready);
  assign t_selectSlice = fifo_io_pop_payload[63 : 0];
  assign selectSlice = t_selectSlice_1;
  assign pop_valid = fifo_io_pop_valid;
  assign pop_payload_fragment = selectSlice;
  assign pop_payload_last = (cntOvf && lastOut);
  always @(*) begin
    pop_ready = pop_m2sPipe_ready;
    if((! pop_m2sPipe_valid)) begin
      pop_ready = 1'b1;
    end
  end

  assign pop_m2sPipe_valid = pop_rValid;
  assign pop_m2sPipe_payload_last = pop_rData_last;
  assign pop_m2sPipe_payload_fragment = pop_rData_fragment;
  assign io_pop_valid = pop_m2sPipe_valid;
  assign pop_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload_last = pop_m2sPipe_payload_last;
  assign io_pop_payload_fragment = pop_m2sPipe_payload_fragment;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      io_push_widthAdapter_counter_value <= 2'b00;
      cnt <= 2'b00;
      pop_rValid <= 1'b0;
    end else begin
      io_push_widthAdapter_counter_value <= io_push_widthAdapter_counter_valueNext;
      if(pop_fire) begin
        cnt <= (cnt + 2'b01);
        if(cntOvf) begin
          cnt <= 2'b00;
        end
      end
      if(pop_ready) begin
        pop_rValid <= pop_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(io_push_fire) begin
      case(io_push_widthAdapter_counter_value)
        2'b00 : begin
          io_push_widthAdapter_buffer[15 : 0] <= io_push_payload_fragment;
        end
        2'b01 : begin
          io_push_widthAdapter_buffer[31 : 16] <= io_push_payload_fragment;
        end
        2'b10 : begin
          io_push_widthAdapter_buffer[47 : 32] <= io_push_payload_fragment;
        end
        default : begin
        end
      endcase
    end
    if(pop_ready) begin
      pop_rData_last <= pop_payload_last;
      pop_rData_fragment <= pop_payload_fragment;
    end
  end


endmodule

module StreamFifo_76 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:4095];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_77 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [10:0]   io_occupancy,
  output wire [10:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [10:0]   logic_ptr_push;
  reg        [10:0]   logic_ptr_pop;
  wire       [10:0]   logic_ptr_occupancy;
  wire       [10:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [9:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [9:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [9:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [9:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [10:0]   logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:1023];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 11'h400) == 11'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[9:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[9:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (11'h400 - logic_ptr_occupancy);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 11'h0;
      logic_ptr_pop <= 11'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 11'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 11'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 11'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 11'h0;
        logic_ptr_pop <= 11'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 11'h0;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_78 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [7:0]    io_occupancy,
  output wire [7:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [7:0]    logic_ptr_push;
  reg        [7:0]    logic_ptr_pop;
  wire       [7:0]    logic_ptr_occupancy;
  wire       [7:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [7:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [7:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [7:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [6:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [6:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [6:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [6:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [6:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [7:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [7:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [7:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:127];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 8'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 8'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[7];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 8'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 8'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[7];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 8'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 8'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[6:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[6:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 8'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 8'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 8'h0;
      logic_ptr_pop <= 8'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 8'h80;
      logic_ptr_arb_fmax_fullTracker_value <= 8'h0;
      logic_ptr_fmax_value <= 8'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 8'h0;
      logic_fmaxAvail_value <= 8'h80;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 8'h80;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 8'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 8'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 8'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 8'h0;
        logic_ptr_pop <= 8'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 8'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 8'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 8'h80;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_81 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [7:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [7:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [7:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [7:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [7:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [7:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [7:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_80 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_79 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [10:0]   io_occupancy,
  output wire [10:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [10:0]   logic_ptr_push;
  reg        [10:0]   logic_ptr_pop;
  wire       [10:0]   logic_ptr_occupancy;
  wire       [10:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [10:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [10:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [10:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [9:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [9:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [9:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [9:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [10:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [10:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [10:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:1023];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 11'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 11'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[10];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 11'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 11'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[10];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 11'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 11'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[9:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[9:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 11'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 11'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 11'h0;
      logic_ptr_pop <= 11'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 11'h400;
      logic_ptr_arb_fmax_fullTracker_value <= 11'h0;
      logic_ptr_fmax_value <= 11'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 11'h0;
      logic_fmaxAvail_value <= 11'h400;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 11'h400;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 11'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 11'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 11'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 11'h0;
        logic_ptr_pop <= 11'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 11'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 11'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 11'h400;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LinearQuant (
  input  wire          x_tvalid,
  input  wire [15:0]   x_tdata,
  input  wire          scale_tvalid,
  input  wire [15:0]   scale_tdata,
  input  wire          zero_tvalid,
  output wire          zero_tready,
  input  wire [7:0]    zero_tdata,
  output wire          q_tvalid,
  output wire [7:0]    q_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                x_regNext_div_ip_m_axis_result_tvalid;
  wire       [15:0]   x_regNext_div_ip_m_axis_result_tdata;
  wire                quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  wire       [15:0]   quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata;
  wire       [9:0]    t_add;
  wire       [15:0]   t_add_1;
  wire       [9:0]    t_add_2;
  wire       [9:0]    t_add_3;
  wire       [7:0]    t_q;
  reg                 x_regNext_valid;
  reg        [15:0]   x_regNext_payload;
  reg                 scale_regNext_valid;
  reg        [15:0]   scale_regNext_payload;
  reg                 quant_x_regNext_div_ip_m_axis_result_regNext_valid;
  reg        [15:0]   quant_x_regNext_div_ip_m_axis_result_regNext_payload;
  wire       [9:0]    add;
  reg        [7:0]    q;

  assign t_add_1 = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata;
  assign t_add = t_add_1[9:0];
  assign t_add_2 = t_add_3;
  assign t_add_3 = {2'd0, zero_tdata};
  assign t_q = add[7:0];
  fp16div12 x_regNext_div_ip (
    .aclk                 (clk_1_clk                                 ), //i
    .s_axis_a_tvalid      (x_regNext_valid                           ), //i
    .s_axis_a_tdata       (x_regNext_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (scale_regNext_valid                       ), //i
    .s_axis_b_tdata       (scale_regNext_payload[15:0]               ), //i
    .m_axis_result_tvalid (x_regNext_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (x_regNext_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16toint9d4 quant_x_regNext_div_ip_m_axis_result_regNext_to_ip (
    .aclk                 (clk_1_clk                                                                   ), //i
    .s_axis_a_tvalid      (quant_x_regNext_div_ip_m_axis_result_regNext_valid                          ), //i
    .s_axis_a_tdata       (quant_x_regNext_div_ip_m_axis_result_regNext_payload[15:0]                  ), //i
    .m_axis_result_tvalid (quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign zero_tready = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  assign add = ($signed(t_add) + $signed(t_add_2));
  always @(*) begin
    q = t_q;
    if(($signed(add) < $signed(10'h0))) begin
      q = 8'h0;
    end
    if(($signed(10'h100) <= $signed(add))) begin
      q = 8'hff;
    end
  end

  assign q_tvalid = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  assign q_tdata = q;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      x_regNext_valid <= 1'b0;
      scale_regNext_valid <= 1'b0;
      quant_x_regNext_div_ip_m_axis_result_regNext_valid <= 1'b0;
    end else begin
      x_regNext_valid <= x_tvalid;
      scale_regNext_valid <= scale_tvalid;
      quant_x_regNext_div_ip_m_axis_result_regNext_valid <= x_regNext_div_ip_m_axis_result_tvalid;
    end
  end

  always @(posedge clk_1_clk) begin
    x_regNext_payload <= x_tdata;
    scale_regNext_payload <= scale_tdata;
    quant_x_regNext_div_ip_m_axis_result_regNext_payload <= x_regNext_div_ip_m_axis_result_tdata;
  end


endmodule

module GetScaleZero (
  input  wire          max_tvalid,
  input  wire [15:0]   max_tdata,
  input  wire          min_tvalid,
  input  wire [15:0]   min_tdata,
  output wire          scale_tvalid,
  output wire [15:0]   scale_tdata,
  output wire          zero_tvalid,
  output wire [7:0]    zero_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire                max_sub_ip_m_axis_result_tvalid;
  wire       [15:0]   max_sub_ip_m_axis_result_tdata;
  wire                getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid;
  wire       [15:0]   getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata;
  wire                minFlowDly_div_ip_m_axis_result_tvalid;
  wire       [15:0]   minFlowDly_div_ip_m_axis_result_tdata;
  wire                divRev_to_ip_m_axis_result_tvalid;
  wire       [15:0]   divRev_to_ip_m_axis_result_tdata;
  wire       [15:0]   t_when;
  wire                maxIntFlow_valid;
  wire       [15:0]   maxIntFlow_payload;
  wire                minFlowDly_valid;
  wire       [15:0]   minFlowDly_payload;
  wire                scale_valid;
  wire       [15:0]   scale_payload;
  wire                divRev_valid;
  wire       [15:0]   divRev_payload;
  wire       [7:0]    maxInt;
  reg        [7:0]    zero;

  assign t_when = {8'd0, maxInt};
  StreamFifo_132 fifo (
    .io_push_valid   (min_tvalid               ), //i
    .io_push_ready   (fifo_io_push_ready       ), //o
    .io_push_payload (min_tdata[15:0]          ), //i
    .io_pop_valid    (fifo_io_pop_valid        ), //o
    .io_pop_ready    (scale_valid              ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                     ), //i
    .io_occupancy    (fifo_io_occupancy[5:0]   ), //o
    .io_availability (fifo_io_availability[5:0]), //o
    .clk_1_clk       (clk_1_clk                ), //i
    .clk_1_resetn    (clk_1_resetn             )  //i
  );
  fp16sub8 max_sub_ip (
    .aclk                 (clk_1_clk                           ), //i
    .s_axis_a_tvalid      (max_tvalid                          ), //i
    .s_axis_a_tdata       (max_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (min_tvalid                          ), //i
    .s_axis_b_tdata       (min_tdata[15:0]                     ), //i
    .m_axis_result_tvalid (max_sub_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (max_sub_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 getCfg_max_sub_ip_m_axis_result_div_ip (
    .aclk                 (clk_1_clk                                                       ), //i
    .s_axis_a_tvalid      (max_sub_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (max_sub_ip_m_axis_result_tdata[15:0]                            ), //i
    .s_axis_b_tvalid      (maxIntFlow_valid                                                ), //i
    .s_axis_b_tdata       (maxIntFlow_payload[15:0]                                        ), //i
    .m_axis_result_tvalid (getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 minFlowDly_div_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (minFlowDly_valid                           ), //i
    .s_axis_a_tdata       (minFlowDly_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (scale_valid                                ), //i
    .s_axis_b_tdata       (scale_payload[15:0]                        ), //i
    .m_axis_result_tvalid (minFlowDly_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (minFlowDly_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16toint9d4 divRev_to_ip (
    .aclk                 (clk_1_clk                             ), //i
    .s_axis_a_tvalid      (divRev_valid                          ), //i
    .s_axis_a_tdata       (divRev_payload[15:0]                  ), //i
    .m_axis_result_tvalid (divRev_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (divRev_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign maxIntFlow_valid = 1'b1;
  assign maxIntFlow_payload = 16'h5bf8;
  assign scale_valid = getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid;
  assign scale_payload = getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata;
  assign divRev_valid = minFlowDly_div_ip_m_axis_result_tvalid;
  assign divRev_payload = {(~ minFlowDly_div_ip_m_axis_result_tdata[15 : 15]),minFlowDly_div_ip_m_axis_result_tdata[14 : 0]};
  assign minFlowDly_valid = fifo_io_pop_valid;
  assign minFlowDly_payload = fifo_io_pop_payload;
  assign maxInt = 8'hff;
  always @(*) begin
    zero = divRev_to_ip_m_axis_result_tdata[7:0];
    if((t_when < divRev_to_ip_m_axis_result_tdata)) begin
      zero = maxInt;
    end
  end

  assign zero_tvalid = divRev_to_ip_m_axis_result_tvalid;
  assign zero_tdata = zero;
  assign scale_tvalid = scale_valid;
  assign scale_tdata = scale_payload;

endmodule

module FindRange (
  input  wire          x_tvalid,
  input  wire [15:0]   x_tdata,
  output wire          max_tvalid,
  output wire [15:0]   max_tdata,
  output wire          min_tvalid,
  output wire [15:0]   min_tdata,
  input  wire [15:0]   cfg_length,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                x_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    x_lt_async_ip_m_axis_result_tdata;
  wire                maxFlow_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    maxFlow_lt_async_ip_m_axis_result_tdata;
  wire       [15:0]   t_cntAbout2Ovf;
  reg        [15:0]   cnt;
  wire                cntAbout2Ovf;
  reg                 cntOvf;
  reg                 maxFlow_valid;
  reg        [15:0]   maxFlow_payload;
  reg                 minFlow_valid;
  reg        [15:0]   minFlow_payload;
  wire                xLessThanMin_valid;
  wire                xLessThanMin_payload;
  wire                xGreaterThanMax_valid;
  wire                xGreaterThanMax_payload;
  reg        [15:0]   minNext;
  reg        [15:0]   maxNext;
  wire                vld;
  reg                 vldDly;
  reg        [15:0]   minNext_regNext;
  reg        [15:0]   maxNext_regNext;

  assign t_cntAbout2Ovf = (cfg_length - 16'h0001);
  fp16lt0 x_lt_async_ip (
    .s_axis_a_tvalid      (x_tvalid                              ), //i
    .s_axis_a_tdata       (x_tdata[15:0]                         ), //i
    .s_axis_b_tvalid      (minFlow_valid                         ), //i
    .s_axis_b_tdata       (minFlow_payload[15:0]                 ), //i
    .m_axis_result_tvalid (x_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (x_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  fp16lt0 maxFlow_lt_async_ip (
    .s_axis_a_tvalid      (maxFlow_valid                               ), //i
    .s_axis_a_tdata       (maxFlow_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (x_tvalid                                    ), //i
    .s_axis_b_tdata       (x_tdata[15:0]                               ), //i
    .m_axis_result_tvalid (maxFlow_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (maxFlow_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  assign cntAbout2Ovf = (cnt == t_cntAbout2Ovf);
  always @(*) begin
    maxFlow_valid = x_tvalid;
    if(x_tvalid) begin
      if(cntOvf) begin
        maxFlow_valid = 1'b0;
      end
    end
  end

  always @(*) begin
    minFlow_valid = x_tvalid;
    if(x_tvalid) begin
      if(cntOvf) begin
        minFlow_valid = 1'b0;
      end
    end
  end

  assign xLessThanMin_valid = x_lt_async_ip_m_axis_result_tvalid;
  assign xLessThanMin_payload = x_lt_async_ip_m_axis_result_tdata[0];
  assign xGreaterThanMax_valid = maxFlow_lt_async_ip_m_axis_result_tvalid;
  assign xGreaterThanMax_payload = maxFlow_lt_async_ip_m_axis_result_tdata[0];
  always @(*) begin
    minNext = minFlow_payload;
    if(x_tvalid) begin
      if(xLessThanMin_payload) begin
        minNext = x_tdata;
      end
    end
  end

  always @(*) begin
    maxNext = maxFlow_payload;
    if(x_tvalid) begin
      if(xGreaterThanMax_payload) begin
        maxNext = x_tdata;
      end
    end
  end

  assign vld = (x_tvalid && cntOvf);
  assign min_tvalid = vldDly;
  assign max_tvalid = vldDly;
  assign min_tdata = minNext_regNext;
  assign max_tdata = maxNext_regNext;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      cnt <= 16'h0;
      cntOvf <= 1'b0;
      maxFlow_payload <= 16'hfc00;
      minFlow_payload <= 16'h7c00;
      vldDly <= 1'b0;
    end else begin
      if(x_tvalid) begin
        cnt <= (cnt + 16'h0001);
        if(cntAbout2Ovf) begin
          cntOvf <= 1'b1;
        end
        if(cntOvf) begin
          cnt <= 16'h0;
          cntOvf <= 1'b0;
        end
      end
      if(x_tvalid) begin
        minFlow_payload <= minNext;
        maxFlow_payload <= maxNext;
        if(cntOvf) begin
          minFlow_payload <= 16'h7c00;
          maxFlow_payload <= 16'hfc00;
        end
      end
      vldDly <= vld;
    end
  end

  always @(posedge clk_1_clk) begin
    minNext_regNext <= minNext;
    maxNext_regNext <= maxNext;
  end


endmodule

module CosSinGen (
  input  wire          index_tvalid,
  output wire          index_tready,
  input  wire [15:0]   index_tdata,
  output wire          sinCos_tvalid,
  input  wire          sinCos_tready,
  output wire [31:0]   sinCos_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   rom_spinal_port0;
  reg        [15:0]   rom_spinal_port1;
  wire       [11:0]   t_sinAddr;
  wire       [11:0]   t_cosAddr;
  wire                popPre_valid;
  reg                 popPre_ready;
  wire       [13:0]   index;
  wire       [12:0]   lowHalf;
  wire       [0:0]    highHalf;
  wire       [11:0]   lowQuarter;
  wire       [0:0]    highQuarter;
  wire                sinFlip;
  wire                sinNeg;
  reg                 sinNegDly;
  wire       [11:0]   sinAddr;
  wire       [15:0]   sinRdOut;
  wire       [15:0]   negSinRdOut;
  wire       [15:0]   sinVal;
  wire                cosFlip;
  wire                cosNeg;
  reg                 cosNegDly;
  wire       [11:0]   cosAddr;
  wire                popPre_fire;
  wire       [15:0]   cosRdOut;
  wire       [15:0]   negCosRdOut;
  wire       [15:0]   cosVal;
  wire                popPre_m2sPipe_valid;
  wire                popPre_m2sPipe_ready;
  reg                 popPre_rValid;
  reg [15:0] rom [0:4095];

  assign t_sinAddr = (12'hfff - lowQuarter);
  assign t_cosAddr = (12'hfff - lowQuarter);
  initial begin
    rom[0] = 16'b0000000000000000;
    rom[1] = 16'b0000111001001000;
    rom[2] = 16'b0001001001001000;
    rom[3] = 16'b0001010010110110;
    rom[4] = 16'b0001011001001000;
    rom[5] = 16'b0001011111011011;
    rom[6] = 16'b0001100010110110;
    rom[7] = 16'b0001100101111111;
    rom[8] = 16'b0001101001001000;
    rom[9] = 16'b0001101100010010;
    rom[10] = 16'b0001101111011011;
    rom[11] = 16'b0001110001010010;
    rom[12] = 16'b0001110010110110;
    rom[13] = 16'b0001110100011011;
    rom[14] = 16'b0001110101111111;
    rom[15] = 16'b0001110111100100;
    rom[16] = 16'b0001111001001000;
    rom[17] = 16'b0001111010101101;
    rom[18] = 16'b0001111100010010;
    rom[19] = 16'b0001111101110110;
    rom[20] = 16'b0001111111011011;
    rom[21] = 16'b0010000000100000;
    rom[22] = 16'b0010000001010010;
    rom[23] = 16'b0010000010000100;
    rom[24] = 16'b0010000010110110;
    rom[25] = 16'b0010000011101001;
    rom[26] = 16'b0010000100011011;
    rom[27] = 16'b0010000101001101;
    rom[28] = 16'b0010000101111111;
    rom[29] = 16'b0010000110110010;
    rom[30] = 16'b0010000111100100;
    rom[31] = 16'b0010001000010110;
    rom[32] = 16'b0010001001001000;
    rom[33] = 16'b0010001001111011;
    rom[34] = 16'b0010001010101101;
    rom[35] = 16'b0010001011011111;
    rom[36] = 16'b0010001100010001;
    rom[37] = 16'b0010001101000100;
    rom[38] = 16'b0010001101110110;
    rom[39] = 16'b0010001110101000;
    rom[40] = 16'b0010001111011011;
    rom[41] = 16'b0010010000000110;
    rom[42] = 16'b0010010000100000;
    rom[43] = 16'b0010010000111001;
    rom[44] = 16'b0010010001010010;
    rom[45] = 16'b0010010001101011;
    rom[46] = 16'b0010010010000100;
    rom[47] = 16'b0010010010011101;
    rom[48] = 16'b0010010010110110;
    rom[49] = 16'b0010010011001111;
    rom[50] = 16'b0010010011101001;
    rom[51] = 16'b0010010100000010;
    rom[52] = 16'b0010010100011011;
    rom[53] = 16'b0010010100110100;
    rom[54] = 16'b0010010101001101;
    rom[55] = 16'b0010010101100110;
    rom[56] = 16'b0010010101111111;
    rom[57] = 16'b0010010110011000;
    rom[58] = 16'b0010010110110010;
    rom[59] = 16'b0010010111001011;
    rom[60] = 16'b0010010111100100;
    rom[61] = 16'b0010010111111101;
    rom[62] = 16'b0010011000010110;
    rom[63] = 16'b0010011000101111;
    rom[64] = 16'b0010011001001000;
    rom[65] = 16'b0010011001100001;
    rom[66] = 16'b0010011001111011;
    rom[67] = 16'b0010011010010100;
    rom[68] = 16'b0010011010101101;
    rom[69] = 16'b0010011011000110;
    rom[70] = 16'b0010011011011111;
    rom[71] = 16'b0010011011111000;
    rom[72] = 16'b0010011100010001;
    rom[73] = 16'b0010011100101010;
    rom[74] = 16'b0010011101000100;
    rom[75] = 16'b0010011101011101;
    rom[76] = 16'b0010011101110110;
    rom[77] = 16'b0010011110001111;
    rom[78] = 16'b0010011110101000;
    rom[79] = 16'b0010011111000001;
    rom[80] = 16'b0010011111011010;
    rom[81] = 16'b0010011111110011;
    rom[82] = 16'b0010100000000110;
    rom[83] = 16'b0010100000010011;
    rom[84] = 16'b0010100000011111;
    rom[85] = 16'b0010100000101100;
    rom[86] = 16'b0010100000111001;
    rom[87] = 16'b0010100001000101;
    rom[88] = 16'b0010100001010010;
    rom[89] = 16'b0010100001011110;
    rom[90] = 16'b0010100001101011;
    rom[91] = 16'b0010100001110111;
    rom[92] = 16'b0010100010000100;
    rom[93] = 16'b0010100010010000;
    rom[94] = 16'b0010100010011101;
    rom[95] = 16'b0010100010101010;
    rom[96] = 16'b0010100010110110;
    rom[97] = 16'b0010100011000011;
    rom[98] = 16'b0010100011001111;
    rom[99] = 16'b0010100011011100;
    rom[100] = 16'b0010100011101000;
    rom[101] = 16'b0010100011110101;
    rom[102] = 16'b0010100100000001;
    rom[103] = 16'b0010100100001110;
    rom[104] = 16'b0010100100011011;
    rom[105] = 16'b0010100100100111;
    rom[106] = 16'b0010100100110100;
    rom[107] = 16'b0010100101000000;
    rom[108] = 16'b0010100101001101;
    rom[109] = 16'b0010100101011001;
    rom[110] = 16'b0010100101100110;
    rom[111] = 16'b0010100101110010;
    rom[112] = 16'b0010100101111111;
    rom[113] = 16'b0010100110001100;
    rom[114] = 16'b0010100110011000;
    rom[115] = 16'b0010100110100101;
    rom[116] = 16'b0010100110110001;
    rom[117] = 16'b0010100110111110;
    rom[118] = 16'b0010100111001010;
    rom[119] = 16'b0010100111010111;
    rom[120] = 16'b0010100111100011;
    rom[121] = 16'b0010100111110000;
    rom[122] = 16'b0010100111111101;
    rom[123] = 16'b0010101000001001;
    rom[124] = 16'b0010101000010110;
    rom[125] = 16'b0010101000100010;
    rom[126] = 16'b0010101000101111;
    rom[127] = 16'b0010101000111011;
    rom[128] = 16'b0010101001001000;
    rom[129] = 16'b0010101001010100;
    rom[130] = 16'b0010101001100001;
    rom[131] = 16'b0010101001101110;
    rom[132] = 16'b0010101001111010;
    rom[133] = 16'b0010101010000111;
    rom[134] = 16'b0010101010010011;
    rom[135] = 16'b0010101010100000;
    rom[136] = 16'b0010101010101100;
    rom[137] = 16'b0010101010111001;
    rom[138] = 16'b0010101011000101;
    rom[139] = 16'b0010101011010010;
    rom[140] = 16'b0010101011011110;
    rom[141] = 16'b0010101011101011;
    rom[142] = 16'b0010101011111000;
    rom[143] = 16'b0010101100000100;
    rom[144] = 16'b0010101100010001;
    rom[145] = 16'b0010101100011101;
    rom[146] = 16'b0010101100101010;
    rom[147] = 16'b0010101100110110;
    rom[148] = 16'b0010101101000011;
    rom[149] = 16'b0010101101001111;
    rom[150] = 16'b0010101101011100;
    rom[151] = 16'b0010101101101000;
    rom[152] = 16'b0010101101110101;
    rom[153] = 16'b0010101110000010;
    rom[154] = 16'b0010101110001110;
    rom[155] = 16'b0010101110011011;
    rom[156] = 16'b0010101110100111;
    rom[157] = 16'b0010101110110100;
    rom[158] = 16'b0010101111000000;
    rom[159] = 16'b0010101111001101;
    rom[160] = 16'b0010101111011001;
    rom[161] = 16'b0010101111100110;
    rom[162] = 16'b0010101111110010;
    rom[163] = 16'b0010101111111111;
    rom[164] = 16'b0010110000000110;
    rom[165] = 16'b0010110000001100;
    rom[166] = 16'b0010110000010010;
    rom[167] = 16'b0010110000011001;
    rom[168] = 16'b0010110000011111;
    rom[169] = 16'b0010110000100101;
    rom[170] = 16'b0010110000101011;
    rom[171] = 16'b0010110000110010;
    rom[172] = 16'b0010110000111000;
    rom[173] = 16'b0010110000111110;
    rom[174] = 16'b0010110001000100;
    rom[175] = 16'b0010110001001011;
    rom[176] = 16'b0010110001010001;
    rom[177] = 16'b0010110001010111;
    rom[178] = 16'b0010110001011110;
    rom[179] = 16'b0010110001100100;
    rom[180] = 16'b0010110001101010;
    rom[181] = 16'b0010110001110000;
    rom[182] = 16'b0010110001110111;
    rom[183] = 16'b0010110001111101;
    rom[184] = 16'b0010110010000011;
    rom[185] = 16'b0010110010001001;
    rom[186] = 16'b0010110010010000;
    rom[187] = 16'b0010110010010110;
    rom[188] = 16'b0010110010011100;
    rom[189] = 16'b0010110010100010;
    rom[190] = 16'b0010110010101001;
    rom[191] = 16'b0010110010101111;
    rom[192] = 16'b0010110010110101;
    rom[193] = 16'b0010110010111100;
    rom[194] = 16'b0010110011000010;
    rom[195] = 16'b0010110011001000;
    rom[196] = 16'b0010110011001110;
    rom[197] = 16'b0010110011010101;
    rom[198] = 16'b0010110011011011;
    rom[199] = 16'b0010110011100001;
    rom[200] = 16'b0010110011100111;
    rom[201] = 16'b0010110011101110;
    rom[202] = 16'b0010110011110100;
    rom[203] = 16'b0010110011111010;
    rom[204] = 16'b0010110100000000;
    rom[205] = 16'b0010110100000111;
    rom[206] = 16'b0010110100001101;
    rom[207] = 16'b0010110100010011;
    rom[208] = 16'b0010110100011010;
    rom[209] = 16'b0010110100100000;
    rom[210] = 16'b0010110100100110;
    rom[211] = 16'b0010110100101100;
    rom[212] = 16'b0010110100110011;
    rom[213] = 16'b0010110100111001;
    rom[214] = 16'b0010110100111111;
    rom[215] = 16'b0010110101000101;
    rom[216] = 16'b0010110101001100;
    rom[217] = 16'b0010110101010010;
    rom[218] = 16'b0010110101011000;
    rom[219] = 16'b0010110101011110;
    rom[220] = 16'b0010110101100101;
    rom[221] = 16'b0010110101101011;
    rom[222] = 16'b0010110101110001;
    rom[223] = 16'b0010110101110111;
    rom[224] = 16'b0010110101111110;
    rom[225] = 16'b0010110110000100;
    rom[226] = 16'b0010110110001010;
    rom[227] = 16'b0010110110010000;
    rom[228] = 16'b0010110110010111;
    rom[229] = 16'b0010110110011101;
    rom[230] = 16'b0010110110100011;
    rom[231] = 16'b0010110110101010;
    rom[232] = 16'b0010110110110000;
    rom[233] = 16'b0010110110110110;
    rom[234] = 16'b0010110110111100;
    rom[235] = 16'b0010110111000011;
    rom[236] = 16'b0010110111001001;
    rom[237] = 16'b0010110111001111;
    rom[238] = 16'b0010110111010101;
    rom[239] = 16'b0010110111011100;
    rom[240] = 16'b0010110111100010;
    rom[241] = 16'b0010110111101000;
    rom[242] = 16'b0010110111101110;
    rom[243] = 16'b0010110111110101;
    rom[244] = 16'b0010110111111011;
    rom[245] = 16'b0010111000000001;
    rom[246] = 16'b0010111000000111;
    rom[247] = 16'b0010111000001110;
    rom[248] = 16'b0010111000010100;
    rom[249] = 16'b0010111000011010;
    rom[250] = 16'b0010111000100000;
    rom[251] = 16'b0010111000100111;
    rom[252] = 16'b0010111000101101;
    rom[253] = 16'b0010111000110011;
    rom[254] = 16'b0010111000111001;
    rom[255] = 16'b0010111001000000;
    rom[256] = 16'b0010111001000110;
    rom[257] = 16'b0010111001001100;
    rom[258] = 16'b0010111001010010;
    rom[259] = 16'b0010111001011001;
    rom[260] = 16'b0010111001011111;
    rom[261] = 16'b0010111001100101;
    rom[262] = 16'b0010111001101011;
    rom[263] = 16'b0010111001110010;
    rom[264] = 16'b0010111001111000;
    rom[265] = 16'b0010111001111110;
    rom[266] = 16'b0010111010000100;
    rom[267] = 16'b0010111010001011;
    rom[268] = 16'b0010111010010001;
    rom[269] = 16'b0010111010010111;
    rom[270] = 16'b0010111010011101;
    rom[271] = 16'b0010111010100100;
    rom[272] = 16'b0010111010101010;
    rom[273] = 16'b0010111010110000;
    rom[274] = 16'b0010111010110110;
    rom[275] = 16'b0010111010111101;
    rom[276] = 16'b0010111011000011;
    rom[277] = 16'b0010111011001001;
    rom[278] = 16'b0010111011001111;
    rom[279] = 16'b0010111011010110;
    rom[280] = 16'b0010111011011100;
    rom[281] = 16'b0010111011100010;
    rom[282] = 16'b0010111011101000;
    rom[283] = 16'b0010111011101111;
    rom[284] = 16'b0010111011110101;
    rom[285] = 16'b0010111011111011;
    rom[286] = 16'b0010111100000001;
    rom[287] = 16'b0010111100001000;
    rom[288] = 16'b0010111100001110;
    rom[289] = 16'b0010111100010100;
    rom[290] = 16'b0010111100011010;
    rom[291] = 16'b0010111100100001;
    rom[292] = 16'b0010111100100111;
    rom[293] = 16'b0010111100101101;
    rom[294] = 16'b0010111100110011;
    rom[295] = 16'b0010111100111010;
    rom[296] = 16'b0010111101000000;
    rom[297] = 16'b0010111101000110;
    rom[298] = 16'b0010111101001100;
    rom[299] = 16'b0010111101010011;
    rom[300] = 16'b0010111101011001;
    rom[301] = 16'b0010111101011111;
    rom[302] = 16'b0010111101100101;
    rom[303] = 16'b0010111101101100;
    rom[304] = 16'b0010111101110010;
    rom[305] = 16'b0010111101111000;
    rom[306] = 16'b0010111101111110;
    rom[307] = 16'b0010111110000100;
    rom[308] = 16'b0010111110001011;
    rom[309] = 16'b0010111110010001;
    rom[310] = 16'b0010111110010111;
    rom[311] = 16'b0010111110011101;
    rom[312] = 16'b0010111110100100;
    rom[313] = 16'b0010111110101010;
    rom[314] = 16'b0010111110110000;
    rom[315] = 16'b0010111110110110;
    rom[316] = 16'b0010111110111101;
    rom[317] = 16'b0010111111000011;
    rom[318] = 16'b0010111111001001;
    rom[319] = 16'b0010111111001111;
    rom[320] = 16'b0010111111010110;
    rom[321] = 16'b0010111111011100;
    rom[322] = 16'b0010111111100010;
    rom[323] = 16'b0010111111101000;
    rom[324] = 16'b0010111111101111;
    rom[325] = 16'b0010111111110101;
    rom[326] = 16'b0010111111111011;
    rom[327] = 16'b0011000000000001;
    rom[328] = 16'b0011000000000100;
    rom[329] = 16'b0011000000000111;
    rom[330] = 16'b0011000000001010;
    rom[331] = 16'b0011000000001101;
    rom[332] = 16'b0011000000010000;
    rom[333] = 16'b0011000000010011;
    rom[334] = 16'b0011000000010110;
    rom[335] = 16'b0011000000011010;
    rom[336] = 16'b0011000000011101;
    rom[337] = 16'b0011000000100000;
    rom[338] = 16'b0011000000100011;
    rom[339] = 16'b0011000000100110;
    rom[340] = 16'b0011000000101001;
    rom[341] = 16'b0011000000101100;
    rom[342] = 16'b0011000000101111;
    rom[343] = 16'b0011000000110010;
    rom[344] = 16'b0011000000110110;
    rom[345] = 16'b0011000000111001;
    rom[346] = 16'b0011000000111100;
    rom[347] = 16'b0011000000111111;
    rom[348] = 16'b0011000001000010;
    rom[349] = 16'b0011000001000101;
    rom[350] = 16'b0011000001001000;
    rom[351] = 16'b0011000001001011;
    rom[352] = 16'b0011000001001110;
    rom[353] = 16'b0011000001010010;
    rom[354] = 16'b0011000001010101;
    rom[355] = 16'b0011000001011000;
    rom[356] = 16'b0011000001011011;
    rom[357] = 16'b0011000001011110;
    rom[358] = 16'b0011000001100001;
    rom[359] = 16'b0011000001100100;
    rom[360] = 16'b0011000001100111;
    rom[361] = 16'b0011000001101010;
    rom[362] = 16'b0011000001101110;
    rom[363] = 16'b0011000001110001;
    rom[364] = 16'b0011000001110100;
    rom[365] = 16'b0011000001110111;
    rom[366] = 16'b0011000001111010;
    rom[367] = 16'b0011000001111101;
    rom[368] = 16'b0011000010000000;
    rom[369] = 16'b0011000010000011;
    rom[370] = 16'b0011000010000110;
    rom[371] = 16'b0011000010001010;
    rom[372] = 16'b0011000010001101;
    rom[373] = 16'b0011000010010000;
    rom[374] = 16'b0011000010010011;
    rom[375] = 16'b0011000010010110;
    rom[376] = 16'b0011000010011001;
    rom[377] = 16'b0011000010011100;
    rom[378] = 16'b0011000010011111;
    rom[379] = 16'b0011000010100010;
    rom[380] = 16'b0011000010100110;
    rom[381] = 16'b0011000010101001;
    rom[382] = 16'b0011000010101100;
    rom[383] = 16'b0011000010101111;
    rom[384] = 16'b0011000010110010;
    rom[385] = 16'b0011000010110101;
    rom[386] = 16'b0011000010111000;
    rom[387] = 16'b0011000010111011;
    rom[388] = 16'b0011000010111110;
    rom[389] = 16'b0011000011000010;
    rom[390] = 16'b0011000011000101;
    rom[391] = 16'b0011000011001000;
    rom[392] = 16'b0011000011001011;
    rom[393] = 16'b0011000011001110;
    rom[394] = 16'b0011000011010001;
    rom[395] = 16'b0011000011010100;
    rom[396] = 16'b0011000011010111;
    rom[397] = 16'b0011000011011010;
    rom[398] = 16'b0011000011011110;
    rom[399] = 16'b0011000011100001;
    rom[400] = 16'b0011000011100100;
    rom[401] = 16'b0011000011100111;
    rom[402] = 16'b0011000011101010;
    rom[403] = 16'b0011000011101101;
    rom[404] = 16'b0011000011110000;
    rom[405] = 16'b0011000011110011;
    rom[406] = 16'b0011000011110110;
    rom[407] = 16'b0011000011111001;
    rom[408] = 16'b0011000011111101;
    rom[409] = 16'b0011000100000000;
    rom[410] = 16'b0011000100000011;
    rom[411] = 16'b0011000100000110;
    rom[412] = 16'b0011000100001001;
    rom[413] = 16'b0011000100001100;
    rom[414] = 16'b0011000100001111;
    rom[415] = 16'b0011000100010010;
    rom[416] = 16'b0011000100010101;
    rom[417] = 16'b0011000100011000;
    rom[418] = 16'b0011000100011100;
    rom[419] = 16'b0011000100011111;
    rom[420] = 16'b0011000100100010;
    rom[421] = 16'b0011000100100101;
    rom[422] = 16'b0011000100101000;
    rom[423] = 16'b0011000100101011;
    rom[424] = 16'b0011000100101110;
    rom[425] = 16'b0011000100110001;
    rom[426] = 16'b0011000100110100;
    rom[427] = 16'b0011000100110111;
    rom[428] = 16'b0011000100111011;
    rom[429] = 16'b0011000100111110;
    rom[430] = 16'b0011000101000001;
    rom[431] = 16'b0011000101000100;
    rom[432] = 16'b0011000101000111;
    rom[433] = 16'b0011000101001010;
    rom[434] = 16'b0011000101001101;
    rom[435] = 16'b0011000101010000;
    rom[436] = 16'b0011000101010011;
    rom[437] = 16'b0011000101010110;
    rom[438] = 16'b0011000101011010;
    rom[439] = 16'b0011000101011101;
    rom[440] = 16'b0011000101100000;
    rom[441] = 16'b0011000101100011;
    rom[442] = 16'b0011000101100110;
    rom[443] = 16'b0011000101101001;
    rom[444] = 16'b0011000101101100;
    rom[445] = 16'b0011000101101111;
    rom[446] = 16'b0011000101110010;
    rom[447] = 16'b0011000101110101;
    rom[448] = 16'b0011000101111001;
    rom[449] = 16'b0011000101111100;
    rom[450] = 16'b0011000101111111;
    rom[451] = 16'b0011000110000010;
    rom[452] = 16'b0011000110000101;
    rom[453] = 16'b0011000110001000;
    rom[454] = 16'b0011000110001011;
    rom[455] = 16'b0011000110001110;
    rom[456] = 16'b0011000110010001;
    rom[457] = 16'b0011000110010100;
    rom[458] = 16'b0011000110010111;
    rom[459] = 16'b0011000110011011;
    rom[460] = 16'b0011000110011110;
    rom[461] = 16'b0011000110100001;
    rom[462] = 16'b0011000110100100;
    rom[463] = 16'b0011000110100111;
    rom[464] = 16'b0011000110101010;
    rom[465] = 16'b0011000110101101;
    rom[466] = 16'b0011000110110000;
    rom[467] = 16'b0011000110110011;
    rom[468] = 16'b0011000110110110;
    rom[469] = 16'b0011000110111001;
    rom[470] = 16'b0011000110111101;
    rom[471] = 16'b0011000111000000;
    rom[472] = 16'b0011000111000011;
    rom[473] = 16'b0011000111000110;
    rom[474] = 16'b0011000111001001;
    rom[475] = 16'b0011000111001100;
    rom[476] = 16'b0011000111001111;
    rom[477] = 16'b0011000111010010;
    rom[478] = 16'b0011000111010101;
    rom[479] = 16'b0011000111011000;
    rom[480] = 16'b0011000111011011;
    rom[481] = 16'b0011000111011111;
    rom[482] = 16'b0011000111100010;
    rom[483] = 16'b0011000111100101;
    rom[484] = 16'b0011000111101000;
    rom[485] = 16'b0011000111101011;
    rom[486] = 16'b0011000111101110;
    rom[487] = 16'b0011000111110001;
    rom[488] = 16'b0011000111110100;
    rom[489] = 16'b0011000111110111;
    rom[490] = 16'b0011000111111010;
    rom[491] = 16'b0011000111111101;
    rom[492] = 16'b0011001000000001;
    rom[493] = 16'b0011001000000100;
    rom[494] = 16'b0011001000000111;
    rom[495] = 16'b0011001000001010;
    rom[496] = 16'b0011001000001101;
    rom[497] = 16'b0011001000010000;
    rom[498] = 16'b0011001000010011;
    rom[499] = 16'b0011001000010110;
    rom[500] = 16'b0011001000011001;
    rom[501] = 16'b0011001000011100;
    rom[502] = 16'b0011001000011111;
    rom[503] = 16'b0011001000100010;
    rom[504] = 16'b0011001000100110;
    rom[505] = 16'b0011001000101001;
    rom[506] = 16'b0011001000101100;
    rom[507] = 16'b0011001000101111;
    rom[508] = 16'b0011001000110010;
    rom[509] = 16'b0011001000110101;
    rom[510] = 16'b0011001000111000;
    rom[511] = 16'b0011001000111011;
    rom[512] = 16'b0011001000111110;
    rom[513] = 16'b0011001001000001;
    rom[514] = 16'b0011001001000100;
    rom[515] = 16'b0011001001000111;
    rom[516] = 16'b0011001001001011;
    rom[517] = 16'b0011001001001110;
    rom[518] = 16'b0011001001010001;
    rom[519] = 16'b0011001001010100;
    rom[520] = 16'b0011001001010111;
    rom[521] = 16'b0011001001011010;
    rom[522] = 16'b0011001001011101;
    rom[523] = 16'b0011001001100000;
    rom[524] = 16'b0011001001100011;
    rom[525] = 16'b0011001001100110;
    rom[526] = 16'b0011001001101001;
    rom[527] = 16'b0011001001101100;
    rom[528] = 16'b0011001001101111;
    rom[529] = 16'b0011001001110011;
    rom[530] = 16'b0011001001110110;
    rom[531] = 16'b0011001001111001;
    rom[532] = 16'b0011001001111100;
    rom[533] = 16'b0011001001111111;
    rom[534] = 16'b0011001010000010;
    rom[535] = 16'b0011001010000101;
    rom[536] = 16'b0011001010001000;
    rom[537] = 16'b0011001010001011;
    rom[538] = 16'b0011001010001110;
    rom[539] = 16'b0011001010010001;
    rom[540] = 16'b0011001010010100;
    rom[541] = 16'b0011001010010111;
    rom[542] = 16'b0011001010011011;
    rom[543] = 16'b0011001010011110;
    rom[544] = 16'b0011001010100001;
    rom[545] = 16'b0011001010100100;
    rom[546] = 16'b0011001010100111;
    rom[547] = 16'b0011001010101010;
    rom[548] = 16'b0011001010101101;
    rom[549] = 16'b0011001010110000;
    rom[550] = 16'b0011001010110011;
    rom[551] = 16'b0011001010110110;
    rom[552] = 16'b0011001010111001;
    rom[553] = 16'b0011001010111100;
    rom[554] = 16'b0011001010111111;
    rom[555] = 16'b0011001011000010;
    rom[556] = 16'b0011001011000110;
    rom[557] = 16'b0011001011001001;
    rom[558] = 16'b0011001011001100;
    rom[559] = 16'b0011001011001111;
    rom[560] = 16'b0011001011010010;
    rom[561] = 16'b0011001011010101;
    rom[562] = 16'b0011001011011000;
    rom[563] = 16'b0011001011011011;
    rom[564] = 16'b0011001011011110;
    rom[565] = 16'b0011001011100001;
    rom[566] = 16'b0011001011100100;
    rom[567] = 16'b0011001011100111;
    rom[568] = 16'b0011001011101010;
    rom[569] = 16'b0011001011101101;
    rom[570] = 16'b0011001011110000;
    rom[571] = 16'b0011001011110100;
    rom[572] = 16'b0011001011110111;
    rom[573] = 16'b0011001011111010;
    rom[574] = 16'b0011001011111101;
    rom[575] = 16'b0011001100000000;
    rom[576] = 16'b0011001100000011;
    rom[577] = 16'b0011001100000110;
    rom[578] = 16'b0011001100001001;
    rom[579] = 16'b0011001100001100;
    rom[580] = 16'b0011001100001111;
    rom[581] = 16'b0011001100010010;
    rom[582] = 16'b0011001100010101;
    rom[583] = 16'b0011001100011000;
    rom[584] = 16'b0011001100011011;
    rom[585] = 16'b0011001100011110;
    rom[586] = 16'b0011001100100010;
    rom[587] = 16'b0011001100100101;
    rom[588] = 16'b0011001100101000;
    rom[589] = 16'b0011001100101011;
    rom[590] = 16'b0011001100101110;
    rom[591] = 16'b0011001100110001;
    rom[592] = 16'b0011001100110100;
    rom[593] = 16'b0011001100110111;
    rom[594] = 16'b0011001100111010;
    rom[595] = 16'b0011001100111101;
    rom[596] = 16'b0011001101000000;
    rom[597] = 16'b0011001101000011;
    rom[598] = 16'b0011001101000110;
    rom[599] = 16'b0011001101001001;
    rom[600] = 16'b0011001101001100;
    rom[601] = 16'b0011001101001111;
    rom[602] = 16'b0011001101010010;
    rom[603] = 16'b0011001101010110;
    rom[604] = 16'b0011001101011001;
    rom[605] = 16'b0011001101011100;
    rom[606] = 16'b0011001101011111;
    rom[607] = 16'b0011001101100010;
    rom[608] = 16'b0011001101100101;
    rom[609] = 16'b0011001101101000;
    rom[610] = 16'b0011001101101011;
    rom[611] = 16'b0011001101101110;
    rom[612] = 16'b0011001101110001;
    rom[613] = 16'b0011001101110100;
    rom[614] = 16'b0011001101110111;
    rom[615] = 16'b0011001101111010;
    rom[616] = 16'b0011001101111101;
    rom[617] = 16'b0011001110000000;
    rom[618] = 16'b0011001110000011;
    rom[619] = 16'b0011001110000110;
    rom[620] = 16'b0011001110001001;
    rom[621] = 16'b0011001110001101;
    rom[622] = 16'b0011001110010000;
    rom[623] = 16'b0011001110010011;
    rom[624] = 16'b0011001110010110;
    rom[625] = 16'b0011001110011001;
    rom[626] = 16'b0011001110011100;
    rom[627] = 16'b0011001110011111;
    rom[628] = 16'b0011001110100010;
    rom[629] = 16'b0011001110100101;
    rom[630] = 16'b0011001110101000;
    rom[631] = 16'b0011001110101011;
    rom[632] = 16'b0011001110101110;
    rom[633] = 16'b0011001110110001;
    rom[634] = 16'b0011001110110100;
    rom[635] = 16'b0011001110110111;
    rom[636] = 16'b0011001110111010;
    rom[637] = 16'b0011001110111101;
    rom[638] = 16'b0011001111000000;
    rom[639] = 16'b0011001111000011;
    rom[640] = 16'b0011001111000110;
    rom[641] = 16'b0011001111001010;
    rom[642] = 16'b0011001111001101;
    rom[643] = 16'b0011001111010000;
    rom[644] = 16'b0011001111010011;
    rom[645] = 16'b0011001111010110;
    rom[646] = 16'b0011001111011001;
    rom[647] = 16'b0011001111011100;
    rom[648] = 16'b0011001111011111;
    rom[649] = 16'b0011001111100010;
    rom[650] = 16'b0011001111100101;
    rom[651] = 16'b0011001111101000;
    rom[652] = 16'b0011001111101011;
    rom[653] = 16'b0011001111101110;
    rom[654] = 16'b0011001111110001;
    rom[655] = 16'b0011001111110100;
    rom[656] = 16'b0011001111110111;
    rom[657] = 16'b0011001111111010;
    rom[658] = 16'b0011001111111101;
    rom[659] = 16'b0011010000000000;
    rom[660] = 16'b0011010000000010;
    rom[661] = 16'b0011010000000011;
    rom[662] = 16'b0011010000000101;
    rom[663] = 16'b0011010000000110;
    rom[664] = 16'b0011010000001000;
    rom[665] = 16'b0011010000001001;
    rom[666] = 16'b0011010000001011;
    rom[667] = 16'b0011010000001100;
    rom[668] = 16'b0011010000001110;
    rom[669] = 16'b0011010000001111;
    rom[670] = 16'b0011010000010001;
    rom[671] = 16'b0011010000010010;
    rom[672] = 16'b0011010000010100;
    rom[673] = 16'b0011010000010101;
    rom[674] = 16'b0011010000010111;
    rom[675] = 16'b0011010000011000;
    rom[676] = 16'b0011010000011010;
    rom[677] = 16'b0011010000011100;
    rom[678] = 16'b0011010000011101;
    rom[679] = 16'b0011010000011111;
    rom[680] = 16'b0011010000100000;
    rom[681] = 16'b0011010000100010;
    rom[682] = 16'b0011010000100011;
    rom[683] = 16'b0011010000100101;
    rom[684] = 16'b0011010000100110;
    rom[685] = 16'b0011010000101000;
    rom[686] = 16'b0011010000101001;
    rom[687] = 16'b0011010000101011;
    rom[688] = 16'b0011010000101100;
    rom[689] = 16'b0011010000101110;
    rom[690] = 16'b0011010000101111;
    rom[691] = 16'b0011010000110001;
    rom[692] = 16'b0011010000110010;
    rom[693] = 16'b0011010000110100;
    rom[694] = 16'b0011010000110101;
    rom[695] = 16'b0011010000110111;
    rom[696] = 16'b0011010000111000;
    rom[697] = 16'b0011010000111010;
    rom[698] = 16'b0011010000111011;
    rom[699] = 16'b0011010000111101;
    rom[700] = 16'b0011010000111110;
    rom[701] = 16'b0011010001000000;
    rom[702] = 16'b0011010001000001;
    rom[703] = 16'b0011010001000011;
    rom[704] = 16'b0011010001000100;
    rom[705] = 16'b0011010001000110;
    rom[706] = 16'b0011010001000111;
    rom[707] = 16'b0011010001001001;
    rom[708] = 16'b0011010001001011;
    rom[709] = 16'b0011010001001100;
    rom[710] = 16'b0011010001001110;
    rom[711] = 16'b0011010001001111;
    rom[712] = 16'b0011010001010001;
    rom[713] = 16'b0011010001010010;
    rom[714] = 16'b0011010001010100;
    rom[715] = 16'b0011010001010101;
    rom[716] = 16'b0011010001010111;
    rom[717] = 16'b0011010001011000;
    rom[718] = 16'b0011010001011010;
    rom[719] = 16'b0011010001011011;
    rom[720] = 16'b0011010001011101;
    rom[721] = 16'b0011010001011110;
    rom[722] = 16'b0011010001100000;
    rom[723] = 16'b0011010001100001;
    rom[724] = 16'b0011010001100011;
    rom[725] = 16'b0011010001100100;
    rom[726] = 16'b0011010001100110;
    rom[727] = 16'b0011010001100111;
    rom[728] = 16'b0011010001101001;
    rom[729] = 16'b0011010001101010;
    rom[730] = 16'b0011010001101100;
    rom[731] = 16'b0011010001101101;
    rom[732] = 16'b0011010001101111;
    rom[733] = 16'b0011010001110000;
    rom[734] = 16'b0011010001110010;
    rom[735] = 16'b0011010001110011;
    rom[736] = 16'b0011010001110101;
    rom[737] = 16'b0011010001110110;
    rom[738] = 16'b0011010001111000;
    rom[739] = 16'b0011010001111001;
    rom[740] = 16'b0011010001111011;
    rom[741] = 16'b0011010001111100;
    rom[742] = 16'b0011010001111110;
    rom[743] = 16'b0011010001111111;
    rom[744] = 16'b0011010010000001;
    rom[745] = 16'b0011010010000010;
    rom[746] = 16'b0011010010000100;
    rom[747] = 16'b0011010010000101;
    rom[748] = 16'b0011010010000111;
    rom[749] = 16'b0011010010001000;
    rom[750] = 16'b0011010010001010;
    rom[751] = 16'b0011010010001011;
    rom[752] = 16'b0011010010001101;
    rom[753] = 16'b0011010010001110;
    rom[754] = 16'b0011010010010000;
    rom[755] = 16'b0011010010010001;
    rom[756] = 16'b0011010010010011;
    rom[757] = 16'b0011010010010100;
    rom[758] = 16'b0011010010010110;
    rom[759] = 16'b0011010010010111;
    rom[760] = 16'b0011010010011001;
    rom[761] = 16'b0011010010011010;
    rom[762] = 16'b0011010010011100;
    rom[763] = 16'b0011010010011101;
    rom[764] = 16'b0011010010011111;
    rom[765] = 16'b0011010010100000;
    rom[766] = 16'b0011010010100010;
    rom[767] = 16'b0011010010100100;
    rom[768] = 16'b0011010010100101;
    rom[769] = 16'b0011010010100111;
    rom[770] = 16'b0011010010101000;
    rom[771] = 16'b0011010010101010;
    rom[772] = 16'b0011010010101011;
    rom[773] = 16'b0011010010101101;
    rom[774] = 16'b0011010010101110;
    rom[775] = 16'b0011010010110000;
    rom[776] = 16'b0011010010110001;
    rom[777] = 16'b0011010010110011;
    rom[778] = 16'b0011010010110100;
    rom[779] = 16'b0011010010110110;
    rom[780] = 16'b0011010010110111;
    rom[781] = 16'b0011010010111001;
    rom[782] = 16'b0011010010111010;
    rom[783] = 16'b0011010010111100;
    rom[784] = 16'b0011010010111101;
    rom[785] = 16'b0011010010111111;
    rom[786] = 16'b0011010011000000;
    rom[787] = 16'b0011010011000010;
    rom[788] = 16'b0011010011000011;
    rom[789] = 16'b0011010011000101;
    rom[790] = 16'b0011010011000110;
    rom[791] = 16'b0011010011001000;
    rom[792] = 16'b0011010011001001;
    rom[793] = 16'b0011010011001011;
    rom[794] = 16'b0011010011001100;
    rom[795] = 16'b0011010011001110;
    rom[796] = 16'b0011010011001111;
    rom[797] = 16'b0011010011010001;
    rom[798] = 16'b0011010011010010;
    rom[799] = 16'b0011010011010100;
    rom[800] = 16'b0011010011010101;
    rom[801] = 16'b0011010011010111;
    rom[802] = 16'b0011010011011000;
    rom[803] = 16'b0011010011011010;
    rom[804] = 16'b0011010011011011;
    rom[805] = 16'b0011010011011101;
    rom[806] = 16'b0011010011011110;
    rom[807] = 16'b0011010011011111;
    rom[808] = 16'b0011010011100001;
    rom[809] = 16'b0011010011100010;
    rom[810] = 16'b0011010011100100;
    rom[811] = 16'b0011010011100101;
    rom[812] = 16'b0011010011100111;
    rom[813] = 16'b0011010011101000;
    rom[814] = 16'b0011010011101010;
    rom[815] = 16'b0011010011101011;
    rom[816] = 16'b0011010011101101;
    rom[817] = 16'b0011010011101110;
    rom[818] = 16'b0011010011110000;
    rom[819] = 16'b0011010011110001;
    rom[820] = 16'b0011010011110011;
    rom[821] = 16'b0011010011110100;
    rom[822] = 16'b0011010011110110;
    rom[823] = 16'b0011010011110111;
    rom[824] = 16'b0011010011111001;
    rom[825] = 16'b0011010011111010;
    rom[826] = 16'b0011010011111100;
    rom[827] = 16'b0011010011111101;
    rom[828] = 16'b0011010011111111;
    rom[829] = 16'b0011010100000000;
    rom[830] = 16'b0011010100000010;
    rom[831] = 16'b0011010100000011;
    rom[832] = 16'b0011010100000101;
    rom[833] = 16'b0011010100000110;
    rom[834] = 16'b0011010100001000;
    rom[835] = 16'b0011010100001001;
    rom[836] = 16'b0011010100001011;
    rom[837] = 16'b0011010100001100;
    rom[838] = 16'b0011010100001110;
    rom[839] = 16'b0011010100001111;
    rom[840] = 16'b0011010100010001;
    rom[841] = 16'b0011010100010010;
    rom[842] = 16'b0011010100010100;
    rom[843] = 16'b0011010100010101;
    rom[844] = 16'b0011010100010111;
    rom[845] = 16'b0011010100011000;
    rom[846] = 16'b0011010100011010;
    rom[847] = 16'b0011010100011011;
    rom[848] = 16'b0011010100011101;
    rom[849] = 16'b0011010100011110;
    rom[850] = 16'b0011010100100000;
    rom[851] = 16'b0011010100100001;
    rom[852] = 16'b0011010100100011;
    rom[853] = 16'b0011010100100100;
    rom[854] = 16'b0011010100100110;
    rom[855] = 16'b0011010100100111;
    rom[856] = 16'b0011010100101001;
    rom[857] = 16'b0011010100101010;
    rom[858] = 16'b0011010100101100;
    rom[859] = 16'b0011010100101101;
    rom[860] = 16'b0011010100101111;
    rom[861] = 16'b0011010100110000;
    rom[862] = 16'b0011010100110001;
    rom[863] = 16'b0011010100110011;
    rom[864] = 16'b0011010100110100;
    rom[865] = 16'b0011010100110110;
    rom[866] = 16'b0011010100110111;
    rom[867] = 16'b0011010100111001;
    rom[868] = 16'b0011010100111010;
    rom[869] = 16'b0011010100111100;
    rom[870] = 16'b0011010100111101;
    rom[871] = 16'b0011010100111111;
    rom[872] = 16'b0011010101000000;
    rom[873] = 16'b0011010101000010;
    rom[874] = 16'b0011010101000011;
    rom[875] = 16'b0011010101000101;
    rom[876] = 16'b0011010101000110;
    rom[877] = 16'b0011010101001000;
    rom[878] = 16'b0011010101001001;
    rom[879] = 16'b0011010101001011;
    rom[880] = 16'b0011010101001100;
    rom[881] = 16'b0011010101001110;
    rom[882] = 16'b0011010101001111;
    rom[883] = 16'b0011010101010001;
    rom[884] = 16'b0011010101010010;
    rom[885] = 16'b0011010101010100;
    rom[886] = 16'b0011010101010101;
    rom[887] = 16'b0011010101010111;
    rom[888] = 16'b0011010101011000;
    rom[889] = 16'b0011010101011010;
    rom[890] = 16'b0011010101011011;
    rom[891] = 16'b0011010101011101;
    rom[892] = 16'b0011010101011110;
    rom[893] = 16'b0011010101011111;
    rom[894] = 16'b0011010101100001;
    rom[895] = 16'b0011010101100010;
    rom[896] = 16'b0011010101100100;
    rom[897] = 16'b0011010101100101;
    rom[898] = 16'b0011010101100111;
    rom[899] = 16'b0011010101101000;
    rom[900] = 16'b0011010101101010;
    rom[901] = 16'b0011010101101011;
    rom[902] = 16'b0011010101101101;
    rom[903] = 16'b0011010101101110;
    rom[904] = 16'b0011010101110000;
    rom[905] = 16'b0011010101110001;
    rom[906] = 16'b0011010101110011;
    rom[907] = 16'b0011010101110100;
    rom[908] = 16'b0011010101110110;
    rom[909] = 16'b0011010101110111;
    rom[910] = 16'b0011010101111001;
    rom[911] = 16'b0011010101111010;
    rom[912] = 16'b0011010101111100;
    rom[913] = 16'b0011010101111101;
    rom[914] = 16'b0011010101111110;
    rom[915] = 16'b0011010110000000;
    rom[916] = 16'b0011010110000001;
    rom[917] = 16'b0011010110000011;
    rom[918] = 16'b0011010110000100;
    rom[919] = 16'b0011010110000110;
    rom[920] = 16'b0011010110000111;
    rom[921] = 16'b0011010110001001;
    rom[922] = 16'b0011010110001010;
    rom[923] = 16'b0011010110001100;
    rom[924] = 16'b0011010110001101;
    rom[925] = 16'b0011010110001111;
    rom[926] = 16'b0011010110010000;
    rom[927] = 16'b0011010110010010;
    rom[928] = 16'b0011010110010011;
    rom[929] = 16'b0011010110010101;
    rom[930] = 16'b0011010110010110;
    rom[931] = 16'b0011010110011000;
    rom[932] = 16'b0011010110011001;
    rom[933] = 16'b0011010110011010;
    rom[934] = 16'b0011010110011100;
    rom[935] = 16'b0011010110011101;
    rom[936] = 16'b0011010110011111;
    rom[937] = 16'b0011010110100000;
    rom[938] = 16'b0011010110100010;
    rom[939] = 16'b0011010110100011;
    rom[940] = 16'b0011010110100101;
    rom[941] = 16'b0011010110100110;
    rom[942] = 16'b0011010110101000;
    rom[943] = 16'b0011010110101001;
    rom[944] = 16'b0011010110101011;
    rom[945] = 16'b0011010110101100;
    rom[946] = 16'b0011010110101110;
    rom[947] = 16'b0011010110101111;
    rom[948] = 16'b0011010110110001;
    rom[949] = 16'b0011010110110010;
    rom[950] = 16'b0011010110110011;
    rom[951] = 16'b0011010110110101;
    rom[952] = 16'b0011010110110110;
    rom[953] = 16'b0011010110111000;
    rom[954] = 16'b0011010110111001;
    rom[955] = 16'b0011010110111011;
    rom[956] = 16'b0011010110111100;
    rom[957] = 16'b0011010110111110;
    rom[958] = 16'b0011010110111111;
    rom[959] = 16'b0011010111000001;
    rom[960] = 16'b0011010111000010;
    rom[961] = 16'b0011010111000100;
    rom[962] = 16'b0011010111000101;
    rom[963] = 16'b0011010111000111;
    rom[964] = 16'b0011010111001000;
    rom[965] = 16'b0011010111001001;
    rom[966] = 16'b0011010111001011;
    rom[967] = 16'b0011010111001100;
    rom[968] = 16'b0011010111001110;
    rom[969] = 16'b0011010111001111;
    rom[970] = 16'b0011010111010001;
    rom[971] = 16'b0011010111010010;
    rom[972] = 16'b0011010111010100;
    rom[973] = 16'b0011010111010101;
    rom[974] = 16'b0011010111010111;
    rom[975] = 16'b0011010111011000;
    rom[976] = 16'b0011010111011010;
    rom[977] = 16'b0011010111011011;
    rom[978] = 16'b0011010111011100;
    rom[979] = 16'b0011010111011110;
    rom[980] = 16'b0011010111011111;
    rom[981] = 16'b0011010111100001;
    rom[982] = 16'b0011010111100010;
    rom[983] = 16'b0011010111100100;
    rom[984] = 16'b0011010111100101;
    rom[985] = 16'b0011010111100111;
    rom[986] = 16'b0011010111101000;
    rom[987] = 16'b0011010111101010;
    rom[988] = 16'b0011010111101011;
    rom[989] = 16'b0011010111101101;
    rom[990] = 16'b0011010111101110;
    rom[991] = 16'b0011010111101111;
    rom[992] = 16'b0011010111110001;
    rom[993] = 16'b0011010111110010;
    rom[994] = 16'b0011010111110100;
    rom[995] = 16'b0011010111110101;
    rom[996] = 16'b0011010111110111;
    rom[997] = 16'b0011010111111000;
    rom[998] = 16'b0011010111111010;
    rom[999] = 16'b0011010111111011;
    rom[1000] = 16'b0011010111111101;
    rom[1001] = 16'b0011010111111110;
    rom[1002] = 16'b0011010111111111;
    rom[1003] = 16'b0011011000000001;
    rom[1004] = 16'b0011011000000010;
    rom[1005] = 16'b0011011000000100;
    rom[1006] = 16'b0011011000000101;
    rom[1007] = 16'b0011011000000111;
    rom[1008] = 16'b0011011000001000;
    rom[1009] = 16'b0011011000001010;
    rom[1010] = 16'b0011011000001011;
    rom[1011] = 16'b0011011000001101;
    rom[1012] = 16'b0011011000001110;
    rom[1013] = 16'b0011011000001111;
    rom[1014] = 16'b0011011000010001;
    rom[1015] = 16'b0011011000010010;
    rom[1016] = 16'b0011011000010100;
    rom[1017] = 16'b0011011000010101;
    rom[1018] = 16'b0011011000010111;
    rom[1019] = 16'b0011011000011000;
    rom[1020] = 16'b0011011000011010;
    rom[1021] = 16'b0011011000011011;
    rom[1022] = 16'b0011011000011101;
    rom[1023] = 16'b0011011000011110;
    rom[1024] = 16'b0011011000011111;
    rom[1025] = 16'b0011011000100001;
    rom[1026] = 16'b0011011000100010;
    rom[1027] = 16'b0011011000100100;
    rom[1028] = 16'b0011011000100101;
    rom[1029] = 16'b0011011000100111;
    rom[1030] = 16'b0011011000101000;
    rom[1031] = 16'b0011011000101010;
    rom[1032] = 16'b0011011000101011;
    rom[1033] = 16'b0011011000101101;
    rom[1034] = 16'b0011011000101110;
    rom[1035] = 16'b0011011000101111;
    rom[1036] = 16'b0011011000110001;
    rom[1037] = 16'b0011011000110010;
    rom[1038] = 16'b0011011000110100;
    rom[1039] = 16'b0011011000110101;
    rom[1040] = 16'b0011011000110111;
    rom[1041] = 16'b0011011000111000;
    rom[1042] = 16'b0011011000111010;
    rom[1043] = 16'b0011011000111011;
    rom[1044] = 16'b0011011000111100;
    rom[1045] = 16'b0011011000111110;
    rom[1046] = 16'b0011011000111111;
    rom[1047] = 16'b0011011001000001;
    rom[1048] = 16'b0011011001000010;
    rom[1049] = 16'b0011011001000100;
    rom[1050] = 16'b0011011001000101;
    rom[1051] = 16'b0011011001000111;
    rom[1052] = 16'b0011011001001000;
    rom[1053] = 16'b0011011001001001;
    rom[1054] = 16'b0011011001001011;
    rom[1055] = 16'b0011011001001100;
    rom[1056] = 16'b0011011001001110;
    rom[1057] = 16'b0011011001001111;
    rom[1058] = 16'b0011011001010001;
    rom[1059] = 16'b0011011001010010;
    rom[1060] = 16'b0011011001010100;
    rom[1061] = 16'b0011011001010101;
    rom[1062] = 16'b0011011001010110;
    rom[1063] = 16'b0011011001011000;
    rom[1064] = 16'b0011011001011001;
    rom[1065] = 16'b0011011001011011;
    rom[1066] = 16'b0011011001011100;
    rom[1067] = 16'b0011011001011110;
    rom[1068] = 16'b0011011001011111;
    rom[1069] = 16'b0011011001100001;
    rom[1070] = 16'b0011011001100010;
    rom[1071] = 16'b0011011001100011;
    rom[1072] = 16'b0011011001100101;
    rom[1073] = 16'b0011011001100110;
    rom[1074] = 16'b0011011001101000;
    rom[1075] = 16'b0011011001101001;
    rom[1076] = 16'b0011011001101011;
    rom[1077] = 16'b0011011001101100;
    rom[1078] = 16'b0011011001101101;
    rom[1079] = 16'b0011011001101111;
    rom[1080] = 16'b0011011001110000;
    rom[1081] = 16'b0011011001110010;
    rom[1082] = 16'b0011011001110011;
    rom[1083] = 16'b0011011001110101;
    rom[1084] = 16'b0011011001110110;
    rom[1085] = 16'b0011011001111000;
    rom[1086] = 16'b0011011001111001;
    rom[1087] = 16'b0011011001111010;
    rom[1088] = 16'b0011011001111100;
    rom[1089] = 16'b0011011001111101;
    rom[1090] = 16'b0011011001111111;
    rom[1091] = 16'b0011011010000000;
    rom[1092] = 16'b0011011010000010;
    rom[1093] = 16'b0011011010000011;
    rom[1094] = 16'b0011011010000100;
    rom[1095] = 16'b0011011010000110;
    rom[1096] = 16'b0011011010000111;
    rom[1097] = 16'b0011011010001001;
    rom[1098] = 16'b0011011010001010;
    rom[1099] = 16'b0011011010001100;
    rom[1100] = 16'b0011011010001101;
    rom[1101] = 16'b0011011010001111;
    rom[1102] = 16'b0011011010010000;
    rom[1103] = 16'b0011011010010001;
    rom[1104] = 16'b0011011010010011;
    rom[1105] = 16'b0011011010010100;
    rom[1106] = 16'b0011011010010110;
    rom[1107] = 16'b0011011010010111;
    rom[1108] = 16'b0011011010011001;
    rom[1109] = 16'b0011011010011010;
    rom[1110] = 16'b0011011010011011;
    rom[1111] = 16'b0011011010011101;
    rom[1112] = 16'b0011011010011110;
    rom[1113] = 16'b0011011010100000;
    rom[1114] = 16'b0011011010100001;
    rom[1115] = 16'b0011011010100011;
    rom[1116] = 16'b0011011010100100;
    rom[1117] = 16'b0011011010100101;
    rom[1118] = 16'b0011011010100111;
    rom[1119] = 16'b0011011010101000;
    rom[1120] = 16'b0011011010101010;
    rom[1121] = 16'b0011011010101011;
    rom[1122] = 16'b0011011010101101;
    rom[1123] = 16'b0011011010101110;
    rom[1124] = 16'b0011011010101111;
    rom[1125] = 16'b0011011010110001;
    rom[1126] = 16'b0011011010110010;
    rom[1127] = 16'b0011011010110100;
    rom[1128] = 16'b0011011010110101;
    rom[1129] = 16'b0011011010110111;
    rom[1130] = 16'b0011011010111000;
    rom[1131] = 16'b0011011010111001;
    rom[1132] = 16'b0011011010111011;
    rom[1133] = 16'b0011011010111100;
    rom[1134] = 16'b0011011010111110;
    rom[1135] = 16'b0011011010111111;
    rom[1136] = 16'b0011011011000001;
    rom[1137] = 16'b0011011011000010;
    rom[1138] = 16'b0011011011000011;
    rom[1139] = 16'b0011011011000101;
    rom[1140] = 16'b0011011011000110;
    rom[1141] = 16'b0011011011001000;
    rom[1142] = 16'b0011011011001001;
    rom[1143] = 16'b0011011011001010;
    rom[1144] = 16'b0011011011001100;
    rom[1145] = 16'b0011011011001101;
    rom[1146] = 16'b0011011011001111;
    rom[1147] = 16'b0011011011010000;
    rom[1148] = 16'b0011011011010010;
    rom[1149] = 16'b0011011011010011;
    rom[1150] = 16'b0011011011010100;
    rom[1151] = 16'b0011011011010110;
    rom[1152] = 16'b0011011011010111;
    rom[1153] = 16'b0011011011011001;
    rom[1154] = 16'b0011011011011010;
    rom[1155] = 16'b0011011011011100;
    rom[1156] = 16'b0011011011011101;
    rom[1157] = 16'b0011011011011110;
    rom[1158] = 16'b0011011011100000;
    rom[1159] = 16'b0011011011100001;
    rom[1160] = 16'b0011011011100011;
    rom[1161] = 16'b0011011011100100;
    rom[1162] = 16'b0011011011100101;
    rom[1163] = 16'b0011011011100111;
    rom[1164] = 16'b0011011011101000;
    rom[1165] = 16'b0011011011101010;
    rom[1166] = 16'b0011011011101011;
    rom[1167] = 16'b0011011011101101;
    rom[1168] = 16'b0011011011101110;
    rom[1169] = 16'b0011011011101111;
    rom[1170] = 16'b0011011011110001;
    rom[1171] = 16'b0011011011110010;
    rom[1172] = 16'b0011011011110100;
    rom[1173] = 16'b0011011011110101;
    rom[1174] = 16'b0011011011110110;
    rom[1175] = 16'b0011011011111000;
    rom[1176] = 16'b0011011011111001;
    rom[1177] = 16'b0011011011111011;
    rom[1178] = 16'b0011011011111100;
    rom[1179] = 16'b0011011011111110;
    rom[1180] = 16'b0011011011111111;
    rom[1181] = 16'b0011011100000000;
    rom[1182] = 16'b0011011100000010;
    rom[1183] = 16'b0011011100000011;
    rom[1184] = 16'b0011011100000101;
    rom[1185] = 16'b0011011100000110;
    rom[1186] = 16'b0011011100000111;
    rom[1187] = 16'b0011011100001001;
    rom[1188] = 16'b0011011100001010;
    rom[1189] = 16'b0011011100001100;
    rom[1190] = 16'b0011011100001101;
    rom[1191] = 16'b0011011100001110;
    rom[1192] = 16'b0011011100010000;
    rom[1193] = 16'b0011011100010001;
    rom[1194] = 16'b0011011100010011;
    rom[1195] = 16'b0011011100010100;
    rom[1196] = 16'b0011011100010101;
    rom[1197] = 16'b0011011100010111;
    rom[1198] = 16'b0011011100011000;
    rom[1199] = 16'b0011011100011010;
    rom[1200] = 16'b0011011100011011;
    rom[1201] = 16'b0011011100011101;
    rom[1202] = 16'b0011011100011110;
    rom[1203] = 16'b0011011100011111;
    rom[1204] = 16'b0011011100100001;
    rom[1205] = 16'b0011011100100010;
    rom[1206] = 16'b0011011100100100;
    rom[1207] = 16'b0011011100100101;
    rom[1208] = 16'b0011011100100110;
    rom[1209] = 16'b0011011100101000;
    rom[1210] = 16'b0011011100101001;
    rom[1211] = 16'b0011011100101011;
    rom[1212] = 16'b0011011100101100;
    rom[1213] = 16'b0011011100101101;
    rom[1214] = 16'b0011011100101111;
    rom[1215] = 16'b0011011100110000;
    rom[1216] = 16'b0011011100110010;
    rom[1217] = 16'b0011011100110011;
    rom[1218] = 16'b0011011100110100;
    rom[1219] = 16'b0011011100110110;
    rom[1220] = 16'b0011011100110111;
    rom[1221] = 16'b0011011100111001;
    rom[1222] = 16'b0011011100111010;
    rom[1223] = 16'b0011011100111011;
    rom[1224] = 16'b0011011100111101;
    rom[1225] = 16'b0011011100111110;
    rom[1226] = 16'b0011011101000000;
    rom[1227] = 16'b0011011101000001;
    rom[1228] = 16'b0011011101000010;
    rom[1229] = 16'b0011011101000100;
    rom[1230] = 16'b0011011101000101;
    rom[1231] = 16'b0011011101000111;
    rom[1232] = 16'b0011011101001000;
    rom[1233] = 16'b0011011101001001;
    rom[1234] = 16'b0011011101001011;
    rom[1235] = 16'b0011011101001100;
    rom[1236] = 16'b0011011101001110;
    rom[1237] = 16'b0011011101001111;
    rom[1238] = 16'b0011011101010000;
    rom[1239] = 16'b0011011101010010;
    rom[1240] = 16'b0011011101010011;
    rom[1241] = 16'b0011011101010101;
    rom[1242] = 16'b0011011101010110;
    rom[1243] = 16'b0011011101010111;
    rom[1244] = 16'b0011011101011001;
    rom[1245] = 16'b0011011101011010;
    rom[1246] = 16'b0011011101011100;
    rom[1247] = 16'b0011011101011101;
    rom[1248] = 16'b0011011101011110;
    rom[1249] = 16'b0011011101100000;
    rom[1250] = 16'b0011011101100001;
    rom[1251] = 16'b0011011101100011;
    rom[1252] = 16'b0011011101100100;
    rom[1253] = 16'b0011011101100101;
    rom[1254] = 16'b0011011101100111;
    rom[1255] = 16'b0011011101101000;
    rom[1256] = 16'b0011011101101010;
    rom[1257] = 16'b0011011101101011;
    rom[1258] = 16'b0011011101101100;
    rom[1259] = 16'b0011011101101110;
    rom[1260] = 16'b0011011101101111;
    rom[1261] = 16'b0011011101110000;
    rom[1262] = 16'b0011011101110010;
    rom[1263] = 16'b0011011101110011;
    rom[1264] = 16'b0011011101110101;
    rom[1265] = 16'b0011011101110110;
    rom[1266] = 16'b0011011101110111;
    rom[1267] = 16'b0011011101111001;
    rom[1268] = 16'b0011011101111010;
    rom[1269] = 16'b0011011101111100;
    rom[1270] = 16'b0011011101111101;
    rom[1271] = 16'b0011011101111110;
    rom[1272] = 16'b0011011110000000;
    rom[1273] = 16'b0011011110000001;
    rom[1274] = 16'b0011011110000011;
    rom[1275] = 16'b0011011110000100;
    rom[1276] = 16'b0011011110000101;
    rom[1277] = 16'b0011011110000111;
    rom[1278] = 16'b0011011110001000;
    rom[1279] = 16'b0011011110001001;
    rom[1280] = 16'b0011011110001011;
    rom[1281] = 16'b0011011110001100;
    rom[1282] = 16'b0011011110001110;
    rom[1283] = 16'b0011011110001111;
    rom[1284] = 16'b0011011110010000;
    rom[1285] = 16'b0011011110010010;
    rom[1286] = 16'b0011011110010011;
    rom[1287] = 16'b0011011110010101;
    rom[1288] = 16'b0011011110010110;
    rom[1289] = 16'b0011011110010111;
    rom[1290] = 16'b0011011110011001;
    rom[1291] = 16'b0011011110011010;
    rom[1292] = 16'b0011011110011011;
    rom[1293] = 16'b0011011110011101;
    rom[1294] = 16'b0011011110011110;
    rom[1295] = 16'b0011011110100000;
    rom[1296] = 16'b0011011110100001;
    rom[1297] = 16'b0011011110100010;
    rom[1298] = 16'b0011011110100100;
    rom[1299] = 16'b0011011110100101;
    rom[1300] = 16'b0011011110100110;
    rom[1301] = 16'b0011011110101000;
    rom[1302] = 16'b0011011110101001;
    rom[1303] = 16'b0011011110101011;
    rom[1304] = 16'b0011011110101100;
    rom[1305] = 16'b0011011110101101;
    rom[1306] = 16'b0011011110101111;
    rom[1307] = 16'b0011011110110000;
    rom[1308] = 16'b0011011110110010;
    rom[1309] = 16'b0011011110110011;
    rom[1310] = 16'b0011011110110100;
    rom[1311] = 16'b0011011110110110;
    rom[1312] = 16'b0011011110110111;
    rom[1313] = 16'b0011011110111000;
    rom[1314] = 16'b0011011110111010;
    rom[1315] = 16'b0011011110111011;
    rom[1316] = 16'b0011011110111101;
    rom[1317] = 16'b0011011110111110;
    rom[1318] = 16'b0011011110111111;
    rom[1319] = 16'b0011011111000001;
    rom[1320] = 16'b0011011111000010;
    rom[1321] = 16'b0011011111000011;
    rom[1322] = 16'b0011011111000101;
    rom[1323] = 16'b0011011111000110;
    rom[1324] = 16'b0011011111001000;
    rom[1325] = 16'b0011011111001001;
    rom[1326] = 16'b0011011111001010;
    rom[1327] = 16'b0011011111001100;
    rom[1328] = 16'b0011011111001101;
    rom[1329] = 16'b0011011111001110;
    rom[1330] = 16'b0011011111010000;
    rom[1331] = 16'b0011011111010001;
    rom[1332] = 16'b0011011111010010;
    rom[1333] = 16'b0011011111010100;
    rom[1334] = 16'b0011011111010101;
    rom[1335] = 16'b0011011111010111;
    rom[1336] = 16'b0011011111011000;
    rom[1337] = 16'b0011011111011001;
    rom[1338] = 16'b0011011111011011;
    rom[1339] = 16'b0011011111011100;
    rom[1340] = 16'b0011011111011101;
    rom[1341] = 16'b0011011111011111;
    rom[1342] = 16'b0011011111100000;
    rom[1343] = 16'b0011011111100010;
    rom[1344] = 16'b0011011111100011;
    rom[1345] = 16'b0011011111100100;
    rom[1346] = 16'b0011011111100110;
    rom[1347] = 16'b0011011111100111;
    rom[1348] = 16'b0011011111101000;
    rom[1349] = 16'b0011011111101010;
    rom[1350] = 16'b0011011111101011;
    rom[1351] = 16'b0011011111101100;
    rom[1352] = 16'b0011011111101110;
    rom[1353] = 16'b0011011111101111;
    rom[1354] = 16'b0011011111110001;
    rom[1355] = 16'b0011011111110010;
    rom[1356] = 16'b0011011111110011;
    rom[1357] = 16'b0011011111110101;
    rom[1358] = 16'b0011011111110110;
    rom[1359] = 16'b0011011111110111;
    rom[1360] = 16'b0011011111111001;
    rom[1361] = 16'b0011011111111010;
    rom[1362] = 16'b0011011111111011;
    rom[1363] = 16'b0011011111111101;
    rom[1364] = 16'b0011011111111110;
    rom[1365] = 16'b0011100000000000;
    rom[1366] = 16'b0011100000000000;
    rom[1367] = 16'b0011100000000001;
    rom[1368] = 16'b0011100000000010;
    rom[1369] = 16'b0011100000000010;
    rom[1370] = 16'b0011100000000011;
    rom[1371] = 16'b0011100000000100;
    rom[1372] = 16'b0011100000000101;
    rom[1373] = 16'b0011100000000101;
    rom[1374] = 16'b0011100000000110;
    rom[1375] = 16'b0011100000000111;
    rom[1376] = 16'b0011100000000111;
    rom[1377] = 16'b0011100000001000;
    rom[1378] = 16'b0011100000001001;
    rom[1379] = 16'b0011100000001001;
    rom[1380] = 16'b0011100000001010;
    rom[1381] = 16'b0011100000001011;
    rom[1382] = 16'b0011100000001011;
    rom[1383] = 16'b0011100000001100;
    rom[1384] = 16'b0011100000001101;
    rom[1385] = 16'b0011100000001101;
    rom[1386] = 16'b0011100000001110;
    rom[1387] = 16'b0011100000001111;
    rom[1388] = 16'b0011100000001111;
    rom[1389] = 16'b0011100000010000;
    rom[1390] = 16'b0011100000010001;
    rom[1391] = 16'b0011100000010001;
    rom[1392] = 16'b0011100000010010;
    rom[1393] = 16'b0011100000010011;
    rom[1394] = 16'b0011100000010011;
    rom[1395] = 16'b0011100000010100;
    rom[1396] = 16'b0011100000010101;
    rom[1397] = 16'b0011100000010101;
    rom[1398] = 16'b0011100000010110;
    rom[1399] = 16'b0011100000010111;
    rom[1400] = 16'b0011100000010111;
    rom[1401] = 16'b0011100000011000;
    rom[1402] = 16'b0011100000011001;
    rom[1403] = 16'b0011100000011010;
    rom[1404] = 16'b0011100000011010;
    rom[1405] = 16'b0011100000011011;
    rom[1406] = 16'b0011100000011100;
    rom[1407] = 16'b0011100000011100;
    rom[1408] = 16'b0011100000011101;
    rom[1409] = 16'b0011100000011110;
    rom[1410] = 16'b0011100000011110;
    rom[1411] = 16'b0011100000011111;
    rom[1412] = 16'b0011100000100000;
    rom[1413] = 16'b0011100000100000;
    rom[1414] = 16'b0011100000100001;
    rom[1415] = 16'b0011100000100010;
    rom[1416] = 16'b0011100000100010;
    rom[1417] = 16'b0011100000100011;
    rom[1418] = 16'b0011100000100100;
    rom[1419] = 16'b0011100000100100;
    rom[1420] = 16'b0011100000100101;
    rom[1421] = 16'b0011100000100110;
    rom[1422] = 16'b0011100000100110;
    rom[1423] = 16'b0011100000100111;
    rom[1424] = 16'b0011100000101000;
    rom[1425] = 16'b0011100000101000;
    rom[1426] = 16'b0011100000101001;
    rom[1427] = 16'b0011100000101010;
    rom[1428] = 16'b0011100000101010;
    rom[1429] = 16'b0011100000101011;
    rom[1430] = 16'b0011100000101100;
    rom[1431] = 16'b0011100000101100;
    rom[1432] = 16'b0011100000101101;
    rom[1433] = 16'b0011100000101110;
    rom[1434] = 16'b0011100000101110;
    rom[1435] = 16'b0011100000101111;
    rom[1436] = 16'b0011100000110000;
    rom[1437] = 16'b0011100000110000;
    rom[1438] = 16'b0011100000110001;
    rom[1439] = 16'b0011100000110010;
    rom[1440] = 16'b0011100000110010;
    rom[1441] = 16'b0011100000110011;
    rom[1442] = 16'b0011100000110100;
    rom[1443] = 16'b0011100000110100;
    rom[1444] = 16'b0011100000110101;
    rom[1445] = 16'b0011100000110110;
    rom[1446] = 16'b0011100000110110;
    rom[1447] = 16'b0011100000110111;
    rom[1448] = 16'b0011100000111000;
    rom[1449] = 16'b0011100000111000;
    rom[1450] = 16'b0011100000111001;
    rom[1451] = 16'b0011100000111010;
    rom[1452] = 16'b0011100000111010;
    rom[1453] = 16'b0011100000111011;
    rom[1454] = 16'b0011100000111100;
    rom[1455] = 16'b0011100000111100;
    rom[1456] = 16'b0011100000111101;
    rom[1457] = 16'b0011100000111110;
    rom[1458] = 16'b0011100000111110;
    rom[1459] = 16'b0011100000111111;
    rom[1460] = 16'b0011100001000000;
    rom[1461] = 16'b0011100001000000;
    rom[1462] = 16'b0011100001000001;
    rom[1463] = 16'b0011100001000010;
    rom[1464] = 16'b0011100001000010;
    rom[1465] = 16'b0011100001000011;
    rom[1466] = 16'b0011100001000100;
    rom[1467] = 16'b0011100001000100;
    rom[1468] = 16'b0011100001000101;
    rom[1469] = 16'b0011100001000110;
    rom[1470] = 16'b0011100001000110;
    rom[1471] = 16'b0011100001000111;
    rom[1472] = 16'b0011100001001000;
    rom[1473] = 16'b0011100001001000;
    rom[1474] = 16'b0011100001001001;
    rom[1475] = 16'b0011100001001010;
    rom[1476] = 16'b0011100001001010;
    rom[1477] = 16'b0011100001001011;
    rom[1478] = 16'b0011100001001100;
    rom[1479] = 16'b0011100001001100;
    rom[1480] = 16'b0011100001001101;
    rom[1481] = 16'b0011100001001110;
    rom[1482] = 16'b0011100001001110;
    rom[1483] = 16'b0011100001001111;
    rom[1484] = 16'b0011100001010000;
    rom[1485] = 16'b0011100001010000;
    rom[1486] = 16'b0011100001010001;
    rom[1487] = 16'b0011100001010010;
    rom[1488] = 16'b0011100001010010;
    rom[1489] = 16'b0011100001010011;
    rom[1490] = 16'b0011100001010100;
    rom[1491] = 16'b0011100001010100;
    rom[1492] = 16'b0011100001010101;
    rom[1493] = 16'b0011100001010110;
    rom[1494] = 16'b0011100001010110;
    rom[1495] = 16'b0011100001010111;
    rom[1496] = 16'b0011100001011000;
    rom[1497] = 16'b0011100001011000;
    rom[1498] = 16'b0011100001011001;
    rom[1499] = 16'b0011100001011010;
    rom[1500] = 16'b0011100001011010;
    rom[1501] = 16'b0011100001011011;
    rom[1502] = 16'b0011100001011100;
    rom[1503] = 16'b0011100001011100;
    rom[1504] = 16'b0011100001011101;
    rom[1505] = 16'b0011100001011101;
    rom[1506] = 16'b0011100001011110;
    rom[1507] = 16'b0011100001011111;
    rom[1508] = 16'b0011100001011111;
    rom[1509] = 16'b0011100001100000;
    rom[1510] = 16'b0011100001100001;
    rom[1511] = 16'b0011100001100001;
    rom[1512] = 16'b0011100001100010;
    rom[1513] = 16'b0011100001100011;
    rom[1514] = 16'b0011100001100011;
    rom[1515] = 16'b0011100001100100;
    rom[1516] = 16'b0011100001100101;
    rom[1517] = 16'b0011100001100101;
    rom[1518] = 16'b0011100001100110;
    rom[1519] = 16'b0011100001100111;
    rom[1520] = 16'b0011100001100111;
    rom[1521] = 16'b0011100001101000;
    rom[1522] = 16'b0011100001101001;
    rom[1523] = 16'b0011100001101001;
    rom[1524] = 16'b0011100001101010;
    rom[1525] = 16'b0011100001101011;
    rom[1526] = 16'b0011100001101011;
    rom[1527] = 16'b0011100001101100;
    rom[1528] = 16'b0011100001101101;
    rom[1529] = 16'b0011100001101101;
    rom[1530] = 16'b0011100001101110;
    rom[1531] = 16'b0011100001101111;
    rom[1532] = 16'b0011100001101111;
    rom[1533] = 16'b0011100001110000;
    rom[1534] = 16'b0011100001110001;
    rom[1535] = 16'b0011100001110001;
    rom[1536] = 16'b0011100001110010;
    rom[1537] = 16'b0011100001110010;
    rom[1538] = 16'b0011100001110011;
    rom[1539] = 16'b0011100001110100;
    rom[1540] = 16'b0011100001110100;
    rom[1541] = 16'b0011100001110101;
    rom[1542] = 16'b0011100001110110;
    rom[1543] = 16'b0011100001110110;
    rom[1544] = 16'b0011100001110111;
    rom[1545] = 16'b0011100001111000;
    rom[1546] = 16'b0011100001111000;
    rom[1547] = 16'b0011100001111001;
    rom[1548] = 16'b0011100001111010;
    rom[1549] = 16'b0011100001111010;
    rom[1550] = 16'b0011100001111011;
    rom[1551] = 16'b0011100001111100;
    rom[1552] = 16'b0011100001111100;
    rom[1553] = 16'b0011100001111101;
    rom[1554] = 16'b0011100001111110;
    rom[1555] = 16'b0011100001111110;
    rom[1556] = 16'b0011100001111111;
    rom[1557] = 16'b0011100001111111;
    rom[1558] = 16'b0011100010000000;
    rom[1559] = 16'b0011100010000001;
    rom[1560] = 16'b0011100010000001;
    rom[1561] = 16'b0011100010000010;
    rom[1562] = 16'b0011100010000011;
    rom[1563] = 16'b0011100010000011;
    rom[1564] = 16'b0011100010000100;
    rom[1565] = 16'b0011100010000101;
    rom[1566] = 16'b0011100010000101;
    rom[1567] = 16'b0011100010000110;
    rom[1568] = 16'b0011100010000111;
    rom[1569] = 16'b0011100010000111;
    rom[1570] = 16'b0011100010001000;
    rom[1571] = 16'b0011100010001001;
    rom[1572] = 16'b0011100010001001;
    rom[1573] = 16'b0011100010001010;
    rom[1574] = 16'b0011100010001011;
    rom[1575] = 16'b0011100010001011;
    rom[1576] = 16'b0011100010001100;
    rom[1577] = 16'b0011100010001100;
    rom[1578] = 16'b0011100010001101;
    rom[1579] = 16'b0011100010001110;
    rom[1580] = 16'b0011100010001110;
    rom[1581] = 16'b0011100010001111;
    rom[1582] = 16'b0011100010010000;
    rom[1583] = 16'b0011100010010000;
    rom[1584] = 16'b0011100010010001;
    rom[1585] = 16'b0011100010010010;
    rom[1586] = 16'b0011100010010010;
    rom[1587] = 16'b0011100010010011;
    rom[1588] = 16'b0011100010010100;
    rom[1589] = 16'b0011100010010100;
    rom[1590] = 16'b0011100010010101;
    rom[1591] = 16'b0011100010010101;
    rom[1592] = 16'b0011100010010110;
    rom[1593] = 16'b0011100010010111;
    rom[1594] = 16'b0011100010010111;
    rom[1595] = 16'b0011100010011000;
    rom[1596] = 16'b0011100010011001;
    rom[1597] = 16'b0011100010011001;
    rom[1598] = 16'b0011100010011010;
    rom[1599] = 16'b0011100010011011;
    rom[1600] = 16'b0011100010011011;
    rom[1601] = 16'b0011100010011100;
    rom[1602] = 16'b0011100010011101;
    rom[1603] = 16'b0011100010011101;
    rom[1604] = 16'b0011100010011110;
    rom[1605] = 16'b0011100010011110;
    rom[1606] = 16'b0011100010011111;
    rom[1607] = 16'b0011100010100000;
    rom[1608] = 16'b0011100010100000;
    rom[1609] = 16'b0011100010100001;
    rom[1610] = 16'b0011100010100010;
    rom[1611] = 16'b0011100010100010;
    rom[1612] = 16'b0011100010100011;
    rom[1613] = 16'b0011100010100100;
    rom[1614] = 16'b0011100010100100;
    rom[1615] = 16'b0011100010100101;
    rom[1616] = 16'b0011100010100110;
    rom[1617] = 16'b0011100010100110;
    rom[1618] = 16'b0011100010100111;
    rom[1619] = 16'b0011100010100111;
    rom[1620] = 16'b0011100010101000;
    rom[1621] = 16'b0011100010101001;
    rom[1622] = 16'b0011100010101001;
    rom[1623] = 16'b0011100010101010;
    rom[1624] = 16'b0011100010101011;
    rom[1625] = 16'b0011100010101011;
    rom[1626] = 16'b0011100010101100;
    rom[1627] = 16'b0011100010101101;
    rom[1628] = 16'b0011100010101101;
    rom[1629] = 16'b0011100010101110;
    rom[1630] = 16'b0011100010101110;
    rom[1631] = 16'b0011100010101111;
    rom[1632] = 16'b0011100010110000;
    rom[1633] = 16'b0011100010110000;
    rom[1634] = 16'b0011100010110001;
    rom[1635] = 16'b0011100010110010;
    rom[1636] = 16'b0011100010110010;
    rom[1637] = 16'b0011100010110011;
    rom[1638] = 16'b0011100010110100;
    rom[1639] = 16'b0011100010110100;
    rom[1640] = 16'b0011100010110101;
    rom[1641] = 16'b0011100010110101;
    rom[1642] = 16'b0011100010110110;
    rom[1643] = 16'b0011100010110111;
    rom[1644] = 16'b0011100010110111;
    rom[1645] = 16'b0011100010111000;
    rom[1646] = 16'b0011100010111001;
    rom[1647] = 16'b0011100010111001;
    rom[1648] = 16'b0011100010111010;
    rom[1649] = 16'b0011100010111011;
    rom[1650] = 16'b0011100010111011;
    rom[1651] = 16'b0011100010111100;
    rom[1652] = 16'b0011100010111100;
    rom[1653] = 16'b0011100010111101;
    rom[1654] = 16'b0011100010111110;
    rom[1655] = 16'b0011100010111110;
    rom[1656] = 16'b0011100010111111;
    rom[1657] = 16'b0011100011000000;
    rom[1658] = 16'b0011100011000000;
    rom[1659] = 16'b0011100011000001;
    rom[1660] = 16'b0011100011000001;
    rom[1661] = 16'b0011100011000010;
    rom[1662] = 16'b0011100011000011;
    rom[1663] = 16'b0011100011000011;
    rom[1664] = 16'b0011100011000100;
    rom[1665] = 16'b0011100011000101;
    rom[1666] = 16'b0011100011000101;
    rom[1667] = 16'b0011100011000110;
    rom[1668] = 16'b0011100011000111;
    rom[1669] = 16'b0011100011000111;
    rom[1670] = 16'b0011100011001000;
    rom[1671] = 16'b0011100011001000;
    rom[1672] = 16'b0011100011001001;
    rom[1673] = 16'b0011100011001010;
    rom[1674] = 16'b0011100011001010;
    rom[1675] = 16'b0011100011001011;
    rom[1676] = 16'b0011100011001100;
    rom[1677] = 16'b0011100011001100;
    rom[1678] = 16'b0011100011001101;
    rom[1679] = 16'b0011100011001101;
    rom[1680] = 16'b0011100011001110;
    rom[1681] = 16'b0011100011001111;
    rom[1682] = 16'b0011100011001111;
    rom[1683] = 16'b0011100011010000;
    rom[1684] = 16'b0011100011010001;
    rom[1685] = 16'b0011100011010001;
    rom[1686] = 16'b0011100011010010;
    rom[1687] = 16'b0011100011010010;
    rom[1688] = 16'b0011100011010011;
    rom[1689] = 16'b0011100011010100;
    rom[1690] = 16'b0011100011010100;
    rom[1691] = 16'b0011100011010101;
    rom[1692] = 16'b0011100011010110;
    rom[1693] = 16'b0011100011010110;
    rom[1694] = 16'b0011100011010111;
    rom[1695] = 16'b0011100011010111;
    rom[1696] = 16'b0011100011011000;
    rom[1697] = 16'b0011100011011001;
    rom[1698] = 16'b0011100011011001;
    rom[1699] = 16'b0011100011011010;
    rom[1700] = 16'b0011100011011011;
    rom[1701] = 16'b0011100011011011;
    rom[1702] = 16'b0011100011011100;
    rom[1703] = 16'b0011100011011100;
    rom[1704] = 16'b0011100011011101;
    rom[1705] = 16'b0011100011011110;
    rom[1706] = 16'b0011100011011110;
    rom[1707] = 16'b0011100011011111;
    rom[1708] = 16'b0011100011100000;
    rom[1709] = 16'b0011100011100000;
    rom[1710] = 16'b0011100011100001;
    rom[1711] = 16'b0011100011100001;
    rom[1712] = 16'b0011100011100010;
    rom[1713] = 16'b0011100011100011;
    rom[1714] = 16'b0011100011100011;
    rom[1715] = 16'b0011100011100100;
    rom[1716] = 16'b0011100011100101;
    rom[1717] = 16'b0011100011100101;
    rom[1718] = 16'b0011100011100110;
    rom[1719] = 16'b0011100011100110;
    rom[1720] = 16'b0011100011100111;
    rom[1721] = 16'b0011100011101000;
    rom[1722] = 16'b0011100011101000;
    rom[1723] = 16'b0011100011101001;
    rom[1724] = 16'b0011100011101010;
    rom[1725] = 16'b0011100011101010;
    rom[1726] = 16'b0011100011101011;
    rom[1727] = 16'b0011100011101011;
    rom[1728] = 16'b0011100011101100;
    rom[1729] = 16'b0011100011101101;
    rom[1730] = 16'b0011100011101101;
    rom[1731] = 16'b0011100011101110;
    rom[1732] = 16'b0011100011101110;
    rom[1733] = 16'b0011100011101111;
    rom[1734] = 16'b0011100011110000;
    rom[1735] = 16'b0011100011110000;
    rom[1736] = 16'b0011100011110001;
    rom[1737] = 16'b0011100011110010;
    rom[1738] = 16'b0011100011110010;
    rom[1739] = 16'b0011100011110011;
    rom[1740] = 16'b0011100011110011;
    rom[1741] = 16'b0011100011110100;
    rom[1742] = 16'b0011100011110101;
    rom[1743] = 16'b0011100011110101;
    rom[1744] = 16'b0011100011110110;
    rom[1745] = 16'b0011100011110110;
    rom[1746] = 16'b0011100011110111;
    rom[1747] = 16'b0011100011111000;
    rom[1748] = 16'b0011100011111000;
    rom[1749] = 16'b0011100011111001;
    rom[1750] = 16'b0011100011111010;
    rom[1751] = 16'b0011100011111010;
    rom[1752] = 16'b0011100011111011;
    rom[1753] = 16'b0011100011111011;
    rom[1754] = 16'b0011100011111100;
    rom[1755] = 16'b0011100011111101;
    rom[1756] = 16'b0011100011111101;
    rom[1757] = 16'b0011100011111110;
    rom[1758] = 16'b0011100011111110;
    rom[1759] = 16'b0011100011111111;
    rom[1760] = 16'b0011100100000000;
    rom[1761] = 16'b0011100100000000;
    rom[1762] = 16'b0011100100000001;
    rom[1763] = 16'b0011100100000010;
    rom[1764] = 16'b0011100100000010;
    rom[1765] = 16'b0011100100000011;
    rom[1766] = 16'b0011100100000011;
    rom[1767] = 16'b0011100100000100;
    rom[1768] = 16'b0011100100000101;
    rom[1769] = 16'b0011100100000101;
    rom[1770] = 16'b0011100100000110;
    rom[1771] = 16'b0011100100000110;
    rom[1772] = 16'b0011100100000111;
    rom[1773] = 16'b0011100100001000;
    rom[1774] = 16'b0011100100001000;
    rom[1775] = 16'b0011100100001001;
    rom[1776] = 16'b0011100100001001;
    rom[1777] = 16'b0011100100001010;
    rom[1778] = 16'b0011100100001011;
    rom[1779] = 16'b0011100100001011;
    rom[1780] = 16'b0011100100001100;
    rom[1781] = 16'b0011100100001101;
    rom[1782] = 16'b0011100100001101;
    rom[1783] = 16'b0011100100001110;
    rom[1784] = 16'b0011100100001110;
    rom[1785] = 16'b0011100100001111;
    rom[1786] = 16'b0011100100010000;
    rom[1787] = 16'b0011100100010000;
    rom[1788] = 16'b0011100100010001;
    rom[1789] = 16'b0011100100010001;
    rom[1790] = 16'b0011100100010010;
    rom[1791] = 16'b0011100100010011;
    rom[1792] = 16'b0011100100010011;
    rom[1793] = 16'b0011100100010100;
    rom[1794] = 16'b0011100100010100;
    rom[1795] = 16'b0011100100010101;
    rom[1796] = 16'b0011100100010110;
    rom[1797] = 16'b0011100100010110;
    rom[1798] = 16'b0011100100010111;
    rom[1799] = 16'b0011100100010111;
    rom[1800] = 16'b0011100100011000;
    rom[1801] = 16'b0011100100011001;
    rom[1802] = 16'b0011100100011001;
    rom[1803] = 16'b0011100100011010;
    rom[1804] = 16'b0011100100011011;
    rom[1805] = 16'b0011100100011011;
    rom[1806] = 16'b0011100100011100;
    rom[1807] = 16'b0011100100011100;
    rom[1808] = 16'b0011100100011101;
    rom[1809] = 16'b0011100100011110;
    rom[1810] = 16'b0011100100011110;
    rom[1811] = 16'b0011100100011111;
    rom[1812] = 16'b0011100100011111;
    rom[1813] = 16'b0011100100100000;
    rom[1814] = 16'b0011100100100001;
    rom[1815] = 16'b0011100100100001;
    rom[1816] = 16'b0011100100100010;
    rom[1817] = 16'b0011100100100010;
    rom[1818] = 16'b0011100100100011;
    rom[1819] = 16'b0011100100100100;
    rom[1820] = 16'b0011100100100100;
    rom[1821] = 16'b0011100100100101;
    rom[1822] = 16'b0011100100100101;
    rom[1823] = 16'b0011100100100110;
    rom[1824] = 16'b0011100100100111;
    rom[1825] = 16'b0011100100100111;
    rom[1826] = 16'b0011100100101000;
    rom[1827] = 16'b0011100100101000;
    rom[1828] = 16'b0011100100101001;
    rom[1829] = 16'b0011100100101010;
    rom[1830] = 16'b0011100100101010;
    rom[1831] = 16'b0011100100101011;
    rom[1832] = 16'b0011100100101011;
    rom[1833] = 16'b0011100100101100;
    rom[1834] = 16'b0011100100101101;
    rom[1835] = 16'b0011100100101101;
    rom[1836] = 16'b0011100100101110;
    rom[1837] = 16'b0011100100101110;
    rom[1838] = 16'b0011100100101111;
    rom[1839] = 16'b0011100100110000;
    rom[1840] = 16'b0011100100110000;
    rom[1841] = 16'b0011100100110001;
    rom[1842] = 16'b0011100100110001;
    rom[1843] = 16'b0011100100110010;
    rom[1844] = 16'b0011100100110011;
    rom[1845] = 16'b0011100100110011;
    rom[1846] = 16'b0011100100110100;
    rom[1847] = 16'b0011100100110100;
    rom[1848] = 16'b0011100100110101;
    rom[1849] = 16'b0011100100110110;
    rom[1850] = 16'b0011100100110110;
    rom[1851] = 16'b0011100100110111;
    rom[1852] = 16'b0011100100110111;
    rom[1853] = 16'b0011100100111000;
    rom[1854] = 16'b0011100100111001;
    rom[1855] = 16'b0011100100111001;
    rom[1856] = 16'b0011100100111010;
    rom[1857] = 16'b0011100100111010;
    rom[1858] = 16'b0011100100111011;
    rom[1859] = 16'b0011100100111011;
    rom[1860] = 16'b0011100100111100;
    rom[1861] = 16'b0011100100111101;
    rom[1862] = 16'b0011100100111101;
    rom[1863] = 16'b0011100100111110;
    rom[1864] = 16'b0011100100111110;
    rom[1865] = 16'b0011100100111111;
    rom[1866] = 16'b0011100101000000;
    rom[1867] = 16'b0011100101000000;
    rom[1868] = 16'b0011100101000001;
    rom[1869] = 16'b0011100101000001;
    rom[1870] = 16'b0011100101000010;
    rom[1871] = 16'b0011100101000011;
    rom[1872] = 16'b0011100101000011;
    rom[1873] = 16'b0011100101000100;
    rom[1874] = 16'b0011100101000100;
    rom[1875] = 16'b0011100101000101;
    rom[1876] = 16'b0011100101000110;
    rom[1877] = 16'b0011100101000110;
    rom[1878] = 16'b0011100101000111;
    rom[1879] = 16'b0011100101000111;
    rom[1880] = 16'b0011100101001000;
    rom[1881] = 16'b0011100101001001;
    rom[1882] = 16'b0011100101001001;
    rom[1883] = 16'b0011100101001010;
    rom[1884] = 16'b0011100101001010;
    rom[1885] = 16'b0011100101001011;
    rom[1886] = 16'b0011100101001011;
    rom[1887] = 16'b0011100101001100;
    rom[1888] = 16'b0011100101001101;
    rom[1889] = 16'b0011100101001101;
    rom[1890] = 16'b0011100101001110;
    rom[1891] = 16'b0011100101001110;
    rom[1892] = 16'b0011100101001111;
    rom[1893] = 16'b0011100101010000;
    rom[1894] = 16'b0011100101010000;
    rom[1895] = 16'b0011100101010001;
    rom[1896] = 16'b0011100101010001;
    rom[1897] = 16'b0011100101010010;
    rom[1898] = 16'b0011100101010011;
    rom[1899] = 16'b0011100101010011;
    rom[1900] = 16'b0011100101010100;
    rom[1901] = 16'b0011100101010100;
    rom[1902] = 16'b0011100101010101;
    rom[1903] = 16'b0011100101010101;
    rom[1904] = 16'b0011100101010110;
    rom[1905] = 16'b0011100101010111;
    rom[1906] = 16'b0011100101010111;
    rom[1907] = 16'b0011100101011000;
    rom[1908] = 16'b0011100101011000;
    rom[1909] = 16'b0011100101011001;
    rom[1910] = 16'b0011100101011010;
    rom[1911] = 16'b0011100101011010;
    rom[1912] = 16'b0011100101011011;
    rom[1913] = 16'b0011100101011011;
    rom[1914] = 16'b0011100101011100;
    rom[1915] = 16'b0011100101011100;
    rom[1916] = 16'b0011100101011101;
    rom[1917] = 16'b0011100101011110;
    rom[1918] = 16'b0011100101011110;
    rom[1919] = 16'b0011100101011111;
    rom[1920] = 16'b0011100101011111;
    rom[1921] = 16'b0011100101100000;
    rom[1922] = 16'b0011100101100001;
    rom[1923] = 16'b0011100101100001;
    rom[1924] = 16'b0011100101100010;
    rom[1925] = 16'b0011100101100010;
    rom[1926] = 16'b0011100101100011;
    rom[1927] = 16'b0011100101100011;
    rom[1928] = 16'b0011100101100100;
    rom[1929] = 16'b0011100101100101;
    rom[1930] = 16'b0011100101100101;
    rom[1931] = 16'b0011100101100110;
    rom[1932] = 16'b0011100101100110;
    rom[1933] = 16'b0011100101100111;
    rom[1934] = 16'b0011100101100111;
    rom[1935] = 16'b0011100101101000;
    rom[1936] = 16'b0011100101101001;
    rom[1937] = 16'b0011100101101001;
    rom[1938] = 16'b0011100101101010;
    rom[1939] = 16'b0011100101101010;
    rom[1940] = 16'b0011100101101011;
    rom[1941] = 16'b0011100101101100;
    rom[1942] = 16'b0011100101101100;
    rom[1943] = 16'b0011100101101101;
    rom[1944] = 16'b0011100101101101;
    rom[1945] = 16'b0011100101101110;
    rom[1946] = 16'b0011100101101110;
    rom[1947] = 16'b0011100101101111;
    rom[1948] = 16'b0011100101110000;
    rom[1949] = 16'b0011100101110000;
    rom[1950] = 16'b0011100101110001;
    rom[1951] = 16'b0011100101110001;
    rom[1952] = 16'b0011100101110010;
    rom[1953] = 16'b0011100101110010;
    rom[1954] = 16'b0011100101110011;
    rom[1955] = 16'b0011100101110100;
    rom[1956] = 16'b0011100101110100;
    rom[1957] = 16'b0011100101110101;
    rom[1958] = 16'b0011100101110101;
    rom[1959] = 16'b0011100101110110;
    rom[1960] = 16'b0011100101110110;
    rom[1961] = 16'b0011100101110111;
    rom[1962] = 16'b0011100101111000;
    rom[1963] = 16'b0011100101111000;
    rom[1964] = 16'b0011100101111001;
    rom[1965] = 16'b0011100101111001;
    rom[1966] = 16'b0011100101111010;
    rom[1967] = 16'b0011100101111010;
    rom[1968] = 16'b0011100101111011;
    rom[1969] = 16'b0011100101111100;
    rom[1970] = 16'b0011100101111100;
    rom[1971] = 16'b0011100101111101;
    rom[1972] = 16'b0011100101111101;
    rom[1973] = 16'b0011100101111110;
    rom[1974] = 16'b0011100101111110;
    rom[1975] = 16'b0011100101111111;
    rom[1976] = 16'b0011100110000000;
    rom[1977] = 16'b0011100110000000;
    rom[1978] = 16'b0011100110000001;
    rom[1979] = 16'b0011100110000001;
    rom[1980] = 16'b0011100110000010;
    rom[1981] = 16'b0011100110000010;
    rom[1982] = 16'b0011100110000011;
    rom[1983] = 16'b0011100110000100;
    rom[1984] = 16'b0011100110000100;
    rom[1985] = 16'b0011100110000101;
    rom[1986] = 16'b0011100110000101;
    rom[1987] = 16'b0011100110000110;
    rom[1988] = 16'b0011100110000110;
    rom[1989] = 16'b0011100110000111;
    rom[1990] = 16'b0011100110001000;
    rom[1991] = 16'b0011100110001000;
    rom[1992] = 16'b0011100110001001;
    rom[1993] = 16'b0011100110001001;
    rom[1994] = 16'b0011100110001010;
    rom[1995] = 16'b0011100110001010;
    rom[1996] = 16'b0011100110001011;
    rom[1997] = 16'b0011100110001100;
    rom[1998] = 16'b0011100110001100;
    rom[1999] = 16'b0011100110001101;
    rom[2000] = 16'b0011100110001101;
    rom[2001] = 16'b0011100110001110;
    rom[2002] = 16'b0011100110001110;
    rom[2003] = 16'b0011100110001111;
    rom[2004] = 16'b0011100110010000;
    rom[2005] = 16'b0011100110010000;
    rom[2006] = 16'b0011100110010001;
    rom[2007] = 16'b0011100110010001;
    rom[2008] = 16'b0011100110010010;
    rom[2009] = 16'b0011100110010010;
    rom[2010] = 16'b0011100110010011;
    rom[2011] = 16'b0011100110010011;
    rom[2012] = 16'b0011100110010100;
    rom[2013] = 16'b0011100110010101;
    rom[2014] = 16'b0011100110010101;
    rom[2015] = 16'b0011100110010110;
    rom[2016] = 16'b0011100110010110;
    rom[2017] = 16'b0011100110010111;
    rom[2018] = 16'b0011100110010111;
    rom[2019] = 16'b0011100110011000;
    rom[2020] = 16'b0011100110011001;
    rom[2021] = 16'b0011100110011001;
    rom[2022] = 16'b0011100110011010;
    rom[2023] = 16'b0011100110011010;
    rom[2024] = 16'b0011100110011011;
    rom[2025] = 16'b0011100110011011;
    rom[2026] = 16'b0011100110011100;
    rom[2027] = 16'b0011100110011100;
    rom[2028] = 16'b0011100110011101;
    rom[2029] = 16'b0011100110011110;
    rom[2030] = 16'b0011100110011110;
    rom[2031] = 16'b0011100110011111;
    rom[2032] = 16'b0011100110011111;
    rom[2033] = 16'b0011100110100000;
    rom[2034] = 16'b0011100110100000;
    rom[2035] = 16'b0011100110100001;
    rom[2036] = 16'b0011100110100001;
    rom[2037] = 16'b0011100110100010;
    rom[2038] = 16'b0011100110100011;
    rom[2039] = 16'b0011100110100011;
    rom[2040] = 16'b0011100110100100;
    rom[2041] = 16'b0011100110100100;
    rom[2042] = 16'b0011100110100101;
    rom[2043] = 16'b0011100110100101;
    rom[2044] = 16'b0011100110100110;
    rom[2045] = 16'b0011100110100110;
    rom[2046] = 16'b0011100110100111;
    rom[2047] = 16'b0011100110101000;
    rom[2048] = 16'b0011100110101000;
    rom[2049] = 16'b0011100110101001;
    rom[2050] = 16'b0011100110101001;
    rom[2051] = 16'b0011100110101010;
    rom[2052] = 16'b0011100110101010;
    rom[2053] = 16'b0011100110101011;
    rom[2054] = 16'b0011100110101011;
    rom[2055] = 16'b0011100110101100;
    rom[2056] = 16'b0011100110101101;
    rom[2057] = 16'b0011100110101101;
    rom[2058] = 16'b0011100110101110;
    rom[2059] = 16'b0011100110101110;
    rom[2060] = 16'b0011100110101111;
    rom[2061] = 16'b0011100110101111;
    rom[2062] = 16'b0011100110110000;
    rom[2063] = 16'b0011100110110000;
    rom[2064] = 16'b0011100110110001;
    rom[2065] = 16'b0011100110110010;
    rom[2066] = 16'b0011100110110010;
    rom[2067] = 16'b0011100110110011;
    rom[2068] = 16'b0011100110110011;
    rom[2069] = 16'b0011100110110100;
    rom[2070] = 16'b0011100110110100;
    rom[2071] = 16'b0011100110110101;
    rom[2072] = 16'b0011100110110101;
    rom[2073] = 16'b0011100110110110;
    rom[2074] = 16'b0011100110110111;
    rom[2075] = 16'b0011100110110111;
    rom[2076] = 16'b0011100110111000;
    rom[2077] = 16'b0011100110111000;
    rom[2078] = 16'b0011100110111001;
    rom[2079] = 16'b0011100110111001;
    rom[2080] = 16'b0011100110111010;
    rom[2081] = 16'b0011100110111010;
    rom[2082] = 16'b0011100110111011;
    rom[2083] = 16'b0011100110111011;
    rom[2084] = 16'b0011100110111100;
    rom[2085] = 16'b0011100110111101;
    rom[2086] = 16'b0011100110111101;
    rom[2087] = 16'b0011100110111110;
    rom[2088] = 16'b0011100110111110;
    rom[2089] = 16'b0011100110111111;
    rom[2090] = 16'b0011100110111111;
    rom[2091] = 16'b0011100111000000;
    rom[2092] = 16'b0011100111000000;
    rom[2093] = 16'b0011100111000001;
    rom[2094] = 16'b0011100111000001;
    rom[2095] = 16'b0011100111000010;
    rom[2096] = 16'b0011100111000011;
    rom[2097] = 16'b0011100111000011;
    rom[2098] = 16'b0011100111000100;
    rom[2099] = 16'b0011100111000100;
    rom[2100] = 16'b0011100111000101;
    rom[2101] = 16'b0011100111000101;
    rom[2102] = 16'b0011100111000110;
    rom[2103] = 16'b0011100111000110;
    rom[2104] = 16'b0011100111000111;
    rom[2105] = 16'b0011100111000111;
    rom[2106] = 16'b0011100111001000;
    rom[2107] = 16'b0011100111001001;
    rom[2108] = 16'b0011100111001001;
    rom[2109] = 16'b0011100111001010;
    rom[2110] = 16'b0011100111001010;
    rom[2111] = 16'b0011100111001011;
    rom[2112] = 16'b0011100111001011;
    rom[2113] = 16'b0011100111001100;
    rom[2114] = 16'b0011100111001100;
    rom[2115] = 16'b0011100111001101;
    rom[2116] = 16'b0011100111001101;
    rom[2117] = 16'b0011100111001110;
    rom[2118] = 16'b0011100111001111;
    rom[2119] = 16'b0011100111001111;
    rom[2120] = 16'b0011100111010000;
    rom[2121] = 16'b0011100111010000;
    rom[2122] = 16'b0011100111010001;
    rom[2123] = 16'b0011100111010001;
    rom[2124] = 16'b0011100111010010;
    rom[2125] = 16'b0011100111010010;
    rom[2126] = 16'b0011100111010011;
    rom[2127] = 16'b0011100111010011;
    rom[2128] = 16'b0011100111010100;
    rom[2129] = 16'b0011100111010100;
    rom[2130] = 16'b0011100111010101;
    rom[2131] = 16'b0011100111010110;
    rom[2132] = 16'b0011100111010110;
    rom[2133] = 16'b0011100111010111;
    rom[2134] = 16'b0011100111010111;
    rom[2135] = 16'b0011100111011000;
    rom[2136] = 16'b0011100111011000;
    rom[2137] = 16'b0011100111011001;
    rom[2138] = 16'b0011100111011001;
    rom[2139] = 16'b0011100111011010;
    rom[2140] = 16'b0011100111011010;
    rom[2141] = 16'b0011100111011011;
    rom[2142] = 16'b0011100111011011;
    rom[2143] = 16'b0011100111011100;
    rom[2144] = 16'b0011100111011100;
    rom[2145] = 16'b0011100111011101;
    rom[2146] = 16'b0011100111011110;
    rom[2147] = 16'b0011100111011110;
    rom[2148] = 16'b0011100111011111;
    rom[2149] = 16'b0011100111011111;
    rom[2150] = 16'b0011100111100000;
    rom[2151] = 16'b0011100111100000;
    rom[2152] = 16'b0011100111100001;
    rom[2153] = 16'b0011100111100001;
    rom[2154] = 16'b0011100111100010;
    rom[2155] = 16'b0011100111100010;
    rom[2156] = 16'b0011100111100011;
    rom[2157] = 16'b0011100111100011;
    rom[2158] = 16'b0011100111100100;
    rom[2159] = 16'b0011100111100100;
    rom[2160] = 16'b0011100111100101;
    rom[2161] = 16'b0011100111100110;
    rom[2162] = 16'b0011100111100110;
    rom[2163] = 16'b0011100111100111;
    rom[2164] = 16'b0011100111100111;
    rom[2165] = 16'b0011100111101000;
    rom[2166] = 16'b0011100111101000;
    rom[2167] = 16'b0011100111101001;
    rom[2168] = 16'b0011100111101001;
    rom[2169] = 16'b0011100111101010;
    rom[2170] = 16'b0011100111101010;
    rom[2171] = 16'b0011100111101011;
    rom[2172] = 16'b0011100111101011;
    rom[2173] = 16'b0011100111101100;
    rom[2174] = 16'b0011100111101100;
    rom[2175] = 16'b0011100111101101;
    rom[2176] = 16'b0011100111101101;
    rom[2177] = 16'b0011100111101110;
    rom[2178] = 16'b0011100111101111;
    rom[2179] = 16'b0011100111101111;
    rom[2180] = 16'b0011100111110000;
    rom[2181] = 16'b0011100111110000;
    rom[2182] = 16'b0011100111110001;
    rom[2183] = 16'b0011100111110001;
    rom[2184] = 16'b0011100111110010;
    rom[2185] = 16'b0011100111110010;
    rom[2186] = 16'b0011100111110011;
    rom[2187] = 16'b0011100111110011;
    rom[2188] = 16'b0011100111110100;
    rom[2189] = 16'b0011100111110100;
    rom[2190] = 16'b0011100111110101;
    rom[2191] = 16'b0011100111110101;
    rom[2192] = 16'b0011100111110110;
    rom[2193] = 16'b0011100111110110;
    rom[2194] = 16'b0011100111110111;
    rom[2195] = 16'b0011100111110111;
    rom[2196] = 16'b0011100111111000;
    rom[2197] = 16'b0011100111111000;
    rom[2198] = 16'b0011100111111001;
    rom[2199] = 16'b0011100111111010;
    rom[2200] = 16'b0011100111111010;
    rom[2201] = 16'b0011100111111011;
    rom[2202] = 16'b0011100111111011;
    rom[2203] = 16'b0011100111111100;
    rom[2204] = 16'b0011100111111100;
    rom[2205] = 16'b0011100111111101;
    rom[2206] = 16'b0011100111111101;
    rom[2207] = 16'b0011100111111110;
    rom[2208] = 16'b0011100111111110;
    rom[2209] = 16'b0011100111111111;
    rom[2210] = 16'b0011100111111111;
    rom[2211] = 16'b0011101000000000;
    rom[2212] = 16'b0011101000000000;
    rom[2213] = 16'b0011101000000001;
    rom[2214] = 16'b0011101000000001;
    rom[2215] = 16'b0011101000000010;
    rom[2216] = 16'b0011101000000010;
    rom[2217] = 16'b0011101000000011;
    rom[2218] = 16'b0011101000000011;
    rom[2219] = 16'b0011101000000100;
    rom[2220] = 16'b0011101000000100;
    rom[2221] = 16'b0011101000000101;
    rom[2222] = 16'b0011101000000101;
    rom[2223] = 16'b0011101000000110;
    rom[2224] = 16'b0011101000000111;
    rom[2225] = 16'b0011101000000111;
    rom[2226] = 16'b0011101000001000;
    rom[2227] = 16'b0011101000001000;
    rom[2228] = 16'b0011101000001001;
    rom[2229] = 16'b0011101000001001;
    rom[2230] = 16'b0011101000001010;
    rom[2231] = 16'b0011101000001010;
    rom[2232] = 16'b0011101000001011;
    rom[2233] = 16'b0011101000001011;
    rom[2234] = 16'b0011101000001100;
    rom[2235] = 16'b0011101000001100;
    rom[2236] = 16'b0011101000001101;
    rom[2237] = 16'b0011101000001101;
    rom[2238] = 16'b0011101000001110;
    rom[2239] = 16'b0011101000001110;
    rom[2240] = 16'b0011101000001111;
    rom[2241] = 16'b0011101000001111;
    rom[2242] = 16'b0011101000010000;
    rom[2243] = 16'b0011101000010000;
    rom[2244] = 16'b0011101000010001;
    rom[2245] = 16'b0011101000010001;
    rom[2246] = 16'b0011101000010010;
    rom[2247] = 16'b0011101000010010;
    rom[2248] = 16'b0011101000010011;
    rom[2249] = 16'b0011101000010011;
    rom[2250] = 16'b0011101000010100;
    rom[2251] = 16'b0011101000010100;
    rom[2252] = 16'b0011101000010101;
    rom[2253] = 16'b0011101000010101;
    rom[2254] = 16'b0011101000010110;
    rom[2255] = 16'b0011101000010110;
    rom[2256] = 16'b0011101000010111;
    rom[2257] = 16'b0011101000010111;
    rom[2258] = 16'b0011101000011000;
    rom[2259] = 16'b0011101000011000;
    rom[2260] = 16'b0011101000011001;
    rom[2261] = 16'b0011101000011001;
    rom[2262] = 16'b0011101000011010;
    rom[2263] = 16'b0011101000011011;
    rom[2264] = 16'b0011101000011011;
    rom[2265] = 16'b0011101000011100;
    rom[2266] = 16'b0011101000011100;
    rom[2267] = 16'b0011101000011101;
    rom[2268] = 16'b0011101000011101;
    rom[2269] = 16'b0011101000011110;
    rom[2270] = 16'b0011101000011110;
    rom[2271] = 16'b0011101000011111;
    rom[2272] = 16'b0011101000011111;
    rom[2273] = 16'b0011101000100000;
    rom[2274] = 16'b0011101000100000;
    rom[2275] = 16'b0011101000100001;
    rom[2276] = 16'b0011101000100001;
    rom[2277] = 16'b0011101000100010;
    rom[2278] = 16'b0011101000100010;
    rom[2279] = 16'b0011101000100011;
    rom[2280] = 16'b0011101000100011;
    rom[2281] = 16'b0011101000100100;
    rom[2282] = 16'b0011101000100100;
    rom[2283] = 16'b0011101000100101;
    rom[2284] = 16'b0011101000100101;
    rom[2285] = 16'b0011101000100110;
    rom[2286] = 16'b0011101000100110;
    rom[2287] = 16'b0011101000100111;
    rom[2288] = 16'b0011101000100111;
    rom[2289] = 16'b0011101000101000;
    rom[2290] = 16'b0011101000101000;
    rom[2291] = 16'b0011101000101001;
    rom[2292] = 16'b0011101000101001;
    rom[2293] = 16'b0011101000101010;
    rom[2294] = 16'b0011101000101010;
    rom[2295] = 16'b0011101000101011;
    rom[2296] = 16'b0011101000101011;
    rom[2297] = 16'b0011101000101100;
    rom[2298] = 16'b0011101000101100;
    rom[2299] = 16'b0011101000101101;
    rom[2300] = 16'b0011101000101101;
    rom[2301] = 16'b0011101000101110;
    rom[2302] = 16'b0011101000101110;
    rom[2303] = 16'b0011101000101111;
    rom[2304] = 16'b0011101000101111;
    rom[2305] = 16'b0011101000110000;
    rom[2306] = 16'b0011101000110000;
    rom[2307] = 16'b0011101000110001;
    rom[2308] = 16'b0011101000110001;
    rom[2309] = 16'b0011101000110010;
    rom[2310] = 16'b0011101000110010;
    rom[2311] = 16'b0011101000110011;
    rom[2312] = 16'b0011101000110011;
    rom[2313] = 16'b0011101000110100;
    rom[2314] = 16'b0011101000110100;
    rom[2315] = 16'b0011101000110101;
    rom[2316] = 16'b0011101000110101;
    rom[2317] = 16'b0011101000110110;
    rom[2318] = 16'b0011101000110110;
    rom[2319] = 16'b0011101000110111;
    rom[2320] = 16'b0011101000110111;
    rom[2321] = 16'b0011101000111000;
    rom[2322] = 16'b0011101000111000;
    rom[2323] = 16'b0011101000111001;
    rom[2324] = 16'b0011101000111001;
    rom[2325] = 16'b0011101000111010;
    rom[2326] = 16'b0011101000111010;
    rom[2327] = 16'b0011101000111011;
    rom[2328] = 16'b0011101000111011;
    rom[2329] = 16'b0011101000111100;
    rom[2330] = 16'b0011101000111100;
    rom[2331] = 16'b0011101000111100;
    rom[2332] = 16'b0011101000111101;
    rom[2333] = 16'b0011101000111101;
    rom[2334] = 16'b0011101000111110;
    rom[2335] = 16'b0011101000111110;
    rom[2336] = 16'b0011101000111111;
    rom[2337] = 16'b0011101000111111;
    rom[2338] = 16'b0011101001000000;
    rom[2339] = 16'b0011101001000000;
    rom[2340] = 16'b0011101001000001;
    rom[2341] = 16'b0011101001000001;
    rom[2342] = 16'b0011101001000010;
    rom[2343] = 16'b0011101001000010;
    rom[2344] = 16'b0011101001000011;
    rom[2345] = 16'b0011101001000011;
    rom[2346] = 16'b0011101001000100;
    rom[2347] = 16'b0011101001000100;
    rom[2348] = 16'b0011101001000101;
    rom[2349] = 16'b0011101001000101;
    rom[2350] = 16'b0011101001000110;
    rom[2351] = 16'b0011101001000110;
    rom[2352] = 16'b0011101001000111;
    rom[2353] = 16'b0011101001000111;
    rom[2354] = 16'b0011101001001000;
    rom[2355] = 16'b0011101001001000;
    rom[2356] = 16'b0011101001001001;
    rom[2357] = 16'b0011101001001001;
    rom[2358] = 16'b0011101001001010;
    rom[2359] = 16'b0011101001001010;
    rom[2360] = 16'b0011101001001011;
    rom[2361] = 16'b0011101001001011;
    rom[2362] = 16'b0011101001001100;
    rom[2363] = 16'b0011101001001100;
    rom[2364] = 16'b0011101001001101;
    rom[2365] = 16'b0011101001001101;
    rom[2366] = 16'b0011101001001110;
    rom[2367] = 16'b0011101001001110;
    rom[2368] = 16'b0011101001001111;
    rom[2369] = 16'b0011101001001111;
    rom[2370] = 16'b0011101001001111;
    rom[2371] = 16'b0011101001010000;
    rom[2372] = 16'b0011101001010000;
    rom[2373] = 16'b0011101001010001;
    rom[2374] = 16'b0011101001010001;
    rom[2375] = 16'b0011101001010010;
    rom[2376] = 16'b0011101001010010;
    rom[2377] = 16'b0011101001010011;
    rom[2378] = 16'b0011101001010011;
    rom[2379] = 16'b0011101001010100;
    rom[2380] = 16'b0011101001010100;
    rom[2381] = 16'b0011101001010101;
    rom[2382] = 16'b0011101001010101;
    rom[2383] = 16'b0011101001010110;
    rom[2384] = 16'b0011101001010110;
    rom[2385] = 16'b0011101001010111;
    rom[2386] = 16'b0011101001010111;
    rom[2387] = 16'b0011101001011000;
    rom[2388] = 16'b0011101001011000;
    rom[2389] = 16'b0011101001011001;
    rom[2390] = 16'b0011101001011001;
    rom[2391] = 16'b0011101001011010;
    rom[2392] = 16'b0011101001011010;
    rom[2393] = 16'b0011101001011011;
    rom[2394] = 16'b0011101001011011;
    rom[2395] = 16'b0011101001011011;
    rom[2396] = 16'b0011101001011100;
    rom[2397] = 16'b0011101001011100;
    rom[2398] = 16'b0011101001011101;
    rom[2399] = 16'b0011101001011101;
    rom[2400] = 16'b0011101001011110;
    rom[2401] = 16'b0011101001011110;
    rom[2402] = 16'b0011101001011111;
    rom[2403] = 16'b0011101001011111;
    rom[2404] = 16'b0011101001100000;
    rom[2405] = 16'b0011101001100000;
    rom[2406] = 16'b0011101001100001;
    rom[2407] = 16'b0011101001100001;
    rom[2408] = 16'b0011101001100010;
    rom[2409] = 16'b0011101001100010;
    rom[2410] = 16'b0011101001100011;
    rom[2411] = 16'b0011101001100011;
    rom[2412] = 16'b0011101001100100;
    rom[2413] = 16'b0011101001100100;
    rom[2414] = 16'b0011101001100101;
    rom[2415] = 16'b0011101001100101;
    rom[2416] = 16'b0011101001100101;
    rom[2417] = 16'b0011101001100110;
    rom[2418] = 16'b0011101001100110;
    rom[2419] = 16'b0011101001100111;
    rom[2420] = 16'b0011101001100111;
    rom[2421] = 16'b0011101001101000;
    rom[2422] = 16'b0011101001101000;
    rom[2423] = 16'b0011101001101001;
    rom[2424] = 16'b0011101001101001;
    rom[2425] = 16'b0011101001101010;
    rom[2426] = 16'b0011101001101010;
    rom[2427] = 16'b0011101001101011;
    rom[2428] = 16'b0011101001101011;
    rom[2429] = 16'b0011101001101100;
    rom[2430] = 16'b0011101001101100;
    rom[2431] = 16'b0011101001101101;
    rom[2432] = 16'b0011101001101101;
    rom[2433] = 16'b0011101001101101;
    rom[2434] = 16'b0011101001101110;
    rom[2435] = 16'b0011101001101110;
    rom[2436] = 16'b0011101001101111;
    rom[2437] = 16'b0011101001101111;
    rom[2438] = 16'b0011101001110000;
    rom[2439] = 16'b0011101001110000;
    rom[2440] = 16'b0011101001110001;
    rom[2441] = 16'b0011101001110001;
    rom[2442] = 16'b0011101001110010;
    rom[2443] = 16'b0011101001110010;
    rom[2444] = 16'b0011101001110011;
    rom[2445] = 16'b0011101001110011;
    rom[2446] = 16'b0011101001110011;
    rom[2447] = 16'b0011101001110100;
    rom[2448] = 16'b0011101001110100;
    rom[2449] = 16'b0011101001110101;
    rom[2450] = 16'b0011101001110101;
    rom[2451] = 16'b0011101001110110;
    rom[2452] = 16'b0011101001110110;
    rom[2453] = 16'b0011101001110111;
    rom[2454] = 16'b0011101001110111;
    rom[2455] = 16'b0011101001111000;
    rom[2456] = 16'b0011101001111000;
    rom[2457] = 16'b0011101001111001;
    rom[2458] = 16'b0011101001111001;
    rom[2459] = 16'b0011101001111010;
    rom[2460] = 16'b0011101001111010;
    rom[2461] = 16'b0011101001111010;
    rom[2462] = 16'b0011101001111011;
    rom[2463] = 16'b0011101001111011;
    rom[2464] = 16'b0011101001111100;
    rom[2465] = 16'b0011101001111100;
    rom[2466] = 16'b0011101001111101;
    rom[2467] = 16'b0011101001111101;
    rom[2468] = 16'b0011101001111110;
    rom[2469] = 16'b0011101001111110;
    rom[2470] = 16'b0011101001111111;
    rom[2471] = 16'b0011101001111111;
    rom[2472] = 16'b0011101001111111;
    rom[2473] = 16'b0011101010000000;
    rom[2474] = 16'b0011101010000000;
    rom[2475] = 16'b0011101010000001;
    rom[2476] = 16'b0011101010000001;
    rom[2477] = 16'b0011101010000010;
    rom[2478] = 16'b0011101010000010;
    rom[2479] = 16'b0011101010000011;
    rom[2480] = 16'b0011101010000011;
    rom[2481] = 16'b0011101010000100;
    rom[2482] = 16'b0011101010000100;
    rom[2483] = 16'b0011101010000101;
    rom[2484] = 16'b0011101010000101;
    rom[2485] = 16'b0011101010000101;
    rom[2486] = 16'b0011101010000110;
    rom[2487] = 16'b0011101010000110;
    rom[2488] = 16'b0011101010000111;
    rom[2489] = 16'b0011101010000111;
    rom[2490] = 16'b0011101010001000;
    rom[2491] = 16'b0011101010001000;
    rom[2492] = 16'b0011101010001001;
    rom[2493] = 16'b0011101010001001;
    rom[2494] = 16'b0011101010001010;
    rom[2495] = 16'b0011101010001010;
    rom[2496] = 16'b0011101010001010;
    rom[2497] = 16'b0011101010001011;
    rom[2498] = 16'b0011101010001011;
    rom[2499] = 16'b0011101010001100;
    rom[2500] = 16'b0011101010001100;
    rom[2501] = 16'b0011101010001101;
    rom[2502] = 16'b0011101010001101;
    rom[2503] = 16'b0011101010001110;
    rom[2504] = 16'b0011101010001110;
    rom[2505] = 16'b0011101010001110;
    rom[2506] = 16'b0011101010001111;
    rom[2507] = 16'b0011101010001111;
    rom[2508] = 16'b0011101010010000;
    rom[2509] = 16'b0011101010010000;
    rom[2510] = 16'b0011101010010001;
    rom[2511] = 16'b0011101010010001;
    rom[2512] = 16'b0011101010010010;
    rom[2513] = 16'b0011101010010010;
    rom[2514] = 16'b0011101010010011;
    rom[2515] = 16'b0011101010010011;
    rom[2516] = 16'b0011101010010011;
    rom[2517] = 16'b0011101010010100;
    rom[2518] = 16'b0011101010010100;
    rom[2519] = 16'b0011101010010101;
    rom[2520] = 16'b0011101010010101;
    rom[2521] = 16'b0011101010010110;
    rom[2522] = 16'b0011101010010110;
    rom[2523] = 16'b0011101010010111;
    rom[2524] = 16'b0011101010010111;
    rom[2525] = 16'b0011101010010111;
    rom[2526] = 16'b0011101010011000;
    rom[2527] = 16'b0011101010011000;
    rom[2528] = 16'b0011101010011001;
    rom[2529] = 16'b0011101010011001;
    rom[2530] = 16'b0011101010011010;
    rom[2531] = 16'b0011101010011010;
    rom[2532] = 16'b0011101010011011;
    rom[2533] = 16'b0011101010011011;
    rom[2534] = 16'b0011101010011011;
    rom[2535] = 16'b0011101010011100;
    rom[2536] = 16'b0011101010011100;
    rom[2537] = 16'b0011101010011101;
    rom[2538] = 16'b0011101010011101;
    rom[2539] = 16'b0011101010011110;
    rom[2540] = 16'b0011101010011110;
    rom[2541] = 16'b0011101010011111;
    rom[2542] = 16'b0011101010011111;
    rom[2543] = 16'b0011101010011111;
    rom[2544] = 16'b0011101010100000;
    rom[2545] = 16'b0011101010100000;
    rom[2546] = 16'b0011101010100001;
    rom[2547] = 16'b0011101010100001;
    rom[2548] = 16'b0011101010100010;
    rom[2549] = 16'b0011101010100010;
    rom[2550] = 16'b0011101010100010;
    rom[2551] = 16'b0011101010100011;
    rom[2552] = 16'b0011101010100011;
    rom[2553] = 16'b0011101010100100;
    rom[2554] = 16'b0011101010100100;
    rom[2555] = 16'b0011101010100101;
    rom[2556] = 16'b0011101010100101;
    rom[2557] = 16'b0011101010100110;
    rom[2558] = 16'b0011101010100110;
    rom[2559] = 16'b0011101010100110;
    rom[2560] = 16'b0011101010100111;
    rom[2561] = 16'b0011101010100111;
    rom[2562] = 16'b0011101010101000;
    rom[2563] = 16'b0011101010101000;
    rom[2564] = 16'b0011101010101001;
    rom[2565] = 16'b0011101010101001;
    rom[2566] = 16'b0011101010101001;
    rom[2567] = 16'b0011101010101010;
    rom[2568] = 16'b0011101010101010;
    rom[2569] = 16'b0011101010101011;
    rom[2570] = 16'b0011101010101011;
    rom[2571] = 16'b0011101010101100;
    rom[2572] = 16'b0011101010101100;
    rom[2573] = 16'b0011101010101101;
    rom[2574] = 16'b0011101010101101;
    rom[2575] = 16'b0011101010101101;
    rom[2576] = 16'b0011101010101110;
    rom[2577] = 16'b0011101010101110;
    rom[2578] = 16'b0011101010101111;
    rom[2579] = 16'b0011101010101111;
    rom[2580] = 16'b0011101010110000;
    rom[2581] = 16'b0011101010110000;
    rom[2582] = 16'b0011101010110000;
    rom[2583] = 16'b0011101010110001;
    rom[2584] = 16'b0011101010110001;
    rom[2585] = 16'b0011101010110010;
    rom[2586] = 16'b0011101010110010;
    rom[2587] = 16'b0011101010110011;
    rom[2588] = 16'b0011101010110011;
    rom[2589] = 16'b0011101010110011;
    rom[2590] = 16'b0011101010110100;
    rom[2591] = 16'b0011101010110100;
    rom[2592] = 16'b0011101010110101;
    rom[2593] = 16'b0011101010110101;
    rom[2594] = 16'b0011101010110110;
    rom[2595] = 16'b0011101010110110;
    rom[2596] = 16'b0011101010110110;
    rom[2597] = 16'b0011101010110111;
    rom[2598] = 16'b0011101010110111;
    rom[2599] = 16'b0011101010111000;
    rom[2600] = 16'b0011101010111000;
    rom[2601] = 16'b0011101010111001;
    rom[2602] = 16'b0011101010111001;
    rom[2603] = 16'b0011101010111001;
    rom[2604] = 16'b0011101010111010;
    rom[2605] = 16'b0011101010111010;
    rom[2606] = 16'b0011101010111011;
    rom[2607] = 16'b0011101010111011;
    rom[2608] = 16'b0011101010111100;
    rom[2609] = 16'b0011101010111100;
    rom[2610] = 16'b0011101010111100;
    rom[2611] = 16'b0011101010111101;
    rom[2612] = 16'b0011101010111101;
    rom[2613] = 16'b0011101010111110;
    rom[2614] = 16'b0011101010111110;
    rom[2615] = 16'b0011101010111110;
    rom[2616] = 16'b0011101010111111;
    rom[2617] = 16'b0011101010111111;
    rom[2618] = 16'b0011101011000000;
    rom[2619] = 16'b0011101011000000;
    rom[2620] = 16'b0011101011000001;
    rom[2621] = 16'b0011101011000001;
    rom[2622] = 16'b0011101011000001;
    rom[2623] = 16'b0011101011000010;
    rom[2624] = 16'b0011101011000010;
    rom[2625] = 16'b0011101011000011;
    rom[2626] = 16'b0011101011000011;
    rom[2627] = 16'b0011101011000100;
    rom[2628] = 16'b0011101011000100;
    rom[2629] = 16'b0011101011000100;
    rom[2630] = 16'b0011101011000101;
    rom[2631] = 16'b0011101011000101;
    rom[2632] = 16'b0011101011000110;
    rom[2633] = 16'b0011101011000110;
    rom[2634] = 16'b0011101011000110;
    rom[2635] = 16'b0011101011000111;
    rom[2636] = 16'b0011101011000111;
    rom[2637] = 16'b0011101011001000;
    rom[2638] = 16'b0011101011001000;
    rom[2639] = 16'b0011101011001001;
    rom[2640] = 16'b0011101011001001;
    rom[2641] = 16'b0011101011001001;
    rom[2642] = 16'b0011101011001010;
    rom[2643] = 16'b0011101011001010;
    rom[2644] = 16'b0011101011001011;
    rom[2645] = 16'b0011101011001011;
    rom[2646] = 16'b0011101011001011;
    rom[2647] = 16'b0011101011001100;
    rom[2648] = 16'b0011101011001100;
    rom[2649] = 16'b0011101011001101;
    rom[2650] = 16'b0011101011001101;
    rom[2651] = 16'b0011101011001110;
    rom[2652] = 16'b0011101011001110;
    rom[2653] = 16'b0011101011001110;
    rom[2654] = 16'b0011101011001111;
    rom[2655] = 16'b0011101011001111;
    rom[2656] = 16'b0011101011010000;
    rom[2657] = 16'b0011101011010000;
    rom[2658] = 16'b0011101011010000;
    rom[2659] = 16'b0011101011010001;
    rom[2660] = 16'b0011101011010001;
    rom[2661] = 16'b0011101011010010;
    rom[2662] = 16'b0011101011010010;
    rom[2663] = 16'b0011101011010010;
    rom[2664] = 16'b0011101011010011;
    rom[2665] = 16'b0011101011010011;
    rom[2666] = 16'b0011101011010100;
    rom[2667] = 16'b0011101011010100;
    rom[2668] = 16'b0011101011010101;
    rom[2669] = 16'b0011101011010101;
    rom[2670] = 16'b0011101011010101;
    rom[2671] = 16'b0011101011010110;
    rom[2672] = 16'b0011101011010110;
    rom[2673] = 16'b0011101011010111;
    rom[2674] = 16'b0011101011010111;
    rom[2675] = 16'b0011101011010111;
    rom[2676] = 16'b0011101011011000;
    rom[2677] = 16'b0011101011011000;
    rom[2678] = 16'b0011101011011001;
    rom[2679] = 16'b0011101011011001;
    rom[2680] = 16'b0011101011011001;
    rom[2681] = 16'b0011101011011010;
    rom[2682] = 16'b0011101011011010;
    rom[2683] = 16'b0011101011011011;
    rom[2684] = 16'b0011101011011011;
    rom[2685] = 16'b0011101011011011;
    rom[2686] = 16'b0011101011011100;
    rom[2687] = 16'b0011101011011100;
    rom[2688] = 16'b0011101011011101;
    rom[2689] = 16'b0011101011011101;
    rom[2690] = 16'b0011101011011101;
    rom[2691] = 16'b0011101011011110;
    rom[2692] = 16'b0011101011011110;
    rom[2693] = 16'b0011101011011111;
    rom[2694] = 16'b0011101011011111;
    rom[2695] = 16'b0011101011011111;
    rom[2696] = 16'b0011101011100000;
    rom[2697] = 16'b0011101011100000;
    rom[2698] = 16'b0011101011100001;
    rom[2699] = 16'b0011101011100001;
    rom[2700] = 16'b0011101011100001;
    rom[2701] = 16'b0011101011100010;
    rom[2702] = 16'b0011101011100010;
    rom[2703] = 16'b0011101011100011;
    rom[2704] = 16'b0011101011100011;
    rom[2705] = 16'b0011101011100011;
    rom[2706] = 16'b0011101011100100;
    rom[2707] = 16'b0011101011100100;
    rom[2708] = 16'b0011101011100101;
    rom[2709] = 16'b0011101011100101;
    rom[2710] = 16'b0011101011100101;
    rom[2711] = 16'b0011101011100110;
    rom[2712] = 16'b0011101011100110;
    rom[2713] = 16'b0011101011100111;
    rom[2714] = 16'b0011101011100111;
    rom[2715] = 16'b0011101011100111;
    rom[2716] = 16'b0011101011101000;
    rom[2717] = 16'b0011101011101000;
    rom[2718] = 16'b0011101011101001;
    rom[2719] = 16'b0011101011101001;
    rom[2720] = 16'b0011101011101001;
    rom[2721] = 16'b0011101011101010;
    rom[2722] = 16'b0011101011101010;
    rom[2723] = 16'b0011101011101011;
    rom[2724] = 16'b0011101011101011;
    rom[2725] = 16'b0011101011101011;
    rom[2726] = 16'b0011101011101100;
    rom[2727] = 16'b0011101011101100;
    rom[2728] = 16'b0011101011101101;
    rom[2729] = 16'b0011101011101101;
    rom[2730] = 16'b0011101011101101;
    rom[2731] = 16'b0011101011101110;
    rom[2732] = 16'b0011101011101110;
    rom[2733] = 16'b0011101011101111;
    rom[2734] = 16'b0011101011101111;
    rom[2735] = 16'b0011101011101111;
    rom[2736] = 16'b0011101011110000;
    rom[2737] = 16'b0011101011110000;
    rom[2738] = 16'b0011101011110000;
    rom[2739] = 16'b0011101011110001;
    rom[2740] = 16'b0011101011110001;
    rom[2741] = 16'b0011101011110010;
    rom[2742] = 16'b0011101011110010;
    rom[2743] = 16'b0011101011110010;
    rom[2744] = 16'b0011101011110011;
    rom[2745] = 16'b0011101011110011;
    rom[2746] = 16'b0011101011110100;
    rom[2747] = 16'b0011101011110100;
    rom[2748] = 16'b0011101011110100;
    rom[2749] = 16'b0011101011110101;
    rom[2750] = 16'b0011101011110101;
    rom[2751] = 16'b0011101011110110;
    rom[2752] = 16'b0011101011110110;
    rom[2753] = 16'b0011101011110110;
    rom[2754] = 16'b0011101011110111;
    rom[2755] = 16'b0011101011110111;
    rom[2756] = 16'b0011101011110111;
    rom[2757] = 16'b0011101011111000;
    rom[2758] = 16'b0011101011111000;
    rom[2759] = 16'b0011101011111001;
    rom[2760] = 16'b0011101011111001;
    rom[2761] = 16'b0011101011111001;
    rom[2762] = 16'b0011101011111010;
    rom[2763] = 16'b0011101011111010;
    rom[2764] = 16'b0011101011111011;
    rom[2765] = 16'b0011101011111011;
    rom[2766] = 16'b0011101011111011;
    rom[2767] = 16'b0011101011111100;
    rom[2768] = 16'b0011101011111100;
    rom[2769] = 16'b0011101011111100;
    rom[2770] = 16'b0011101011111101;
    rom[2771] = 16'b0011101011111101;
    rom[2772] = 16'b0011101011111110;
    rom[2773] = 16'b0011101011111110;
    rom[2774] = 16'b0011101011111110;
    rom[2775] = 16'b0011101011111111;
    rom[2776] = 16'b0011101011111111;
    rom[2777] = 16'b0011101100000000;
    rom[2778] = 16'b0011101100000000;
    rom[2779] = 16'b0011101100000000;
    rom[2780] = 16'b0011101100000001;
    rom[2781] = 16'b0011101100000001;
    rom[2782] = 16'b0011101100000001;
    rom[2783] = 16'b0011101100000010;
    rom[2784] = 16'b0011101100000010;
    rom[2785] = 16'b0011101100000011;
    rom[2786] = 16'b0011101100000011;
    rom[2787] = 16'b0011101100000011;
    rom[2788] = 16'b0011101100000100;
    rom[2789] = 16'b0011101100000100;
    rom[2790] = 16'b0011101100000100;
    rom[2791] = 16'b0011101100000101;
    rom[2792] = 16'b0011101100000101;
    rom[2793] = 16'b0011101100000110;
    rom[2794] = 16'b0011101100000110;
    rom[2795] = 16'b0011101100000110;
    rom[2796] = 16'b0011101100000111;
    rom[2797] = 16'b0011101100000111;
    rom[2798] = 16'b0011101100000111;
    rom[2799] = 16'b0011101100001000;
    rom[2800] = 16'b0011101100001000;
    rom[2801] = 16'b0011101100001001;
    rom[2802] = 16'b0011101100001001;
    rom[2803] = 16'b0011101100001001;
    rom[2804] = 16'b0011101100001010;
    rom[2805] = 16'b0011101100001010;
    rom[2806] = 16'b0011101100001010;
    rom[2807] = 16'b0011101100001011;
    rom[2808] = 16'b0011101100001011;
    rom[2809] = 16'b0011101100001100;
    rom[2810] = 16'b0011101100001100;
    rom[2811] = 16'b0011101100001100;
    rom[2812] = 16'b0011101100001101;
    rom[2813] = 16'b0011101100001101;
    rom[2814] = 16'b0011101100001101;
    rom[2815] = 16'b0011101100001110;
    rom[2816] = 16'b0011101100001110;
    rom[2817] = 16'b0011101100001111;
    rom[2818] = 16'b0011101100001111;
    rom[2819] = 16'b0011101100001111;
    rom[2820] = 16'b0011101100010000;
    rom[2821] = 16'b0011101100010000;
    rom[2822] = 16'b0011101100010000;
    rom[2823] = 16'b0011101100010001;
    rom[2824] = 16'b0011101100010001;
    rom[2825] = 16'b0011101100010001;
    rom[2826] = 16'b0011101100010010;
    rom[2827] = 16'b0011101100010010;
    rom[2828] = 16'b0011101100010011;
    rom[2829] = 16'b0011101100010011;
    rom[2830] = 16'b0011101100010011;
    rom[2831] = 16'b0011101100010100;
    rom[2832] = 16'b0011101100010100;
    rom[2833] = 16'b0011101100010100;
    rom[2834] = 16'b0011101100010101;
    rom[2835] = 16'b0011101100010101;
    rom[2836] = 16'b0011101100010110;
    rom[2837] = 16'b0011101100010110;
    rom[2838] = 16'b0011101100010110;
    rom[2839] = 16'b0011101100010111;
    rom[2840] = 16'b0011101100010111;
    rom[2841] = 16'b0011101100010111;
    rom[2842] = 16'b0011101100011000;
    rom[2843] = 16'b0011101100011000;
    rom[2844] = 16'b0011101100011000;
    rom[2845] = 16'b0011101100011001;
    rom[2846] = 16'b0011101100011001;
    rom[2847] = 16'b0011101100011010;
    rom[2848] = 16'b0011101100011010;
    rom[2849] = 16'b0011101100011010;
    rom[2850] = 16'b0011101100011011;
    rom[2851] = 16'b0011101100011011;
    rom[2852] = 16'b0011101100011011;
    rom[2853] = 16'b0011101100011100;
    rom[2854] = 16'b0011101100011100;
    rom[2855] = 16'b0011101100011100;
    rom[2856] = 16'b0011101100011101;
    rom[2857] = 16'b0011101100011101;
    rom[2858] = 16'b0011101100011101;
    rom[2859] = 16'b0011101100011110;
    rom[2860] = 16'b0011101100011110;
    rom[2861] = 16'b0011101100011111;
    rom[2862] = 16'b0011101100011111;
    rom[2863] = 16'b0011101100011111;
    rom[2864] = 16'b0011101100100000;
    rom[2865] = 16'b0011101100100000;
    rom[2866] = 16'b0011101100100000;
    rom[2867] = 16'b0011101100100001;
    rom[2868] = 16'b0011101100100001;
    rom[2869] = 16'b0011101100100001;
    rom[2870] = 16'b0011101100100010;
    rom[2871] = 16'b0011101100100010;
    rom[2872] = 16'b0011101100100010;
    rom[2873] = 16'b0011101100100011;
    rom[2874] = 16'b0011101100100011;
    rom[2875] = 16'b0011101100100100;
    rom[2876] = 16'b0011101100100100;
    rom[2877] = 16'b0011101100100100;
    rom[2878] = 16'b0011101100100101;
    rom[2879] = 16'b0011101100100101;
    rom[2880] = 16'b0011101100100101;
    rom[2881] = 16'b0011101100100110;
    rom[2882] = 16'b0011101100100110;
    rom[2883] = 16'b0011101100100110;
    rom[2884] = 16'b0011101100100111;
    rom[2885] = 16'b0011101100100111;
    rom[2886] = 16'b0011101100100111;
    rom[2887] = 16'b0011101100101000;
    rom[2888] = 16'b0011101100101000;
    rom[2889] = 16'b0011101100101000;
    rom[2890] = 16'b0011101100101001;
    rom[2891] = 16'b0011101100101001;
    rom[2892] = 16'b0011101100101010;
    rom[2893] = 16'b0011101100101010;
    rom[2894] = 16'b0011101100101010;
    rom[2895] = 16'b0011101100101011;
    rom[2896] = 16'b0011101100101011;
    rom[2897] = 16'b0011101100101011;
    rom[2898] = 16'b0011101100101100;
    rom[2899] = 16'b0011101100101100;
    rom[2900] = 16'b0011101100101100;
    rom[2901] = 16'b0011101100101101;
    rom[2902] = 16'b0011101100101101;
    rom[2903] = 16'b0011101100101101;
    rom[2904] = 16'b0011101100101110;
    rom[2905] = 16'b0011101100101110;
    rom[2906] = 16'b0011101100101110;
    rom[2907] = 16'b0011101100101111;
    rom[2908] = 16'b0011101100101111;
    rom[2909] = 16'b0011101100101111;
    rom[2910] = 16'b0011101100110000;
    rom[2911] = 16'b0011101100110000;
    rom[2912] = 16'b0011101100110000;
    rom[2913] = 16'b0011101100110001;
    rom[2914] = 16'b0011101100110001;
    rom[2915] = 16'b0011101100110010;
    rom[2916] = 16'b0011101100110010;
    rom[2917] = 16'b0011101100110010;
    rom[2918] = 16'b0011101100110011;
    rom[2919] = 16'b0011101100110011;
    rom[2920] = 16'b0011101100110011;
    rom[2921] = 16'b0011101100110100;
    rom[2922] = 16'b0011101100110100;
    rom[2923] = 16'b0011101100110100;
    rom[2924] = 16'b0011101100110101;
    rom[2925] = 16'b0011101100110101;
    rom[2926] = 16'b0011101100110101;
    rom[2927] = 16'b0011101100110110;
    rom[2928] = 16'b0011101100110110;
    rom[2929] = 16'b0011101100110110;
    rom[2930] = 16'b0011101100110111;
    rom[2931] = 16'b0011101100110111;
    rom[2932] = 16'b0011101100110111;
    rom[2933] = 16'b0011101100111000;
    rom[2934] = 16'b0011101100111000;
    rom[2935] = 16'b0011101100111000;
    rom[2936] = 16'b0011101100111001;
    rom[2937] = 16'b0011101100111001;
    rom[2938] = 16'b0011101100111001;
    rom[2939] = 16'b0011101100111010;
    rom[2940] = 16'b0011101100111010;
    rom[2941] = 16'b0011101100111010;
    rom[2942] = 16'b0011101100111011;
    rom[2943] = 16'b0011101100111011;
    rom[2944] = 16'b0011101100111011;
    rom[2945] = 16'b0011101100111100;
    rom[2946] = 16'b0011101100111100;
    rom[2947] = 16'b0011101100111100;
    rom[2948] = 16'b0011101100111101;
    rom[2949] = 16'b0011101100111101;
    rom[2950] = 16'b0011101100111101;
    rom[2951] = 16'b0011101100111110;
    rom[2952] = 16'b0011101100111110;
    rom[2953] = 16'b0011101100111110;
    rom[2954] = 16'b0011101100111111;
    rom[2955] = 16'b0011101100111111;
    rom[2956] = 16'b0011101100111111;
    rom[2957] = 16'b0011101101000000;
    rom[2958] = 16'b0011101101000000;
    rom[2959] = 16'b0011101101000000;
    rom[2960] = 16'b0011101101000001;
    rom[2961] = 16'b0011101101000001;
    rom[2962] = 16'b0011101101000001;
    rom[2963] = 16'b0011101101000010;
    rom[2964] = 16'b0011101101000010;
    rom[2965] = 16'b0011101101000010;
    rom[2966] = 16'b0011101101000011;
    rom[2967] = 16'b0011101101000011;
    rom[2968] = 16'b0011101101000011;
    rom[2969] = 16'b0011101101000100;
    rom[2970] = 16'b0011101101000100;
    rom[2971] = 16'b0011101101000100;
    rom[2972] = 16'b0011101101000101;
    rom[2973] = 16'b0011101101000101;
    rom[2974] = 16'b0011101101000101;
    rom[2975] = 16'b0011101101000110;
    rom[2976] = 16'b0011101101000110;
    rom[2977] = 16'b0011101101000110;
    rom[2978] = 16'b0011101101000111;
    rom[2979] = 16'b0011101101000111;
    rom[2980] = 16'b0011101101000111;
    rom[2981] = 16'b0011101101001000;
    rom[2982] = 16'b0011101101001000;
    rom[2983] = 16'b0011101101001000;
    rom[2984] = 16'b0011101101001001;
    rom[2985] = 16'b0011101101001001;
    rom[2986] = 16'b0011101101001001;
    rom[2987] = 16'b0011101101001010;
    rom[2988] = 16'b0011101101001010;
    rom[2989] = 16'b0011101101001010;
    rom[2990] = 16'b0011101101001011;
    rom[2991] = 16'b0011101101001011;
    rom[2992] = 16'b0011101101001011;
    rom[2993] = 16'b0011101101001011;
    rom[2994] = 16'b0011101101001100;
    rom[2995] = 16'b0011101101001100;
    rom[2996] = 16'b0011101101001100;
    rom[2997] = 16'b0011101101001101;
    rom[2998] = 16'b0011101101001101;
    rom[2999] = 16'b0011101101001101;
    rom[3000] = 16'b0011101101001110;
    rom[3001] = 16'b0011101101001110;
    rom[3002] = 16'b0011101101001110;
    rom[3003] = 16'b0011101101001111;
    rom[3004] = 16'b0011101101001111;
    rom[3005] = 16'b0011101101001111;
    rom[3006] = 16'b0011101101010000;
    rom[3007] = 16'b0011101101010000;
    rom[3008] = 16'b0011101101010000;
    rom[3009] = 16'b0011101101010001;
    rom[3010] = 16'b0011101101010001;
    rom[3011] = 16'b0011101101010001;
    rom[3012] = 16'b0011101101010010;
    rom[3013] = 16'b0011101101010010;
    rom[3014] = 16'b0011101101010010;
    rom[3015] = 16'b0011101101010011;
    rom[3016] = 16'b0011101101010011;
    rom[3017] = 16'b0011101101010011;
    rom[3018] = 16'b0011101101010011;
    rom[3019] = 16'b0011101101010100;
    rom[3020] = 16'b0011101101010100;
    rom[3021] = 16'b0011101101010100;
    rom[3022] = 16'b0011101101010101;
    rom[3023] = 16'b0011101101010101;
    rom[3024] = 16'b0011101101010101;
    rom[3025] = 16'b0011101101010110;
    rom[3026] = 16'b0011101101010110;
    rom[3027] = 16'b0011101101010110;
    rom[3028] = 16'b0011101101010111;
    rom[3029] = 16'b0011101101010111;
    rom[3030] = 16'b0011101101010111;
    rom[3031] = 16'b0011101101011000;
    rom[3032] = 16'b0011101101011000;
    rom[3033] = 16'b0011101101011000;
    rom[3034] = 16'b0011101101011000;
    rom[3035] = 16'b0011101101011001;
    rom[3036] = 16'b0011101101011001;
    rom[3037] = 16'b0011101101011001;
    rom[3038] = 16'b0011101101011010;
    rom[3039] = 16'b0011101101011010;
    rom[3040] = 16'b0011101101011010;
    rom[3041] = 16'b0011101101011011;
    rom[3042] = 16'b0011101101011011;
    rom[3043] = 16'b0011101101011011;
    rom[3044] = 16'b0011101101011100;
    rom[3045] = 16'b0011101101011100;
    rom[3046] = 16'b0011101101011100;
    rom[3047] = 16'b0011101101011101;
    rom[3048] = 16'b0011101101011101;
    rom[3049] = 16'b0011101101011101;
    rom[3050] = 16'b0011101101011101;
    rom[3051] = 16'b0011101101011110;
    rom[3052] = 16'b0011101101011110;
    rom[3053] = 16'b0011101101011110;
    rom[3054] = 16'b0011101101011111;
    rom[3055] = 16'b0011101101011111;
    rom[3056] = 16'b0011101101011111;
    rom[3057] = 16'b0011101101100000;
    rom[3058] = 16'b0011101101100000;
    rom[3059] = 16'b0011101101100000;
    rom[3060] = 16'b0011101101100000;
    rom[3061] = 16'b0011101101100001;
    rom[3062] = 16'b0011101101100001;
    rom[3063] = 16'b0011101101100001;
    rom[3064] = 16'b0011101101100010;
    rom[3065] = 16'b0011101101100010;
    rom[3066] = 16'b0011101101100010;
    rom[3067] = 16'b0011101101100011;
    rom[3068] = 16'b0011101101100011;
    rom[3069] = 16'b0011101101100011;
    rom[3070] = 16'b0011101101100100;
    rom[3071] = 16'b0011101101100100;
    rom[3072] = 16'b0011101101100100;
    rom[3073] = 16'b0011101101100100;
    rom[3074] = 16'b0011101101100101;
    rom[3075] = 16'b0011101101100101;
    rom[3076] = 16'b0011101101100101;
    rom[3077] = 16'b0011101101100110;
    rom[3078] = 16'b0011101101100110;
    rom[3079] = 16'b0011101101100110;
    rom[3080] = 16'b0011101101100111;
    rom[3081] = 16'b0011101101100111;
    rom[3082] = 16'b0011101101100111;
    rom[3083] = 16'b0011101101100111;
    rom[3084] = 16'b0011101101101000;
    rom[3085] = 16'b0011101101101000;
    rom[3086] = 16'b0011101101101000;
    rom[3087] = 16'b0011101101101001;
    rom[3088] = 16'b0011101101101001;
    rom[3089] = 16'b0011101101101001;
    rom[3090] = 16'b0011101101101001;
    rom[3091] = 16'b0011101101101010;
    rom[3092] = 16'b0011101101101010;
    rom[3093] = 16'b0011101101101010;
    rom[3094] = 16'b0011101101101011;
    rom[3095] = 16'b0011101101101011;
    rom[3096] = 16'b0011101101101011;
    rom[3097] = 16'b0011101101101100;
    rom[3098] = 16'b0011101101101100;
    rom[3099] = 16'b0011101101101100;
    rom[3100] = 16'b0011101101101100;
    rom[3101] = 16'b0011101101101101;
    rom[3102] = 16'b0011101101101101;
    rom[3103] = 16'b0011101101101101;
    rom[3104] = 16'b0011101101101110;
    rom[3105] = 16'b0011101101101110;
    rom[3106] = 16'b0011101101101110;
    rom[3107] = 16'b0011101101101110;
    rom[3108] = 16'b0011101101101111;
    rom[3109] = 16'b0011101101101111;
    rom[3110] = 16'b0011101101101111;
    rom[3111] = 16'b0011101101110000;
    rom[3112] = 16'b0011101101110000;
    rom[3113] = 16'b0011101101110000;
    rom[3114] = 16'b0011101101110000;
    rom[3115] = 16'b0011101101110001;
    rom[3116] = 16'b0011101101110001;
    rom[3117] = 16'b0011101101110001;
    rom[3118] = 16'b0011101101110010;
    rom[3119] = 16'b0011101101110010;
    rom[3120] = 16'b0011101101110010;
    rom[3121] = 16'b0011101101110010;
    rom[3122] = 16'b0011101101110011;
    rom[3123] = 16'b0011101101110011;
    rom[3124] = 16'b0011101101110011;
    rom[3125] = 16'b0011101101110100;
    rom[3126] = 16'b0011101101110100;
    rom[3127] = 16'b0011101101110100;
    rom[3128] = 16'b0011101101110100;
    rom[3129] = 16'b0011101101110101;
    rom[3130] = 16'b0011101101110101;
    rom[3131] = 16'b0011101101110101;
    rom[3132] = 16'b0011101101110110;
    rom[3133] = 16'b0011101101110110;
    rom[3134] = 16'b0011101101110110;
    rom[3135] = 16'b0011101101110110;
    rom[3136] = 16'b0011101101110111;
    rom[3137] = 16'b0011101101110111;
    rom[3138] = 16'b0011101101110111;
    rom[3139] = 16'b0011101101111000;
    rom[3140] = 16'b0011101101111000;
    rom[3141] = 16'b0011101101111000;
    rom[3142] = 16'b0011101101111000;
    rom[3143] = 16'b0011101101111001;
    rom[3144] = 16'b0011101101111001;
    rom[3145] = 16'b0011101101111001;
    rom[3146] = 16'b0011101101111010;
    rom[3147] = 16'b0011101101111010;
    rom[3148] = 16'b0011101101111010;
    rom[3149] = 16'b0011101101111010;
    rom[3150] = 16'b0011101101111011;
    rom[3151] = 16'b0011101101111011;
    rom[3152] = 16'b0011101101111011;
    rom[3153] = 16'b0011101101111100;
    rom[3154] = 16'b0011101101111100;
    rom[3155] = 16'b0011101101111100;
    rom[3156] = 16'b0011101101111100;
    rom[3157] = 16'b0011101101111101;
    rom[3158] = 16'b0011101101111101;
    rom[3159] = 16'b0011101101111101;
    rom[3160] = 16'b0011101101111101;
    rom[3161] = 16'b0011101101111110;
    rom[3162] = 16'b0011101101111110;
    rom[3163] = 16'b0011101101111110;
    rom[3164] = 16'b0011101101111111;
    rom[3165] = 16'b0011101101111111;
    rom[3166] = 16'b0011101101111111;
    rom[3167] = 16'b0011101101111111;
    rom[3168] = 16'b0011101110000000;
    rom[3169] = 16'b0011101110000000;
    rom[3170] = 16'b0011101110000000;
    rom[3171] = 16'b0011101110000000;
    rom[3172] = 16'b0011101110000001;
    rom[3173] = 16'b0011101110000001;
    rom[3174] = 16'b0011101110000001;
    rom[3175] = 16'b0011101110000010;
    rom[3176] = 16'b0011101110000010;
    rom[3177] = 16'b0011101110000010;
    rom[3178] = 16'b0011101110000010;
    rom[3179] = 16'b0011101110000011;
    rom[3180] = 16'b0011101110000011;
    rom[3181] = 16'b0011101110000011;
    rom[3182] = 16'b0011101110000011;
    rom[3183] = 16'b0011101110000100;
    rom[3184] = 16'b0011101110000100;
    rom[3185] = 16'b0011101110000100;
    rom[3186] = 16'b0011101110000101;
    rom[3187] = 16'b0011101110000101;
    rom[3188] = 16'b0011101110000101;
    rom[3189] = 16'b0011101110000101;
    rom[3190] = 16'b0011101110000110;
    rom[3191] = 16'b0011101110000110;
    rom[3192] = 16'b0011101110000110;
    rom[3193] = 16'b0011101110000110;
    rom[3194] = 16'b0011101110000111;
    rom[3195] = 16'b0011101110000111;
    rom[3196] = 16'b0011101110000111;
    rom[3197] = 16'b0011101110000111;
    rom[3198] = 16'b0011101110001000;
    rom[3199] = 16'b0011101110001000;
    rom[3200] = 16'b0011101110001000;
    rom[3201] = 16'b0011101110001001;
    rom[3202] = 16'b0011101110001001;
    rom[3203] = 16'b0011101110001001;
    rom[3204] = 16'b0011101110001001;
    rom[3205] = 16'b0011101110001010;
    rom[3206] = 16'b0011101110001010;
    rom[3207] = 16'b0011101110001010;
    rom[3208] = 16'b0011101110001010;
    rom[3209] = 16'b0011101110001011;
    rom[3210] = 16'b0011101110001011;
    rom[3211] = 16'b0011101110001011;
    rom[3212] = 16'b0011101110001011;
    rom[3213] = 16'b0011101110001100;
    rom[3214] = 16'b0011101110001100;
    rom[3215] = 16'b0011101110001100;
    rom[3216] = 16'b0011101110001100;
    rom[3217] = 16'b0011101110001101;
    rom[3218] = 16'b0011101110001101;
    rom[3219] = 16'b0011101110001101;
    rom[3220] = 16'b0011101110001110;
    rom[3221] = 16'b0011101110001110;
    rom[3222] = 16'b0011101110001110;
    rom[3223] = 16'b0011101110001110;
    rom[3224] = 16'b0011101110001111;
    rom[3225] = 16'b0011101110001111;
    rom[3226] = 16'b0011101110001111;
    rom[3227] = 16'b0011101110001111;
    rom[3228] = 16'b0011101110010000;
    rom[3229] = 16'b0011101110010000;
    rom[3230] = 16'b0011101110010000;
    rom[3231] = 16'b0011101110010000;
    rom[3232] = 16'b0011101110010001;
    rom[3233] = 16'b0011101110010001;
    rom[3234] = 16'b0011101110010001;
    rom[3235] = 16'b0011101110010001;
    rom[3236] = 16'b0011101110010010;
    rom[3237] = 16'b0011101110010010;
    rom[3238] = 16'b0011101110010010;
    rom[3239] = 16'b0011101110010010;
    rom[3240] = 16'b0011101110010011;
    rom[3241] = 16'b0011101110010011;
    rom[3242] = 16'b0011101110010011;
    rom[3243] = 16'b0011101110010011;
    rom[3244] = 16'b0011101110010100;
    rom[3245] = 16'b0011101110010100;
    rom[3246] = 16'b0011101110010100;
    rom[3247] = 16'b0011101110010100;
    rom[3248] = 16'b0011101110010101;
    rom[3249] = 16'b0011101110010101;
    rom[3250] = 16'b0011101110010101;
    rom[3251] = 16'b0011101110010101;
    rom[3252] = 16'b0011101110010110;
    rom[3253] = 16'b0011101110010110;
    rom[3254] = 16'b0011101110010110;
    rom[3255] = 16'b0011101110010110;
    rom[3256] = 16'b0011101110010111;
    rom[3257] = 16'b0011101110010111;
    rom[3258] = 16'b0011101110010111;
    rom[3259] = 16'b0011101110010111;
    rom[3260] = 16'b0011101110011000;
    rom[3261] = 16'b0011101110011000;
    rom[3262] = 16'b0011101110011000;
    rom[3263] = 16'b0011101110011000;
    rom[3264] = 16'b0011101110011001;
    rom[3265] = 16'b0011101110011001;
    rom[3266] = 16'b0011101110011001;
    rom[3267] = 16'b0011101110011001;
    rom[3268] = 16'b0011101110011010;
    rom[3269] = 16'b0011101110011010;
    rom[3270] = 16'b0011101110011010;
    rom[3271] = 16'b0011101110011010;
    rom[3272] = 16'b0011101110011011;
    rom[3273] = 16'b0011101110011011;
    rom[3274] = 16'b0011101110011011;
    rom[3275] = 16'b0011101110011011;
    rom[3276] = 16'b0011101110011100;
    rom[3277] = 16'b0011101110011100;
    rom[3278] = 16'b0011101110011100;
    rom[3279] = 16'b0011101110011100;
    rom[3280] = 16'b0011101110011101;
    rom[3281] = 16'b0011101110011101;
    rom[3282] = 16'b0011101110011101;
    rom[3283] = 16'b0011101110011101;
    rom[3284] = 16'b0011101110011110;
    rom[3285] = 16'b0011101110011110;
    rom[3286] = 16'b0011101110011110;
    rom[3287] = 16'b0011101110011110;
    rom[3288] = 16'b0011101110011110;
    rom[3289] = 16'b0011101110011111;
    rom[3290] = 16'b0011101110011111;
    rom[3291] = 16'b0011101110011111;
    rom[3292] = 16'b0011101110011111;
    rom[3293] = 16'b0011101110100000;
    rom[3294] = 16'b0011101110100000;
    rom[3295] = 16'b0011101110100000;
    rom[3296] = 16'b0011101110100000;
    rom[3297] = 16'b0011101110100001;
    rom[3298] = 16'b0011101110100001;
    rom[3299] = 16'b0011101110100001;
    rom[3300] = 16'b0011101110100001;
    rom[3301] = 16'b0011101110100010;
    rom[3302] = 16'b0011101110100010;
    rom[3303] = 16'b0011101110100010;
    rom[3304] = 16'b0011101110100010;
    rom[3305] = 16'b0011101110100010;
    rom[3306] = 16'b0011101110100011;
    rom[3307] = 16'b0011101110100011;
    rom[3308] = 16'b0011101110100011;
    rom[3309] = 16'b0011101110100011;
    rom[3310] = 16'b0011101110100100;
    rom[3311] = 16'b0011101110100100;
    rom[3312] = 16'b0011101110100100;
    rom[3313] = 16'b0011101110100100;
    rom[3314] = 16'b0011101110100101;
    rom[3315] = 16'b0011101110100101;
    rom[3316] = 16'b0011101110100101;
    rom[3317] = 16'b0011101110100101;
    rom[3318] = 16'b0011101110100110;
    rom[3319] = 16'b0011101110100110;
    rom[3320] = 16'b0011101110100110;
    rom[3321] = 16'b0011101110100110;
    rom[3322] = 16'b0011101110100110;
    rom[3323] = 16'b0011101110100111;
    rom[3324] = 16'b0011101110100111;
    rom[3325] = 16'b0011101110100111;
    rom[3326] = 16'b0011101110100111;
    rom[3327] = 16'b0011101110101000;
    rom[3328] = 16'b0011101110101000;
    rom[3329] = 16'b0011101110101000;
    rom[3330] = 16'b0011101110101000;
    rom[3331] = 16'b0011101110101000;
    rom[3332] = 16'b0011101110101001;
    rom[3333] = 16'b0011101110101001;
    rom[3334] = 16'b0011101110101001;
    rom[3335] = 16'b0011101110101001;
    rom[3336] = 16'b0011101110101010;
    rom[3337] = 16'b0011101110101010;
    rom[3338] = 16'b0011101110101010;
    rom[3339] = 16'b0011101110101010;
    rom[3340] = 16'b0011101110101011;
    rom[3341] = 16'b0011101110101011;
    rom[3342] = 16'b0011101110101011;
    rom[3343] = 16'b0011101110101011;
    rom[3344] = 16'b0011101110101011;
    rom[3345] = 16'b0011101110101100;
    rom[3346] = 16'b0011101110101100;
    rom[3347] = 16'b0011101110101100;
    rom[3348] = 16'b0011101110101100;
    rom[3349] = 16'b0011101110101101;
    rom[3350] = 16'b0011101110101101;
    rom[3351] = 16'b0011101110101101;
    rom[3352] = 16'b0011101110101101;
    rom[3353] = 16'b0011101110101101;
    rom[3354] = 16'b0011101110101110;
    rom[3355] = 16'b0011101110101110;
    rom[3356] = 16'b0011101110101110;
    rom[3357] = 16'b0011101110101110;
    rom[3358] = 16'b0011101110101111;
    rom[3359] = 16'b0011101110101111;
    rom[3360] = 16'b0011101110101111;
    rom[3361] = 16'b0011101110101111;
    rom[3362] = 16'b0011101110101111;
    rom[3363] = 16'b0011101110110000;
    rom[3364] = 16'b0011101110110000;
    rom[3365] = 16'b0011101110110000;
    rom[3366] = 16'b0011101110110000;
    rom[3367] = 16'b0011101110110000;
    rom[3368] = 16'b0011101110110001;
    rom[3369] = 16'b0011101110110001;
    rom[3370] = 16'b0011101110110001;
    rom[3371] = 16'b0011101110110001;
    rom[3372] = 16'b0011101110110010;
    rom[3373] = 16'b0011101110110010;
    rom[3374] = 16'b0011101110110010;
    rom[3375] = 16'b0011101110110010;
    rom[3376] = 16'b0011101110110010;
    rom[3377] = 16'b0011101110110011;
    rom[3378] = 16'b0011101110110011;
    rom[3379] = 16'b0011101110110011;
    rom[3380] = 16'b0011101110110011;
    rom[3381] = 16'b0011101110110011;
    rom[3382] = 16'b0011101110110100;
    rom[3383] = 16'b0011101110110100;
    rom[3384] = 16'b0011101110110100;
    rom[3385] = 16'b0011101110110100;
    rom[3386] = 16'b0011101110110101;
    rom[3387] = 16'b0011101110110101;
    rom[3388] = 16'b0011101110110101;
    rom[3389] = 16'b0011101110110101;
    rom[3390] = 16'b0011101110110101;
    rom[3391] = 16'b0011101110110110;
    rom[3392] = 16'b0011101110110110;
    rom[3393] = 16'b0011101110110110;
    rom[3394] = 16'b0011101110110110;
    rom[3395] = 16'b0011101110110110;
    rom[3396] = 16'b0011101110110111;
    rom[3397] = 16'b0011101110110111;
    rom[3398] = 16'b0011101110110111;
    rom[3399] = 16'b0011101110110111;
    rom[3400] = 16'b0011101110110111;
    rom[3401] = 16'b0011101110111000;
    rom[3402] = 16'b0011101110111000;
    rom[3403] = 16'b0011101110111000;
    rom[3404] = 16'b0011101110111000;
    rom[3405] = 16'b0011101110111001;
    rom[3406] = 16'b0011101110111001;
    rom[3407] = 16'b0011101110111001;
    rom[3408] = 16'b0011101110111001;
    rom[3409] = 16'b0011101110111001;
    rom[3410] = 16'b0011101110111010;
    rom[3411] = 16'b0011101110111010;
    rom[3412] = 16'b0011101110111010;
    rom[3413] = 16'b0011101110111010;
    rom[3414] = 16'b0011101110111010;
    rom[3415] = 16'b0011101110111011;
    rom[3416] = 16'b0011101110111011;
    rom[3417] = 16'b0011101110111011;
    rom[3418] = 16'b0011101110111011;
    rom[3419] = 16'b0011101110111011;
    rom[3420] = 16'b0011101110111100;
    rom[3421] = 16'b0011101110111100;
    rom[3422] = 16'b0011101110111100;
    rom[3423] = 16'b0011101110111100;
    rom[3424] = 16'b0011101110111100;
    rom[3425] = 16'b0011101110111101;
    rom[3426] = 16'b0011101110111101;
    rom[3427] = 16'b0011101110111101;
    rom[3428] = 16'b0011101110111101;
    rom[3429] = 16'b0011101110111101;
    rom[3430] = 16'b0011101110111110;
    rom[3431] = 16'b0011101110111110;
    rom[3432] = 16'b0011101110111110;
    rom[3433] = 16'b0011101110111110;
    rom[3434] = 16'b0011101110111110;
    rom[3435] = 16'b0011101110111111;
    rom[3436] = 16'b0011101110111111;
    rom[3437] = 16'b0011101110111111;
    rom[3438] = 16'b0011101110111111;
    rom[3439] = 16'b0011101110111111;
    rom[3440] = 16'b0011101111000000;
    rom[3441] = 16'b0011101111000000;
    rom[3442] = 16'b0011101111000000;
    rom[3443] = 16'b0011101111000000;
    rom[3444] = 16'b0011101111000000;
    rom[3445] = 16'b0011101111000001;
    rom[3446] = 16'b0011101111000001;
    rom[3447] = 16'b0011101111000001;
    rom[3448] = 16'b0011101111000001;
    rom[3449] = 16'b0011101111000001;
    rom[3450] = 16'b0011101111000001;
    rom[3451] = 16'b0011101111000010;
    rom[3452] = 16'b0011101111000010;
    rom[3453] = 16'b0011101111000010;
    rom[3454] = 16'b0011101111000010;
    rom[3455] = 16'b0011101111000010;
    rom[3456] = 16'b0011101111000011;
    rom[3457] = 16'b0011101111000011;
    rom[3458] = 16'b0011101111000011;
    rom[3459] = 16'b0011101111000011;
    rom[3460] = 16'b0011101111000011;
    rom[3461] = 16'b0011101111000100;
    rom[3462] = 16'b0011101111000100;
    rom[3463] = 16'b0011101111000100;
    rom[3464] = 16'b0011101111000100;
    rom[3465] = 16'b0011101111000100;
    rom[3466] = 16'b0011101111000101;
    rom[3467] = 16'b0011101111000101;
    rom[3468] = 16'b0011101111000101;
    rom[3469] = 16'b0011101111000101;
    rom[3470] = 16'b0011101111000101;
    rom[3471] = 16'b0011101111000101;
    rom[3472] = 16'b0011101111000110;
    rom[3473] = 16'b0011101111000110;
    rom[3474] = 16'b0011101111000110;
    rom[3475] = 16'b0011101111000110;
    rom[3476] = 16'b0011101111000110;
    rom[3477] = 16'b0011101111000111;
    rom[3478] = 16'b0011101111000111;
    rom[3479] = 16'b0011101111000111;
    rom[3480] = 16'b0011101111000111;
    rom[3481] = 16'b0011101111000111;
    rom[3482] = 16'b0011101111000111;
    rom[3483] = 16'b0011101111001000;
    rom[3484] = 16'b0011101111001000;
    rom[3485] = 16'b0011101111001000;
    rom[3486] = 16'b0011101111001000;
    rom[3487] = 16'b0011101111001000;
    rom[3488] = 16'b0011101111001001;
    rom[3489] = 16'b0011101111001001;
    rom[3490] = 16'b0011101111001001;
    rom[3491] = 16'b0011101111001001;
    rom[3492] = 16'b0011101111001001;
    rom[3493] = 16'b0011101111001001;
    rom[3494] = 16'b0011101111001010;
    rom[3495] = 16'b0011101111001010;
    rom[3496] = 16'b0011101111001010;
    rom[3497] = 16'b0011101111001010;
    rom[3498] = 16'b0011101111001010;
    rom[3499] = 16'b0011101111001011;
    rom[3500] = 16'b0011101111001011;
    rom[3501] = 16'b0011101111001011;
    rom[3502] = 16'b0011101111001011;
    rom[3503] = 16'b0011101111001011;
    rom[3504] = 16'b0011101111001011;
    rom[3505] = 16'b0011101111001100;
    rom[3506] = 16'b0011101111001100;
    rom[3507] = 16'b0011101111001100;
    rom[3508] = 16'b0011101111001100;
    rom[3509] = 16'b0011101111001100;
    rom[3510] = 16'b0011101111001101;
    rom[3511] = 16'b0011101111001101;
    rom[3512] = 16'b0011101111001101;
    rom[3513] = 16'b0011101111001101;
    rom[3514] = 16'b0011101111001101;
    rom[3515] = 16'b0011101111001101;
    rom[3516] = 16'b0011101111001110;
    rom[3517] = 16'b0011101111001110;
    rom[3518] = 16'b0011101111001110;
    rom[3519] = 16'b0011101111001110;
    rom[3520] = 16'b0011101111001110;
    rom[3521] = 16'b0011101111001110;
    rom[3522] = 16'b0011101111001111;
    rom[3523] = 16'b0011101111001111;
    rom[3524] = 16'b0011101111001111;
    rom[3525] = 16'b0011101111001111;
    rom[3526] = 16'b0011101111001111;
    rom[3527] = 16'b0011101111001111;
    rom[3528] = 16'b0011101111010000;
    rom[3529] = 16'b0011101111010000;
    rom[3530] = 16'b0011101111010000;
    rom[3531] = 16'b0011101111010000;
    rom[3532] = 16'b0011101111010000;
    rom[3533] = 16'b0011101111010000;
    rom[3534] = 16'b0011101111010001;
    rom[3535] = 16'b0011101111010001;
    rom[3536] = 16'b0011101111010001;
    rom[3537] = 16'b0011101111010001;
    rom[3538] = 16'b0011101111010001;
    rom[3539] = 16'b0011101111010001;
    rom[3540] = 16'b0011101111010010;
    rom[3541] = 16'b0011101111010010;
    rom[3542] = 16'b0011101111010010;
    rom[3543] = 16'b0011101111010010;
    rom[3544] = 16'b0011101111010010;
    rom[3545] = 16'b0011101111010010;
    rom[3546] = 16'b0011101111010011;
    rom[3547] = 16'b0011101111010011;
    rom[3548] = 16'b0011101111010011;
    rom[3549] = 16'b0011101111010011;
    rom[3550] = 16'b0011101111010011;
    rom[3551] = 16'b0011101111010011;
    rom[3552] = 16'b0011101111010100;
    rom[3553] = 16'b0011101111010100;
    rom[3554] = 16'b0011101111010100;
    rom[3555] = 16'b0011101111010100;
    rom[3556] = 16'b0011101111010100;
    rom[3557] = 16'b0011101111010100;
    rom[3558] = 16'b0011101111010101;
    rom[3559] = 16'b0011101111010101;
    rom[3560] = 16'b0011101111010101;
    rom[3561] = 16'b0011101111010101;
    rom[3562] = 16'b0011101111010101;
    rom[3563] = 16'b0011101111010101;
    rom[3564] = 16'b0011101111010110;
    rom[3565] = 16'b0011101111010110;
    rom[3566] = 16'b0011101111010110;
    rom[3567] = 16'b0011101111010110;
    rom[3568] = 16'b0011101111010110;
    rom[3569] = 16'b0011101111010110;
    rom[3570] = 16'b0011101111010110;
    rom[3571] = 16'b0011101111010111;
    rom[3572] = 16'b0011101111010111;
    rom[3573] = 16'b0011101111010111;
    rom[3574] = 16'b0011101111010111;
    rom[3575] = 16'b0011101111010111;
    rom[3576] = 16'b0011101111010111;
    rom[3577] = 16'b0011101111011000;
    rom[3578] = 16'b0011101111011000;
    rom[3579] = 16'b0011101111011000;
    rom[3580] = 16'b0011101111011000;
    rom[3581] = 16'b0011101111011000;
    rom[3582] = 16'b0011101111011000;
    rom[3583] = 16'b0011101111011000;
    rom[3584] = 16'b0011101111011001;
    rom[3585] = 16'b0011101111011001;
    rom[3586] = 16'b0011101111011001;
    rom[3587] = 16'b0011101111011001;
    rom[3588] = 16'b0011101111011001;
    rom[3589] = 16'b0011101111011001;
    rom[3590] = 16'b0011101111011010;
    rom[3591] = 16'b0011101111011010;
    rom[3592] = 16'b0011101111011010;
    rom[3593] = 16'b0011101111011010;
    rom[3594] = 16'b0011101111011010;
    rom[3595] = 16'b0011101111011010;
    rom[3596] = 16'b0011101111011010;
    rom[3597] = 16'b0011101111011011;
    rom[3598] = 16'b0011101111011011;
    rom[3599] = 16'b0011101111011011;
    rom[3600] = 16'b0011101111011011;
    rom[3601] = 16'b0011101111011011;
    rom[3602] = 16'b0011101111011011;
    rom[3603] = 16'b0011101111011100;
    rom[3604] = 16'b0011101111011100;
    rom[3605] = 16'b0011101111011100;
    rom[3606] = 16'b0011101111011100;
    rom[3607] = 16'b0011101111011100;
    rom[3608] = 16'b0011101111011100;
    rom[3609] = 16'b0011101111011100;
    rom[3610] = 16'b0011101111011101;
    rom[3611] = 16'b0011101111011101;
    rom[3612] = 16'b0011101111011101;
    rom[3613] = 16'b0011101111011101;
    rom[3614] = 16'b0011101111011101;
    rom[3615] = 16'b0011101111011101;
    rom[3616] = 16'b0011101111011101;
    rom[3617] = 16'b0011101111011110;
    rom[3618] = 16'b0011101111011110;
    rom[3619] = 16'b0011101111011110;
    rom[3620] = 16'b0011101111011110;
    rom[3621] = 16'b0011101111011110;
    rom[3622] = 16'b0011101111011110;
    rom[3623] = 16'b0011101111011110;
    rom[3624] = 16'b0011101111011111;
    rom[3625] = 16'b0011101111011111;
    rom[3626] = 16'b0011101111011111;
    rom[3627] = 16'b0011101111011111;
    rom[3628] = 16'b0011101111011111;
    rom[3629] = 16'b0011101111011111;
    rom[3630] = 16'b0011101111011111;
    rom[3631] = 16'b0011101111100000;
    rom[3632] = 16'b0011101111100000;
    rom[3633] = 16'b0011101111100000;
    rom[3634] = 16'b0011101111100000;
    rom[3635] = 16'b0011101111100000;
    rom[3636] = 16'b0011101111100000;
    rom[3637] = 16'b0011101111100000;
    rom[3638] = 16'b0011101111100000;
    rom[3639] = 16'b0011101111100001;
    rom[3640] = 16'b0011101111100001;
    rom[3641] = 16'b0011101111100001;
    rom[3642] = 16'b0011101111100001;
    rom[3643] = 16'b0011101111100001;
    rom[3644] = 16'b0011101111100001;
    rom[3645] = 16'b0011101111100001;
    rom[3646] = 16'b0011101111100010;
    rom[3647] = 16'b0011101111100010;
    rom[3648] = 16'b0011101111100010;
    rom[3649] = 16'b0011101111100010;
    rom[3650] = 16'b0011101111100010;
    rom[3651] = 16'b0011101111100010;
    rom[3652] = 16'b0011101111100010;
    rom[3653] = 16'b0011101111100011;
    rom[3654] = 16'b0011101111100011;
    rom[3655] = 16'b0011101111100011;
    rom[3656] = 16'b0011101111100011;
    rom[3657] = 16'b0011101111100011;
    rom[3658] = 16'b0011101111100011;
    rom[3659] = 16'b0011101111100011;
    rom[3660] = 16'b0011101111100011;
    rom[3661] = 16'b0011101111100100;
    rom[3662] = 16'b0011101111100100;
    rom[3663] = 16'b0011101111100100;
    rom[3664] = 16'b0011101111100100;
    rom[3665] = 16'b0011101111100100;
    rom[3666] = 16'b0011101111100100;
    rom[3667] = 16'b0011101111100100;
    rom[3668] = 16'b0011101111100100;
    rom[3669] = 16'b0011101111100101;
    rom[3670] = 16'b0011101111100101;
    rom[3671] = 16'b0011101111100101;
    rom[3672] = 16'b0011101111100101;
    rom[3673] = 16'b0011101111100101;
    rom[3674] = 16'b0011101111100101;
    rom[3675] = 16'b0011101111100101;
    rom[3676] = 16'b0011101111100101;
    rom[3677] = 16'b0011101111100110;
    rom[3678] = 16'b0011101111100110;
    rom[3679] = 16'b0011101111100110;
    rom[3680] = 16'b0011101111100110;
    rom[3681] = 16'b0011101111100110;
    rom[3682] = 16'b0011101111100110;
    rom[3683] = 16'b0011101111100110;
    rom[3684] = 16'b0011101111100110;
    rom[3685] = 16'b0011101111100111;
    rom[3686] = 16'b0011101111100111;
    rom[3687] = 16'b0011101111100111;
    rom[3688] = 16'b0011101111100111;
    rom[3689] = 16'b0011101111100111;
    rom[3690] = 16'b0011101111100111;
    rom[3691] = 16'b0011101111100111;
    rom[3692] = 16'b0011101111100111;
    rom[3693] = 16'b0011101111101000;
    rom[3694] = 16'b0011101111101000;
    rom[3695] = 16'b0011101111101000;
    rom[3696] = 16'b0011101111101000;
    rom[3697] = 16'b0011101111101000;
    rom[3698] = 16'b0011101111101000;
    rom[3699] = 16'b0011101111101000;
    rom[3700] = 16'b0011101111101000;
    rom[3701] = 16'b0011101111101001;
    rom[3702] = 16'b0011101111101001;
    rom[3703] = 16'b0011101111101001;
    rom[3704] = 16'b0011101111101001;
    rom[3705] = 16'b0011101111101001;
    rom[3706] = 16'b0011101111101001;
    rom[3707] = 16'b0011101111101001;
    rom[3708] = 16'b0011101111101001;
    rom[3709] = 16'b0011101111101001;
    rom[3710] = 16'b0011101111101010;
    rom[3711] = 16'b0011101111101010;
    rom[3712] = 16'b0011101111101010;
    rom[3713] = 16'b0011101111101010;
    rom[3714] = 16'b0011101111101010;
    rom[3715] = 16'b0011101111101010;
    rom[3716] = 16'b0011101111101010;
    rom[3717] = 16'b0011101111101010;
    rom[3718] = 16'b0011101111101011;
    rom[3719] = 16'b0011101111101011;
    rom[3720] = 16'b0011101111101011;
    rom[3721] = 16'b0011101111101011;
    rom[3722] = 16'b0011101111101011;
    rom[3723] = 16'b0011101111101011;
    rom[3724] = 16'b0011101111101011;
    rom[3725] = 16'b0011101111101011;
    rom[3726] = 16'b0011101111101011;
    rom[3727] = 16'b0011101111101100;
    rom[3728] = 16'b0011101111101100;
    rom[3729] = 16'b0011101111101100;
    rom[3730] = 16'b0011101111101100;
    rom[3731] = 16'b0011101111101100;
    rom[3732] = 16'b0011101111101100;
    rom[3733] = 16'b0011101111101100;
    rom[3734] = 16'b0011101111101100;
    rom[3735] = 16'b0011101111101100;
    rom[3736] = 16'b0011101111101101;
    rom[3737] = 16'b0011101111101101;
    rom[3738] = 16'b0011101111101101;
    rom[3739] = 16'b0011101111101101;
    rom[3740] = 16'b0011101111101101;
    rom[3741] = 16'b0011101111101101;
    rom[3742] = 16'b0011101111101101;
    rom[3743] = 16'b0011101111101101;
    rom[3744] = 16'b0011101111101101;
    rom[3745] = 16'b0011101111101101;
    rom[3746] = 16'b0011101111101110;
    rom[3747] = 16'b0011101111101110;
    rom[3748] = 16'b0011101111101110;
    rom[3749] = 16'b0011101111101110;
    rom[3750] = 16'b0011101111101110;
    rom[3751] = 16'b0011101111101110;
    rom[3752] = 16'b0011101111101110;
    rom[3753] = 16'b0011101111101110;
    rom[3754] = 16'b0011101111101110;
    rom[3755] = 16'b0011101111101111;
    rom[3756] = 16'b0011101111101111;
    rom[3757] = 16'b0011101111101111;
    rom[3758] = 16'b0011101111101111;
    rom[3759] = 16'b0011101111101111;
    rom[3760] = 16'b0011101111101111;
    rom[3761] = 16'b0011101111101111;
    rom[3762] = 16'b0011101111101111;
    rom[3763] = 16'b0011101111101111;
    rom[3764] = 16'b0011101111101111;
    rom[3765] = 16'b0011101111110000;
    rom[3766] = 16'b0011101111110000;
    rom[3767] = 16'b0011101111110000;
    rom[3768] = 16'b0011101111110000;
    rom[3769] = 16'b0011101111110000;
    rom[3770] = 16'b0011101111110000;
    rom[3771] = 16'b0011101111110000;
    rom[3772] = 16'b0011101111110000;
    rom[3773] = 16'b0011101111110000;
    rom[3774] = 16'b0011101111110000;
    rom[3775] = 16'b0011101111110001;
    rom[3776] = 16'b0011101111110001;
    rom[3777] = 16'b0011101111110001;
    rom[3778] = 16'b0011101111110001;
    rom[3779] = 16'b0011101111110001;
    rom[3780] = 16'b0011101111110001;
    rom[3781] = 16'b0011101111110001;
    rom[3782] = 16'b0011101111110001;
    rom[3783] = 16'b0011101111110001;
    rom[3784] = 16'b0011101111110001;
    rom[3785] = 16'b0011101111110001;
    rom[3786] = 16'b0011101111110010;
    rom[3787] = 16'b0011101111110010;
    rom[3788] = 16'b0011101111110010;
    rom[3789] = 16'b0011101111110010;
    rom[3790] = 16'b0011101111110010;
    rom[3791] = 16'b0011101111110010;
    rom[3792] = 16'b0011101111110010;
    rom[3793] = 16'b0011101111110010;
    rom[3794] = 16'b0011101111110010;
    rom[3795] = 16'b0011101111110010;
    rom[3796] = 16'b0011101111110010;
    rom[3797] = 16'b0011101111110011;
    rom[3798] = 16'b0011101111110011;
    rom[3799] = 16'b0011101111110011;
    rom[3800] = 16'b0011101111110011;
    rom[3801] = 16'b0011101111110011;
    rom[3802] = 16'b0011101111110011;
    rom[3803] = 16'b0011101111110011;
    rom[3804] = 16'b0011101111110011;
    rom[3805] = 16'b0011101111110011;
    rom[3806] = 16'b0011101111110011;
    rom[3807] = 16'b0011101111110011;
    rom[3808] = 16'b0011101111110100;
    rom[3809] = 16'b0011101111110100;
    rom[3810] = 16'b0011101111110100;
    rom[3811] = 16'b0011101111110100;
    rom[3812] = 16'b0011101111110100;
    rom[3813] = 16'b0011101111110100;
    rom[3814] = 16'b0011101111110100;
    rom[3815] = 16'b0011101111110100;
    rom[3816] = 16'b0011101111110100;
    rom[3817] = 16'b0011101111110100;
    rom[3818] = 16'b0011101111110100;
    rom[3819] = 16'b0011101111110100;
    rom[3820] = 16'b0011101111110101;
    rom[3821] = 16'b0011101111110101;
    rom[3822] = 16'b0011101111110101;
    rom[3823] = 16'b0011101111110101;
    rom[3824] = 16'b0011101111110101;
    rom[3825] = 16'b0011101111110101;
    rom[3826] = 16'b0011101111110101;
    rom[3827] = 16'b0011101111110101;
    rom[3828] = 16'b0011101111110101;
    rom[3829] = 16'b0011101111110101;
    rom[3830] = 16'b0011101111110101;
    rom[3831] = 16'b0011101111110101;
    rom[3832] = 16'b0011101111110110;
    rom[3833] = 16'b0011101111110110;
    rom[3834] = 16'b0011101111110110;
    rom[3835] = 16'b0011101111110110;
    rom[3836] = 16'b0011101111110110;
    rom[3837] = 16'b0011101111110110;
    rom[3838] = 16'b0011101111110110;
    rom[3839] = 16'b0011101111110110;
    rom[3840] = 16'b0011101111110110;
    rom[3841] = 16'b0011101111110110;
    rom[3842] = 16'b0011101111110110;
    rom[3843] = 16'b0011101111110110;
    rom[3844] = 16'b0011101111110110;
    rom[3845] = 16'b0011101111110111;
    rom[3846] = 16'b0011101111110111;
    rom[3847] = 16'b0011101111110111;
    rom[3848] = 16'b0011101111110111;
    rom[3849] = 16'b0011101111110111;
    rom[3850] = 16'b0011101111110111;
    rom[3851] = 16'b0011101111110111;
    rom[3852] = 16'b0011101111110111;
    rom[3853] = 16'b0011101111110111;
    rom[3854] = 16'b0011101111110111;
    rom[3855] = 16'b0011101111110111;
    rom[3856] = 16'b0011101111110111;
    rom[3857] = 16'b0011101111110111;
    rom[3858] = 16'b0011101111110111;
    rom[3859] = 16'b0011101111111000;
    rom[3860] = 16'b0011101111111000;
    rom[3861] = 16'b0011101111111000;
    rom[3862] = 16'b0011101111111000;
    rom[3863] = 16'b0011101111111000;
    rom[3864] = 16'b0011101111111000;
    rom[3865] = 16'b0011101111111000;
    rom[3866] = 16'b0011101111111000;
    rom[3867] = 16'b0011101111111000;
    rom[3868] = 16'b0011101111111000;
    rom[3869] = 16'b0011101111111000;
    rom[3870] = 16'b0011101111111000;
    rom[3871] = 16'b0011101111111000;
    rom[3872] = 16'b0011101111111000;
    rom[3873] = 16'b0011101111111001;
    rom[3874] = 16'b0011101111111001;
    rom[3875] = 16'b0011101111111001;
    rom[3876] = 16'b0011101111111001;
    rom[3877] = 16'b0011101111111001;
    rom[3878] = 16'b0011101111111001;
    rom[3879] = 16'b0011101111111001;
    rom[3880] = 16'b0011101111111001;
    rom[3881] = 16'b0011101111111001;
    rom[3882] = 16'b0011101111111001;
    rom[3883] = 16'b0011101111111001;
    rom[3884] = 16'b0011101111111001;
    rom[3885] = 16'b0011101111111001;
    rom[3886] = 16'b0011101111111001;
    rom[3887] = 16'b0011101111111001;
    rom[3888] = 16'b0011101111111001;
    rom[3889] = 16'b0011101111111010;
    rom[3890] = 16'b0011101111111010;
    rom[3891] = 16'b0011101111111010;
    rom[3892] = 16'b0011101111111010;
    rom[3893] = 16'b0011101111111010;
    rom[3894] = 16'b0011101111111010;
    rom[3895] = 16'b0011101111111010;
    rom[3896] = 16'b0011101111111010;
    rom[3897] = 16'b0011101111111010;
    rom[3898] = 16'b0011101111111010;
    rom[3899] = 16'b0011101111111010;
    rom[3900] = 16'b0011101111111010;
    rom[3901] = 16'b0011101111111010;
    rom[3902] = 16'b0011101111111010;
    rom[3903] = 16'b0011101111111010;
    rom[3904] = 16'b0011101111111010;
    rom[3905] = 16'b0011101111111011;
    rom[3906] = 16'b0011101111111011;
    rom[3907] = 16'b0011101111111011;
    rom[3908] = 16'b0011101111111011;
    rom[3909] = 16'b0011101111111011;
    rom[3910] = 16'b0011101111111011;
    rom[3911] = 16'b0011101111111011;
    rom[3912] = 16'b0011101111111011;
    rom[3913] = 16'b0011101111111011;
    rom[3914] = 16'b0011101111111011;
    rom[3915] = 16'b0011101111111011;
    rom[3916] = 16'b0011101111111011;
    rom[3917] = 16'b0011101111111011;
    rom[3918] = 16'b0011101111111011;
    rom[3919] = 16'b0011101111111011;
    rom[3920] = 16'b0011101111111011;
    rom[3921] = 16'b0011101111111011;
    rom[3922] = 16'b0011101111111011;
    rom[3923] = 16'b0011101111111011;
    rom[3924] = 16'b0011101111111100;
    rom[3925] = 16'b0011101111111100;
    rom[3926] = 16'b0011101111111100;
    rom[3927] = 16'b0011101111111100;
    rom[3928] = 16'b0011101111111100;
    rom[3929] = 16'b0011101111111100;
    rom[3930] = 16'b0011101111111100;
    rom[3931] = 16'b0011101111111100;
    rom[3932] = 16'b0011101111111100;
    rom[3933] = 16'b0011101111111100;
    rom[3934] = 16'b0011101111111100;
    rom[3935] = 16'b0011101111111100;
    rom[3936] = 16'b0011101111111100;
    rom[3937] = 16'b0011101111111100;
    rom[3938] = 16'b0011101111111100;
    rom[3939] = 16'b0011101111111100;
    rom[3940] = 16'b0011101111111100;
    rom[3941] = 16'b0011101111111100;
    rom[3942] = 16'b0011101111111100;
    rom[3943] = 16'b0011101111111100;
    rom[3944] = 16'b0011101111111101;
    rom[3945] = 16'b0011101111111101;
    rom[3946] = 16'b0011101111111101;
    rom[3947] = 16'b0011101111111101;
    rom[3948] = 16'b0011101111111101;
    rom[3949] = 16'b0011101111111101;
    rom[3950] = 16'b0011101111111101;
    rom[3951] = 16'b0011101111111101;
    rom[3952] = 16'b0011101111111101;
    rom[3953] = 16'b0011101111111101;
    rom[3954] = 16'b0011101111111101;
    rom[3955] = 16'b0011101111111101;
    rom[3956] = 16'b0011101111111101;
    rom[3957] = 16'b0011101111111101;
    rom[3958] = 16'b0011101111111101;
    rom[3959] = 16'b0011101111111101;
    rom[3960] = 16'b0011101111111101;
    rom[3961] = 16'b0011101111111101;
    rom[3962] = 16'b0011101111111101;
    rom[3963] = 16'b0011101111111101;
    rom[3964] = 16'b0011101111111101;
    rom[3965] = 16'b0011101111111101;
    rom[3966] = 16'b0011101111111101;
    rom[3967] = 16'b0011101111111101;
    rom[3968] = 16'b0011101111111110;
    rom[3969] = 16'b0011101111111110;
    rom[3970] = 16'b0011101111111110;
    rom[3971] = 16'b0011101111111110;
    rom[3972] = 16'b0011101111111110;
    rom[3973] = 16'b0011101111111110;
    rom[3974] = 16'b0011101111111110;
    rom[3975] = 16'b0011101111111110;
    rom[3976] = 16'b0011101111111110;
    rom[3977] = 16'b0011101111111110;
    rom[3978] = 16'b0011101111111110;
    rom[3979] = 16'b0011101111111110;
    rom[3980] = 16'b0011101111111110;
    rom[3981] = 16'b0011101111111110;
    rom[3982] = 16'b0011101111111110;
    rom[3983] = 16'b0011101111111110;
    rom[3984] = 16'b0011101111111110;
    rom[3985] = 16'b0011101111111110;
    rom[3986] = 16'b0011101111111110;
    rom[3987] = 16'b0011101111111110;
    rom[3988] = 16'b0011101111111110;
    rom[3989] = 16'b0011101111111110;
    rom[3990] = 16'b0011101111111110;
    rom[3991] = 16'b0011101111111110;
    rom[3992] = 16'b0011101111111110;
    rom[3993] = 16'b0011101111111110;
    rom[3994] = 16'b0011101111111110;
    rom[3995] = 16'b0011101111111110;
    rom[3996] = 16'b0011101111111110;
    rom[3997] = 16'b0011101111111111;
    rom[3998] = 16'b0011101111111111;
    rom[3999] = 16'b0011101111111111;
    rom[4000] = 16'b0011101111111111;
    rom[4001] = 16'b0011101111111111;
    rom[4002] = 16'b0011101111111111;
    rom[4003] = 16'b0011101111111111;
    rom[4004] = 16'b0011101111111111;
    rom[4005] = 16'b0011101111111111;
    rom[4006] = 16'b0011101111111111;
    rom[4007] = 16'b0011101111111111;
    rom[4008] = 16'b0011101111111111;
    rom[4009] = 16'b0011101111111111;
    rom[4010] = 16'b0011101111111111;
    rom[4011] = 16'b0011101111111111;
    rom[4012] = 16'b0011101111111111;
    rom[4013] = 16'b0011101111111111;
    rom[4014] = 16'b0011101111111111;
    rom[4015] = 16'b0011101111111111;
    rom[4016] = 16'b0011101111111111;
    rom[4017] = 16'b0011101111111111;
    rom[4018] = 16'b0011101111111111;
    rom[4019] = 16'b0011101111111111;
    rom[4020] = 16'b0011101111111111;
    rom[4021] = 16'b0011101111111111;
    rom[4022] = 16'b0011101111111111;
    rom[4023] = 16'b0011101111111111;
    rom[4024] = 16'b0011101111111111;
    rom[4025] = 16'b0011101111111111;
    rom[4026] = 16'b0011101111111111;
    rom[4027] = 16'b0011101111111111;
    rom[4028] = 16'b0011101111111111;
    rom[4029] = 16'b0011101111111111;
    rom[4030] = 16'b0011101111111111;
    rom[4031] = 16'b0011101111111111;
    rom[4032] = 16'b0011101111111111;
    rom[4033] = 16'b0011101111111111;
    rom[4034] = 16'b0011101111111111;
    rom[4035] = 16'b0011101111111111;
    rom[4036] = 16'b0011101111111111;
    rom[4037] = 16'b0011101111111111;
    rom[4038] = 16'b0011101111111111;
    rom[4039] = 16'b0011110000000000;
    rom[4040] = 16'b0011110000000000;
    rom[4041] = 16'b0011110000000000;
    rom[4042] = 16'b0011110000000000;
    rom[4043] = 16'b0011110000000000;
    rom[4044] = 16'b0011110000000000;
    rom[4045] = 16'b0011110000000000;
    rom[4046] = 16'b0011110000000000;
    rom[4047] = 16'b0011110000000000;
    rom[4048] = 16'b0011110000000000;
    rom[4049] = 16'b0011110000000000;
    rom[4050] = 16'b0011110000000000;
    rom[4051] = 16'b0011110000000000;
    rom[4052] = 16'b0011110000000000;
    rom[4053] = 16'b0011110000000000;
    rom[4054] = 16'b0011110000000000;
    rom[4055] = 16'b0011110000000000;
    rom[4056] = 16'b0011110000000000;
    rom[4057] = 16'b0011110000000000;
    rom[4058] = 16'b0011110000000000;
    rom[4059] = 16'b0011110000000000;
    rom[4060] = 16'b0011110000000000;
    rom[4061] = 16'b0011110000000000;
    rom[4062] = 16'b0011110000000000;
    rom[4063] = 16'b0011110000000000;
    rom[4064] = 16'b0011110000000000;
    rom[4065] = 16'b0011110000000000;
    rom[4066] = 16'b0011110000000000;
    rom[4067] = 16'b0011110000000000;
    rom[4068] = 16'b0011110000000000;
    rom[4069] = 16'b0011110000000000;
    rom[4070] = 16'b0011110000000000;
    rom[4071] = 16'b0011110000000000;
    rom[4072] = 16'b0011110000000000;
    rom[4073] = 16'b0011110000000000;
    rom[4074] = 16'b0011110000000000;
    rom[4075] = 16'b0011110000000000;
    rom[4076] = 16'b0011110000000000;
    rom[4077] = 16'b0011110000000000;
    rom[4078] = 16'b0011110000000000;
    rom[4079] = 16'b0011110000000000;
    rom[4080] = 16'b0011110000000000;
    rom[4081] = 16'b0011110000000000;
    rom[4082] = 16'b0011110000000000;
    rom[4083] = 16'b0011110000000000;
    rom[4084] = 16'b0011110000000000;
    rom[4085] = 16'b0011110000000000;
    rom[4086] = 16'b0011110000000000;
    rom[4087] = 16'b0011110000000000;
    rom[4088] = 16'b0011110000000000;
    rom[4089] = 16'b0011110000000000;
    rom[4090] = 16'b0011110000000000;
    rom[4091] = 16'b0011110000000000;
    rom[4092] = 16'b0011110000000000;
    rom[4093] = 16'b0011110000000000;
    rom[4094] = 16'b0011110000000000;
    rom[4095] = 16'b0011110000000000;
  end
  always @(posedge clk_1_clk) begin
    if(popPre_ready) begin
      rom_spinal_port0 <= rom[sinAddr];
    end
  end

  always @(posedge clk_1_clk) begin
    if(popPre_fire) begin
      rom_spinal_port1 <= rom[cosAddr];
    end
  end

  assign popPre_valid = index_tvalid;
  assign index_tready = popPre_ready;
  assign index = index_tdata[13:0];
  assign lowHalf = index[12 : 0];
  assign highHalf = index[13 : 13];
  assign lowQuarter = lowHalf[11 : 0];
  assign highQuarter = lowHalf[12 : 12];
  assign sinFlip = (|highQuarter);
  assign sinNeg = (|highHalf);
  assign sinAddr = (sinFlip ? t_sinAddr : lowQuarter);
  assign sinRdOut = rom_spinal_port0;
  assign negSinRdOut = {1'b1,sinRdOut[14 : 0]};
  assign sinVal = (sinNegDly ? negSinRdOut : sinRdOut);
  assign cosFlip = (((! (|highHalf)) && (! (|highQuarter))) || ((|highHalf) && (! (|highQuarter))));
  assign cosNeg = (((! (|highHalf)) && (|highQuarter)) || ((|highHalf) && (! (|highQuarter))));
  assign cosAddr = (cosFlip ? t_cosAddr : lowQuarter);
  assign popPre_fire = (popPre_valid && popPre_ready);
  assign cosRdOut = rom_spinal_port1;
  assign negCosRdOut = {1'b1,cosRdOut[14 : 0]};
  assign cosVal = (cosNegDly ? negCosRdOut : cosRdOut);
  assign sinCos_tdata = {sinVal,cosVal};
  always @(*) begin
    popPre_ready = popPre_m2sPipe_ready;
    if((! popPre_m2sPipe_valid)) begin
      popPre_ready = 1'b1;
    end
  end

  assign popPre_m2sPipe_valid = popPre_rValid;
  assign sinCos_tvalid = popPre_m2sPipe_valid;
  assign popPre_m2sPipe_ready = sinCos_tready;
  always @(posedge clk_1_clk) begin
    if(popPre_ready) begin
      sinNegDly <= sinNeg;
    end
    if(popPre_ready) begin
      cosNegDly <= cosNeg;
    end
  end

  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      popPre_rValid <= 1'b0;
    end else begin
      if(popPre_ready) begin
        popPre_rValid <= popPre_valid;
      end
    end
  end


endmodule

module CosSinIndexGen (
  input  wire          pos_valid,
  input  wire [15:0]   pos_payload,
  output wire          index_tvalid,
  input  wire          index_tready,
  output wire [15:0]   index_tdata,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire       [13:0]   pipe_io_push_payload;
  reg                 pipe_io_pop_ready;
  wire                rom_io_invFreq_valid;
  wire       [31:0]   rom_io_invFreq_payload;
  wire                posIn_from_ip_m_axis_result_tvalid;
  wire       [31:0]   posIn_from_ip_m_axis_result_tdata;
  wire                indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  wire                indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [31:0]   indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  wire                pipe_io_push_ready;
  wire                pipe_io_pop_valid;
  wire       [13:0]   pipe_io_pop_payload;
  wire       [7:0]    pipe_io_occupancy;
  wire       [7:0]    pipe_io_availability;
  wire       [15:0]   t_index_tdata;
  reg                 flag;
  reg        [6:0]    posCnt;
  wire                posIn_valid;
  wire       [15:0]   posIn_payload;
  wire                invFreqFlow_valid;
  wire       [31:0]   invFreqFlow_payload;
  wire                pipeOut_valid;
  wire                pipeOut_ready;
  wire       [13:0]   pipeOut_payload;
  reg                 indexGen_pipe_io_pop_rValid;
  reg        [13:0]   indexGen_pipe_io_pop_rData;

  assign t_index_tdata = {2'd0, pipeOut_payload};
  InvFreqRom rom (
    .io_invFreq_valid   (rom_io_invFreq_valid              ), //o
    .io_invFreq_ready   (posIn_from_ip_m_axis_result_tvalid), //i
    .io_invFreq_payload (rom_io_invFreq_payload[31:0]      ), //o
    .clk_1_clk          (clk_1_clk                         ), //i
    .clk_1_resetn       (clk_1_resetn                      )  //i
  );
  fp32int16d4 posIn_from_ip (
    .aclk                 (clk_1_clk                              ), //i
    .s_axis_a_tvalid      (posIn_valid                            ), //i
    .s_axis_a_tdata       (posIn_payload[15:0]                    ), //i
    .m_axis_result_tvalid (posIn_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (posIn_from_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 indexGen_posIn_from_ip_m_axis_result_mul_ip (
    .aclk                 (clk_1_clk                                                            ), //i
    .s_axis_a_tvalid      (posIn_from_ip_m_axis_result_tvalid                                   ), //i
    .s_axis_a_tdata       (posIn_from_ip_m_axis_result_tdata[31:0]                              ), //i
    .s_axis_b_tvalid      (invFreqFlow_valid                                                    ), //i
    .s_axis_b_tdata       (invFreqFlow_payload[31:0]                                            ), //i
    .m_axis_result_tvalid (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toint32d6 indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip (
    .aclk                 (clk_1_clk                                                                                         ), //i
    .s_axis_a_tvalid      (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamFifo_133 pipe (
    .io_push_valid   (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid), //i
    .io_push_ready   (pipe_io_push_ready                                                                           ), //o
    .io_push_payload (pipe_io_push_payload[13:0]                                                                   ), //i
    .io_pop_valid    (pipe_io_pop_valid                                                                            ), //o
    .io_pop_ready    (pipe_io_pop_ready                                                                            ), //i
    .io_pop_payload  (pipe_io_pop_payload[13:0]                                                                    ), //o
    .io_flush        (1'b0                                                                                         ), //i
    .io_occupancy    (pipe_io_occupancy[7:0]                                                                       ), //o
    .io_availability (pipe_io_availability[7:0]                                                                    ), //o
    .clk_1_clk       (clk_1_clk                                                                                    ), //i
    .clk_1_resetn    (clk_1_resetn                                                                                 )  //i
  );
  assign posIn_valid = flag;
  assign posIn_payload = pos_payload;
  assign invFreqFlow_valid = posIn_from_ip_m_axis_result_tvalid;
  assign invFreqFlow_payload = rom_io_invFreq_payload;
  assign pipe_io_push_payload = indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[13 : 0];
  always @(*) begin
    pipe_io_pop_ready = pipeOut_ready;
    if((! pipeOut_valid)) begin
      pipe_io_pop_ready = 1'b1;
    end
  end

  assign pipeOut_valid = indexGen_pipe_io_pop_rValid;
  assign pipeOut_payload = indexGen_pipe_io_pop_rData;
  assign index_tvalid = pipeOut_valid;
  assign pipeOut_ready = index_tready;
  assign index_tdata = t_index_tdata;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      flag <= 1'b0;
      posCnt <= 7'h0;
      indexGen_pipe_io_pop_rValid <= 1'b0;
    end else begin
      if(pos_valid) begin
        flag <= 1'b1;
      end
      if(flag) begin
        posCnt <= (posCnt + 7'h01);
        if((posCnt == 7'h7f)) begin
          posCnt <= 7'h0;
          flag <= 1'b0;
        end
      end
      if(pipe_io_pop_ready) begin
        indexGen_pipe_io_pop_rValid <= pipe_io_pop_valid;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(pipe_io_pop_ready) begin
      indexGen_pipe_io_pop_rData <= pipe_io_pop_payload;
    end
  end


endmodule

module RoPERotate (
  input  wire          io_input_valid,
  input  wire [15:0]   io_input_payload,
  output wire          io_output_valid,
  output wire [15:0]   io_output_payload_A,
  output wire [15:0]   io_output_payload_B,
  input  wire [6:0]    cfg_dim,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                rotateFifo_io_push_valid;
  reg                 rotateFifo_io_pop_ready;
  reg                 bypassFifo_io_pop_ready;
  wire                rotateFifo_io_push_ready;
  wire                rotateFifo_io_pop_valid;
  wire       [15:0]   rotateFifo_io_pop_payload;
  wire       [6:0]    rotateFifo_io_occupancy;
  wire       [6:0]    rotateFifo_io_availability;
  wire                bypassFifo_io_push_ready;
  wire                bypassFifo_io_pop_valid;
  wire       [15:0]   bypassFifo_io_pop_payload;
  wire       [6:0]    bypassFifo_io_occupancy;
  wire       [6:0]    bypassFifo_io_availability;
  wire       [5:0]    halfDim;
  reg        [5:0]    inCnt;
  wire                inCntOvf;
  reg                 inputSecondHalf;
  wire                rotateFifoPop_valid;
  wire                rotateFifoPop_ready;
  wire       [15:0]   rotateFifoPop_payload;
  reg                 rotator_rotateFifo_io_pop_rValid;
  reg        [15:0]   rotator_rotateFifo_io_pop_rData;
  wire                bypassFifoPop_valid;
  wire                bypassFifoPop_ready;
  wire       [15:0]   bypassFifoPop_payload;
  reg                 rotator_bypassFifo_io_pop_rValid;
  reg        [15:0]   rotator_bypassFifo_io_pop_rData;
  wire                rotateOut_valid;
  wire       [15:0]   rotateOut_payload;
  reg        [5:0]    rotateOutCnt;
  wire                rotateOutCntOvf;
  reg                 rotateSecondHalf;
  wire                in2Rotate_valid;
  wire       [15:0]   in2Rotate_payload;
  wire       [15:0]   r;

  StreamFifo_134 rotateFifo (
    .io_push_valid   (rotateFifo_io_push_valid       ), //i
    .io_push_ready   (rotateFifo_io_push_ready       ), //o
    .io_push_payload (io_input_payload[15:0]         ), //i
    .io_pop_valid    (rotateFifo_io_pop_valid        ), //o
    .io_pop_ready    (rotateFifo_io_pop_ready        ), //i
    .io_pop_payload  (rotateFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (rotateFifo_io_occupancy[6:0]   ), //o
    .io_availability (rotateFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                      ), //i
    .clk_1_resetn    (clk_1_resetn                   )  //i
  );
  StreamFifo_134 bypassFifo (
    .io_push_valid   (io_input_valid                 ), //i
    .io_push_ready   (bypassFifo_io_push_ready       ), //o
    .io_push_payload (io_input_payload[15:0]         ), //i
    .io_pop_valid    (bypassFifo_io_pop_valid        ), //o
    .io_pop_ready    (bypassFifo_io_pop_ready        ), //i
    .io_pop_payload  (bypassFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (bypassFifo_io_occupancy[6:0]   ), //o
    .io_availability (bypassFifo_io_availability[6:0]), //o
    .clk_1_clk       (clk_1_clk                      ), //i
    .clk_1_resetn    (clk_1_resetn                   )  //i
  );
  assign halfDim = cfg_dim[6 : 1];
  assign inCntOvf = (inCnt == halfDim);
  always @(*) begin
    rotateFifo_io_pop_ready = rotateFifoPop_ready;
    if((! rotateFifoPop_valid)) begin
      rotateFifo_io_pop_ready = 1'b1;
    end
  end

  assign rotateFifoPop_valid = rotator_rotateFifo_io_pop_rValid;
  assign rotateFifoPop_payload = rotator_rotateFifo_io_pop_rData;
  assign rotateFifo_io_push_valid = (io_input_valid && (! inputSecondHalf));
  always @(*) begin
    bypassFifo_io_pop_ready = bypassFifoPop_ready;
    if((! bypassFifoPop_valid)) begin
      bypassFifo_io_pop_ready = 1'b1;
    end
  end

  assign bypassFifoPop_valid = rotator_bypassFifo_io_pop_rValid;
  assign bypassFifoPop_payload = rotator_bypassFifo_io_pop_rData;
  assign rotateOutCntOvf = (rotateOutCnt == halfDim);
  assign r = io_input_payload;
  assign in2Rotate_valid = (io_input_valid && inputSecondHalf);
  assign in2Rotate_payload = {(! r[15]),r[14 : 0]};
  assign rotateOut_valid = (rotateSecondHalf ? rotateFifoPop_valid : in2Rotate_valid);
  assign rotateOut_payload = (rotateSecondHalf ? rotateFifoPop_payload : in2Rotate_payload);
  assign rotateFifoPop_ready = rotateSecondHalf;
  assign io_output_valid = rotateOut_valid;
  assign io_output_payload_A = bypassFifoPop_payload;
  assign io_output_payload_B = rotateOut_payload;
  assign bypassFifoPop_ready = rotateOut_valid;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      inCnt <= 6'h0;
      inputSecondHalf <= 1'b0;
      rotator_rotateFifo_io_pop_rValid <= 1'b0;
      rotator_bypassFifo_io_pop_rValid <= 1'b0;
      rotateOutCnt <= 6'h0;
      rotateSecondHalf <= 1'b0;
    end else begin
      if(io_input_valid) begin
        inCnt <= (inCnt + 6'h01);
        if(inCntOvf) begin
          inCnt <= 6'h0;
          inputSecondHalf <= (! inputSecondHalf);
        end
      end
      if(rotateFifo_io_pop_ready) begin
        rotator_rotateFifo_io_pop_rValid <= rotateFifo_io_pop_valid;
      end
      if(bypassFifo_io_pop_ready) begin
        rotator_bypassFifo_io_pop_rValid <= bypassFifo_io_pop_valid;
      end
      if(rotateOut_valid) begin
        rotateOutCnt <= (rotateOutCnt + 6'h01);
        if(rotateOutCntOvf) begin
          rotateOutCnt <= 6'h0;
          rotateSecondHalf <= (! rotateSecondHalf);
        end
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(rotateFifo_io_pop_ready) begin
      rotator_rotateFifo_io_pop_rData <= rotateFifo_io_pop_payload;
    end
    if(bypassFifo_io_pop_ready) begin
      rotator_bypassFifo_io_pop_rData <= bypassFifo_io_pop_payload;
    end
  end


endmodule

//StreamDemux_12 replaced by StreamDemux_17

//StreamDemux_13 replaced by StreamDemux_17

//StreamFifo_85 replaced by StreamFifo_82

//StreamFifo_84 replaced by StreamFifo_82

//StreamFifo_83 replaced by StreamFifo_82

module StreamFifo_82 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [3:0]    io_occupancy,
  output wire [3:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [3:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [3:0]    logic_ptr_pop;
  wire       [3:0]    logic_ptr_occupancy;
  wire       [3:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [3:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [3:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [3:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [2:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [2:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [2:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [2:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [2:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [3:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [3:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [3:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:7];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 4'b0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 4'b0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[3];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 4'b0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 4'b0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[3];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 4'b0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 4'b0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[2:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[2:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 4'b0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 4'b0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 4'b0000;
      logic_ptr_pop <= 4'b0000;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 4'b1000;
      logic_ptr_arb_fmax_fullTracker_value <= 4'b0000;
      logic_ptr_fmax_value <= 4'b0000;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 4'b0000;
      logic_fmaxAvail_value <= 4'b1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 4'b1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 4'b0000;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 4'b0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 4'b0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 4'b0000;
        logic_ptr_pop <= 4'b0000;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 4'b0000;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 4'b0000;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 4'b1000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamDemux_14 replaced by StreamDemux_17

//StreamFifo_89 replaced by StreamFifo_86

//StreamFifo_88 replaced by StreamFifo_86

//StreamFifo_87 replaced by StreamFifo_86

module StreamFifo_86 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [6:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:63];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_93 replaced by StreamFifo_90

//StreamFifo_92 replaced by StreamFifo_90

//StreamFifo_91 replaced by StreamFifo_90

module StreamFifo_90 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_94 replaced by StreamFifo_95

module StreamFifo_95 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [63:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [63:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [63:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [63:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [63:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [63:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "ultra" *) reg [63:0] logic_ram [0:4095];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_96 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [5:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamMux_40 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire          io_inputs_0_payload_last,
  input  wire [15:0]   io_inputs_0_payload_tdata,
  input  wire [5:0]    io_inputs_0_payload_tuser,
  input  wire [0:0]    io_inputs_0_payload_tdest,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire          io_inputs_1_payload_last,
  input  wire [15:0]   io_inputs_1_payload_tdata,
  input  wire [5:0]    io_inputs_1_payload_tuser,
  input  wire [0:0]    io_inputs_1_payload_tdest,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  output wire [0:0]    io_output_payload_tdest
);

  reg                 t_io_output_valid;
  reg                 t_io_output_payload_last;
  reg        [15:0]   t_io_output_payload_tdata;
  reg        [5:0]    t_io_output_payload_tuser;
  reg        [0:0]    t_io_output_payload_tdest;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload_last = io_inputs_0_payload_last;
        t_io_output_payload_tdata = io_inputs_0_payload_tdata;
        t_io_output_payload_tuser = io_inputs_0_payload_tuser;
        t_io_output_payload_tdest = io_inputs_0_payload_tdest;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload_last = io_inputs_1_payload_last;
        t_io_output_payload_tdata = io_inputs_1_payload_tdata;
        t_io_output_payload_tuser = io_inputs_1_payload_tuser;
        t_io_output_payload_tdest = io_inputs_1_payload_tdest;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload_last = t_io_output_payload_last;
  assign io_output_payload_tdata = t_io_output_payload_tdata;
  assign io_output_payload_tuser = t_io_output_payload_tuser;
  assign io_output_payload_tdest = t_io_output_payload_tdest;

endmodule

module StreamFifo_98 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_tdata,
  input  wire [5:0]    io_push_payload_tuser,
  input  wire [0:0]    io_push_payload_tdest,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_tdata,
  output wire [5:0]    io_pop_payload_tuser,
  output wire [0:0]    io_pop_payload_tdest,
  input  wire          io_flush,
  output wire [14:0]   io_occupancy,
  output wire [14:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [23:0]   logic_ram_spinal_port1;
  wire       [23:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [14:0]   logic_ptr_push;
  reg        [14:0]   logic_ptr_pop;
  wire       [14:0]   logic_ptr_occupancy;
  wire       [14:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [14:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [13:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [15:0]   logic_push_onRam_write_payload_data_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_data_tuser;
  wire       [0:0]    logic_push_onRam_write_payload_data_tdest;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [13:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [13:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [13:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [15:0]   logic_pop_sync_readPort_rsp_tdata;
  wire       [5:0]    logic_pop_sync_readPort_rsp_tuser;
  wire       [0:0]    logic_pop_sync_readPort_rsp_tdest;
  wire       [23:0]   t_logic_pop_sync_readPort_rsp_last;
  wire       [22:0]   t_logic_pop_sync_readPort_rsp_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_tuser;
  wire       [0:0]    logic_pop_sync_readArbitation_translated_payload_tdest;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [14:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [14:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [23:0] logic_ram [0:16383];

  assign t_logic_ram_port = {{logic_push_onRam_write_payload_data_tdest,{logic_push_onRam_write_payload_data_tuser,logic_push_onRam_write_payload_data_tdata}},logic_push_onRam_write_payload_data_last};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[14];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 15'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[14];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 15'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 15'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[13:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_tdata = io_push_payload_tdata;
  assign logic_push_onRam_write_payload_data_tuser = io_push_payload_tuser;
  assign logic_push_onRam_write_payload_data_tdest = io_push_payload_tdest;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[13:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign t_logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_last[23 : 1];
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_tdata[15 : 0];
  assign logic_pop_sync_readPort_rsp_tuser = t_logic_pop_sync_readPort_rsp_tdata[21 : 16];
  assign logic_pop_sync_readPort_rsp_tdest = t_logic_pop_sync_readPort_rsp_tdata[22 : 22];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_tdata = logic_pop_sync_readPort_rsp_tdata;
  assign logic_pop_sync_readArbitation_translated_payload_tuser = logic_pop_sync_readPort_rsp_tuser;
  assign logic_pop_sync_readArbitation_translated_payload_tdest = logic_pop_sync_readPort_rsp_tdest;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_tdata = logic_pop_sync_readArbitation_translated_payload_tdata;
  assign io_pop_payload_tuser = logic_pop_sync_readArbitation_translated_payload_tuser;
  assign io_pop_payload_tdest = logic_pop_sync_readArbitation_translated_payload_tdest;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 15'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 15'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 15'h0;
      logic_ptr_pop <= 15'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      logic_ptr_fmax_value <= 15'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 15'h0;
      logic_fmaxAvail_value <= 15'h4000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 15'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 15'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 15'h0;
        logic_ptr_pop <= 15'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 15'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 15'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 15'h4000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_97 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_tdata,
  input  wire [5:0]    io_push_payload_tuser,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_tdata,
  output wire [5:0]    io_pop_payload_tuser,
  input  wire          io_flush,
  output wire [14:0]   io_occupancy,
  output wire [14:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [22:0]   logic_ram_spinal_port1;
  wire       [22:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [14:0]   logic_ptr_push;
  reg        [14:0]   logic_ptr_pop;
  wire       [14:0]   logic_ptr_occupancy;
  wire       [14:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [14:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [14:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [13:0]   logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data_last;
  wire       [15:0]   logic_push_onRam_write_payload_data_tdata;
  wire       [5:0]    logic_push_onRam_write_payload_data_tuser;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [13:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [13:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [13:0]   logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp_last;
  wire       [15:0]   logic_pop_sync_readPort_rsp_tdata;
  wire       [5:0]    logic_pop_sync_readPort_rsp_tuser;
  wire       [22:0]   t_logic_pop_sync_readPort_rsp_last;
  wire       [21:0]   t_logic_pop_sync_readPort_rsp_tdata;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload_last;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload_tdata;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload_tuser;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [14:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [14:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [14:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [22:0] logic_ram [0:16383];

  assign t_logic_ram_port = {{logic_push_onRam_write_payload_data_tuser,logic_push_onRam_write_payload_data_tdata},logic_push_onRam_write_payload_data_last};
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 15'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[14];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 15'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 15'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[14];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 15'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 15'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[13:0];
  assign logic_push_onRam_write_payload_data_last = io_push_payload_last;
  assign logic_push_onRam_write_payload_data_tdata = io_push_payload_tdata;
  assign logic_push_onRam_write_payload_data_tuser = io_push_payload_tuser;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[13:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign t_logic_pop_sync_readPort_rsp_last = logic_ram_spinal_port1;
  assign t_logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_last[22 : 1];
  assign logic_pop_sync_readPort_rsp_last = t_logic_pop_sync_readPort_rsp_last[0];
  assign logic_pop_sync_readPort_rsp_tdata = t_logic_pop_sync_readPort_rsp_tdata[15 : 0];
  assign logic_pop_sync_readPort_rsp_tuser = t_logic_pop_sync_readPort_rsp_tdata[21 : 16];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload_last = logic_pop_sync_readPort_rsp_last;
  assign logic_pop_sync_readArbitation_translated_payload_tdata = logic_pop_sync_readPort_rsp_tdata;
  assign logic_pop_sync_readArbitation_translated_payload_tuser = logic_pop_sync_readPort_rsp_tuser;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload_last = logic_pop_sync_readArbitation_translated_payload_last;
  assign io_pop_payload_tdata = logic_pop_sync_readArbitation_translated_payload_tdata;
  assign io_pop_payload_tuser = logic_pop_sync_readArbitation_translated_payload_tuser;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 15'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 15'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 15'h0;
      logic_ptr_pop <= 15'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      logic_ptr_fmax_value <= 15'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 15'h0;
      logic_fmaxAvail_value <= 15'h4000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 15'h4000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 15'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 15'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 15'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 15'h0;
        logic_ptr_pop <= 15'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 15'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 15'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 15'h4000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//AddEngineNew_4 replaced by AddEngineNew_7

//MulEngine_4 replaced by MulEngine_7

//AddEngineNew_5 replaced by AddEngineNew_7

//MulEngine_5 replaced by MulEngine_7

//AddEngineNew_6 replaced by AddEngineNew_7

//MulEngine_6 replaced by MulEngine_7

module AddEngineNew_7 (
  input  wire          mulRes_tvalid,
  output wire          mulRes_tready,
  input  wire [511:0]  mulRes_tdata,
  input  wire          resAdd_tvalid,
  output wire          resAdd_tready,
  input  wire [511:0]  resAdd_tdata,
  output wire          vecOut_tvalid,
  output wire [511:0]  vecOut_tdata,
  output wire [5:0]    vecOut_tuser,
  output wire          scalarOut_tvalid,
  output wire          scalarOut_tlast,
  output wire [15:0]   scalarOut_tdata,
  output wire [5:0]    scalarOut_tuser,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    postCfgTag,
  input  wire          popVldNext,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifoCtrl_io_push_valid;
  wire       [511:0]  fifoCtrl_io_push_payload;
  wire                fifoCtrl_io_pop_ready;
  wire       [511:0]  fifoCtrl_rdPort_rsp;
  reg        [511:0]  t_1_spinal_port1;
  wire                fifoCtrl_io_push_ready;
  wire                fifoCtrl_io_pop_valid;
  wire       [511:0]  fifoCtrl_io_pop_payload;
  wire       [5:0]    fifoCtrl_io_occupancy;
  wire       [5:0]    fifoCtrl_io_availability;
  wire                fifoCtrl_rdPort_cmd_valid;
  wire       [4:0]    fifoCtrl_rdPort_cmd_payload;
  wire                fifoCtrl_wrPort_valid;
  wire       [4:0]    fifoCtrl_wrPort_payload_address;
  wire       [511:0]  fifoCtrl_wrPort_payload_data;
  wire                addLogic_a_0_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_0_add_ip_m_axis_result_tdata;
  wire                addLogic_a_1_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_1_add_ip_m_axis_result_tdata;
  wire                addLogic_a_2_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_2_add_ip_m_axis_result_tdata;
  wire                addLogic_a_3_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_3_add_ip_m_axis_result_tdata;
  wire                addLogic_a_4_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_4_add_ip_m_axis_result_tdata;
  wire                addLogic_a_5_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_5_add_ip_m_axis_result_tdata;
  wire                addLogic_a_6_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_6_add_ip_m_axis_result_tdata;
  wire                addLogic_a_7_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_7_add_ip_m_axis_result_tdata;
  wire                addLogic_a_8_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_8_add_ip_m_axis_result_tdata;
  wire                addLogic_a_9_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_9_add_ip_m_axis_result_tdata;
  wire                addLogic_a_10_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_10_add_ip_m_axis_result_tdata;
  wire                addLogic_a_11_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_11_add_ip_m_axis_result_tdata;
  wire                addLogic_a_12_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_12_add_ip_m_axis_result_tdata;
  wire                addLogic_a_13_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_13_add_ip_m_axis_result_tdata;
  wire                addLogic_a_14_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_14_add_ip_m_axis_result_tdata;
  wire                addLogic_a_15_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_15_add_ip_m_axis_result_tdata;
  wire                addLogic_a_16_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_16_add_ip_m_axis_result_tdata;
  wire                addLogic_a_17_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_17_add_ip_m_axis_result_tdata;
  wire                addLogic_a_18_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_18_add_ip_m_axis_result_tdata;
  wire                addLogic_a_19_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_19_add_ip_m_axis_result_tdata;
  wire                addLogic_a_20_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_20_add_ip_m_axis_result_tdata;
  wire                addLogic_a_21_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_21_add_ip_m_axis_result_tdata;
  wire                addLogic_a_22_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_22_add_ip_m_axis_result_tdata;
  wire                addLogic_a_23_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_23_add_ip_m_axis_result_tdata;
  wire                addLogic_a_24_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_24_add_ip_m_axis_result_tdata;
  wire                addLogic_a_25_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_25_add_ip_m_axis_result_tdata;
  wire                addLogic_a_26_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_26_add_ip_m_axis_result_tdata;
  wire                addLogic_a_27_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_27_add_ip_m_axis_result_tdata;
  wire                addLogic_a_28_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_28_add_ip_m_axis_result_tdata;
  wire                addLogic_a_29_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_29_add_ip_m_axis_result_tdata;
  wire                addLogic_a_30_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_30_add_ip_m_axis_result_tdata;
  wire                addLogic_a_31_add_ip_m_axis_result_tvalid;
  wire       [15:0]   addLogic_a_31_add_ip_m_axis_result_tdata;
  wire       [15:0]   t_fAxpyCond;
  wire       [15:0]   t_pAxpyCond;
  reg        [15:0]   t_addLogic_a_0_payload;
  reg        [15:0]   t_addLogic_b_0_payload;
  reg        [15:0]   t_addLogic_a_1_payload;
  reg        [15:0]   t_addLogic_b_1_payload;
  reg        [15:0]   t_addLogic_a_2_payload;
  reg        [15:0]   t_addLogic_b_2_payload;
  reg        [15:0]   t_addLogic_a_3_payload;
  reg        [15:0]   t_addLogic_b_3_payload;
  reg        [15:0]   t_addLogic_a_4_payload;
  reg        [15:0]   t_addLogic_b_4_payload;
  reg        [15:0]   t_addLogic_a_5_payload;
  reg        [15:0]   t_addLogic_b_5_payload;
  reg        [15:0]   t_addLogic_a_6_payload;
  reg        [15:0]   t_addLogic_b_6_payload;
  reg        [15:0]   t_addLogic_a_7_payload;
  reg        [15:0]   t_addLogic_b_7_payload;
  reg        [15:0]   t_addLogic_a_8_payload;
  reg        [15:0]   t_addLogic_b_8_payload;
  reg        [15:0]   t_addLogic_a_9_payload;
  reg        [15:0]   t_addLogic_b_9_payload;
  reg        [15:0]   t_addLogic_a_10_payload;
  reg        [15:0]   t_addLogic_b_10_payload;
  reg        [15:0]   t_addLogic_a_11_payload;
  reg        [15:0]   t_addLogic_b_11_payload;
  reg        [15:0]   t_addLogic_a_12_payload;
  reg        [15:0]   t_addLogic_b_12_payload;
  reg        [15:0]   t_addLogic_a_13_payload;
  reg        [15:0]   t_addLogic_b_13_payload;
  reg        [15:0]   t_addLogic_a_14_payload;
  reg        [15:0]   t_addLogic_b_14_payload;
  reg        [15:0]   t_addLogic_a_15_payload;
  reg        [15:0]   t_addLogic_b_15_payload;
  reg        [15:0]   t_addLogic_a_16_payload;
  reg        [15:0]   t_addLogic_b_16_payload;
  reg        [15:0]   t_addLogic_a_17_payload;
  reg        [15:0]   t_addLogic_b_17_payload;
  reg        [15:0]   t_addLogic_a_18_payload;
  reg        [15:0]   t_addLogic_b_18_payload;
  reg        [15:0]   t_addLogic_a_19_payload;
  reg        [15:0]   t_addLogic_b_19_payload;
  reg        [15:0]   t_addLogic_a_20_payload;
  reg        [15:0]   t_addLogic_b_20_payload;
  reg        [15:0]   t_addLogic_a_21_payload;
  reg        [15:0]   t_addLogic_b_21_payload;
  reg        [15:0]   t_addLogic_a_22_payload;
  reg        [15:0]   t_addLogic_b_22_payload;
  reg        [15:0]   t_addLogic_a_23_payload;
  reg        [15:0]   t_addLogic_b_23_payload;
  reg        [15:0]   t_addLogic_a_24_payload;
  reg        [15:0]   t_addLogic_b_24_payload;
  reg        [15:0]   t_addLogic_a_25_payload;
  reg        [15:0]   t_addLogic_b_25_payload;
  reg        [15:0]   t_addLogic_a_26_payload;
  reg        [15:0]   t_addLogic_b_26_payload;
  reg        [15:0]   t_addLogic_a_27_payload;
  reg        [15:0]   t_addLogic_b_27_payload;
  reg        [15:0]   t_addLogic_a_28_payload;
  reg        [15:0]   t_addLogic_b_28_payload;
  reg        [15:0]   t_addLogic_a_29_payload;
  reg        [15:0]   t_addLogic_b_29_payload;
  reg        [15:0]   t_addLogic_a_30_payload;
  reg        [15:0]   t_addLogic_b_30_payload;
  reg        [15:0]   t_addLogic_a_31_payload;
  reg        [15:0]   t_addLogic_b_31_payload;
  wire       [255:0]  t_io_push_payload;
  wire       [255:0]  t_vecOut_tdata;
  wire       [15:0]   t_t_dotCtrl_mulResCntOvf_0;
  wire       [7:0]    t_dotCtrl_accCntOvf;
  wire       [15:0]   t_dotCtrl_accCntOvf_1;
  wire       [15:0]   t_t_fAxpyCtrl_mulResCntOvf_0;
  wire                t_when;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_2;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_3;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_4;
  reg                 t_io_push_valid;
  reg                 t_io_pop_ready;
  reg        [1:0]    t_aSelNext;
  reg        [1:0]    t_bSelNext;
  reg                 mulResFire;
  wire                mulResFireNext;
  wire       [5:0]    tag;
  reg        [5:0]    tag_delay_1;
  reg        [5:0]    tag_delay_2;
  reg        [5:0]    tag_delay_3;
  reg        [5:0]    tag_delay_4;
  reg        [5:0]    tag_delay_5;
  reg        [5:0]    tag_delay_6;
  reg        [5:0]    tag_delay_7;
  reg        [5:0]    tag_delay_8;
  reg        [5:0]    tag_delay_9;
  reg        [5:0]    tag_delay_10;
  reg        [5:0]    tag_delay_11;
  reg        [5:0]    tag_delay_12;
  reg        [5:0]    tag_delay_13;
  reg        [5:0]    tag_delay_14;
  reg        [5:0]    tag_delay_15;
  reg        [5:0]    tag_delay_16;
  reg        [5:0]    tag_delay_17;
  reg        [5:0]    tag_delay_18;
  reg        [5:0]    tag_delay_19;
  reg        [5:0]    tag_delay_20;
  reg        [5:0]    tag_delay_21;
  reg        [5:0]    tagReduceDly;
  reg        [5:0]    tag_delay_1_1;
  reg        [5:0]    tag_delay_2_1;
  reg        [5:0]    tag_delay_3_1;
  reg        [5:0]    tag_delay_4_1;
  reg        [5:0]    tag_delay_5_1;
  reg        [5:0]    tagAddDly;
  wire                dotCond;
  wire                fAxpyCond;
  wire                pAxpyCond;
  reg                 ret_0_valid;
  wire                ret_0_ready;
  wire       [31:0]   ret_0_payload;
  reg                 ret_1_valid;
  wire                ret_1_ready;
  wire       [31:0]   ret_1_payload;
  reg                 ret_2_valid;
  wire                ret_2_ready;
  wire       [31:0]   ret_2_payload;
  wire       [1:0]    addLogic_aSel;
  wire       [1:0]    addLogic_bSel;
  wire       [15:0]   addLogic_mul_0;
  wire       [15:0]   addLogic_mul_1;
  wire       [15:0]   addLogic_mul_2;
  wire       [15:0]   addLogic_mul_3;
  wire       [15:0]   addLogic_mul_4;
  wire       [15:0]   addLogic_mul_5;
  wire       [15:0]   addLogic_mul_6;
  wire       [15:0]   addLogic_mul_7;
  wire       [15:0]   addLogic_mul_8;
  wire       [15:0]   addLogic_mul_9;
  wire       [15:0]   addLogic_mul_10;
  wire       [15:0]   addLogic_mul_11;
  wire       [15:0]   addLogic_mul_12;
  wire       [15:0]   addLogic_mul_13;
  wire       [15:0]   addLogic_mul_14;
  wire       [15:0]   addLogic_mul_15;
  wire       [15:0]   addLogic_mul_16;
  wire       [15:0]   addLogic_mul_17;
  wire       [15:0]   addLogic_mul_18;
  wire       [15:0]   addLogic_mul_19;
  wire       [15:0]   addLogic_mul_20;
  wire       [15:0]   addLogic_mul_21;
  wire       [15:0]   addLogic_mul_22;
  wire       [15:0]   addLogic_mul_23;
  wire       [15:0]   addLogic_mul_24;
  wire       [15:0]   addLogic_mul_25;
  wire       [15:0]   addLogic_mul_26;
  wire       [15:0]   addLogic_mul_27;
  wire       [15:0]   addLogic_mul_28;
  wire       [15:0]   addLogic_mul_29;
  wire       [15:0]   addLogic_mul_30;
  wire       [15:0]   addLogic_mul_31;
  wire       [15:0]   addLogic_psum_0;
  wire       [15:0]   addLogic_psum_1;
  wire       [15:0]   addLogic_psum_2;
  wire       [15:0]   addLogic_psum_3;
  wire       [15:0]   addLogic_psum_4;
  wire       [15:0]   addLogic_psum_5;
  wire       [15:0]   addLogic_psum_6;
  wire       [15:0]   addLogic_psum_7;
  wire       [15:0]   addLogic_psum_8;
  wire       [15:0]   addLogic_psum_9;
  wire       [15:0]   addLogic_psum_10;
  wire       [15:0]   addLogic_psum_11;
  wire       [15:0]   addLogic_psum_12;
  wire       [15:0]   addLogic_psum_13;
  wire       [15:0]   addLogic_psum_14;
  wire       [15:0]   addLogic_psum_15;
  wire       [15:0]   addLogic_psum_16;
  wire       [15:0]   addLogic_psum_17;
  wire       [15:0]   addLogic_psum_18;
  wire       [15:0]   addLogic_psum_19;
  wire       [15:0]   addLogic_psum_20;
  wire       [15:0]   addLogic_psum_21;
  wire       [15:0]   addLogic_psum_22;
  wire       [15:0]   addLogic_psum_23;
  wire       [15:0]   addLogic_psum_24;
  wire       [15:0]   addLogic_psum_25;
  wire       [15:0]   addLogic_psum_26;
  wire       [15:0]   addLogic_psum_27;
  wire       [15:0]   addLogic_psum_28;
  wire       [15:0]   addLogic_psum_29;
  wire       [15:0]   addLogic_psum_30;
  wire       [15:0]   addLogic_psum_31;
  wire       [15:0]   addLogic_psumDly_0;
  wire       [15:0]   addLogic_psumDly_1;
  wire       [15:0]   addLogic_psumDly_2;
  wire       [15:0]   addLogic_psumDly_3;
  wire       [15:0]   addLogic_psumDly_4;
  wire       [15:0]   addLogic_psumDly_5;
  wire       [15:0]   addLogic_psumDly_6;
  wire       [15:0]   addLogic_psumDly_7;
  wire       [15:0]   addLogic_psumDly_8;
  wire       [15:0]   addLogic_psumDly_9;
  wire       [15:0]   addLogic_psumDly_10;
  wire       [15:0]   addLogic_psumDly_11;
  wire       [15:0]   addLogic_psumDly_12;
  wire       [15:0]   addLogic_psumDly_13;
  wire       [15:0]   addLogic_psumDly_14;
  wire       [15:0]   addLogic_psumDly_15;
  wire       [15:0]   addLogic_psumDly_16;
  wire       [15:0]   addLogic_psumDly_17;
  wire       [15:0]   addLogic_psumDly_18;
  wire       [15:0]   addLogic_psumDly_19;
  wire       [15:0]   addLogic_psumDly_20;
  wire       [15:0]   addLogic_psumDly_21;
  wire       [15:0]   addLogic_psumDly_22;
  wire       [15:0]   addLogic_psumDly_23;
  wire       [15:0]   addLogic_psumDly_24;
  wire       [15:0]   addLogic_psumDly_25;
  wire       [15:0]   addLogic_psumDly_26;
  wire       [15:0]   addLogic_psumDly_27;
  wire       [15:0]   addLogic_psumDly_28;
  wire       [15:0]   addLogic_psumDly_29;
  wire       [15:0]   addLogic_psumDly_30;
  wire       [15:0]   addLogic_psumDly_31;
  wire       [15:0]   addLogic_res_0;
  wire       [15:0]   addLogic_res_1;
  wire       [15:0]   addLogic_res_2;
  wire       [15:0]   addLogic_res_3;
  wire       [15:0]   addLogic_res_4;
  wire       [15:0]   addLogic_res_5;
  wire       [15:0]   addLogic_res_6;
  wire       [15:0]   addLogic_res_7;
  wire       [15:0]   addLogic_res_8;
  wire       [15:0]   addLogic_res_9;
  wire       [15:0]   addLogic_res_10;
  wire       [15:0]   addLogic_res_11;
  wire       [15:0]   addLogic_res_12;
  wire       [15:0]   addLogic_res_13;
  wire       [15:0]   addLogic_res_14;
  wire       [15:0]   addLogic_res_15;
  wire       [15:0]   addLogic_res_16;
  wire       [15:0]   addLogic_res_17;
  wire       [15:0]   addLogic_res_18;
  wire       [15:0]   addLogic_res_19;
  wire       [15:0]   addLogic_res_20;
  wire       [15:0]   addLogic_res_21;
  wire       [15:0]   addLogic_res_22;
  wire       [15:0]   addLogic_res_23;
  wire       [15:0]   addLogic_res_24;
  wire       [15:0]   addLogic_res_25;
  wire       [15:0]   addLogic_res_26;
  wire       [15:0]   addLogic_res_27;
  wire       [15:0]   addLogic_res_28;
  wire       [15:0]   addLogic_res_29;
  wire       [15:0]   addLogic_res_30;
  wire       [15:0]   addLogic_res_31;
  wire       [15:0]   addLogic_zero;
  wire                addLogic_a_0_valid;
  wire       [15:0]   addLogic_a_0_payload;
  wire                addLogic_a_1_valid;
  wire       [15:0]   addLogic_a_1_payload;
  wire                addLogic_a_2_valid;
  wire       [15:0]   addLogic_a_2_payload;
  wire                addLogic_a_3_valid;
  wire       [15:0]   addLogic_a_3_payload;
  wire                addLogic_a_4_valid;
  wire       [15:0]   addLogic_a_4_payload;
  wire                addLogic_a_5_valid;
  wire       [15:0]   addLogic_a_5_payload;
  wire                addLogic_a_6_valid;
  wire       [15:0]   addLogic_a_6_payload;
  wire                addLogic_a_7_valid;
  wire       [15:0]   addLogic_a_7_payload;
  wire                addLogic_a_8_valid;
  wire       [15:0]   addLogic_a_8_payload;
  wire                addLogic_a_9_valid;
  wire       [15:0]   addLogic_a_9_payload;
  wire                addLogic_a_10_valid;
  wire       [15:0]   addLogic_a_10_payload;
  wire                addLogic_a_11_valid;
  wire       [15:0]   addLogic_a_11_payload;
  wire                addLogic_a_12_valid;
  wire       [15:0]   addLogic_a_12_payload;
  wire                addLogic_a_13_valid;
  wire       [15:0]   addLogic_a_13_payload;
  wire                addLogic_a_14_valid;
  wire       [15:0]   addLogic_a_14_payload;
  wire                addLogic_a_15_valid;
  wire       [15:0]   addLogic_a_15_payload;
  wire                addLogic_a_16_valid;
  wire       [15:0]   addLogic_a_16_payload;
  wire                addLogic_a_17_valid;
  wire       [15:0]   addLogic_a_17_payload;
  wire                addLogic_a_18_valid;
  wire       [15:0]   addLogic_a_18_payload;
  wire                addLogic_a_19_valid;
  wire       [15:0]   addLogic_a_19_payload;
  wire                addLogic_a_20_valid;
  wire       [15:0]   addLogic_a_20_payload;
  wire                addLogic_a_21_valid;
  wire       [15:0]   addLogic_a_21_payload;
  wire                addLogic_a_22_valid;
  wire       [15:0]   addLogic_a_22_payload;
  wire                addLogic_a_23_valid;
  wire       [15:0]   addLogic_a_23_payload;
  wire                addLogic_a_24_valid;
  wire       [15:0]   addLogic_a_24_payload;
  wire                addLogic_a_25_valid;
  wire       [15:0]   addLogic_a_25_payload;
  wire                addLogic_a_26_valid;
  wire       [15:0]   addLogic_a_26_payload;
  wire                addLogic_a_27_valid;
  wire       [15:0]   addLogic_a_27_payload;
  wire                addLogic_a_28_valid;
  wire       [15:0]   addLogic_a_28_payload;
  wire                addLogic_a_29_valid;
  wire       [15:0]   addLogic_a_29_payload;
  wire                addLogic_a_30_valid;
  wire       [15:0]   addLogic_a_30_payload;
  wire                addLogic_a_31_valid;
  wire       [15:0]   addLogic_a_31_payload;
  wire                addLogic_b_0_valid;
  wire       [15:0]   addLogic_b_0_payload;
  wire                addLogic_b_1_valid;
  wire       [15:0]   addLogic_b_1_payload;
  wire                addLogic_b_2_valid;
  wire       [15:0]   addLogic_b_2_payload;
  wire                addLogic_b_3_valid;
  wire       [15:0]   addLogic_b_3_payload;
  wire                addLogic_b_4_valid;
  wire       [15:0]   addLogic_b_4_payload;
  wire                addLogic_b_5_valid;
  wire       [15:0]   addLogic_b_5_payload;
  wire                addLogic_b_6_valid;
  wire       [15:0]   addLogic_b_6_payload;
  wire                addLogic_b_7_valid;
  wire       [15:0]   addLogic_b_7_payload;
  wire                addLogic_b_8_valid;
  wire       [15:0]   addLogic_b_8_payload;
  wire                addLogic_b_9_valid;
  wire       [15:0]   addLogic_b_9_payload;
  wire                addLogic_b_10_valid;
  wire       [15:0]   addLogic_b_10_payload;
  wire                addLogic_b_11_valid;
  wire       [15:0]   addLogic_b_11_payload;
  wire                addLogic_b_12_valid;
  wire       [15:0]   addLogic_b_12_payload;
  wire                addLogic_b_13_valid;
  wire       [15:0]   addLogic_b_13_payload;
  wire                addLogic_b_14_valid;
  wire       [15:0]   addLogic_b_14_payload;
  wire                addLogic_b_15_valid;
  wire       [15:0]   addLogic_b_15_payload;
  wire                addLogic_b_16_valid;
  wire       [15:0]   addLogic_b_16_payload;
  wire                addLogic_b_17_valid;
  wire       [15:0]   addLogic_b_17_payload;
  wire                addLogic_b_18_valid;
  wire       [15:0]   addLogic_b_18_payload;
  wire                addLogic_b_19_valid;
  wire       [15:0]   addLogic_b_19_payload;
  wire                addLogic_b_20_valid;
  wire       [15:0]   addLogic_b_20_payload;
  wire                addLogic_b_21_valid;
  wire       [15:0]   addLogic_b_21_payload;
  wire                addLogic_b_22_valid;
  wire       [15:0]   addLogic_b_22_payload;
  wire                addLogic_b_23_valid;
  wire       [15:0]   addLogic_b_23_payload;
  wire                addLogic_b_24_valid;
  wire       [15:0]   addLogic_b_24_payload;
  wire                addLogic_b_25_valid;
  wire       [15:0]   addLogic_b_25_payload;
  wire                addLogic_b_26_valid;
  wire       [15:0]   addLogic_b_26_payload;
  wire                addLogic_b_27_valid;
  wire       [15:0]   addLogic_b_27_payload;
  wire                addLogic_b_28_valid;
  wire       [15:0]   addLogic_b_28_payload;
  wire                addLogic_b_29_valid;
  wire       [15:0]   addLogic_b_29_payload;
  wire                addLogic_b_30_valid;
  wire       [15:0]   addLogic_b_30_payload;
  wire                addLogic_b_31_valid;
  wire       [15:0]   addLogic_b_31_payload;
  wire                addLogic_c_0_valid;
  wire       [15:0]   addLogic_c_0_payload;
  wire                addLogic_c_1_valid;
  wire       [15:0]   addLogic_c_1_payload;
  wire                addLogic_c_2_valid;
  wire       [15:0]   addLogic_c_2_payload;
  wire                addLogic_c_3_valid;
  wire       [15:0]   addLogic_c_3_payload;
  wire                addLogic_c_4_valid;
  wire       [15:0]   addLogic_c_4_payload;
  wire                addLogic_c_5_valid;
  wire       [15:0]   addLogic_c_5_payload;
  wire                addLogic_c_6_valid;
  wire       [15:0]   addLogic_c_6_payload;
  wire                addLogic_c_7_valid;
  wire       [15:0]   addLogic_c_7_payload;
  wire                addLogic_c_8_valid;
  wire       [15:0]   addLogic_c_8_payload;
  wire                addLogic_c_9_valid;
  wire       [15:0]   addLogic_c_9_payload;
  wire                addLogic_c_10_valid;
  wire       [15:0]   addLogic_c_10_payload;
  wire                addLogic_c_11_valid;
  wire       [15:0]   addLogic_c_11_payload;
  wire                addLogic_c_12_valid;
  wire       [15:0]   addLogic_c_12_payload;
  wire                addLogic_c_13_valid;
  wire       [15:0]   addLogic_c_13_payload;
  wire                addLogic_c_14_valid;
  wire       [15:0]   addLogic_c_14_payload;
  wire                addLogic_c_15_valid;
  wire       [15:0]   addLogic_c_15_payload;
  wire                addLogic_c_16_valid;
  wire       [15:0]   addLogic_c_16_payload;
  wire                addLogic_c_17_valid;
  wire       [15:0]   addLogic_c_17_payload;
  wire                addLogic_c_18_valid;
  wire       [15:0]   addLogic_c_18_payload;
  wire                addLogic_c_19_valid;
  wire       [15:0]   addLogic_c_19_payload;
  wire                addLogic_c_20_valid;
  wire       [15:0]   addLogic_c_20_payload;
  wire                addLogic_c_21_valid;
  wire       [15:0]   addLogic_c_21_payload;
  wire                addLogic_c_22_valid;
  wire       [15:0]   addLogic_c_22_payload;
  wire                addLogic_c_23_valid;
  wire       [15:0]   addLogic_c_23_payload;
  wire                addLogic_c_24_valid;
  wire       [15:0]   addLogic_c_24_payload;
  wire                addLogic_c_25_valid;
  wire       [15:0]   addLogic_c_25_payload;
  wire                addLogic_c_26_valid;
  wire       [15:0]   addLogic_c_26_payload;
  wire                addLogic_c_27_valid;
  wire       [15:0]   addLogic_c_27_payload;
  wire                addLogic_c_28_valid;
  wire       [15:0]   addLogic_c_28_payload;
  wire                addLogic_c_29_valid;
  wire       [15:0]   addLogic_c_29_payload;
  wire                addLogic_c_30_valid;
  wire       [15:0]   addLogic_c_30_payload;
  wire                addLogic_c_31_valid;
  wire       [15:0]   addLogic_c_31_payload;
  wire       [15:0]   addLogic_vecOut_0;
  wire       [15:0]   addLogic_vecOut_1;
  wire       [15:0]   addLogic_vecOut_2;
  wire       [15:0]   addLogic_vecOut_3;
  wire       [15:0]   addLogic_vecOut_4;
  wire       [15:0]   addLogic_vecOut_5;
  wire       [15:0]   addLogic_vecOut_6;
  wire       [15:0]   addLogic_vecOut_7;
  wire       [15:0]   addLogic_vecOut_8;
  wire       [15:0]   addLogic_vecOut_9;
  wire       [15:0]   addLogic_vecOut_10;
  wire       [15:0]   addLogic_vecOut_11;
  wire       [15:0]   addLogic_vecOut_12;
  wire       [15:0]   addLogic_vecOut_13;
  wire       [15:0]   addLogic_vecOut_14;
  wire       [15:0]   addLogic_vecOut_15;
  wire       [15:0]   addLogic_vecOut_16;
  wire       [15:0]   addLogic_vecOut_17;
  wire       [15:0]   addLogic_vecOut_18;
  wire       [15:0]   addLogic_vecOut_19;
  wire       [15:0]   addLogic_vecOut_20;
  wire       [15:0]   addLogic_vecOut_21;
  wire       [15:0]   addLogic_vecOut_22;
  wire       [15:0]   addLogic_vecOut_23;
  wire       [15:0]   addLogic_vecOut_24;
  wire       [15:0]   addLogic_vecOut_25;
  wire       [15:0]   addLogic_vecOut_26;
  wire       [15:0]   addLogic_vecOut_27;
  wire       [15:0]   addLogic_vecOut_28;
  wire       [15:0]   addLogic_vecOut_29;
  wire       [15:0]   addLogic_vecOut_30;
  wire       [15:0]   addLogic_vecOut_31;
  wire       [15:0]   addLogic_scalarOut;
  reg        [511:0]  addLogic_popDly;
  reg        [31:0]   dotCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 dotCtrl_cfgVld;
  wire       [1:0]    dotCtrl_aSelNext;
  wire       [1:0]    dotCtrl_bSelNext;
  wire                dotCtrl_enMulResCntNext;
  reg                 dotCtrl_enMulResCnt;
  reg        [7:0]    dotCtrl_muResCnt_0;
  reg        [15:0]   dotCtrl_muResCnt_1;
  reg                 dotCtrl_mulResCntOvf_0;
  reg                 dotCtrl_mulResCntOvf_1;
  reg                 dotCtrl_mulResCntOvfReduce;
  reg        [7:0]    t_dotCtrl_muResCnt_0;
  reg        [15:0]   t_dotCtrl_muResCnt_1;
  wire                t_dotCtrl_mulResCntOvf_0;
  wire                t_dotCtrl_mulResCntOvf_1;
  reg                 dotCtrl_enMulResCnt_delay_1;
  reg                 dotCtrl_enMulResCnt_delay_2;
  reg                 dotCtrl_enMulResCnt_delay_3;
  reg                 dotCtrl_enMulResCnt_delay_4;
  reg                 dotCtrl_enMulResCnt_delay_5;
  reg                 dotCtrl_enMulResCnt_delay_6;
  reg                 dotCtrl_enMulResCnt_delay_7;
  reg                 dotCtrl_enMulResCnt_delay_8;
  reg                 dotCtrl_enMulResCnt_delay_9;
  reg                 dotCtrl_enMulResCnt_delay_10;
  reg                 dotCtrl_enMulResCnt_delay_11;
  reg                 dotCtrl_enMulResCnt_delay_12;
  reg                 dotCtrl_enMulResCnt_delay_13;
  reg                 dotCtrl_enMulResCnt_delay_14;
  reg                 dotCtrl_enMulResCnt_delay_15;
  reg                 dotCtrl_enMulResCnt_delay_16;
  reg                 dotCtrl_enMulResCnt_delay_17;
  reg                 dotCtrl_enMulResCnt_delay_18;
  reg                 dotCtrl_enMulResCnt_delay_19;
  reg                 dotCtrl_enMulResCnt_delay_20;
  reg                 dotCtrl_enMulResCnt_delay_21;
  reg                 dotCtrl_enMulResCnt_delay_22;
  reg                 dotCtrl_enMulResCnt_delay_23;
  reg                 dotCtrl_enMulResCnt_delay_24;
  reg                 dotCtrl_enMulResCnt_delay_25;
  reg                 dotCtrl_enMulResCnt_delay_26;
  reg                 dotCtrl_enMulResCnt_delay_27;
  reg                 dotCtrl_enMulResCnt_delay_28;
  reg                 dotCtrl_enMulResCnt_delay_29;
  reg                 dotCtrl_enAddOutCnt;
  reg                 dotCtrl_mulResCntOvf_0_delay_1;
  reg                 dotCtrl_mulResCntOvf_0_delay_2;
  reg                 dotCtrl_mulResCntOvf_0_delay_3;
  reg                 dotCtrl_mulResCntOvf_0_delay_4;
  reg                 dotCtrl_mulResCntOvf_0_delay_5;
  reg                 dotCtrl_mulResCntOvf_0_delay_6;
  reg                 dotCtrl_mulResCntOvf_0_delay_7;
  reg                 dotCtrl_mulResCntOvf_0_delay_8;
  reg                 dotCtrl_mulResCntOvf_0_delay_9;
  reg                 dotCtrl_mulResCntOvf_0_delay_10;
  reg                 dotCtrl_mulResCntOvf_0_delay_11;
  reg                 dotCtrl_mulResCntOvf_0_delay_12;
  reg                 dotCtrl_mulResCntOvf_0_delay_13;
  reg                 dotCtrl_mulResCntOvf_0_delay_14;
  reg                 dotCtrl_mulResCntOvf_0_delay_15;
  reg                 dotCtrl_mulResCntOvf_0_delay_16;
  reg                 dotCtrl_mulResCntOvf_0_delay_17;
  reg                 dotCtrl_mulResCntOvf_0_delay_18;
  reg                 dotCtrl_mulResCntOvf_0_delay_19;
  reg                 dotCtrl_mulResCntOvf_0_delay_20;
  reg                 dotCtrl_mulResCntOvf_0_delay_21;
  reg                 dotCtrl_mulResCntOvf_0_delay_22;
  reg                 dotCtrl_mulResCntOvf_0_delay_23;
  reg                 dotCtrl_mulResCntOvf_0_delay_24;
  reg                 dotCtrl_mulResCntOvf_0_delay_25;
  reg                 dotCtrl_mulResCntOvf_0_delay_26;
  reg                 dotCtrl_mulResCntOvf_0_delay_27;
  reg                 dotCtrl_mulResCntOvf_0_delay_28;
  reg                 dotCtrl_mulResCntOvf_0_delay_29;
  reg                 dotCtrl_addOutCntOvf_0;
  reg                 dotCtrl_mulResCntOvf_1_delay_1;
  reg                 dotCtrl_mulResCntOvf_1_delay_2;
  reg                 dotCtrl_mulResCntOvf_1_delay_3;
  reg                 dotCtrl_mulResCntOvf_1_delay_4;
  reg                 dotCtrl_mulResCntOvf_1_delay_5;
  reg                 dotCtrl_mulResCntOvf_1_delay_6;
  reg                 dotCtrl_mulResCntOvf_1_delay_7;
  reg                 dotCtrl_mulResCntOvf_1_delay_8;
  reg                 dotCtrl_mulResCntOvf_1_delay_9;
  reg                 dotCtrl_mulResCntOvf_1_delay_10;
  reg                 dotCtrl_mulResCntOvf_1_delay_11;
  reg                 dotCtrl_mulResCntOvf_1_delay_12;
  reg                 dotCtrl_mulResCntOvf_1_delay_13;
  reg                 dotCtrl_mulResCntOvf_1_delay_14;
  reg                 dotCtrl_mulResCntOvf_1_delay_15;
  reg                 dotCtrl_mulResCntOvf_1_delay_16;
  reg                 dotCtrl_mulResCntOvf_1_delay_17;
  reg                 dotCtrl_mulResCntOvf_1_delay_18;
  reg                 dotCtrl_mulResCntOvf_1_delay_19;
  reg                 dotCtrl_mulResCntOvf_1_delay_20;
  reg                 dotCtrl_mulResCntOvf_1_delay_21;
  reg                 dotCtrl_mulResCntOvf_1_delay_22;
  reg                 dotCtrl_mulResCntOvf_1_delay_23;
  reg                 dotCtrl_mulResCntOvf_1_delay_24;
  reg                 dotCtrl_mulResCntOvf_1_delay_25;
  reg                 dotCtrl_mulResCntOvf_1_delay_26;
  reg                 dotCtrl_mulResCntOvf_1_delay_27;
  reg                 dotCtrl_mulResCntOvf_1_delay_28;
  reg                 dotCtrl_mulResCntOvf_1_delay_29;
  reg                 dotCtrl_addOutCntOvf_1;
  wire                dotCtrl_flagClrCond;
  reg                 dotCtrl_flagSetCond;
  reg                 dotCtrl_flagInv;
  reg                 dotCtrl_flagInvNext;
  reg        [4:0]    dotCtrl_accCnt;
  wire                dotCtrl_accCntOvf;
  reg                 dotCtrl_accCntOvf_delay_1;
  reg                 dotCtrl_accCntOvf_delay_2;
  reg                 dotCtrl_accCntOvf_delay_3;
  reg                 dotCtrl_accCntOvf_delay_4;
  reg                 dotCtrl_accCntOvf_delay_5;
  reg                 dotCtrl_accCntOvf_delay_6;
  reg                 dotCtrl_accCntOvf_delay_7;
  reg                 dotCtrl_accCntOvf_delay_8;
  reg                 dotCtrl_accCntOvf_delay_9;
  reg                 dotCtrl_accCntOvf_delay_10;
  reg                 dotCtrl_accCntOvf_delay_11;
  reg                 dotCtrl_accCntOvf_delay_12;
  reg                 dotCtrl_accCntOvf_delay_13;
  reg                 dotCtrl_accCntOvf_delay_14;
  reg                 dotCtrl_accCntOvf_delay_15;
  reg                 dotCtrl_accCntOvf_delay_16;
  reg                 dotCtrl_accCntOvf_delay_17;
  reg                 dotCtrl_accCntOvf_delay_18;
  reg                 dotCtrl_accCntOvf_delay_19;
  reg                 dotCtrl_accCntOvf_delay_20;
  reg                 dotCtrl_accCntOvf_delay_21;
  reg                 dotCtrl_accCntOvf_delay_22;
  reg                 dotCtrl_accCntOvf_delay_23;
  reg                 dotCtrl_accCntOvf_delay_24;
  reg                 dotCtrl_accCntOvf_delay_25;
  reg                 dotCtrl_accCntOvf_delay_26;
  reg                 dotCtrl_accCntOvf_delay_27;
  reg                 dotCtrl_accCntOvf_delay_28;
  reg                 dotCtrl_accCntOvf_delay_29;
  reg                 dotCtrl_accCntOvf_delay_30;
  reg                 dotCtrl_accCntOvf_delay_31;
  reg                 dotCtrl_accCntOvf_delay_32;
  reg                 dotCtrl_accCntOvf_delay_33;
  reg                 dotCtrl_accCntOvf_delay_34;
  reg                 dotCtrl_accCntOvf_delay_35;
  reg                 dotCtrl_accCntOvfDly;
  reg                 dotCtrl_accCntOvf_delay_1_1;
  reg                 dotCtrl_accCntOvf_delay_2_1;
  reg                 dotCtrl_accCntOvf_delay_3_1;
  reg                 dotCtrl_accCntOvf_delay_4_1;
  reg                 dotCtrl_accCntOvf_delay_5_1;
  reg                 dotCtrl_accCntOvf_delay_6_1;
  reg                 dotCtrl_accCntOvf_delay_7_1;
  reg                 dotCtrl_accCntOvf_delay_8_1;
  reg                 dotCtrl_accCntOvf_delay_9_1;
  reg                 dotCtrl_accCntOvf_delay_10_1;
  reg                 dotCtrl_accCntOvf_delay_11_1;
  reg                 dotCtrl_accCntOvf_delay_12_1;
  reg                 dotCtrl_accCntOvf_delay_13_1;
  reg                 dotCtrl_accCntOvf_delay_14_1;
  reg                 dotCtrl_accCntOvf_delay_15_1;
  reg                 dotCtrl_accCntOvf_delay_16_1;
  reg                 dotCtrl_accCntOvf_delay_17_1;
  reg                 dotCtrl_accCntOvf_delay_18_1;
  reg                 dotCtrl_accCntOvf_delay_19_1;
  reg                 dotCtrl_accCntOvf_delay_20_1;
  reg                 dotCtrl_accCntOvf_delay_21_1;
  reg                 dotCtrl_accCntOvf_delay_22_1;
  reg                 dotCtrl_accCntOvf_delay_23_1;
  reg                 dotCtrl_accCntOvf_delay_24_1;
  reg                 dotCtrl_accCntOvf_delay_25_1;
  reg                 dotCtrl_accCntOvf_delay_26_1;
  reg                 dotCtrl_accCntOvf_delay_27_1;
  reg                 dotCtrl_accCntOvf_delay_28_1;
  reg                 dotCtrl_accCntOvf_delay_29_1;
  reg                 dotCtrl_accCntOvf_delay_30_1;
  reg        [31:0]   fAxpyCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 fAxpyCtrl_cfgVld;
  wire                fAxpyCtrl_psumPopEn;
  wire                fAxpyCtrl_psumPushEn;
  wire                fAxpyCtrl_enMulResCntNext;
  reg                 fAxpyCtrl_enMulResCnt;
  reg        [7:0]    fAxpyCtrl_muResCnt_0;
  reg        [15:0]   fAxpyCtrl_muResCnt_1;
  reg                 fAxpyCtrl_mulResCntOvf_0;
  reg                 fAxpyCtrl_mulResCntOvf_1;
  reg                 fAxpyCtrl_mulResCntOvfReduce;
  reg        [7:0]    t_fAxpyCtrl_muResCnt_0;
  reg        [15:0]   t_fAxpyCtrl_muResCnt_1;
  wire                t_fAxpyCtrl_mulResCntOvf_0;
  wire                t_fAxpyCtrl_mulResCntOvf_1;
  reg                 fAxpyCtrl_mulResCntLastZero;
  reg                 fAxpyCtrl_mulResCntLastZeroNext;
  reg                 fAxpyCtrl_mulResCntLastNotZero;
  reg                 fAxpyCtrl_mulResCntLastNotZeroNext;
  reg                 fAxpyCtrl_enMulResCnt_delay_1;
  reg                 fAxpyCtrl_enMulResCnt_delay_2;
  reg                 fAxpyCtrl_enMulResCnt_delay_3;
  reg                 fAxpyCtrl_enMulResCnt_delay_4;
  reg                 fAxpyCtrl_enMulResCnt_delay_5;
  reg                 fAxpyCtrl_enAddOutCnt;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_1;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_2;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_3;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_4;
  reg                 fAxpyCtrl_mulResCntOvf_0_delay_5;
  reg                 fAxpyCtrl_addOutCntOvf_0;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_1;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_2;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_3;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_4;
  reg                 fAxpyCtrl_mulResCntOvf_1_delay_5;
  reg                 fAxpyCtrl_addOutCntOvf_1;
  reg                 t_fAxpyCtrl_psumPushEnReg;
  reg                 t_fAxpyCtrl_psumPushEnReg_1;
  reg                 t_fAxpyCtrl_psumPushEnReg_2;
  reg                 t_fAxpyCtrl_psumPushEnReg_3;
  reg                 t_fAxpyCtrl_psumPushEnReg_4;
  reg                 fAxpyCtrl_psumPushEnReg;
  reg                 fAxpyCtrl_resAddReady;
  wire                fAxpyCtrl_resAddReadyNext;
  reg                 fAxpyCtrl_psumPopEnReg;
  wire                fAxpyCtrl_psumPopEnRegNext;
  wire       [1:0]    fAxpyCtrl_aSelNext;
  reg        [1:0]    fAxpyCtrl_bSelNext;
  wire                fAxpyCtrl_vecOutVld;
  reg        [31:0]   pAxpyCtrl_cfgPayload;
  (* max_fanout = 100 *) reg                 pAxpyCtrl_cfgVld;
  reg                 pAxpyCtrl_cycleReduce;
  reg                 pAxpyCtrl_cycleReduceNext;
  reg                 pAxpyCtrl_cycleReduceDly;
  wire                pAxpyCtrl_enMulResCntNext;
  reg                 pAxpyCtrl_enMulResCnt;
  reg        [15:0]   pAxpyCtrl_mulResCnt;
  reg        [15:0]   pAxpyCtrl_mulResCntNext;
  wire       [2:0]    pAxpyCtrl_mulResCntLow;
  wire       [12:0]   pAxpyCtrl_mulResCntHigh;
  reg                 pAxpyCtrl_mulResCntOvf;
  wire                pAxpyCtrl_mulResCntOvfNext;
  reg                 pAxpyCtrl_mulResCntHighZero;
  reg                 pAxpyCtrl_mulResCntHighZeroNext;
  reg                 pAxpyCtrl_mulResCntHighNotZero;
  reg                 pAxpyCtrl_mulResCntHighNotZeroNext;
  reg                 pAxpyCtrl_enMulResCnt_delay_1;
  reg                 pAxpyCtrl_enMulResCnt_delay_2;
  reg                 pAxpyCtrl_enMulResCnt_delay_3;
  reg                 pAxpyCtrl_enMulResCnt_delay_4;
  reg                 pAxpyCtrl_enMulResCnt_delay_5;
  reg                 pAxpyCtrl_enMulResCntDly;
  wire                pAxpyCtrl_enAddOutCnt;
  reg                 pAxpyCtrl_mulResCntOvf_delay_1;
  reg                 pAxpyCtrl_mulResCntOvf_delay_2;
  reg                 pAxpyCtrl_mulResCntOvf_delay_3;
  reg                 pAxpyCtrl_mulResCntOvf_delay_4;
  reg                 pAxpyCtrl_mulResCntOvf_delay_5;
  reg                 pAxpyCtrl_addOutCntOvf;
  wire                pAxpyCtrl_reduceVldDly;
  wire                pAxpyCtrl_enCycleCnt;
  reg        [2:0]    pAxpyCtrl_cycleCnt;
  reg        [2:0]    pAxpyCtrl_cycleCntNext;
  (* max_fanout = 100 *) reg                 pAxpyCtrl_lastElem;
  wire       [2:0]    t_pAxpyCtrl_lastElemNext;
  wire       [15:0]   t_pAxpyCtrl_lastElemNext_1;
  wire                pAxpyCtrl_lastElemNext;
  wire                pAxpyCtrl_psumPushEn;
  reg                 pAxpyCtrl_psumPopEn;
  reg                 pAxpyCtrl_psumPopEnNext;
  wire       [1:0]    pAxpyCtrl_aSelNext;
  wire       [1:0]    pAxpyCtrl_bSelNext;
  reg                 pAxpyCtrl_bSelBit;
  wire                pAxpyCtrl_bSelBitNext;
  wire                pAxpyCtrl_flagClrCond;
  reg                 pAxpyCtrl_flagSetCond;
  reg                 pAxpyCtrl_flagInv;
  reg                 pAxpyCtrl_flagInvNext;
  reg                 pAxpyCtrl_vldToggle;
  wire                add_fifoCtrl_io_pop_fire;
  wire                pAxpyCtrl_reduceVld;
  reg                 pAxpyCtrl_psumVld;
  reg                 t_pAxpyCtrl_reduceVldDly;
  reg                 t_pAxpyCtrl_reduceVldDly_1;
  reg                 t_pAxpyCtrl_reduceVldDly_2;
  reg                 t_pAxpyCtrl_reduceVldDly_3;
  reg                 t_pAxpyCtrl_reduceVldDly_4;
  reg                 t_pAxpyCtrl_reduceVldDly_5;
  wire                pAxpyCtrl_vecOutVld;
  wire       [2:0]    selVldNextOneHot;
  wire                t_selVldNextUInt;
  wire                t_selVldNextUInt_1;
  wire       [1:0]    selVldNextUInt;
  reg        [1:0]    selVldUIntReg;
  (* keep = "true" *) reg        [1:0]    selFifoPushUInt;
  (* keep = "true" *) reg        [1:0]    selFifoPopUInt;
  (* max_fanout = 100 *) reg        [1:0]    aSel;
  (* max_fanout = 100 *) reg        [1:0]    bSel;
  wire       [1:0]    aSelNext;
  wire       [1:0]    bSelNext;
  (* max_fanout = 100 *) reg                 ready;
  reg                 readyNext;
  (* ram_style = "distributed" *) reg [511:0] t_1 [0:31];

  assign t_when = (&pAxpyCtrl_mulResCntLow);
  assign t_fAxpyCond = cfg_tdata[31 : 16];
  assign t_pAxpyCond = cfg_tdata[31 : 16];
  assign t_t_dotCtrl_mulResCntOvf_0 = ret_0_payload[31 : 16];
  assign t_dotCtrl_accCntOvf = {3'd0, dotCtrl_accCnt};
  assign t_dotCtrl_accCntOvf_1 = dotCtrl_cfgPayload[31 : 16];
  assign t_t_fAxpyCtrl_mulResCntOvf_0 = ret_1_payload[31 : 16];
  assign t_pAxpyCtrl_lastElemNext_2 = {13'd0, pAxpyCtrl_cycleCntNext};
  assign t_pAxpyCtrl_lastElemNext_3 = {13'd0, t_pAxpyCtrl_lastElemNext};
  assign t_pAxpyCtrl_lastElemNext_4 = {13'd0, t_pAxpyCtrl_lastElemNext};
  assign t_io_push_payload = {addLogic_vecOut_15,{addLogic_vecOut_14,{addLogic_vecOut_13,{addLogic_vecOut_12,{addLogic_vecOut_11,{addLogic_vecOut_10,{addLogic_vecOut_9,{addLogic_vecOut_8,{addLogic_vecOut_7,{addLogic_vecOut_6,{addLogic_vecOut_5,{addLogic_vecOut_4,{addLogic_vecOut_3,{addLogic_vecOut_2,{addLogic_vecOut_1,addLogic_vecOut_0}}}}}}}}}}}}}}};
  assign t_vecOut_tdata = {addLogic_vecOut_15,{addLogic_vecOut_14,{addLogic_vecOut_13,{addLogic_vecOut_12,{addLogic_vecOut_11,{addLogic_vecOut_10,{addLogic_vecOut_9,{addLogic_vecOut_8,{addLogic_vecOut_7,{addLogic_vecOut_6,{addLogic_vecOut_5,{addLogic_vecOut_4,{addLogic_vecOut_3,{addLogic_vecOut_2,{addLogic_vecOut_1,addLogic_vecOut_0}}}}}}}}}}}}}}};
  always @(posedge clk_0_clk) begin
    if(fifoCtrl_wrPort_valid) begin
      t_1[fifoCtrl_wrPort_payload_address] <= fifoCtrl_wrPort_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(fifoCtrl_rdPort_cmd_valid) begin
      t_1_spinal_port1 <= t_1[fifoCtrl_rdPort_cmd_payload];
    end
  end

  StreamFifoCtrl_7 fifoCtrl (
    .io_push_valid          (fifoCtrl_io_push_valid              ), //i
    .io_push_ready          (fifoCtrl_io_push_ready              ), //o
    .io_push_payload        (fifoCtrl_io_push_payload[511:0]     ), //i
    .io_pop_valid           (fifoCtrl_io_pop_valid               ), //o
    .io_pop_ready           (fifoCtrl_io_pop_ready               ), //i
    .io_pop_payload         (fifoCtrl_io_pop_payload[511:0]      ), //o
    .io_flush               (1'b0                                ), //i
    .io_occupancy           (fifoCtrl_io_occupancy[5:0]          ), //o
    .io_availability        (fifoCtrl_io_availability[5:0]       ), //o
    .rdPort_cmd_valid       (fifoCtrl_rdPort_cmd_valid           ), //o
    .rdPort_cmd_payload     (fifoCtrl_rdPort_cmd_payload[4:0]    ), //o
    .rdPort_rsp             (fifoCtrl_rdPort_rsp[511:0]          ), //i
    .wrPort_valid           (fifoCtrl_wrPort_valid               ), //o
    .wrPort_payload_address (fifoCtrl_wrPort_payload_address[4:0]), //o
    .wrPort_payload_data    (fifoCtrl_wrPort_payload_data[511:0] ), //o
    .clk_0_clk              (clk_0_clk                           ), //i
    .clk_0_resetn           (clk_0_resetn                        )  //i
  );
  fp16add6 addLogic_a_0_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_0_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_0_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_0_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_0_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_0_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_0_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_1_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_1_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_1_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_1_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_1_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_1_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_1_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_2_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_2_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_2_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_2_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_2_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_2_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_2_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_3_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_3_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_3_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_3_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_3_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_3_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_3_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_4_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_4_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_4_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_4_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_4_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_4_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_4_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_5_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_5_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_5_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_5_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_5_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_5_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_5_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_6_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_6_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_6_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_6_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_6_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_6_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_6_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_7_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_7_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_7_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_7_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_7_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_7_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_7_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_8_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_8_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_8_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_8_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_8_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_8_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_8_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_9_add_ip (
    .aclk                 (clk_0_clk                                    ), //i
    .s_axis_a_tvalid      (addLogic_a_9_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_9_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_9_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_9_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_9_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_9_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_10_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_10_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_10_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_10_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_10_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_10_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_10_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_11_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_11_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_11_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_11_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_11_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_11_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_11_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_12_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_12_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_12_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_12_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_12_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_12_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_12_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_13_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_13_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_13_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_13_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_13_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_13_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_13_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_14_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_14_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_14_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_14_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_14_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_14_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_14_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_15_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_15_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_15_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_15_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_15_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_15_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_15_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_16_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_16_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_16_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_16_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_16_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_16_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_16_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_17_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_17_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_17_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_17_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_17_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_17_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_17_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_18_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_18_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_18_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_18_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_18_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_18_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_18_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_19_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_19_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_19_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_19_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_19_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_19_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_19_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_20_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_20_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_20_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_20_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_20_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_20_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_20_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_21_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_21_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_21_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_21_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_21_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_21_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_21_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_22_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_22_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_22_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_22_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_22_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_22_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_22_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_23_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_23_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_23_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_23_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_23_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_23_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_23_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_24_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_24_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_24_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_24_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_24_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_24_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_24_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_25_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_25_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_25_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_25_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_25_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_25_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_25_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_26_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_26_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_26_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_26_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_26_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_26_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_26_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_27_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_27_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_27_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_27_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_27_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_27_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_27_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_28_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_28_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_28_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_28_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_28_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_28_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_28_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_29_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_29_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_29_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_29_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_29_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_29_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_29_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_30_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_30_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_30_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_30_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_30_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_30_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_30_add_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16add6 addLogic_a_31_add_ip (
    .aclk                 (clk_0_clk                                     ), //i
    .s_axis_a_tvalid      (addLogic_a_31_valid                           ), //i
    .s_axis_a_tdata       (addLogic_a_31_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (addLogic_b_31_valid                           ), //i
    .s_axis_b_tdata       (addLogic_b_31_payload[15:0]                   ), //i
    .m_axis_result_tvalid (addLogic_a_31_add_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (addLogic_a_31_add_ip_m_axis_result_tdata[15:0])  //o
  );
  always @(*) begin
    case(addLogic_aSel)
      2'b00 : begin
        t_addLogic_a_0_payload = addLogic_mul_0;
        t_addLogic_a_1_payload = addLogic_mul_1;
        t_addLogic_a_2_payload = addLogic_mul_2;
        t_addLogic_a_3_payload = addLogic_mul_3;
        t_addLogic_a_4_payload = addLogic_mul_4;
        t_addLogic_a_5_payload = addLogic_mul_5;
        t_addLogic_a_6_payload = addLogic_mul_6;
        t_addLogic_a_7_payload = addLogic_mul_7;
        t_addLogic_a_8_payload = addLogic_mul_8;
        t_addLogic_a_9_payload = addLogic_mul_9;
        t_addLogic_a_10_payload = addLogic_mul_10;
        t_addLogic_a_11_payload = addLogic_mul_11;
        t_addLogic_a_12_payload = addLogic_mul_12;
        t_addLogic_a_13_payload = addLogic_mul_13;
        t_addLogic_a_14_payload = addLogic_mul_14;
        t_addLogic_a_15_payload = addLogic_mul_15;
        t_addLogic_a_16_payload = addLogic_mul_16;
        t_addLogic_a_17_payload = addLogic_mul_17;
        t_addLogic_a_18_payload = addLogic_mul_18;
        t_addLogic_a_19_payload = addLogic_mul_19;
        t_addLogic_a_20_payload = addLogic_mul_20;
        t_addLogic_a_21_payload = addLogic_mul_21;
        t_addLogic_a_22_payload = addLogic_mul_22;
        t_addLogic_a_23_payload = addLogic_mul_23;
        t_addLogic_a_24_payload = addLogic_mul_24;
        t_addLogic_a_25_payload = addLogic_mul_25;
        t_addLogic_a_26_payload = addLogic_mul_26;
        t_addLogic_a_27_payload = addLogic_mul_27;
        t_addLogic_a_28_payload = addLogic_mul_28;
        t_addLogic_a_29_payload = addLogic_mul_29;
        t_addLogic_a_30_payload = addLogic_mul_30;
        t_addLogic_a_31_payload = addLogic_mul_31;
      end
      2'b01 : begin
        t_addLogic_a_0_payload = addLogic_c_1_payload;
        t_addLogic_a_1_payload = addLogic_c_3_payload;
        t_addLogic_a_2_payload = addLogic_c_5_payload;
        t_addLogic_a_3_payload = addLogic_c_7_payload;
        t_addLogic_a_4_payload = addLogic_c_9_payload;
        t_addLogic_a_5_payload = addLogic_c_11_payload;
        t_addLogic_a_6_payload = addLogic_c_13_payload;
        t_addLogic_a_7_payload = addLogic_c_15_payload;
        t_addLogic_a_8_payload = addLogic_c_17_payload;
        t_addLogic_a_9_payload = addLogic_c_19_payload;
        t_addLogic_a_10_payload = addLogic_c_21_payload;
        t_addLogic_a_11_payload = addLogic_c_23_payload;
        t_addLogic_a_12_payload = addLogic_c_25_payload;
        t_addLogic_a_13_payload = addLogic_c_27_payload;
        t_addLogic_a_14_payload = addLogic_c_29_payload;
        t_addLogic_a_15_payload = addLogic_mul_0;
        t_addLogic_a_16_payload = addLogic_mul_2;
        t_addLogic_a_17_payload = addLogic_mul_4;
        t_addLogic_a_18_payload = addLogic_mul_6;
        t_addLogic_a_19_payload = addLogic_mul_8;
        t_addLogic_a_20_payload = addLogic_mul_10;
        t_addLogic_a_21_payload = addLogic_mul_12;
        t_addLogic_a_22_payload = addLogic_mul_14;
        t_addLogic_a_23_payload = addLogic_mul_16;
        t_addLogic_a_24_payload = addLogic_mul_18;
        t_addLogic_a_25_payload = addLogic_mul_20;
        t_addLogic_a_26_payload = addLogic_mul_22;
        t_addLogic_a_27_payload = addLogic_mul_24;
        t_addLogic_a_28_payload = addLogic_mul_26;
        t_addLogic_a_29_payload = addLogic_mul_28;
        t_addLogic_a_30_payload = addLogic_mul_30;
        t_addLogic_a_31_payload = addLogic_zero;
      end
      2'b10 : begin
        t_addLogic_a_0_payload = addLogic_psumDly_0;
        t_addLogic_a_1_payload = addLogic_psumDly_1;
        t_addLogic_a_2_payload = addLogic_psumDly_2;
        t_addLogic_a_3_payload = addLogic_psumDly_3;
        t_addLogic_a_4_payload = addLogic_psumDly_4;
        t_addLogic_a_5_payload = addLogic_psumDly_5;
        t_addLogic_a_6_payload = addLogic_psumDly_6;
        t_addLogic_a_7_payload = addLogic_psumDly_7;
        t_addLogic_a_8_payload = addLogic_psumDly_8;
        t_addLogic_a_9_payload = addLogic_psumDly_9;
        t_addLogic_a_10_payload = addLogic_psumDly_10;
        t_addLogic_a_11_payload = addLogic_psumDly_11;
        t_addLogic_a_12_payload = addLogic_psumDly_12;
        t_addLogic_a_13_payload = addLogic_psumDly_13;
        t_addLogic_a_14_payload = addLogic_psumDly_14;
        t_addLogic_a_15_payload = addLogic_psumDly_15;
        t_addLogic_a_16_payload = addLogic_psumDly_16;
        t_addLogic_a_17_payload = addLogic_psumDly_17;
        t_addLogic_a_18_payload = addLogic_psumDly_18;
        t_addLogic_a_19_payload = addLogic_psumDly_19;
        t_addLogic_a_20_payload = addLogic_psumDly_20;
        t_addLogic_a_21_payload = addLogic_psumDly_21;
        t_addLogic_a_22_payload = addLogic_psumDly_22;
        t_addLogic_a_23_payload = addLogic_psumDly_23;
        t_addLogic_a_24_payload = addLogic_psumDly_24;
        t_addLogic_a_25_payload = addLogic_psumDly_25;
        t_addLogic_a_26_payload = addLogic_psumDly_26;
        t_addLogic_a_27_payload = addLogic_psumDly_27;
        t_addLogic_a_28_payload = addLogic_psumDly_28;
        t_addLogic_a_29_payload = addLogic_psumDly_29;
        t_addLogic_a_30_payload = addLogic_psumDly_30;
        t_addLogic_a_31_payload = addLogic_psumDly_31;
      end
      default : begin
        t_addLogic_a_0_payload = addLogic_zero;
        t_addLogic_a_1_payload = addLogic_zero;
        t_addLogic_a_2_payload = addLogic_zero;
        t_addLogic_a_3_payload = addLogic_zero;
        t_addLogic_a_4_payload = addLogic_zero;
        t_addLogic_a_5_payload = addLogic_zero;
        t_addLogic_a_6_payload = addLogic_zero;
        t_addLogic_a_7_payload = addLogic_zero;
        t_addLogic_a_8_payload = addLogic_zero;
        t_addLogic_a_9_payload = addLogic_zero;
        t_addLogic_a_10_payload = addLogic_zero;
        t_addLogic_a_11_payload = addLogic_zero;
        t_addLogic_a_12_payload = addLogic_zero;
        t_addLogic_a_13_payload = addLogic_zero;
        t_addLogic_a_14_payload = addLogic_zero;
        t_addLogic_a_15_payload = addLogic_zero;
        t_addLogic_a_16_payload = addLogic_zero;
        t_addLogic_a_17_payload = addLogic_zero;
        t_addLogic_a_18_payload = addLogic_zero;
        t_addLogic_a_19_payload = addLogic_zero;
        t_addLogic_a_20_payload = addLogic_zero;
        t_addLogic_a_21_payload = addLogic_zero;
        t_addLogic_a_22_payload = addLogic_zero;
        t_addLogic_a_23_payload = addLogic_zero;
        t_addLogic_a_24_payload = addLogic_zero;
        t_addLogic_a_25_payload = addLogic_zero;
        t_addLogic_a_26_payload = addLogic_zero;
        t_addLogic_a_27_payload = addLogic_zero;
        t_addLogic_a_28_payload = addLogic_zero;
        t_addLogic_a_29_payload = addLogic_zero;
        t_addLogic_a_30_payload = addLogic_zero;
        t_addLogic_a_31_payload = addLogic_zero;
      end
    endcase
  end

  always @(*) begin
    case(addLogic_bSel)
      2'b00 : begin
        t_addLogic_b_0_payload = addLogic_psum_0;
        t_addLogic_b_1_payload = addLogic_psum_1;
        t_addLogic_b_2_payload = addLogic_psum_2;
        t_addLogic_b_3_payload = addLogic_psum_3;
        t_addLogic_b_4_payload = addLogic_psum_4;
        t_addLogic_b_5_payload = addLogic_psum_5;
        t_addLogic_b_6_payload = addLogic_psum_6;
        t_addLogic_b_7_payload = addLogic_psum_7;
        t_addLogic_b_8_payload = addLogic_psum_8;
        t_addLogic_b_9_payload = addLogic_psum_9;
        t_addLogic_b_10_payload = addLogic_psum_10;
        t_addLogic_b_11_payload = addLogic_psum_11;
        t_addLogic_b_12_payload = addLogic_psum_12;
        t_addLogic_b_13_payload = addLogic_psum_13;
        t_addLogic_b_14_payload = addLogic_psum_14;
        t_addLogic_b_15_payload = addLogic_psum_15;
        t_addLogic_b_16_payload = addLogic_psum_16;
        t_addLogic_b_17_payload = addLogic_psum_17;
        t_addLogic_b_18_payload = addLogic_psum_18;
        t_addLogic_b_19_payload = addLogic_psum_19;
        t_addLogic_b_20_payload = addLogic_psum_20;
        t_addLogic_b_21_payload = addLogic_psum_21;
        t_addLogic_b_22_payload = addLogic_psum_22;
        t_addLogic_b_23_payload = addLogic_psum_23;
        t_addLogic_b_24_payload = addLogic_psum_24;
        t_addLogic_b_25_payload = addLogic_psum_25;
        t_addLogic_b_26_payload = addLogic_psum_26;
        t_addLogic_b_27_payload = addLogic_psum_27;
        t_addLogic_b_28_payload = addLogic_psum_28;
        t_addLogic_b_29_payload = addLogic_psum_29;
        t_addLogic_b_30_payload = addLogic_psum_30;
        t_addLogic_b_31_payload = addLogic_psum_31;
      end
      2'b01 : begin
        t_addLogic_b_0_payload = addLogic_c_2_payload;
        t_addLogic_b_1_payload = addLogic_c_4_payload;
        t_addLogic_b_2_payload = addLogic_c_6_payload;
        t_addLogic_b_3_payload = addLogic_c_8_payload;
        t_addLogic_b_4_payload = addLogic_c_10_payload;
        t_addLogic_b_5_payload = addLogic_c_12_payload;
        t_addLogic_b_6_payload = addLogic_c_14_payload;
        t_addLogic_b_7_payload = addLogic_c_16_payload;
        t_addLogic_b_8_payload = addLogic_c_18_payload;
        t_addLogic_b_9_payload = addLogic_c_20_payload;
        t_addLogic_b_10_payload = addLogic_c_22_payload;
        t_addLogic_b_11_payload = addLogic_c_24_payload;
        t_addLogic_b_12_payload = addLogic_c_26_payload;
        t_addLogic_b_13_payload = addLogic_c_28_payload;
        t_addLogic_b_14_payload = addLogic_c_30_payload;
        t_addLogic_b_15_payload = addLogic_mul_1;
        t_addLogic_b_16_payload = addLogic_mul_3;
        t_addLogic_b_17_payload = addLogic_mul_5;
        t_addLogic_b_18_payload = addLogic_mul_7;
        t_addLogic_b_19_payload = addLogic_mul_9;
        t_addLogic_b_20_payload = addLogic_mul_11;
        t_addLogic_b_21_payload = addLogic_mul_13;
        t_addLogic_b_22_payload = addLogic_mul_15;
        t_addLogic_b_23_payload = addLogic_mul_17;
        t_addLogic_b_24_payload = addLogic_mul_19;
        t_addLogic_b_25_payload = addLogic_mul_21;
        t_addLogic_b_26_payload = addLogic_mul_23;
        t_addLogic_b_27_payload = addLogic_mul_25;
        t_addLogic_b_28_payload = addLogic_mul_27;
        t_addLogic_b_29_payload = addLogic_mul_29;
        t_addLogic_b_30_payload = addLogic_mul_31;
        t_addLogic_b_31_payload = addLogic_zero;
      end
      2'b10 : begin
        t_addLogic_b_0_payload = addLogic_res_0;
        t_addLogic_b_1_payload = addLogic_res_1;
        t_addLogic_b_2_payload = addLogic_res_2;
        t_addLogic_b_3_payload = addLogic_res_3;
        t_addLogic_b_4_payload = addLogic_res_4;
        t_addLogic_b_5_payload = addLogic_res_5;
        t_addLogic_b_6_payload = addLogic_res_6;
        t_addLogic_b_7_payload = addLogic_res_7;
        t_addLogic_b_8_payload = addLogic_res_8;
        t_addLogic_b_9_payload = addLogic_res_9;
        t_addLogic_b_10_payload = addLogic_res_10;
        t_addLogic_b_11_payload = addLogic_res_11;
        t_addLogic_b_12_payload = addLogic_res_12;
        t_addLogic_b_13_payload = addLogic_res_13;
        t_addLogic_b_14_payload = addLogic_res_14;
        t_addLogic_b_15_payload = addLogic_res_15;
        t_addLogic_b_16_payload = addLogic_res_16;
        t_addLogic_b_17_payload = addLogic_res_17;
        t_addLogic_b_18_payload = addLogic_res_18;
        t_addLogic_b_19_payload = addLogic_res_19;
        t_addLogic_b_20_payload = addLogic_res_20;
        t_addLogic_b_21_payload = addLogic_res_21;
        t_addLogic_b_22_payload = addLogic_res_22;
        t_addLogic_b_23_payload = addLogic_res_23;
        t_addLogic_b_24_payload = addLogic_res_24;
        t_addLogic_b_25_payload = addLogic_res_25;
        t_addLogic_b_26_payload = addLogic_res_26;
        t_addLogic_b_27_payload = addLogic_res_27;
        t_addLogic_b_28_payload = addLogic_res_28;
        t_addLogic_b_29_payload = addLogic_res_29;
        t_addLogic_b_30_payload = addLogic_res_30;
        t_addLogic_b_31_payload = addLogic_res_31;
      end
      default : begin
        t_addLogic_b_0_payload = addLogic_zero;
        t_addLogic_b_1_payload = addLogic_zero;
        t_addLogic_b_2_payload = addLogic_zero;
        t_addLogic_b_3_payload = addLogic_zero;
        t_addLogic_b_4_payload = addLogic_zero;
        t_addLogic_b_5_payload = addLogic_zero;
        t_addLogic_b_6_payload = addLogic_zero;
        t_addLogic_b_7_payload = addLogic_zero;
        t_addLogic_b_8_payload = addLogic_zero;
        t_addLogic_b_9_payload = addLogic_zero;
        t_addLogic_b_10_payload = addLogic_zero;
        t_addLogic_b_11_payload = addLogic_zero;
        t_addLogic_b_12_payload = addLogic_zero;
        t_addLogic_b_13_payload = addLogic_zero;
        t_addLogic_b_14_payload = addLogic_zero;
        t_addLogic_b_15_payload = addLogic_zero;
        t_addLogic_b_16_payload = addLogic_zero;
        t_addLogic_b_17_payload = addLogic_zero;
        t_addLogic_b_18_payload = addLogic_zero;
        t_addLogic_b_19_payload = addLogic_zero;
        t_addLogic_b_20_payload = addLogic_zero;
        t_addLogic_b_21_payload = addLogic_zero;
        t_addLogic_b_22_payload = addLogic_zero;
        t_addLogic_b_23_payload = addLogic_zero;
        t_addLogic_b_24_payload = addLogic_zero;
        t_addLogic_b_25_payload = addLogic_zero;
        t_addLogic_b_26_payload = addLogic_zero;
        t_addLogic_b_27_payload = addLogic_zero;
        t_addLogic_b_28_payload = addLogic_zero;
        t_addLogic_b_29_payload = addLogic_zero;
        t_addLogic_b_30_payload = addLogic_zero;
        t_addLogic_b_31_payload = addLogic_zero;
      end
    endcase
  end

  always @(*) begin
    case(selFifoPushUInt)
      2'b00 : t_io_push_valid = 1'b0;
      2'b01 : t_io_push_valid = fAxpyCtrl_psumPushEn;
      default : t_io_push_valid = pAxpyCtrl_psumPushEn;
    endcase
  end

  always @(*) begin
    case(selFifoPopUInt)
      2'b00 : t_io_pop_ready = 1'b0;
      2'b01 : t_io_pop_ready = fAxpyCtrl_psumPopEn;
      default : t_io_pop_ready = pAxpyCtrl_psumPopEn;
    endcase
  end

  always @(*) begin
    case(selVldNextUInt)
      2'b00 : begin
        t_aSelNext = dotCtrl_aSelNext;
        t_bSelNext = dotCtrl_bSelNext;
      end
      2'b01 : begin
        t_aSelNext = fAxpyCtrl_aSelNext;
        t_bSelNext = fAxpyCtrl_bSelNext;
      end
      default : begin
        t_aSelNext = pAxpyCtrl_aSelNext;
        t_bSelNext = pAxpyCtrl_bSelNext;
      end
    endcase
  end

  assign tag = cfg_tdata[31 : 26];
  assign dotCond = (! cfg_tdata[24]);
  assign fAxpyCond = (cfg_tdata[24] && (t_fAxpyCond[7 : 0] != 8'h0));
  assign pAxpyCond = (cfg_tdata[24] && (t_pAxpyCond[7 : 0] == 8'h0));
  always @(*) begin
    ret_0_valid = (cfg_tvalid && dotCond);
    if(ret_0_ready) begin
      ret_0_valid = 1'b0;
    end
  end

  assign ret_0_payload = cfg_tdata;
  always @(*) begin
    ret_1_valid = (cfg_tvalid && fAxpyCond);
    if(ret_1_ready) begin
      ret_1_valid = 1'b0;
    end
  end

  assign ret_1_payload = cfg_tdata;
  always @(*) begin
    ret_2_valid = (cfg_tvalid && pAxpyCond);
    if(ret_2_ready) begin
      ret_2_valid = 1'b0;
    end
  end

  assign ret_2_payload = cfg_tdata;
  assign cfg_tready = (|{(ret_2_ready && pAxpyCond),{(ret_1_ready && fAxpyCond),(ret_0_ready && dotCond)}});
  assign fifoCtrl_rdPort_rsp = t_1_spinal_port1;
  assign addLogic_zero = 16'h0;
  assign addLogic_mul_0 = mulRes_tdata[15 : 0];
  assign addLogic_mul_1 = mulRes_tdata[31 : 16];
  assign addLogic_mul_2 = mulRes_tdata[47 : 32];
  assign addLogic_mul_3 = mulRes_tdata[63 : 48];
  assign addLogic_mul_4 = mulRes_tdata[79 : 64];
  assign addLogic_mul_5 = mulRes_tdata[95 : 80];
  assign addLogic_mul_6 = mulRes_tdata[111 : 96];
  assign addLogic_mul_7 = mulRes_tdata[127 : 112];
  assign addLogic_mul_8 = mulRes_tdata[143 : 128];
  assign addLogic_mul_9 = mulRes_tdata[159 : 144];
  assign addLogic_mul_10 = mulRes_tdata[175 : 160];
  assign addLogic_mul_11 = mulRes_tdata[191 : 176];
  assign addLogic_mul_12 = mulRes_tdata[207 : 192];
  assign addLogic_mul_13 = mulRes_tdata[223 : 208];
  assign addLogic_mul_14 = mulRes_tdata[239 : 224];
  assign addLogic_mul_15 = mulRes_tdata[255 : 240];
  assign addLogic_mul_16 = mulRes_tdata[271 : 256];
  assign addLogic_mul_17 = mulRes_tdata[287 : 272];
  assign addLogic_mul_18 = mulRes_tdata[303 : 288];
  assign addLogic_mul_19 = mulRes_tdata[319 : 304];
  assign addLogic_mul_20 = mulRes_tdata[335 : 320];
  assign addLogic_mul_21 = mulRes_tdata[351 : 336];
  assign addLogic_mul_22 = mulRes_tdata[367 : 352];
  assign addLogic_mul_23 = mulRes_tdata[383 : 368];
  assign addLogic_mul_24 = mulRes_tdata[399 : 384];
  assign addLogic_mul_25 = mulRes_tdata[415 : 400];
  assign addLogic_mul_26 = mulRes_tdata[431 : 416];
  assign addLogic_mul_27 = mulRes_tdata[447 : 432];
  assign addLogic_mul_28 = mulRes_tdata[463 : 448];
  assign addLogic_mul_29 = mulRes_tdata[479 : 464];
  assign addLogic_mul_30 = mulRes_tdata[495 : 480];
  assign addLogic_mul_31 = mulRes_tdata[511 : 496];
  assign addLogic_res_0 = resAdd_tdata[15 : 0];
  assign addLogic_res_1 = resAdd_tdata[31 : 16];
  assign addLogic_res_2 = resAdd_tdata[47 : 32];
  assign addLogic_res_3 = resAdd_tdata[63 : 48];
  assign addLogic_res_4 = resAdd_tdata[79 : 64];
  assign addLogic_res_5 = resAdd_tdata[95 : 80];
  assign addLogic_res_6 = resAdd_tdata[111 : 96];
  assign addLogic_res_7 = resAdd_tdata[127 : 112];
  assign addLogic_res_8 = resAdd_tdata[143 : 128];
  assign addLogic_res_9 = resAdd_tdata[159 : 144];
  assign addLogic_res_10 = resAdd_tdata[175 : 160];
  assign addLogic_res_11 = resAdd_tdata[191 : 176];
  assign addLogic_res_12 = resAdd_tdata[207 : 192];
  assign addLogic_res_13 = resAdd_tdata[223 : 208];
  assign addLogic_res_14 = resAdd_tdata[239 : 224];
  assign addLogic_res_15 = resAdd_tdata[255 : 240];
  assign addLogic_res_16 = resAdd_tdata[271 : 256];
  assign addLogic_res_17 = resAdd_tdata[287 : 272];
  assign addLogic_res_18 = resAdd_tdata[303 : 288];
  assign addLogic_res_19 = resAdd_tdata[319 : 304];
  assign addLogic_res_20 = resAdd_tdata[335 : 320];
  assign addLogic_res_21 = resAdd_tdata[351 : 336];
  assign addLogic_res_22 = resAdd_tdata[367 : 352];
  assign addLogic_res_23 = resAdd_tdata[383 : 368];
  assign addLogic_res_24 = resAdd_tdata[399 : 384];
  assign addLogic_res_25 = resAdd_tdata[415 : 400];
  assign addLogic_res_26 = resAdd_tdata[431 : 416];
  assign addLogic_res_27 = resAdd_tdata[447 : 432];
  assign addLogic_res_28 = resAdd_tdata[463 : 448];
  assign addLogic_res_29 = resAdd_tdata[479 : 464];
  assign addLogic_res_30 = resAdd_tdata[495 : 480];
  assign addLogic_res_31 = resAdd_tdata[511 : 496];
  assign addLogic_a_0_valid = 1'b1;
  assign addLogic_a_1_valid = 1'b1;
  assign addLogic_a_2_valid = 1'b1;
  assign addLogic_a_3_valid = 1'b1;
  assign addLogic_a_4_valid = 1'b1;
  assign addLogic_a_5_valid = 1'b1;
  assign addLogic_a_6_valid = 1'b1;
  assign addLogic_a_7_valid = 1'b1;
  assign addLogic_a_8_valid = 1'b1;
  assign addLogic_a_9_valid = 1'b1;
  assign addLogic_a_10_valid = 1'b1;
  assign addLogic_a_11_valid = 1'b1;
  assign addLogic_a_12_valid = 1'b1;
  assign addLogic_a_13_valid = 1'b1;
  assign addLogic_a_14_valid = 1'b1;
  assign addLogic_a_15_valid = 1'b1;
  assign addLogic_a_16_valid = 1'b1;
  assign addLogic_a_17_valid = 1'b1;
  assign addLogic_a_18_valid = 1'b1;
  assign addLogic_a_19_valid = 1'b1;
  assign addLogic_a_20_valid = 1'b1;
  assign addLogic_a_21_valid = 1'b1;
  assign addLogic_a_22_valid = 1'b1;
  assign addLogic_a_23_valid = 1'b1;
  assign addLogic_a_24_valid = 1'b1;
  assign addLogic_a_25_valid = 1'b1;
  assign addLogic_a_26_valid = 1'b1;
  assign addLogic_a_27_valid = 1'b1;
  assign addLogic_a_28_valid = 1'b1;
  assign addLogic_a_29_valid = 1'b1;
  assign addLogic_a_30_valid = 1'b1;
  assign addLogic_a_31_valid = 1'b1;
  assign addLogic_b_0_valid = 1'b1;
  assign addLogic_b_1_valid = 1'b1;
  assign addLogic_b_2_valid = 1'b1;
  assign addLogic_b_3_valid = 1'b1;
  assign addLogic_b_4_valid = 1'b1;
  assign addLogic_b_5_valid = 1'b1;
  assign addLogic_b_6_valid = 1'b1;
  assign addLogic_b_7_valid = 1'b1;
  assign addLogic_b_8_valid = 1'b1;
  assign addLogic_b_9_valid = 1'b1;
  assign addLogic_b_10_valid = 1'b1;
  assign addLogic_b_11_valid = 1'b1;
  assign addLogic_b_12_valid = 1'b1;
  assign addLogic_b_13_valid = 1'b1;
  assign addLogic_b_14_valid = 1'b1;
  assign addLogic_b_15_valid = 1'b1;
  assign addLogic_b_16_valid = 1'b1;
  assign addLogic_b_17_valid = 1'b1;
  assign addLogic_b_18_valid = 1'b1;
  assign addLogic_b_19_valid = 1'b1;
  assign addLogic_b_20_valid = 1'b1;
  assign addLogic_b_21_valid = 1'b1;
  assign addLogic_b_22_valid = 1'b1;
  assign addLogic_b_23_valid = 1'b1;
  assign addLogic_b_24_valid = 1'b1;
  assign addLogic_b_25_valid = 1'b1;
  assign addLogic_b_26_valid = 1'b1;
  assign addLogic_b_27_valid = 1'b1;
  assign addLogic_b_28_valid = 1'b1;
  assign addLogic_b_29_valid = 1'b1;
  assign addLogic_b_30_valid = 1'b1;
  assign addLogic_b_31_valid = 1'b1;
  assign addLogic_c_0_valid = addLogic_a_0_add_ip_m_axis_result_tvalid;
  assign addLogic_c_0_payload = addLogic_a_0_add_ip_m_axis_result_tdata;
  assign addLogic_c_1_valid = addLogic_a_1_add_ip_m_axis_result_tvalid;
  assign addLogic_c_1_payload = addLogic_a_1_add_ip_m_axis_result_tdata;
  assign addLogic_c_2_valid = addLogic_a_2_add_ip_m_axis_result_tvalid;
  assign addLogic_c_2_payload = addLogic_a_2_add_ip_m_axis_result_tdata;
  assign addLogic_c_3_valid = addLogic_a_3_add_ip_m_axis_result_tvalid;
  assign addLogic_c_3_payload = addLogic_a_3_add_ip_m_axis_result_tdata;
  assign addLogic_c_4_valid = addLogic_a_4_add_ip_m_axis_result_tvalid;
  assign addLogic_c_4_payload = addLogic_a_4_add_ip_m_axis_result_tdata;
  assign addLogic_c_5_valid = addLogic_a_5_add_ip_m_axis_result_tvalid;
  assign addLogic_c_5_payload = addLogic_a_5_add_ip_m_axis_result_tdata;
  assign addLogic_c_6_valid = addLogic_a_6_add_ip_m_axis_result_tvalid;
  assign addLogic_c_6_payload = addLogic_a_6_add_ip_m_axis_result_tdata;
  assign addLogic_c_7_valid = addLogic_a_7_add_ip_m_axis_result_tvalid;
  assign addLogic_c_7_payload = addLogic_a_7_add_ip_m_axis_result_tdata;
  assign addLogic_c_8_valid = addLogic_a_8_add_ip_m_axis_result_tvalid;
  assign addLogic_c_8_payload = addLogic_a_8_add_ip_m_axis_result_tdata;
  assign addLogic_c_9_valid = addLogic_a_9_add_ip_m_axis_result_tvalid;
  assign addLogic_c_9_payload = addLogic_a_9_add_ip_m_axis_result_tdata;
  assign addLogic_c_10_valid = addLogic_a_10_add_ip_m_axis_result_tvalid;
  assign addLogic_c_10_payload = addLogic_a_10_add_ip_m_axis_result_tdata;
  assign addLogic_c_11_valid = addLogic_a_11_add_ip_m_axis_result_tvalid;
  assign addLogic_c_11_payload = addLogic_a_11_add_ip_m_axis_result_tdata;
  assign addLogic_c_12_valid = addLogic_a_12_add_ip_m_axis_result_tvalid;
  assign addLogic_c_12_payload = addLogic_a_12_add_ip_m_axis_result_tdata;
  assign addLogic_c_13_valid = addLogic_a_13_add_ip_m_axis_result_tvalid;
  assign addLogic_c_13_payload = addLogic_a_13_add_ip_m_axis_result_tdata;
  assign addLogic_c_14_valid = addLogic_a_14_add_ip_m_axis_result_tvalid;
  assign addLogic_c_14_payload = addLogic_a_14_add_ip_m_axis_result_tdata;
  assign addLogic_c_15_valid = addLogic_a_15_add_ip_m_axis_result_tvalid;
  assign addLogic_c_15_payload = addLogic_a_15_add_ip_m_axis_result_tdata;
  assign addLogic_c_16_valid = addLogic_a_16_add_ip_m_axis_result_tvalid;
  assign addLogic_c_16_payload = addLogic_a_16_add_ip_m_axis_result_tdata;
  assign addLogic_c_17_valid = addLogic_a_17_add_ip_m_axis_result_tvalid;
  assign addLogic_c_17_payload = addLogic_a_17_add_ip_m_axis_result_tdata;
  assign addLogic_c_18_valid = addLogic_a_18_add_ip_m_axis_result_tvalid;
  assign addLogic_c_18_payload = addLogic_a_18_add_ip_m_axis_result_tdata;
  assign addLogic_c_19_valid = addLogic_a_19_add_ip_m_axis_result_tvalid;
  assign addLogic_c_19_payload = addLogic_a_19_add_ip_m_axis_result_tdata;
  assign addLogic_c_20_valid = addLogic_a_20_add_ip_m_axis_result_tvalid;
  assign addLogic_c_20_payload = addLogic_a_20_add_ip_m_axis_result_tdata;
  assign addLogic_c_21_valid = addLogic_a_21_add_ip_m_axis_result_tvalid;
  assign addLogic_c_21_payload = addLogic_a_21_add_ip_m_axis_result_tdata;
  assign addLogic_c_22_valid = addLogic_a_22_add_ip_m_axis_result_tvalid;
  assign addLogic_c_22_payload = addLogic_a_22_add_ip_m_axis_result_tdata;
  assign addLogic_c_23_valid = addLogic_a_23_add_ip_m_axis_result_tvalid;
  assign addLogic_c_23_payload = addLogic_a_23_add_ip_m_axis_result_tdata;
  assign addLogic_c_24_valid = addLogic_a_24_add_ip_m_axis_result_tvalid;
  assign addLogic_c_24_payload = addLogic_a_24_add_ip_m_axis_result_tdata;
  assign addLogic_c_25_valid = addLogic_a_25_add_ip_m_axis_result_tvalid;
  assign addLogic_c_25_payload = addLogic_a_25_add_ip_m_axis_result_tdata;
  assign addLogic_c_26_valid = addLogic_a_26_add_ip_m_axis_result_tvalid;
  assign addLogic_c_26_payload = addLogic_a_26_add_ip_m_axis_result_tdata;
  assign addLogic_c_27_valid = addLogic_a_27_add_ip_m_axis_result_tvalid;
  assign addLogic_c_27_payload = addLogic_a_27_add_ip_m_axis_result_tdata;
  assign addLogic_c_28_valid = addLogic_a_28_add_ip_m_axis_result_tvalid;
  assign addLogic_c_28_payload = addLogic_a_28_add_ip_m_axis_result_tdata;
  assign addLogic_c_29_valid = addLogic_a_29_add_ip_m_axis_result_tvalid;
  assign addLogic_c_29_payload = addLogic_a_29_add_ip_m_axis_result_tdata;
  assign addLogic_c_30_valid = addLogic_a_30_add_ip_m_axis_result_tvalid;
  assign addLogic_c_30_payload = addLogic_a_30_add_ip_m_axis_result_tdata;
  assign addLogic_c_31_valid = addLogic_a_31_add_ip_m_axis_result_tvalid;
  assign addLogic_c_31_payload = addLogic_a_31_add_ip_m_axis_result_tdata;
  assign addLogic_a_0_payload = t_addLogic_a_0_payload;
  assign addLogic_b_0_payload = t_addLogic_b_0_payload;
  assign addLogic_a_1_payload = t_addLogic_a_1_payload;
  assign addLogic_b_1_payload = t_addLogic_b_1_payload;
  assign addLogic_a_2_payload = t_addLogic_a_2_payload;
  assign addLogic_b_2_payload = t_addLogic_b_2_payload;
  assign addLogic_a_3_payload = t_addLogic_a_3_payload;
  assign addLogic_b_3_payload = t_addLogic_b_3_payload;
  assign addLogic_a_4_payload = t_addLogic_a_4_payload;
  assign addLogic_b_4_payload = t_addLogic_b_4_payload;
  assign addLogic_a_5_payload = t_addLogic_a_5_payload;
  assign addLogic_b_5_payload = t_addLogic_b_5_payload;
  assign addLogic_a_6_payload = t_addLogic_a_6_payload;
  assign addLogic_b_6_payload = t_addLogic_b_6_payload;
  assign addLogic_a_7_payload = t_addLogic_a_7_payload;
  assign addLogic_b_7_payload = t_addLogic_b_7_payload;
  assign addLogic_a_8_payload = t_addLogic_a_8_payload;
  assign addLogic_b_8_payload = t_addLogic_b_8_payload;
  assign addLogic_a_9_payload = t_addLogic_a_9_payload;
  assign addLogic_b_9_payload = t_addLogic_b_9_payload;
  assign addLogic_a_10_payload = t_addLogic_a_10_payload;
  assign addLogic_b_10_payload = t_addLogic_b_10_payload;
  assign addLogic_a_11_payload = t_addLogic_a_11_payload;
  assign addLogic_b_11_payload = t_addLogic_b_11_payload;
  assign addLogic_a_12_payload = t_addLogic_a_12_payload;
  assign addLogic_b_12_payload = t_addLogic_b_12_payload;
  assign addLogic_a_13_payload = t_addLogic_a_13_payload;
  assign addLogic_b_13_payload = t_addLogic_b_13_payload;
  assign addLogic_a_14_payload = t_addLogic_a_14_payload;
  assign addLogic_b_14_payload = t_addLogic_b_14_payload;
  assign addLogic_a_15_payload = t_addLogic_a_15_payload;
  assign addLogic_b_15_payload = t_addLogic_b_15_payload;
  assign addLogic_a_16_payload = t_addLogic_a_16_payload;
  assign addLogic_b_16_payload = t_addLogic_b_16_payload;
  assign addLogic_a_17_payload = t_addLogic_a_17_payload;
  assign addLogic_b_17_payload = t_addLogic_b_17_payload;
  assign addLogic_a_18_payload = t_addLogic_a_18_payload;
  assign addLogic_b_18_payload = t_addLogic_b_18_payload;
  assign addLogic_a_19_payload = t_addLogic_a_19_payload;
  assign addLogic_b_19_payload = t_addLogic_b_19_payload;
  assign addLogic_a_20_payload = t_addLogic_a_20_payload;
  assign addLogic_b_20_payload = t_addLogic_b_20_payload;
  assign addLogic_a_21_payload = t_addLogic_a_21_payload;
  assign addLogic_b_21_payload = t_addLogic_b_21_payload;
  assign addLogic_a_22_payload = t_addLogic_a_22_payload;
  assign addLogic_b_22_payload = t_addLogic_b_22_payload;
  assign addLogic_a_23_payload = t_addLogic_a_23_payload;
  assign addLogic_b_23_payload = t_addLogic_b_23_payload;
  assign addLogic_a_24_payload = t_addLogic_a_24_payload;
  assign addLogic_b_24_payload = t_addLogic_b_24_payload;
  assign addLogic_a_25_payload = t_addLogic_a_25_payload;
  assign addLogic_b_25_payload = t_addLogic_b_25_payload;
  assign addLogic_a_26_payload = t_addLogic_a_26_payload;
  assign addLogic_b_26_payload = t_addLogic_b_26_payload;
  assign addLogic_a_27_payload = t_addLogic_a_27_payload;
  assign addLogic_b_27_payload = t_addLogic_b_27_payload;
  assign addLogic_a_28_payload = t_addLogic_a_28_payload;
  assign addLogic_b_28_payload = t_addLogic_b_28_payload;
  assign addLogic_a_29_payload = t_addLogic_a_29_payload;
  assign addLogic_b_29_payload = t_addLogic_b_29_payload;
  assign addLogic_a_30_payload = t_addLogic_a_30_payload;
  assign addLogic_b_30_payload = t_addLogic_b_30_payload;
  assign addLogic_a_31_payload = t_addLogic_a_31_payload;
  assign addLogic_b_31_payload = t_addLogic_b_31_payload;
  assign addLogic_vecOut_0 = addLogic_c_0_payload;
  assign addLogic_vecOut_1 = addLogic_c_1_payload;
  assign addLogic_vecOut_2 = addLogic_c_2_payload;
  assign addLogic_vecOut_3 = addLogic_c_3_payload;
  assign addLogic_vecOut_4 = addLogic_c_4_payload;
  assign addLogic_vecOut_5 = addLogic_c_5_payload;
  assign addLogic_vecOut_6 = addLogic_c_6_payload;
  assign addLogic_vecOut_7 = addLogic_c_7_payload;
  assign addLogic_vecOut_8 = addLogic_c_8_payload;
  assign addLogic_vecOut_9 = addLogic_c_9_payload;
  assign addLogic_vecOut_10 = addLogic_c_10_payload;
  assign addLogic_vecOut_11 = addLogic_c_11_payload;
  assign addLogic_vecOut_12 = addLogic_c_12_payload;
  assign addLogic_vecOut_13 = addLogic_c_13_payload;
  assign addLogic_vecOut_14 = addLogic_c_14_payload;
  assign addLogic_vecOut_15 = addLogic_c_15_payload;
  assign addLogic_vecOut_16 = addLogic_c_16_payload;
  assign addLogic_vecOut_17 = addLogic_c_17_payload;
  assign addLogic_vecOut_18 = addLogic_c_18_payload;
  assign addLogic_vecOut_19 = addLogic_c_19_payload;
  assign addLogic_vecOut_20 = addLogic_c_20_payload;
  assign addLogic_vecOut_21 = addLogic_c_21_payload;
  assign addLogic_vecOut_22 = addLogic_c_22_payload;
  assign addLogic_vecOut_23 = addLogic_c_23_payload;
  assign addLogic_vecOut_24 = addLogic_c_24_payload;
  assign addLogic_vecOut_25 = addLogic_c_25_payload;
  assign addLogic_vecOut_26 = addLogic_c_26_payload;
  assign addLogic_vecOut_27 = addLogic_c_27_payload;
  assign addLogic_vecOut_28 = addLogic_c_28_payload;
  assign addLogic_vecOut_29 = addLogic_c_29_payload;
  assign addLogic_vecOut_30 = addLogic_c_30_payload;
  assign addLogic_vecOut_31 = addLogic_c_31_payload;
  assign addLogic_scalarOut = addLogic_c_0_payload;
  assign addLogic_psumDly_0 = addLogic_popDly[15 : 0];
  assign addLogic_psumDly_1 = addLogic_popDly[31 : 16];
  assign addLogic_psumDly_2 = addLogic_popDly[47 : 32];
  assign addLogic_psumDly_3 = addLogic_popDly[63 : 48];
  assign addLogic_psumDly_4 = addLogic_popDly[79 : 64];
  assign addLogic_psumDly_5 = addLogic_popDly[95 : 80];
  assign addLogic_psumDly_6 = addLogic_popDly[111 : 96];
  assign addLogic_psumDly_7 = addLogic_popDly[127 : 112];
  assign addLogic_psumDly_8 = addLogic_popDly[143 : 128];
  assign addLogic_psumDly_9 = addLogic_popDly[159 : 144];
  assign addLogic_psumDly_10 = addLogic_popDly[175 : 160];
  assign addLogic_psumDly_11 = addLogic_popDly[191 : 176];
  assign addLogic_psumDly_12 = addLogic_popDly[207 : 192];
  assign addLogic_psumDly_13 = addLogic_popDly[223 : 208];
  assign addLogic_psumDly_14 = addLogic_popDly[239 : 224];
  assign addLogic_psumDly_15 = addLogic_popDly[255 : 240];
  assign addLogic_psumDly_16 = addLogic_popDly[271 : 256];
  assign addLogic_psumDly_17 = addLogic_popDly[287 : 272];
  assign addLogic_psumDly_18 = addLogic_popDly[303 : 288];
  assign addLogic_psumDly_19 = addLogic_popDly[319 : 304];
  assign addLogic_psumDly_20 = addLogic_popDly[335 : 320];
  assign addLogic_psumDly_21 = addLogic_popDly[351 : 336];
  assign addLogic_psumDly_22 = addLogic_popDly[367 : 352];
  assign addLogic_psumDly_23 = addLogic_popDly[383 : 368];
  assign addLogic_psumDly_24 = addLogic_popDly[399 : 384];
  assign addLogic_psumDly_25 = addLogic_popDly[415 : 400];
  assign addLogic_psumDly_26 = addLogic_popDly[431 : 416];
  assign addLogic_psumDly_27 = addLogic_popDly[447 : 432];
  assign addLogic_psumDly_28 = addLogic_popDly[463 : 448];
  assign addLogic_psumDly_29 = addLogic_popDly[479 : 464];
  assign addLogic_psumDly_30 = addLogic_popDly[495 : 480];
  assign addLogic_psumDly_31 = addLogic_popDly[511 : 496];
  assign addLogic_psum_0 = fifoCtrl_io_pop_payload[15 : 0];
  assign addLogic_psum_1 = fifoCtrl_io_pop_payload[31 : 16];
  assign addLogic_psum_2 = fifoCtrl_io_pop_payload[47 : 32];
  assign addLogic_psum_3 = fifoCtrl_io_pop_payload[63 : 48];
  assign addLogic_psum_4 = fifoCtrl_io_pop_payload[79 : 64];
  assign addLogic_psum_5 = fifoCtrl_io_pop_payload[95 : 80];
  assign addLogic_psum_6 = fifoCtrl_io_pop_payload[111 : 96];
  assign addLogic_psum_7 = fifoCtrl_io_pop_payload[127 : 112];
  assign addLogic_psum_8 = fifoCtrl_io_pop_payload[143 : 128];
  assign addLogic_psum_9 = fifoCtrl_io_pop_payload[159 : 144];
  assign addLogic_psum_10 = fifoCtrl_io_pop_payload[175 : 160];
  assign addLogic_psum_11 = fifoCtrl_io_pop_payload[191 : 176];
  assign addLogic_psum_12 = fifoCtrl_io_pop_payload[207 : 192];
  assign addLogic_psum_13 = fifoCtrl_io_pop_payload[223 : 208];
  assign addLogic_psum_14 = fifoCtrl_io_pop_payload[239 : 224];
  assign addLogic_psum_15 = fifoCtrl_io_pop_payload[255 : 240];
  assign addLogic_psum_16 = fifoCtrl_io_pop_payload[271 : 256];
  assign addLogic_psum_17 = fifoCtrl_io_pop_payload[287 : 272];
  assign addLogic_psum_18 = fifoCtrl_io_pop_payload[303 : 288];
  assign addLogic_psum_19 = fifoCtrl_io_pop_payload[319 : 304];
  assign addLogic_psum_20 = fifoCtrl_io_pop_payload[335 : 320];
  assign addLogic_psum_21 = fifoCtrl_io_pop_payload[351 : 336];
  assign addLogic_psum_22 = fifoCtrl_io_pop_payload[367 : 352];
  assign addLogic_psum_23 = fifoCtrl_io_pop_payload[383 : 368];
  assign addLogic_psum_24 = fifoCtrl_io_pop_payload[399 : 384];
  assign addLogic_psum_25 = fifoCtrl_io_pop_payload[415 : 400];
  assign addLogic_psum_26 = fifoCtrl_io_pop_payload[431 : 416];
  assign addLogic_psum_27 = fifoCtrl_io_pop_payload[447 : 432];
  assign addLogic_psum_28 = fifoCtrl_io_pop_payload[463 : 448];
  assign addLogic_psum_29 = fifoCtrl_io_pop_payload[479 : 464];
  assign addLogic_psum_30 = fifoCtrl_io_pop_payload[495 : 480];
  assign addLogic_psum_31 = fifoCtrl_io_pop_payload[511 : 496];
  assign fifoCtrl_io_push_payload = {addLogic_vecOut_31,{addLogic_vecOut_30,{addLogic_vecOut_29,{addLogic_vecOut_28,{addLogic_vecOut_27,{addLogic_vecOut_26,{addLogic_vecOut_25,{addLogic_vecOut_24,{addLogic_vecOut_23,{addLogic_vecOut_22,{addLogic_vecOut_21,{addLogic_vecOut_20,{addLogic_vecOut_19,{addLogic_vecOut_18,{addLogic_vecOut_17,{addLogic_vecOut_16,t_io_push_payload}}}}}}}}}}}}}}}};
  assign vecOut_tdata = {addLogic_vecOut_31,{addLogic_vecOut_30,{addLogic_vecOut_29,{addLogic_vecOut_28,{addLogic_vecOut_27,{addLogic_vecOut_26,{addLogic_vecOut_25,{addLogic_vecOut_24,{addLogic_vecOut_23,{addLogic_vecOut_22,{addLogic_vecOut_21,{addLogic_vecOut_20,{addLogic_vecOut_19,{addLogic_vecOut_18,{addLogic_vecOut_17,{addLogic_vecOut_16,t_vecOut_tdata}}}}}}}}}}}}}}}};
  assign dotCtrl_aSelNext = 2'b01;
  assign dotCtrl_bSelNext = 2'b01;
  assign dotCtrl_enMulResCntNext = (mulResFireNext && ret_0_valid);
  assign t_dotCtrl_mulResCntOvf_0 = (t_dotCtrl_muResCnt_0 == t_t_dotCtrl_mulResCntOvf_0[7 : 0]);
  assign t_dotCtrl_mulResCntOvf_1 = (t_dotCtrl_muResCnt_1 == ret_0_payload[15 : 0]);
  always @(*) begin
    t_dotCtrl_muResCnt_0 = dotCtrl_muResCnt_0;
    if(dotCtrl_enMulResCnt) begin
      t_dotCtrl_muResCnt_0 = (dotCtrl_muResCnt_0 + 8'h01);
      if(dotCtrl_mulResCntOvf_0) begin
        t_dotCtrl_muResCnt_0 = 8'h0;
      end
    end
  end

  always @(*) begin
    t_dotCtrl_muResCnt_1 = dotCtrl_muResCnt_1;
    if(dotCtrl_enMulResCnt) begin
      if(dotCtrl_mulResCntOvf_0) begin
        t_dotCtrl_muResCnt_1 = (dotCtrl_muResCnt_1 + 16'h0001);
        if(dotCtrl_mulResCntOvf_1) begin
          t_dotCtrl_muResCnt_1 = 16'h0;
        end
      end
    end
  end

  assign dotCtrl_flagClrCond = (dotCtrl_enMulResCnt && dotCtrl_mulResCntOvfReduce);
  always @(*) begin
    dotCtrl_flagInvNext = dotCtrl_flagInv;
    if(dotCtrl_flagClrCond) begin
      dotCtrl_flagInvNext = 1'b0;
    end
    if(dotCtrl_flagSetCond) begin
      dotCtrl_flagInvNext = 1'b1;
    end
  end

  assign dotCtrl_accCntOvf = (t_dotCtrl_accCntOvf == t_dotCtrl_accCntOvf_1[7 : 0]);
  assign scalarOut_tvalid = dotCtrl_enAddOutCnt;
  assign scalarOut_tdata = addLogic_scalarOut;
  assign scalarOut_tuser = tag;
  assign scalarOut_tlast = dotCtrl_accCntOvf_delay_30_1;
  assign ret_0_ready = (dotCtrl_enAddOutCnt && (dotCtrl_addOutCntOvf_0 && dotCtrl_addOutCntOvf_1));
  assign postCfgTag = dotCtrl_cfgPayload[31 : 26];
  assign fAxpyCtrl_enMulResCntNext = (mulResFireNext && ret_1_valid);
  assign t_fAxpyCtrl_mulResCntOvf_0 = (t_fAxpyCtrl_muResCnt_0 == t_t_fAxpyCtrl_mulResCntOvf_0[7 : 0]);
  assign t_fAxpyCtrl_mulResCntOvf_1 = (t_fAxpyCtrl_muResCnt_1 == ret_1_payload[15 : 0]);
  always @(*) begin
    t_fAxpyCtrl_muResCnt_0 = fAxpyCtrl_muResCnt_0;
    if(fAxpyCtrl_enMulResCnt) begin
      t_fAxpyCtrl_muResCnt_0 = (fAxpyCtrl_muResCnt_0 + 8'h01);
      if(fAxpyCtrl_mulResCntOvf_0) begin
        t_fAxpyCtrl_muResCnt_0 = 8'h0;
      end
    end
  end

  always @(*) begin
    t_fAxpyCtrl_muResCnt_1 = fAxpyCtrl_muResCnt_1;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        t_fAxpyCtrl_muResCnt_1 = (fAxpyCtrl_muResCnt_1 + 16'h0001);
        if(fAxpyCtrl_mulResCntOvf_1) begin
          t_fAxpyCtrl_muResCnt_1 = 16'h0;
        end
      end
    end
  end

  always @(*) begin
    fAxpyCtrl_mulResCntLastZeroNext = fAxpyCtrl_mulResCntLastZero;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        fAxpyCtrl_mulResCntLastZeroNext = 1'b0;
        if(fAxpyCtrl_mulResCntOvf_1) begin
          fAxpyCtrl_mulResCntLastZeroNext = 1'b1;
        end
      end
    end
  end

  always @(*) begin
    fAxpyCtrl_mulResCntLastNotZeroNext = fAxpyCtrl_mulResCntLastNotZero;
    if(fAxpyCtrl_enMulResCnt) begin
      if(fAxpyCtrl_mulResCntOvf_0) begin
        fAxpyCtrl_mulResCntLastNotZeroNext = 1'b1;
        if(fAxpyCtrl_mulResCntOvf_1) begin
          fAxpyCtrl_mulResCntLastNotZeroNext = 1'b0;
        end
      end
    end
  end

  assign fAxpyCtrl_psumPushEn = fAxpyCtrl_psumPushEnReg;
  assign fAxpyCtrl_resAddReadyNext = ((fAxpyCtrl_enMulResCntNext && fAxpyCtrl_mulResCntLastZeroNext) && ret_1_payload[25]);
  assign resAdd_tready = fAxpyCtrl_resAddReady;
  assign fAxpyCtrl_psumPopEnRegNext = (fAxpyCtrl_enMulResCntNext && fAxpyCtrl_mulResCntLastNotZeroNext);
  assign fAxpyCtrl_psumPopEn = fAxpyCtrl_psumPopEnReg;
  assign fAxpyCtrl_aSelNext = 2'b00;
  always @(*) begin
    fAxpyCtrl_bSelNext = 2'b11;
    if(fAxpyCtrl_resAddReadyNext) begin
      fAxpyCtrl_bSelNext = 2'b10;
    end
    if(fAxpyCtrl_psumPopEnRegNext) begin
      fAxpyCtrl_bSelNext = 2'b00;
    end
  end

  assign ret_1_ready = (fAxpyCtrl_enMulResCnt && fAxpyCtrl_mulResCntOvfReduce);
  assign fAxpyCtrl_vecOutVld = (fAxpyCtrl_enAddOutCnt && fAxpyCtrl_addOutCntOvf_1);
  always @(*) begin
    pAxpyCtrl_cycleReduceNext = pAxpyCtrl_cycleReduce;
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_cycleReduceNext = 1'b1;
      end
    end
    if(pAxpyCtrl_enCycleCnt) begin
      if(pAxpyCtrl_lastElem) begin
        pAxpyCtrl_cycleReduceNext = 1'b0;
      end
    end
  end

  assign pAxpyCtrl_enMulResCntNext = (mulResFireNext && ret_2_valid);
  assign pAxpyCtrl_mulResCntLow = pAxpyCtrl_mulResCnt[2 : 0];
  assign pAxpyCtrl_mulResCntHigh = pAxpyCtrl_mulResCnt[15 : 3];
  assign pAxpyCtrl_mulResCntOvfNext = (pAxpyCtrl_mulResCntNext == ret_2_payload[15 : 0]);
  always @(*) begin
    pAxpyCtrl_mulResCntHighZeroNext = pAxpyCtrl_mulResCntHighZero;
    if(pAxpyCtrl_enMulResCnt) begin
      if(t_when) begin
        pAxpyCtrl_mulResCntHighZeroNext = 1'b0;
      end
    end
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntHighZeroNext = 1'b1;
      end
    end
  end

  always @(*) begin
    pAxpyCtrl_mulResCntHighNotZeroNext = pAxpyCtrl_mulResCntHighNotZero;
    if(pAxpyCtrl_enMulResCnt) begin
      if(t_when) begin
        pAxpyCtrl_mulResCntHighNotZeroNext = 1'b1;
      end
    end
    if(pAxpyCtrl_enMulResCnt) begin
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntHighNotZeroNext = 1'b0;
      end
    end
  end

  always @(*) begin
    pAxpyCtrl_mulResCntNext = pAxpyCtrl_mulResCnt;
    if(pAxpyCtrl_enMulResCnt) begin
      pAxpyCtrl_mulResCntNext = (pAxpyCtrl_mulResCnt + 16'h0001);
      if(pAxpyCtrl_mulResCntOvf) begin
        pAxpyCtrl_mulResCntNext = 16'h0;
      end
    end
  end

  assign pAxpyCtrl_enAddOutCnt = (pAxpyCtrl_enMulResCntDly && (! pAxpyCtrl_cycleReduceDly));
  assign pAxpyCtrl_enCycleCnt = (pAxpyCtrl_cycleReduceDly && pAxpyCtrl_reduceVldDly);
  assign t_pAxpyCtrl_lastElemNext = 3'b110;
  assign t_pAxpyCtrl_lastElemNext_1 = (ret_2_payload[15 : 0] - 16'h0001);
  assign pAxpyCtrl_lastElemNext = (t_pAxpyCtrl_lastElemNext_2 == ((t_pAxpyCtrl_lastElemNext_3 < t_pAxpyCtrl_lastElemNext_1) ? t_pAxpyCtrl_lastElemNext_4 : t_pAxpyCtrl_lastElemNext_1));
  always @(*) begin
    pAxpyCtrl_cycleCntNext = pAxpyCtrl_cycleCnt;
    if(pAxpyCtrl_enCycleCnt) begin
      pAxpyCtrl_cycleCntNext = (pAxpyCtrl_cycleCnt + 3'b001);
      if(pAxpyCtrl_lastElem) begin
        pAxpyCtrl_cycleCntNext = 3'b000;
      end
    end
  end

  assign pAxpyCtrl_psumPushEn = (pAxpyCtrl_cycleReduceDly ? (pAxpyCtrl_enCycleCnt && (! (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem))) : pAxpyCtrl_enMulResCntDly);
  always @(*) begin
    pAxpyCtrl_psumPopEnNext = 1'b0;
    if((pAxpyCtrl_enMulResCntNext && pAxpyCtrl_mulResCntHighNotZeroNext)) begin
      pAxpyCtrl_psumPopEnNext = 1'b1;
    end
    if(pAxpyCtrl_cycleReduceNext) begin
      pAxpyCtrl_psumPopEnNext = 1'b1;
    end
  end

  assign pAxpyCtrl_aSelNext = {pAxpyCtrl_cycleReduceNext,1'b0};
  assign pAxpyCtrl_bSelBitNext = (pAxpyCtrl_enMulResCntNext && pAxpyCtrl_mulResCntHighZeroNext);
  assign pAxpyCtrl_bSelNext = {pAxpyCtrl_bSelBitNext,pAxpyCtrl_bSelBitNext};
  assign pAxpyCtrl_flagClrCond = (pAxpyCtrl_enMulResCnt && pAxpyCtrl_mulResCntOvf);
  always @(*) begin
    pAxpyCtrl_flagInvNext = pAxpyCtrl_flagInv;
    if(pAxpyCtrl_flagClrCond) begin
      pAxpyCtrl_flagInvNext = 1'b0;
    end
    if(pAxpyCtrl_flagSetCond) begin
      pAxpyCtrl_flagInvNext = 1'b1;
    end
  end

  assign add_fifoCtrl_io_pop_fire = (fifoCtrl_io_pop_valid && fifoCtrl_io_pop_ready);
  assign pAxpyCtrl_reduceVld = (pAxpyCtrl_vldToggle && add_fifoCtrl_io_pop_fire);
  always @(*) begin
    pAxpyCtrl_psumVld = add_fifoCtrl_io_pop_fire;
    if(pAxpyCtrl_cycleReduce) begin
      pAxpyCtrl_psumVld = pAxpyCtrl_reduceVld;
    end
  end

  assign ret_2_ready = (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem);
  assign pAxpyCtrl_reduceVldDly = t_pAxpyCtrl_reduceVldDly_5;
  assign pAxpyCtrl_vecOutVld = ((pAxpyCtrl_cfgVld && pAxpyCtrl_enCycleCnt) && pAxpyCtrl_lastElem);
  assign vecOut_tvalid = (fAxpyCtrl_vecOutVld || pAxpyCtrl_vecOutVld);
  assign vecOut_tuser = (fAxpyCtrl_vecOutVld ? tagAddDly : tag);
  assign selVldNextOneHot = {{ret_2_valid,ret_1_valid},ret_0_valid};
  assign t_selVldNextUInt = selVldNextOneHot[1];
  assign t_selVldNextUInt_1 = selVldNextOneHot[2];
  assign selVldNextUInt = {t_selVldNextUInt_1,t_selVldNextUInt};
  assign fifoCtrl_io_push_valid = t_io_push_valid;
  assign fifoCtrl_io_pop_ready = t_io_pop_ready;
  assign aSelNext = t_aSelNext;
  assign bSelNext = t_bSelNext;
  assign addLogic_aSel = aSel;
  assign addLogic_bSel = bSel;
  always @(*) begin
    readyNext = 1'b0;
    if(ret_0_valid) begin
      readyNext = dotCtrl_flagInvNext;
    end
    if(ret_1_valid) begin
      readyNext = 1'b1;
    end
    if(ret_2_valid) begin
      readyNext = pAxpyCtrl_flagInvNext;
    end
  end

  assign mulRes_tready = ready;
  assign mulResFireNext = (popVldNext && readyNext);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      mulResFire <= 1'b0;
      tag_delay_1 <= 6'h0;
      tag_delay_2 <= 6'h0;
      tag_delay_3 <= 6'h0;
      tag_delay_4 <= 6'h0;
      tag_delay_5 <= 6'h0;
      tag_delay_6 <= 6'h0;
      tag_delay_7 <= 6'h0;
      tag_delay_8 <= 6'h0;
      tag_delay_9 <= 6'h0;
      tag_delay_10 <= 6'h0;
      tag_delay_11 <= 6'h0;
      tag_delay_12 <= 6'h0;
      tag_delay_13 <= 6'h0;
      tag_delay_14 <= 6'h0;
      tag_delay_15 <= 6'h0;
      tag_delay_16 <= 6'h0;
      tag_delay_17 <= 6'h0;
      tag_delay_18 <= 6'h0;
      tag_delay_19 <= 6'h0;
      tag_delay_20 <= 6'h0;
      tag_delay_21 <= 6'h0;
      tagReduceDly <= 6'h0;
      tag_delay_1_1 <= 6'h0;
      tag_delay_2_1 <= 6'h0;
      tag_delay_3_1 <= 6'h0;
      tag_delay_4_1 <= 6'h0;
      tag_delay_5_1 <= 6'h0;
      tagAddDly <= 6'h0;
      dotCtrl_cfgVld <= 1'b0;
      dotCtrl_enMulResCnt <= 1'b0;
      dotCtrl_muResCnt_0 <= 8'h0;
      dotCtrl_muResCnt_1 <= 16'h0;
      dotCtrl_mulResCntOvf_0 <= 1'b0;
      dotCtrl_mulResCntOvf_1 <= 1'b0;
      dotCtrl_mulResCntOvfReduce <= 1'b0;
      dotCtrl_enMulResCnt_delay_1 <= 1'b0;
      dotCtrl_enMulResCnt_delay_2 <= 1'b0;
      dotCtrl_enMulResCnt_delay_3 <= 1'b0;
      dotCtrl_enMulResCnt_delay_4 <= 1'b0;
      dotCtrl_enMulResCnt_delay_5 <= 1'b0;
      dotCtrl_enMulResCnt_delay_6 <= 1'b0;
      dotCtrl_enMulResCnt_delay_7 <= 1'b0;
      dotCtrl_enMulResCnt_delay_8 <= 1'b0;
      dotCtrl_enMulResCnt_delay_9 <= 1'b0;
      dotCtrl_enMulResCnt_delay_10 <= 1'b0;
      dotCtrl_enMulResCnt_delay_11 <= 1'b0;
      dotCtrl_enMulResCnt_delay_12 <= 1'b0;
      dotCtrl_enMulResCnt_delay_13 <= 1'b0;
      dotCtrl_enMulResCnt_delay_14 <= 1'b0;
      dotCtrl_enMulResCnt_delay_15 <= 1'b0;
      dotCtrl_enMulResCnt_delay_16 <= 1'b0;
      dotCtrl_enMulResCnt_delay_17 <= 1'b0;
      dotCtrl_enMulResCnt_delay_18 <= 1'b0;
      dotCtrl_enMulResCnt_delay_19 <= 1'b0;
      dotCtrl_enMulResCnt_delay_20 <= 1'b0;
      dotCtrl_enMulResCnt_delay_21 <= 1'b0;
      dotCtrl_enMulResCnt_delay_22 <= 1'b0;
      dotCtrl_enMulResCnt_delay_23 <= 1'b0;
      dotCtrl_enMulResCnt_delay_24 <= 1'b0;
      dotCtrl_enMulResCnt_delay_25 <= 1'b0;
      dotCtrl_enMulResCnt_delay_26 <= 1'b0;
      dotCtrl_enMulResCnt_delay_27 <= 1'b0;
      dotCtrl_enMulResCnt_delay_28 <= 1'b0;
      dotCtrl_enMulResCnt_delay_29 <= 1'b0;
      dotCtrl_enAddOutCnt <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_1 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_2 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_3 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_4 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_5 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_6 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_7 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_8 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_9 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_10 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_11 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_12 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_13 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_14 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_15 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_16 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_17 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_18 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_19 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_20 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_21 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_22 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_23 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_24 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_25 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_26 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_27 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_28 <= 1'b0;
      dotCtrl_mulResCntOvf_0_delay_29 <= 1'b0;
      dotCtrl_addOutCntOvf_0 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_1 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_2 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_3 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_4 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_5 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_6 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_7 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_8 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_9 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_10 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_11 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_12 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_13 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_14 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_15 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_16 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_17 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_18 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_19 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_20 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_21 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_22 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_23 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_24 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_25 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_26 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_27 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_28 <= 1'b0;
      dotCtrl_mulResCntOvf_1_delay_29 <= 1'b0;
      dotCtrl_addOutCntOvf_1 <= 1'b0;
      dotCtrl_flagSetCond <= 1'b0;
      dotCtrl_flagInv <= 1'b1;
      dotCtrl_accCnt <= 5'h0;
      dotCtrl_accCntOvf_delay_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_2 <= 1'b0;
      dotCtrl_accCntOvf_delay_3 <= 1'b0;
      dotCtrl_accCntOvf_delay_4 <= 1'b0;
      dotCtrl_accCntOvf_delay_5 <= 1'b0;
      dotCtrl_accCntOvf_delay_6 <= 1'b0;
      dotCtrl_accCntOvf_delay_7 <= 1'b0;
      dotCtrl_accCntOvf_delay_8 <= 1'b0;
      dotCtrl_accCntOvf_delay_9 <= 1'b0;
      dotCtrl_accCntOvf_delay_10 <= 1'b0;
      dotCtrl_accCntOvf_delay_11 <= 1'b0;
      dotCtrl_accCntOvf_delay_12 <= 1'b0;
      dotCtrl_accCntOvf_delay_13 <= 1'b0;
      dotCtrl_accCntOvf_delay_14 <= 1'b0;
      dotCtrl_accCntOvf_delay_15 <= 1'b0;
      dotCtrl_accCntOvf_delay_16 <= 1'b0;
      dotCtrl_accCntOvf_delay_17 <= 1'b0;
      dotCtrl_accCntOvf_delay_18 <= 1'b0;
      dotCtrl_accCntOvf_delay_19 <= 1'b0;
      dotCtrl_accCntOvf_delay_20 <= 1'b0;
      dotCtrl_accCntOvf_delay_21 <= 1'b0;
      dotCtrl_accCntOvf_delay_22 <= 1'b0;
      dotCtrl_accCntOvf_delay_23 <= 1'b0;
      dotCtrl_accCntOvf_delay_24 <= 1'b0;
      dotCtrl_accCntOvf_delay_25 <= 1'b0;
      dotCtrl_accCntOvf_delay_26 <= 1'b0;
      dotCtrl_accCntOvf_delay_27 <= 1'b0;
      dotCtrl_accCntOvf_delay_28 <= 1'b0;
      dotCtrl_accCntOvf_delay_29 <= 1'b0;
      dotCtrl_accCntOvf_delay_30 <= 1'b0;
      dotCtrl_accCntOvf_delay_31 <= 1'b0;
      dotCtrl_accCntOvf_delay_32 <= 1'b0;
      dotCtrl_accCntOvf_delay_33 <= 1'b0;
      dotCtrl_accCntOvf_delay_34 <= 1'b0;
      dotCtrl_accCntOvf_delay_35 <= 1'b0;
      dotCtrl_accCntOvfDly <= 1'b0;
      dotCtrl_accCntOvf_delay_1_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_2_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_3_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_4_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_5_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_6_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_7_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_8_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_9_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_10_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_11_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_12_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_13_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_14_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_15_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_16_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_17_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_18_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_19_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_20_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_21_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_22_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_23_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_24_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_25_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_26_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_27_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_28_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_29_1 <= 1'b0;
      dotCtrl_accCntOvf_delay_30_1 <= 1'b0;
      fAxpyCtrl_cfgVld <= 1'b0;
      fAxpyCtrl_enMulResCnt <= 1'b0;
      fAxpyCtrl_muResCnt_0 <= 8'h0;
      fAxpyCtrl_muResCnt_1 <= 16'h0;
      fAxpyCtrl_mulResCntOvf_0 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvfReduce <= 1'b0;
      fAxpyCtrl_mulResCntLastZero <= 1'b1;
      fAxpyCtrl_mulResCntLastNotZero <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_1 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_2 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_3 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_4 <= 1'b0;
      fAxpyCtrl_enMulResCnt_delay_5 <= 1'b0;
      fAxpyCtrl_enAddOutCnt <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_2 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_3 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_4 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_0_delay_5 <= 1'b0;
      fAxpyCtrl_addOutCntOvf_0 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_1 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_2 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_3 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_4 <= 1'b0;
      fAxpyCtrl_mulResCntOvf_1_delay_5 <= 1'b0;
      fAxpyCtrl_addOutCntOvf_1 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_1 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_2 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_3 <= 1'b0;
      t_fAxpyCtrl_psumPushEnReg_4 <= 1'b0;
      fAxpyCtrl_psumPushEnReg <= 1'b0;
      fAxpyCtrl_resAddReady <= 1'b0;
      fAxpyCtrl_psumPopEnReg <= 1'b0;
      pAxpyCtrl_cfgVld <= 1'b0;
      pAxpyCtrl_cycleReduce <= 1'b0;
      pAxpyCtrl_cycleReduceDly <= 1'b0;
      pAxpyCtrl_enMulResCnt <= 1'b0;
      pAxpyCtrl_mulResCnt <= 16'h0;
      pAxpyCtrl_mulResCntOvf <= 1'b0;
      pAxpyCtrl_mulResCntHighZero <= 1'b1;
      pAxpyCtrl_mulResCntHighNotZero <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_1 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_2 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_3 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_4 <= 1'b0;
      pAxpyCtrl_enMulResCnt_delay_5 <= 1'b0;
      pAxpyCtrl_enMulResCntDly <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_1 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_2 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_3 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_4 <= 1'b0;
      pAxpyCtrl_mulResCntOvf_delay_5 <= 1'b0;
      pAxpyCtrl_addOutCntOvf <= 1'b0;
      pAxpyCtrl_cycleCnt <= 3'b000;
      pAxpyCtrl_lastElem <= 1'b0;
      pAxpyCtrl_psumPopEn <= 1'b0;
      pAxpyCtrl_bSelBit <= 1'b0;
      pAxpyCtrl_flagSetCond <= 1'b0;
      pAxpyCtrl_flagInv <= 1'b1;
      pAxpyCtrl_vldToggle <= 1'b0;
      t_pAxpyCtrl_reduceVldDly <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_1 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_2 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_3 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_4 <= 1'b0;
      t_pAxpyCtrl_reduceVldDly_5 <= 1'b0;
      selVldUIntReg <= 2'b00;
      selFifoPushUInt <= 2'b00;
      selFifoPopUInt <= 2'b00;
      aSel <= 2'b01;
      bSel <= 2'b01;
      ready <= 1'b0;
    end else begin
      tag_delay_1 <= tag;
      tag_delay_2 <= tag_delay_1;
      tag_delay_3 <= tag_delay_2;
      tag_delay_4 <= tag_delay_3;
      tag_delay_5 <= tag_delay_4;
      tag_delay_6 <= tag_delay_5;
      tag_delay_7 <= tag_delay_6;
      tag_delay_8 <= tag_delay_7;
      tag_delay_9 <= tag_delay_8;
      tag_delay_10 <= tag_delay_9;
      tag_delay_11 <= tag_delay_10;
      tag_delay_12 <= tag_delay_11;
      tag_delay_13 <= tag_delay_12;
      tag_delay_14 <= tag_delay_13;
      tag_delay_15 <= tag_delay_14;
      tag_delay_16 <= tag_delay_15;
      tag_delay_17 <= tag_delay_16;
      tag_delay_18 <= tag_delay_17;
      tag_delay_19 <= tag_delay_18;
      tag_delay_20 <= tag_delay_19;
      tag_delay_21 <= tag_delay_20;
      tagReduceDly <= tag_delay_21;
      tag_delay_1_1 <= tag;
      tag_delay_2_1 <= tag_delay_1_1;
      tag_delay_3_1 <= tag_delay_2_1;
      tag_delay_4_1 <= tag_delay_3_1;
      tag_delay_5_1 <= tag_delay_4_1;
      tagAddDly <= tag_delay_5_1;
      dotCtrl_cfgVld <= ret_0_valid;
      dotCtrl_enMulResCnt <= dotCtrl_enMulResCntNext;
      dotCtrl_muResCnt_0 <= t_dotCtrl_muResCnt_0;
      dotCtrl_muResCnt_1 <= t_dotCtrl_muResCnt_1;
      dotCtrl_mulResCntOvf_0 <= t_dotCtrl_mulResCntOvf_0;
      dotCtrl_mulResCntOvf_1 <= t_dotCtrl_mulResCntOvf_1;
      dotCtrl_mulResCntOvfReduce <= (t_dotCtrl_mulResCntOvf_0 && t_dotCtrl_mulResCntOvf_1);
      dotCtrl_enMulResCnt_delay_1 <= dotCtrl_enMulResCnt;
      dotCtrl_enMulResCnt_delay_2 <= dotCtrl_enMulResCnt_delay_1;
      dotCtrl_enMulResCnt_delay_3 <= dotCtrl_enMulResCnt_delay_2;
      dotCtrl_enMulResCnt_delay_4 <= dotCtrl_enMulResCnt_delay_3;
      dotCtrl_enMulResCnt_delay_5 <= dotCtrl_enMulResCnt_delay_4;
      dotCtrl_enMulResCnt_delay_6 <= dotCtrl_enMulResCnt_delay_5;
      dotCtrl_enMulResCnt_delay_7 <= dotCtrl_enMulResCnt_delay_6;
      dotCtrl_enMulResCnt_delay_8 <= dotCtrl_enMulResCnt_delay_7;
      dotCtrl_enMulResCnt_delay_9 <= dotCtrl_enMulResCnt_delay_8;
      dotCtrl_enMulResCnt_delay_10 <= dotCtrl_enMulResCnt_delay_9;
      dotCtrl_enMulResCnt_delay_11 <= dotCtrl_enMulResCnt_delay_10;
      dotCtrl_enMulResCnt_delay_12 <= dotCtrl_enMulResCnt_delay_11;
      dotCtrl_enMulResCnt_delay_13 <= dotCtrl_enMulResCnt_delay_12;
      dotCtrl_enMulResCnt_delay_14 <= dotCtrl_enMulResCnt_delay_13;
      dotCtrl_enMulResCnt_delay_15 <= dotCtrl_enMulResCnt_delay_14;
      dotCtrl_enMulResCnt_delay_16 <= dotCtrl_enMulResCnt_delay_15;
      dotCtrl_enMulResCnt_delay_17 <= dotCtrl_enMulResCnt_delay_16;
      dotCtrl_enMulResCnt_delay_18 <= dotCtrl_enMulResCnt_delay_17;
      dotCtrl_enMulResCnt_delay_19 <= dotCtrl_enMulResCnt_delay_18;
      dotCtrl_enMulResCnt_delay_20 <= dotCtrl_enMulResCnt_delay_19;
      dotCtrl_enMulResCnt_delay_21 <= dotCtrl_enMulResCnt_delay_20;
      dotCtrl_enMulResCnt_delay_22 <= dotCtrl_enMulResCnt_delay_21;
      dotCtrl_enMulResCnt_delay_23 <= dotCtrl_enMulResCnt_delay_22;
      dotCtrl_enMulResCnt_delay_24 <= dotCtrl_enMulResCnt_delay_23;
      dotCtrl_enMulResCnt_delay_25 <= dotCtrl_enMulResCnt_delay_24;
      dotCtrl_enMulResCnt_delay_26 <= dotCtrl_enMulResCnt_delay_25;
      dotCtrl_enMulResCnt_delay_27 <= dotCtrl_enMulResCnt_delay_26;
      dotCtrl_enMulResCnt_delay_28 <= dotCtrl_enMulResCnt_delay_27;
      dotCtrl_enMulResCnt_delay_29 <= dotCtrl_enMulResCnt_delay_28;
      dotCtrl_enAddOutCnt <= dotCtrl_enMulResCnt_delay_29;
      dotCtrl_mulResCntOvf_0_delay_1 <= dotCtrl_mulResCntOvf_0;
      dotCtrl_mulResCntOvf_0_delay_2 <= dotCtrl_mulResCntOvf_0_delay_1;
      dotCtrl_mulResCntOvf_0_delay_3 <= dotCtrl_mulResCntOvf_0_delay_2;
      dotCtrl_mulResCntOvf_0_delay_4 <= dotCtrl_mulResCntOvf_0_delay_3;
      dotCtrl_mulResCntOvf_0_delay_5 <= dotCtrl_mulResCntOvf_0_delay_4;
      dotCtrl_mulResCntOvf_0_delay_6 <= dotCtrl_mulResCntOvf_0_delay_5;
      dotCtrl_mulResCntOvf_0_delay_7 <= dotCtrl_mulResCntOvf_0_delay_6;
      dotCtrl_mulResCntOvf_0_delay_8 <= dotCtrl_mulResCntOvf_0_delay_7;
      dotCtrl_mulResCntOvf_0_delay_9 <= dotCtrl_mulResCntOvf_0_delay_8;
      dotCtrl_mulResCntOvf_0_delay_10 <= dotCtrl_mulResCntOvf_0_delay_9;
      dotCtrl_mulResCntOvf_0_delay_11 <= dotCtrl_mulResCntOvf_0_delay_10;
      dotCtrl_mulResCntOvf_0_delay_12 <= dotCtrl_mulResCntOvf_0_delay_11;
      dotCtrl_mulResCntOvf_0_delay_13 <= dotCtrl_mulResCntOvf_0_delay_12;
      dotCtrl_mulResCntOvf_0_delay_14 <= dotCtrl_mulResCntOvf_0_delay_13;
      dotCtrl_mulResCntOvf_0_delay_15 <= dotCtrl_mulResCntOvf_0_delay_14;
      dotCtrl_mulResCntOvf_0_delay_16 <= dotCtrl_mulResCntOvf_0_delay_15;
      dotCtrl_mulResCntOvf_0_delay_17 <= dotCtrl_mulResCntOvf_0_delay_16;
      dotCtrl_mulResCntOvf_0_delay_18 <= dotCtrl_mulResCntOvf_0_delay_17;
      dotCtrl_mulResCntOvf_0_delay_19 <= dotCtrl_mulResCntOvf_0_delay_18;
      dotCtrl_mulResCntOvf_0_delay_20 <= dotCtrl_mulResCntOvf_0_delay_19;
      dotCtrl_mulResCntOvf_0_delay_21 <= dotCtrl_mulResCntOvf_0_delay_20;
      dotCtrl_mulResCntOvf_0_delay_22 <= dotCtrl_mulResCntOvf_0_delay_21;
      dotCtrl_mulResCntOvf_0_delay_23 <= dotCtrl_mulResCntOvf_0_delay_22;
      dotCtrl_mulResCntOvf_0_delay_24 <= dotCtrl_mulResCntOvf_0_delay_23;
      dotCtrl_mulResCntOvf_0_delay_25 <= dotCtrl_mulResCntOvf_0_delay_24;
      dotCtrl_mulResCntOvf_0_delay_26 <= dotCtrl_mulResCntOvf_0_delay_25;
      dotCtrl_mulResCntOvf_0_delay_27 <= dotCtrl_mulResCntOvf_0_delay_26;
      dotCtrl_mulResCntOvf_0_delay_28 <= dotCtrl_mulResCntOvf_0_delay_27;
      dotCtrl_mulResCntOvf_0_delay_29 <= dotCtrl_mulResCntOvf_0_delay_28;
      dotCtrl_addOutCntOvf_0 <= dotCtrl_mulResCntOvf_0_delay_29;
      dotCtrl_mulResCntOvf_1_delay_1 <= dotCtrl_mulResCntOvf_1;
      dotCtrl_mulResCntOvf_1_delay_2 <= dotCtrl_mulResCntOvf_1_delay_1;
      dotCtrl_mulResCntOvf_1_delay_3 <= dotCtrl_mulResCntOvf_1_delay_2;
      dotCtrl_mulResCntOvf_1_delay_4 <= dotCtrl_mulResCntOvf_1_delay_3;
      dotCtrl_mulResCntOvf_1_delay_5 <= dotCtrl_mulResCntOvf_1_delay_4;
      dotCtrl_mulResCntOvf_1_delay_6 <= dotCtrl_mulResCntOvf_1_delay_5;
      dotCtrl_mulResCntOvf_1_delay_7 <= dotCtrl_mulResCntOvf_1_delay_6;
      dotCtrl_mulResCntOvf_1_delay_8 <= dotCtrl_mulResCntOvf_1_delay_7;
      dotCtrl_mulResCntOvf_1_delay_9 <= dotCtrl_mulResCntOvf_1_delay_8;
      dotCtrl_mulResCntOvf_1_delay_10 <= dotCtrl_mulResCntOvf_1_delay_9;
      dotCtrl_mulResCntOvf_1_delay_11 <= dotCtrl_mulResCntOvf_1_delay_10;
      dotCtrl_mulResCntOvf_1_delay_12 <= dotCtrl_mulResCntOvf_1_delay_11;
      dotCtrl_mulResCntOvf_1_delay_13 <= dotCtrl_mulResCntOvf_1_delay_12;
      dotCtrl_mulResCntOvf_1_delay_14 <= dotCtrl_mulResCntOvf_1_delay_13;
      dotCtrl_mulResCntOvf_1_delay_15 <= dotCtrl_mulResCntOvf_1_delay_14;
      dotCtrl_mulResCntOvf_1_delay_16 <= dotCtrl_mulResCntOvf_1_delay_15;
      dotCtrl_mulResCntOvf_1_delay_17 <= dotCtrl_mulResCntOvf_1_delay_16;
      dotCtrl_mulResCntOvf_1_delay_18 <= dotCtrl_mulResCntOvf_1_delay_17;
      dotCtrl_mulResCntOvf_1_delay_19 <= dotCtrl_mulResCntOvf_1_delay_18;
      dotCtrl_mulResCntOvf_1_delay_20 <= dotCtrl_mulResCntOvf_1_delay_19;
      dotCtrl_mulResCntOvf_1_delay_21 <= dotCtrl_mulResCntOvf_1_delay_20;
      dotCtrl_mulResCntOvf_1_delay_22 <= dotCtrl_mulResCntOvf_1_delay_21;
      dotCtrl_mulResCntOvf_1_delay_23 <= dotCtrl_mulResCntOvf_1_delay_22;
      dotCtrl_mulResCntOvf_1_delay_24 <= dotCtrl_mulResCntOvf_1_delay_23;
      dotCtrl_mulResCntOvf_1_delay_25 <= dotCtrl_mulResCntOvf_1_delay_24;
      dotCtrl_mulResCntOvf_1_delay_26 <= dotCtrl_mulResCntOvf_1_delay_25;
      dotCtrl_mulResCntOvf_1_delay_27 <= dotCtrl_mulResCntOvf_1_delay_26;
      dotCtrl_mulResCntOvf_1_delay_28 <= dotCtrl_mulResCntOvf_1_delay_27;
      dotCtrl_mulResCntOvf_1_delay_29 <= dotCtrl_mulResCntOvf_1_delay_28;
      dotCtrl_addOutCntOvf_1 <= dotCtrl_mulResCntOvf_1_delay_29;
      dotCtrl_flagSetCond <= (dotCtrl_enAddOutCnt && (dotCtrl_addOutCntOvf_0 && dotCtrl_addOutCntOvf_1));
      dotCtrl_flagInv <= dotCtrl_flagInvNext;
      dotCtrl_accCntOvf_delay_1 <= dotCtrl_accCntOvf;
      dotCtrl_accCntOvf_delay_2 <= dotCtrl_accCntOvf_delay_1;
      dotCtrl_accCntOvf_delay_3 <= dotCtrl_accCntOvf_delay_2;
      dotCtrl_accCntOvf_delay_4 <= dotCtrl_accCntOvf_delay_3;
      dotCtrl_accCntOvf_delay_5 <= dotCtrl_accCntOvf_delay_4;
      dotCtrl_accCntOvf_delay_6 <= dotCtrl_accCntOvf_delay_5;
      dotCtrl_accCntOvf_delay_7 <= dotCtrl_accCntOvf_delay_6;
      dotCtrl_accCntOvf_delay_8 <= dotCtrl_accCntOvf_delay_7;
      dotCtrl_accCntOvf_delay_9 <= dotCtrl_accCntOvf_delay_8;
      dotCtrl_accCntOvf_delay_10 <= dotCtrl_accCntOvf_delay_9;
      dotCtrl_accCntOvf_delay_11 <= dotCtrl_accCntOvf_delay_10;
      dotCtrl_accCntOvf_delay_12 <= dotCtrl_accCntOvf_delay_11;
      dotCtrl_accCntOvf_delay_13 <= dotCtrl_accCntOvf_delay_12;
      dotCtrl_accCntOvf_delay_14 <= dotCtrl_accCntOvf_delay_13;
      dotCtrl_accCntOvf_delay_15 <= dotCtrl_accCntOvf_delay_14;
      dotCtrl_accCntOvf_delay_16 <= dotCtrl_accCntOvf_delay_15;
      dotCtrl_accCntOvf_delay_17 <= dotCtrl_accCntOvf_delay_16;
      dotCtrl_accCntOvf_delay_18 <= dotCtrl_accCntOvf_delay_17;
      dotCtrl_accCntOvf_delay_19 <= dotCtrl_accCntOvf_delay_18;
      dotCtrl_accCntOvf_delay_20 <= dotCtrl_accCntOvf_delay_19;
      dotCtrl_accCntOvf_delay_21 <= dotCtrl_accCntOvf_delay_20;
      dotCtrl_accCntOvf_delay_22 <= dotCtrl_accCntOvf_delay_21;
      dotCtrl_accCntOvf_delay_23 <= dotCtrl_accCntOvf_delay_22;
      dotCtrl_accCntOvf_delay_24 <= dotCtrl_accCntOvf_delay_23;
      dotCtrl_accCntOvf_delay_25 <= dotCtrl_accCntOvf_delay_24;
      dotCtrl_accCntOvf_delay_26 <= dotCtrl_accCntOvf_delay_25;
      dotCtrl_accCntOvf_delay_27 <= dotCtrl_accCntOvf_delay_26;
      dotCtrl_accCntOvf_delay_28 <= dotCtrl_accCntOvf_delay_27;
      dotCtrl_accCntOvf_delay_29 <= dotCtrl_accCntOvf_delay_28;
      dotCtrl_accCntOvf_delay_30 <= dotCtrl_accCntOvf_delay_29;
      dotCtrl_accCntOvf_delay_31 <= dotCtrl_accCntOvf_delay_30;
      dotCtrl_accCntOvf_delay_32 <= dotCtrl_accCntOvf_delay_31;
      dotCtrl_accCntOvf_delay_33 <= dotCtrl_accCntOvf_delay_32;
      dotCtrl_accCntOvf_delay_34 <= dotCtrl_accCntOvf_delay_33;
      dotCtrl_accCntOvf_delay_35 <= dotCtrl_accCntOvf_delay_34;
      dotCtrl_accCntOvfDly <= dotCtrl_accCntOvf_delay_35;
      if(dotCtrl_enMulResCnt) begin
        dotCtrl_accCnt <= (dotCtrl_accCnt + 5'h01);
        if(dotCtrl_accCntOvf) begin
          dotCtrl_accCnt <= 5'h0;
        end
      end
      dotCtrl_accCntOvf_delay_1_1 <= dotCtrl_accCntOvf;
      dotCtrl_accCntOvf_delay_2_1 <= dotCtrl_accCntOvf_delay_1_1;
      dotCtrl_accCntOvf_delay_3_1 <= dotCtrl_accCntOvf_delay_2_1;
      dotCtrl_accCntOvf_delay_4_1 <= dotCtrl_accCntOvf_delay_3_1;
      dotCtrl_accCntOvf_delay_5_1 <= dotCtrl_accCntOvf_delay_4_1;
      dotCtrl_accCntOvf_delay_6_1 <= dotCtrl_accCntOvf_delay_5_1;
      dotCtrl_accCntOvf_delay_7_1 <= dotCtrl_accCntOvf_delay_6_1;
      dotCtrl_accCntOvf_delay_8_1 <= dotCtrl_accCntOvf_delay_7_1;
      dotCtrl_accCntOvf_delay_9_1 <= dotCtrl_accCntOvf_delay_8_1;
      dotCtrl_accCntOvf_delay_10_1 <= dotCtrl_accCntOvf_delay_9_1;
      dotCtrl_accCntOvf_delay_11_1 <= dotCtrl_accCntOvf_delay_10_1;
      dotCtrl_accCntOvf_delay_12_1 <= dotCtrl_accCntOvf_delay_11_1;
      dotCtrl_accCntOvf_delay_13_1 <= dotCtrl_accCntOvf_delay_12_1;
      dotCtrl_accCntOvf_delay_14_1 <= dotCtrl_accCntOvf_delay_13_1;
      dotCtrl_accCntOvf_delay_15_1 <= dotCtrl_accCntOvf_delay_14_1;
      dotCtrl_accCntOvf_delay_16_1 <= dotCtrl_accCntOvf_delay_15_1;
      dotCtrl_accCntOvf_delay_17_1 <= dotCtrl_accCntOvf_delay_16_1;
      dotCtrl_accCntOvf_delay_18_1 <= dotCtrl_accCntOvf_delay_17_1;
      dotCtrl_accCntOvf_delay_19_1 <= dotCtrl_accCntOvf_delay_18_1;
      dotCtrl_accCntOvf_delay_20_1 <= dotCtrl_accCntOvf_delay_19_1;
      dotCtrl_accCntOvf_delay_21_1 <= dotCtrl_accCntOvf_delay_20_1;
      dotCtrl_accCntOvf_delay_22_1 <= dotCtrl_accCntOvf_delay_21_1;
      dotCtrl_accCntOvf_delay_23_1 <= dotCtrl_accCntOvf_delay_22_1;
      dotCtrl_accCntOvf_delay_24_1 <= dotCtrl_accCntOvf_delay_23_1;
      dotCtrl_accCntOvf_delay_25_1 <= dotCtrl_accCntOvf_delay_24_1;
      dotCtrl_accCntOvf_delay_26_1 <= dotCtrl_accCntOvf_delay_25_1;
      dotCtrl_accCntOvf_delay_27_1 <= dotCtrl_accCntOvf_delay_26_1;
      dotCtrl_accCntOvf_delay_28_1 <= dotCtrl_accCntOvf_delay_27_1;
      dotCtrl_accCntOvf_delay_29_1 <= dotCtrl_accCntOvf_delay_28_1;
      dotCtrl_accCntOvf_delay_30_1 <= dotCtrl_accCntOvf_delay_29_1;
      fAxpyCtrl_cfgVld <= ret_1_valid;
      fAxpyCtrl_enMulResCnt <= fAxpyCtrl_enMulResCntNext;
      fAxpyCtrl_muResCnt_0 <= t_fAxpyCtrl_muResCnt_0;
      fAxpyCtrl_muResCnt_1 <= t_fAxpyCtrl_muResCnt_1;
      fAxpyCtrl_mulResCntOvf_0 <= t_fAxpyCtrl_mulResCntOvf_0;
      fAxpyCtrl_mulResCntOvf_1 <= t_fAxpyCtrl_mulResCntOvf_1;
      fAxpyCtrl_mulResCntOvfReduce <= (t_fAxpyCtrl_mulResCntOvf_0 && t_fAxpyCtrl_mulResCntOvf_1);
      fAxpyCtrl_mulResCntLastZero <= fAxpyCtrl_mulResCntLastZeroNext;
      fAxpyCtrl_mulResCntLastNotZero <= fAxpyCtrl_mulResCntLastNotZeroNext;
      fAxpyCtrl_enMulResCnt_delay_1 <= fAxpyCtrl_enMulResCnt;
      fAxpyCtrl_enMulResCnt_delay_2 <= fAxpyCtrl_enMulResCnt_delay_1;
      fAxpyCtrl_enMulResCnt_delay_3 <= fAxpyCtrl_enMulResCnt_delay_2;
      fAxpyCtrl_enMulResCnt_delay_4 <= fAxpyCtrl_enMulResCnt_delay_3;
      fAxpyCtrl_enMulResCnt_delay_5 <= fAxpyCtrl_enMulResCnt_delay_4;
      fAxpyCtrl_enAddOutCnt <= fAxpyCtrl_enMulResCnt_delay_5;
      fAxpyCtrl_mulResCntOvf_0_delay_1 <= fAxpyCtrl_mulResCntOvf_0;
      fAxpyCtrl_mulResCntOvf_0_delay_2 <= fAxpyCtrl_mulResCntOvf_0_delay_1;
      fAxpyCtrl_mulResCntOvf_0_delay_3 <= fAxpyCtrl_mulResCntOvf_0_delay_2;
      fAxpyCtrl_mulResCntOvf_0_delay_4 <= fAxpyCtrl_mulResCntOvf_0_delay_3;
      fAxpyCtrl_mulResCntOvf_0_delay_5 <= fAxpyCtrl_mulResCntOvf_0_delay_4;
      fAxpyCtrl_addOutCntOvf_0 <= fAxpyCtrl_mulResCntOvf_0_delay_5;
      fAxpyCtrl_mulResCntOvf_1_delay_1 <= fAxpyCtrl_mulResCntOvf_1;
      fAxpyCtrl_mulResCntOvf_1_delay_2 <= fAxpyCtrl_mulResCntOvf_1_delay_1;
      fAxpyCtrl_mulResCntOvf_1_delay_3 <= fAxpyCtrl_mulResCntOvf_1_delay_2;
      fAxpyCtrl_mulResCntOvf_1_delay_4 <= fAxpyCtrl_mulResCntOvf_1_delay_3;
      fAxpyCtrl_mulResCntOvf_1_delay_5 <= fAxpyCtrl_mulResCntOvf_1_delay_4;
      fAxpyCtrl_addOutCntOvf_1 <= fAxpyCtrl_mulResCntOvf_1_delay_5;
      t_fAxpyCtrl_psumPushEnReg <= (fAxpyCtrl_enMulResCnt && (! fAxpyCtrl_mulResCntOvf_1));
      t_fAxpyCtrl_psumPushEnReg_1 <= t_fAxpyCtrl_psumPushEnReg;
      t_fAxpyCtrl_psumPushEnReg_2 <= t_fAxpyCtrl_psumPushEnReg_1;
      t_fAxpyCtrl_psumPushEnReg_3 <= t_fAxpyCtrl_psumPushEnReg_2;
      t_fAxpyCtrl_psumPushEnReg_4 <= t_fAxpyCtrl_psumPushEnReg_3;
      fAxpyCtrl_psumPushEnReg <= t_fAxpyCtrl_psumPushEnReg_4;
      fAxpyCtrl_resAddReady <= fAxpyCtrl_resAddReadyNext;
      fAxpyCtrl_psumPopEnReg <= fAxpyCtrl_psumPopEnRegNext;
      pAxpyCtrl_cfgVld <= ret_2_valid;
      pAxpyCtrl_cycleReduce <= pAxpyCtrl_cycleReduceNext;
      pAxpyCtrl_enMulResCnt <= pAxpyCtrl_enMulResCntNext;
      pAxpyCtrl_mulResCntOvf <= pAxpyCtrl_mulResCntOvfNext;
      pAxpyCtrl_mulResCntHighZero <= pAxpyCtrl_mulResCntHighZeroNext;
      pAxpyCtrl_mulResCntHighNotZero <= pAxpyCtrl_mulResCntHighNotZeroNext;
      pAxpyCtrl_mulResCnt <= pAxpyCtrl_mulResCntNext;
      pAxpyCtrl_enMulResCnt_delay_1 <= pAxpyCtrl_enMulResCnt;
      pAxpyCtrl_enMulResCnt_delay_2 <= pAxpyCtrl_enMulResCnt_delay_1;
      pAxpyCtrl_enMulResCnt_delay_3 <= pAxpyCtrl_enMulResCnt_delay_2;
      pAxpyCtrl_enMulResCnt_delay_4 <= pAxpyCtrl_enMulResCnt_delay_3;
      pAxpyCtrl_enMulResCnt_delay_5 <= pAxpyCtrl_enMulResCnt_delay_4;
      pAxpyCtrl_enMulResCntDly <= pAxpyCtrl_enMulResCnt_delay_5;
      pAxpyCtrl_mulResCntOvf_delay_1 <= pAxpyCtrl_mulResCntOvf;
      pAxpyCtrl_mulResCntOvf_delay_2 <= pAxpyCtrl_mulResCntOvf_delay_1;
      pAxpyCtrl_mulResCntOvf_delay_3 <= pAxpyCtrl_mulResCntOvf_delay_2;
      pAxpyCtrl_mulResCntOvf_delay_4 <= pAxpyCtrl_mulResCntOvf_delay_3;
      pAxpyCtrl_mulResCntOvf_delay_5 <= pAxpyCtrl_mulResCntOvf_delay_4;
      pAxpyCtrl_addOutCntOvf <= pAxpyCtrl_mulResCntOvf_delay_5;
      if((pAxpyCtrl_enAddOutCnt && pAxpyCtrl_addOutCntOvf)) begin
        pAxpyCtrl_cycleReduceDly <= 1'b1;
      end
      pAxpyCtrl_lastElem <= pAxpyCtrl_lastElemNext;
      pAxpyCtrl_cycleCnt <= pAxpyCtrl_cycleCntNext;
      if(pAxpyCtrl_enCycleCnt) begin
        if(pAxpyCtrl_lastElem) begin
          pAxpyCtrl_cycleReduceDly <= 1'b0;
        end
      end
      pAxpyCtrl_psumPopEn <= pAxpyCtrl_psumPopEnNext;
      pAxpyCtrl_bSelBit <= pAxpyCtrl_bSelBitNext;
      pAxpyCtrl_flagSetCond <= (pAxpyCtrl_enCycleCnt && pAxpyCtrl_lastElem);
      pAxpyCtrl_flagInv <= pAxpyCtrl_flagInvNext;
      if((pAxpyCtrl_cycleReduce && add_fifoCtrl_io_pop_fire)) begin
        pAxpyCtrl_vldToggle <= (! pAxpyCtrl_vldToggle);
      end
      t_pAxpyCtrl_reduceVldDly <= (pAxpyCtrl_psumVld && pAxpyCtrl_reduceVld);
      t_pAxpyCtrl_reduceVldDly_1 <= t_pAxpyCtrl_reduceVldDly;
      t_pAxpyCtrl_reduceVldDly_2 <= t_pAxpyCtrl_reduceVldDly_1;
      t_pAxpyCtrl_reduceVldDly_3 <= t_pAxpyCtrl_reduceVldDly_2;
      t_pAxpyCtrl_reduceVldDly_4 <= t_pAxpyCtrl_reduceVldDly_3;
      t_pAxpyCtrl_reduceVldDly_5 <= t_pAxpyCtrl_reduceVldDly_4;
      selVldUIntReg <= selVldNextUInt;
      selFifoPopUInt <= selVldNextUInt;
      selFifoPushUInt <= selVldNextUInt;
      aSel <= aSelNext;
      bSel <= bSelNext;
      ready <= readyNext;
      mulResFire <= mulResFireNext;
    end
  end

  always @(posedge clk_0_clk) begin
    if(fifoCtrl_io_pop_valid) begin
      addLogic_popDly <= fifoCtrl_io_pop_payload;
    end
    dotCtrl_cfgPayload <= ret_0_payload;
    fAxpyCtrl_cfgPayload <= ret_1_payload;
    pAxpyCtrl_cfgPayload <= ret_2_payload;
  end


endmodule

module MulEngine_7 (
  input  wire          wkvIn_tvalid,
  output wire          wkvIn_tready,
  input  wire [511:0]  wkvIn_tdata,
  input  wire          dotIn_tvalid,
  output wire          dotIn_tready,
  input  wire [511:0]  dotIn_tdata,
  input  wire          axpyIn_tvalid,
  output wire          axpyIn_tready,
  input  wire [15:0]   axpyIn_tdata,
  input  wire          scale_tvalid,
  output wire          scale_tready,
  input  wire [15:0]   scale_tdata,
  output wire          output_tvalid,
  input  wire          output_tready,
  output wire [511:0]  output_tdata,
  input  wire          cfg_tvalid,
  output wire          cfg_tready,
  input  wire [31:0]   cfg_tdata,
  output wire [5:0]    preCfgTag,
  output wire [15:0]   secondDim,
  input  wire          clk_0_clk,
  output wire          popVldNext,
  input  wire          clk_0_resetn
);

  wire       [0:0]    cfgDeMux_io_select;
  reg                 axpyLogic_inpRepeat_mul_ip_m_axis_result_tready;
  wire       [0:0]    mux_io_select;
  wire       [511:0]  fifo_io_push_payload;
  reg        [511:0]  mem_spinal_port0;
  wire                cfgDeMux_io_input_ready;
  wire                cfgDeMux_io_outputs_0_valid;
  wire       [31:0]   cfgDeMux_io_outputs_0_payload;
  wire                cfgDeMux_io_outputs_1_valid;
  wire       [31:0]   cfgDeMux_io_outputs_1_payload;
  wire                axpyLogic_inpRepeat_mul_ip_s_axis_a_tready;
  wire                axpyLogic_inpRepeat_mul_ip_s_axis_b_tready;
  wire                axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata;
  wire                mux_io_inputs_0_ready;
  wire                mux_io_inputs_1_ready;
  wire                mux_io_output_valid;
  wire       [511:0]  mux_io_output_payload;
  wire                mul_io_res_valid;
  wire       [15:0]   mul_io_res_payload_0;
  wire       [15:0]   mul_io_res_payload_1;
  wire       [15:0]   mul_io_res_payload_2;
  wire       [15:0]   mul_io_res_payload_3;
  wire       [15:0]   mul_io_res_payload_4;
  wire       [15:0]   mul_io_res_payload_5;
  wire       [15:0]   mul_io_res_payload_6;
  wire       [15:0]   mul_io_res_payload_7;
  wire       [15:0]   mul_io_res_payload_8;
  wire       [15:0]   mul_io_res_payload_9;
  wire       [15:0]   mul_io_res_payload_10;
  wire       [15:0]   mul_io_res_payload_11;
  wire       [15:0]   mul_io_res_payload_12;
  wire       [15:0]   mul_io_res_payload_13;
  wire       [15:0]   mul_io_res_payload_14;
  wire       [15:0]   mul_io_res_payload_15;
  wire       [15:0]   mul_io_res_payload_16;
  wire       [15:0]   mul_io_res_payload_17;
  wire       [15:0]   mul_io_res_payload_18;
  wire       [15:0]   mul_io_res_payload_19;
  wire       [15:0]   mul_io_res_payload_20;
  wire       [15:0]   mul_io_res_payload_21;
  wire       [15:0]   mul_io_res_payload_22;
  wire       [15:0]   mul_io_res_payload_23;
  wire       [15:0]   mul_io_res_payload_24;
  wire       [15:0]   mul_io_res_payload_25;
  wire       [15:0]   mul_io_res_payload_26;
  wire       [15:0]   mul_io_res_payload_27;
  wire       [15:0]   mul_io_res_payload_28;
  wire       [15:0]   mul_io_res_payload_29;
  wire       [15:0]   mul_io_res_payload_30;
  wire       [15:0]   mul_io_res_payload_31;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [511:0]  fifo_io_pop_payload;
  wire                fifo_io_popVldNext;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire       [15:0]   t_dotLogic_cntOvf_0;
  wire       [7:0]    t_dotLogic_inCntOvf;
  wire       [15:0]   t_dotLogic_inCntOvf_1;
  wire       [7:0]    t_dotLogic_popPre_valid;
  wire       [15:0]   t_dotLogic_cntOvfPipe_0;
  wire       [15:0]   t_axpyLogic_cntOvf_0;
  wire       [15:0]   t_t_axpyLogic_inpHalt_ready_1;
  wire       [255:0]  t_axpyLogic_axpyOut_payload;
  wire       [255:0]  t_io_push_payload;
  wire                ram_rdPort_cmd_valid;
  wire       [4:0]    ram_rdPort_cmd_payload;
  wire       [511:0]  ram_rdPort_rsp;
  wire                ram_wrPort_valid;
  wire       [4:0]    ram_wrPort_payload_address;
  wire       [511:0]  ram_wrPort_payload_data;
  wire                dotLogic_enInc;
  (* max_fanout = 100 *) reg        [7:0]    dotLogic_cnt_0;
  reg        [15:0]   dotLogic_cnt_1;
  wire                dotLogic_cntOvf_0;
  wire                dotLogic_cntOvf_1;
  wire                dotLogic_cntOvfReduce;
  reg                 dotLogic_flag;
  reg                 dotLogic_notReadyFlag;
  (* max_fanout = 100 *) reg        [4:0]    dotLogic_inCnt;
  wire                dotLogic_inCntOvf;
  wire                dotIn_fire;
  wire                dotLogic_popPre_valid;
  reg                 dotLogic_popPre_ready;
  wire                dotLogic_dotOut_valid;
  wire                dotLogic_dotOut_ready;
  wire       [511:0]  dotLogic_dotOut_payload;
  wire                dotLogic_popPre_m2sPipe_valid;
  wire                dotLogic_popPre_m2sPipe_ready;
  reg                 dotLogic_popPre_rValid;
  wire                dotLogic_enIncPipe;
  reg        [7:0]    dotLogic_cntPipe_0;
  reg        [15:0]   dotLogic_cntPipe_1;
  wire                dotLogic_cntOvfPipe_0;
  wire                dotLogic_cntOvfPipe_1;
  wire                dotLogic_cntOvfReducePipe;
  wire                dotLogic_dotOut_fire;
  wire                dotLogic_clrCondPipe;
  wire                dotLogic_incCond;
  wire                dotLogic_clrCond;
  (* keep = "true" , max_fanout = 100 *) reg                 dotLogic_dotInReady;
  wire                axpyLogic_enInc;
  reg        [7:0]    axpyLogic_cnt_0;
  reg        [15:0]   axpyLogic_cnt_1;
  wire                axpyLogic_cntOvf_0;
  wire                axpyLogic_cntOvf_1;
  wire                axpyLogic_cntOvfReduce;
  wire                axpyLogic_inpHalt_valid;
  wire                axpyLogic_inpHalt_ready;
  wire       [15:0]   axpyLogic_inpHalt_payload;
  wire                axpyLogic_scaleHalt_valid;
  wire                axpyLogic_scaleHalt_ready;
  wire       [15:0]   axpyLogic_scaleHalt_payload;
  wire                axpyLogic_inpRepeat_valid;
  wire                axpyLogic_inpRepeat_ready;
  wire       [15:0]   axpyLogic_inpRepeat_payload;
  reg        [7:0]    t_axpyLogic_inpHalt_ready;
  wire                t_axpyLogic_inpHalt_ready_1;
  wire                axpyLogic_inpRepeat_fire;
  (* max_fanout = 100 *) wire                axpyLogic_res_valid;
  wire                axpyLogic_res_ready;
  wire       [15:0]   axpyLogic_res_payload;
  reg                 mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid;
  reg        [15:0]   mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData;
  wire                axpyLogic_axpyOut_valid;
  wire                axpyLogic_axpyOut_ready;
  wire       [511:0]  axpyLogic_axpyOut_payload;
  wire                axpyLogic_incCond;
  wire                axpyLogic_clrCond;
  wire       [15:0]   secondDim_1;
  wire                join_valid;
  wire                join_ready;
  wire                join_fire;
  wire                act_valid;
  wire       [15:0]   act_payload_0;
  wire       [15:0]   act_payload_1;
  wire       [15:0]   act_payload_2;
  wire       [15:0]   act_payload_3;
  wire       [15:0]   act_payload_4;
  wire       [15:0]   act_payload_5;
  wire       [15:0]   act_payload_6;
  wire       [15:0]   act_payload_7;
  wire       [15:0]   act_payload_8;
  wire       [15:0]   act_payload_9;
  wire       [15:0]   act_payload_10;
  wire       [15:0]   act_payload_11;
  wire       [15:0]   act_payload_12;
  wire       [15:0]   act_payload_13;
  wire       [15:0]   act_payload_14;
  wire       [15:0]   act_payload_15;
  wire       [15:0]   act_payload_16;
  wire       [15:0]   act_payload_17;
  wire       [15:0]   act_payload_18;
  wire       [15:0]   act_payload_19;
  wire       [15:0]   act_payload_20;
  wire       [15:0]   act_payload_21;
  wire       [15:0]   act_payload_22;
  wire       [15:0]   act_payload_23;
  wire       [15:0]   act_payload_24;
  wire       [15:0]   act_payload_25;
  wire       [15:0]   act_payload_26;
  wire       [15:0]   act_payload_27;
  wire       [15:0]   act_payload_28;
  wire       [15:0]   act_payload_29;
  wire       [15:0]   act_payload_30;
  wire       [15:0]   act_payload_31;
  wire                wkv_valid;
  wire       [15:0]   wkv_payload_0;
  wire       [15:0]   wkv_payload_1;
  wire       [15:0]   wkv_payload_2;
  wire       [15:0]   wkv_payload_3;
  wire       [15:0]   wkv_payload_4;
  wire       [15:0]   wkv_payload_5;
  wire       [15:0]   wkv_payload_6;
  wire       [15:0]   wkv_payload_7;
  wire       [15:0]   wkv_payload_8;
  wire       [15:0]   wkv_payload_9;
  wire       [15:0]   wkv_payload_10;
  wire       [15:0]   wkv_payload_11;
  wire       [15:0]   wkv_payload_12;
  wire       [15:0]   wkv_payload_13;
  wire       [15:0]   wkv_payload_14;
  wire       [15:0]   wkv_payload_15;
  wire       [15:0]   wkv_payload_16;
  wire       [15:0]   wkv_payload_17;
  wire       [15:0]   wkv_payload_18;
  wire       [15:0]   wkv_payload_19;
  wire       [15:0]   wkv_payload_20;
  wire       [15:0]   wkv_payload_21;
  wire       [15:0]   wkv_payload_22;
  wire       [15:0]   wkv_payload_23;
  wire       [15:0]   wkv_payload_24;
  wire       [15:0]   wkv_payload_25;
  wire       [15:0]   wkv_payload_26;
  wire       [15:0]   wkv_payload_27;
  wire       [15:0]   wkv_payload_28;
  wire       [15:0]   wkv_payload_29;
  wire       [15:0]   wkv_payload_30;
  wire       [15:0]   wkv_payload_31;
  (* max_fanout = 100 *) reg                 ready;
  (* ram_style = "distributed" *) reg [511:0] mem [0:31];

  assign t_dotLogic_cntOvf_0 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_dotLogic_inCntOvf = {3'd0, dotLogic_inCnt};
  assign t_dotLogic_inCntOvf_1 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_dotLogic_popPre_valid = {3'd0, dotLogic_inCnt};
  assign t_dotLogic_cntOvfPipe_0 = cfgDeMux_io_outputs_0_payload[31 : 16];
  assign t_axpyLogic_cntOvf_0 = cfgDeMux_io_outputs_1_payload[31 : 16];
  assign t_t_axpyLogic_inpHalt_ready_1 = cfgDeMux_io_outputs_1_payload[31 : 16];
  assign t_axpyLogic_axpyOut_payload = {axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,axpyLogic_res_payload}}}}}}}}}}}}}}};
  assign t_io_push_payload = {mul_io_res_payload_15,{mul_io_res_payload_14,{mul_io_res_payload_13,{mul_io_res_payload_12,{mul_io_res_payload_11,{mul_io_res_payload_10,{mul_io_res_payload_9,{mul_io_res_payload_8,{mul_io_res_payload_7,{mul_io_res_payload_6,{mul_io_res_payload_5,{mul_io_res_payload_4,{mul_io_res_payload_3,{mul_io_res_payload_2,{mul_io_res_payload_1,mul_io_res_payload_0}}}}}}}}}}}}}}};
  always @(posedge clk_0_clk) begin
    if(ram_rdPort_cmd_valid) begin
      mem_spinal_port0 <= mem[ram_rdPort_cmd_payload];
    end
  end

  always @(posedge clk_0_clk) begin
    if(ram_wrPort_valid) begin
      mem[ram_wrPort_payload_address] <= ram_wrPort_payload_data;
    end
  end

  StreamDemux_25 cfgDeMux (
    .io_select            (cfgDeMux_io_select                 ), //i
    .io_input_valid       (cfg_tvalid                         ), //i
    .io_input_ready       (cfgDeMux_io_input_ready            ), //o
    .io_input_payload     (cfg_tdata[31:0]                    ), //i
    .io_outputs_0_valid   (cfgDeMux_io_outputs_0_valid        ), //o
    .io_outputs_0_ready   (dotLogic_clrCondPipe               ), //i
    .io_outputs_0_payload (cfgDeMux_io_outputs_0_payload[31:0]), //o
    .io_outputs_1_valid   (cfgDeMux_io_outputs_1_valid        ), //o
    .io_outputs_1_ready   (axpyLogic_clrCond                  ), //i
    .io_outputs_1_payload (cfgDeMux_io_outputs_1_payload[31:0])  //o
  );
  fp16mul7s axpyLogic_inpRepeat_mul_ip (
    .aclk                 (clk_0_clk                                           ), //i
    .s_axis_a_tvalid      (axpyLogic_inpRepeat_valid                           ), //i
    .s_axis_a_tready      (axpyLogic_inpRepeat_mul_ip_s_axis_a_tready          ), //o
    .s_axis_a_tdata       (axpyLogic_inpRepeat_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (axpyLogic_scaleHalt_valid                           ), //i
    .s_axis_b_tready      (axpyLogic_inpRepeat_mul_ip_s_axis_b_tready          ), //o
    .s_axis_b_tdata       (axpyLogic_scaleHalt_payload[15:0]                   ), //i
    .m_axis_result_tvalid (axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tready (axpyLogic_inpRepeat_mul_ip_m_axis_result_tready     ), //i
    .m_axis_result_tdata  (axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  StreamMux_49 mux (
    .io_select           (mux_io_select                   ), //i
    .io_inputs_0_valid   (dotLogic_dotOut_valid           ), //i
    .io_inputs_0_ready   (mux_io_inputs_0_ready           ), //o
    .io_inputs_0_payload (dotLogic_dotOut_payload[511:0]  ), //i
    .io_inputs_1_valid   (axpyLogic_axpyOut_valid         ), //i
    .io_inputs_1_ready   (mux_io_inputs_1_ready           ), //o
    .io_inputs_1_payload (axpyLogic_axpyOut_payload[511:0]), //i
    .io_output_valid     (mux_io_output_valid             ), //o
    .io_output_ready     (join_fire                       ), //i
    .io_output_payload   (mux_io_output_payload[511:0]    )  //o
  );
  Vec2to1_7 mul (
    .io_in0_valid      (act_valid                  ), //i
    .io_in0_payload_0  (act_payload_0[15:0]        ), //i
    .io_in0_payload_1  (act_payload_1[15:0]        ), //i
    .io_in0_payload_2  (act_payload_2[15:0]        ), //i
    .io_in0_payload_3  (act_payload_3[15:0]        ), //i
    .io_in0_payload_4  (act_payload_4[15:0]        ), //i
    .io_in0_payload_5  (act_payload_5[15:0]        ), //i
    .io_in0_payload_6  (act_payload_6[15:0]        ), //i
    .io_in0_payload_7  (act_payload_7[15:0]        ), //i
    .io_in0_payload_8  (act_payload_8[15:0]        ), //i
    .io_in0_payload_9  (act_payload_9[15:0]        ), //i
    .io_in0_payload_10 (act_payload_10[15:0]       ), //i
    .io_in0_payload_11 (act_payload_11[15:0]       ), //i
    .io_in0_payload_12 (act_payload_12[15:0]       ), //i
    .io_in0_payload_13 (act_payload_13[15:0]       ), //i
    .io_in0_payload_14 (act_payload_14[15:0]       ), //i
    .io_in0_payload_15 (act_payload_15[15:0]       ), //i
    .io_in0_payload_16 (act_payload_16[15:0]       ), //i
    .io_in0_payload_17 (act_payload_17[15:0]       ), //i
    .io_in0_payload_18 (act_payload_18[15:0]       ), //i
    .io_in0_payload_19 (act_payload_19[15:0]       ), //i
    .io_in0_payload_20 (act_payload_20[15:0]       ), //i
    .io_in0_payload_21 (act_payload_21[15:0]       ), //i
    .io_in0_payload_22 (act_payload_22[15:0]       ), //i
    .io_in0_payload_23 (act_payload_23[15:0]       ), //i
    .io_in0_payload_24 (act_payload_24[15:0]       ), //i
    .io_in0_payload_25 (act_payload_25[15:0]       ), //i
    .io_in0_payload_26 (act_payload_26[15:0]       ), //i
    .io_in0_payload_27 (act_payload_27[15:0]       ), //i
    .io_in0_payload_28 (act_payload_28[15:0]       ), //i
    .io_in0_payload_29 (act_payload_29[15:0]       ), //i
    .io_in0_payload_30 (act_payload_30[15:0]       ), //i
    .io_in0_payload_31 (act_payload_31[15:0]       ), //i
    .io_in1_valid      (wkv_valid                  ), //i
    .io_in1_payload_0  (wkv_payload_0[15:0]        ), //i
    .io_in1_payload_1  (wkv_payload_1[15:0]        ), //i
    .io_in1_payload_2  (wkv_payload_2[15:0]        ), //i
    .io_in1_payload_3  (wkv_payload_3[15:0]        ), //i
    .io_in1_payload_4  (wkv_payload_4[15:0]        ), //i
    .io_in1_payload_5  (wkv_payload_5[15:0]        ), //i
    .io_in1_payload_6  (wkv_payload_6[15:0]        ), //i
    .io_in1_payload_7  (wkv_payload_7[15:0]        ), //i
    .io_in1_payload_8  (wkv_payload_8[15:0]        ), //i
    .io_in1_payload_9  (wkv_payload_9[15:0]        ), //i
    .io_in1_payload_10 (wkv_payload_10[15:0]       ), //i
    .io_in1_payload_11 (wkv_payload_11[15:0]       ), //i
    .io_in1_payload_12 (wkv_payload_12[15:0]       ), //i
    .io_in1_payload_13 (wkv_payload_13[15:0]       ), //i
    .io_in1_payload_14 (wkv_payload_14[15:0]       ), //i
    .io_in1_payload_15 (wkv_payload_15[15:0]       ), //i
    .io_in1_payload_16 (wkv_payload_16[15:0]       ), //i
    .io_in1_payload_17 (wkv_payload_17[15:0]       ), //i
    .io_in1_payload_18 (wkv_payload_18[15:0]       ), //i
    .io_in1_payload_19 (wkv_payload_19[15:0]       ), //i
    .io_in1_payload_20 (wkv_payload_20[15:0]       ), //i
    .io_in1_payload_21 (wkv_payload_21[15:0]       ), //i
    .io_in1_payload_22 (wkv_payload_22[15:0]       ), //i
    .io_in1_payload_23 (wkv_payload_23[15:0]       ), //i
    .io_in1_payload_24 (wkv_payload_24[15:0]       ), //i
    .io_in1_payload_25 (wkv_payload_25[15:0]       ), //i
    .io_in1_payload_26 (wkv_payload_26[15:0]       ), //i
    .io_in1_payload_27 (wkv_payload_27[15:0]       ), //i
    .io_in1_payload_28 (wkv_payload_28[15:0]       ), //i
    .io_in1_payload_29 (wkv_payload_29[15:0]       ), //i
    .io_in1_payload_30 (wkv_payload_30[15:0]       ), //i
    .io_in1_payload_31 (wkv_payload_31[15:0]       ), //i
    .io_res_valid      (mul_io_res_valid           ), //o
    .io_res_payload_0  (mul_io_res_payload_0[15:0] ), //o
    .io_res_payload_1  (mul_io_res_payload_1[15:0] ), //o
    .io_res_payload_2  (mul_io_res_payload_2[15:0] ), //o
    .io_res_payload_3  (mul_io_res_payload_3[15:0] ), //o
    .io_res_payload_4  (mul_io_res_payload_4[15:0] ), //o
    .io_res_payload_5  (mul_io_res_payload_5[15:0] ), //o
    .io_res_payload_6  (mul_io_res_payload_6[15:0] ), //o
    .io_res_payload_7  (mul_io_res_payload_7[15:0] ), //o
    .io_res_payload_8  (mul_io_res_payload_8[15:0] ), //o
    .io_res_payload_9  (mul_io_res_payload_9[15:0] ), //o
    .io_res_payload_10 (mul_io_res_payload_10[15:0]), //o
    .io_res_payload_11 (mul_io_res_payload_11[15:0]), //o
    .io_res_payload_12 (mul_io_res_payload_12[15:0]), //o
    .io_res_payload_13 (mul_io_res_payload_13[15:0]), //o
    .io_res_payload_14 (mul_io_res_payload_14[15:0]), //o
    .io_res_payload_15 (mul_io_res_payload_15[15:0]), //o
    .io_res_payload_16 (mul_io_res_payload_16[15:0]), //o
    .io_res_payload_17 (mul_io_res_payload_17[15:0]), //o
    .io_res_payload_18 (mul_io_res_payload_18[15:0]), //o
    .io_res_payload_19 (mul_io_res_payload_19[15:0]), //o
    .io_res_payload_20 (mul_io_res_payload_20[15:0]), //o
    .io_res_payload_21 (mul_io_res_payload_21[15:0]), //o
    .io_res_payload_22 (mul_io_res_payload_22[15:0]), //o
    .io_res_payload_23 (mul_io_res_payload_23[15:0]), //o
    .io_res_payload_24 (mul_io_res_payload_24[15:0]), //o
    .io_res_payload_25 (mul_io_res_payload_25[15:0]), //o
    .io_res_payload_26 (mul_io_res_payload_26[15:0]), //o
    .io_res_payload_27 (mul_io_res_payload_27[15:0]), //o
    .io_res_payload_28 (mul_io_res_payload_28[15:0]), //o
    .io_res_payload_29 (mul_io_res_payload_29[15:0]), //o
    .io_res_payload_30 (mul_io_res_payload_30[15:0]), //o
    .io_res_payload_31 (mul_io_res_payload_31[15:0]), //o
    .clk_0_clk         (clk_0_clk                  ), //i
    .clk_0_resetn      (clk_0_resetn               )  //i
  );
  StreamFifoVldProbe_7 fifo (
    .io_push_valid   (mul_io_res_valid           ), //i
    .io_push_ready   (fifo_io_push_ready         ), //o
    .io_push_payload (fifo_io_push_payload[511:0]), //i
    .io_pop_valid    (fifo_io_pop_valid          ), //o
    .io_pop_ready    (output_tready              ), //i
    .io_pop_payload  (fifo_io_pop_payload[511:0] ), //o
    .io_popVldNext   (fifo_io_popVldNext         ), //o
    .io_occupancy    (fifo_io_occupancy[5:0]     ), //o
    .io_availability (fifo_io_availability[5:0]  ), //o
    .clk_0_clk       (clk_0_clk                  ), //i
    .clk_0_resetn    (clk_0_resetn               )  //i
  );
  assign cfg_tready = cfgDeMux_io_input_ready;
  assign cfgDeMux_io_select = cfg_tdata[24];
  assign ram_rdPort_rsp = mem_spinal_port0;
  assign dotLogic_cntOvf_0 = (dotLogic_cnt_0 == t_dotLogic_cntOvf_0[7 : 0]);
  assign dotLogic_cntOvf_1 = (dotLogic_cnt_1 == cfgDeMux_io_outputs_0_payload[15 : 0]);
  assign dotLogic_cntOvfReduce = (dotLogic_cntOvf_0 && dotLogic_cntOvf_1);
  assign dotLogic_inCntOvf = (t_dotLogic_inCntOvf == t_dotLogic_inCntOvf_1[7 : 0]);
  assign dotIn_fire = (dotIn_tvalid && dotIn_tready);
  assign dotLogic_popPre_valid = (dotLogic_flag ? 1'b1 : (dotLogic_cnt_0 < t_dotLogic_popPre_valid));
  assign ram_wrPort_valid = dotIn_fire;
  assign ram_wrPort_payload_address = dotLogic_inCnt;
  assign ram_wrPort_payload_data = dotIn_tdata;
  always @(*) begin
    dotLogic_popPre_ready = dotLogic_popPre_m2sPipe_ready;
    if((! dotLogic_popPre_m2sPipe_valid)) begin
      dotLogic_popPre_ready = 1'b1;
    end
  end

  assign dotLogic_popPre_m2sPipe_valid = dotLogic_popPre_rValid;
  assign dotLogic_dotOut_valid = dotLogic_popPre_m2sPipe_valid;
  assign dotLogic_popPre_m2sPipe_ready = dotLogic_dotOut_ready;
  assign dotLogic_dotOut_payload = ram_rdPort_rsp;
  assign ram_rdPort_cmd_valid = dotLogic_popPre_ready;
  assign ram_rdPort_cmd_payload = dotLogic_cnt_0[4:0];
  assign dotLogic_cntOvfPipe_0 = (dotLogic_cntPipe_0 == t_dotLogic_cntOvfPipe_0[7 : 0]);
  assign dotLogic_cntOvfPipe_1 = (dotLogic_cntPipe_1 == cfgDeMux_io_outputs_0_payload[15 : 0]);
  assign dotLogic_cntOvfReducePipe = (dotLogic_cntOvfPipe_0 && dotLogic_cntOvfPipe_1);
  assign dotLogic_dotOut_fire = (dotLogic_dotOut_valid && dotLogic_dotOut_ready);
  assign dotLogic_enIncPipe = dotLogic_dotOut_fire;
  assign dotLogic_clrCondPipe = (dotLogic_enIncPipe && dotLogic_cntOvfReducePipe);
  assign dotLogic_incCond = (dotLogic_popPre_valid && dotLogic_popPre_ready);
  assign dotLogic_clrCond = (dotLogic_incCond && dotLogic_cntOvfReduce);
  assign dotLogic_enInc = dotLogic_incCond;
  assign dotIn_tready = dotLogic_dotInReady;
  assign axpyLogic_cntOvf_0 = (axpyLogic_cnt_0 == t_axpyLogic_cntOvf_0[7 : 0]);
  assign axpyLogic_cntOvf_1 = (axpyLogic_cnt_1 == cfgDeMux_io_outputs_1_payload[15 : 0]);
  assign axpyLogic_cntOvfReduce = (axpyLogic_cntOvf_0 && axpyLogic_cntOvf_1);
  assign axpyLogic_inpHalt_valid = (axpyIn_tvalid && cfgDeMux_io_outputs_1_valid);
  assign axpyIn_tready = (axpyLogic_inpHalt_ready && cfgDeMux_io_outputs_1_valid);
  assign axpyLogic_inpHalt_payload = axpyIn_tdata;
  assign axpyLogic_scaleHalt_valid = (scale_tvalid && cfgDeMux_io_outputs_1_valid);
  assign scale_tready = (axpyLogic_scaleHalt_ready && cfgDeMux_io_outputs_1_valid);
  assign axpyLogic_scaleHalt_payload = scale_tdata;
  assign t_axpyLogic_inpHalt_ready_1 = (t_axpyLogic_inpHalt_ready == t_t_axpyLogic_inpHalt_ready_1[7 : 0]);
  assign axpyLogic_inpRepeat_fire = (axpyLogic_inpRepeat_valid && axpyLogic_inpRepeat_ready);
  assign axpyLogic_inpRepeat_valid = axpyLogic_inpHalt_valid;
  assign axpyLogic_inpRepeat_payload = axpyLogic_inpHalt_payload;
  assign axpyLogic_inpHalt_ready = (axpyLogic_inpRepeat_ready && t_axpyLogic_inpHalt_ready_1);
  assign axpyLogic_inpRepeat_ready = axpyLogic_inpRepeat_mul_ip_s_axis_a_tready;
  assign axpyLogic_scaleHalt_ready = axpyLogic_inpRepeat_mul_ip_s_axis_b_tready;
  always @(*) begin
    axpyLogic_inpRepeat_mul_ip_m_axis_result_tready = axpyLogic_res_ready;
    if((! axpyLogic_res_valid)) begin
      axpyLogic_inpRepeat_mul_ip_m_axis_result_tready = 1'b1;
    end
  end

  assign axpyLogic_res_valid = mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid;
  assign axpyLogic_res_payload = mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData;
  assign axpyLogic_axpyOut_valid = axpyLogic_res_valid;
  assign axpyLogic_res_ready = axpyLogic_axpyOut_ready;
  assign axpyLogic_axpyOut_payload = {axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,{axpyLogic_res_payload,t_axpyLogic_axpyOut_payload}}}}}}}}}}}}}}}};
  assign axpyLogic_incCond = (axpyLogic_res_valid && axpyLogic_res_ready);
  assign axpyLogic_clrCond = (axpyLogic_incCond && axpyLogic_cntOvfReduce);
  assign axpyLogic_enInc = axpyLogic_incCond;
  assign secondDim_1 = cfgDeMux_io_outputs_1_payload[15 : 0];
  assign secondDim = secondDim_1;
  assign preCfgTag = cfgDeMux_io_outputs_1_payload[31 : 26];
  assign dotLogic_dotOut_ready = mux_io_inputs_0_ready;
  assign axpyLogic_axpyOut_ready = mux_io_inputs_1_ready;
  assign mux_io_select = axpyLogic_axpyOut_valid;
  assign wkvIn_tready = join_fire;
  assign join_valid = (wkvIn_tvalid && mux_io_output_valid);
  assign join_fire = (join_valid && join_ready);
  assign act_valid = join_fire;
  assign wkv_valid = join_fire;
  assign act_payload_0 = mux_io_output_payload[15 : 0];
  assign act_payload_1 = mux_io_output_payload[31 : 16];
  assign act_payload_2 = mux_io_output_payload[47 : 32];
  assign act_payload_3 = mux_io_output_payload[63 : 48];
  assign act_payload_4 = mux_io_output_payload[79 : 64];
  assign act_payload_5 = mux_io_output_payload[95 : 80];
  assign act_payload_6 = mux_io_output_payload[111 : 96];
  assign act_payload_7 = mux_io_output_payload[127 : 112];
  assign act_payload_8 = mux_io_output_payload[143 : 128];
  assign act_payload_9 = mux_io_output_payload[159 : 144];
  assign act_payload_10 = mux_io_output_payload[175 : 160];
  assign act_payload_11 = mux_io_output_payload[191 : 176];
  assign act_payload_12 = mux_io_output_payload[207 : 192];
  assign act_payload_13 = mux_io_output_payload[223 : 208];
  assign act_payload_14 = mux_io_output_payload[239 : 224];
  assign act_payload_15 = mux_io_output_payload[255 : 240];
  assign act_payload_16 = mux_io_output_payload[271 : 256];
  assign act_payload_17 = mux_io_output_payload[287 : 272];
  assign act_payload_18 = mux_io_output_payload[303 : 288];
  assign act_payload_19 = mux_io_output_payload[319 : 304];
  assign act_payload_20 = mux_io_output_payload[335 : 320];
  assign act_payload_21 = mux_io_output_payload[351 : 336];
  assign act_payload_22 = mux_io_output_payload[367 : 352];
  assign act_payload_23 = mux_io_output_payload[383 : 368];
  assign act_payload_24 = mux_io_output_payload[399 : 384];
  assign act_payload_25 = mux_io_output_payload[415 : 400];
  assign act_payload_26 = mux_io_output_payload[431 : 416];
  assign act_payload_27 = mux_io_output_payload[447 : 432];
  assign act_payload_28 = mux_io_output_payload[463 : 448];
  assign act_payload_29 = mux_io_output_payload[479 : 464];
  assign act_payload_30 = mux_io_output_payload[495 : 480];
  assign act_payload_31 = mux_io_output_payload[511 : 496];
  assign wkv_payload_0 = wkvIn_tdata[15 : 0];
  assign wkv_payload_1 = wkvIn_tdata[31 : 16];
  assign wkv_payload_2 = wkvIn_tdata[47 : 32];
  assign wkv_payload_3 = wkvIn_tdata[63 : 48];
  assign wkv_payload_4 = wkvIn_tdata[79 : 64];
  assign wkv_payload_5 = wkvIn_tdata[95 : 80];
  assign wkv_payload_6 = wkvIn_tdata[111 : 96];
  assign wkv_payload_7 = wkvIn_tdata[127 : 112];
  assign wkv_payload_8 = wkvIn_tdata[143 : 128];
  assign wkv_payload_9 = wkvIn_tdata[159 : 144];
  assign wkv_payload_10 = wkvIn_tdata[175 : 160];
  assign wkv_payload_11 = wkvIn_tdata[191 : 176];
  assign wkv_payload_12 = wkvIn_tdata[207 : 192];
  assign wkv_payload_13 = wkvIn_tdata[223 : 208];
  assign wkv_payload_14 = wkvIn_tdata[239 : 224];
  assign wkv_payload_15 = wkvIn_tdata[255 : 240];
  assign wkv_payload_16 = wkvIn_tdata[271 : 256];
  assign wkv_payload_17 = wkvIn_tdata[287 : 272];
  assign wkv_payload_18 = wkvIn_tdata[303 : 288];
  assign wkv_payload_19 = wkvIn_tdata[319 : 304];
  assign wkv_payload_20 = wkvIn_tdata[335 : 320];
  assign wkv_payload_21 = wkvIn_tdata[351 : 336];
  assign wkv_payload_22 = wkvIn_tdata[367 : 352];
  assign wkv_payload_23 = wkvIn_tdata[383 : 368];
  assign wkv_payload_24 = wkvIn_tdata[399 : 384];
  assign wkv_payload_25 = wkvIn_tdata[415 : 400];
  assign wkv_payload_26 = wkvIn_tdata[431 : 416];
  assign wkv_payload_27 = wkvIn_tdata[447 : 432];
  assign wkv_payload_28 = wkvIn_tdata[463 : 448];
  assign wkv_payload_29 = wkvIn_tdata[479 : 464];
  assign wkv_payload_30 = wkvIn_tdata[495 : 480];
  assign wkv_payload_31 = wkvIn_tdata[511 : 496];
  assign popVldNext = fifo_io_popVldNext;
  assign fifo_io_push_payload = {mul_io_res_payload_31,{mul_io_res_payload_30,{mul_io_res_payload_29,{mul_io_res_payload_28,{mul_io_res_payload_27,{mul_io_res_payload_26,{mul_io_res_payload_25,{mul_io_res_payload_24,{mul_io_res_payload_23,{mul_io_res_payload_22,{mul_io_res_payload_21,{mul_io_res_payload_20,{mul_io_res_payload_19,{mul_io_res_payload_18,{mul_io_res_payload_17,{mul_io_res_payload_16,t_io_push_payload}}}}}}}}}}}}}}}};
  assign output_tvalid = fifo_io_pop_valid;
  assign output_tdata = fifo_io_pop_payload;
  assign join_ready = ready;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      dotLogic_cnt_0 <= 8'h0;
      dotLogic_cnt_1 <= 16'h0;
      dotLogic_flag <= 1'b0;
      dotLogic_notReadyFlag <= 1'b0;
      dotLogic_inCnt <= 5'h0;
      dotLogic_popPre_rValid <= 1'b0;
      dotLogic_cntPipe_0 <= 8'h0;
      dotLogic_cntPipe_1 <= 16'h0;
      dotLogic_dotInReady <= 1'b0;
      axpyLogic_cnt_0 <= 8'h0;
      axpyLogic_cnt_1 <= 16'h0;
      t_axpyLogic_inpHalt_ready <= 8'h0;
      mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid <= 1'b0;
      ready <= 1'b0;
    end else begin
      if(dotLogic_enInc) begin
        dotLogic_cnt_0 <= (dotLogic_cnt_0 + 8'h01);
      end
      if((dotLogic_enInc && dotLogic_cntOvf_0)) begin
        dotLogic_cnt_0 <= 8'h0;
        dotLogic_cnt_1 <= (dotLogic_cnt_1 + 16'h0001);
      end
      if((dotLogic_enInc && (dotLogic_cntOvf_0 && dotLogic_cntOvf_1))) begin
        dotLogic_cnt_1 <= 16'h0;
      end
      if(dotIn_fire) begin
        dotLogic_inCnt <= (dotLogic_inCnt + 5'h01);
        if(dotLogic_inCntOvf) begin
          dotLogic_inCnt <= 5'h0;
          dotLogic_flag <= 1'b1;
          dotLogic_notReadyFlag <= 1'b1;
        end
      end
      if(dotLogic_popPre_ready) begin
        dotLogic_popPre_rValid <= dotLogic_popPre_valid;
      end
      if(dotLogic_enIncPipe) begin
        dotLogic_cntPipe_0 <= (dotLogic_cntPipe_0 + 8'h01);
      end
      if((dotLogic_enIncPipe && dotLogic_cntOvfPipe_0)) begin
        dotLogic_cntPipe_0 <= 8'h0;
        dotLogic_cntPipe_1 <= (dotLogic_cntPipe_1 + 16'h0001);
      end
      if((dotLogic_enIncPipe && (dotLogic_cntOvfPipe_0 && dotLogic_cntOvfPipe_1))) begin
        dotLogic_cntPipe_1 <= 16'h0;
      end
      if(dotLogic_clrCond) begin
        dotLogic_flag <= 1'b0;
      end
      if(dotLogic_clrCondPipe) begin
        dotLogic_notReadyFlag <= 1'b0;
      end
      if((cfgDeMux_io_outputs_0_valid && (! dotLogic_notReadyFlag))) begin
        dotLogic_dotInReady <= 1'b1;
      end
      if((dotIn_fire && dotLogic_inCntOvf)) begin
        dotLogic_dotInReady <= 1'b0;
      end
      if(axpyLogic_enInc) begin
        axpyLogic_cnt_0 <= (axpyLogic_cnt_0 + 8'h01);
      end
      if((axpyLogic_enInc && axpyLogic_cntOvf_0)) begin
        axpyLogic_cnt_0 <= 8'h0;
        axpyLogic_cnt_1 <= (axpyLogic_cnt_1 + 16'h0001);
      end
      if((axpyLogic_enInc && (axpyLogic_cntOvf_0 && axpyLogic_cntOvf_1))) begin
        axpyLogic_cnt_1 <= 16'h0;
      end
      if(axpyLogic_inpRepeat_fire) begin
        t_axpyLogic_inpHalt_ready <= (t_axpyLogic_inpHalt_ready + 8'h01);
        if(t_axpyLogic_inpHalt_ready_1) begin
          t_axpyLogic_inpHalt_ready <= 8'h0;
        end
      end
      if(axpyLogic_inpRepeat_mul_ip_m_axis_result_tready) begin
        mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rValid <= axpyLogic_inpRepeat_mul_ip_m_axis_result_tvalid;
      end
      ready <= (6'h08 <= fifo_io_availability);
    end
  end

  always @(posedge clk_0_clk) begin
    if(axpyLogic_inpRepeat_mul_ip_m_axis_result_tready) begin
      mul_axpyLogic_inpRepeat_mul_ip_m_axis_result_rData <= axpyLogic_inpRepeat_mul_ip_m_axis_result_tdata;
    end
  end


endmodule

//StreamFifo_102 replaced by StreamFifo_99

//StreamFifo_101 replaced by StreamFifo_99

//StreamFifo_100 replaced by StreamFifo_99

module StreamFifo_99 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [4:0]    io_occupancy,
  output wire [4:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [4:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [4:0]    logic_ptr_pop;
  wire       [4:0]    logic_ptr_occupancy;
  wire       [4:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [4:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [4:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [4:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [3:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [3:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [3:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [3:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [3:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [4:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [4:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [4:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [4:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [511:0] logic_ram [0:15];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 5'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 5'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[4];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 5'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 5'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[4];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 5'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 5'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[3:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[3:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 5'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 5'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 5'h0;
      logic_ptr_pop <= 5'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 5'h10;
      logic_ptr_arb_fmax_fullTracker_value <= 5'h0;
      logic_ptr_fmax_value <= 5'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 5'h0;
      logic_fmaxAvail_value <= 5'h10;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 5'h10;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 5'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 5'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 5'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 5'h0;
        logic_ptr_pop <= 5'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 5'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 5'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 5'h10;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_104 replaced by StreamFifo_103

module StreamFifo_103 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [0:0]    logic_ram_spinal_port1;
  wire       [0:0]    t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire                logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire                logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire                logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [0:0] logic_ram [0:63];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1[0];
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_105 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [5:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [5:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [5:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [5:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [5:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg [5:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 6'h20) == 6'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (6'h20 - logic_ptr_occupancy);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LargeBankFifo_11 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [2047:0] io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [2047:0] io_pop_payload,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_0_io_push_ready;
  wire                fifo_0_io_pop_valid;
  wire       [511:0]  fifo_0_io_pop_payload;
  wire       [5:0]    fifo_0_io_occupancy;
  wire       [5:0]    fifo_0_io_availability;
  wire                fifo_1_io_push_ready;
  wire                fifo_1_io_pop_valid;
  wire       [511:0]  fifo_1_io_pop_payload;
  wire       [5:0]    fifo_1_io_occupancy;
  wire       [5:0]    fifo_1_io_availability;
  wire                fifo_2_io_push_ready;
  wire                fifo_2_io_pop_valid;
  wire       [511:0]  fifo_2_io_pop_payload;
  wire       [5:0]    fifo_2_io_occupancy;
  wire       [5:0]    fifo_2_io_availability;
  wire                fifo_3_io_push_ready;
  wire                fifo_3_io_pop_valid;
  wire       [511:0]  fifo_3_io_pop_payload;
  wire       [5:0]    fifo_3_io_occupancy;
  wire       [5:0]    fifo_3_io_availability;
  wire       [2047:0] t_inPydSplit_0;
  wire       [511:0]  inPydSplit_0;
  wire       [511:0]  inPydSplit_1;
  wire       [511:0]  inPydSplit_2;
  wire       [511:0]  inPydSplit_3;
  wire       [2047:0] outPydMerge;

  StreamFifo_136 fifo_0 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_0_io_push_ready        ), //o
    .io_push_payload (inPydSplit_0[511:0]         ), //i
    .io_pop_valid    (fifo_0_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_0_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_0_io_occupancy[5:0]    ), //o
    .io_availability (fifo_0_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_136 fifo_1 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_1_io_push_ready        ), //o
    .io_push_payload (inPydSplit_1[511:0]         ), //i
    .io_pop_valid    (fifo_1_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_1_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_1_io_occupancy[5:0]    ), //o
    .io_availability (fifo_1_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_136 fifo_2 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_2_io_push_ready        ), //o
    .io_push_payload (inPydSplit_2[511:0]         ), //i
    .io_pop_valid    (fifo_2_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_2_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_2_io_occupancy[5:0]    ), //o
    .io_availability (fifo_2_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  StreamFifo_136 fifo_3 (
    .io_push_valid   (io_push_valid               ), //i
    .io_push_ready   (fifo_3_io_push_ready        ), //o
    .io_push_payload (inPydSplit_3[511:0]         ), //i
    .io_pop_valid    (fifo_3_io_pop_valid         ), //o
    .io_pop_ready    (io_pop_ready                ), //i
    .io_pop_payload  (fifo_3_io_pop_payload[511:0]), //o
    .io_flush        (1'b0                        ), //i
    .io_occupancy    (fifo_3_io_occupancy[5:0]    ), //o
    .io_availability (fifo_3_io_availability[5:0] ), //o
    .clk_0_clk       (clk_0_clk                   ), //i
    .clk_0_resetn    (clk_0_resetn                )  //i
  );
  assign io_occupancy = fifo_0_io_occupancy;
  assign io_availability = fifo_0_io_availability;
  assign t_inPydSplit_0 = io_push_payload;
  assign inPydSplit_0 = t_inPydSplit_0[511 : 0];
  assign inPydSplit_1 = t_inPydSplit_0[1023 : 512];
  assign inPydSplit_2 = t_inPydSplit_0[1535 : 1024];
  assign inPydSplit_3 = t_inPydSplit_0[2047 : 1536];
  assign outPydMerge = {fifo_3_io_pop_payload,{fifo_2_io_pop_payload,{fifo_1_io_pop_payload,fifo_0_io_pop_payload}}};
  assign io_pop_payload = outPydMerge;
  assign io_push_ready = fifo_0_io_push_ready;
  assign io_pop_valid = fifo_0_io_pop_valid;

endmodule

//StreamFifo_109 replaced by StreamFifo_136

//StreamFifo_108 replaced by StreamFifo_136

//StreamFifo_107 replaced by StreamFifo_136

//StreamFifo_106 replaced by StreamFifo_136

module StreamMux_41 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [7:0]    io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [7:0]    io_inputs_1_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [7:0]    io_output_payload
);

  reg                 t_io_output_valid;
  reg        [7:0]    t_io_output_payload;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

//StreamFifoPipe_5 replaced by StreamFifoPipe_9

//URAM16x16384Fifo_5 replaced by URAM16x16384Fifo_4

module FlowFragmentAlign_3 (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_fragment,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_fragment,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg                 io_input_regNext_valid;
  reg                 io_input_regNext_payload_last;
  reg        [15:0]   io_input_regNext_payload_fragment;

  assign io_output_valid = io_input_regNext_valid;
  assign io_output_payload_last = io_input_regNext_payload_last;
  assign io_output_payload_fragment = io_input_regNext_payload_fragment;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      io_input_regNext_valid <= 1'b0;
    end else begin
      io_input_regNext_valid <= io_input_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    io_input_regNext_payload_last <= io_input_payload_last;
    io_input_regNext_payload_fragment <= io_input_payload_fragment;
  end


endmodule

module FlowFragmentAlign_2 (
  input  wire          io_input_valid,
  input  wire          io_input_payload_last,
  input  wire [15:0]   io_input_payload_tdata,
  input  wire [5:0]    io_input_payload_tuser,
  output wire          io_output_valid,
  output wire          io_output_payload_last,
  output wire [15:0]   io_output_payload_tdata,
  output wire [5:0]    io_output_payload_tuser,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg                 io_input_regNext_valid;
  reg                 io_input_regNext_payload_last;
  reg        [15:0]   io_input_regNext_payload_tdata;
  reg        [5:0]    io_input_regNext_payload_tuser;

  assign io_output_valid = io_input_regNext_valid;
  assign io_output_payload_last = io_input_regNext_payload_last;
  assign io_output_payload_tdata = io_input_regNext_payload_tdata;
  assign io_output_payload_tuser = io_input_regNext_payload_tuser;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      io_input_regNext_valid <= 1'b0;
    end else begin
      io_input_regNext_valid <= io_input_valid;
    end
  end

  always @(posedge clk_0_clk) begin
    io_input_regNext_payload_last <= io_input_payload_last;
    io_input_regNext_payload_tdata <= io_input_payload_tdata;
    io_input_regNext_payload_tuser <= io_input_payload_tuser;
  end


endmodule

module URAM16x16384Fifo_4 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire          io_push_payload_last,
  input  wire [15:0]   io_push_payload_fragment,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire          io_pop_payload_last,
  output wire [15:0]   io_pop_payload_fragment,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [71:0]   fifo_io_push_payload;
  reg                 fifo_io_pop_ready;
  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [71:0]   fifo_io_pop_payload;
  wire       [12:0]   fifo_io_occupancy;
  wire       [12:0]   fifo_io_availability;
  wire       [1:0]    t_io_push_widthAdapter_counter_valueNext;
  wire       [0:0]    t_io_push_widthAdapter_counter_valueNext_1;
  wire       [2:0]    t_vldElemIn_8;
  wire       [2:0]    t_vldElemIn_9;
  reg        [2:0]    t_vldElemIn_10;
  wire       [2:0]    t_vldElemIn_11;
  reg        [2:0]    t_vldElemIn_12;
  wire       [2:0]    t_vldElemIn_13;
  wire       [0:0]    t_vldElemIn_14;
  wire       [7:0]    t_vldElemOut;
  reg        [15:0]   t_selectSlice_1;
  wire                adaptIn_valid;
  wire                adaptIn_ready;
  wire                adaptIn_payload_last;
  wire       [63:0]   adaptIn_payload_fragment;
  reg        [3:0]    inAdapter_dataMask;
  wire                io_push_fire;
  reg                 io_push_widthAdapter_counter_willIncrement;
  reg                 io_push_widthAdapter_counter_willClear;
  reg        [1:0]    io_push_widthAdapter_counter_valueNext;
  reg        [1:0]    io_push_widthAdapter_counter_value;
  wire                io_push_widthAdapter_counter_willOverflowIfInc;
  wire                io_push_widthAdapter_counter_willOverflow;
  reg        [47:0]   io_push_widthAdapter_buffer;
  reg                 io_push_widthAdapter_sendIt;
  reg        [63:0]   io_push_widthAdapter_data;
  wire       [2:0]    t_vldElemIn;
  wire       [2:0]    t_vldElemIn_1;
  wire       [2:0]    t_vldElemIn_2;
  wire       [2:0]    t_vldElemIn_3;
  wire       [2:0]    t_vldElemIn_4;
  wire       [2:0]    t_vldElemIn_5;
  wire       [2:0]    t_vldElemIn_6;
  wire       [2:0]    t_vldElemIn_7;
  wire       [1:0]    vldElemIn;
  wire       [1:0]    vldElemOut;
  wire                lastOut;
  wire                pop_valid;
  reg                 pop_ready;
  wire                pop_payload_last;
  wire       [15:0]   pop_payload_fragment;
  reg        [1:0]    cnt;
  wire                cntOvf;
  wire                pop_fire;
  wire       [63:0]   t_selectSlice;
  wire       [15:0]   selectSlice;
  wire                pop_m2sPipe_valid;
  wire                pop_m2sPipe_ready;
  wire                pop_m2sPipe_payload_last;
  wire       [15:0]   pop_m2sPipe_payload_fragment;
  reg                 pop_rValid;
  reg                 pop_rData_last;
  reg        [15:0]   pop_rData_fragment;

  assign t_io_push_widthAdapter_counter_valueNext_1 = io_push_widthAdapter_counter_willIncrement;
  assign t_io_push_widthAdapter_counter_valueNext = {1'd0, t_io_push_widthAdapter_counter_valueNext_1};
  assign t_vldElemIn_8 = (t_vldElemIn_9 - 3'b001);
  assign t_vldElemIn_9 = (t_vldElemIn_10 + t_vldElemIn_12);
  assign t_vldElemIn_14 = inAdapter_dataMask[3];
  assign t_vldElemIn_13 = {2'd0, t_vldElemIn_14};
  assign t_vldElemOut = fifo_io_pop_payload[71 : 64];
  assign t_vldElemIn_11 = {inAdapter_dataMask[2],{inAdapter_dataMask[1],inAdapter_dataMask[0]}};
  StreamFifoPipe_9 fifo (
    .io_push_valid   (adaptIn_valid             ), //i
    .io_push_ready   (fifo_io_push_ready        ), //o
    .io_push_payload (fifo_io_push_payload[71:0]), //i
    .io_pop_valid    (fifo_io_pop_valid         ), //o
    .io_pop_ready    (fifo_io_pop_ready         ), //i
    .io_pop_payload  (fifo_io_pop_payload[71:0] ), //o
    .io_flush        (1'b0                      ), //i
    .io_occupancy    (fifo_io_occupancy[12:0]   ), //o
    .io_availability (fifo_io_availability[12:0]), //o
    .clk_0_clk       (clk_0_clk                 ), //i
    .clk_0_resetn    (clk_0_resetn              )  //i
  );
  always @(*) begin
    case(t_vldElemIn_11)
      3'b000 : t_vldElemIn_10 = t_vldElemIn;
      3'b001 : t_vldElemIn_10 = t_vldElemIn_1;
      3'b010 : t_vldElemIn_10 = t_vldElemIn_2;
      3'b011 : t_vldElemIn_10 = t_vldElemIn_3;
      3'b100 : t_vldElemIn_10 = t_vldElemIn_4;
      3'b101 : t_vldElemIn_10 = t_vldElemIn_5;
      3'b110 : t_vldElemIn_10 = t_vldElemIn_6;
      default : t_vldElemIn_10 = t_vldElemIn_7;
    endcase
  end

  always @(*) begin
    case(t_vldElemIn_13)
      3'b000 : t_vldElemIn_12 = t_vldElemIn;
      3'b001 : t_vldElemIn_12 = t_vldElemIn_1;
      3'b010 : t_vldElemIn_12 = t_vldElemIn_2;
      3'b011 : t_vldElemIn_12 = t_vldElemIn_3;
      3'b100 : t_vldElemIn_12 = t_vldElemIn_4;
      3'b101 : t_vldElemIn_12 = t_vldElemIn_5;
      3'b110 : t_vldElemIn_12 = t_vldElemIn_6;
      default : t_vldElemIn_12 = t_vldElemIn_7;
    endcase
  end

  always @(*) begin
    case(cnt)
      2'b00 : t_selectSlice_1 = t_selectSlice[15 : 0];
      2'b01 : t_selectSlice_1 = t_selectSlice[31 : 16];
      2'b10 : t_selectSlice_1 = t_selectSlice[47 : 32];
      default : t_selectSlice_1 = t_selectSlice[63 : 48];
    endcase
  end

  assign io_push_fire = (io_push_valid && io_push_ready);
  always @(*) begin
    io_push_widthAdapter_counter_willIncrement = 1'b0;
    if(io_push_fire) begin
      io_push_widthAdapter_counter_willIncrement = 1'b1;
    end
  end

  always @(*) begin
    io_push_widthAdapter_counter_willClear = 1'b0;
    if(((io_push_valid && io_push_payload_last) && adaptIn_ready)) begin
      io_push_widthAdapter_counter_willClear = 1'b1;
    end
  end

  assign io_push_widthAdapter_counter_willOverflowIfInc = (io_push_widthAdapter_counter_value == 2'b11);
  assign io_push_widthAdapter_counter_willOverflow = (io_push_widthAdapter_counter_willOverflowIfInc && io_push_widthAdapter_counter_willIncrement);
  always @(*) begin
    io_push_widthAdapter_counter_valueNext = (io_push_widthAdapter_counter_value + t_io_push_widthAdapter_counter_valueNext);
    if(io_push_widthAdapter_counter_willClear) begin
      io_push_widthAdapter_counter_valueNext = 2'b00;
    end
  end

  always @(*) begin
    io_push_widthAdapter_sendIt = io_push_widthAdapter_counter_willOverflowIfInc;
    if(io_push_payload_last) begin
      io_push_widthAdapter_sendIt = 1'b1;
    end
  end

  assign adaptIn_valid = (io_push_valid && io_push_widthAdapter_sendIt);
  assign adaptIn_payload_last = io_push_payload_last;
  assign io_push_ready = (adaptIn_ready || (! io_push_widthAdapter_sendIt));
  always @(*) begin
    io_push_widthAdapter_data = {io_push_payload_fragment,io_push_widthAdapter_buffer};
    case(io_push_widthAdapter_counter_value)
      2'b00 : begin
        io_push_widthAdapter_data[15 : 0] = io_push_payload_fragment;
      end
      2'b01 : begin
        io_push_widthAdapter_data[31 : 16] = io_push_payload_fragment;
      end
      2'b10 : begin
        io_push_widthAdapter_data[47 : 32] = io_push_payload_fragment;
      end
      default : begin
      end
    endcase
  end

  assign adaptIn_payload_fragment = io_push_widthAdapter_data;
  always @(*) begin
    inAdapter_dataMask[0] = (2'b00 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[1] = (2'b01 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[2] = (2'b10 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[3] = (2'b11 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[0] = (2'b00 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[1] = (2'b01 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[2] = (2'b10 <= io_push_widthAdapter_counter_value);
    inAdapter_dataMask[3] = (2'b11 <= io_push_widthAdapter_counter_value);
  end

  assign t_vldElemIn = 3'b000;
  assign t_vldElemIn_1 = 3'b001;
  assign t_vldElemIn_2 = 3'b001;
  assign t_vldElemIn_3 = 3'b010;
  assign t_vldElemIn_4 = 3'b001;
  assign t_vldElemIn_5 = 3'b010;
  assign t_vldElemIn_6 = 3'b010;
  assign t_vldElemIn_7 = 3'b011;
  assign vldElemIn = t_vldElemIn_8[1:0];
  assign adaptIn_ready = fifo_io_push_ready;
  assign fifo_io_push_payload = {{{adaptIn_payload_last,5'h0},vldElemIn},adaptIn_payload_fragment};
  assign vldElemOut = t_vldElemOut[1 : 0];
  assign lastOut = fifo_io_pop_payload[71];
  assign cntOvf = (cnt == vldElemOut);
  always @(*) begin
    fifo_io_pop_ready = 1'b0;
    if(pop_fire) begin
      if(cntOvf) begin
        fifo_io_pop_ready = 1'b1;
      end
    end
  end

  assign pop_fire = (pop_valid && pop_ready);
  assign t_selectSlice = fifo_io_pop_payload[63 : 0];
  assign selectSlice = t_selectSlice_1;
  assign pop_valid = fifo_io_pop_valid;
  assign pop_payload_fragment = selectSlice;
  assign pop_payload_last = (cntOvf && lastOut);
  always @(*) begin
    pop_ready = pop_m2sPipe_ready;
    if((! pop_m2sPipe_valid)) begin
      pop_ready = 1'b1;
    end
  end

  assign pop_m2sPipe_valid = pop_rValid;
  assign pop_m2sPipe_payload_last = pop_rData_last;
  assign pop_m2sPipe_payload_fragment = pop_rData_fragment;
  assign io_pop_valid = pop_m2sPipe_valid;
  assign pop_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload_last = pop_m2sPipe_payload_last;
  assign io_pop_payload_fragment = pop_m2sPipe_payload_fragment;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      io_push_widthAdapter_counter_value <= 2'b00;
      cnt <= 2'b00;
      pop_rValid <= 1'b0;
    end else begin
      io_push_widthAdapter_counter_value <= io_push_widthAdapter_counter_valueNext;
      if(pop_fire) begin
        cnt <= (cnt + 2'b01);
        if(cntOvf) begin
          cnt <= 2'b00;
        end
      end
      if(pop_ready) begin
        pop_rValid <= pop_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(io_push_fire) begin
      case(io_push_widthAdapter_counter_value)
        2'b00 : begin
          io_push_widthAdapter_buffer[15 : 0] <= io_push_payload_fragment;
        end
        2'b01 : begin
          io_push_widthAdapter_buffer[31 : 16] <= io_push_payload_fragment;
        end
        2'b10 : begin
          io_push_widthAdapter_buffer[47 : 32] <= io_push_payload_fragment;
        end
        default : begin
        end
      endcase
    end
    if(pop_ready) begin
      pop_rData_last <= pop_payload_last;
      pop_rData_fragment <= pop_payload_fragment;
    end
  end


endmodule

module StreamFifo_110 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:4095];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_111 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [10:0]   io_occupancy,
  output wire [10:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [10:0]   logic_ptr_push;
  reg        [10:0]   logic_ptr_pop;
  wire       [10:0]   logic_ptr_occupancy;
  wire       [10:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [9:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [9:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [9:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [9:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [10:0]   logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:1023];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 11'h400) == 11'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[9:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[9:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (11'h400 - logic_ptr_occupancy);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 11'h0;
      logic_ptr_pop <= 11'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 11'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 11'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 11'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 11'h0;
        logic_ptr_pop <= 11'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 11'h0;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_112 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [7:0]    io_occupancy,
  output wire [7:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [7:0]    logic_ptr_push;
  reg        [7:0]    logic_ptr_pop;
  wire       [7:0]    logic_ptr_occupancy;
  wire       [7:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [7:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [7:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [7:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [6:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [6:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [6:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [6:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [6:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [7:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [7:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [7:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [7:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:127];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 8'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 8'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[7];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 8'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 8'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[7];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 8'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 8'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[6:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[6:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 8'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 8'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 8'h0;
      logic_ptr_pop <= 8'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 8'h80;
      logic_ptr_arb_fmax_fullTracker_value <= 8'h0;
      logic_ptr_fmax_value <= 8'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 8'h0;
      logic_fmaxAvail_value <= 8'h80;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 8'h80;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 8'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 8'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 8'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 8'h0;
        logic_ptr_pop <= 8'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 8'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 8'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 8'h80;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_115 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [7:0]    io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [7:0]    io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [7:0]    logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [7:0]    logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [7:0]    logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [7:0]    logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [7:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_114 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_113 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [10:0]   io_occupancy,
  output wire [10:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [10:0]   logic_ptr_push;
  reg        [10:0]   logic_ptr_pop;
  wire       [10:0]   logic_ptr_occupancy;
  wire       [10:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [10:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [10:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [10:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [9:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [9:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [9:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [9:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [9:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [10:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [10:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [10:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [10:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [15:0] logic_ram [0:1023];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 11'h001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 11'h001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[10];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 11'h001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 11'h001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[10];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 11'h001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 11'h001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[9:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[9:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 11'h001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 11'h001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 11'h0;
      logic_ptr_pop <= 11'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 11'h400;
      logic_ptr_arb_fmax_fullTracker_value <= 11'h0;
      logic_ptr_fmax_value <= 11'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 11'h0;
      logic_fmaxAvail_value <= 11'h400;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 11'h400;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 11'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 11'h001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 11'h001);
      end
      if(io_flush) begin
        logic_ptr_push <= 11'h0;
        logic_ptr_pop <= 11'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 11'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 11'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 11'h400;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module LinearQuant_1 (
  input  wire          x_tvalid,
  input  wire [15:0]   x_tdata,
  input  wire          scale_tvalid,
  input  wire [15:0]   scale_tdata,
  input  wire          zero_tvalid,
  output wire          zero_tready,
  input  wire [7:0]    zero_tdata,
  output wire          q_tvalid,
  output wire [7:0]    q_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                x_regNext_div_ip_m_axis_result_tvalid;
  wire       [15:0]   x_regNext_div_ip_m_axis_result_tdata;
  wire                quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  wire       [15:0]   quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata;
  wire       [9:0]    t_add;
  wire       [15:0]   t_add_1;
  wire       [9:0]    t_add_2;
  wire       [9:0]    t_add_3;
  wire       [7:0]    t_q;
  reg                 x_regNext_valid;
  reg        [15:0]   x_regNext_payload;
  reg                 scale_regNext_valid;
  reg        [15:0]   scale_regNext_payload;
  reg                 quant_x_regNext_div_ip_m_axis_result_regNext_valid;
  reg        [15:0]   quant_x_regNext_div_ip_m_axis_result_regNext_payload;
  wire       [9:0]    add;
  reg        [7:0]    q;

  assign t_add_1 = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata;
  assign t_add = t_add_1[9:0];
  assign t_add_2 = t_add_3;
  assign t_add_3 = {2'd0, zero_tdata};
  assign t_q = add[7:0];
  fp16div12 x_regNext_div_ip (
    .aclk                 (clk_0_clk                                 ), //i
    .s_axis_a_tvalid      (x_regNext_valid                           ), //i
    .s_axis_a_tdata       (x_regNext_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (scale_regNext_valid                       ), //i
    .s_axis_b_tdata       (scale_regNext_payload[15:0]               ), //i
    .m_axis_result_tvalid (x_regNext_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (x_regNext_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16toint9d4 quant_x_regNext_div_ip_m_axis_result_regNext_to_ip (
    .aclk                 (clk_0_clk                                                                   ), //i
    .s_axis_a_tvalid      (quant_x_regNext_div_ip_m_axis_result_regNext_valid                          ), //i
    .s_axis_a_tdata       (quant_x_regNext_div_ip_m_axis_result_regNext_payload[15:0]                  ), //i
    .m_axis_result_tvalid (quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign zero_tready = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  assign add = ($signed(t_add) + $signed(t_add_2));
  always @(*) begin
    q = t_q;
    if(($signed(add) < $signed(10'h0))) begin
      q = 8'h0;
    end
    if(($signed(10'h100) <= $signed(add))) begin
      q = 8'hff;
    end
  end

  assign q_tvalid = quant_x_regNext_div_ip_m_axis_result_regNext_to_ip_m_axis_result_tvalid;
  assign q_tdata = q;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      x_regNext_valid <= 1'b0;
      scale_regNext_valid <= 1'b0;
      quant_x_regNext_div_ip_m_axis_result_regNext_valid <= 1'b0;
    end else begin
      x_regNext_valid <= x_tvalid;
      scale_regNext_valid <= scale_tvalid;
      quant_x_regNext_div_ip_m_axis_result_regNext_valid <= x_regNext_div_ip_m_axis_result_tvalid;
    end
  end

  always @(posedge clk_0_clk) begin
    x_regNext_payload <= x_tdata;
    scale_regNext_payload <= scale_tdata;
    quant_x_regNext_div_ip_m_axis_result_regNext_payload <= x_regNext_div_ip_m_axis_result_tdata;
  end


endmodule

module GetScaleZero_1 (
  input  wire          max_tvalid,
  input  wire [15:0]   max_tdata,
  input  wire          min_tvalid,
  input  wire [15:0]   min_tdata,
  output wire          scale_tvalid,
  output wire [15:0]   scale_tdata,
  output wire          zero_tvalid,
  output wire [7:0]    zero_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                fifo_io_push_ready;
  wire                fifo_io_pop_valid;
  wire       [15:0]   fifo_io_pop_payload;
  wire       [5:0]    fifo_io_occupancy;
  wire       [5:0]    fifo_io_availability;
  wire                max_sub_ip_m_axis_result_tvalid;
  wire       [15:0]   max_sub_ip_m_axis_result_tdata;
  wire                getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid;
  wire       [15:0]   getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata;
  wire                minFlowDly_div_ip_m_axis_result_tvalid;
  wire       [15:0]   minFlowDly_div_ip_m_axis_result_tdata;
  wire                divRev_to_ip_m_axis_result_tvalid;
  wire       [15:0]   divRev_to_ip_m_axis_result_tdata;
  wire       [15:0]   t_when;
  wire                maxIntFlow_valid;
  wire       [15:0]   maxIntFlow_payload;
  wire                minFlowDly_valid;
  wire       [15:0]   minFlowDly_payload;
  wire                scale_valid;
  wire       [15:0]   scale_payload;
  wire                divRev_valid;
  wire       [15:0]   divRev_payload;
  wire       [7:0]    maxInt;
  reg        [7:0]    zero;

  assign t_when = {8'd0, maxInt};
  StreamFifo_140 fifo (
    .io_push_valid   (min_tvalid               ), //i
    .io_push_ready   (fifo_io_push_ready       ), //o
    .io_push_payload (min_tdata[15:0]          ), //i
    .io_pop_valid    (fifo_io_pop_valid        ), //o
    .io_pop_ready    (scale_valid              ), //i
    .io_pop_payload  (fifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                     ), //i
    .io_occupancy    (fifo_io_occupancy[5:0]   ), //o
    .io_availability (fifo_io_availability[5:0]), //o
    .clk_0_clk       (clk_0_clk                ), //i
    .clk_0_resetn    (clk_0_resetn             )  //i
  );
  fp16sub8 max_sub_ip (
    .aclk                 (clk_0_clk                           ), //i
    .s_axis_a_tvalid      (max_tvalid                          ), //i
    .s_axis_a_tdata       (max_tdata[15:0]                     ), //i
    .s_axis_b_tvalid      (min_tvalid                          ), //i
    .s_axis_b_tdata       (min_tdata[15:0]                     ), //i
    .m_axis_result_tvalid (max_sub_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (max_sub_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 getCfg_max_sub_ip_m_axis_result_div_ip (
    .aclk                 (clk_0_clk                                                       ), //i
    .s_axis_a_tvalid      (max_sub_ip_m_axis_result_tvalid                                 ), //i
    .s_axis_a_tdata       (max_sub_ip_m_axis_result_tdata[15:0]                            ), //i
    .s_axis_b_tvalid      (maxIntFlow_valid                                                ), //i
    .s_axis_b_tdata       (maxIntFlow_payload[15:0]                                        ), //i
    .m_axis_result_tvalid (getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16div12 minFlowDly_div_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (minFlowDly_valid                           ), //i
    .s_axis_a_tdata       (minFlowDly_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (scale_valid                                ), //i
    .s_axis_b_tdata       (scale_payload[15:0]                        ), //i
    .m_axis_result_tvalid (minFlowDly_div_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (minFlowDly_div_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16toint9d4 divRev_to_ip (
    .aclk                 (clk_0_clk                             ), //i
    .s_axis_a_tvalid      (divRev_valid                          ), //i
    .s_axis_a_tdata       (divRev_payload[15:0]                  ), //i
    .m_axis_result_tvalid (divRev_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (divRev_to_ip_m_axis_result_tdata[15:0])  //o
  );
  assign maxIntFlow_valid = 1'b1;
  assign maxIntFlow_payload = 16'h5bf8;
  assign scale_valid = getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tvalid;
  assign scale_payload = getCfg_max_sub_ip_m_axis_result_div_ip_m_axis_result_tdata;
  assign divRev_valid = minFlowDly_div_ip_m_axis_result_tvalid;
  assign divRev_payload = {(~ minFlowDly_div_ip_m_axis_result_tdata[15 : 15]),minFlowDly_div_ip_m_axis_result_tdata[14 : 0]};
  assign minFlowDly_valid = fifo_io_pop_valid;
  assign minFlowDly_payload = fifo_io_pop_payload;
  assign maxInt = 8'hff;
  always @(*) begin
    zero = divRev_to_ip_m_axis_result_tdata[7:0];
    if((t_when < divRev_to_ip_m_axis_result_tdata)) begin
      zero = maxInt;
    end
  end

  assign zero_tvalid = divRev_to_ip_m_axis_result_tvalid;
  assign zero_tdata = zero;
  assign scale_tvalid = scale_valid;
  assign scale_tdata = scale_payload;

endmodule

module FindRange_1 (
  input  wire          x_tvalid,
  input  wire [15:0]   x_tdata,
  output wire          max_tvalid,
  output wire [15:0]   max_tdata,
  output wire          min_tvalid,
  output wire [15:0]   min_tdata,
  input  wire [15:0]   cfg_length,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                x_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    x_lt_async_ip_m_axis_result_tdata;
  wire                maxFlow_lt_async_ip_m_axis_result_tvalid;
  wire       [7:0]    maxFlow_lt_async_ip_m_axis_result_tdata;
  wire       [15:0]   t_cntAbout2Ovf;
  reg        [15:0]   cnt;
  wire                cntAbout2Ovf;
  reg                 cntOvf;
  reg                 maxFlow_valid;
  reg        [15:0]   maxFlow_payload;
  reg                 minFlow_valid;
  reg        [15:0]   minFlow_payload;
  wire                xLessThanMin_valid;
  wire                xLessThanMin_payload;
  wire                xGreaterThanMax_valid;
  wire                xGreaterThanMax_payload;
  reg        [15:0]   minNext;
  reg        [15:0]   maxNext;
  wire                vld;
  reg                 vldDly;
  reg        [15:0]   minNext_regNext;
  reg        [15:0]   maxNext_regNext;

  assign t_cntAbout2Ovf = (cfg_length - 16'h0001);
  fp16lt0 x_lt_async_ip (
    .s_axis_a_tvalid      (x_tvalid                              ), //i
    .s_axis_a_tdata       (x_tdata[15:0]                         ), //i
    .s_axis_b_tvalid      (minFlow_valid                         ), //i
    .s_axis_b_tdata       (minFlow_payload[15:0]                 ), //i
    .m_axis_result_tvalid (x_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (x_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  fp16lt0 maxFlow_lt_async_ip (
    .s_axis_a_tvalid      (maxFlow_valid                               ), //i
    .s_axis_a_tdata       (maxFlow_payload[15:0]                       ), //i
    .s_axis_b_tvalid      (x_tvalid                                    ), //i
    .s_axis_b_tdata       (x_tdata[15:0]                               ), //i
    .m_axis_result_tvalid (maxFlow_lt_async_ip_m_axis_result_tvalid    ), //o
    .m_axis_result_tdata  (maxFlow_lt_async_ip_m_axis_result_tdata[7:0])  //o
  );
  assign cntAbout2Ovf = (cnt == t_cntAbout2Ovf);
  always @(*) begin
    maxFlow_valid = x_tvalid;
    if(x_tvalid) begin
      if(cntOvf) begin
        maxFlow_valid = 1'b0;
      end
    end
  end

  always @(*) begin
    minFlow_valid = x_tvalid;
    if(x_tvalid) begin
      if(cntOvf) begin
        minFlow_valid = 1'b0;
      end
    end
  end

  assign xLessThanMin_valid = x_lt_async_ip_m_axis_result_tvalid;
  assign xLessThanMin_payload = x_lt_async_ip_m_axis_result_tdata[0];
  assign xGreaterThanMax_valid = maxFlow_lt_async_ip_m_axis_result_tvalid;
  assign xGreaterThanMax_payload = maxFlow_lt_async_ip_m_axis_result_tdata[0];
  always @(*) begin
    minNext = minFlow_payload;
    if(x_tvalid) begin
      if(xLessThanMin_payload) begin
        minNext = x_tdata;
      end
    end
  end

  always @(*) begin
    maxNext = maxFlow_payload;
    if(x_tvalid) begin
      if(xGreaterThanMax_payload) begin
        maxNext = x_tdata;
      end
    end
  end

  assign vld = (x_tvalid && cntOvf);
  assign min_tvalid = vldDly;
  assign max_tvalid = vldDly;
  assign min_tdata = minNext_regNext;
  assign max_tdata = maxNext_regNext;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      cnt <= 16'h0;
      cntOvf <= 1'b0;
      maxFlow_payload <= 16'hfc00;
      minFlow_payload <= 16'h7c00;
      vldDly <= 1'b0;
    end else begin
      if(x_tvalid) begin
        cnt <= (cnt + 16'h0001);
        if(cntAbout2Ovf) begin
          cntOvf <= 1'b1;
        end
        if(cntOvf) begin
          cnt <= 16'h0;
          cntOvf <= 1'b0;
        end
      end
      if(x_tvalid) begin
        minFlow_payload <= minNext;
        maxFlow_payload <= maxNext;
        if(cntOvf) begin
          minFlow_payload <= 16'h7c00;
          maxFlow_payload <= 16'hfc00;
        end
      end
      vldDly <= vld;
    end
  end

  always @(posedge clk_0_clk) begin
    minNext_regNext <= minNext;
    maxNext_regNext <= maxNext;
  end


endmodule

module CosSinGen_1 (
  input  wire          index_tvalid,
  output wire          index_tready,
  input  wire [15:0]   index_tdata,
  output wire          sinCos_tvalid,
  input  wire          sinCos_tready,
  output wire [31:0]   sinCos_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   rom_spinal_port0;
  reg        [15:0]   rom_spinal_port1;
  wire       [11:0]   t_sinAddr;
  wire       [11:0]   t_cosAddr;
  wire                popPre_valid;
  reg                 popPre_ready;
  wire       [13:0]   index;
  wire       [12:0]   lowHalf;
  wire       [0:0]    highHalf;
  wire       [11:0]   lowQuarter;
  wire       [0:0]    highQuarter;
  wire                sinFlip;
  wire                sinNeg;
  reg                 sinNegDly;
  wire       [11:0]   sinAddr;
  wire       [15:0]   sinRdOut;
  wire       [15:0]   negSinRdOut;
  wire       [15:0]   sinVal;
  wire                cosFlip;
  wire                cosNeg;
  reg                 cosNegDly;
  wire       [11:0]   cosAddr;
  wire                popPre_fire;
  wire       [15:0]   cosRdOut;
  wire       [15:0]   negCosRdOut;
  wire       [15:0]   cosVal;
  wire                popPre_m2sPipe_valid;
  wire                popPre_m2sPipe_ready;
  reg                 popPre_rValid;
  reg [15:0] rom [0:4095];

  assign t_sinAddr = (12'hfff - lowQuarter);
  assign t_cosAddr = (12'hfff - lowQuarter);
  initial begin
    rom[0] = 16'b0000000000000000;
    rom[1] = 16'b0000111001001000;
    rom[2] = 16'b0001001001001000;
    rom[3] = 16'b0001010010110110;
    rom[4] = 16'b0001011001001000;
    rom[5] = 16'b0001011111011011;
    rom[6] = 16'b0001100010110110;
    rom[7] = 16'b0001100101111111;
    rom[8] = 16'b0001101001001000;
    rom[9] = 16'b0001101100010010;
    rom[10] = 16'b0001101111011011;
    rom[11] = 16'b0001110001010010;
    rom[12] = 16'b0001110010110110;
    rom[13] = 16'b0001110100011011;
    rom[14] = 16'b0001110101111111;
    rom[15] = 16'b0001110111100100;
    rom[16] = 16'b0001111001001000;
    rom[17] = 16'b0001111010101101;
    rom[18] = 16'b0001111100010010;
    rom[19] = 16'b0001111101110110;
    rom[20] = 16'b0001111111011011;
    rom[21] = 16'b0010000000100000;
    rom[22] = 16'b0010000001010010;
    rom[23] = 16'b0010000010000100;
    rom[24] = 16'b0010000010110110;
    rom[25] = 16'b0010000011101001;
    rom[26] = 16'b0010000100011011;
    rom[27] = 16'b0010000101001101;
    rom[28] = 16'b0010000101111111;
    rom[29] = 16'b0010000110110010;
    rom[30] = 16'b0010000111100100;
    rom[31] = 16'b0010001000010110;
    rom[32] = 16'b0010001001001000;
    rom[33] = 16'b0010001001111011;
    rom[34] = 16'b0010001010101101;
    rom[35] = 16'b0010001011011111;
    rom[36] = 16'b0010001100010001;
    rom[37] = 16'b0010001101000100;
    rom[38] = 16'b0010001101110110;
    rom[39] = 16'b0010001110101000;
    rom[40] = 16'b0010001111011011;
    rom[41] = 16'b0010010000000110;
    rom[42] = 16'b0010010000100000;
    rom[43] = 16'b0010010000111001;
    rom[44] = 16'b0010010001010010;
    rom[45] = 16'b0010010001101011;
    rom[46] = 16'b0010010010000100;
    rom[47] = 16'b0010010010011101;
    rom[48] = 16'b0010010010110110;
    rom[49] = 16'b0010010011001111;
    rom[50] = 16'b0010010011101001;
    rom[51] = 16'b0010010100000010;
    rom[52] = 16'b0010010100011011;
    rom[53] = 16'b0010010100110100;
    rom[54] = 16'b0010010101001101;
    rom[55] = 16'b0010010101100110;
    rom[56] = 16'b0010010101111111;
    rom[57] = 16'b0010010110011000;
    rom[58] = 16'b0010010110110010;
    rom[59] = 16'b0010010111001011;
    rom[60] = 16'b0010010111100100;
    rom[61] = 16'b0010010111111101;
    rom[62] = 16'b0010011000010110;
    rom[63] = 16'b0010011000101111;
    rom[64] = 16'b0010011001001000;
    rom[65] = 16'b0010011001100001;
    rom[66] = 16'b0010011001111011;
    rom[67] = 16'b0010011010010100;
    rom[68] = 16'b0010011010101101;
    rom[69] = 16'b0010011011000110;
    rom[70] = 16'b0010011011011111;
    rom[71] = 16'b0010011011111000;
    rom[72] = 16'b0010011100010001;
    rom[73] = 16'b0010011100101010;
    rom[74] = 16'b0010011101000100;
    rom[75] = 16'b0010011101011101;
    rom[76] = 16'b0010011101110110;
    rom[77] = 16'b0010011110001111;
    rom[78] = 16'b0010011110101000;
    rom[79] = 16'b0010011111000001;
    rom[80] = 16'b0010011111011010;
    rom[81] = 16'b0010011111110011;
    rom[82] = 16'b0010100000000110;
    rom[83] = 16'b0010100000010011;
    rom[84] = 16'b0010100000011111;
    rom[85] = 16'b0010100000101100;
    rom[86] = 16'b0010100000111001;
    rom[87] = 16'b0010100001000101;
    rom[88] = 16'b0010100001010010;
    rom[89] = 16'b0010100001011110;
    rom[90] = 16'b0010100001101011;
    rom[91] = 16'b0010100001110111;
    rom[92] = 16'b0010100010000100;
    rom[93] = 16'b0010100010010000;
    rom[94] = 16'b0010100010011101;
    rom[95] = 16'b0010100010101010;
    rom[96] = 16'b0010100010110110;
    rom[97] = 16'b0010100011000011;
    rom[98] = 16'b0010100011001111;
    rom[99] = 16'b0010100011011100;
    rom[100] = 16'b0010100011101000;
    rom[101] = 16'b0010100011110101;
    rom[102] = 16'b0010100100000001;
    rom[103] = 16'b0010100100001110;
    rom[104] = 16'b0010100100011011;
    rom[105] = 16'b0010100100100111;
    rom[106] = 16'b0010100100110100;
    rom[107] = 16'b0010100101000000;
    rom[108] = 16'b0010100101001101;
    rom[109] = 16'b0010100101011001;
    rom[110] = 16'b0010100101100110;
    rom[111] = 16'b0010100101110010;
    rom[112] = 16'b0010100101111111;
    rom[113] = 16'b0010100110001100;
    rom[114] = 16'b0010100110011000;
    rom[115] = 16'b0010100110100101;
    rom[116] = 16'b0010100110110001;
    rom[117] = 16'b0010100110111110;
    rom[118] = 16'b0010100111001010;
    rom[119] = 16'b0010100111010111;
    rom[120] = 16'b0010100111100011;
    rom[121] = 16'b0010100111110000;
    rom[122] = 16'b0010100111111101;
    rom[123] = 16'b0010101000001001;
    rom[124] = 16'b0010101000010110;
    rom[125] = 16'b0010101000100010;
    rom[126] = 16'b0010101000101111;
    rom[127] = 16'b0010101000111011;
    rom[128] = 16'b0010101001001000;
    rom[129] = 16'b0010101001010100;
    rom[130] = 16'b0010101001100001;
    rom[131] = 16'b0010101001101110;
    rom[132] = 16'b0010101001111010;
    rom[133] = 16'b0010101010000111;
    rom[134] = 16'b0010101010010011;
    rom[135] = 16'b0010101010100000;
    rom[136] = 16'b0010101010101100;
    rom[137] = 16'b0010101010111001;
    rom[138] = 16'b0010101011000101;
    rom[139] = 16'b0010101011010010;
    rom[140] = 16'b0010101011011110;
    rom[141] = 16'b0010101011101011;
    rom[142] = 16'b0010101011111000;
    rom[143] = 16'b0010101100000100;
    rom[144] = 16'b0010101100010001;
    rom[145] = 16'b0010101100011101;
    rom[146] = 16'b0010101100101010;
    rom[147] = 16'b0010101100110110;
    rom[148] = 16'b0010101101000011;
    rom[149] = 16'b0010101101001111;
    rom[150] = 16'b0010101101011100;
    rom[151] = 16'b0010101101101000;
    rom[152] = 16'b0010101101110101;
    rom[153] = 16'b0010101110000010;
    rom[154] = 16'b0010101110001110;
    rom[155] = 16'b0010101110011011;
    rom[156] = 16'b0010101110100111;
    rom[157] = 16'b0010101110110100;
    rom[158] = 16'b0010101111000000;
    rom[159] = 16'b0010101111001101;
    rom[160] = 16'b0010101111011001;
    rom[161] = 16'b0010101111100110;
    rom[162] = 16'b0010101111110010;
    rom[163] = 16'b0010101111111111;
    rom[164] = 16'b0010110000000110;
    rom[165] = 16'b0010110000001100;
    rom[166] = 16'b0010110000010010;
    rom[167] = 16'b0010110000011001;
    rom[168] = 16'b0010110000011111;
    rom[169] = 16'b0010110000100101;
    rom[170] = 16'b0010110000101011;
    rom[171] = 16'b0010110000110010;
    rom[172] = 16'b0010110000111000;
    rom[173] = 16'b0010110000111110;
    rom[174] = 16'b0010110001000100;
    rom[175] = 16'b0010110001001011;
    rom[176] = 16'b0010110001010001;
    rom[177] = 16'b0010110001010111;
    rom[178] = 16'b0010110001011110;
    rom[179] = 16'b0010110001100100;
    rom[180] = 16'b0010110001101010;
    rom[181] = 16'b0010110001110000;
    rom[182] = 16'b0010110001110111;
    rom[183] = 16'b0010110001111101;
    rom[184] = 16'b0010110010000011;
    rom[185] = 16'b0010110010001001;
    rom[186] = 16'b0010110010010000;
    rom[187] = 16'b0010110010010110;
    rom[188] = 16'b0010110010011100;
    rom[189] = 16'b0010110010100010;
    rom[190] = 16'b0010110010101001;
    rom[191] = 16'b0010110010101111;
    rom[192] = 16'b0010110010110101;
    rom[193] = 16'b0010110010111100;
    rom[194] = 16'b0010110011000010;
    rom[195] = 16'b0010110011001000;
    rom[196] = 16'b0010110011001110;
    rom[197] = 16'b0010110011010101;
    rom[198] = 16'b0010110011011011;
    rom[199] = 16'b0010110011100001;
    rom[200] = 16'b0010110011100111;
    rom[201] = 16'b0010110011101110;
    rom[202] = 16'b0010110011110100;
    rom[203] = 16'b0010110011111010;
    rom[204] = 16'b0010110100000000;
    rom[205] = 16'b0010110100000111;
    rom[206] = 16'b0010110100001101;
    rom[207] = 16'b0010110100010011;
    rom[208] = 16'b0010110100011010;
    rom[209] = 16'b0010110100100000;
    rom[210] = 16'b0010110100100110;
    rom[211] = 16'b0010110100101100;
    rom[212] = 16'b0010110100110011;
    rom[213] = 16'b0010110100111001;
    rom[214] = 16'b0010110100111111;
    rom[215] = 16'b0010110101000101;
    rom[216] = 16'b0010110101001100;
    rom[217] = 16'b0010110101010010;
    rom[218] = 16'b0010110101011000;
    rom[219] = 16'b0010110101011110;
    rom[220] = 16'b0010110101100101;
    rom[221] = 16'b0010110101101011;
    rom[222] = 16'b0010110101110001;
    rom[223] = 16'b0010110101110111;
    rom[224] = 16'b0010110101111110;
    rom[225] = 16'b0010110110000100;
    rom[226] = 16'b0010110110001010;
    rom[227] = 16'b0010110110010000;
    rom[228] = 16'b0010110110010111;
    rom[229] = 16'b0010110110011101;
    rom[230] = 16'b0010110110100011;
    rom[231] = 16'b0010110110101010;
    rom[232] = 16'b0010110110110000;
    rom[233] = 16'b0010110110110110;
    rom[234] = 16'b0010110110111100;
    rom[235] = 16'b0010110111000011;
    rom[236] = 16'b0010110111001001;
    rom[237] = 16'b0010110111001111;
    rom[238] = 16'b0010110111010101;
    rom[239] = 16'b0010110111011100;
    rom[240] = 16'b0010110111100010;
    rom[241] = 16'b0010110111101000;
    rom[242] = 16'b0010110111101110;
    rom[243] = 16'b0010110111110101;
    rom[244] = 16'b0010110111111011;
    rom[245] = 16'b0010111000000001;
    rom[246] = 16'b0010111000000111;
    rom[247] = 16'b0010111000001110;
    rom[248] = 16'b0010111000010100;
    rom[249] = 16'b0010111000011010;
    rom[250] = 16'b0010111000100000;
    rom[251] = 16'b0010111000100111;
    rom[252] = 16'b0010111000101101;
    rom[253] = 16'b0010111000110011;
    rom[254] = 16'b0010111000111001;
    rom[255] = 16'b0010111001000000;
    rom[256] = 16'b0010111001000110;
    rom[257] = 16'b0010111001001100;
    rom[258] = 16'b0010111001010010;
    rom[259] = 16'b0010111001011001;
    rom[260] = 16'b0010111001011111;
    rom[261] = 16'b0010111001100101;
    rom[262] = 16'b0010111001101011;
    rom[263] = 16'b0010111001110010;
    rom[264] = 16'b0010111001111000;
    rom[265] = 16'b0010111001111110;
    rom[266] = 16'b0010111010000100;
    rom[267] = 16'b0010111010001011;
    rom[268] = 16'b0010111010010001;
    rom[269] = 16'b0010111010010111;
    rom[270] = 16'b0010111010011101;
    rom[271] = 16'b0010111010100100;
    rom[272] = 16'b0010111010101010;
    rom[273] = 16'b0010111010110000;
    rom[274] = 16'b0010111010110110;
    rom[275] = 16'b0010111010111101;
    rom[276] = 16'b0010111011000011;
    rom[277] = 16'b0010111011001001;
    rom[278] = 16'b0010111011001111;
    rom[279] = 16'b0010111011010110;
    rom[280] = 16'b0010111011011100;
    rom[281] = 16'b0010111011100010;
    rom[282] = 16'b0010111011101000;
    rom[283] = 16'b0010111011101111;
    rom[284] = 16'b0010111011110101;
    rom[285] = 16'b0010111011111011;
    rom[286] = 16'b0010111100000001;
    rom[287] = 16'b0010111100001000;
    rom[288] = 16'b0010111100001110;
    rom[289] = 16'b0010111100010100;
    rom[290] = 16'b0010111100011010;
    rom[291] = 16'b0010111100100001;
    rom[292] = 16'b0010111100100111;
    rom[293] = 16'b0010111100101101;
    rom[294] = 16'b0010111100110011;
    rom[295] = 16'b0010111100111010;
    rom[296] = 16'b0010111101000000;
    rom[297] = 16'b0010111101000110;
    rom[298] = 16'b0010111101001100;
    rom[299] = 16'b0010111101010011;
    rom[300] = 16'b0010111101011001;
    rom[301] = 16'b0010111101011111;
    rom[302] = 16'b0010111101100101;
    rom[303] = 16'b0010111101101100;
    rom[304] = 16'b0010111101110010;
    rom[305] = 16'b0010111101111000;
    rom[306] = 16'b0010111101111110;
    rom[307] = 16'b0010111110000100;
    rom[308] = 16'b0010111110001011;
    rom[309] = 16'b0010111110010001;
    rom[310] = 16'b0010111110010111;
    rom[311] = 16'b0010111110011101;
    rom[312] = 16'b0010111110100100;
    rom[313] = 16'b0010111110101010;
    rom[314] = 16'b0010111110110000;
    rom[315] = 16'b0010111110110110;
    rom[316] = 16'b0010111110111101;
    rom[317] = 16'b0010111111000011;
    rom[318] = 16'b0010111111001001;
    rom[319] = 16'b0010111111001111;
    rom[320] = 16'b0010111111010110;
    rom[321] = 16'b0010111111011100;
    rom[322] = 16'b0010111111100010;
    rom[323] = 16'b0010111111101000;
    rom[324] = 16'b0010111111101111;
    rom[325] = 16'b0010111111110101;
    rom[326] = 16'b0010111111111011;
    rom[327] = 16'b0011000000000001;
    rom[328] = 16'b0011000000000100;
    rom[329] = 16'b0011000000000111;
    rom[330] = 16'b0011000000001010;
    rom[331] = 16'b0011000000001101;
    rom[332] = 16'b0011000000010000;
    rom[333] = 16'b0011000000010011;
    rom[334] = 16'b0011000000010110;
    rom[335] = 16'b0011000000011010;
    rom[336] = 16'b0011000000011101;
    rom[337] = 16'b0011000000100000;
    rom[338] = 16'b0011000000100011;
    rom[339] = 16'b0011000000100110;
    rom[340] = 16'b0011000000101001;
    rom[341] = 16'b0011000000101100;
    rom[342] = 16'b0011000000101111;
    rom[343] = 16'b0011000000110010;
    rom[344] = 16'b0011000000110110;
    rom[345] = 16'b0011000000111001;
    rom[346] = 16'b0011000000111100;
    rom[347] = 16'b0011000000111111;
    rom[348] = 16'b0011000001000010;
    rom[349] = 16'b0011000001000101;
    rom[350] = 16'b0011000001001000;
    rom[351] = 16'b0011000001001011;
    rom[352] = 16'b0011000001001110;
    rom[353] = 16'b0011000001010010;
    rom[354] = 16'b0011000001010101;
    rom[355] = 16'b0011000001011000;
    rom[356] = 16'b0011000001011011;
    rom[357] = 16'b0011000001011110;
    rom[358] = 16'b0011000001100001;
    rom[359] = 16'b0011000001100100;
    rom[360] = 16'b0011000001100111;
    rom[361] = 16'b0011000001101010;
    rom[362] = 16'b0011000001101110;
    rom[363] = 16'b0011000001110001;
    rom[364] = 16'b0011000001110100;
    rom[365] = 16'b0011000001110111;
    rom[366] = 16'b0011000001111010;
    rom[367] = 16'b0011000001111101;
    rom[368] = 16'b0011000010000000;
    rom[369] = 16'b0011000010000011;
    rom[370] = 16'b0011000010000110;
    rom[371] = 16'b0011000010001010;
    rom[372] = 16'b0011000010001101;
    rom[373] = 16'b0011000010010000;
    rom[374] = 16'b0011000010010011;
    rom[375] = 16'b0011000010010110;
    rom[376] = 16'b0011000010011001;
    rom[377] = 16'b0011000010011100;
    rom[378] = 16'b0011000010011111;
    rom[379] = 16'b0011000010100010;
    rom[380] = 16'b0011000010100110;
    rom[381] = 16'b0011000010101001;
    rom[382] = 16'b0011000010101100;
    rom[383] = 16'b0011000010101111;
    rom[384] = 16'b0011000010110010;
    rom[385] = 16'b0011000010110101;
    rom[386] = 16'b0011000010111000;
    rom[387] = 16'b0011000010111011;
    rom[388] = 16'b0011000010111110;
    rom[389] = 16'b0011000011000010;
    rom[390] = 16'b0011000011000101;
    rom[391] = 16'b0011000011001000;
    rom[392] = 16'b0011000011001011;
    rom[393] = 16'b0011000011001110;
    rom[394] = 16'b0011000011010001;
    rom[395] = 16'b0011000011010100;
    rom[396] = 16'b0011000011010111;
    rom[397] = 16'b0011000011011010;
    rom[398] = 16'b0011000011011110;
    rom[399] = 16'b0011000011100001;
    rom[400] = 16'b0011000011100100;
    rom[401] = 16'b0011000011100111;
    rom[402] = 16'b0011000011101010;
    rom[403] = 16'b0011000011101101;
    rom[404] = 16'b0011000011110000;
    rom[405] = 16'b0011000011110011;
    rom[406] = 16'b0011000011110110;
    rom[407] = 16'b0011000011111001;
    rom[408] = 16'b0011000011111101;
    rom[409] = 16'b0011000100000000;
    rom[410] = 16'b0011000100000011;
    rom[411] = 16'b0011000100000110;
    rom[412] = 16'b0011000100001001;
    rom[413] = 16'b0011000100001100;
    rom[414] = 16'b0011000100001111;
    rom[415] = 16'b0011000100010010;
    rom[416] = 16'b0011000100010101;
    rom[417] = 16'b0011000100011000;
    rom[418] = 16'b0011000100011100;
    rom[419] = 16'b0011000100011111;
    rom[420] = 16'b0011000100100010;
    rom[421] = 16'b0011000100100101;
    rom[422] = 16'b0011000100101000;
    rom[423] = 16'b0011000100101011;
    rom[424] = 16'b0011000100101110;
    rom[425] = 16'b0011000100110001;
    rom[426] = 16'b0011000100110100;
    rom[427] = 16'b0011000100110111;
    rom[428] = 16'b0011000100111011;
    rom[429] = 16'b0011000100111110;
    rom[430] = 16'b0011000101000001;
    rom[431] = 16'b0011000101000100;
    rom[432] = 16'b0011000101000111;
    rom[433] = 16'b0011000101001010;
    rom[434] = 16'b0011000101001101;
    rom[435] = 16'b0011000101010000;
    rom[436] = 16'b0011000101010011;
    rom[437] = 16'b0011000101010110;
    rom[438] = 16'b0011000101011010;
    rom[439] = 16'b0011000101011101;
    rom[440] = 16'b0011000101100000;
    rom[441] = 16'b0011000101100011;
    rom[442] = 16'b0011000101100110;
    rom[443] = 16'b0011000101101001;
    rom[444] = 16'b0011000101101100;
    rom[445] = 16'b0011000101101111;
    rom[446] = 16'b0011000101110010;
    rom[447] = 16'b0011000101110101;
    rom[448] = 16'b0011000101111001;
    rom[449] = 16'b0011000101111100;
    rom[450] = 16'b0011000101111111;
    rom[451] = 16'b0011000110000010;
    rom[452] = 16'b0011000110000101;
    rom[453] = 16'b0011000110001000;
    rom[454] = 16'b0011000110001011;
    rom[455] = 16'b0011000110001110;
    rom[456] = 16'b0011000110010001;
    rom[457] = 16'b0011000110010100;
    rom[458] = 16'b0011000110010111;
    rom[459] = 16'b0011000110011011;
    rom[460] = 16'b0011000110011110;
    rom[461] = 16'b0011000110100001;
    rom[462] = 16'b0011000110100100;
    rom[463] = 16'b0011000110100111;
    rom[464] = 16'b0011000110101010;
    rom[465] = 16'b0011000110101101;
    rom[466] = 16'b0011000110110000;
    rom[467] = 16'b0011000110110011;
    rom[468] = 16'b0011000110110110;
    rom[469] = 16'b0011000110111001;
    rom[470] = 16'b0011000110111101;
    rom[471] = 16'b0011000111000000;
    rom[472] = 16'b0011000111000011;
    rom[473] = 16'b0011000111000110;
    rom[474] = 16'b0011000111001001;
    rom[475] = 16'b0011000111001100;
    rom[476] = 16'b0011000111001111;
    rom[477] = 16'b0011000111010010;
    rom[478] = 16'b0011000111010101;
    rom[479] = 16'b0011000111011000;
    rom[480] = 16'b0011000111011011;
    rom[481] = 16'b0011000111011111;
    rom[482] = 16'b0011000111100010;
    rom[483] = 16'b0011000111100101;
    rom[484] = 16'b0011000111101000;
    rom[485] = 16'b0011000111101011;
    rom[486] = 16'b0011000111101110;
    rom[487] = 16'b0011000111110001;
    rom[488] = 16'b0011000111110100;
    rom[489] = 16'b0011000111110111;
    rom[490] = 16'b0011000111111010;
    rom[491] = 16'b0011000111111101;
    rom[492] = 16'b0011001000000001;
    rom[493] = 16'b0011001000000100;
    rom[494] = 16'b0011001000000111;
    rom[495] = 16'b0011001000001010;
    rom[496] = 16'b0011001000001101;
    rom[497] = 16'b0011001000010000;
    rom[498] = 16'b0011001000010011;
    rom[499] = 16'b0011001000010110;
    rom[500] = 16'b0011001000011001;
    rom[501] = 16'b0011001000011100;
    rom[502] = 16'b0011001000011111;
    rom[503] = 16'b0011001000100010;
    rom[504] = 16'b0011001000100110;
    rom[505] = 16'b0011001000101001;
    rom[506] = 16'b0011001000101100;
    rom[507] = 16'b0011001000101111;
    rom[508] = 16'b0011001000110010;
    rom[509] = 16'b0011001000110101;
    rom[510] = 16'b0011001000111000;
    rom[511] = 16'b0011001000111011;
    rom[512] = 16'b0011001000111110;
    rom[513] = 16'b0011001001000001;
    rom[514] = 16'b0011001001000100;
    rom[515] = 16'b0011001001000111;
    rom[516] = 16'b0011001001001011;
    rom[517] = 16'b0011001001001110;
    rom[518] = 16'b0011001001010001;
    rom[519] = 16'b0011001001010100;
    rom[520] = 16'b0011001001010111;
    rom[521] = 16'b0011001001011010;
    rom[522] = 16'b0011001001011101;
    rom[523] = 16'b0011001001100000;
    rom[524] = 16'b0011001001100011;
    rom[525] = 16'b0011001001100110;
    rom[526] = 16'b0011001001101001;
    rom[527] = 16'b0011001001101100;
    rom[528] = 16'b0011001001101111;
    rom[529] = 16'b0011001001110011;
    rom[530] = 16'b0011001001110110;
    rom[531] = 16'b0011001001111001;
    rom[532] = 16'b0011001001111100;
    rom[533] = 16'b0011001001111111;
    rom[534] = 16'b0011001010000010;
    rom[535] = 16'b0011001010000101;
    rom[536] = 16'b0011001010001000;
    rom[537] = 16'b0011001010001011;
    rom[538] = 16'b0011001010001110;
    rom[539] = 16'b0011001010010001;
    rom[540] = 16'b0011001010010100;
    rom[541] = 16'b0011001010010111;
    rom[542] = 16'b0011001010011011;
    rom[543] = 16'b0011001010011110;
    rom[544] = 16'b0011001010100001;
    rom[545] = 16'b0011001010100100;
    rom[546] = 16'b0011001010100111;
    rom[547] = 16'b0011001010101010;
    rom[548] = 16'b0011001010101101;
    rom[549] = 16'b0011001010110000;
    rom[550] = 16'b0011001010110011;
    rom[551] = 16'b0011001010110110;
    rom[552] = 16'b0011001010111001;
    rom[553] = 16'b0011001010111100;
    rom[554] = 16'b0011001010111111;
    rom[555] = 16'b0011001011000010;
    rom[556] = 16'b0011001011000110;
    rom[557] = 16'b0011001011001001;
    rom[558] = 16'b0011001011001100;
    rom[559] = 16'b0011001011001111;
    rom[560] = 16'b0011001011010010;
    rom[561] = 16'b0011001011010101;
    rom[562] = 16'b0011001011011000;
    rom[563] = 16'b0011001011011011;
    rom[564] = 16'b0011001011011110;
    rom[565] = 16'b0011001011100001;
    rom[566] = 16'b0011001011100100;
    rom[567] = 16'b0011001011100111;
    rom[568] = 16'b0011001011101010;
    rom[569] = 16'b0011001011101101;
    rom[570] = 16'b0011001011110000;
    rom[571] = 16'b0011001011110100;
    rom[572] = 16'b0011001011110111;
    rom[573] = 16'b0011001011111010;
    rom[574] = 16'b0011001011111101;
    rom[575] = 16'b0011001100000000;
    rom[576] = 16'b0011001100000011;
    rom[577] = 16'b0011001100000110;
    rom[578] = 16'b0011001100001001;
    rom[579] = 16'b0011001100001100;
    rom[580] = 16'b0011001100001111;
    rom[581] = 16'b0011001100010010;
    rom[582] = 16'b0011001100010101;
    rom[583] = 16'b0011001100011000;
    rom[584] = 16'b0011001100011011;
    rom[585] = 16'b0011001100011110;
    rom[586] = 16'b0011001100100010;
    rom[587] = 16'b0011001100100101;
    rom[588] = 16'b0011001100101000;
    rom[589] = 16'b0011001100101011;
    rom[590] = 16'b0011001100101110;
    rom[591] = 16'b0011001100110001;
    rom[592] = 16'b0011001100110100;
    rom[593] = 16'b0011001100110111;
    rom[594] = 16'b0011001100111010;
    rom[595] = 16'b0011001100111101;
    rom[596] = 16'b0011001101000000;
    rom[597] = 16'b0011001101000011;
    rom[598] = 16'b0011001101000110;
    rom[599] = 16'b0011001101001001;
    rom[600] = 16'b0011001101001100;
    rom[601] = 16'b0011001101001111;
    rom[602] = 16'b0011001101010010;
    rom[603] = 16'b0011001101010110;
    rom[604] = 16'b0011001101011001;
    rom[605] = 16'b0011001101011100;
    rom[606] = 16'b0011001101011111;
    rom[607] = 16'b0011001101100010;
    rom[608] = 16'b0011001101100101;
    rom[609] = 16'b0011001101101000;
    rom[610] = 16'b0011001101101011;
    rom[611] = 16'b0011001101101110;
    rom[612] = 16'b0011001101110001;
    rom[613] = 16'b0011001101110100;
    rom[614] = 16'b0011001101110111;
    rom[615] = 16'b0011001101111010;
    rom[616] = 16'b0011001101111101;
    rom[617] = 16'b0011001110000000;
    rom[618] = 16'b0011001110000011;
    rom[619] = 16'b0011001110000110;
    rom[620] = 16'b0011001110001001;
    rom[621] = 16'b0011001110001101;
    rom[622] = 16'b0011001110010000;
    rom[623] = 16'b0011001110010011;
    rom[624] = 16'b0011001110010110;
    rom[625] = 16'b0011001110011001;
    rom[626] = 16'b0011001110011100;
    rom[627] = 16'b0011001110011111;
    rom[628] = 16'b0011001110100010;
    rom[629] = 16'b0011001110100101;
    rom[630] = 16'b0011001110101000;
    rom[631] = 16'b0011001110101011;
    rom[632] = 16'b0011001110101110;
    rom[633] = 16'b0011001110110001;
    rom[634] = 16'b0011001110110100;
    rom[635] = 16'b0011001110110111;
    rom[636] = 16'b0011001110111010;
    rom[637] = 16'b0011001110111101;
    rom[638] = 16'b0011001111000000;
    rom[639] = 16'b0011001111000011;
    rom[640] = 16'b0011001111000110;
    rom[641] = 16'b0011001111001010;
    rom[642] = 16'b0011001111001101;
    rom[643] = 16'b0011001111010000;
    rom[644] = 16'b0011001111010011;
    rom[645] = 16'b0011001111010110;
    rom[646] = 16'b0011001111011001;
    rom[647] = 16'b0011001111011100;
    rom[648] = 16'b0011001111011111;
    rom[649] = 16'b0011001111100010;
    rom[650] = 16'b0011001111100101;
    rom[651] = 16'b0011001111101000;
    rom[652] = 16'b0011001111101011;
    rom[653] = 16'b0011001111101110;
    rom[654] = 16'b0011001111110001;
    rom[655] = 16'b0011001111110100;
    rom[656] = 16'b0011001111110111;
    rom[657] = 16'b0011001111111010;
    rom[658] = 16'b0011001111111101;
    rom[659] = 16'b0011010000000000;
    rom[660] = 16'b0011010000000010;
    rom[661] = 16'b0011010000000011;
    rom[662] = 16'b0011010000000101;
    rom[663] = 16'b0011010000000110;
    rom[664] = 16'b0011010000001000;
    rom[665] = 16'b0011010000001001;
    rom[666] = 16'b0011010000001011;
    rom[667] = 16'b0011010000001100;
    rom[668] = 16'b0011010000001110;
    rom[669] = 16'b0011010000001111;
    rom[670] = 16'b0011010000010001;
    rom[671] = 16'b0011010000010010;
    rom[672] = 16'b0011010000010100;
    rom[673] = 16'b0011010000010101;
    rom[674] = 16'b0011010000010111;
    rom[675] = 16'b0011010000011000;
    rom[676] = 16'b0011010000011010;
    rom[677] = 16'b0011010000011100;
    rom[678] = 16'b0011010000011101;
    rom[679] = 16'b0011010000011111;
    rom[680] = 16'b0011010000100000;
    rom[681] = 16'b0011010000100010;
    rom[682] = 16'b0011010000100011;
    rom[683] = 16'b0011010000100101;
    rom[684] = 16'b0011010000100110;
    rom[685] = 16'b0011010000101000;
    rom[686] = 16'b0011010000101001;
    rom[687] = 16'b0011010000101011;
    rom[688] = 16'b0011010000101100;
    rom[689] = 16'b0011010000101110;
    rom[690] = 16'b0011010000101111;
    rom[691] = 16'b0011010000110001;
    rom[692] = 16'b0011010000110010;
    rom[693] = 16'b0011010000110100;
    rom[694] = 16'b0011010000110101;
    rom[695] = 16'b0011010000110111;
    rom[696] = 16'b0011010000111000;
    rom[697] = 16'b0011010000111010;
    rom[698] = 16'b0011010000111011;
    rom[699] = 16'b0011010000111101;
    rom[700] = 16'b0011010000111110;
    rom[701] = 16'b0011010001000000;
    rom[702] = 16'b0011010001000001;
    rom[703] = 16'b0011010001000011;
    rom[704] = 16'b0011010001000100;
    rom[705] = 16'b0011010001000110;
    rom[706] = 16'b0011010001000111;
    rom[707] = 16'b0011010001001001;
    rom[708] = 16'b0011010001001011;
    rom[709] = 16'b0011010001001100;
    rom[710] = 16'b0011010001001110;
    rom[711] = 16'b0011010001001111;
    rom[712] = 16'b0011010001010001;
    rom[713] = 16'b0011010001010010;
    rom[714] = 16'b0011010001010100;
    rom[715] = 16'b0011010001010101;
    rom[716] = 16'b0011010001010111;
    rom[717] = 16'b0011010001011000;
    rom[718] = 16'b0011010001011010;
    rom[719] = 16'b0011010001011011;
    rom[720] = 16'b0011010001011101;
    rom[721] = 16'b0011010001011110;
    rom[722] = 16'b0011010001100000;
    rom[723] = 16'b0011010001100001;
    rom[724] = 16'b0011010001100011;
    rom[725] = 16'b0011010001100100;
    rom[726] = 16'b0011010001100110;
    rom[727] = 16'b0011010001100111;
    rom[728] = 16'b0011010001101001;
    rom[729] = 16'b0011010001101010;
    rom[730] = 16'b0011010001101100;
    rom[731] = 16'b0011010001101101;
    rom[732] = 16'b0011010001101111;
    rom[733] = 16'b0011010001110000;
    rom[734] = 16'b0011010001110010;
    rom[735] = 16'b0011010001110011;
    rom[736] = 16'b0011010001110101;
    rom[737] = 16'b0011010001110110;
    rom[738] = 16'b0011010001111000;
    rom[739] = 16'b0011010001111001;
    rom[740] = 16'b0011010001111011;
    rom[741] = 16'b0011010001111100;
    rom[742] = 16'b0011010001111110;
    rom[743] = 16'b0011010001111111;
    rom[744] = 16'b0011010010000001;
    rom[745] = 16'b0011010010000010;
    rom[746] = 16'b0011010010000100;
    rom[747] = 16'b0011010010000101;
    rom[748] = 16'b0011010010000111;
    rom[749] = 16'b0011010010001000;
    rom[750] = 16'b0011010010001010;
    rom[751] = 16'b0011010010001011;
    rom[752] = 16'b0011010010001101;
    rom[753] = 16'b0011010010001110;
    rom[754] = 16'b0011010010010000;
    rom[755] = 16'b0011010010010001;
    rom[756] = 16'b0011010010010011;
    rom[757] = 16'b0011010010010100;
    rom[758] = 16'b0011010010010110;
    rom[759] = 16'b0011010010010111;
    rom[760] = 16'b0011010010011001;
    rom[761] = 16'b0011010010011010;
    rom[762] = 16'b0011010010011100;
    rom[763] = 16'b0011010010011101;
    rom[764] = 16'b0011010010011111;
    rom[765] = 16'b0011010010100000;
    rom[766] = 16'b0011010010100010;
    rom[767] = 16'b0011010010100100;
    rom[768] = 16'b0011010010100101;
    rom[769] = 16'b0011010010100111;
    rom[770] = 16'b0011010010101000;
    rom[771] = 16'b0011010010101010;
    rom[772] = 16'b0011010010101011;
    rom[773] = 16'b0011010010101101;
    rom[774] = 16'b0011010010101110;
    rom[775] = 16'b0011010010110000;
    rom[776] = 16'b0011010010110001;
    rom[777] = 16'b0011010010110011;
    rom[778] = 16'b0011010010110100;
    rom[779] = 16'b0011010010110110;
    rom[780] = 16'b0011010010110111;
    rom[781] = 16'b0011010010111001;
    rom[782] = 16'b0011010010111010;
    rom[783] = 16'b0011010010111100;
    rom[784] = 16'b0011010010111101;
    rom[785] = 16'b0011010010111111;
    rom[786] = 16'b0011010011000000;
    rom[787] = 16'b0011010011000010;
    rom[788] = 16'b0011010011000011;
    rom[789] = 16'b0011010011000101;
    rom[790] = 16'b0011010011000110;
    rom[791] = 16'b0011010011001000;
    rom[792] = 16'b0011010011001001;
    rom[793] = 16'b0011010011001011;
    rom[794] = 16'b0011010011001100;
    rom[795] = 16'b0011010011001110;
    rom[796] = 16'b0011010011001111;
    rom[797] = 16'b0011010011010001;
    rom[798] = 16'b0011010011010010;
    rom[799] = 16'b0011010011010100;
    rom[800] = 16'b0011010011010101;
    rom[801] = 16'b0011010011010111;
    rom[802] = 16'b0011010011011000;
    rom[803] = 16'b0011010011011010;
    rom[804] = 16'b0011010011011011;
    rom[805] = 16'b0011010011011101;
    rom[806] = 16'b0011010011011110;
    rom[807] = 16'b0011010011011111;
    rom[808] = 16'b0011010011100001;
    rom[809] = 16'b0011010011100010;
    rom[810] = 16'b0011010011100100;
    rom[811] = 16'b0011010011100101;
    rom[812] = 16'b0011010011100111;
    rom[813] = 16'b0011010011101000;
    rom[814] = 16'b0011010011101010;
    rom[815] = 16'b0011010011101011;
    rom[816] = 16'b0011010011101101;
    rom[817] = 16'b0011010011101110;
    rom[818] = 16'b0011010011110000;
    rom[819] = 16'b0011010011110001;
    rom[820] = 16'b0011010011110011;
    rom[821] = 16'b0011010011110100;
    rom[822] = 16'b0011010011110110;
    rom[823] = 16'b0011010011110111;
    rom[824] = 16'b0011010011111001;
    rom[825] = 16'b0011010011111010;
    rom[826] = 16'b0011010011111100;
    rom[827] = 16'b0011010011111101;
    rom[828] = 16'b0011010011111111;
    rom[829] = 16'b0011010100000000;
    rom[830] = 16'b0011010100000010;
    rom[831] = 16'b0011010100000011;
    rom[832] = 16'b0011010100000101;
    rom[833] = 16'b0011010100000110;
    rom[834] = 16'b0011010100001000;
    rom[835] = 16'b0011010100001001;
    rom[836] = 16'b0011010100001011;
    rom[837] = 16'b0011010100001100;
    rom[838] = 16'b0011010100001110;
    rom[839] = 16'b0011010100001111;
    rom[840] = 16'b0011010100010001;
    rom[841] = 16'b0011010100010010;
    rom[842] = 16'b0011010100010100;
    rom[843] = 16'b0011010100010101;
    rom[844] = 16'b0011010100010111;
    rom[845] = 16'b0011010100011000;
    rom[846] = 16'b0011010100011010;
    rom[847] = 16'b0011010100011011;
    rom[848] = 16'b0011010100011101;
    rom[849] = 16'b0011010100011110;
    rom[850] = 16'b0011010100100000;
    rom[851] = 16'b0011010100100001;
    rom[852] = 16'b0011010100100011;
    rom[853] = 16'b0011010100100100;
    rom[854] = 16'b0011010100100110;
    rom[855] = 16'b0011010100100111;
    rom[856] = 16'b0011010100101001;
    rom[857] = 16'b0011010100101010;
    rom[858] = 16'b0011010100101100;
    rom[859] = 16'b0011010100101101;
    rom[860] = 16'b0011010100101111;
    rom[861] = 16'b0011010100110000;
    rom[862] = 16'b0011010100110001;
    rom[863] = 16'b0011010100110011;
    rom[864] = 16'b0011010100110100;
    rom[865] = 16'b0011010100110110;
    rom[866] = 16'b0011010100110111;
    rom[867] = 16'b0011010100111001;
    rom[868] = 16'b0011010100111010;
    rom[869] = 16'b0011010100111100;
    rom[870] = 16'b0011010100111101;
    rom[871] = 16'b0011010100111111;
    rom[872] = 16'b0011010101000000;
    rom[873] = 16'b0011010101000010;
    rom[874] = 16'b0011010101000011;
    rom[875] = 16'b0011010101000101;
    rom[876] = 16'b0011010101000110;
    rom[877] = 16'b0011010101001000;
    rom[878] = 16'b0011010101001001;
    rom[879] = 16'b0011010101001011;
    rom[880] = 16'b0011010101001100;
    rom[881] = 16'b0011010101001110;
    rom[882] = 16'b0011010101001111;
    rom[883] = 16'b0011010101010001;
    rom[884] = 16'b0011010101010010;
    rom[885] = 16'b0011010101010100;
    rom[886] = 16'b0011010101010101;
    rom[887] = 16'b0011010101010111;
    rom[888] = 16'b0011010101011000;
    rom[889] = 16'b0011010101011010;
    rom[890] = 16'b0011010101011011;
    rom[891] = 16'b0011010101011101;
    rom[892] = 16'b0011010101011110;
    rom[893] = 16'b0011010101011111;
    rom[894] = 16'b0011010101100001;
    rom[895] = 16'b0011010101100010;
    rom[896] = 16'b0011010101100100;
    rom[897] = 16'b0011010101100101;
    rom[898] = 16'b0011010101100111;
    rom[899] = 16'b0011010101101000;
    rom[900] = 16'b0011010101101010;
    rom[901] = 16'b0011010101101011;
    rom[902] = 16'b0011010101101101;
    rom[903] = 16'b0011010101101110;
    rom[904] = 16'b0011010101110000;
    rom[905] = 16'b0011010101110001;
    rom[906] = 16'b0011010101110011;
    rom[907] = 16'b0011010101110100;
    rom[908] = 16'b0011010101110110;
    rom[909] = 16'b0011010101110111;
    rom[910] = 16'b0011010101111001;
    rom[911] = 16'b0011010101111010;
    rom[912] = 16'b0011010101111100;
    rom[913] = 16'b0011010101111101;
    rom[914] = 16'b0011010101111110;
    rom[915] = 16'b0011010110000000;
    rom[916] = 16'b0011010110000001;
    rom[917] = 16'b0011010110000011;
    rom[918] = 16'b0011010110000100;
    rom[919] = 16'b0011010110000110;
    rom[920] = 16'b0011010110000111;
    rom[921] = 16'b0011010110001001;
    rom[922] = 16'b0011010110001010;
    rom[923] = 16'b0011010110001100;
    rom[924] = 16'b0011010110001101;
    rom[925] = 16'b0011010110001111;
    rom[926] = 16'b0011010110010000;
    rom[927] = 16'b0011010110010010;
    rom[928] = 16'b0011010110010011;
    rom[929] = 16'b0011010110010101;
    rom[930] = 16'b0011010110010110;
    rom[931] = 16'b0011010110011000;
    rom[932] = 16'b0011010110011001;
    rom[933] = 16'b0011010110011010;
    rom[934] = 16'b0011010110011100;
    rom[935] = 16'b0011010110011101;
    rom[936] = 16'b0011010110011111;
    rom[937] = 16'b0011010110100000;
    rom[938] = 16'b0011010110100010;
    rom[939] = 16'b0011010110100011;
    rom[940] = 16'b0011010110100101;
    rom[941] = 16'b0011010110100110;
    rom[942] = 16'b0011010110101000;
    rom[943] = 16'b0011010110101001;
    rom[944] = 16'b0011010110101011;
    rom[945] = 16'b0011010110101100;
    rom[946] = 16'b0011010110101110;
    rom[947] = 16'b0011010110101111;
    rom[948] = 16'b0011010110110001;
    rom[949] = 16'b0011010110110010;
    rom[950] = 16'b0011010110110011;
    rom[951] = 16'b0011010110110101;
    rom[952] = 16'b0011010110110110;
    rom[953] = 16'b0011010110111000;
    rom[954] = 16'b0011010110111001;
    rom[955] = 16'b0011010110111011;
    rom[956] = 16'b0011010110111100;
    rom[957] = 16'b0011010110111110;
    rom[958] = 16'b0011010110111111;
    rom[959] = 16'b0011010111000001;
    rom[960] = 16'b0011010111000010;
    rom[961] = 16'b0011010111000100;
    rom[962] = 16'b0011010111000101;
    rom[963] = 16'b0011010111000111;
    rom[964] = 16'b0011010111001000;
    rom[965] = 16'b0011010111001001;
    rom[966] = 16'b0011010111001011;
    rom[967] = 16'b0011010111001100;
    rom[968] = 16'b0011010111001110;
    rom[969] = 16'b0011010111001111;
    rom[970] = 16'b0011010111010001;
    rom[971] = 16'b0011010111010010;
    rom[972] = 16'b0011010111010100;
    rom[973] = 16'b0011010111010101;
    rom[974] = 16'b0011010111010111;
    rom[975] = 16'b0011010111011000;
    rom[976] = 16'b0011010111011010;
    rom[977] = 16'b0011010111011011;
    rom[978] = 16'b0011010111011100;
    rom[979] = 16'b0011010111011110;
    rom[980] = 16'b0011010111011111;
    rom[981] = 16'b0011010111100001;
    rom[982] = 16'b0011010111100010;
    rom[983] = 16'b0011010111100100;
    rom[984] = 16'b0011010111100101;
    rom[985] = 16'b0011010111100111;
    rom[986] = 16'b0011010111101000;
    rom[987] = 16'b0011010111101010;
    rom[988] = 16'b0011010111101011;
    rom[989] = 16'b0011010111101101;
    rom[990] = 16'b0011010111101110;
    rom[991] = 16'b0011010111101111;
    rom[992] = 16'b0011010111110001;
    rom[993] = 16'b0011010111110010;
    rom[994] = 16'b0011010111110100;
    rom[995] = 16'b0011010111110101;
    rom[996] = 16'b0011010111110111;
    rom[997] = 16'b0011010111111000;
    rom[998] = 16'b0011010111111010;
    rom[999] = 16'b0011010111111011;
    rom[1000] = 16'b0011010111111101;
    rom[1001] = 16'b0011010111111110;
    rom[1002] = 16'b0011010111111111;
    rom[1003] = 16'b0011011000000001;
    rom[1004] = 16'b0011011000000010;
    rom[1005] = 16'b0011011000000100;
    rom[1006] = 16'b0011011000000101;
    rom[1007] = 16'b0011011000000111;
    rom[1008] = 16'b0011011000001000;
    rom[1009] = 16'b0011011000001010;
    rom[1010] = 16'b0011011000001011;
    rom[1011] = 16'b0011011000001101;
    rom[1012] = 16'b0011011000001110;
    rom[1013] = 16'b0011011000001111;
    rom[1014] = 16'b0011011000010001;
    rom[1015] = 16'b0011011000010010;
    rom[1016] = 16'b0011011000010100;
    rom[1017] = 16'b0011011000010101;
    rom[1018] = 16'b0011011000010111;
    rom[1019] = 16'b0011011000011000;
    rom[1020] = 16'b0011011000011010;
    rom[1021] = 16'b0011011000011011;
    rom[1022] = 16'b0011011000011101;
    rom[1023] = 16'b0011011000011110;
    rom[1024] = 16'b0011011000011111;
    rom[1025] = 16'b0011011000100001;
    rom[1026] = 16'b0011011000100010;
    rom[1027] = 16'b0011011000100100;
    rom[1028] = 16'b0011011000100101;
    rom[1029] = 16'b0011011000100111;
    rom[1030] = 16'b0011011000101000;
    rom[1031] = 16'b0011011000101010;
    rom[1032] = 16'b0011011000101011;
    rom[1033] = 16'b0011011000101101;
    rom[1034] = 16'b0011011000101110;
    rom[1035] = 16'b0011011000101111;
    rom[1036] = 16'b0011011000110001;
    rom[1037] = 16'b0011011000110010;
    rom[1038] = 16'b0011011000110100;
    rom[1039] = 16'b0011011000110101;
    rom[1040] = 16'b0011011000110111;
    rom[1041] = 16'b0011011000111000;
    rom[1042] = 16'b0011011000111010;
    rom[1043] = 16'b0011011000111011;
    rom[1044] = 16'b0011011000111100;
    rom[1045] = 16'b0011011000111110;
    rom[1046] = 16'b0011011000111111;
    rom[1047] = 16'b0011011001000001;
    rom[1048] = 16'b0011011001000010;
    rom[1049] = 16'b0011011001000100;
    rom[1050] = 16'b0011011001000101;
    rom[1051] = 16'b0011011001000111;
    rom[1052] = 16'b0011011001001000;
    rom[1053] = 16'b0011011001001001;
    rom[1054] = 16'b0011011001001011;
    rom[1055] = 16'b0011011001001100;
    rom[1056] = 16'b0011011001001110;
    rom[1057] = 16'b0011011001001111;
    rom[1058] = 16'b0011011001010001;
    rom[1059] = 16'b0011011001010010;
    rom[1060] = 16'b0011011001010100;
    rom[1061] = 16'b0011011001010101;
    rom[1062] = 16'b0011011001010110;
    rom[1063] = 16'b0011011001011000;
    rom[1064] = 16'b0011011001011001;
    rom[1065] = 16'b0011011001011011;
    rom[1066] = 16'b0011011001011100;
    rom[1067] = 16'b0011011001011110;
    rom[1068] = 16'b0011011001011111;
    rom[1069] = 16'b0011011001100001;
    rom[1070] = 16'b0011011001100010;
    rom[1071] = 16'b0011011001100011;
    rom[1072] = 16'b0011011001100101;
    rom[1073] = 16'b0011011001100110;
    rom[1074] = 16'b0011011001101000;
    rom[1075] = 16'b0011011001101001;
    rom[1076] = 16'b0011011001101011;
    rom[1077] = 16'b0011011001101100;
    rom[1078] = 16'b0011011001101101;
    rom[1079] = 16'b0011011001101111;
    rom[1080] = 16'b0011011001110000;
    rom[1081] = 16'b0011011001110010;
    rom[1082] = 16'b0011011001110011;
    rom[1083] = 16'b0011011001110101;
    rom[1084] = 16'b0011011001110110;
    rom[1085] = 16'b0011011001111000;
    rom[1086] = 16'b0011011001111001;
    rom[1087] = 16'b0011011001111010;
    rom[1088] = 16'b0011011001111100;
    rom[1089] = 16'b0011011001111101;
    rom[1090] = 16'b0011011001111111;
    rom[1091] = 16'b0011011010000000;
    rom[1092] = 16'b0011011010000010;
    rom[1093] = 16'b0011011010000011;
    rom[1094] = 16'b0011011010000100;
    rom[1095] = 16'b0011011010000110;
    rom[1096] = 16'b0011011010000111;
    rom[1097] = 16'b0011011010001001;
    rom[1098] = 16'b0011011010001010;
    rom[1099] = 16'b0011011010001100;
    rom[1100] = 16'b0011011010001101;
    rom[1101] = 16'b0011011010001111;
    rom[1102] = 16'b0011011010010000;
    rom[1103] = 16'b0011011010010001;
    rom[1104] = 16'b0011011010010011;
    rom[1105] = 16'b0011011010010100;
    rom[1106] = 16'b0011011010010110;
    rom[1107] = 16'b0011011010010111;
    rom[1108] = 16'b0011011010011001;
    rom[1109] = 16'b0011011010011010;
    rom[1110] = 16'b0011011010011011;
    rom[1111] = 16'b0011011010011101;
    rom[1112] = 16'b0011011010011110;
    rom[1113] = 16'b0011011010100000;
    rom[1114] = 16'b0011011010100001;
    rom[1115] = 16'b0011011010100011;
    rom[1116] = 16'b0011011010100100;
    rom[1117] = 16'b0011011010100101;
    rom[1118] = 16'b0011011010100111;
    rom[1119] = 16'b0011011010101000;
    rom[1120] = 16'b0011011010101010;
    rom[1121] = 16'b0011011010101011;
    rom[1122] = 16'b0011011010101101;
    rom[1123] = 16'b0011011010101110;
    rom[1124] = 16'b0011011010101111;
    rom[1125] = 16'b0011011010110001;
    rom[1126] = 16'b0011011010110010;
    rom[1127] = 16'b0011011010110100;
    rom[1128] = 16'b0011011010110101;
    rom[1129] = 16'b0011011010110111;
    rom[1130] = 16'b0011011010111000;
    rom[1131] = 16'b0011011010111001;
    rom[1132] = 16'b0011011010111011;
    rom[1133] = 16'b0011011010111100;
    rom[1134] = 16'b0011011010111110;
    rom[1135] = 16'b0011011010111111;
    rom[1136] = 16'b0011011011000001;
    rom[1137] = 16'b0011011011000010;
    rom[1138] = 16'b0011011011000011;
    rom[1139] = 16'b0011011011000101;
    rom[1140] = 16'b0011011011000110;
    rom[1141] = 16'b0011011011001000;
    rom[1142] = 16'b0011011011001001;
    rom[1143] = 16'b0011011011001010;
    rom[1144] = 16'b0011011011001100;
    rom[1145] = 16'b0011011011001101;
    rom[1146] = 16'b0011011011001111;
    rom[1147] = 16'b0011011011010000;
    rom[1148] = 16'b0011011011010010;
    rom[1149] = 16'b0011011011010011;
    rom[1150] = 16'b0011011011010100;
    rom[1151] = 16'b0011011011010110;
    rom[1152] = 16'b0011011011010111;
    rom[1153] = 16'b0011011011011001;
    rom[1154] = 16'b0011011011011010;
    rom[1155] = 16'b0011011011011100;
    rom[1156] = 16'b0011011011011101;
    rom[1157] = 16'b0011011011011110;
    rom[1158] = 16'b0011011011100000;
    rom[1159] = 16'b0011011011100001;
    rom[1160] = 16'b0011011011100011;
    rom[1161] = 16'b0011011011100100;
    rom[1162] = 16'b0011011011100101;
    rom[1163] = 16'b0011011011100111;
    rom[1164] = 16'b0011011011101000;
    rom[1165] = 16'b0011011011101010;
    rom[1166] = 16'b0011011011101011;
    rom[1167] = 16'b0011011011101101;
    rom[1168] = 16'b0011011011101110;
    rom[1169] = 16'b0011011011101111;
    rom[1170] = 16'b0011011011110001;
    rom[1171] = 16'b0011011011110010;
    rom[1172] = 16'b0011011011110100;
    rom[1173] = 16'b0011011011110101;
    rom[1174] = 16'b0011011011110110;
    rom[1175] = 16'b0011011011111000;
    rom[1176] = 16'b0011011011111001;
    rom[1177] = 16'b0011011011111011;
    rom[1178] = 16'b0011011011111100;
    rom[1179] = 16'b0011011011111110;
    rom[1180] = 16'b0011011011111111;
    rom[1181] = 16'b0011011100000000;
    rom[1182] = 16'b0011011100000010;
    rom[1183] = 16'b0011011100000011;
    rom[1184] = 16'b0011011100000101;
    rom[1185] = 16'b0011011100000110;
    rom[1186] = 16'b0011011100000111;
    rom[1187] = 16'b0011011100001001;
    rom[1188] = 16'b0011011100001010;
    rom[1189] = 16'b0011011100001100;
    rom[1190] = 16'b0011011100001101;
    rom[1191] = 16'b0011011100001110;
    rom[1192] = 16'b0011011100010000;
    rom[1193] = 16'b0011011100010001;
    rom[1194] = 16'b0011011100010011;
    rom[1195] = 16'b0011011100010100;
    rom[1196] = 16'b0011011100010101;
    rom[1197] = 16'b0011011100010111;
    rom[1198] = 16'b0011011100011000;
    rom[1199] = 16'b0011011100011010;
    rom[1200] = 16'b0011011100011011;
    rom[1201] = 16'b0011011100011101;
    rom[1202] = 16'b0011011100011110;
    rom[1203] = 16'b0011011100011111;
    rom[1204] = 16'b0011011100100001;
    rom[1205] = 16'b0011011100100010;
    rom[1206] = 16'b0011011100100100;
    rom[1207] = 16'b0011011100100101;
    rom[1208] = 16'b0011011100100110;
    rom[1209] = 16'b0011011100101000;
    rom[1210] = 16'b0011011100101001;
    rom[1211] = 16'b0011011100101011;
    rom[1212] = 16'b0011011100101100;
    rom[1213] = 16'b0011011100101101;
    rom[1214] = 16'b0011011100101111;
    rom[1215] = 16'b0011011100110000;
    rom[1216] = 16'b0011011100110010;
    rom[1217] = 16'b0011011100110011;
    rom[1218] = 16'b0011011100110100;
    rom[1219] = 16'b0011011100110110;
    rom[1220] = 16'b0011011100110111;
    rom[1221] = 16'b0011011100111001;
    rom[1222] = 16'b0011011100111010;
    rom[1223] = 16'b0011011100111011;
    rom[1224] = 16'b0011011100111101;
    rom[1225] = 16'b0011011100111110;
    rom[1226] = 16'b0011011101000000;
    rom[1227] = 16'b0011011101000001;
    rom[1228] = 16'b0011011101000010;
    rom[1229] = 16'b0011011101000100;
    rom[1230] = 16'b0011011101000101;
    rom[1231] = 16'b0011011101000111;
    rom[1232] = 16'b0011011101001000;
    rom[1233] = 16'b0011011101001001;
    rom[1234] = 16'b0011011101001011;
    rom[1235] = 16'b0011011101001100;
    rom[1236] = 16'b0011011101001110;
    rom[1237] = 16'b0011011101001111;
    rom[1238] = 16'b0011011101010000;
    rom[1239] = 16'b0011011101010010;
    rom[1240] = 16'b0011011101010011;
    rom[1241] = 16'b0011011101010101;
    rom[1242] = 16'b0011011101010110;
    rom[1243] = 16'b0011011101010111;
    rom[1244] = 16'b0011011101011001;
    rom[1245] = 16'b0011011101011010;
    rom[1246] = 16'b0011011101011100;
    rom[1247] = 16'b0011011101011101;
    rom[1248] = 16'b0011011101011110;
    rom[1249] = 16'b0011011101100000;
    rom[1250] = 16'b0011011101100001;
    rom[1251] = 16'b0011011101100011;
    rom[1252] = 16'b0011011101100100;
    rom[1253] = 16'b0011011101100101;
    rom[1254] = 16'b0011011101100111;
    rom[1255] = 16'b0011011101101000;
    rom[1256] = 16'b0011011101101010;
    rom[1257] = 16'b0011011101101011;
    rom[1258] = 16'b0011011101101100;
    rom[1259] = 16'b0011011101101110;
    rom[1260] = 16'b0011011101101111;
    rom[1261] = 16'b0011011101110000;
    rom[1262] = 16'b0011011101110010;
    rom[1263] = 16'b0011011101110011;
    rom[1264] = 16'b0011011101110101;
    rom[1265] = 16'b0011011101110110;
    rom[1266] = 16'b0011011101110111;
    rom[1267] = 16'b0011011101111001;
    rom[1268] = 16'b0011011101111010;
    rom[1269] = 16'b0011011101111100;
    rom[1270] = 16'b0011011101111101;
    rom[1271] = 16'b0011011101111110;
    rom[1272] = 16'b0011011110000000;
    rom[1273] = 16'b0011011110000001;
    rom[1274] = 16'b0011011110000011;
    rom[1275] = 16'b0011011110000100;
    rom[1276] = 16'b0011011110000101;
    rom[1277] = 16'b0011011110000111;
    rom[1278] = 16'b0011011110001000;
    rom[1279] = 16'b0011011110001001;
    rom[1280] = 16'b0011011110001011;
    rom[1281] = 16'b0011011110001100;
    rom[1282] = 16'b0011011110001110;
    rom[1283] = 16'b0011011110001111;
    rom[1284] = 16'b0011011110010000;
    rom[1285] = 16'b0011011110010010;
    rom[1286] = 16'b0011011110010011;
    rom[1287] = 16'b0011011110010101;
    rom[1288] = 16'b0011011110010110;
    rom[1289] = 16'b0011011110010111;
    rom[1290] = 16'b0011011110011001;
    rom[1291] = 16'b0011011110011010;
    rom[1292] = 16'b0011011110011011;
    rom[1293] = 16'b0011011110011101;
    rom[1294] = 16'b0011011110011110;
    rom[1295] = 16'b0011011110100000;
    rom[1296] = 16'b0011011110100001;
    rom[1297] = 16'b0011011110100010;
    rom[1298] = 16'b0011011110100100;
    rom[1299] = 16'b0011011110100101;
    rom[1300] = 16'b0011011110100110;
    rom[1301] = 16'b0011011110101000;
    rom[1302] = 16'b0011011110101001;
    rom[1303] = 16'b0011011110101011;
    rom[1304] = 16'b0011011110101100;
    rom[1305] = 16'b0011011110101101;
    rom[1306] = 16'b0011011110101111;
    rom[1307] = 16'b0011011110110000;
    rom[1308] = 16'b0011011110110010;
    rom[1309] = 16'b0011011110110011;
    rom[1310] = 16'b0011011110110100;
    rom[1311] = 16'b0011011110110110;
    rom[1312] = 16'b0011011110110111;
    rom[1313] = 16'b0011011110111000;
    rom[1314] = 16'b0011011110111010;
    rom[1315] = 16'b0011011110111011;
    rom[1316] = 16'b0011011110111101;
    rom[1317] = 16'b0011011110111110;
    rom[1318] = 16'b0011011110111111;
    rom[1319] = 16'b0011011111000001;
    rom[1320] = 16'b0011011111000010;
    rom[1321] = 16'b0011011111000011;
    rom[1322] = 16'b0011011111000101;
    rom[1323] = 16'b0011011111000110;
    rom[1324] = 16'b0011011111001000;
    rom[1325] = 16'b0011011111001001;
    rom[1326] = 16'b0011011111001010;
    rom[1327] = 16'b0011011111001100;
    rom[1328] = 16'b0011011111001101;
    rom[1329] = 16'b0011011111001110;
    rom[1330] = 16'b0011011111010000;
    rom[1331] = 16'b0011011111010001;
    rom[1332] = 16'b0011011111010010;
    rom[1333] = 16'b0011011111010100;
    rom[1334] = 16'b0011011111010101;
    rom[1335] = 16'b0011011111010111;
    rom[1336] = 16'b0011011111011000;
    rom[1337] = 16'b0011011111011001;
    rom[1338] = 16'b0011011111011011;
    rom[1339] = 16'b0011011111011100;
    rom[1340] = 16'b0011011111011101;
    rom[1341] = 16'b0011011111011111;
    rom[1342] = 16'b0011011111100000;
    rom[1343] = 16'b0011011111100010;
    rom[1344] = 16'b0011011111100011;
    rom[1345] = 16'b0011011111100100;
    rom[1346] = 16'b0011011111100110;
    rom[1347] = 16'b0011011111100111;
    rom[1348] = 16'b0011011111101000;
    rom[1349] = 16'b0011011111101010;
    rom[1350] = 16'b0011011111101011;
    rom[1351] = 16'b0011011111101100;
    rom[1352] = 16'b0011011111101110;
    rom[1353] = 16'b0011011111101111;
    rom[1354] = 16'b0011011111110001;
    rom[1355] = 16'b0011011111110010;
    rom[1356] = 16'b0011011111110011;
    rom[1357] = 16'b0011011111110101;
    rom[1358] = 16'b0011011111110110;
    rom[1359] = 16'b0011011111110111;
    rom[1360] = 16'b0011011111111001;
    rom[1361] = 16'b0011011111111010;
    rom[1362] = 16'b0011011111111011;
    rom[1363] = 16'b0011011111111101;
    rom[1364] = 16'b0011011111111110;
    rom[1365] = 16'b0011100000000000;
    rom[1366] = 16'b0011100000000000;
    rom[1367] = 16'b0011100000000001;
    rom[1368] = 16'b0011100000000010;
    rom[1369] = 16'b0011100000000010;
    rom[1370] = 16'b0011100000000011;
    rom[1371] = 16'b0011100000000100;
    rom[1372] = 16'b0011100000000101;
    rom[1373] = 16'b0011100000000101;
    rom[1374] = 16'b0011100000000110;
    rom[1375] = 16'b0011100000000111;
    rom[1376] = 16'b0011100000000111;
    rom[1377] = 16'b0011100000001000;
    rom[1378] = 16'b0011100000001001;
    rom[1379] = 16'b0011100000001001;
    rom[1380] = 16'b0011100000001010;
    rom[1381] = 16'b0011100000001011;
    rom[1382] = 16'b0011100000001011;
    rom[1383] = 16'b0011100000001100;
    rom[1384] = 16'b0011100000001101;
    rom[1385] = 16'b0011100000001101;
    rom[1386] = 16'b0011100000001110;
    rom[1387] = 16'b0011100000001111;
    rom[1388] = 16'b0011100000001111;
    rom[1389] = 16'b0011100000010000;
    rom[1390] = 16'b0011100000010001;
    rom[1391] = 16'b0011100000010001;
    rom[1392] = 16'b0011100000010010;
    rom[1393] = 16'b0011100000010011;
    rom[1394] = 16'b0011100000010011;
    rom[1395] = 16'b0011100000010100;
    rom[1396] = 16'b0011100000010101;
    rom[1397] = 16'b0011100000010101;
    rom[1398] = 16'b0011100000010110;
    rom[1399] = 16'b0011100000010111;
    rom[1400] = 16'b0011100000010111;
    rom[1401] = 16'b0011100000011000;
    rom[1402] = 16'b0011100000011001;
    rom[1403] = 16'b0011100000011010;
    rom[1404] = 16'b0011100000011010;
    rom[1405] = 16'b0011100000011011;
    rom[1406] = 16'b0011100000011100;
    rom[1407] = 16'b0011100000011100;
    rom[1408] = 16'b0011100000011101;
    rom[1409] = 16'b0011100000011110;
    rom[1410] = 16'b0011100000011110;
    rom[1411] = 16'b0011100000011111;
    rom[1412] = 16'b0011100000100000;
    rom[1413] = 16'b0011100000100000;
    rom[1414] = 16'b0011100000100001;
    rom[1415] = 16'b0011100000100010;
    rom[1416] = 16'b0011100000100010;
    rom[1417] = 16'b0011100000100011;
    rom[1418] = 16'b0011100000100100;
    rom[1419] = 16'b0011100000100100;
    rom[1420] = 16'b0011100000100101;
    rom[1421] = 16'b0011100000100110;
    rom[1422] = 16'b0011100000100110;
    rom[1423] = 16'b0011100000100111;
    rom[1424] = 16'b0011100000101000;
    rom[1425] = 16'b0011100000101000;
    rom[1426] = 16'b0011100000101001;
    rom[1427] = 16'b0011100000101010;
    rom[1428] = 16'b0011100000101010;
    rom[1429] = 16'b0011100000101011;
    rom[1430] = 16'b0011100000101100;
    rom[1431] = 16'b0011100000101100;
    rom[1432] = 16'b0011100000101101;
    rom[1433] = 16'b0011100000101110;
    rom[1434] = 16'b0011100000101110;
    rom[1435] = 16'b0011100000101111;
    rom[1436] = 16'b0011100000110000;
    rom[1437] = 16'b0011100000110000;
    rom[1438] = 16'b0011100000110001;
    rom[1439] = 16'b0011100000110010;
    rom[1440] = 16'b0011100000110010;
    rom[1441] = 16'b0011100000110011;
    rom[1442] = 16'b0011100000110100;
    rom[1443] = 16'b0011100000110100;
    rom[1444] = 16'b0011100000110101;
    rom[1445] = 16'b0011100000110110;
    rom[1446] = 16'b0011100000110110;
    rom[1447] = 16'b0011100000110111;
    rom[1448] = 16'b0011100000111000;
    rom[1449] = 16'b0011100000111000;
    rom[1450] = 16'b0011100000111001;
    rom[1451] = 16'b0011100000111010;
    rom[1452] = 16'b0011100000111010;
    rom[1453] = 16'b0011100000111011;
    rom[1454] = 16'b0011100000111100;
    rom[1455] = 16'b0011100000111100;
    rom[1456] = 16'b0011100000111101;
    rom[1457] = 16'b0011100000111110;
    rom[1458] = 16'b0011100000111110;
    rom[1459] = 16'b0011100000111111;
    rom[1460] = 16'b0011100001000000;
    rom[1461] = 16'b0011100001000000;
    rom[1462] = 16'b0011100001000001;
    rom[1463] = 16'b0011100001000010;
    rom[1464] = 16'b0011100001000010;
    rom[1465] = 16'b0011100001000011;
    rom[1466] = 16'b0011100001000100;
    rom[1467] = 16'b0011100001000100;
    rom[1468] = 16'b0011100001000101;
    rom[1469] = 16'b0011100001000110;
    rom[1470] = 16'b0011100001000110;
    rom[1471] = 16'b0011100001000111;
    rom[1472] = 16'b0011100001001000;
    rom[1473] = 16'b0011100001001000;
    rom[1474] = 16'b0011100001001001;
    rom[1475] = 16'b0011100001001010;
    rom[1476] = 16'b0011100001001010;
    rom[1477] = 16'b0011100001001011;
    rom[1478] = 16'b0011100001001100;
    rom[1479] = 16'b0011100001001100;
    rom[1480] = 16'b0011100001001101;
    rom[1481] = 16'b0011100001001110;
    rom[1482] = 16'b0011100001001110;
    rom[1483] = 16'b0011100001001111;
    rom[1484] = 16'b0011100001010000;
    rom[1485] = 16'b0011100001010000;
    rom[1486] = 16'b0011100001010001;
    rom[1487] = 16'b0011100001010010;
    rom[1488] = 16'b0011100001010010;
    rom[1489] = 16'b0011100001010011;
    rom[1490] = 16'b0011100001010100;
    rom[1491] = 16'b0011100001010100;
    rom[1492] = 16'b0011100001010101;
    rom[1493] = 16'b0011100001010110;
    rom[1494] = 16'b0011100001010110;
    rom[1495] = 16'b0011100001010111;
    rom[1496] = 16'b0011100001011000;
    rom[1497] = 16'b0011100001011000;
    rom[1498] = 16'b0011100001011001;
    rom[1499] = 16'b0011100001011010;
    rom[1500] = 16'b0011100001011010;
    rom[1501] = 16'b0011100001011011;
    rom[1502] = 16'b0011100001011100;
    rom[1503] = 16'b0011100001011100;
    rom[1504] = 16'b0011100001011101;
    rom[1505] = 16'b0011100001011101;
    rom[1506] = 16'b0011100001011110;
    rom[1507] = 16'b0011100001011111;
    rom[1508] = 16'b0011100001011111;
    rom[1509] = 16'b0011100001100000;
    rom[1510] = 16'b0011100001100001;
    rom[1511] = 16'b0011100001100001;
    rom[1512] = 16'b0011100001100010;
    rom[1513] = 16'b0011100001100011;
    rom[1514] = 16'b0011100001100011;
    rom[1515] = 16'b0011100001100100;
    rom[1516] = 16'b0011100001100101;
    rom[1517] = 16'b0011100001100101;
    rom[1518] = 16'b0011100001100110;
    rom[1519] = 16'b0011100001100111;
    rom[1520] = 16'b0011100001100111;
    rom[1521] = 16'b0011100001101000;
    rom[1522] = 16'b0011100001101001;
    rom[1523] = 16'b0011100001101001;
    rom[1524] = 16'b0011100001101010;
    rom[1525] = 16'b0011100001101011;
    rom[1526] = 16'b0011100001101011;
    rom[1527] = 16'b0011100001101100;
    rom[1528] = 16'b0011100001101101;
    rom[1529] = 16'b0011100001101101;
    rom[1530] = 16'b0011100001101110;
    rom[1531] = 16'b0011100001101111;
    rom[1532] = 16'b0011100001101111;
    rom[1533] = 16'b0011100001110000;
    rom[1534] = 16'b0011100001110001;
    rom[1535] = 16'b0011100001110001;
    rom[1536] = 16'b0011100001110010;
    rom[1537] = 16'b0011100001110010;
    rom[1538] = 16'b0011100001110011;
    rom[1539] = 16'b0011100001110100;
    rom[1540] = 16'b0011100001110100;
    rom[1541] = 16'b0011100001110101;
    rom[1542] = 16'b0011100001110110;
    rom[1543] = 16'b0011100001110110;
    rom[1544] = 16'b0011100001110111;
    rom[1545] = 16'b0011100001111000;
    rom[1546] = 16'b0011100001111000;
    rom[1547] = 16'b0011100001111001;
    rom[1548] = 16'b0011100001111010;
    rom[1549] = 16'b0011100001111010;
    rom[1550] = 16'b0011100001111011;
    rom[1551] = 16'b0011100001111100;
    rom[1552] = 16'b0011100001111100;
    rom[1553] = 16'b0011100001111101;
    rom[1554] = 16'b0011100001111110;
    rom[1555] = 16'b0011100001111110;
    rom[1556] = 16'b0011100001111111;
    rom[1557] = 16'b0011100001111111;
    rom[1558] = 16'b0011100010000000;
    rom[1559] = 16'b0011100010000001;
    rom[1560] = 16'b0011100010000001;
    rom[1561] = 16'b0011100010000010;
    rom[1562] = 16'b0011100010000011;
    rom[1563] = 16'b0011100010000011;
    rom[1564] = 16'b0011100010000100;
    rom[1565] = 16'b0011100010000101;
    rom[1566] = 16'b0011100010000101;
    rom[1567] = 16'b0011100010000110;
    rom[1568] = 16'b0011100010000111;
    rom[1569] = 16'b0011100010000111;
    rom[1570] = 16'b0011100010001000;
    rom[1571] = 16'b0011100010001001;
    rom[1572] = 16'b0011100010001001;
    rom[1573] = 16'b0011100010001010;
    rom[1574] = 16'b0011100010001011;
    rom[1575] = 16'b0011100010001011;
    rom[1576] = 16'b0011100010001100;
    rom[1577] = 16'b0011100010001100;
    rom[1578] = 16'b0011100010001101;
    rom[1579] = 16'b0011100010001110;
    rom[1580] = 16'b0011100010001110;
    rom[1581] = 16'b0011100010001111;
    rom[1582] = 16'b0011100010010000;
    rom[1583] = 16'b0011100010010000;
    rom[1584] = 16'b0011100010010001;
    rom[1585] = 16'b0011100010010010;
    rom[1586] = 16'b0011100010010010;
    rom[1587] = 16'b0011100010010011;
    rom[1588] = 16'b0011100010010100;
    rom[1589] = 16'b0011100010010100;
    rom[1590] = 16'b0011100010010101;
    rom[1591] = 16'b0011100010010101;
    rom[1592] = 16'b0011100010010110;
    rom[1593] = 16'b0011100010010111;
    rom[1594] = 16'b0011100010010111;
    rom[1595] = 16'b0011100010011000;
    rom[1596] = 16'b0011100010011001;
    rom[1597] = 16'b0011100010011001;
    rom[1598] = 16'b0011100010011010;
    rom[1599] = 16'b0011100010011011;
    rom[1600] = 16'b0011100010011011;
    rom[1601] = 16'b0011100010011100;
    rom[1602] = 16'b0011100010011101;
    rom[1603] = 16'b0011100010011101;
    rom[1604] = 16'b0011100010011110;
    rom[1605] = 16'b0011100010011110;
    rom[1606] = 16'b0011100010011111;
    rom[1607] = 16'b0011100010100000;
    rom[1608] = 16'b0011100010100000;
    rom[1609] = 16'b0011100010100001;
    rom[1610] = 16'b0011100010100010;
    rom[1611] = 16'b0011100010100010;
    rom[1612] = 16'b0011100010100011;
    rom[1613] = 16'b0011100010100100;
    rom[1614] = 16'b0011100010100100;
    rom[1615] = 16'b0011100010100101;
    rom[1616] = 16'b0011100010100110;
    rom[1617] = 16'b0011100010100110;
    rom[1618] = 16'b0011100010100111;
    rom[1619] = 16'b0011100010100111;
    rom[1620] = 16'b0011100010101000;
    rom[1621] = 16'b0011100010101001;
    rom[1622] = 16'b0011100010101001;
    rom[1623] = 16'b0011100010101010;
    rom[1624] = 16'b0011100010101011;
    rom[1625] = 16'b0011100010101011;
    rom[1626] = 16'b0011100010101100;
    rom[1627] = 16'b0011100010101101;
    rom[1628] = 16'b0011100010101101;
    rom[1629] = 16'b0011100010101110;
    rom[1630] = 16'b0011100010101110;
    rom[1631] = 16'b0011100010101111;
    rom[1632] = 16'b0011100010110000;
    rom[1633] = 16'b0011100010110000;
    rom[1634] = 16'b0011100010110001;
    rom[1635] = 16'b0011100010110010;
    rom[1636] = 16'b0011100010110010;
    rom[1637] = 16'b0011100010110011;
    rom[1638] = 16'b0011100010110100;
    rom[1639] = 16'b0011100010110100;
    rom[1640] = 16'b0011100010110101;
    rom[1641] = 16'b0011100010110101;
    rom[1642] = 16'b0011100010110110;
    rom[1643] = 16'b0011100010110111;
    rom[1644] = 16'b0011100010110111;
    rom[1645] = 16'b0011100010111000;
    rom[1646] = 16'b0011100010111001;
    rom[1647] = 16'b0011100010111001;
    rom[1648] = 16'b0011100010111010;
    rom[1649] = 16'b0011100010111011;
    rom[1650] = 16'b0011100010111011;
    rom[1651] = 16'b0011100010111100;
    rom[1652] = 16'b0011100010111100;
    rom[1653] = 16'b0011100010111101;
    rom[1654] = 16'b0011100010111110;
    rom[1655] = 16'b0011100010111110;
    rom[1656] = 16'b0011100010111111;
    rom[1657] = 16'b0011100011000000;
    rom[1658] = 16'b0011100011000000;
    rom[1659] = 16'b0011100011000001;
    rom[1660] = 16'b0011100011000001;
    rom[1661] = 16'b0011100011000010;
    rom[1662] = 16'b0011100011000011;
    rom[1663] = 16'b0011100011000011;
    rom[1664] = 16'b0011100011000100;
    rom[1665] = 16'b0011100011000101;
    rom[1666] = 16'b0011100011000101;
    rom[1667] = 16'b0011100011000110;
    rom[1668] = 16'b0011100011000111;
    rom[1669] = 16'b0011100011000111;
    rom[1670] = 16'b0011100011001000;
    rom[1671] = 16'b0011100011001000;
    rom[1672] = 16'b0011100011001001;
    rom[1673] = 16'b0011100011001010;
    rom[1674] = 16'b0011100011001010;
    rom[1675] = 16'b0011100011001011;
    rom[1676] = 16'b0011100011001100;
    rom[1677] = 16'b0011100011001100;
    rom[1678] = 16'b0011100011001101;
    rom[1679] = 16'b0011100011001101;
    rom[1680] = 16'b0011100011001110;
    rom[1681] = 16'b0011100011001111;
    rom[1682] = 16'b0011100011001111;
    rom[1683] = 16'b0011100011010000;
    rom[1684] = 16'b0011100011010001;
    rom[1685] = 16'b0011100011010001;
    rom[1686] = 16'b0011100011010010;
    rom[1687] = 16'b0011100011010010;
    rom[1688] = 16'b0011100011010011;
    rom[1689] = 16'b0011100011010100;
    rom[1690] = 16'b0011100011010100;
    rom[1691] = 16'b0011100011010101;
    rom[1692] = 16'b0011100011010110;
    rom[1693] = 16'b0011100011010110;
    rom[1694] = 16'b0011100011010111;
    rom[1695] = 16'b0011100011010111;
    rom[1696] = 16'b0011100011011000;
    rom[1697] = 16'b0011100011011001;
    rom[1698] = 16'b0011100011011001;
    rom[1699] = 16'b0011100011011010;
    rom[1700] = 16'b0011100011011011;
    rom[1701] = 16'b0011100011011011;
    rom[1702] = 16'b0011100011011100;
    rom[1703] = 16'b0011100011011100;
    rom[1704] = 16'b0011100011011101;
    rom[1705] = 16'b0011100011011110;
    rom[1706] = 16'b0011100011011110;
    rom[1707] = 16'b0011100011011111;
    rom[1708] = 16'b0011100011100000;
    rom[1709] = 16'b0011100011100000;
    rom[1710] = 16'b0011100011100001;
    rom[1711] = 16'b0011100011100001;
    rom[1712] = 16'b0011100011100010;
    rom[1713] = 16'b0011100011100011;
    rom[1714] = 16'b0011100011100011;
    rom[1715] = 16'b0011100011100100;
    rom[1716] = 16'b0011100011100101;
    rom[1717] = 16'b0011100011100101;
    rom[1718] = 16'b0011100011100110;
    rom[1719] = 16'b0011100011100110;
    rom[1720] = 16'b0011100011100111;
    rom[1721] = 16'b0011100011101000;
    rom[1722] = 16'b0011100011101000;
    rom[1723] = 16'b0011100011101001;
    rom[1724] = 16'b0011100011101010;
    rom[1725] = 16'b0011100011101010;
    rom[1726] = 16'b0011100011101011;
    rom[1727] = 16'b0011100011101011;
    rom[1728] = 16'b0011100011101100;
    rom[1729] = 16'b0011100011101101;
    rom[1730] = 16'b0011100011101101;
    rom[1731] = 16'b0011100011101110;
    rom[1732] = 16'b0011100011101110;
    rom[1733] = 16'b0011100011101111;
    rom[1734] = 16'b0011100011110000;
    rom[1735] = 16'b0011100011110000;
    rom[1736] = 16'b0011100011110001;
    rom[1737] = 16'b0011100011110010;
    rom[1738] = 16'b0011100011110010;
    rom[1739] = 16'b0011100011110011;
    rom[1740] = 16'b0011100011110011;
    rom[1741] = 16'b0011100011110100;
    rom[1742] = 16'b0011100011110101;
    rom[1743] = 16'b0011100011110101;
    rom[1744] = 16'b0011100011110110;
    rom[1745] = 16'b0011100011110110;
    rom[1746] = 16'b0011100011110111;
    rom[1747] = 16'b0011100011111000;
    rom[1748] = 16'b0011100011111000;
    rom[1749] = 16'b0011100011111001;
    rom[1750] = 16'b0011100011111010;
    rom[1751] = 16'b0011100011111010;
    rom[1752] = 16'b0011100011111011;
    rom[1753] = 16'b0011100011111011;
    rom[1754] = 16'b0011100011111100;
    rom[1755] = 16'b0011100011111101;
    rom[1756] = 16'b0011100011111101;
    rom[1757] = 16'b0011100011111110;
    rom[1758] = 16'b0011100011111110;
    rom[1759] = 16'b0011100011111111;
    rom[1760] = 16'b0011100100000000;
    rom[1761] = 16'b0011100100000000;
    rom[1762] = 16'b0011100100000001;
    rom[1763] = 16'b0011100100000010;
    rom[1764] = 16'b0011100100000010;
    rom[1765] = 16'b0011100100000011;
    rom[1766] = 16'b0011100100000011;
    rom[1767] = 16'b0011100100000100;
    rom[1768] = 16'b0011100100000101;
    rom[1769] = 16'b0011100100000101;
    rom[1770] = 16'b0011100100000110;
    rom[1771] = 16'b0011100100000110;
    rom[1772] = 16'b0011100100000111;
    rom[1773] = 16'b0011100100001000;
    rom[1774] = 16'b0011100100001000;
    rom[1775] = 16'b0011100100001001;
    rom[1776] = 16'b0011100100001001;
    rom[1777] = 16'b0011100100001010;
    rom[1778] = 16'b0011100100001011;
    rom[1779] = 16'b0011100100001011;
    rom[1780] = 16'b0011100100001100;
    rom[1781] = 16'b0011100100001101;
    rom[1782] = 16'b0011100100001101;
    rom[1783] = 16'b0011100100001110;
    rom[1784] = 16'b0011100100001110;
    rom[1785] = 16'b0011100100001111;
    rom[1786] = 16'b0011100100010000;
    rom[1787] = 16'b0011100100010000;
    rom[1788] = 16'b0011100100010001;
    rom[1789] = 16'b0011100100010001;
    rom[1790] = 16'b0011100100010010;
    rom[1791] = 16'b0011100100010011;
    rom[1792] = 16'b0011100100010011;
    rom[1793] = 16'b0011100100010100;
    rom[1794] = 16'b0011100100010100;
    rom[1795] = 16'b0011100100010101;
    rom[1796] = 16'b0011100100010110;
    rom[1797] = 16'b0011100100010110;
    rom[1798] = 16'b0011100100010111;
    rom[1799] = 16'b0011100100010111;
    rom[1800] = 16'b0011100100011000;
    rom[1801] = 16'b0011100100011001;
    rom[1802] = 16'b0011100100011001;
    rom[1803] = 16'b0011100100011010;
    rom[1804] = 16'b0011100100011011;
    rom[1805] = 16'b0011100100011011;
    rom[1806] = 16'b0011100100011100;
    rom[1807] = 16'b0011100100011100;
    rom[1808] = 16'b0011100100011101;
    rom[1809] = 16'b0011100100011110;
    rom[1810] = 16'b0011100100011110;
    rom[1811] = 16'b0011100100011111;
    rom[1812] = 16'b0011100100011111;
    rom[1813] = 16'b0011100100100000;
    rom[1814] = 16'b0011100100100001;
    rom[1815] = 16'b0011100100100001;
    rom[1816] = 16'b0011100100100010;
    rom[1817] = 16'b0011100100100010;
    rom[1818] = 16'b0011100100100011;
    rom[1819] = 16'b0011100100100100;
    rom[1820] = 16'b0011100100100100;
    rom[1821] = 16'b0011100100100101;
    rom[1822] = 16'b0011100100100101;
    rom[1823] = 16'b0011100100100110;
    rom[1824] = 16'b0011100100100111;
    rom[1825] = 16'b0011100100100111;
    rom[1826] = 16'b0011100100101000;
    rom[1827] = 16'b0011100100101000;
    rom[1828] = 16'b0011100100101001;
    rom[1829] = 16'b0011100100101010;
    rom[1830] = 16'b0011100100101010;
    rom[1831] = 16'b0011100100101011;
    rom[1832] = 16'b0011100100101011;
    rom[1833] = 16'b0011100100101100;
    rom[1834] = 16'b0011100100101101;
    rom[1835] = 16'b0011100100101101;
    rom[1836] = 16'b0011100100101110;
    rom[1837] = 16'b0011100100101110;
    rom[1838] = 16'b0011100100101111;
    rom[1839] = 16'b0011100100110000;
    rom[1840] = 16'b0011100100110000;
    rom[1841] = 16'b0011100100110001;
    rom[1842] = 16'b0011100100110001;
    rom[1843] = 16'b0011100100110010;
    rom[1844] = 16'b0011100100110011;
    rom[1845] = 16'b0011100100110011;
    rom[1846] = 16'b0011100100110100;
    rom[1847] = 16'b0011100100110100;
    rom[1848] = 16'b0011100100110101;
    rom[1849] = 16'b0011100100110110;
    rom[1850] = 16'b0011100100110110;
    rom[1851] = 16'b0011100100110111;
    rom[1852] = 16'b0011100100110111;
    rom[1853] = 16'b0011100100111000;
    rom[1854] = 16'b0011100100111001;
    rom[1855] = 16'b0011100100111001;
    rom[1856] = 16'b0011100100111010;
    rom[1857] = 16'b0011100100111010;
    rom[1858] = 16'b0011100100111011;
    rom[1859] = 16'b0011100100111011;
    rom[1860] = 16'b0011100100111100;
    rom[1861] = 16'b0011100100111101;
    rom[1862] = 16'b0011100100111101;
    rom[1863] = 16'b0011100100111110;
    rom[1864] = 16'b0011100100111110;
    rom[1865] = 16'b0011100100111111;
    rom[1866] = 16'b0011100101000000;
    rom[1867] = 16'b0011100101000000;
    rom[1868] = 16'b0011100101000001;
    rom[1869] = 16'b0011100101000001;
    rom[1870] = 16'b0011100101000010;
    rom[1871] = 16'b0011100101000011;
    rom[1872] = 16'b0011100101000011;
    rom[1873] = 16'b0011100101000100;
    rom[1874] = 16'b0011100101000100;
    rom[1875] = 16'b0011100101000101;
    rom[1876] = 16'b0011100101000110;
    rom[1877] = 16'b0011100101000110;
    rom[1878] = 16'b0011100101000111;
    rom[1879] = 16'b0011100101000111;
    rom[1880] = 16'b0011100101001000;
    rom[1881] = 16'b0011100101001001;
    rom[1882] = 16'b0011100101001001;
    rom[1883] = 16'b0011100101001010;
    rom[1884] = 16'b0011100101001010;
    rom[1885] = 16'b0011100101001011;
    rom[1886] = 16'b0011100101001011;
    rom[1887] = 16'b0011100101001100;
    rom[1888] = 16'b0011100101001101;
    rom[1889] = 16'b0011100101001101;
    rom[1890] = 16'b0011100101001110;
    rom[1891] = 16'b0011100101001110;
    rom[1892] = 16'b0011100101001111;
    rom[1893] = 16'b0011100101010000;
    rom[1894] = 16'b0011100101010000;
    rom[1895] = 16'b0011100101010001;
    rom[1896] = 16'b0011100101010001;
    rom[1897] = 16'b0011100101010010;
    rom[1898] = 16'b0011100101010011;
    rom[1899] = 16'b0011100101010011;
    rom[1900] = 16'b0011100101010100;
    rom[1901] = 16'b0011100101010100;
    rom[1902] = 16'b0011100101010101;
    rom[1903] = 16'b0011100101010101;
    rom[1904] = 16'b0011100101010110;
    rom[1905] = 16'b0011100101010111;
    rom[1906] = 16'b0011100101010111;
    rom[1907] = 16'b0011100101011000;
    rom[1908] = 16'b0011100101011000;
    rom[1909] = 16'b0011100101011001;
    rom[1910] = 16'b0011100101011010;
    rom[1911] = 16'b0011100101011010;
    rom[1912] = 16'b0011100101011011;
    rom[1913] = 16'b0011100101011011;
    rom[1914] = 16'b0011100101011100;
    rom[1915] = 16'b0011100101011100;
    rom[1916] = 16'b0011100101011101;
    rom[1917] = 16'b0011100101011110;
    rom[1918] = 16'b0011100101011110;
    rom[1919] = 16'b0011100101011111;
    rom[1920] = 16'b0011100101011111;
    rom[1921] = 16'b0011100101100000;
    rom[1922] = 16'b0011100101100001;
    rom[1923] = 16'b0011100101100001;
    rom[1924] = 16'b0011100101100010;
    rom[1925] = 16'b0011100101100010;
    rom[1926] = 16'b0011100101100011;
    rom[1927] = 16'b0011100101100011;
    rom[1928] = 16'b0011100101100100;
    rom[1929] = 16'b0011100101100101;
    rom[1930] = 16'b0011100101100101;
    rom[1931] = 16'b0011100101100110;
    rom[1932] = 16'b0011100101100110;
    rom[1933] = 16'b0011100101100111;
    rom[1934] = 16'b0011100101100111;
    rom[1935] = 16'b0011100101101000;
    rom[1936] = 16'b0011100101101001;
    rom[1937] = 16'b0011100101101001;
    rom[1938] = 16'b0011100101101010;
    rom[1939] = 16'b0011100101101010;
    rom[1940] = 16'b0011100101101011;
    rom[1941] = 16'b0011100101101100;
    rom[1942] = 16'b0011100101101100;
    rom[1943] = 16'b0011100101101101;
    rom[1944] = 16'b0011100101101101;
    rom[1945] = 16'b0011100101101110;
    rom[1946] = 16'b0011100101101110;
    rom[1947] = 16'b0011100101101111;
    rom[1948] = 16'b0011100101110000;
    rom[1949] = 16'b0011100101110000;
    rom[1950] = 16'b0011100101110001;
    rom[1951] = 16'b0011100101110001;
    rom[1952] = 16'b0011100101110010;
    rom[1953] = 16'b0011100101110010;
    rom[1954] = 16'b0011100101110011;
    rom[1955] = 16'b0011100101110100;
    rom[1956] = 16'b0011100101110100;
    rom[1957] = 16'b0011100101110101;
    rom[1958] = 16'b0011100101110101;
    rom[1959] = 16'b0011100101110110;
    rom[1960] = 16'b0011100101110110;
    rom[1961] = 16'b0011100101110111;
    rom[1962] = 16'b0011100101111000;
    rom[1963] = 16'b0011100101111000;
    rom[1964] = 16'b0011100101111001;
    rom[1965] = 16'b0011100101111001;
    rom[1966] = 16'b0011100101111010;
    rom[1967] = 16'b0011100101111010;
    rom[1968] = 16'b0011100101111011;
    rom[1969] = 16'b0011100101111100;
    rom[1970] = 16'b0011100101111100;
    rom[1971] = 16'b0011100101111101;
    rom[1972] = 16'b0011100101111101;
    rom[1973] = 16'b0011100101111110;
    rom[1974] = 16'b0011100101111110;
    rom[1975] = 16'b0011100101111111;
    rom[1976] = 16'b0011100110000000;
    rom[1977] = 16'b0011100110000000;
    rom[1978] = 16'b0011100110000001;
    rom[1979] = 16'b0011100110000001;
    rom[1980] = 16'b0011100110000010;
    rom[1981] = 16'b0011100110000010;
    rom[1982] = 16'b0011100110000011;
    rom[1983] = 16'b0011100110000100;
    rom[1984] = 16'b0011100110000100;
    rom[1985] = 16'b0011100110000101;
    rom[1986] = 16'b0011100110000101;
    rom[1987] = 16'b0011100110000110;
    rom[1988] = 16'b0011100110000110;
    rom[1989] = 16'b0011100110000111;
    rom[1990] = 16'b0011100110001000;
    rom[1991] = 16'b0011100110001000;
    rom[1992] = 16'b0011100110001001;
    rom[1993] = 16'b0011100110001001;
    rom[1994] = 16'b0011100110001010;
    rom[1995] = 16'b0011100110001010;
    rom[1996] = 16'b0011100110001011;
    rom[1997] = 16'b0011100110001100;
    rom[1998] = 16'b0011100110001100;
    rom[1999] = 16'b0011100110001101;
    rom[2000] = 16'b0011100110001101;
    rom[2001] = 16'b0011100110001110;
    rom[2002] = 16'b0011100110001110;
    rom[2003] = 16'b0011100110001111;
    rom[2004] = 16'b0011100110010000;
    rom[2005] = 16'b0011100110010000;
    rom[2006] = 16'b0011100110010001;
    rom[2007] = 16'b0011100110010001;
    rom[2008] = 16'b0011100110010010;
    rom[2009] = 16'b0011100110010010;
    rom[2010] = 16'b0011100110010011;
    rom[2011] = 16'b0011100110010011;
    rom[2012] = 16'b0011100110010100;
    rom[2013] = 16'b0011100110010101;
    rom[2014] = 16'b0011100110010101;
    rom[2015] = 16'b0011100110010110;
    rom[2016] = 16'b0011100110010110;
    rom[2017] = 16'b0011100110010111;
    rom[2018] = 16'b0011100110010111;
    rom[2019] = 16'b0011100110011000;
    rom[2020] = 16'b0011100110011001;
    rom[2021] = 16'b0011100110011001;
    rom[2022] = 16'b0011100110011010;
    rom[2023] = 16'b0011100110011010;
    rom[2024] = 16'b0011100110011011;
    rom[2025] = 16'b0011100110011011;
    rom[2026] = 16'b0011100110011100;
    rom[2027] = 16'b0011100110011100;
    rom[2028] = 16'b0011100110011101;
    rom[2029] = 16'b0011100110011110;
    rom[2030] = 16'b0011100110011110;
    rom[2031] = 16'b0011100110011111;
    rom[2032] = 16'b0011100110011111;
    rom[2033] = 16'b0011100110100000;
    rom[2034] = 16'b0011100110100000;
    rom[2035] = 16'b0011100110100001;
    rom[2036] = 16'b0011100110100001;
    rom[2037] = 16'b0011100110100010;
    rom[2038] = 16'b0011100110100011;
    rom[2039] = 16'b0011100110100011;
    rom[2040] = 16'b0011100110100100;
    rom[2041] = 16'b0011100110100100;
    rom[2042] = 16'b0011100110100101;
    rom[2043] = 16'b0011100110100101;
    rom[2044] = 16'b0011100110100110;
    rom[2045] = 16'b0011100110100110;
    rom[2046] = 16'b0011100110100111;
    rom[2047] = 16'b0011100110101000;
    rom[2048] = 16'b0011100110101000;
    rom[2049] = 16'b0011100110101001;
    rom[2050] = 16'b0011100110101001;
    rom[2051] = 16'b0011100110101010;
    rom[2052] = 16'b0011100110101010;
    rom[2053] = 16'b0011100110101011;
    rom[2054] = 16'b0011100110101011;
    rom[2055] = 16'b0011100110101100;
    rom[2056] = 16'b0011100110101101;
    rom[2057] = 16'b0011100110101101;
    rom[2058] = 16'b0011100110101110;
    rom[2059] = 16'b0011100110101110;
    rom[2060] = 16'b0011100110101111;
    rom[2061] = 16'b0011100110101111;
    rom[2062] = 16'b0011100110110000;
    rom[2063] = 16'b0011100110110000;
    rom[2064] = 16'b0011100110110001;
    rom[2065] = 16'b0011100110110010;
    rom[2066] = 16'b0011100110110010;
    rom[2067] = 16'b0011100110110011;
    rom[2068] = 16'b0011100110110011;
    rom[2069] = 16'b0011100110110100;
    rom[2070] = 16'b0011100110110100;
    rom[2071] = 16'b0011100110110101;
    rom[2072] = 16'b0011100110110101;
    rom[2073] = 16'b0011100110110110;
    rom[2074] = 16'b0011100110110111;
    rom[2075] = 16'b0011100110110111;
    rom[2076] = 16'b0011100110111000;
    rom[2077] = 16'b0011100110111000;
    rom[2078] = 16'b0011100110111001;
    rom[2079] = 16'b0011100110111001;
    rom[2080] = 16'b0011100110111010;
    rom[2081] = 16'b0011100110111010;
    rom[2082] = 16'b0011100110111011;
    rom[2083] = 16'b0011100110111011;
    rom[2084] = 16'b0011100110111100;
    rom[2085] = 16'b0011100110111101;
    rom[2086] = 16'b0011100110111101;
    rom[2087] = 16'b0011100110111110;
    rom[2088] = 16'b0011100110111110;
    rom[2089] = 16'b0011100110111111;
    rom[2090] = 16'b0011100110111111;
    rom[2091] = 16'b0011100111000000;
    rom[2092] = 16'b0011100111000000;
    rom[2093] = 16'b0011100111000001;
    rom[2094] = 16'b0011100111000001;
    rom[2095] = 16'b0011100111000010;
    rom[2096] = 16'b0011100111000011;
    rom[2097] = 16'b0011100111000011;
    rom[2098] = 16'b0011100111000100;
    rom[2099] = 16'b0011100111000100;
    rom[2100] = 16'b0011100111000101;
    rom[2101] = 16'b0011100111000101;
    rom[2102] = 16'b0011100111000110;
    rom[2103] = 16'b0011100111000110;
    rom[2104] = 16'b0011100111000111;
    rom[2105] = 16'b0011100111000111;
    rom[2106] = 16'b0011100111001000;
    rom[2107] = 16'b0011100111001001;
    rom[2108] = 16'b0011100111001001;
    rom[2109] = 16'b0011100111001010;
    rom[2110] = 16'b0011100111001010;
    rom[2111] = 16'b0011100111001011;
    rom[2112] = 16'b0011100111001011;
    rom[2113] = 16'b0011100111001100;
    rom[2114] = 16'b0011100111001100;
    rom[2115] = 16'b0011100111001101;
    rom[2116] = 16'b0011100111001101;
    rom[2117] = 16'b0011100111001110;
    rom[2118] = 16'b0011100111001111;
    rom[2119] = 16'b0011100111001111;
    rom[2120] = 16'b0011100111010000;
    rom[2121] = 16'b0011100111010000;
    rom[2122] = 16'b0011100111010001;
    rom[2123] = 16'b0011100111010001;
    rom[2124] = 16'b0011100111010010;
    rom[2125] = 16'b0011100111010010;
    rom[2126] = 16'b0011100111010011;
    rom[2127] = 16'b0011100111010011;
    rom[2128] = 16'b0011100111010100;
    rom[2129] = 16'b0011100111010100;
    rom[2130] = 16'b0011100111010101;
    rom[2131] = 16'b0011100111010110;
    rom[2132] = 16'b0011100111010110;
    rom[2133] = 16'b0011100111010111;
    rom[2134] = 16'b0011100111010111;
    rom[2135] = 16'b0011100111011000;
    rom[2136] = 16'b0011100111011000;
    rom[2137] = 16'b0011100111011001;
    rom[2138] = 16'b0011100111011001;
    rom[2139] = 16'b0011100111011010;
    rom[2140] = 16'b0011100111011010;
    rom[2141] = 16'b0011100111011011;
    rom[2142] = 16'b0011100111011011;
    rom[2143] = 16'b0011100111011100;
    rom[2144] = 16'b0011100111011100;
    rom[2145] = 16'b0011100111011101;
    rom[2146] = 16'b0011100111011110;
    rom[2147] = 16'b0011100111011110;
    rom[2148] = 16'b0011100111011111;
    rom[2149] = 16'b0011100111011111;
    rom[2150] = 16'b0011100111100000;
    rom[2151] = 16'b0011100111100000;
    rom[2152] = 16'b0011100111100001;
    rom[2153] = 16'b0011100111100001;
    rom[2154] = 16'b0011100111100010;
    rom[2155] = 16'b0011100111100010;
    rom[2156] = 16'b0011100111100011;
    rom[2157] = 16'b0011100111100011;
    rom[2158] = 16'b0011100111100100;
    rom[2159] = 16'b0011100111100100;
    rom[2160] = 16'b0011100111100101;
    rom[2161] = 16'b0011100111100110;
    rom[2162] = 16'b0011100111100110;
    rom[2163] = 16'b0011100111100111;
    rom[2164] = 16'b0011100111100111;
    rom[2165] = 16'b0011100111101000;
    rom[2166] = 16'b0011100111101000;
    rom[2167] = 16'b0011100111101001;
    rom[2168] = 16'b0011100111101001;
    rom[2169] = 16'b0011100111101010;
    rom[2170] = 16'b0011100111101010;
    rom[2171] = 16'b0011100111101011;
    rom[2172] = 16'b0011100111101011;
    rom[2173] = 16'b0011100111101100;
    rom[2174] = 16'b0011100111101100;
    rom[2175] = 16'b0011100111101101;
    rom[2176] = 16'b0011100111101101;
    rom[2177] = 16'b0011100111101110;
    rom[2178] = 16'b0011100111101111;
    rom[2179] = 16'b0011100111101111;
    rom[2180] = 16'b0011100111110000;
    rom[2181] = 16'b0011100111110000;
    rom[2182] = 16'b0011100111110001;
    rom[2183] = 16'b0011100111110001;
    rom[2184] = 16'b0011100111110010;
    rom[2185] = 16'b0011100111110010;
    rom[2186] = 16'b0011100111110011;
    rom[2187] = 16'b0011100111110011;
    rom[2188] = 16'b0011100111110100;
    rom[2189] = 16'b0011100111110100;
    rom[2190] = 16'b0011100111110101;
    rom[2191] = 16'b0011100111110101;
    rom[2192] = 16'b0011100111110110;
    rom[2193] = 16'b0011100111110110;
    rom[2194] = 16'b0011100111110111;
    rom[2195] = 16'b0011100111110111;
    rom[2196] = 16'b0011100111111000;
    rom[2197] = 16'b0011100111111000;
    rom[2198] = 16'b0011100111111001;
    rom[2199] = 16'b0011100111111010;
    rom[2200] = 16'b0011100111111010;
    rom[2201] = 16'b0011100111111011;
    rom[2202] = 16'b0011100111111011;
    rom[2203] = 16'b0011100111111100;
    rom[2204] = 16'b0011100111111100;
    rom[2205] = 16'b0011100111111101;
    rom[2206] = 16'b0011100111111101;
    rom[2207] = 16'b0011100111111110;
    rom[2208] = 16'b0011100111111110;
    rom[2209] = 16'b0011100111111111;
    rom[2210] = 16'b0011100111111111;
    rom[2211] = 16'b0011101000000000;
    rom[2212] = 16'b0011101000000000;
    rom[2213] = 16'b0011101000000001;
    rom[2214] = 16'b0011101000000001;
    rom[2215] = 16'b0011101000000010;
    rom[2216] = 16'b0011101000000010;
    rom[2217] = 16'b0011101000000011;
    rom[2218] = 16'b0011101000000011;
    rom[2219] = 16'b0011101000000100;
    rom[2220] = 16'b0011101000000100;
    rom[2221] = 16'b0011101000000101;
    rom[2222] = 16'b0011101000000101;
    rom[2223] = 16'b0011101000000110;
    rom[2224] = 16'b0011101000000111;
    rom[2225] = 16'b0011101000000111;
    rom[2226] = 16'b0011101000001000;
    rom[2227] = 16'b0011101000001000;
    rom[2228] = 16'b0011101000001001;
    rom[2229] = 16'b0011101000001001;
    rom[2230] = 16'b0011101000001010;
    rom[2231] = 16'b0011101000001010;
    rom[2232] = 16'b0011101000001011;
    rom[2233] = 16'b0011101000001011;
    rom[2234] = 16'b0011101000001100;
    rom[2235] = 16'b0011101000001100;
    rom[2236] = 16'b0011101000001101;
    rom[2237] = 16'b0011101000001101;
    rom[2238] = 16'b0011101000001110;
    rom[2239] = 16'b0011101000001110;
    rom[2240] = 16'b0011101000001111;
    rom[2241] = 16'b0011101000001111;
    rom[2242] = 16'b0011101000010000;
    rom[2243] = 16'b0011101000010000;
    rom[2244] = 16'b0011101000010001;
    rom[2245] = 16'b0011101000010001;
    rom[2246] = 16'b0011101000010010;
    rom[2247] = 16'b0011101000010010;
    rom[2248] = 16'b0011101000010011;
    rom[2249] = 16'b0011101000010011;
    rom[2250] = 16'b0011101000010100;
    rom[2251] = 16'b0011101000010100;
    rom[2252] = 16'b0011101000010101;
    rom[2253] = 16'b0011101000010101;
    rom[2254] = 16'b0011101000010110;
    rom[2255] = 16'b0011101000010110;
    rom[2256] = 16'b0011101000010111;
    rom[2257] = 16'b0011101000010111;
    rom[2258] = 16'b0011101000011000;
    rom[2259] = 16'b0011101000011000;
    rom[2260] = 16'b0011101000011001;
    rom[2261] = 16'b0011101000011001;
    rom[2262] = 16'b0011101000011010;
    rom[2263] = 16'b0011101000011011;
    rom[2264] = 16'b0011101000011011;
    rom[2265] = 16'b0011101000011100;
    rom[2266] = 16'b0011101000011100;
    rom[2267] = 16'b0011101000011101;
    rom[2268] = 16'b0011101000011101;
    rom[2269] = 16'b0011101000011110;
    rom[2270] = 16'b0011101000011110;
    rom[2271] = 16'b0011101000011111;
    rom[2272] = 16'b0011101000011111;
    rom[2273] = 16'b0011101000100000;
    rom[2274] = 16'b0011101000100000;
    rom[2275] = 16'b0011101000100001;
    rom[2276] = 16'b0011101000100001;
    rom[2277] = 16'b0011101000100010;
    rom[2278] = 16'b0011101000100010;
    rom[2279] = 16'b0011101000100011;
    rom[2280] = 16'b0011101000100011;
    rom[2281] = 16'b0011101000100100;
    rom[2282] = 16'b0011101000100100;
    rom[2283] = 16'b0011101000100101;
    rom[2284] = 16'b0011101000100101;
    rom[2285] = 16'b0011101000100110;
    rom[2286] = 16'b0011101000100110;
    rom[2287] = 16'b0011101000100111;
    rom[2288] = 16'b0011101000100111;
    rom[2289] = 16'b0011101000101000;
    rom[2290] = 16'b0011101000101000;
    rom[2291] = 16'b0011101000101001;
    rom[2292] = 16'b0011101000101001;
    rom[2293] = 16'b0011101000101010;
    rom[2294] = 16'b0011101000101010;
    rom[2295] = 16'b0011101000101011;
    rom[2296] = 16'b0011101000101011;
    rom[2297] = 16'b0011101000101100;
    rom[2298] = 16'b0011101000101100;
    rom[2299] = 16'b0011101000101101;
    rom[2300] = 16'b0011101000101101;
    rom[2301] = 16'b0011101000101110;
    rom[2302] = 16'b0011101000101110;
    rom[2303] = 16'b0011101000101111;
    rom[2304] = 16'b0011101000101111;
    rom[2305] = 16'b0011101000110000;
    rom[2306] = 16'b0011101000110000;
    rom[2307] = 16'b0011101000110001;
    rom[2308] = 16'b0011101000110001;
    rom[2309] = 16'b0011101000110010;
    rom[2310] = 16'b0011101000110010;
    rom[2311] = 16'b0011101000110011;
    rom[2312] = 16'b0011101000110011;
    rom[2313] = 16'b0011101000110100;
    rom[2314] = 16'b0011101000110100;
    rom[2315] = 16'b0011101000110101;
    rom[2316] = 16'b0011101000110101;
    rom[2317] = 16'b0011101000110110;
    rom[2318] = 16'b0011101000110110;
    rom[2319] = 16'b0011101000110111;
    rom[2320] = 16'b0011101000110111;
    rom[2321] = 16'b0011101000111000;
    rom[2322] = 16'b0011101000111000;
    rom[2323] = 16'b0011101000111001;
    rom[2324] = 16'b0011101000111001;
    rom[2325] = 16'b0011101000111010;
    rom[2326] = 16'b0011101000111010;
    rom[2327] = 16'b0011101000111011;
    rom[2328] = 16'b0011101000111011;
    rom[2329] = 16'b0011101000111100;
    rom[2330] = 16'b0011101000111100;
    rom[2331] = 16'b0011101000111100;
    rom[2332] = 16'b0011101000111101;
    rom[2333] = 16'b0011101000111101;
    rom[2334] = 16'b0011101000111110;
    rom[2335] = 16'b0011101000111110;
    rom[2336] = 16'b0011101000111111;
    rom[2337] = 16'b0011101000111111;
    rom[2338] = 16'b0011101001000000;
    rom[2339] = 16'b0011101001000000;
    rom[2340] = 16'b0011101001000001;
    rom[2341] = 16'b0011101001000001;
    rom[2342] = 16'b0011101001000010;
    rom[2343] = 16'b0011101001000010;
    rom[2344] = 16'b0011101001000011;
    rom[2345] = 16'b0011101001000011;
    rom[2346] = 16'b0011101001000100;
    rom[2347] = 16'b0011101001000100;
    rom[2348] = 16'b0011101001000101;
    rom[2349] = 16'b0011101001000101;
    rom[2350] = 16'b0011101001000110;
    rom[2351] = 16'b0011101001000110;
    rom[2352] = 16'b0011101001000111;
    rom[2353] = 16'b0011101001000111;
    rom[2354] = 16'b0011101001001000;
    rom[2355] = 16'b0011101001001000;
    rom[2356] = 16'b0011101001001001;
    rom[2357] = 16'b0011101001001001;
    rom[2358] = 16'b0011101001001010;
    rom[2359] = 16'b0011101001001010;
    rom[2360] = 16'b0011101001001011;
    rom[2361] = 16'b0011101001001011;
    rom[2362] = 16'b0011101001001100;
    rom[2363] = 16'b0011101001001100;
    rom[2364] = 16'b0011101001001101;
    rom[2365] = 16'b0011101001001101;
    rom[2366] = 16'b0011101001001110;
    rom[2367] = 16'b0011101001001110;
    rom[2368] = 16'b0011101001001111;
    rom[2369] = 16'b0011101001001111;
    rom[2370] = 16'b0011101001001111;
    rom[2371] = 16'b0011101001010000;
    rom[2372] = 16'b0011101001010000;
    rom[2373] = 16'b0011101001010001;
    rom[2374] = 16'b0011101001010001;
    rom[2375] = 16'b0011101001010010;
    rom[2376] = 16'b0011101001010010;
    rom[2377] = 16'b0011101001010011;
    rom[2378] = 16'b0011101001010011;
    rom[2379] = 16'b0011101001010100;
    rom[2380] = 16'b0011101001010100;
    rom[2381] = 16'b0011101001010101;
    rom[2382] = 16'b0011101001010101;
    rom[2383] = 16'b0011101001010110;
    rom[2384] = 16'b0011101001010110;
    rom[2385] = 16'b0011101001010111;
    rom[2386] = 16'b0011101001010111;
    rom[2387] = 16'b0011101001011000;
    rom[2388] = 16'b0011101001011000;
    rom[2389] = 16'b0011101001011001;
    rom[2390] = 16'b0011101001011001;
    rom[2391] = 16'b0011101001011010;
    rom[2392] = 16'b0011101001011010;
    rom[2393] = 16'b0011101001011011;
    rom[2394] = 16'b0011101001011011;
    rom[2395] = 16'b0011101001011011;
    rom[2396] = 16'b0011101001011100;
    rom[2397] = 16'b0011101001011100;
    rom[2398] = 16'b0011101001011101;
    rom[2399] = 16'b0011101001011101;
    rom[2400] = 16'b0011101001011110;
    rom[2401] = 16'b0011101001011110;
    rom[2402] = 16'b0011101001011111;
    rom[2403] = 16'b0011101001011111;
    rom[2404] = 16'b0011101001100000;
    rom[2405] = 16'b0011101001100000;
    rom[2406] = 16'b0011101001100001;
    rom[2407] = 16'b0011101001100001;
    rom[2408] = 16'b0011101001100010;
    rom[2409] = 16'b0011101001100010;
    rom[2410] = 16'b0011101001100011;
    rom[2411] = 16'b0011101001100011;
    rom[2412] = 16'b0011101001100100;
    rom[2413] = 16'b0011101001100100;
    rom[2414] = 16'b0011101001100101;
    rom[2415] = 16'b0011101001100101;
    rom[2416] = 16'b0011101001100101;
    rom[2417] = 16'b0011101001100110;
    rom[2418] = 16'b0011101001100110;
    rom[2419] = 16'b0011101001100111;
    rom[2420] = 16'b0011101001100111;
    rom[2421] = 16'b0011101001101000;
    rom[2422] = 16'b0011101001101000;
    rom[2423] = 16'b0011101001101001;
    rom[2424] = 16'b0011101001101001;
    rom[2425] = 16'b0011101001101010;
    rom[2426] = 16'b0011101001101010;
    rom[2427] = 16'b0011101001101011;
    rom[2428] = 16'b0011101001101011;
    rom[2429] = 16'b0011101001101100;
    rom[2430] = 16'b0011101001101100;
    rom[2431] = 16'b0011101001101101;
    rom[2432] = 16'b0011101001101101;
    rom[2433] = 16'b0011101001101101;
    rom[2434] = 16'b0011101001101110;
    rom[2435] = 16'b0011101001101110;
    rom[2436] = 16'b0011101001101111;
    rom[2437] = 16'b0011101001101111;
    rom[2438] = 16'b0011101001110000;
    rom[2439] = 16'b0011101001110000;
    rom[2440] = 16'b0011101001110001;
    rom[2441] = 16'b0011101001110001;
    rom[2442] = 16'b0011101001110010;
    rom[2443] = 16'b0011101001110010;
    rom[2444] = 16'b0011101001110011;
    rom[2445] = 16'b0011101001110011;
    rom[2446] = 16'b0011101001110011;
    rom[2447] = 16'b0011101001110100;
    rom[2448] = 16'b0011101001110100;
    rom[2449] = 16'b0011101001110101;
    rom[2450] = 16'b0011101001110101;
    rom[2451] = 16'b0011101001110110;
    rom[2452] = 16'b0011101001110110;
    rom[2453] = 16'b0011101001110111;
    rom[2454] = 16'b0011101001110111;
    rom[2455] = 16'b0011101001111000;
    rom[2456] = 16'b0011101001111000;
    rom[2457] = 16'b0011101001111001;
    rom[2458] = 16'b0011101001111001;
    rom[2459] = 16'b0011101001111010;
    rom[2460] = 16'b0011101001111010;
    rom[2461] = 16'b0011101001111010;
    rom[2462] = 16'b0011101001111011;
    rom[2463] = 16'b0011101001111011;
    rom[2464] = 16'b0011101001111100;
    rom[2465] = 16'b0011101001111100;
    rom[2466] = 16'b0011101001111101;
    rom[2467] = 16'b0011101001111101;
    rom[2468] = 16'b0011101001111110;
    rom[2469] = 16'b0011101001111110;
    rom[2470] = 16'b0011101001111111;
    rom[2471] = 16'b0011101001111111;
    rom[2472] = 16'b0011101001111111;
    rom[2473] = 16'b0011101010000000;
    rom[2474] = 16'b0011101010000000;
    rom[2475] = 16'b0011101010000001;
    rom[2476] = 16'b0011101010000001;
    rom[2477] = 16'b0011101010000010;
    rom[2478] = 16'b0011101010000010;
    rom[2479] = 16'b0011101010000011;
    rom[2480] = 16'b0011101010000011;
    rom[2481] = 16'b0011101010000100;
    rom[2482] = 16'b0011101010000100;
    rom[2483] = 16'b0011101010000101;
    rom[2484] = 16'b0011101010000101;
    rom[2485] = 16'b0011101010000101;
    rom[2486] = 16'b0011101010000110;
    rom[2487] = 16'b0011101010000110;
    rom[2488] = 16'b0011101010000111;
    rom[2489] = 16'b0011101010000111;
    rom[2490] = 16'b0011101010001000;
    rom[2491] = 16'b0011101010001000;
    rom[2492] = 16'b0011101010001001;
    rom[2493] = 16'b0011101010001001;
    rom[2494] = 16'b0011101010001010;
    rom[2495] = 16'b0011101010001010;
    rom[2496] = 16'b0011101010001010;
    rom[2497] = 16'b0011101010001011;
    rom[2498] = 16'b0011101010001011;
    rom[2499] = 16'b0011101010001100;
    rom[2500] = 16'b0011101010001100;
    rom[2501] = 16'b0011101010001101;
    rom[2502] = 16'b0011101010001101;
    rom[2503] = 16'b0011101010001110;
    rom[2504] = 16'b0011101010001110;
    rom[2505] = 16'b0011101010001110;
    rom[2506] = 16'b0011101010001111;
    rom[2507] = 16'b0011101010001111;
    rom[2508] = 16'b0011101010010000;
    rom[2509] = 16'b0011101010010000;
    rom[2510] = 16'b0011101010010001;
    rom[2511] = 16'b0011101010010001;
    rom[2512] = 16'b0011101010010010;
    rom[2513] = 16'b0011101010010010;
    rom[2514] = 16'b0011101010010011;
    rom[2515] = 16'b0011101010010011;
    rom[2516] = 16'b0011101010010011;
    rom[2517] = 16'b0011101010010100;
    rom[2518] = 16'b0011101010010100;
    rom[2519] = 16'b0011101010010101;
    rom[2520] = 16'b0011101010010101;
    rom[2521] = 16'b0011101010010110;
    rom[2522] = 16'b0011101010010110;
    rom[2523] = 16'b0011101010010111;
    rom[2524] = 16'b0011101010010111;
    rom[2525] = 16'b0011101010010111;
    rom[2526] = 16'b0011101010011000;
    rom[2527] = 16'b0011101010011000;
    rom[2528] = 16'b0011101010011001;
    rom[2529] = 16'b0011101010011001;
    rom[2530] = 16'b0011101010011010;
    rom[2531] = 16'b0011101010011010;
    rom[2532] = 16'b0011101010011011;
    rom[2533] = 16'b0011101010011011;
    rom[2534] = 16'b0011101010011011;
    rom[2535] = 16'b0011101010011100;
    rom[2536] = 16'b0011101010011100;
    rom[2537] = 16'b0011101010011101;
    rom[2538] = 16'b0011101010011101;
    rom[2539] = 16'b0011101010011110;
    rom[2540] = 16'b0011101010011110;
    rom[2541] = 16'b0011101010011111;
    rom[2542] = 16'b0011101010011111;
    rom[2543] = 16'b0011101010011111;
    rom[2544] = 16'b0011101010100000;
    rom[2545] = 16'b0011101010100000;
    rom[2546] = 16'b0011101010100001;
    rom[2547] = 16'b0011101010100001;
    rom[2548] = 16'b0011101010100010;
    rom[2549] = 16'b0011101010100010;
    rom[2550] = 16'b0011101010100010;
    rom[2551] = 16'b0011101010100011;
    rom[2552] = 16'b0011101010100011;
    rom[2553] = 16'b0011101010100100;
    rom[2554] = 16'b0011101010100100;
    rom[2555] = 16'b0011101010100101;
    rom[2556] = 16'b0011101010100101;
    rom[2557] = 16'b0011101010100110;
    rom[2558] = 16'b0011101010100110;
    rom[2559] = 16'b0011101010100110;
    rom[2560] = 16'b0011101010100111;
    rom[2561] = 16'b0011101010100111;
    rom[2562] = 16'b0011101010101000;
    rom[2563] = 16'b0011101010101000;
    rom[2564] = 16'b0011101010101001;
    rom[2565] = 16'b0011101010101001;
    rom[2566] = 16'b0011101010101001;
    rom[2567] = 16'b0011101010101010;
    rom[2568] = 16'b0011101010101010;
    rom[2569] = 16'b0011101010101011;
    rom[2570] = 16'b0011101010101011;
    rom[2571] = 16'b0011101010101100;
    rom[2572] = 16'b0011101010101100;
    rom[2573] = 16'b0011101010101101;
    rom[2574] = 16'b0011101010101101;
    rom[2575] = 16'b0011101010101101;
    rom[2576] = 16'b0011101010101110;
    rom[2577] = 16'b0011101010101110;
    rom[2578] = 16'b0011101010101111;
    rom[2579] = 16'b0011101010101111;
    rom[2580] = 16'b0011101010110000;
    rom[2581] = 16'b0011101010110000;
    rom[2582] = 16'b0011101010110000;
    rom[2583] = 16'b0011101010110001;
    rom[2584] = 16'b0011101010110001;
    rom[2585] = 16'b0011101010110010;
    rom[2586] = 16'b0011101010110010;
    rom[2587] = 16'b0011101010110011;
    rom[2588] = 16'b0011101010110011;
    rom[2589] = 16'b0011101010110011;
    rom[2590] = 16'b0011101010110100;
    rom[2591] = 16'b0011101010110100;
    rom[2592] = 16'b0011101010110101;
    rom[2593] = 16'b0011101010110101;
    rom[2594] = 16'b0011101010110110;
    rom[2595] = 16'b0011101010110110;
    rom[2596] = 16'b0011101010110110;
    rom[2597] = 16'b0011101010110111;
    rom[2598] = 16'b0011101010110111;
    rom[2599] = 16'b0011101010111000;
    rom[2600] = 16'b0011101010111000;
    rom[2601] = 16'b0011101010111001;
    rom[2602] = 16'b0011101010111001;
    rom[2603] = 16'b0011101010111001;
    rom[2604] = 16'b0011101010111010;
    rom[2605] = 16'b0011101010111010;
    rom[2606] = 16'b0011101010111011;
    rom[2607] = 16'b0011101010111011;
    rom[2608] = 16'b0011101010111100;
    rom[2609] = 16'b0011101010111100;
    rom[2610] = 16'b0011101010111100;
    rom[2611] = 16'b0011101010111101;
    rom[2612] = 16'b0011101010111101;
    rom[2613] = 16'b0011101010111110;
    rom[2614] = 16'b0011101010111110;
    rom[2615] = 16'b0011101010111110;
    rom[2616] = 16'b0011101010111111;
    rom[2617] = 16'b0011101010111111;
    rom[2618] = 16'b0011101011000000;
    rom[2619] = 16'b0011101011000000;
    rom[2620] = 16'b0011101011000001;
    rom[2621] = 16'b0011101011000001;
    rom[2622] = 16'b0011101011000001;
    rom[2623] = 16'b0011101011000010;
    rom[2624] = 16'b0011101011000010;
    rom[2625] = 16'b0011101011000011;
    rom[2626] = 16'b0011101011000011;
    rom[2627] = 16'b0011101011000100;
    rom[2628] = 16'b0011101011000100;
    rom[2629] = 16'b0011101011000100;
    rom[2630] = 16'b0011101011000101;
    rom[2631] = 16'b0011101011000101;
    rom[2632] = 16'b0011101011000110;
    rom[2633] = 16'b0011101011000110;
    rom[2634] = 16'b0011101011000110;
    rom[2635] = 16'b0011101011000111;
    rom[2636] = 16'b0011101011000111;
    rom[2637] = 16'b0011101011001000;
    rom[2638] = 16'b0011101011001000;
    rom[2639] = 16'b0011101011001001;
    rom[2640] = 16'b0011101011001001;
    rom[2641] = 16'b0011101011001001;
    rom[2642] = 16'b0011101011001010;
    rom[2643] = 16'b0011101011001010;
    rom[2644] = 16'b0011101011001011;
    rom[2645] = 16'b0011101011001011;
    rom[2646] = 16'b0011101011001011;
    rom[2647] = 16'b0011101011001100;
    rom[2648] = 16'b0011101011001100;
    rom[2649] = 16'b0011101011001101;
    rom[2650] = 16'b0011101011001101;
    rom[2651] = 16'b0011101011001110;
    rom[2652] = 16'b0011101011001110;
    rom[2653] = 16'b0011101011001110;
    rom[2654] = 16'b0011101011001111;
    rom[2655] = 16'b0011101011001111;
    rom[2656] = 16'b0011101011010000;
    rom[2657] = 16'b0011101011010000;
    rom[2658] = 16'b0011101011010000;
    rom[2659] = 16'b0011101011010001;
    rom[2660] = 16'b0011101011010001;
    rom[2661] = 16'b0011101011010010;
    rom[2662] = 16'b0011101011010010;
    rom[2663] = 16'b0011101011010010;
    rom[2664] = 16'b0011101011010011;
    rom[2665] = 16'b0011101011010011;
    rom[2666] = 16'b0011101011010100;
    rom[2667] = 16'b0011101011010100;
    rom[2668] = 16'b0011101011010101;
    rom[2669] = 16'b0011101011010101;
    rom[2670] = 16'b0011101011010101;
    rom[2671] = 16'b0011101011010110;
    rom[2672] = 16'b0011101011010110;
    rom[2673] = 16'b0011101011010111;
    rom[2674] = 16'b0011101011010111;
    rom[2675] = 16'b0011101011010111;
    rom[2676] = 16'b0011101011011000;
    rom[2677] = 16'b0011101011011000;
    rom[2678] = 16'b0011101011011001;
    rom[2679] = 16'b0011101011011001;
    rom[2680] = 16'b0011101011011001;
    rom[2681] = 16'b0011101011011010;
    rom[2682] = 16'b0011101011011010;
    rom[2683] = 16'b0011101011011011;
    rom[2684] = 16'b0011101011011011;
    rom[2685] = 16'b0011101011011011;
    rom[2686] = 16'b0011101011011100;
    rom[2687] = 16'b0011101011011100;
    rom[2688] = 16'b0011101011011101;
    rom[2689] = 16'b0011101011011101;
    rom[2690] = 16'b0011101011011101;
    rom[2691] = 16'b0011101011011110;
    rom[2692] = 16'b0011101011011110;
    rom[2693] = 16'b0011101011011111;
    rom[2694] = 16'b0011101011011111;
    rom[2695] = 16'b0011101011011111;
    rom[2696] = 16'b0011101011100000;
    rom[2697] = 16'b0011101011100000;
    rom[2698] = 16'b0011101011100001;
    rom[2699] = 16'b0011101011100001;
    rom[2700] = 16'b0011101011100001;
    rom[2701] = 16'b0011101011100010;
    rom[2702] = 16'b0011101011100010;
    rom[2703] = 16'b0011101011100011;
    rom[2704] = 16'b0011101011100011;
    rom[2705] = 16'b0011101011100011;
    rom[2706] = 16'b0011101011100100;
    rom[2707] = 16'b0011101011100100;
    rom[2708] = 16'b0011101011100101;
    rom[2709] = 16'b0011101011100101;
    rom[2710] = 16'b0011101011100101;
    rom[2711] = 16'b0011101011100110;
    rom[2712] = 16'b0011101011100110;
    rom[2713] = 16'b0011101011100111;
    rom[2714] = 16'b0011101011100111;
    rom[2715] = 16'b0011101011100111;
    rom[2716] = 16'b0011101011101000;
    rom[2717] = 16'b0011101011101000;
    rom[2718] = 16'b0011101011101001;
    rom[2719] = 16'b0011101011101001;
    rom[2720] = 16'b0011101011101001;
    rom[2721] = 16'b0011101011101010;
    rom[2722] = 16'b0011101011101010;
    rom[2723] = 16'b0011101011101011;
    rom[2724] = 16'b0011101011101011;
    rom[2725] = 16'b0011101011101011;
    rom[2726] = 16'b0011101011101100;
    rom[2727] = 16'b0011101011101100;
    rom[2728] = 16'b0011101011101101;
    rom[2729] = 16'b0011101011101101;
    rom[2730] = 16'b0011101011101101;
    rom[2731] = 16'b0011101011101110;
    rom[2732] = 16'b0011101011101110;
    rom[2733] = 16'b0011101011101111;
    rom[2734] = 16'b0011101011101111;
    rom[2735] = 16'b0011101011101111;
    rom[2736] = 16'b0011101011110000;
    rom[2737] = 16'b0011101011110000;
    rom[2738] = 16'b0011101011110000;
    rom[2739] = 16'b0011101011110001;
    rom[2740] = 16'b0011101011110001;
    rom[2741] = 16'b0011101011110010;
    rom[2742] = 16'b0011101011110010;
    rom[2743] = 16'b0011101011110010;
    rom[2744] = 16'b0011101011110011;
    rom[2745] = 16'b0011101011110011;
    rom[2746] = 16'b0011101011110100;
    rom[2747] = 16'b0011101011110100;
    rom[2748] = 16'b0011101011110100;
    rom[2749] = 16'b0011101011110101;
    rom[2750] = 16'b0011101011110101;
    rom[2751] = 16'b0011101011110110;
    rom[2752] = 16'b0011101011110110;
    rom[2753] = 16'b0011101011110110;
    rom[2754] = 16'b0011101011110111;
    rom[2755] = 16'b0011101011110111;
    rom[2756] = 16'b0011101011110111;
    rom[2757] = 16'b0011101011111000;
    rom[2758] = 16'b0011101011111000;
    rom[2759] = 16'b0011101011111001;
    rom[2760] = 16'b0011101011111001;
    rom[2761] = 16'b0011101011111001;
    rom[2762] = 16'b0011101011111010;
    rom[2763] = 16'b0011101011111010;
    rom[2764] = 16'b0011101011111011;
    rom[2765] = 16'b0011101011111011;
    rom[2766] = 16'b0011101011111011;
    rom[2767] = 16'b0011101011111100;
    rom[2768] = 16'b0011101011111100;
    rom[2769] = 16'b0011101011111100;
    rom[2770] = 16'b0011101011111101;
    rom[2771] = 16'b0011101011111101;
    rom[2772] = 16'b0011101011111110;
    rom[2773] = 16'b0011101011111110;
    rom[2774] = 16'b0011101011111110;
    rom[2775] = 16'b0011101011111111;
    rom[2776] = 16'b0011101011111111;
    rom[2777] = 16'b0011101100000000;
    rom[2778] = 16'b0011101100000000;
    rom[2779] = 16'b0011101100000000;
    rom[2780] = 16'b0011101100000001;
    rom[2781] = 16'b0011101100000001;
    rom[2782] = 16'b0011101100000001;
    rom[2783] = 16'b0011101100000010;
    rom[2784] = 16'b0011101100000010;
    rom[2785] = 16'b0011101100000011;
    rom[2786] = 16'b0011101100000011;
    rom[2787] = 16'b0011101100000011;
    rom[2788] = 16'b0011101100000100;
    rom[2789] = 16'b0011101100000100;
    rom[2790] = 16'b0011101100000100;
    rom[2791] = 16'b0011101100000101;
    rom[2792] = 16'b0011101100000101;
    rom[2793] = 16'b0011101100000110;
    rom[2794] = 16'b0011101100000110;
    rom[2795] = 16'b0011101100000110;
    rom[2796] = 16'b0011101100000111;
    rom[2797] = 16'b0011101100000111;
    rom[2798] = 16'b0011101100000111;
    rom[2799] = 16'b0011101100001000;
    rom[2800] = 16'b0011101100001000;
    rom[2801] = 16'b0011101100001001;
    rom[2802] = 16'b0011101100001001;
    rom[2803] = 16'b0011101100001001;
    rom[2804] = 16'b0011101100001010;
    rom[2805] = 16'b0011101100001010;
    rom[2806] = 16'b0011101100001010;
    rom[2807] = 16'b0011101100001011;
    rom[2808] = 16'b0011101100001011;
    rom[2809] = 16'b0011101100001100;
    rom[2810] = 16'b0011101100001100;
    rom[2811] = 16'b0011101100001100;
    rom[2812] = 16'b0011101100001101;
    rom[2813] = 16'b0011101100001101;
    rom[2814] = 16'b0011101100001101;
    rom[2815] = 16'b0011101100001110;
    rom[2816] = 16'b0011101100001110;
    rom[2817] = 16'b0011101100001111;
    rom[2818] = 16'b0011101100001111;
    rom[2819] = 16'b0011101100001111;
    rom[2820] = 16'b0011101100010000;
    rom[2821] = 16'b0011101100010000;
    rom[2822] = 16'b0011101100010000;
    rom[2823] = 16'b0011101100010001;
    rom[2824] = 16'b0011101100010001;
    rom[2825] = 16'b0011101100010001;
    rom[2826] = 16'b0011101100010010;
    rom[2827] = 16'b0011101100010010;
    rom[2828] = 16'b0011101100010011;
    rom[2829] = 16'b0011101100010011;
    rom[2830] = 16'b0011101100010011;
    rom[2831] = 16'b0011101100010100;
    rom[2832] = 16'b0011101100010100;
    rom[2833] = 16'b0011101100010100;
    rom[2834] = 16'b0011101100010101;
    rom[2835] = 16'b0011101100010101;
    rom[2836] = 16'b0011101100010110;
    rom[2837] = 16'b0011101100010110;
    rom[2838] = 16'b0011101100010110;
    rom[2839] = 16'b0011101100010111;
    rom[2840] = 16'b0011101100010111;
    rom[2841] = 16'b0011101100010111;
    rom[2842] = 16'b0011101100011000;
    rom[2843] = 16'b0011101100011000;
    rom[2844] = 16'b0011101100011000;
    rom[2845] = 16'b0011101100011001;
    rom[2846] = 16'b0011101100011001;
    rom[2847] = 16'b0011101100011010;
    rom[2848] = 16'b0011101100011010;
    rom[2849] = 16'b0011101100011010;
    rom[2850] = 16'b0011101100011011;
    rom[2851] = 16'b0011101100011011;
    rom[2852] = 16'b0011101100011011;
    rom[2853] = 16'b0011101100011100;
    rom[2854] = 16'b0011101100011100;
    rom[2855] = 16'b0011101100011100;
    rom[2856] = 16'b0011101100011101;
    rom[2857] = 16'b0011101100011101;
    rom[2858] = 16'b0011101100011101;
    rom[2859] = 16'b0011101100011110;
    rom[2860] = 16'b0011101100011110;
    rom[2861] = 16'b0011101100011111;
    rom[2862] = 16'b0011101100011111;
    rom[2863] = 16'b0011101100011111;
    rom[2864] = 16'b0011101100100000;
    rom[2865] = 16'b0011101100100000;
    rom[2866] = 16'b0011101100100000;
    rom[2867] = 16'b0011101100100001;
    rom[2868] = 16'b0011101100100001;
    rom[2869] = 16'b0011101100100001;
    rom[2870] = 16'b0011101100100010;
    rom[2871] = 16'b0011101100100010;
    rom[2872] = 16'b0011101100100010;
    rom[2873] = 16'b0011101100100011;
    rom[2874] = 16'b0011101100100011;
    rom[2875] = 16'b0011101100100100;
    rom[2876] = 16'b0011101100100100;
    rom[2877] = 16'b0011101100100100;
    rom[2878] = 16'b0011101100100101;
    rom[2879] = 16'b0011101100100101;
    rom[2880] = 16'b0011101100100101;
    rom[2881] = 16'b0011101100100110;
    rom[2882] = 16'b0011101100100110;
    rom[2883] = 16'b0011101100100110;
    rom[2884] = 16'b0011101100100111;
    rom[2885] = 16'b0011101100100111;
    rom[2886] = 16'b0011101100100111;
    rom[2887] = 16'b0011101100101000;
    rom[2888] = 16'b0011101100101000;
    rom[2889] = 16'b0011101100101000;
    rom[2890] = 16'b0011101100101001;
    rom[2891] = 16'b0011101100101001;
    rom[2892] = 16'b0011101100101010;
    rom[2893] = 16'b0011101100101010;
    rom[2894] = 16'b0011101100101010;
    rom[2895] = 16'b0011101100101011;
    rom[2896] = 16'b0011101100101011;
    rom[2897] = 16'b0011101100101011;
    rom[2898] = 16'b0011101100101100;
    rom[2899] = 16'b0011101100101100;
    rom[2900] = 16'b0011101100101100;
    rom[2901] = 16'b0011101100101101;
    rom[2902] = 16'b0011101100101101;
    rom[2903] = 16'b0011101100101101;
    rom[2904] = 16'b0011101100101110;
    rom[2905] = 16'b0011101100101110;
    rom[2906] = 16'b0011101100101110;
    rom[2907] = 16'b0011101100101111;
    rom[2908] = 16'b0011101100101111;
    rom[2909] = 16'b0011101100101111;
    rom[2910] = 16'b0011101100110000;
    rom[2911] = 16'b0011101100110000;
    rom[2912] = 16'b0011101100110000;
    rom[2913] = 16'b0011101100110001;
    rom[2914] = 16'b0011101100110001;
    rom[2915] = 16'b0011101100110010;
    rom[2916] = 16'b0011101100110010;
    rom[2917] = 16'b0011101100110010;
    rom[2918] = 16'b0011101100110011;
    rom[2919] = 16'b0011101100110011;
    rom[2920] = 16'b0011101100110011;
    rom[2921] = 16'b0011101100110100;
    rom[2922] = 16'b0011101100110100;
    rom[2923] = 16'b0011101100110100;
    rom[2924] = 16'b0011101100110101;
    rom[2925] = 16'b0011101100110101;
    rom[2926] = 16'b0011101100110101;
    rom[2927] = 16'b0011101100110110;
    rom[2928] = 16'b0011101100110110;
    rom[2929] = 16'b0011101100110110;
    rom[2930] = 16'b0011101100110111;
    rom[2931] = 16'b0011101100110111;
    rom[2932] = 16'b0011101100110111;
    rom[2933] = 16'b0011101100111000;
    rom[2934] = 16'b0011101100111000;
    rom[2935] = 16'b0011101100111000;
    rom[2936] = 16'b0011101100111001;
    rom[2937] = 16'b0011101100111001;
    rom[2938] = 16'b0011101100111001;
    rom[2939] = 16'b0011101100111010;
    rom[2940] = 16'b0011101100111010;
    rom[2941] = 16'b0011101100111010;
    rom[2942] = 16'b0011101100111011;
    rom[2943] = 16'b0011101100111011;
    rom[2944] = 16'b0011101100111011;
    rom[2945] = 16'b0011101100111100;
    rom[2946] = 16'b0011101100111100;
    rom[2947] = 16'b0011101100111100;
    rom[2948] = 16'b0011101100111101;
    rom[2949] = 16'b0011101100111101;
    rom[2950] = 16'b0011101100111101;
    rom[2951] = 16'b0011101100111110;
    rom[2952] = 16'b0011101100111110;
    rom[2953] = 16'b0011101100111110;
    rom[2954] = 16'b0011101100111111;
    rom[2955] = 16'b0011101100111111;
    rom[2956] = 16'b0011101100111111;
    rom[2957] = 16'b0011101101000000;
    rom[2958] = 16'b0011101101000000;
    rom[2959] = 16'b0011101101000000;
    rom[2960] = 16'b0011101101000001;
    rom[2961] = 16'b0011101101000001;
    rom[2962] = 16'b0011101101000001;
    rom[2963] = 16'b0011101101000010;
    rom[2964] = 16'b0011101101000010;
    rom[2965] = 16'b0011101101000010;
    rom[2966] = 16'b0011101101000011;
    rom[2967] = 16'b0011101101000011;
    rom[2968] = 16'b0011101101000011;
    rom[2969] = 16'b0011101101000100;
    rom[2970] = 16'b0011101101000100;
    rom[2971] = 16'b0011101101000100;
    rom[2972] = 16'b0011101101000101;
    rom[2973] = 16'b0011101101000101;
    rom[2974] = 16'b0011101101000101;
    rom[2975] = 16'b0011101101000110;
    rom[2976] = 16'b0011101101000110;
    rom[2977] = 16'b0011101101000110;
    rom[2978] = 16'b0011101101000111;
    rom[2979] = 16'b0011101101000111;
    rom[2980] = 16'b0011101101000111;
    rom[2981] = 16'b0011101101001000;
    rom[2982] = 16'b0011101101001000;
    rom[2983] = 16'b0011101101001000;
    rom[2984] = 16'b0011101101001001;
    rom[2985] = 16'b0011101101001001;
    rom[2986] = 16'b0011101101001001;
    rom[2987] = 16'b0011101101001010;
    rom[2988] = 16'b0011101101001010;
    rom[2989] = 16'b0011101101001010;
    rom[2990] = 16'b0011101101001011;
    rom[2991] = 16'b0011101101001011;
    rom[2992] = 16'b0011101101001011;
    rom[2993] = 16'b0011101101001011;
    rom[2994] = 16'b0011101101001100;
    rom[2995] = 16'b0011101101001100;
    rom[2996] = 16'b0011101101001100;
    rom[2997] = 16'b0011101101001101;
    rom[2998] = 16'b0011101101001101;
    rom[2999] = 16'b0011101101001101;
    rom[3000] = 16'b0011101101001110;
    rom[3001] = 16'b0011101101001110;
    rom[3002] = 16'b0011101101001110;
    rom[3003] = 16'b0011101101001111;
    rom[3004] = 16'b0011101101001111;
    rom[3005] = 16'b0011101101001111;
    rom[3006] = 16'b0011101101010000;
    rom[3007] = 16'b0011101101010000;
    rom[3008] = 16'b0011101101010000;
    rom[3009] = 16'b0011101101010001;
    rom[3010] = 16'b0011101101010001;
    rom[3011] = 16'b0011101101010001;
    rom[3012] = 16'b0011101101010010;
    rom[3013] = 16'b0011101101010010;
    rom[3014] = 16'b0011101101010010;
    rom[3015] = 16'b0011101101010011;
    rom[3016] = 16'b0011101101010011;
    rom[3017] = 16'b0011101101010011;
    rom[3018] = 16'b0011101101010011;
    rom[3019] = 16'b0011101101010100;
    rom[3020] = 16'b0011101101010100;
    rom[3021] = 16'b0011101101010100;
    rom[3022] = 16'b0011101101010101;
    rom[3023] = 16'b0011101101010101;
    rom[3024] = 16'b0011101101010101;
    rom[3025] = 16'b0011101101010110;
    rom[3026] = 16'b0011101101010110;
    rom[3027] = 16'b0011101101010110;
    rom[3028] = 16'b0011101101010111;
    rom[3029] = 16'b0011101101010111;
    rom[3030] = 16'b0011101101010111;
    rom[3031] = 16'b0011101101011000;
    rom[3032] = 16'b0011101101011000;
    rom[3033] = 16'b0011101101011000;
    rom[3034] = 16'b0011101101011000;
    rom[3035] = 16'b0011101101011001;
    rom[3036] = 16'b0011101101011001;
    rom[3037] = 16'b0011101101011001;
    rom[3038] = 16'b0011101101011010;
    rom[3039] = 16'b0011101101011010;
    rom[3040] = 16'b0011101101011010;
    rom[3041] = 16'b0011101101011011;
    rom[3042] = 16'b0011101101011011;
    rom[3043] = 16'b0011101101011011;
    rom[3044] = 16'b0011101101011100;
    rom[3045] = 16'b0011101101011100;
    rom[3046] = 16'b0011101101011100;
    rom[3047] = 16'b0011101101011101;
    rom[3048] = 16'b0011101101011101;
    rom[3049] = 16'b0011101101011101;
    rom[3050] = 16'b0011101101011101;
    rom[3051] = 16'b0011101101011110;
    rom[3052] = 16'b0011101101011110;
    rom[3053] = 16'b0011101101011110;
    rom[3054] = 16'b0011101101011111;
    rom[3055] = 16'b0011101101011111;
    rom[3056] = 16'b0011101101011111;
    rom[3057] = 16'b0011101101100000;
    rom[3058] = 16'b0011101101100000;
    rom[3059] = 16'b0011101101100000;
    rom[3060] = 16'b0011101101100000;
    rom[3061] = 16'b0011101101100001;
    rom[3062] = 16'b0011101101100001;
    rom[3063] = 16'b0011101101100001;
    rom[3064] = 16'b0011101101100010;
    rom[3065] = 16'b0011101101100010;
    rom[3066] = 16'b0011101101100010;
    rom[3067] = 16'b0011101101100011;
    rom[3068] = 16'b0011101101100011;
    rom[3069] = 16'b0011101101100011;
    rom[3070] = 16'b0011101101100100;
    rom[3071] = 16'b0011101101100100;
    rom[3072] = 16'b0011101101100100;
    rom[3073] = 16'b0011101101100100;
    rom[3074] = 16'b0011101101100101;
    rom[3075] = 16'b0011101101100101;
    rom[3076] = 16'b0011101101100101;
    rom[3077] = 16'b0011101101100110;
    rom[3078] = 16'b0011101101100110;
    rom[3079] = 16'b0011101101100110;
    rom[3080] = 16'b0011101101100111;
    rom[3081] = 16'b0011101101100111;
    rom[3082] = 16'b0011101101100111;
    rom[3083] = 16'b0011101101100111;
    rom[3084] = 16'b0011101101101000;
    rom[3085] = 16'b0011101101101000;
    rom[3086] = 16'b0011101101101000;
    rom[3087] = 16'b0011101101101001;
    rom[3088] = 16'b0011101101101001;
    rom[3089] = 16'b0011101101101001;
    rom[3090] = 16'b0011101101101001;
    rom[3091] = 16'b0011101101101010;
    rom[3092] = 16'b0011101101101010;
    rom[3093] = 16'b0011101101101010;
    rom[3094] = 16'b0011101101101011;
    rom[3095] = 16'b0011101101101011;
    rom[3096] = 16'b0011101101101011;
    rom[3097] = 16'b0011101101101100;
    rom[3098] = 16'b0011101101101100;
    rom[3099] = 16'b0011101101101100;
    rom[3100] = 16'b0011101101101100;
    rom[3101] = 16'b0011101101101101;
    rom[3102] = 16'b0011101101101101;
    rom[3103] = 16'b0011101101101101;
    rom[3104] = 16'b0011101101101110;
    rom[3105] = 16'b0011101101101110;
    rom[3106] = 16'b0011101101101110;
    rom[3107] = 16'b0011101101101110;
    rom[3108] = 16'b0011101101101111;
    rom[3109] = 16'b0011101101101111;
    rom[3110] = 16'b0011101101101111;
    rom[3111] = 16'b0011101101110000;
    rom[3112] = 16'b0011101101110000;
    rom[3113] = 16'b0011101101110000;
    rom[3114] = 16'b0011101101110000;
    rom[3115] = 16'b0011101101110001;
    rom[3116] = 16'b0011101101110001;
    rom[3117] = 16'b0011101101110001;
    rom[3118] = 16'b0011101101110010;
    rom[3119] = 16'b0011101101110010;
    rom[3120] = 16'b0011101101110010;
    rom[3121] = 16'b0011101101110010;
    rom[3122] = 16'b0011101101110011;
    rom[3123] = 16'b0011101101110011;
    rom[3124] = 16'b0011101101110011;
    rom[3125] = 16'b0011101101110100;
    rom[3126] = 16'b0011101101110100;
    rom[3127] = 16'b0011101101110100;
    rom[3128] = 16'b0011101101110100;
    rom[3129] = 16'b0011101101110101;
    rom[3130] = 16'b0011101101110101;
    rom[3131] = 16'b0011101101110101;
    rom[3132] = 16'b0011101101110110;
    rom[3133] = 16'b0011101101110110;
    rom[3134] = 16'b0011101101110110;
    rom[3135] = 16'b0011101101110110;
    rom[3136] = 16'b0011101101110111;
    rom[3137] = 16'b0011101101110111;
    rom[3138] = 16'b0011101101110111;
    rom[3139] = 16'b0011101101111000;
    rom[3140] = 16'b0011101101111000;
    rom[3141] = 16'b0011101101111000;
    rom[3142] = 16'b0011101101111000;
    rom[3143] = 16'b0011101101111001;
    rom[3144] = 16'b0011101101111001;
    rom[3145] = 16'b0011101101111001;
    rom[3146] = 16'b0011101101111010;
    rom[3147] = 16'b0011101101111010;
    rom[3148] = 16'b0011101101111010;
    rom[3149] = 16'b0011101101111010;
    rom[3150] = 16'b0011101101111011;
    rom[3151] = 16'b0011101101111011;
    rom[3152] = 16'b0011101101111011;
    rom[3153] = 16'b0011101101111100;
    rom[3154] = 16'b0011101101111100;
    rom[3155] = 16'b0011101101111100;
    rom[3156] = 16'b0011101101111100;
    rom[3157] = 16'b0011101101111101;
    rom[3158] = 16'b0011101101111101;
    rom[3159] = 16'b0011101101111101;
    rom[3160] = 16'b0011101101111101;
    rom[3161] = 16'b0011101101111110;
    rom[3162] = 16'b0011101101111110;
    rom[3163] = 16'b0011101101111110;
    rom[3164] = 16'b0011101101111111;
    rom[3165] = 16'b0011101101111111;
    rom[3166] = 16'b0011101101111111;
    rom[3167] = 16'b0011101101111111;
    rom[3168] = 16'b0011101110000000;
    rom[3169] = 16'b0011101110000000;
    rom[3170] = 16'b0011101110000000;
    rom[3171] = 16'b0011101110000000;
    rom[3172] = 16'b0011101110000001;
    rom[3173] = 16'b0011101110000001;
    rom[3174] = 16'b0011101110000001;
    rom[3175] = 16'b0011101110000010;
    rom[3176] = 16'b0011101110000010;
    rom[3177] = 16'b0011101110000010;
    rom[3178] = 16'b0011101110000010;
    rom[3179] = 16'b0011101110000011;
    rom[3180] = 16'b0011101110000011;
    rom[3181] = 16'b0011101110000011;
    rom[3182] = 16'b0011101110000011;
    rom[3183] = 16'b0011101110000100;
    rom[3184] = 16'b0011101110000100;
    rom[3185] = 16'b0011101110000100;
    rom[3186] = 16'b0011101110000101;
    rom[3187] = 16'b0011101110000101;
    rom[3188] = 16'b0011101110000101;
    rom[3189] = 16'b0011101110000101;
    rom[3190] = 16'b0011101110000110;
    rom[3191] = 16'b0011101110000110;
    rom[3192] = 16'b0011101110000110;
    rom[3193] = 16'b0011101110000110;
    rom[3194] = 16'b0011101110000111;
    rom[3195] = 16'b0011101110000111;
    rom[3196] = 16'b0011101110000111;
    rom[3197] = 16'b0011101110000111;
    rom[3198] = 16'b0011101110001000;
    rom[3199] = 16'b0011101110001000;
    rom[3200] = 16'b0011101110001000;
    rom[3201] = 16'b0011101110001001;
    rom[3202] = 16'b0011101110001001;
    rom[3203] = 16'b0011101110001001;
    rom[3204] = 16'b0011101110001001;
    rom[3205] = 16'b0011101110001010;
    rom[3206] = 16'b0011101110001010;
    rom[3207] = 16'b0011101110001010;
    rom[3208] = 16'b0011101110001010;
    rom[3209] = 16'b0011101110001011;
    rom[3210] = 16'b0011101110001011;
    rom[3211] = 16'b0011101110001011;
    rom[3212] = 16'b0011101110001011;
    rom[3213] = 16'b0011101110001100;
    rom[3214] = 16'b0011101110001100;
    rom[3215] = 16'b0011101110001100;
    rom[3216] = 16'b0011101110001100;
    rom[3217] = 16'b0011101110001101;
    rom[3218] = 16'b0011101110001101;
    rom[3219] = 16'b0011101110001101;
    rom[3220] = 16'b0011101110001110;
    rom[3221] = 16'b0011101110001110;
    rom[3222] = 16'b0011101110001110;
    rom[3223] = 16'b0011101110001110;
    rom[3224] = 16'b0011101110001111;
    rom[3225] = 16'b0011101110001111;
    rom[3226] = 16'b0011101110001111;
    rom[3227] = 16'b0011101110001111;
    rom[3228] = 16'b0011101110010000;
    rom[3229] = 16'b0011101110010000;
    rom[3230] = 16'b0011101110010000;
    rom[3231] = 16'b0011101110010000;
    rom[3232] = 16'b0011101110010001;
    rom[3233] = 16'b0011101110010001;
    rom[3234] = 16'b0011101110010001;
    rom[3235] = 16'b0011101110010001;
    rom[3236] = 16'b0011101110010010;
    rom[3237] = 16'b0011101110010010;
    rom[3238] = 16'b0011101110010010;
    rom[3239] = 16'b0011101110010010;
    rom[3240] = 16'b0011101110010011;
    rom[3241] = 16'b0011101110010011;
    rom[3242] = 16'b0011101110010011;
    rom[3243] = 16'b0011101110010011;
    rom[3244] = 16'b0011101110010100;
    rom[3245] = 16'b0011101110010100;
    rom[3246] = 16'b0011101110010100;
    rom[3247] = 16'b0011101110010100;
    rom[3248] = 16'b0011101110010101;
    rom[3249] = 16'b0011101110010101;
    rom[3250] = 16'b0011101110010101;
    rom[3251] = 16'b0011101110010101;
    rom[3252] = 16'b0011101110010110;
    rom[3253] = 16'b0011101110010110;
    rom[3254] = 16'b0011101110010110;
    rom[3255] = 16'b0011101110010110;
    rom[3256] = 16'b0011101110010111;
    rom[3257] = 16'b0011101110010111;
    rom[3258] = 16'b0011101110010111;
    rom[3259] = 16'b0011101110010111;
    rom[3260] = 16'b0011101110011000;
    rom[3261] = 16'b0011101110011000;
    rom[3262] = 16'b0011101110011000;
    rom[3263] = 16'b0011101110011000;
    rom[3264] = 16'b0011101110011001;
    rom[3265] = 16'b0011101110011001;
    rom[3266] = 16'b0011101110011001;
    rom[3267] = 16'b0011101110011001;
    rom[3268] = 16'b0011101110011010;
    rom[3269] = 16'b0011101110011010;
    rom[3270] = 16'b0011101110011010;
    rom[3271] = 16'b0011101110011010;
    rom[3272] = 16'b0011101110011011;
    rom[3273] = 16'b0011101110011011;
    rom[3274] = 16'b0011101110011011;
    rom[3275] = 16'b0011101110011011;
    rom[3276] = 16'b0011101110011100;
    rom[3277] = 16'b0011101110011100;
    rom[3278] = 16'b0011101110011100;
    rom[3279] = 16'b0011101110011100;
    rom[3280] = 16'b0011101110011101;
    rom[3281] = 16'b0011101110011101;
    rom[3282] = 16'b0011101110011101;
    rom[3283] = 16'b0011101110011101;
    rom[3284] = 16'b0011101110011110;
    rom[3285] = 16'b0011101110011110;
    rom[3286] = 16'b0011101110011110;
    rom[3287] = 16'b0011101110011110;
    rom[3288] = 16'b0011101110011110;
    rom[3289] = 16'b0011101110011111;
    rom[3290] = 16'b0011101110011111;
    rom[3291] = 16'b0011101110011111;
    rom[3292] = 16'b0011101110011111;
    rom[3293] = 16'b0011101110100000;
    rom[3294] = 16'b0011101110100000;
    rom[3295] = 16'b0011101110100000;
    rom[3296] = 16'b0011101110100000;
    rom[3297] = 16'b0011101110100001;
    rom[3298] = 16'b0011101110100001;
    rom[3299] = 16'b0011101110100001;
    rom[3300] = 16'b0011101110100001;
    rom[3301] = 16'b0011101110100010;
    rom[3302] = 16'b0011101110100010;
    rom[3303] = 16'b0011101110100010;
    rom[3304] = 16'b0011101110100010;
    rom[3305] = 16'b0011101110100010;
    rom[3306] = 16'b0011101110100011;
    rom[3307] = 16'b0011101110100011;
    rom[3308] = 16'b0011101110100011;
    rom[3309] = 16'b0011101110100011;
    rom[3310] = 16'b0011101110100100;
    rom[3311] = 16'b0011101110100100;
    rom[3312] = 16'b0011101110100100;
    rom[3313] = 16'b0011101110100100;
    rom[3314] = 16'b0011101110100101;
    rom[3315] = 16'b0011101110100101;
    rom[3316] = 16'b0011101110100101;
    rom[3317] = 16'b0011101110100101;
    rom[3318] = 16'b0011101110100110;
    rom[3319] = 16'b0011101110100110;
    rom[3320] = 16'b0011101110100110;
    rom[3321] = 16'b0011101110100110;
    rom[3322] = 16'b0011101110100110;
    rom[3323] = 16'b0011101110100111;
    rom[3324] = 16'b0011101110100111;
    rom[3325] = 16'b0011101110100111;
    rom[3326] = 16'b0011101110100111;
    rom[3327] = 16'b0011101110101000;
    rom[3328] = 16'b0011101110101000;
    rom[3329] = 16'b0011101110101000;
    rom[3330] = 16'b0011101110101000;
    rom[3331] = 16'b0011101110101000;
    rom[3332] = 16'b0011101110101001;
    rom[3333] = 16'b0011101110101001;
    rom[3334] = 16'b0011101110101001;
    rom[3335] = 16'b0011101110101001;
    rom[3336] = 16'b0011101110101010;
    rom[3337] = 16'b0011101110101010;
    rom[3338] = 16'b0011101110101010;
    rom[3339] = 16'b0011101110101010;
    rom[3340] = 16'b0011101110101011;
    rom[3341] = 16'b0011101110101011;
    rom[3342] = 16'b0011101110101011;
    rom[3343] = 16'b0011101110101011;
    rom[3344] = 16'b0011101110101011;
    rom[3345] = 16'b0011101110101100;
    rom[3346] = 16'b0011101110101100;
    rom[3347] = 16'b0011101110101100;
    rom[3348] = 16'b0011101110101100;
    rom[3349] = 16'b0011101110101101;
    rom[3350] = 16'b0011101110101101;
    rom[3351] = 16'b0011101110101101;
    rom[3352] = 16'b0011101110101101;
    rom[3353] = 16'b0011101110101101;
    rom[3354] = 16'b0011101110101110;
    rom[3355] = 16'b0011101110101110;
    rom[3356] = 16'b0011101110101110;
    rom[3357] = 16'b0011101110101110;
    rom[3358] = 16'b0011101110101111;
    rom[3359] = 16'b0011101110101111;
    rom[3360] = 16'b0011101110101111;
    rom[3361] = 16'b0011101110101111;
    rom[3362] = 16'b0011101110101111;
    rom[3363] = 16'b0011101110110000;
    rom[3364] = 16'b0011101110110000;
    rom[3365] = 16'b0011101110110000;
    rom[3366] = 16'b0011101110110000;
    rom[3367] = 16'b0011101110110000;
    rom[3368] = 16'b0011101110110001;
    rom[3369] = 16'b0011101110110001;
    rom[3370] = 16'b0011101110110001;
    rom[3371] = 16'b0011101110110001;
    rom[3372] = 16'b0011101110110010;
    rom[3373] = 16'b0011101110110010;
    rom[3374] = 16'b0011101110110010;
    rom[3375] = 16'b0011101110110010;
    rom[3376] = 16'b0011101110110010;
    rom[3377] = 16'b0011101110110011;
    rom[3378] = 16'b0011101110110011;
    rom[3379] = 16'b0011101110110011;
    rom[3380] = 16'b0011101110110011;
    rom[3381] = 16'b0011101110110011;
    rom[3382] = 16'b0011101110110100;
    rom[3383] = 16'b0011101110110100;
    rom[3384] = 16'b0011101110110100;
    rom[3385] = 16'b0011101110110100;
    rom[3386] = 16'b0011101110110101;
    rom[3387] = 16'b0011101110110101;
    rom[3388] = 16'b0011101110110101;
    rom[3389] = 16'b0011101110110101;
    rom[3390] = 16'b0011101110110101;
    rom[3391] = 16'b0011101110110110;
    rom[3392] = 16'b0011101110110110;
    rom[3393] = 16'b0011101110110110;
    rom[3394] = 16'b0011101110110110;
    rom[3395] = 16'b0011101110110110;
    rom[3396] = 16'b0011101110110111;
    rom[3397] = 16'b0011101110110111;
    rom[3398] = 16'b0011101110110111;
    rom[3399] = 16'b0011101110110111;
    rom[3400] = 16'b0011101110110111;
    rom[3401] = 16'b0011101110111000;
    rom[3402] = 16'b0011101110111000;
    rom[3403] = 16'b0011101110111000;
    rom[3404] = 16'b0011101110111000;
    rom[3405] = 16'b0011101110111001;
    rom[3406] = 16'b0011101110111001;
    rom[3407] = 16'b0011101110111001;
    rom[3408] = 16'b0011101110111001;
    rom[3409] = 16'b0011101110111001;
    rom[3410] = 16'b0011101110111010;
    rom[3411] = 16'b0011101110111010;
    rom[3412] = 16'b0011101110111010;
    rom[3413] = 16'b0011101110111010;
    rom[3414] = 16'b0011101110111010;
    rom[3415] = 16'b0011101110111011;
    rom[3416] = 16'b0011101110111011;
    rom[3417] = 16'b0011101110111011;
    rom[3418] = 16'b0011101110111011;
    rom[3419] = 16'b0011101110111011;
    rom[3420] = 16'b0011101110111100;
    rom[3421] = 16'b0011101110111100;
    rom[3422] = 16'b0011101110111100;
    rom[3423] = 16'b0011101110111100;
    rom[3424] = 16'b0011101110111100;
    rom[3425] = 16'b0011101110111101;
    rom[3426] = 16'b0011101110111101;
    rom[3427] = 16'b0011101110111101;
    rom[3428] = 16'b0011101110111101;
    rom[3429] = 16'b0011101110111101;
    rom[3430] = 16'b0011101110111110;
    rom[3431] = 16'b0011101110111110;
    rom[3432] = 16'b0011101110111110;
    rom[3433] = 16'b0011101110111110;
    rom[3434] = 16'b0011101110111110;
    rom[3435] = 16'b0011101110111111;
    rom[3436] = 16'b0011101110111111;
    rom[3437] = 16'b0011101110111111;
    rom[3438] = 16'b0011101110111111;
    rom[3439] = 16'b0011101110111111;
    rom[3440] = 16'b0011101111000000;
    rom[3441] = 16'b0011101111000000;
    rom[3442] = 16'b0011101111000000;
    rom[3443] = 16'b0011101111000000;
    rom[3444] = 16'b0011101111000000;
    rom[3445] = 16'b0011101111000001;
    rom[3446] = 16'b0011101111000001;
    rom[3447] = 16'b0011101111000001;
    rom[3448] = 16'b0011101111000001;
    rom[3449] = 16'b0011101111000001;
    rom[3450] = 16'b0011101111000001;
    rom[3451] = 16'b0011101111000010;
    rom[3452] = 16'b0011101111000010;
    rom[3453] = 16'b0011101111000010;
    rom[3454] = 16'b0011101111000010;
    rom[3455] = 16'b0011101111000010;
    rom[3456] = 16'b0011101111000011;
    rom[3457] = 16'b0011101111000011;
    rom[3458] = 16'b0011101111000011;
    rom[3459] = 16'b0011101111000011;
    rom[3460] = 16'b0011101111000011;
    rom[3461] = 16'b0011101111000100;
    rom[3462] = 16'b0011101111000100;
    rom[3463] = 16'b0011101111000100;
    rom[3464] = 16'b0011101111000100;
    rom[3465] = 16'b0011101111000100;
    rom[3466] = 16'b0011101111000101;
    rom[3467] = 16'b0011101111000101;
    rom[3468] = 16'b0011101111000101;
    rom[3469] = 16'b0011101111000101;
    rom[3470] = 16'b0011101111000101;
    rom[3471] = 16'b0011101111000101;
    rom[3472] = 16'b0011101111000110;
    rom[3473] = 16'b0011101111000110;
    rom[3474] = 16'b0011101111000110;
    rom[3475] = 16'b0011101111000110;
    rom[3476] = 16'b0011101111000110;
    rom[3477] = 16'b0011101111000111;
    rom[3478] = 16'b0011101111000111;
    rom[3479] = 16'b0011101111000111;
    rom[3480] = 16'b0011101111000111;
    rom[3481] = 16'b0011101111000111;
    rom[3482] = 16'b0011101111000111;
    rom[3483] = 16'b0011101111001000;
    rom[3484] = 16'b0011101111001000;
    rom[3485] = 16'b0011101111001000;
    rom[3486] = 16'b0011101111001000;
    rom[3487] = 16'b0011101111001000;
    rom[3488] = 16'b0011101111001001;
    rom[3489] = 16'b0011101111001001;
    rom[3490] = 16'b0011101111001001;
    rom[3491] = 16'b0011101111001001;
    rom[3492] = 16'b0011101111001001;
    rom[3493] = 16'b0011101111001001;
    rom[3494] = 16'b0011101111001010;
    rom[3495] = 16'b0011101111001010;
    rom[3496] = 16'b0011101111001010;
    rom[3497] = 16'b0011101111001010;
    rom[3498] = 16'b0011101111001010;
    rom[3499] = 16'b0011101111001011;
    rom[3500] = 16'b0011101111001011;
    rom[3501] = 16'b0011101111001011;
    rom[3502] = 16'b0011101111001011;
    rom[3503] = 16'b0011101111001011;
    rom[3504] = 16'b0011101111001011;
    rom[3505] = 16'b0011101111001100;
    rom[3506] = 16'b0011101111001100;
    rom[3507] = 16'b0011101111001100;
    rom[3508] = 16'b0011101111001100;
    rom[3509] = 16'b0011101111001100;
    rom[3510] = 16'b0011101111001101;
    rom[3511] = 16'b0011101111001101;
    rom[3512] = 16'b0011101111001101;
    rom[3513] = 16'b0011101111001101;
    rom[3514] = 16'b0011101111001101;
    rom[3515] = 16'b0011101111001101;
    rom[3516] = 16'b0011101111001110;
    rom[3517] = 16'b0011101111001110;
    rom[3518] = 16'b0011101111001110;
    rom[3519] = 16'b0011101111001110;
    rom[3520] = 16'b0011101111001110;
    rom[3521] = 16'b0011101111001110;
    rom[3522] = 16'b0011101111001111;
    rom[3523] = 16'b0011101111001111;
    rom[3524] = 16'b0011101111001111;
    rom[3525] = 16'b0011101111001111;
    rom[3526] = 16'b0011101111001111;
    rom[3527] = 16'b0011101111001111;
    rom[3528] = 16'b0011101111010000;
    rom[3529] = 16'b0011101111010000;
    rom[3530] = 16'b0011101111010000;
    rom[3531] = 16'b0011101111010000;
    rom[3532] = 16'b0011101111010000;
    rom[3533] = 16'b0011101111010000;
    rom[3534] = 16'b0011101111010001;
    rom[3535] = 16'b0011101111010001;
    rom[3536] = 16'b0011101111010001;
    rom[3537] = 16'b0011101111010001;
    rom[3538] = 16'b0011101111010001;
    rom[3539] = 16'b0011101111010001;
    rom[3540] = 16'b0011101111010010;
    rom[3541] = 16'b0011101111010010;
    rom[3542] = 16'b0011101111010010;
    rom[3543] = 16'b0011101111010010;
    rom[3544] = 16'b0011101111010010;
    rom[3545] = 16'b0011101111010010;
    rom[3546] = 16'b0011101111010011;
    rom[3547] = 16'b0011101111010011;
    rom[3548] = 16'b0011101111010011;
    rom[3549] = 16'b0011101111010011;
    rom[3550] = 16'b0011101111010011;
    rom[3551] = 16'b0011101111010011;
    rom[3552] = 16'b0011101111010100;
    rom[3553] = 16'b0011101111010100;
    rom[3554] = 16'b0011101111010100;
    rom[3555] = 16'b0011101111010100;
    rom[3556] = 16'b0011101111010100;
    rom[3557] = 16'b0011101111010100;
    rom[3558] = 16'b0011101111010101;
    rom[3559] = 16'b0011101111010101;
    rom[3560] = 16'b0011101111010101;
    rom[3561] = 16'b0011101111010101;
    rom[3562] = 16'b0011101111010101;
    rom[3563] = 16'b0011101111010101;
    rom[3564] = 16'b0011101111010110;
    rom[3565] = 16'b0011101111010110;
    rom[3566] = 16'b0011101111010110;
    rom[3567] = 16'b0011101111010110;
    rom[3568] = 16'b0011101111010110;
    rom[3569] = 16'b0011101111010110;
    rom[3570] = 16'b0011101111010110;
    rom[3571] = 16'b0011101111010111;
    rom[3572] = 16'b0011101111010111;
    rom[3573] = 16'b0011101111010111;
    rom[3574] = 16'b0011101111010111;
    rom[3575] = 16'b0011101111010111;
    rom[3576] = 16'b0011101111010111;
    rom[3577] = 16'b0011101111011000;
    rom[3578] = 16'b0011101111011000;
    rom[3579] = 16'b0011101111011000;
    rom[3580] = 16'b0011101111011000;
    rom[3581] = 16'b0011101111011000;
    rom[3582] = 16'b0011101111011000;
    rom[3583] = 16'b0011101111011000;
    rom[3584] = 16'b0011101111011001;
    rom[3585] = 16'b0011101111011001;
    rom[3586] = 16'b0011101111011001;
    rom[3587] = 16'b0011101111011001;
    rom[3588] = 16'b0011101111011001;
    rom[3589] = 16'b0011101111011001;
    rom[3590] = 16'b0011101111011010;
    rom[3591] = 16'b0011101111011010;
    rom[3592] = 16'b0011101111011010;
    rom[3593] = 16'b0011101111011010;
    rom[3594] = 16'b0011101111011010;
    rom[3595] = 16'b0011101111011010;
    rom[3596] = 16'b0011101111011010;
    rom[3597] = 16'b0011101111011011;
    rom[3598] = 16'b0011101111011011;
    rom[3599] = 16'b0011101111011011;
    rom[3600] = 16'b0011101111011011;
    rom[3601] = 16'b0011101111011011;
    rom[3602] = 16'b0011101111011011;
    rom[3603] = 16'b0011101111011100;
    rom[3604] = 16'b0011101111011100;
    rom[3605] = 16'b0011101111011100;
    rom[3606] = 16'b0011101111011100;
    rom[3607] = 16'b0011101111011100;
    rom[3608] = 16'b0011101111011100;
    rom[3609] = 16'b0011101111011100;
    rom[3610] = 16'b0011101111011101;
    rom[3611] = 16'b0011101111011101;
    rom[3612] = 16'b0011101111011101;
    rom[3613] = 16'b0011101111011101;
    rom[3614] = 16'b0011101111011101;
    rom[3615] = 16'b0011101111011101;
    rom[3616] = 16'b0011101111011101;
    rom[3617] = 16'b0011101111011110;
    rom[3618] = 16'b0011101111011110;
    rom[3619] = 16'b0011101111011110;
    rom[3620] = 16'b0011101111011110;
    rom[3621] = 16'b0011101111011110;
    rom[3622] = 16'b0011101111011110;
    rom[3623] = 16'b0011101111011110;
    rom[3624] = 16'b0011101111011111;
    rom[3625] = 16'b0011101111011111;
    rom[3626] = 16'b0011101111011111;
    rom[3627] = 16'b0011101111011111;
    rom[3628] = 16'b0011101111011111;
    rom[3629] = 16'b0011101111011111;
    rom[3630] = 16'b0011101111011111;
    rom[3631] = 16'b0011101111100000;
    rom[3632] = 16'b0011101111100000;
    rom[3633] = 16'b0011101111100000;
    rom[3634] = 16'b0011101111100000;
    rom[3635] = 16'b0011101111100000;
    rom[3636] = 16'b0011101111100000;
    rom[3637] = 16'b0011101111100000;
    rom[3638] = 16'b0011101111100000;
    rom[3639] = 16'b0011101111100001;
    rom[3640] = 16'b0011101111100001;
    rom[3641] = 16'b0011101111100001;
    rom[3642] = 16'b0011101111100001;
    rom[3643] = 16'b0011101111100001;
    rom[3644] = 16'b0011101111100001;
    rom[3645] = 16'b0011101111100001;
    rom[3646] = 16'b0011101111100010;
    rom[3647] = 16'b0011101111100010;
    rom[3648] = 16'b0011101111100010;
    rom[3649] = 16'b0011101111100010;
    rom[3650] = 16'b0011101111100010;
    rom[3651] = 16'b0011101111100010;
    rom[3652] = 16'b0011101111100010;
    rom[3653] = 16'b0011101111100011;
    rom[3654] = 16'b0011101111100011;
    rom[3655] = 16'b0011101111100011;
    rom[3656] = 16'b0011101111100011;
    rom[3657] = 16'b0011101111100011;
    rom[3658] = 16'b0011101111100011;
    rom[3659] = 16'b0011101111100011;
    rom[3660] = 16'b0011101111100011;
    rom[3661] = 16'b0011101111100100;
    rom[3662] = 16'b0011101111100100;
    rom[3663] = 16'b0011101111100100;
    rom[3664] = 16'b0011101111100100;
    rom[3665] = 16'b0011101111100100;
    rom[3666] = 16'b0011101111100100;
    rom[3667] = 16'b0011101111100100;
    rom[3668] = 16'b0011101111100100;
    rom[3669] = 16'b0011101111100101;
    rom[3670] = 16'b0011101111100101;
    rom[3671] = 16'b0011101111100101;
    rom[3672] = 16'b0011101111100101;
    rom[3673] = 16'b0011101111100101;
    rom[3674] = 16'b0011101111100101;
    rom[3675] = 16'b0011101111100101;
    rom[3676] = 16'b0011101111100101;
    rom[3677] = 16'b0011101111100110;
    rom[3678] = 16'b0011101111100110;
    rom[3679] = 16'b0011101111100110;
    rom[3680] = 16'b0011101111100110;
    rom[3681] = 16'b0011101111100110;
    rom[3682] = 16'b0011101111100110;
    rom[3683] = 16'b0011101111100110;
    rom[3684] = 16'b0011101111100110;
    rom[3685] = 16'b0011101111100111;
    rom[3686] = 16'b0011101111100111;
    rom[3687] = 16'b0011101111100111;
    rom[3688] = 16'b0011101111100111;
    rom[3689] = 16'b0011101111100111;
    rom[3690] = 16'b0011101111100111;
    rom[3691] = 16'b0011101111100111;
    rom[3692] = 16'b0011101111100111;
    rom[3693] = 16'b0011101111101000;
    rom[3694] = 16'b0011101111101000;
    rom[3695] = 16'b0011101111101000;
    rom[3696] = 16'b0011101111101000;
    rom[3697] = 16'b0011101111101000;
    rom[3698] = 16'b0011101111101000;
    rom[3699] = 16'b0011101111101000;
    rom[3700] = 16'b0011101111101000;
    rom[3701] = 16'b0011101111101001;
    rom[3702] = 16'b0011101111101001;
    rom[3703] = 16'b0011101111101001;
    rom[3704] = 16'b0011101111101001;
    rom[3705] = 16'b0011101111101001;
    rom[3706] = 16'b0011101111101001;
    rom[3707] = 16'b0011101111101001;
    rom[3708] = 16'b0011101111101001;
    rom[3709] = 16'b0011101111101001;
    rom[3710] = 16'b0011101111101010;
    rom[3711] = 16'b0011101111101010;
    rom[3712] = 16'b0011101111101010;
    rom[3713] = 16'b0011101111101010;
    rom[3714] = 16'b0011101111101010;
    rom[3715] = 16'b0011101111101010;
    rom[3716] = 16'b0011101111101010;
    rom[3717] = 16'b0011101111101010;
    rom[3718] = 16'b0011101111101011;
    rom[3719] = 16'b0011101111101011;
    rom[3720] = 16'b0011101111101011;
    rom[3721] = 16'b0011101111101011;
    rom[3722] = 16'b0011101111101011;
    rom[3723] = 16'b0011101111101011;
    rom[3724] = 16'b0011101111101011;
    rom[3725] = 16'b0011101111101011;
    rom[3726] = 16'b0011101111101011;
    rom[3727] = 16'b0011101111101100;
    rom[3728] = 16'b0011101111101100;
    rom[3729] = 16'b0011101111101100;
    rom[3730] = 16'b0011101111101100;
    rom[3731] = 16'b0011101111101100;
    rom[3732] = 16'b0011101111101100;
    rom[3733] = 16'b0011101111101100;
    rom[3734] = 16'b0011101111101100;
    rom[3735] = 16'b0011101111101100;
    rom[3736] = 16'b0011101111101101;
    rom[3737] = 16'b0011101111101101;
    rom[3738] = 16'b0011101111101101;
    rom[3739] = 16'b0011101111101101;
    rom[3740] = 16'b0011101111101101;
    rom[3741] = 16'b0011101111101101;
    rom[3742] = 16'b0011101111101101;
    rom[3743] = 16'b0011101111101101;
    rom[3744] = 16'b0011101111101101;
    rom[3745] = 16'b0011101111101101;
    rom[3746] = 16'b0011101111101110;
    rom[3747] = 16'b0011101111101110;
    rom[3748] = 16'b0011101111101110;
    rom[3749] = 16'b0011101111101110;
    rom[3750] = 16'b0011101111101110;
    rom[3751] = 16'b0011101111101110;
    rom[3752] = 16'b0011101111101110;
    rom[3753] = 16'b0011101111101110;
    rom[3754] = 16'b0011101111101110;
    rom[3755] = 16'b0011101111101111;
    rom[3756] = 16'b0011101111101111;
    rom[3757] = 16'b0011101111101111;
    rom[3758] = 16'b0011101111101111;
    rom[3759] = 16'b0011101111101111;
    rom[3760] = 16'b0011101111101111;
    rom[3761] = 16'b0011101111101111;
    rom[3762] = 16'b0011101111101111;
    rom[3763] = 16'b0011101111101111;
    rom[3764] = 16'b0011101111101111;
    rom[3765] = 16'b0011101111110000;
    rom[3766] = 16'b0011101111110000;
    rom[3767] = 16'b0011101111110000;
    rom[3768] = 16'b0011101111110000;
    rom[3769] = 16'b0011101111110000;
    rom[3770] = 16'b0011101111110000;
    rom[3771] = 16'b0011101111110000;
    rom[3772] = 16'b0011101111110000;
    rom[3773] = 16'b0011101111110000;
    rom[3774] = 16'b0011101111110000;
    rom[3775] = 16'b0011101111110001;
    rom[3776] = 16'b0011101111110001;
    rom[3777] = 16'b0011101111110001;
    rom[3778] = 16'b0011101111110001;
    rom[3779] = 16'b0011101111110001;
    rom[3780] = 16'b0011101111110001;
    rom[3781] = 16'b0011101111110001;
    rom[3782] = 16'b0011101111110001;
    rom[3783] = 16'b0011101111110001;
    rom[3784] = 16'b0011101111110001;
    rom[3785] = 16'b0011101111110001;
    rom[3786] = 16'b0011101111110010;
    rom[3787] = 16'b0011101111110010;
    rom[3788] = 16'b0011101111110010;
    rom[3789] = 16'b0011101111110010;
    rom[3790] = 16'b0011101111110010;
    rom[3791] = 16'b0011101111110010;
    rom[3792] = 16'b0011101111110010;
    rom[3793] = 16'b0011101111110010;
    rom[3794] = 16'b0011101111110010;
    rom[3795] = 16'b0011101111110010;
    rom[3796] = 16'b0011101111110010;
    rom[3797] = 16'b0011101111110011;
    rom[3798] = 16'b0011101111110011;
    rom[3799] = 16'b0011101111110011;
    rom[3800] = 16'b0011101111110011;
    rom[3801] = 16'b0011101111110011;
    rom[3802] = 16'b0011101111110011;
    rom[3803] = 16'b0011101111110011;
    rom[3804] = 16'b0011101111110011;
    rom[3805] = 16'b0011101111110011;
    rom[3806] = 16'b0011101111110011;
    rom[3807] = 16'b0011101111110011;
    rom[3808] = 16'b0011101111110100;
    rom[3809] = 16'b0011101111110100;
    rom[3810] = 16'b0011101111110100;
    rom[3811] = 16'b0011101111110100;
    rom[3812] = 16'b0011101111110100;
    rom[3813] = 16'b0011101111110100;
    rom[3814] = 16'b0011101111110100;
    rom[3815] = 16'b0011101111110100;
    rom[3816] = 16'b0011101111110100;
    rom[3817] = 16'b0011101111110100;
    rom[3818] = 16'b0011101111110100;
    rom[3819] = 16'b0011101111110100;
    rom[3820] = 16'b0011101111110101;
    rom[3821] = 16'b0011101111110101;
    rom[3822] = 16'b0011101111110101;
    rom[3823] = 16'b0011101111110101;
    rom[3824] = 16'b0011101111110101;
    rom[3825] = 16'b0011101111110101;
    rom[3826] = 16'b0011101111110101;
    rom[3827] = 16'b0011101111110101;
    rom[3828] = 16'b0011101111110101;
    rom[3829] = 16'b0011101111110101;
    rom[3830] = 16'b0011101111110101;
    rom[3831] = 16'b0011101111110101;
    rom[3832] = 16'b0011101111110110;
    rom[3833] = 16'b0011101111110110;
    rom[3834] = 16'b0011101111110110;
    rom[3835] = 16'b0011101111110110;
    rom[3836] = 16'b0011101111110110;
    rom[3837] = 16'b0011101111110110;
    rom[3838] = 16'b0011101111110110;
    rom[3839] = 16'b0011101111110110;
    rom[3840] = 16'b0011101111110110;
    rom[3841] = 16'b0011101111110110;
    rom[3842] = 16'b0011101111110110;
    rom[3843] = 16'b0011101111110110;
    rom[3844] = 16'b0011101111110110;
    rom[3845] = 16'b0011101111110111;
    rom[3846] = 16'b0011101111110111;
    rom[3847] = 16'b0011101111110111;
    rom[3848] = 16'b0011101111110111;
    rom[3849] = 16'b0011101111110111;
    rom[3850] = 16'b0011101111110111;
    rom[3851] = 16'b0011101111110111;
    rom[3852] = 16'b0011101111110111;
    rom[3853] = 16'b0011101111110111;
    rom[3854] = 16'b0011101111110111;
    rom[3855] = 16'b0011101111110111;
    rom[3856] = 16'b0011101111110111;
    rom[3857] = 16'b0011101111110111;
    rom[3858] = 16'b0011101111110111;
    rom[3859] = 16'b0011101111111000;
    rom[3860] = 16'b0011101111111000;
    rom[3861] = 16'b0011101111111000;
    rom[3862] = 16'b0011101111111000;
    rom[3863] = 16'b0011101111111000;
    rom[3864] = 16'b0011101111111000;
    rom[3865] = 16'b0011101111111000;
    rom[3866] = 16'b0011101111111000;
    rom[3867] = 16'b0011101111111000;
    rom[3868] = 16'b0011101111111000;
    rom[3869] = 16'b0011101111111000;
    rom[3870] = 16'b0011101111111000;
    rom[3871] = 16'b0011101111111000;
    rom[3872] = 16'b0011101111111000;
    rom[3873] = 16'b0011101111111001;
    rom[3874] = 16'b0011101111111001;
    rom[3875] = 16'b0011101111111001;
    rom[3876] = 16'b0011101111111001;
    rom[3877] = 16'b0011101111111001;
    rom[3878] = 16'b0011101111111001;
    rom[3879] = 16'b0011101111111001;
    rom[3880] = 16'b0011101111111001;
    rom[3881] = 16'b0011101111111001;
    rom[3882] = 16'b0011101111111001;
    rom[3883] = 16'b0011101111111001;
    rom[3884] = 16'b0011101111111001;
    rom[3885] = 16'b0011101111111001;
    rom[3886] = 16'b0011101111111001;
    rom[3887] = 16'b0011101111111001;
    rom[3888] = 16'b0011101111111001;
    rom[3889] = 16'b0011101111111010;
    rom[3890] = 16'b0011101111111010;
    rom[3891] = 16'b0011101111111010;
    rom[3892] = 16'b0011101111111010;
    rom[3893] = 16'b0011101111111010;
    rom[3894] = 16'b0011101111111010;
    rom[3895] = 16'b0011101111111010;
    rom[3896] = 16'b0011101111111010;
    rom[3897] = 16'b0011101111111010;
    rom[3898] = 16'b0011101111111010;
    rom[3899] = 16'b0011101111111010;
    rom[3900] = 16'b0011101111111010;
    rom[3901] = 16'b0011101111111010;
    rom[3902] = 16'b0011101111111010;
    rom[3903] = 16'b0011101111111010;
    rom[3904] = 16'b0011101111111010;
    rom[3905] = 16'b0011101111111011;
    rom[3906] = 16'b0011101111111011;
    rom[3907] = 16'b0011101111111011;
    rom[3908] = 16'b0011101111111011;
    rom[3909] = 16'b0011101111111011;
    rom[3910] = 16'b0011101111111011;
    rom[3911] = 16'b0011101111111011;
    rom[3912] = 16'b0011101111111011;
    rom[3913] = 16'b0011101111111011;
    rom[3914] = 16'b0011101111111011;
    rom[3915] = 16'b0011101111111011;
    rom[3916] = 16'b0011101111111011;
    rom[3917] = 16'b0011101111111011;
    rom[3918] = 16'b0011101111111011;
    rom[3919] = 16'b0011101111111011;
    rom[3920] = 16'b0011101111111011;
    rom[3921] = 16'b0011101111111011;
    rom[3922] = 16'b0011101111111011;
    rom[3923] = 16'b0011101111111011;
    rom[3924] = 16'b0011101111111100;
    rom[3925] = 16'b0011101111111100;
    rom[3926] = 16'b0011101111111100;
    rom[3927] = 16'b0011101111111100;
    rom[3928] = 16'b0011101111111100;
    rom[3929] = 16'b0011101111111100;
    rom[3930] = 16'b0011101111111100;
    rom[3931] = 16'b0011101111111100;
    rom[3932] = 16'b0011101111111100;
    rom[3933] = 16'b0011101111111100;
    rom[3934] = 16'b0011101111111100;
    rom[3935] = 16'b0011101111111100;
    rom[3936] = 16'b0011101111111100;
    rom[3937] = 16'b0011101111111100;
    rom[3938] = 16'b0011101111111100;
    rom[3939] = 16'b0011101111111100;
    rom[3940] = 16'b0011101111111100;
    rom[3941] = 16'b0011101111111100;
    rom[3942] = 16'b0011101111111100;
    rom[3943] = 16'b0011101111111100;
    rom[3944] = 16'b0011101111111101;
    rom[3945] = 16'b0011101111111101;
    rom[3946] = 16'b0011101111111101;
    rom[3947] = 16'b0011101111111101;
    rom[3948] = 16'b0011101111111101;
    rom[3949] = 16'b0011101111111101;
    rom[3950] = 16'b0011101111111101;
    rom[3951] = 16'b0011101111111101;
    rom[3952] = 16'b0011101111111101;
    rom[3953] = 16'b0011101111111101;
    rom[3954] = 16'b0011101111111101;
    rom[3955] = 16'b0011101111111101;
    rom[3956] = 16'b0011101111111101;
    rom[3957] = 16'b0011101111111101;
    rom[3958] = 16'b0011101111111101;
    rom[3959] = 16'b0011101111111101;
    rom[3960] = 16'b0011101111111101;
    rom[3961] = 16'b0011101111111101;
    rom[3962] = 16'b0011101111111101;
    rom[3963] = 16'b0011101111111101;
    rom[3964] = 16'b0011101111111101;
    rom[3965] = 16'b0011101111111101;
    rom[3966] = 16'b0011101111111101;
    rom[3967] = 16'b0011101111111101;
    rom[3968] = 16'b0011101111111110;
    rom[3969] = 16'b0011101111111110;
    rom[3970] = 16'b0011101111111110;
    rom[3971] = 16'b0011101111111110;
    rom[3972] = 16'b0011101111111110;
    rom[3973] = 16'b0011101111111110;
    rom[3974] = 16'b0011101111111110;
    rom[3975] = 16'b0011101111111110;
    rom[3976] = 16'b0011101111111110;
    rom[3977] = 16'b0011101111111110;
    rom[3978] = 16'b0011101111111110;
    rom[3979] = 16'b0011101111111110;
    rom[3980] = 16'b0011101111111110;
    rom[3981] = 16'b0011101111111110;
    rom[3982] = 16'b0011101111111110;
    rom[3983] = 16'b0011101111111110;
    rom[3984] = 16'b0011101111111110;
    rom[3985] = 16'b0011101111111110;
    rom[3986] = 16'b0011101111111110;
    rom[3987] = 16'b0011101111111110;
    rom[3988] = 16'b0011101111111110;
    rom[3989] = 16'b0011101111111110;
    rom[3990] = 16'b0011101111111110;
    rom[3991] = 16'b0011101111111110;
    rom[3992] = 16'b0011101111111110;
    rom[3993] = 16'b0011101111111110;
    rom[3994] = 16'b0011101111111110;
    rom[3995] = 16'b0011101111111110;
    rom[3996] = 16'b0011101111111110;
    rom[3997] = 16'b0011101111111111;
    rom[3998] = 16'b0011101111111111;
    rom[3999] = 16'b0011101111111111;
    rom[4000] = 16'b0011101111111111;
    rom[4001] = 16'b0011101111111111;
    rom[4002] = 16'b0011101111111111;
    rom[4003] = 16'b0011101111111111;
    rom[4004] = 16'b0011101111111111;
    rom[4005] = 16'b0011101111111111;
    rom[4006] = 16'b0011101111111111;
    rom[4007] = 16'b0011101111111111;
    rom[4008] = 16'b0011101111111111;
    rom[4009] = 16'b0011101111111111;
    rom[4010] = 16'b0011101111111111;
    rom[4011] = 16'b0011101111111111;
    rom[4012] = 16'b0011101111111111;
    rom[4013] = 16'b0011101111111111;
    rom[4014] = 16'b0011101111111111;
    rom[4015] = 16'b0011101111111111;
    rom[4016] = 16'b0011101111111111;
    rom[4017] = 16'b0011101111111111;
    rom[4018] = 16'b0011101111111111;
    rom[4019] = 16'b0011101111111111;
    rom[4020] = 16'b0011101111111111;
    rom[4021] = 16'b0011101111111111;
    rom[4022] = 16'b0011101111111111;
    rom[4023] = 16'b0011101111111111;
    rom[4024] = 16'b0011101111111111;
    rom[4025] = 16'b0011101111111111;
    rom[4026] = 16'b0011101111111111;
    rom[4027] = 16'b0011101111111111;
    rom[4028] = 16'b0011101111111111;
    rom[4029] = 16'b0011101111111111;
    rom[4030] = 16'b0011101111111111;
    rom[4031] = 16'b0011101111111111;
    rom[4032] = 16'b0011101111111111;
    rom[4033] = 16'b0011101111111111;
    rom[4034] = 16'b0011101111111111;
    rom[4035] = 16'b0011101111111111;
    rom[4036] = 16'b0011101111111111;
    rom[4037] = 16'b0011101111111111;
    rom[4038] = 16'b0011101111111111;
    rom[4039] = 16'b0011110000000000;
    rom[4040] = 16'b0011110000000000;
    rom[4041] = 16'b0011110000000000;
    rom[4042] = 16'b0011110000000000;
    rom[4043] = 16'b0011110000000000;
    rom[4044] = 16'b0011110000000000;
    rom[4045] = 16'b0011110000000000;
    rom[4046] = 16'b0011110000000000;
    rom[4047] = 16'b0011110000000000;
    rom[4048] = 16'b0011110000000000;
    rom[4049] = 16'b0011110000000000;
    rom[4050] = 16'b0011110000000000;
    rom[4051] = 16'b0011110000000000;
    rom[4052] = 16'b0011110000000000;
    rom[4053] = 16'b0011110000000000;
    rom[4054] = 16'b0011110000000000;
    rom[4055] = 16'b0011110000000000;
    rom[4056] = 16'b0011110000000000;
    rom[4057] = 16'b0011110000000000;
    rom[4058] = 16'b0011110000000000;
    rom[4059] = 16'b0011110000000000;
    rom[4060] = 16'b0011110000000000;
    rom[4061] = 16'b0011110000000000;
    rom[4062] = 16'b0011110000000000;
    rom[4063] = 16'b0011110000000000;
    rom[4064] = 16'b0011110000000000;
    rom[4065] = 16'b0011110000000000;
    rom[4066] = 16'b0011110000000000;
    rom[4067] = 16'b0011110000000000;
    rom[4068] = 16'b0011110000000000;
    rom[4069] = 16'b0011110000000000;
    rom[4070] = 16'b0011110000000000;
    rom[4071] = 16'b0011110000000000;
    rom[4072] = 16'b0011110000000000;
    rom[4073] = 16'b0011110000000000;
    rom[4074] = 16'b0011110000000000;
    rom[4075] = 16'b0011110000000000;
    rom[4076] = 16'b0011110000000000;
    rom[4077] = 16'b0011110000000000;
    rom[4078] = 16'b0011110000000000;
    rom[4079] = 16'b0011110000000000;
    rom[4080] = 16'b0011110000000000;
    rom[4081] = 16'b0011110000000000;
    rom[4082] = 16'b0011110000000000;
    rom[4083] = 16'b0011110000000000;
    rom[4084] = 16'b0011110000000000;
    rom[4085] = 16'b0011110000000000;
    rom[4086] = 16'b0011110000000000;
    rom[4087] = 16'b0011110000000000;
    rom[4088] = 16'b0011110000000000;
    rom[4089] = 16'b0011110000000000;
    rom[4090] = 16'b0011110000000000;
    rom[4091] = 16'b0011110000000000;
    rom[4092] = 16'b0011110000000000;
    rom[4093] = 16'b0011110000000000;
    rom[4094] = 16'b0011110000000000;
    rom[4095] = 16'b0011110000000000;
  end
  always @(posedge clk_0_clk) begin
    if(popPre_ready) begin
      rom_spinal_port0 <= rom[sinAddr];
    end
  end

  always @(posedge clk_0_clk) begin
    if(popPre_fire) begin
      rom_spinal_port1 <= rom[cosAddr];
    end
  end

  assign popPre_valid = index_tvalid;
  assign index_tready = popPre_ready;
  assign index = index_tdata[13:0];
  assign lowHalf = index[12 : 0];
  assign highHalf = index[13 : 13];
  assign lowQuarter = lowHalf[11 : 0];
  assign highQuarter = lowHalf[12 : 12];
  assign sinFlip = (|highQuarter);
  assign sinNeg = (|highHalf);
  assign sinAddr = (sinFlip ? t_sinAddr : lowQuarter);
  assign sinRdOut = rom_spinal_port0;
  assign negSinRdOut = {1'b1,sinRdOut[14 : 0]};
  assign sinVal = (sinNegDly ? negSinRdOut : sinRdOut);
  assign cosFlip = (((! (|highHalf)) && (! (|highQuarter))) || ((|highHalf) && (! (|highQuarter))));
  assign cosNeg = (((! (|highHalf)) && (|highQuarter)) || ((|highHalf) && (! (|highQuarter))));
  assign cosAddr = (cosFlip ? t_cosAddr : lowQuarter);
  assign popPre_fire = (popPre_valid && popPre_ready);
  assign cosRdOut = rom_spinal_port1;
  assign negCosRdOut = {1'b1,cosRdOut[14 : 0]};
  assign cosVal = (cosNegDly ? negCosRdOut : cosRdOut);
  assign sinCos_tdata = {sinVal,cosVal};
  always @(*) begin
    popPre_ready = popPre_m2sPipe_ready;
    if((! popPre_m2sPipe_valid)) begin
      popPre_ready = 1'b1;
    end
  end

  assign popPre_m2sPipe_valid = popPre_rValid;
  assign sinCos_tvalid = popPre_m2sPipe_valid;
  assign popPre_m2sPipe_ready = sinCos_tready;
  always @(posedge clk_0_clk) begin
    if(popPre_ready) begin
      sinNegDly <= sinNeg;
    end
    if(popPre_ready) begin
      cosNegDly <= cosNeg;
    end
  end

  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      popPre_rValid <= 1'b0;
    end else begin
      if(popPre_ready) begin
        popPre_rValid <= popPre_valid;
      end
    end
  end


endmodule

module CosSinIndexGen_1 (
  input  wire          pos_valid,
  input  wire [15:0]   pos_payload,
  output wire          index_tvalid,
  input  wire          index_tready,
  output wire [15:0]   index_tdata,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire       [13:0]   pipe_io_push_payload;
  reg                 pipe_io_pop_ready;
  wire                rom_io_invFreq_valid;
  wire       [31:0]   rom_io_invFreq_payload;
  wire                posIn_from_ip_m_axis_result_tvalid;
  wire       [31:0]   posIn_from_ip_m_axis_result_tdata;
  wire                indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid;
  wire       [31:0]   indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata;
  wire                indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid;
  wire       [31:0]   indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata;
  wire                pipe_io_push_ready;
  wire                pipe_io_pop_valid;
  wire       [13:0]   pipe_io_pop_payload;
  wire       [7:0]    pipe_io_occupancy;
  wire       [7:0]    pipe_io_availability;
  wire       [15:0]   t_index_tdata;
  reg                 flag;
  reg        [6:0]    posCnt;
  wire                posIn_valid;
  wire       [15:0]   posIn_payload;
  wire                invFreqFlow_valid;
  wire       [31:0]   invFreqFlow_payload;
  wire                pipeOut_valid;
  wire                pipeOut_ready;
  wire       [13:0]   pipeOut_payload;
  reg                 indexGen_pipe_io_pop_rValid;
  reg        [13:0]   indexGen_pipe_io_pop_rData;

  assign t_index_tdata = {2'd0, pipeOut_payload};
  InvFreqRom_1 rom (
    .io_invFreq_valid   (rom_io_invFreq_valid              ), //o
    .io_invFreq_ready   (posIn_from_ip_m_axis_result_tvalid), //i
    .io_invFreq_payload (rom_io_invFreq_payload[31:0]      ), //o
    .clk_0_clk          (clk_0_clk                         ), //i
    .clk_0_resetn       (clk_0_resetn                      )  //i
  );
  fp32int16d4 posIn_from_ip (
    .aclk                 (clk_0_clk                              ), //i
    .s_axis_a_tvalid      (posIn_valid                            ), //i
    .s_axis_a_tdata       (posIn_payload[15:0]                    ), //i
    .m_axis_result_tvalid (posIn_from_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (posIn_from_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32mul8 indexGen_posIn_from_ip_m_axis_result_mul_ip (
    .aclk                 (clk_0_clk                                                            ), //i
    .s_axis_a_tvalid      (posIn_from_ip_m_axis_result_tvalid                                   ), //i
    .s_axis_a_tdata       (posIn_from_ip_m_axis_result_tdata[31:0]                              ), //i
    .s_axis_b_tvalid      (invFreqFlow_valid                                                    ), //i
    .s_axis_b_tdata       (invFreqFlow_payload[31:0]                                            ), //i
    .m_axis_result_tvalid (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0])  //o
  );
  fp32toint32d6 indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip (
    .aclk                 (clk_0_clk                                                                                         ), //i
    .s_axis_a_tvalid      (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tvalid                                  ), //i
    .s_axis_a_tdata       (indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_tdata[31:0]                             ), //i
    .m_axis_result_tvalid (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[31:0])  //o
  );
  StreamFifo_141 pipe (
    .io_push_valid   (indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tvalid), //i
    .io_push_ready   (pipe_io_push_ready                                                                           ), //o
    .io_push_payload (pipe_io_push_payload[13:0]                                                                   ), //i
    .io_pop_valid    (pipe_io_pop_valid                                                                            ), //o
    .io_pop_ready    (pipe_io_pop_ready                                                                            ), //i
    .io_pop_payload  (pipe_io_pop_payload[13:0]                                                                    ), //o
    .io_flush        (1'b0                                                                                         ), //i
    .io_occupancy    (pipe_io_occupancy[7:0]                                                                       ), //o
    .io_availability (pipe_io_availability[7:0]                                                                    ), //o
    .clk_0_clk       (clk_0_clk                                                                                    ), //i
    .clk_0_resetn    (clk_0_resetn                                                                                 )  //i
  );
  assign posIn_valid = flag;
  assign posIn_payload = pos_payload;
  assign invFreqFlow_valid = posIn_from_ip_m_axis_result_tvalid;
  assign invFreqFlow_payload = rom_io_invFreq_payload;
  assign pipe_io_push_payload = indexGen_indexGen_posIn_from_ip_m_axis_result_mul_ip_m_axis_result_to_ip_m_axis_result_tdata[13 : 0];
  always @(*) begin
    pipe_io_pop_ready = pipeOut_ready;
    if((! pipeOut_valid)) begin
      pipe_io_pop_ready = 1'b1;
    end
  end

  assign pipeOut_valid = indexGen_pipe_io_pop_rValid;
  assign pipeOut_payload = indexGen_pipe_io_pop_rData;
  assign index_tvalid = pipeOut_valid;
  assign pipeOut_ready = index_tready;
  assign index_tdata = t_index_tdata;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      flag <= 1'b0;
      posCnt <= 7'h0;
      indexGen_pipe_io_pop_rValid <= 1'b0;
    end else begin
      if(pos_valid) begin
        flag <= 1'b1;
      end
      if(flag) begin
        posCnt <= (posCnt + 7'h01);
        if((posCnt == 7'h7f)) begin
          posCnt <= 7'h0;
          flag <= 1'b0;
        end
      end
      if(pipe_io_pop_ready) begin
        indexGen_pipe_io_pop_rValid <= pipe_io_pop_valid;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(pipe_io_pop_ready) begin
      indexGen_pipe_io_pop_rData <= pipe_io_pop_payload;
    end
  end


endmodule

module RoPERotate_1 (
  input  wire          io_input_valid,
  input  wire [15:0]   io_input_payload,
  output wire          io_output_valid,
  output wire [15:0]   io_output_payload_A,
  output wire [15:0]   io_output_payload_B,
  input  wire [6:0]    cfg_dim,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                rotateFifo_io_push_valid;
  reg                 rotateFifo_io_pop_ready;
  reg                 bypassFifo_io_pop_ready;
  wire                rotateFifo_io_push_ready;
  wire                rotateFifo_io_pop_valid;
  wire       [15:0]   rotateFifo_io_pop_payload;
  wire       [6:0]    rotateFifo_io_occupancy;
  wire       [6:0]    rotateFifo_io_availability;
  wire                bypassFifo_io_push_ready;
  wire                bypassFifo_io_pop_valid;
  wire       [15:0]   bypassFifo_io_pop_payload;
  wire       [6:0]    bypassFifo_io_occupancy;
  wire       [6:0]    bypassFifo_io_availability;
  wire       [5:0]    halfDim;
  reg        [5:0]    inCnt;
  wire                inCntOvf;
  reg                 inputSecondHalf;
  wire                rotateFifoPop_valid;
  wire                rotateFifoPop_ready;
  wire       [15:0]   rotateFifoPop_payload;
  reg                 rotator_rotateFifo_io_pop_rValid;
  reg        [15:0]   rotator_rotateFifo_io_pop_rData;
  wire                bypassFifoPop_valid;
  wire                bypassFifoPop_ready;
  wire       [15:0]   bypassFifoPop_payload;
  reg                 rotator_bypassFifo_io_pop_rValid;
  reg        [15:0]   rotator_bypassFifo_io_pop_rData;
  wire                rotateOut_valid;
  wire       [15:0]   rotateOut_payload;
  reg        [5:0]    rotateOutCnt;
  wire                rotateOutCntOvf;
  reg                 rotateSecondHalf;
  wire                in2Rotate_valid;
  wire       [15:0]   in2Rotate_payload;
  wire       [15:0]   r;

  StreamFifo_142 rotateFifo (
    .io_push_valid   (rotateFifo_io_push_valid       ), //i
    .io_push_ready   (rotateFifo_io_push_ready       ), //o
    .io_push_payload (io_input_payload[15:0]         ), //i
    .io_pop_valid    (rotateFifo_io_pop_valid        ), //o
    .io_pop_ready    (rotateFifo_io_pop_ready        ), //i
    .io_pop_payload  (rotateFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (rotateFifo_io_occupancy[6:0]   ), //o
    .io_availability (rotateFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                      ), //i
    .clk_0_resetn    (clk_0_resetn                   )  //i
  );
  StreamFifo_142 bypassFifo (
    .io_push_valid   (io_input_valid                 ), //i
    .io_push_ready   (bypassFifo_io_push_ready       ), //o
    .io_push_payload (io_input_payload[15:0]         ), //i
    .io_pop_valid    (bypassFifo_io_pop_valid        ), //o
    .io_pop_ready    (bypassFifo_io_pop_ready        ), //i
    .io_pop_payload  (bypassFifo_io_pop_payload[15:0]), //o
    .io_flush        (1'b0                           ), //i
    .io_occupancy    (bypassFifo_io_occupancy[6:0]   ), //o
    .io_availability (bypassFifo_io_availability[6:0]), //o
    .clk_0_clk       (clk_0_clk                      ), //i
    .clk_0_resetn    (clk_0_resetn                   )  //i
  );
  assign halfDim = cfg_dim[6 : 1];
  assign inCntOvf = (inCnt == halfDim);
  always @(*) begin
    rotateFifo_io_pop_ready = rotateFifoPop_ready;
    if((! rotateFifoPop_valid)) begin
      rotateFifo_io_pop_ready = 1'b1;
    end
  end

  assign rotateFifoPop_valid = rotator_rotateFifo_io_pop_rValid;
  assign rotateFifoPop_payload = rotator_rotateFifo_io_pop_rData;
  assign rotateFifo_io_push_valid = (io_input_valid && (! inputSecondHalf));
  always @(*) begin
    bypassFifo_io_pop_ready = bypassFifoPop_ready;
    if((! bypassFifoPop_valid)) begin
      bypassFifo_io_pop_ready = 1'b1;
    end
  end

  assign bypassFifoPop_valid = rotator_bypassFifo_io_pop_rValid;
  assign bypassFifoPop_payload = rotator_bypassFifo_io_pop_rData;
  assign rotateOutCntOvf = (rotateOutCnt == halfDim);
  assign r = io_input_payload;
  assign in2Rotate_valid = (io_input_valid && inputSecondHalf);
  assign in2Rotate_payload = {(! r[15]),r[14 : 0]};
  assign rotateOut_valid = (rotateSecondHalf ? rotateFifoPop_valid : in2Rotate_valid);
  assign rotateOut_payload = (rotateSecondHalf ? rotateFifoPop_payload : in2Rotate_payload);
  assign rotateFifoPop_ready = rotateSecondHalf;
  assign io_output_valid = rotateOut_valid;
  assign io_output_payload_A = bypassFifoPop_payload;
  assign io_output_payload_B = rotateOut_payload;
  assign bypassFifoPop_ready = rotateOut_valid;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      inCnt <= 6'h0;
      inputSecondHalf <= 1'b0;
      rotator_rotateFifo_io_pop_rValid <= 1'b0;
      rotator_bypassFifo_io_pop_rValid <= 1'b0;
      rotateOutCnt <= 6'h0;
      rotateSecondHalf <= 1'b0;
    end else begin
      if(io_input_valid) begin
        inCnt <= (inCnt + 6'h01);
        if(inCntOvf) begin
          inCnt <= 6'h0;
          inputSecondHalf <= (! inputSecondHalf);
        end
      end
      if(rotateFifo_io_pop_ready) begin
        rotator_rotateFifo_io_pop_rValid <= rotateFifo_io_pop_valid;
      end
      if(bypassFifo_io_pop_ready) begin
        rotator_bypassFifo_io_pop_rValid <= bypassFifo_io_pop_valid;
      end
      if(rotateOut_valid) begin
        rotateOutCnt <= (rotateOutCnt + 6'h01);
        if(rotateOutCntOvf) begin
          rotateOutCnt <= 6'h0;
          rotateSecondHalf <= (! rotateSecondHalf);
        end
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(rotateFifo_io_pop_ready) begin
      rotator_rotateFifo_io_pop_rData <= rotateFifo_io_pop_payload;
    end
    if(bypassFifo_io_pop_ready) begin
      rotator_bypassFifo_io_pop_rData <= bypassFifo_io_pop_payload;
    end
  end


endmodule

//StreamDemux_15 replaced by StreamDemux_17

//StreamDemux_16 replaced by StreamDemux_17

//StreamFifo_119 replaced by StreamFifo_116

//StreamFifo_118 replaced by StreamFifo_116

//StreamFifo_117 replaced by StreamFifo_116

module StreamFifo_116 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [3:0]    io_occupancy,
  output wire [3:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [3:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [3:0]    logic_ptr_pop;
  wire       [3:0]    logic_ptr_occupancy;
  wire       [3:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [3:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [3:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [3:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [2:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [2:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [2:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [2:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [2:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [3:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [3:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [3:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [3:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:7];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 4'b0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 4'b0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[3];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 4'b0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 4'b0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[3];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 4'b0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 4'b0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[2:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[2:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 4'b0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 4'b0001);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 4'b0000;
      logic_ptr_pop <= 4'b0000;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 4'b1000;
      logic_ptr_arb_fmax_fullTracker_value <= 4'b0000;
      logic_ptr_fmax_value <= 4'b0000;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 4'b0000;
      logic_fmaxAvail_value <= 4'b1000;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 4'b1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 4'b0000;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 4'b0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 4'b0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 4'b0000;
        logic_ptr_pop <= 4'b0000;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 4'b0000;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 4'b0000;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 4'b1000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamDemux_17 (
  input  wire [0:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready
);

  wire                t_when;
  wire                t_when_1;

  assign t_when = (1'b0 != io_select);
  assign t_when_1 = (1'b1 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
  end

  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end


endmodule

//StreamFifo_123 replaced by StreamFifo_120

//StreamFifo_122 replaced by StreamFifo_120

//StreamFifo_121 replaced by StreamFifo_120

module StreamFifo_120 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [6:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [6:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [6:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [6:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [6:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:63];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 7'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[6];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 7'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 7'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[6];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 7'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 7'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 7'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 7'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      logic_ptr_fmax_value <= 7'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
      logic_fmaxAvail_value <= 7'h40;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 7'h40;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 7'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 7'h40;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifo_127 replaced by StreamFifo_124

//StreamFifo_126 replaced by StreamFifo_124

//StreamFifo_125 replaced by StreamFifo_124

module StreamFifo_124 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [127:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [127:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [127:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [127:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [127:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [127:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [127:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFork_5 replaced by StreamFork_6

module StreamFork_6 (
  input  wire          io_input_valid,
  output wire          io_input_ready,
  output wire          io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire          io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output wire          io_outputs_2_valid,
  input  wire          io_outputs_2_ready,
  output wire          io_outputs_3_valid,
  input  wire          io_outputs_3_ready
);


  assign io_input_ready = (((io_outputs_0_ready && io_outputs_1_ready) && io_outputs_2_ready) && io_outputs_3_ready);
  assign io_outputs_0_valid = (io_input_valid && io_input_ready);
  assign io_outputs_1_valid = (io_input_valid && io_input_ready);
  assign io_outputs_2_valid = (io_input_valid && io_input_ready);
  assign io_outputs_3_valid = (io_input_valid && io_input_ready);

endmodule

//StreamFifoCtrl replaced by StreamFifoCtrl_3

//StreamFifoVldProbe replaced by StreamFifoVldProbe_3

//Vec2to1 replaced by Vec2to1_3

//StreamMux_42 replaced by StreamMux_49

//StreamDemux_18 replaced by StreamDemux_25

//StreamFifoCtrl_1 replaced by StreamFifoCtrl_3

//StreamFifoVldProbe_1 replaced by StreamFifoVldProbe_3

//Vec2to1_1 replaced by Vec2to1_3

//StreamMux_43 replaced by StreamMux_49

//StreamDemux_19 replaced by StreamDemux_25

//StreamFifoCtrl_2 replaced by StreamFifoCtrl_3

//StreamFifoVldProbe_2 replaced by StreamFifoVldProbe_3

//Vec2to1_2 replaced by Vec2to1_3

//StreamMux_44 replaced by StreamMux_49

//StreamDemux_20 replaced by StreamDemux_25

module StreamFifoCtrl_3 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  output wire          rdPort_cmd_valid,
  output wire [4:0]    rdPort_cmd_payload,
  input  wire [511:0]  rdPort_rsp,
  output wire          wrPort_valid,
  output wire [4:0]    wrPort_payload_address,
  output wire [511:0]  wrPort_payload_data,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign wrPort_valid = io_push_fire;
  assign wrPort_payload_address = logic_ptr_push[4:0];
  assign wrPort_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign rdPort_cmd_valid = logic_pop_addressGen_fire;
  assign rdPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = rdPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifoVldProbe_3 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire          io_popVldNext,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                popOut_valid;
  wire                popOut_ready;
  wire       [511:0]  popOut_payload;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg                 logic_pop_sync_rValid;
  reg                 logic_pop_sync_rValidNext;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [511:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign io_pop_valid = popOut_valid;
  assign popOut_ready = io_pop_ready;
  assign io_pop_payload = popOut_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  always @(*) begin
    logic_pop_sync_rValidNext = logic_pop_sync_rValid;
    if(logic_pop_addressGen_ready) begin
      logic_pop_sync_rValidNext = (! logic_ptr_empty);
    end
  end

  assign io_popVldNext = logic_pop_sync_rValidNext;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_pop_sync_rValid <= 1'b0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      logic_pop_sync_rValid <= logic_pop_sync_rValidNext;
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module Vec2to1_3 (
  input  wire          io_in0_valid,
  input  wire [15:0]   io_in0_payload_0,
  input  wire [15:0]   io_in0_payload_1,
  input  wire [15:0]   io_in0_payload_2,
  input  wire [15:0]   io_in0_payload_3,
  input  wire [15:0]   io_in0_payload_4,
  input  wire [15:0]   io_in0_payload_5,
  input  wire [15:0]   io_in0_payload_6,
  input  wire [15:0]   io_in0_payload_7,
  input  wire [15:0]   io_in0_payload_8,
  input  wire [15:0]   io_in0_payload_9,
  input  wire [15:0]   io_in0_payload_10,
  input  wire [15:0]   io_in0_payload_11,
  input  wire [15:0]   io_in0_payload_12,
  input  wire [15:0]   io_in0_payload_13,
  input  wire [15:0]   io_in0_payload_14,
  input  wire [15:0]   io_in0_payload_15,
  input  wire [15:0]   io_in0_payload_16,
  input  wire [15:0]   io_in0_payload_17,
  input  wire [15:0]   io_in0_payload_18,
  input  wire [15:0]   io_in0_payload_19,
  input  wire [15:0]   io_in0_payload_20,
  input  wire [15:0]   io_in0_payload_21,
  input  wire [15:0]   io_in0_payload_22,
  input  wire [15:0]   io_in0_payload_23,
  input  wire [15:0]   io_in0_payload_24,
  input  wire [15:0]   io_in0_payload_25,
  input  wire [15:0]   io_in0_payload_26,
  input  wire [15:0]   io_in0_payload_27,
  input  wire [15:0]   io_in0_payload_28,
  input  wire [15:0]   io_in0_payload_29,
  input  wire [15:0]   io_in0_payload_30,
  input  wire [15:0]   io_in0_payload_31,
  input  wire          io_in1_valid,
  input  wire [15:0]   io_in1_payload_0,
  input  wire [15:0]   io_in1_payload_1,
  input  wire [15:0]   io_in1_payload_2,
  input  wire [15:0]   io_in1_payload_3,
  input  wire [15:0]   io_in1_payload_4,
  input  wire [15:0]   io_in1_payload_5,
  input  wire [15:0]   io_in1_payload_6,
  input  wire [15:0]   io_in1_payload_7,
  input  wire [15:0]   io_in1_payload_8,
  input  wire [15:0]   io_in1_payload_9,
  input  wire [15:0]   io_in1_payload_10,
  input  wire [15:0]   io_in1_payload_11,
  input  wire [15:0]   io_in1_payload_12,
  input  wire [15:0]   io_in1_payload_13,
  input  wire [15:0]   io_in1_payload_14,
  input  wire [15:0]   io_in1_payload_15,
  input  wire [15:0]   io_in1_payload_16,
  input  wire [15:0]   io_in1_payload_17,
  input  wire [15:0]   io_in1_payload_18,
  input  wire [15:0]   io_in1_payload_19,
  input  wire [15:0]   io_in1_payload_20,
  input  wire [15:0]   io_in1_payload_21,
  input  wire [15:0]   io_in1_payload_22,
  input  wire [15:0]   io_in1_payload_23,
  input  wire [15:0]   io_in1_payload_24,
  input  wire [15:0]   io_in1_payload_25,
  input  wire [15:0]   io_in1_payload_26,
  input  wire [15:0]   io_in1_payload_27,
  input  wire [15:0]   io_in1_payload_28,
  input  wire [15:0]   io_in1_payload_29,
  input  wire [15:0]   io_in1_payload_30,
  input  wire [15:0]   io_in1_payload_31,
  output wire          io_res_valid,
  output wire [15:0]   io_res_payload_0,
  output wire [15:0]   io_res_payload_1,
  output wire [15:0]   io_res_payload_2,
  output wire [15:0]   io_res_payload_3,
  output wire [15:0]   io_res_payload_4,
  output wire [15:0]   io_res_payload_5,
  output wire [15:0]   io_res_payload_6,
  output wire [15:0]   io_res_payload_7,
  output wire [15:0]   io_res_payload_8,
  output wire [15:0]   io_res_payload_9,
  output wire [15:0]   io_res_payload_10,
  output wire [15:0]   io_res_payload_11,
  output wire [15:0]   io_res_payload_12,
  output wire [15:0]   io_res_payload_13,
  output wire [15:0]   io_res_payload_14,
  output wire [15:0]   io_res_payload_15,
  output wire [15:0]   io_res_payload_16,
  output wire [15:0]   io_res_payload_17,
  output wire [15:0]   io_res_payload_18,
  output wire [15:0]   io_res_payload_19,
  output wire [15:0]   io_res_payload_20,
  output wire [15:0]   io_res_payload_21,
  output wire [15:0]   io_res_payload_22,
  output wire [15:0]   io_res_payload_23,
  output wire [15:0]   io_res_payload_24,
  output wire [15:0]   io_res_payload_25,
  output wire [15:0]   io_res_payload_26,
  output wire [15:0]   io_res_payload_27,
  output wire [15:0]   io_res_payload_28,
  output wire [15:0]   io_res_payload_29,
  output wire [15:0]   io_res_payload_30,
  output wire [15:0]   io_res_payload_31,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  wire                flowVec0_0_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_0_mul_ip_m_axis_result_tdata;
  wire                flowVec0_1_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_1_mul_ip_m_axis_result_tdata;
  wire                flowVec0_2_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_2_mul_ip_m_axis_result_tdata;
  wire                flowVec0_3_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_3_mul_ip_m_axis_result_tdata;
  wire                flowVec0_4_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_4_mul_ip_m_axis_result_tdata;
  wire                flowVec0_5_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_5_mul_ip_m_axis_result_tdata;
  wire                flowVec0_6_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_6_mul_ip_m_axis_result_tdata;
  wire                flowVec0_7_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_7_mul_ip_m_axis_result_tdata;
  wire                flowVec0_8_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_8_mul_ip_m_axis_result_tdata;
  wire                flowVec0_9_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_9_mul_ip_m_axis_result_tdata;
  wire                flowVec0_10_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_10_mul_ip_m_axis_result_tdata;
  wire                flowVec0_11_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_11_mul_ip_m_axis_result_tdata;
  wire                flowVec0_12_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_12_mul_ip_m_axis_result_tdata;
  wire                flowVec0_13_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_13_mul_ip_m_axis_result_tdata;
  wire                flowVec0_14_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_14_mul_ip_m_axis_result_tdata;
  wire                flowVec0_15_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_15_mul_ip_m_axis_result_tdata;
  wire                flowVec0_16_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_16_mul_ip_m_axis_result_tdata;
  wire                flowVec0_17_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_17_mul_ip_m_axis_result_tdata;
  wire                flowVec0_18_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_18_mul_ip_m_axis_result_tdata;
  wire                flowVec0_19_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_19_mul_ip_m_axis_result_tdata;
  wire                flowVec0_20_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_20_mul_ip_m_axis_result_tdata;
  wire                flowVec0_21_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_21_mul_ip_m_axis_result_tdata;
  wire                flowVec0_22_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_22_mul_ip_m_axis_result_tdata;
  wire                flowVec0_23_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_23_mul_ip_m_axis_result_tdata;
  wire                flowVec0_24_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_24_mul_ip_m_axis_result_tdata;
  wire                flowVec0_25_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_25_mul_ip_m_axis_result_tdata;
  wire                flowVec0_26_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_26_mul_ip_m_axis_result_tdata;
  wire                flowVec0_27_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_27_mul_ip_m_axis_result_tdata;
  wire                flowVec0_28_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_28_mul_ip_m_axis_result_tdata;
  wire                flowVec0_29_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_29_mul_ip_m_axis_result_tdata;
  wire                flowVec0_30_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_30_mul_ip_m_axis_result_tdata;
  wire                flowVec0_31_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_31_mul_ip_m_axis_result_tdata;
  wire                flowVec0_0_valid;
  wire       [15:0]   flowVec0_0_payload;
  wire                flowVec0_1_valid;
  wire       [15:0]   flowVec0_1_payload;
  wire                flowVec0_2_valid;
  wire       [15:0]   flowVec0_2_payload;
  wire                flowVec0_3_valid;
  wire       [15:0]   flowVec0_3_payload;
  wire                flowVec0_4_valid;
  wire       [15:0]   flowVec0_4_payload;
  wire                flowVec0_5_valid;
  wire       [15:0]   flowVec0_5_payload;
  wire                flowVec0_6_valid;
  wire       [15:0]   flowVec0_6_payload;
  wire                flowVec0_7_valid;
  wire       [15:0]   flowVec0_7_payload;
  wire                flowVec0_8_valid;
  wire       [15:0]   flowVec0_8_payload;
  wire                flowVec0_9_valid;
  wire       [15:0]   flowVec0_9_payload;
  wire                flowVec0_10_valid;
  wire       [15:0]   flowVec0_10_payload;
  wire                flowVec0_11_valid;
  wire       [15:0]   flowVec0_11_payload;
  wire                flowVec0_12_valid;
  wire       [15:0]   flowVec0_12_payload;
  wire                flowVec0_13_valid;
  wire       [15:0]   flowVec0_13_payload;
  wire                flowVec0_14_valid;
  wire       [15:0]   flowVec0_14_payload;
  wire                flowVec0_15_valid;
  wire       [15:0]   flowVec0_15_payload;
  wire                flowVec0_16_valid;
  wire       [15:0]   flowVec0_16_payload;
  wire                flowVec0_17_valid;
  wire       [15:0]   flowVec0_17_payload;
  wire                flowVec0_18_valid;
  wire       [15:0]   flowVec0_18_payload;
  wire                flowVec0_19_valid;
  wire       [15:0]   flowVec0_19_payload;
  wire                flowVec0_20_valid;
  wire       [15:0]   flowVec0_20_payload;
  wire                flowVec0_21_valid;
  wire       [15:0]   flowVec0_21_payload;
  wire                flowVec0_22_valid;
  wire       [15:0]   flowVec0_22_payload;
  wire                flowVec0_23_valid;
  wire       [15:0]   flowVec0_23_payload;
  wire                flowVec0_24_valid;
  wire       [15:0]   flowVec0_24_payload;
  wire                flowVec0_25_valid;
  wire       [15:0]   flowVec0_25_payload;
  wire                flowVec0_26_valid;
  wire       [15:0]   flowVec0_26_payload;
  wire                flowVec0_27_valid;
  wire       [15:0]   flowVec0_27_payload;
  wire                flowVec0_28_valid;
  wire       [15:0]   flowVec0_28_payload;
  wire                flowVec0_29_valid;
  wire       [15:0]   flowVec0_29_payload;
  wire                flowVec0_30_valid;
  wire       [15:0]   flowVec0_30_payload;
  wire                flowVec0_31_valid;
  wire       [15:0]   flowVec0_31_payload;
  wire                flowVec1_0_valid;
  wire       [15:0]   flowVec1_0_payload;
  wire                flowVec1_1_valid;
  wire       [15:0]   flowVec1_1_payload;
  wire                flowVec1_2_valid;
  wire       [15:0]   flowVec1_2_payload;
  wire                flowVec1_3_valid;
  wire       [15:0]   flowVec1_3_payload;
  wire                flowVec1_4_valid;
  wire       [15:0]   flowVec1_4_payload;
  wire                flowVec1_5_valid;
  wire       [15:0]   flowVec1_5_payload;
  wire                flowVec1_6_valid;
  wire       [15:0]   flowVec1_6_payload;
  wire                flowVec1_7_valid;
  wire       [15:0]   flowVec1_7_payload;
  wire                flowVec1_8_valid;
  wire       [15:0]   flowVec1_8_payload;
  wire                flowVec1_9_valid;
  wire       [15:0]   flowVec1_9_payload;
  wire                flowVec1_10_valid;
  wire       [15:0]   flowVec1_10_payload;
  wire                flowVec1_11_valid;
  wire       [15:0]   flowVec1_11_payload;
  wire                flowVec1_12_valid;
  wire       [15:0]   flowVec1_12_payload;
  wire                flowVec1_13_valid;
  wire       [15:0]   flowVec1_13_payload;
  wire                flowVec1_14_valid;
  wire       [15:0]   flowVec1_14_payload;
  wire                flowVec1_15_valid;
  wire       [15:0]   flowVec1_15_payload;
  wire                flowVec1_16_valid;
  wire       [15:0]   flowVec1_16_payload;
  wire                flowVec1_17_valid;
  wire       [15:0]   flowVec1_17_payload;
  wire                flowVec1_18_valid;
  wire       [15:0]   flowVec1_18_payload;
  wire                flowVec1_19_valid;
  wire       [15:0]   flowVec1_19_payload;
  wire                flowVec1_20_valid;
  wire       [15:0]   flowVec1_20_payload;
  wire                flowVec1_21_valid;
  wire       [15:0]   flowVec1_21_payload;
  wire                flowVec1_22_valid;
  wire       [15:0]   flowVec1_22_payload;
  wire                flowVec1_23_valid;
  wire       [15:0]   flowVec1_23_payload;
  wire                flowVec1_24_valid;
  wire       [15:0]   flowVec1_24_payload;
  wire                flowVec1_25_valid;
  wire       [15:0]   flowVec1_25_payload;
  wire                flowVec1_26_valid;
  wire       [15:0]   flowVec1_26_payload;
  wire                flowVec1_27_valid;
  wire       [15:0]   flowVec1_27_payload;
  wire                flowVec1_28_valid;
  wire       [15:0]   flowVec1_28_payload;
  wire                flowVec1_29_valid;
  wire       [15:0]   flowVec1_29_payload;
  wire                flowVec1_30_valid;
  wire       [15:0]   flowVec1_30_payload;
  wire                flowVec1_31_valid;
  wire       [15:0]   flowVec1_31_payload;
  reg                 t_io_res_valid;
  reg                 t_io_res_valid_1;
  reg                 t_io_res_valid_2;
  reg                 t_io_res_valid_3;
  reg                 t_io_res_valid_4;
  reg                 t_io_res_valid_5;

  fp16mul6 flowVec0_0_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_0_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_0_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_0_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_0_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_0_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_0_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_1_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_1_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_1_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_1_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_1_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_1_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_1_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_2_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_2_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_2_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_2_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_2_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_2_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_2_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_3_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_3_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_3_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_3_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_3_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_3_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_3_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_4_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_4_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_4_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_4_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_4_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_4_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_4_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_5_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_5_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_5_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_5_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_5_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_5_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_5_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_6_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_6_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_6_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_6_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_6_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_6_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_6_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_7_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_7_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_7_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_7_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_7_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_7_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_7_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_8_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_8_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_8_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_8_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_8_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_8_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_8_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_9_mul_ip (
    .aclk                 (clk_1_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_9_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_9_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_9_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_9_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_9_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_9_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_10_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_10_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_10_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_10_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_10_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_10_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_10_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_11_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_11_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_11_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_11_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_11_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_11_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_11_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_12_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_12_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_12_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_12_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_12_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_12_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_12_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_13_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_13_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_13_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_13_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_13_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_13_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_13_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_14_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_14_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_14_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_14_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_14_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_14_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_14_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_15_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_15_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_15_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_15_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_15_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_15_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_15_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_16_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_16_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_16_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_16_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_16_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_16_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_16_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_17_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_17_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_17_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_17_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_17_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_17_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_17_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_18_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_18_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_18_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_18_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_18_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_18_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_18_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_19_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_19_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_19_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_19_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_19_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_19_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_19_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_20_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_20_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_20_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_20_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_20_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_20_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_20_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_21_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_21_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_21_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_21_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_21_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_21_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_21_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_22_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_22_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_22_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_22_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_22_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_22_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_22_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_23_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_23_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_23_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_23_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_23_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_23_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_23_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_24_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_24_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_24_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_24_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_24_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_24_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_24_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_25_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_25_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_25_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_25_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_25_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_25_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_25_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_26_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_26_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_26_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_26_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_26_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_26_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_26_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_27_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_27_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_27_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_27_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_27_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_27_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_27_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_28_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_28_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_28_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_28_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_28_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_28_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_28_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_29_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_29_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_29_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_29_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_29_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_29_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_29_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_30_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_30_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_30_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_30_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_30_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_30_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_30_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_31_mul_ip (
    .aclk                 (clk_1_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_31_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_31_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_31_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_31_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_31_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_31_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  assign flowVec0_0_valid = 1'b1;
  assign flowVec0_1_valid = 1'b1;
  assign flowVec0_2_valid = 1'b1;
  assign flowVec0_3_valid = 1'b1;
  assign flowVec0_4_valid = 1'b1;
  assign flowVec0_5_valid = 1'b1;
  assign flowVec0_6_valid = 1'b1;
  assign flowVec0_7_valid = 1'b1;
  assign flowVec0_8_valid = 1'b1;
  assign flowVec0_9_valid = 1'b1;
  assign flowVec0_10_valid = 1'b1;
  assign flowVec0_11_valid = 1'b1;
  assign flowVec0_12_valid = 1'b1;
  assign flowVec0_13_valid = 1'b1;
  assign flowVec0_14_valid = 1'b1;
  assign flowVec0_15_valid = 1'b1;
  assign flowVec0_16_valid = 1'b1;
  assign flowVec0_17_valid = 1'b1;
  assign flowVec0_18_valid = 1'b1;
  assign flowVec0_19_valid = 1'b1;
  assign flowVec0_20_valid = 1'b1;
  assign flowVec0_21_valid = 1'b1;
  assign flowVec0_22_valid = 1'b1;
  assign flowVec0_23_valid = 1'b1;
  assign flowVec0_24_valid = 1'b1;
  assign flowVec0_25_valid = 1'b1;
  assign flowVec0_26_valid = 1'b1;
  assign flowVec0_27_valid = 1'b1;
  assign flowVec0_28_valid = 1'b1;
  assign flowVec0_29_valid = 1'b1;
  assign flowVec0_30_valid = 1'b1;
  assign flowVec0_31_valid = 1'b1;
  assign flowVec0_0_payload = io_in0_payload_0;
  assign flowVec0_1_payload = io_in0_payload_1;
  assign flowVec0_2_payload = io_in0_payload_2;
  assign flowVec0_3_payload = io_in0_payload_3;
  assign flowVec0_4_payload = io_in0_payload_4;
  assign flowVec0_5_payload = io_in0_payload_5;
  assign flowVec0_6_payload = io_in0_payload_6;
  assign flowVec0_7_payload = io_in0_payload_7;
  assign flowVec0_8_payload = io_in0_payload_8;
  assign flowVec0_9_payload = io_in0_payload_9;
  assign flowVec0_10_payload = io_in0_payload_10;
  assign flowVec0_11_payload = io_in0_payload_11;
  assign flowVec0_12_payload = io_in0_payload_12;
  assign flowVec0_13_payload = io_in0_payload_13;
  assign flowVec0_14_payload = io_in0_payload_14;
  assign flowVec0_15_payload = io_in0_payload_15;
  assign flowVec0_16_payload = io_in0_payload_16;
  assign flowVec0_17_payload = io_in0_payload_17;
  assign flowVec0_18_payload = io_in0_payload_18;
  assign flowVec0_19_payload = io_in0_payload_19;
  assign flowVec0_20_payload = io_in0_payload_20;
  assign flowVec0_21_payload = io_in0_payload_21;
  assign flowVec0_22_payload = io_in0_payload_22;
  assign flowVec0_23_payload = io_in0_payload_23;
  assign flowVec0_24_payload = io_in0_payload_24;
  assign flowVec0_25_payload = io_in0_payload_25;
  assign flowVec0_26_payload = io_in0_payload_26;
  assign flowVec0_27_payload = io_in0_payload_27;
  assign flowVec0_28_payload = io_in0_payload_28;
  assign flowVec0_29_payload = io_in0_payload_29;
  assign flowVec0_30_payload = io_in0_payload_30;
  assign flowVec0_31_payload = io_in0_payload_31;
  assign flowVec1_0_valid = 1'b1;
  assign flowVec1_1_valid = 1'b1;
  assign flowVec1_2_valid = 1'b1;
  assign flowVec1_3_valid = 1'b1;
  assign flowVec1_4_valid = 1'b1;
  assign flowVec1_5_valid = 1'b1;
  assign flowVec1_6_valid = 1'b1;
  assign flowVec1_7_valid = 1'b1;
  assign flowVec1_8_valid = 1'b1;
  assign flowVec1_9_valid = 1'b1;
  assign flowVec1_10_valid = 1'b1;
  assign flowVec1_11_valid = 1'b1;
  assign flowVec1_12_valid = 1'b1;
  assign flowVec1_13_valid = 1'b1;
  assign flowVec1_14_valid = 1'b1;
  assign flowVec1_15_valid = 1'b1;
  assign flowVec1_16_valid = 1'b1;
  assign flowVec1_17_valid = 1'b1;
  assign flowVec1_18_valid = 1'b1;
  assign flowVec1_19_valid = 1'b1;
  assign flowVec1_20_valid = 1'b1;
  assign flowVec1_21_valid = 1'b1;
  assign flowVec1_22_valid = 1'b1;
  assign flowVec1_23_valid = 1'b1;
  assign flowVec1_24_valid = 1'b1;
  assign flowVec1_25_valid = 1'b1;
  assign flowVec1_26_valid = 1'b1;
  assign flowVec1_27_valid = 1'b1;
  assign flowVec1_28_valid = 1'b1;
  assign flowVec1_29_valid = 1'b1;
  assign flowVec1_30_valid = 1'b1;
  assign flowVec1_31_valid = 1'b1;
  assign flowVec1_0_payload = io_in1_payload_0;
  assign flowVec1_1_payload = io_in1_payload_1;
  assign flowVec1_2_payload = io_in1_payload_2;
  assign flowVec1_3_payload = io_in1_payload_3;
  assign flowVec1_4_payload = io_in1_payload_4;
  assign flowVec1_5_payload = io_in1_payload_5;
  assign flowVec1_6_payload = io_in1_payload_6;
  assign flowVec1_7_payload = io_in1_payload_7;
  assign flowVec1_8_payload = io_in1_payload_8;
  assign flowVec1_9_payload = io_in1_payload_9;
  assign flowVec1_10_payload = io_in1_payload_10;
  assign flowVec1_11_payload = io_in1_payload_11;
  assign flowVec1_12_payload = io_in1_payload_12;
  assign flowVec1_13_payload = io_in1_payload_13;
  assign flowVec1_14_payload = io_in1_payload_14;
  assign flowVec1_15_payload = io_in1_payload_15;
  assign flowVec1_16_payload = io_in1_payload_16;
  assign flowVec1_17_payload = io_in1_payload_17;
  assign flowVec1_18_payload = io_in1_payload_18;
  assign flowVec1_19_payload = io_in1_payload_19;
  assign flowVec1_20_payload = io_in1_payload_20;
  assign flowVec1_21_payload = io_in1_payload_21;
  assign flowVec1_22_payload = io_in1_payload_22;
  assign flowVec1_23_payload = io_in1_payload_23;
  assign flowVec1_24_payload = io_in1_payload_24;
  assign flowVec1_25_payload = io_in1_payload_25;
  assign flowVec1_26_payload = io_in1_payload_26;
  assign flowVec1_27_payload = io_in1_payload_27;
  assign flowVec1_28_payload = io_in1_payload_28;
  assign flowVec1_29_payload = io_in1_payload_29;
  assign flowVec1_30_payload = io_in1_payload_30;
  assign flowVec1_31_payload = io_in1_payload_31;
  assign io_res_payload_0 = flowVec0_0_mul_ip_m_axis_result_tdata;
  assign io_res_payload_1 = flowVec0_1_mul_ip_m_axis_result_tdata;
  assign io_res_payload_2 = flowVec0_2_mul_ip_m_axis_result_tdata;
  assign io_res_payload_3 = flowVec0_3_mul_ip_m_axis_result_tdata;
  assign io_res_payload_4 = flowVec0_4_mul_ip_m_axis_result_tdata;
  assign io_res_payload_5 = flowVec0_5_mul_ip_m_axis_result_tdata;
  assign io_res_payload_6 = flowVec0_6_mul_ip_m_axis_result_tdata;
  assign io_res_payload_7 = flowVec0_7_mul_ip_m_axis_result_tdata;
  assign io_res_payload_8 = flowVec0_8_mul_ip_m_axis_result_tdata;
  assign io_res_payload_9 = flowVec0_9_mul_ip_m_axis_result_tdata;
  assign io_res_payload_10 = flowVec0_10_mul_ip_m_axis_result_tdata;
  assign io_res_payload_11 = flowVec0_11_mul_ip_m_axis_result_tdata;
  assign io_res_payload_12 = flowVec0_12_mul_ip_m_axis_result_tdata;
  assign io_res_payload_13 = flowVec0_13_mul_ip_m_axis_result_tdata;
  assign io_res_payload_14 = flowVec0_14_mul_ip_m_axis_result_tdata;
  assign io_res_payload_15 = flowVec0_15_mul_ip_m_axis_result_tdata;
  assign io_res_payload_16 = flowVec0_16_mul_ip_m_axis_result_tdata;
  assign io_res_payload_17 = flowVec0_17_mul_ip_m_axis_result_tdata;
  assign io_res_payload_18 = flowVec0_18_mul_ip_m_axis_result_tdata;
  assign io_res_payload_19 = flowVec0_19_mul_ip_m_axis_result_tdata;
  assign io_res_payload_20 = flowVec0_20_mul_ip_m_axis_result_tdata;
  assign io_res_payload_21 = flowVec0_21_mul_ip_m_axis_result_tdata;
  assign io_res_payload_22 = flowVec0_22_mul_ip_m_axis_result_tdata;
  assign io_res_payload_23 = flowVec0_23_mul_ip_m_axis_result_tdata;
  assign io_res_payload_24 = flowVec0_24_mul_ip_m_axis_result_tdata;
  assign io_res_payload_25 = flowVec0_25_mul_ip_m_axis_result_tdata;
  assign io_res_payload_26 = flowVec0_26_mul_ip_m_axis_result_tdata;
  assign io_res_payload_27 = flowVec0_27_mul_ip_m_axis_result_tdata;
  assign io_res_payload_28 = flowVec0_28_mul_ip_m_axis_result_tdata;
  assign io_res_payload_29 = flowVec0_29_mul_ip_m_axis_result_tdata;
  assign io_res_payload_30 = flowVec0_30_mul_ip_m_axis_result_tdata;
  assign io_res_payload_31 = flowVec0_31_mul_ip_m_axis_result_tdata;
  assign io_res_valid = t_io_res_valid_5;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      t_io_res_valid <= 1'b0;
      t_io_res_valid_1 <= 1'b0;
      t_io_res_valid_2 <= 1'b0;
      t_io_res_valid_3 <= 1'b0;
      t_io_res_valid_4 <= 1'b0;
      t_io_res_valid_5 <= 1'b0;
    end else begin
      t_io_res_valid <= (io_in0_valid && io_in1_valid);
      t_io_res_valid_1 <= t_io_res_valid;
      t_io_res_valid_2 <= t_io_res_valid_1;
      t_io_res_valid_3 <= t_io_res_valid_2;
      t_io_res_valid_4 <= t_io_res_valid_3;
      t_io_res_valid_5 <= t_io_res_valid_4;
    end
  end


endmodule

//StreamMux_45 replaced by StreamMux_49

//StreamDemux_21 replaced by StreamDemux_25

//StreamFifo_131 replaced by StreamFifo_128

//StreamFifo_130 replaced by StreamFifo_128

//StreamFifo_129 replaced by StreamFifo_128

module StreamFifo_128 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [511:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifoPipe_6 replaced by StreamFifoPipe_7

module StreamFifoPipe_7 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [71:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [71:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [71:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                popOut_valid;
  reg                 popOut_ready;
  wire       [71:0]   popOut_payload;
  wire                popOut_m2sPipe_valid;
  wire                popOut_m2sPipe_ready;
  wire       [71:0]   popOut_m2sPipe_payload;
  reg                 popOut_rValid;
  reg        [71:0]   popOut_rData;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [71:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [71:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [71:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "ultra" *) reg [71:0] logic_ram [0:4095];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  always @(*) begin
    popOut_ready = popOut_m2sPipe_ready;
    if((! popOut_m2sPipe_valid)) begin
      popOut_ready = 1'b1;
    end
  end

  assign popOut_m2sPipe_valid = popOut_rValid;
  assign popOut_m2sPipe_payload = popOut_rData;
  assign io_pop_valid = popOut_m2sPipe_valid;
  assign popOut_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload = popOut_m2sPipe_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      popOut_rValid <= 1'b0;
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if(popOut_ready) begin
        popOut_rValid <= popOut_valid;
      end
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(popOut_ready) begin
      popOut_rData <= popOut_payload;
    end
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_132 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 6'h20) == 6'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (6'h20 - logic_ptr_occupancy);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_133 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [13:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [13:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [7:0]    io_occupancy,
  output wire [7:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [13:0]   logic_ram_spinal_port1;
  wire       [13:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [7:0]    logic_ptr_push;
  reg        [7:0]    logic_ptr_pop;
  wire       [7:0]    logic_ptr_occupancy;
  wire       [7:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [6:0]    logic_push_onRam_write_payload_address;
  wire       [13:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [6:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [6:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [6:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [6:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [13:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [7:0]    logic_pop_sync_popReg;
  reg [13:0] logic_ram [0:127];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 8'h80) == 8'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[6:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[6:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (8'h80 - logic_ptr_occupancy);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 8'h0;
      logic_ptr_pop <= 8'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 8'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 8'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 8'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 8'h0;
        logic_ptr_pop <= 8'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 8'h0;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module InvFreqRom (
  output wire          io_invFreq_valid,
  input  wire          io_invFreq_ready,
  output wire [31:0]   io_invFreq_payload,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [31:0]   rom_spinal_port0;
  wire                popPre_valid;
  reg                 popPre_ready;
  reg        [5:0]    addr;
  wire                popPre_fire;
  wire       [31:0]   rdOut;
  wire                popPre_m2sPipe_valid;
  wire                popPre_m2sPipe_ready;
  reg                 popPre_rValid;
  reg [31:0] rom [0:63];

  initial begin
    rom[0] = 32'b01000101001000101111100110000011;
    rom[1] = 32'b01000101000011010010000101011000;
    rom[2] = 32'b01000100111101000110110101110001;
    rom[3] = 32'b01000100110100111010101001011110;
    rom[4] = 32'b01000100101101110100101101110110;
    rom[5] = 32'b01000100100111101011101000001011;
    rom[6] = 32'b01000100100010010111001110100010;
    rom[7] = 32'b01000100011011100000111001111000;
    rom[8] = 32'b01000100010011100010011000000001;
    rom[9] = 32'b01000100001100101000010001101000;
    rom[10] = 32'b01000100000110101001011011101100;
    rom[11] = 32'b01000100000001011101111001111000;
    rom[12] = 32'b01000011111001111101101000000010;
    rom[13] = 32'b01000011110010001100011001110100;
    rom[14] = 32'b01000011101011011101110100111010;
    rom[15] = 32'b01000011100101101000111101100111;
    rom[16] = 32'b01000011100000100110000100110110;
    rom[17] = 32'b01000011011000011100111011110011;
    rom[18] = 32'b01000011010000111000101011000001;
    rom[19] = 32'b01000011001010010101010100011000;
    rom[20] = 32'b01000011000100101010001011000101;
    rom[21] = 32'b01000010111111011111011001111001;
    rom[22] = 32'b01000010110110111110110000110110;
    rom[23] = 32'b01000010101111100111000111111010;
    rom[24] = 32'b01000010101001001110101100110100;
    rom[25] = 32'b01000010100011101101000001010011;
    rom[26] = 32'b01000010011101110101011111011111;
    rom[27] = 32'b01000010010101100011000011000000;
    rom[28] = 32'b01000010001110010111101100110101;
    rom[29] = 32'b01000010001000001001111011000011;
    rom[30] = 32'b01000010000010110001011101100001;
    rom[31] = 32'b01000001111100001110010101110001;
    rom[32] = 32'b01000001110100001001101110001010;
    rom[33] = 32'b01000001101101001010010110001111;
    rom[34] = 32'b01000001100111000110111100000001;
    rom[35] = 32'b01000001100001110111011101000111;
    rom[36] = 32'b01000001011010101001111000001000;
    rom[37] = 32'b01000001010010110010101110010100;
    rom[38] = 32'b01000001001011111111000000101011;
    rom[39] = 32'b01000001000110000101101100101110;
    rom[40] = 32'b01000001000000111110111101011101;
    rom[41] = 32'b01000000111001001000000010000101;
    rom[42] = 32'b01000000110001011101111111100110;
    rom[43] = 32'b01000000101010110101101000110011;
    rom[44] = 32'b01000000100101000110001010010000;
    rom[45] = 32'b01000000100000000111111100000010;
    rom[46] = 32'b01000000010111101000101111001111;
    rom[47] = 32'b01000000010000001011011110001110;
    rom[48] = 32'b01000000001001101110001011010100;
    rom[49] = 32'b01000000000100001000010001110010;
    rom[50] = 32'b00111111111110100100101100110101;
    rom[51] = 32'b00111111110110001011111011010111;
    rom[52] = 32'b00111111101110111011000110100000;
    rom[53] = 32'b00111111101000101000100101000011;
    rom[54] = 32'b00111111100011001100000000100011;
    rom[55] = 32'b00111111011100111100010100010111;
    rom[56] = 32'b00111111010100110001100010010100;
    rom[57] = 32'b00111111001101101100110100110111;
    rom[58] = 32'b00111111000111100100110010111000;
    rom[59] = 32'b00111111000010010001010011110110;
    rom[60] = 32'b00111110111011010110101010000001;
    rom[61] = 32'b00111110110011011001100000000100;
    rom[62] = 32'b00111110101100100000100101110010;
    rom[63] = 32'b00111110100110100010110001110001;
  end
  always @(posedge clk_1_clk) begin
    if(popPre_ready) begin
      rom_spinal_port0 <= rom[addr];
    end
  end

  assign popPre_fire = (popPre_valid && popPre_ready);
  assign rdOut = rom_spinal_port0;
  assign popPre_valid = 1'b1;
  assign io_invFreq_payload = rdOut;
  always @(*) begin
    popPre_ready = popPre_m2sPipe_ready;
    if((! popPre_m2sPipe_valid)) begin
      popPre_ready = 1'b1;
    end
  end

  assign popPre_m2sPipe_valid = popPre_rValid;
  assign io_invFreq_valid = popPre_m2sPipe_valid;
  assign popPre_m2sPipe_ready = io_invFreq_ready;
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      addr <= 6'h0;
      popPre_rValid <= 1'b0;
    end else begin
      if(popPre_fire) begin
        addr <= (addr + 6'h01);
      end
      if(popPre_ready) begin
        popPre_rValid <= popPre_valid;
      end
    end
  end


endmodule

//StreamFifo_135 replaced by StreamFifo_134

module StreamFifo_134 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_1_clk,
  input  wire          clk_1_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:63];

  always @(posedge clk_1_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 7'h40) == 7'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (7'h40 - logic_ptr_occupancy);
  always @(posedge clk_1_clk or negedge clk_1_resetn) begin
    if(!clk_1_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
    end
  end

  always @(posedge clk_1_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifoCtrl_4 replaced by StreamFifoCtrl_7

//StreamFifoVldProbe_4 replaced by StreamFifoVldProbe_7

//Vec2to1_4 replaced by Vec2to1_7

//StreamMux_46 replaced by StreamMux_49

//StreamDemux_22 replaced by StreamDemux_25

//StreamFifoCtrl_5 replaced by StreamFifoCtrl_7

//StreamFifoVldProbe_5 replaced by StreamFifoVldProbe_7

//Vec2to1_5 replaced by Vec2to1_7

//StreamMux_47 replaced by StreamMux_49

//StreamDemux_23 replaced by StreamDemux_25

//StreamFifoCtrl_6 replaced by StreamFifoCtrl_7

//StreamFifoVldProbe_6 replaced by StreamFifoVldProbe_7

//Vec2to1_6 replaced by Vec2to1_7

//StreamMux_48 replaced by StreamMux_49

//StreamDemux_24 replaced by StreamDemux_25

module StreamFifoCtrl_7 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  output wire          rdPort_cmd_valid,
  output wire [4:0]    rdPort_cmd_payload,
  input  wire [511:0]  rdPort_rsp,
  output wire          wrPort_valid,
  output wire [4:0]    wrPort_payload_address,
  output wire [511:0]  wrPort_payload_data,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign wrPort_valid = io_push_fire;
  assign wrPort_payload_address = logic_ptr_push[4:0];
  assign wrPort_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign rdPort_cmd_valid = logic_pop_addressGen_fire;
  assign rdPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = rdPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifoVldProbe_7 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  output wire          io_popVldNext,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                popOut_valid;
  wire                popOut_ready;
  wire       [511:0]  popOut_payload;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg                 logic_pop_sync_rValid;
  reg                 logic_pop_sync_rValidNext;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  reg [511:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign io_pop_valid = popOut_valid;
  assign popOut_ready = io_pop_ready;
  assign io_pop_payload = popOut_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  always @(*) begin
    logic_pop_sync_rValidNext = logic_pop_sync_rValid;
    if(logic_pop_addressGen_ready) begin
      logic_pop_sync_rValidNext = (! logic_ptr_empty);
    end
  end

  assign io_popVldNext = logic_pop_sync_rValidNext;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_pop_sync_rValid <= 1'b0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      logic_pop_sync_rValid <= logic_pop_sync_rValidNext;
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module Vec2to1_7 (
  input  wire          io_in0_valid,
  input  wire [15:0]   io_in0_payload_0,
  input  wire [15:0]   io_in0_payload_1,
  input  wire [15:0]   io_in0_payload_2,
  input  wire [15:0]   io_in0_payload_3,
  input  wire [15:0]   io_in0_payload_4,
  input  wire [15:0]   io_in0_payload_5,
  input  wire [15:0]   io_in0_payload_6,
  input  wire [15:0]   io_in0_payload_7,
  input  wire [15:0]   io_in0_payload_8,
  input  wire [15:0]   io_in0_payload_9,
  input  wire [15:0]   io_in0_payload_10,
  input  wire [15:0]   io_in0_payload_11,
  input  wire [15:0]   io_in0_payload_12,
  input  wire [15:0]   io_in0_payload_13,
  input  wire [15:0]   io_in0_payload_14,
  input  wire [15:0]   io_in0_payload_15,
  input  wire [15:0]   io_in0_payload_16,
  input  wire [15:0]   io_in0_payload_17,
  input  wire [15:0]   io_in0_payload_18,
  input  wire [15:0]   io_in0_payload_19,
  input  wire [15:0]   io_in0_payload_20,
  input  wire [15:0]   io_in0_payload_21,
  input  wire [15:0]   io_in0_payload_22,
  input  wire [15:0]   io_in0_payload_23,
  input  wire [15:0]   io_in0_payload_24,
  input  wire [15:0]   io_in0_payload_25,
  input  wire [15:0]   io_in0_payload_26,
  input  wire [15:0]   io_in0_payload_27,
  input  wire [15:0]   io_in0_payload_28,
  input  wire [15:0]   io_in0_payload_29,
  input  wire [15:0]   io_in0_payload_30,
  input  wire [15:0]   io_in0_payload_31,
  input  wire          io_in1_valid,
  input  wire [15:0]   io_in1_payload_0,
  input  wire [15:0]   io_in1_payload_1,
  input  wire [15:0]   io_in1_payload_2,
  input  wire [15:0]   io_in1_payload_3,
  input  wire [15:0]   io_in1_payload_4,
  input  wire [15:0]   io_in1_payload_5,
  input  wire [15:0]   io_in1_payload_6,
  input  wire [15:0]   io_in1_payload_7,
  input  wire [15:0]   io_in1_payload_8,
  input  wire [15:0]   io_in1_payload_9,
  input  wire [15:0]   io_in1_payload_10,
  input  wire [15:0]   io_in1_payload_11,
  input  wire [15:0]   io_in1_payload_12,
  input  wire [15:0]   io_in1_payload_13,
  input  wire [15:0]   io_in1_payload_14,
  input  wire [15:0]   io_in1_payload_15,
  input  wire [15:0]   io_in1_payload_16,
  input  wire [15:0]   io_in1_payload_17,
  input  wire [15:0]   io_in1_payload_18,
  input  wire [15:0]   io_in1_payload_19,
  input  wire [15:0]   io_in1_payload_20,
  input  wire [15:0]   io_in1_payload_21,
  input  wire [15:0]   io_in1_payload_22,
  input  wire [15:0]   io_in1_payload_23,
  input  wire [15:0]   io_in1_payload_24,
  input  wire [15:0]   io_in1_payload_25,
  input  wire [15:0]   io_in1_payload_26,
  input  wire [15:0]   io_in1_payload_27,
  input  wire [15:0]   io_in1_payload_28,
  input  wire [15:0]   io_in1_payload_29,
  input  wire [15:0]   io_in1_payload_30,
  input  wire [15:0]   io_in1_payload_31,
  output wire          io_res_valid,
  output wire [15:0]   io_res_payload_0,
  output wire [15:0]   io_res_payload_1,
  output wire [15:0]   io_res_payload_2,
  output wire [15:0]   io_res_payload_3,
  output wire [15:0]   io_res_payload_4,
  output wire [15:0]   io_res_payload_5,
  output wire [15:0]   io_res_payload_6,
  output wire [15:0]   io_res_payload_7,
  output wire [15:0]   io_res_payload_8,
  output wire [15:0]   io_res_payload_9,
  output wire [15:0]   io_res_payload_10,
  output wire [15:0]   io_res_payload_11,
  output wire [15:0]   io_res_payload_12,
  output wire [15:0]   io_res_payload_13,
  output wire [15:0]   io_res_payload_14,
  output wire [15:0]   io_res_payload_15,
  output wire [15:0]   io_res_payload_16,
  output wire [15:0]   io_res_payload_17,
  output wire [15:0]   io_res_payload_18,
  output wire [15:0]   io_res_payload_19,
  output wire [15:0]   io_res_payload_20,
  output wire [15:0]   io_res_payload_21,
  output wire [15:0]   io_res_payload_22,
  output wire [15:0]   io_res_payload_23,
  output wire [15:0]   io_res_payload_24,
  output wire [15:0]   io_res_payload_25,
  output wire [15:0]   io_res_payload_26,
  output wire [15:0]   io_res_payload_27,
  output wire [15:0]   io_res_payload_28,
  output wire [15:0]   io_res_payload_29,
  output wire [15:0]   io_res_payload_30,
  output wire [15:0]   io_res_payload_31,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  wire                flowVec0_0_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_0_mul_ip_m_axis_result_tdata;
  wire                flowVec0_1_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_1_mul_ip_m_axis_result_tdata;
  wire                flowVec0_2_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_2_mul_ip_m_axis_result_tdata;
  wire                flowVec0_3_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_3_mul_ip_m_axis_result_tdata;
  wire                flowVec0_4_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_4_mul_ip_m_axis_result_tdata;
  wire                flowVec0_5_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_5_mul_ip_m_axis_result_tdata;
  wire                flowVec0_6_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_6_mul_ip_m_axis_result_tdata;
  wire                flowVec0_7_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_7_mul_ip_m_axis_result_tdata;
  wire                flowVec0_8_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_8_mul_ip_m_axis_result_tdata;
  wire                flowVec0_9_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_9_mul_ip_m_axis_result_tdata;
  wire                flowVec0_10_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_10_mul_ip_m_axis_result_tdata;
  wire                flowVec0_11_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_11_mul_ip_m_axis_result_tdata;
  wire                flowVec0_12_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_12_mul_ip_m_axis_result_tdata;
  wire                flowVec0_13_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_13_mul_ip_m_axis_result_tdata;
  wire                flowVec0_14_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_14_mul_ip_m_axis_result_tdata;
  wire                flowVec0_15_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_15_mul_ip_m_axis_result_tdata;
  wire                flowVec0_16_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_16_mul_ip_m_axis_result_tdata;
  wire                flowVec0_17_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_17_mul_ip_m_axis_result_tdata;
  wire                flowVec0_18_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_18_mul_ip_m_axis_result_tdata;
  wire                flowVec0_19_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_19_mul_ip_m_axis_result_tdata;
  wire                flowVec0_20_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_20_mul_ip_m_axis_result_tdata;
  wire                flowVec0_21_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_21_mul_ip_m_axis_result_tdata;
  wire                flowVec0_22_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_22_mul_ip_m_axis_result_tdata;
  wire                flowVec0_23_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_23_mul_ip_m_axis_result_tdata;
  wire                flowVec0_24_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_24_mul_ip_m_axis_result_tdata;
  wire                flowVec0_25_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_25_mul_ip_m_axis_result_tdata;
  wire                flowVec0_26_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_26_mul_ip_m_axis_result_tdata;
  wire                flowVec0_27_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_27_mul_ip_m_axis_result_tdata;
  wire                flowVec0_28_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_28_mul_ip_m_axis_result_tdata;
  wire                flowVec0_29_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_29_mul_ip_m_axis_result_tdata;
  wire                flowVec0_30_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_30_mul_ip_m_axis_result_tdata;
  wire                flowVec0_31_mul_ip_m_axis_result_tvalid;
  wire       [15:0]   flowVec0_31_mul_ip_m_axis_result_tdata;
  wire                flowVec0_0_valid;
  wire       [15:0]   flowVec0_0_payload;
  wire                flowVec0_1_valid;
  wire       [15:0]   flowVec0_1_payload;
  wire                flowVec0_2_valid;
  wire       [15:0]   flowVec0_2_payload;
  wire                flowVec0_3_valid;
  wire       [15:0]   flowVec0_3_payload;
  wire                flowVec0_4_valid;
  wire       [15:0]   flowVec0_4_payload;
  wire                flowVec0_5_valid;
  wire       [15:0]   flowVec0_5_payload;
  wire                flowVec0_6_valid;
  wire       [15:0]   flowVec0_6_payload;
  wire                flowVec0_7_valid;
  wire       [15:0]   flowVec0_7_payload;
  wire                flowVec0_8_valid;
  wire       [15:0]   flowVec0_8_payload;
  wire                flowVec0_9_valid;
  wire       [15:0]   flowVec0_9_payload;
  wire                flowVec0_10_valid;
  wire       [15:0]   flowVec0_10_payload;
  wire                flowVec0_11_valid;
  wire       [15:0]   flowVec0_11_payload;
  wire                flowVec0_12_valid;
  wire       [15:0]   flowVec0_12_payload;
  wire                flowVec0_13_valid;
  wire       [15:0]   flowVec0_13_payload;
  wire                flowVec0_14_valid;
  wire       [15:0]   flowVec0_14_payload;
  wire                flowVec0_15_valid;
  wire       [15:0]   flowVec0_15_payload;
  wire                flowVec0_16_valid;
  wire       [15:0]   flowVec0_16_payload;
  wire                flowVec0_17_valid;
  wire       [15:0]   flowVec0_17_payload;
  wire                flowVec0_18_valid;
  wire       [15:0]   flowVec0_18_payload;
  wire                flowVec0_19_valid;
  wire       [15:0]   flowVec0_19_payload;
  wire                flowVec0_20_valid;
  wire       [15:0]   flowVec0_20_payload;
  wire                flowVec0_21_valid;
  wire       [15:0]   flowVec0_21_payload;
  wire                flowVec0_22_valid;
  wire       [15:0]   flowVec0_22_payload;
  wire                flowVec0_23_valid;
  wire       [15:0]   flowVec0_23_payload;
  wire                flowVec0_24_valid;
  wire       [15:0]   flowVec0_24_payload;
  wire                flowVec0_25_valid;
  wire       [15:0]   flowVec0_25_payload;
  wire                flowVec0_26_valid;
  wire       [15:0]   flowVec0_26_payload;
  wire                flowVec0_27_valid;
  wire       [15:0]   flowVec0_27_payload;
  wire                flowVec0_28_valid;
  wire       [15:0]   flowVec0_28_payload;
  wire                flowVec0_29_valid;
  wire       [15:0]   flowVec0_29_payload;
  wire                flowVec0_30_valid;
  wire       [15:0]   flowVec0_30_payload;
  wire                flowVec0_31_valid;
  wire       [15:0]   flowVec0_31_payload;
  wire                flowVec1_0_valid;
  wire       [15:0]   flowVec1_0_payload;
  wire                flowVec1_1_valid;
  wire       [15:0]   flowVec1_1_payload;
  wire                flowVec1_2_valid;
  wire       [15:0]   flowVec1_2_payload;
  wire                flowVec1_3_valid;
  wire       [15:0]   flowVec1_3_payload;
  wire                flowVec1_4_valid;
  wire       [15:0]   flowVec1_4_payload;
  wire                flowVec1_5_valid;
  wire       [15:0]   flowVec1_5_payload;
  wire                flowVec1_6_valid;
  wire       [15:0]   flowVec1_6_payload;
  wire                flowVec1_7_valid;
  wire       [15:0]   flowVec1_7_payload;
  wire                flowVec1_8_valid;
  wire       [15:0]   flowVec1_8_payload;
  wire                flowVec1_9_valid;
  wire       [15:0]   flowVec1_9_payload;
  wire                flowVec1_10_valid;
  wire       [15:0]   flowVec1_10_payload;
  wire                flowVec1_11_valid;
  wire       [15:0]   flowVec1_11_payload;
  wire                flowVec1_12_valid;
  wire       [15:0]   flowVec1_12_payload;
  wire                flowVec1_13_valid;
  wire       [15:0]   flowVec1_13_payload;
  wire                flowVec1_14_valid;
  wire       [15:0]   flowVec1_14_payload;
  wire                flowVec1_15_valid;
  wire       [15:0]   flowVec1_15_payload;
  wire                flowVec1_16_valid;
  wire       [15:0]   flowVec1_16_payload;
  wire                flowVec1_17_valid;
  wire       [15:0]   flowVec1_17_payload;
  wire                flowVec1_18_valid;
  wire       [15:0]   flowVec1_18_payload;
  wire                flowVec1_19_valid;
  wire       [15:0]   flowVec1_19_payload;
  wire                flowVec1_20_valid;
  wire       [15:0]   flowVec1_20_payload;
  wire                flowVec1_21_valid;
  wire       [15:0]   flowVec1_21_payload;
  wire                flowVec1_22_valid;
  wire       [15:0]   flowVec1_22_payload;
  wire                flowVec1_23_valid;
  wire       [15:0]   flowVec1_23_payload;
  wire                flowVec1_24_valid;
  wire       [15:0]   flowVec1_24_payload;
  wire                flowVec1_25_valid;
  wire       [15:0]   flowVec1_25_payload;
  wire                flowVec1_26_valid;
  wire       [15:0]   flowVec1_26_payload;
  wire                flowVec1_27_valid;
  wire       [15:0]   flowVec1_27_payload;
  wire                flowVec1_28_valid;
  wire       [15:0]   flowVec1_28_payload;
  wire                flowVec1_29_valid;
  wire       [15:0]   flowVec1_29_payload;
  wire                flowVec1_30_valid;
  wire       [15:0]   flowVec1_30_payload;
  wire                flowVec1_31_valid;
  wire       [15:0]   flowVec1_31_payload;
  reg                 t_io_res_valid;
  reg                 t_io_res_valid_1;
  reg                 t_io_res_valid_2;
  reg                 t_io_res_valid_3;
  reg                 t_io_res_valid_4;
  reg                 t_io_res_valid_5;

  fp16mul6 flowVec0_0_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_0_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_0_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_0_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_0_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_0_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_0_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_1_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_1_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_1_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_1_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_1_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_1_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_1_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_2_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_2_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_2_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_2_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_2_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_2_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_2_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_3_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_3_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_3_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_3_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_3_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_3_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_3_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_4_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_4_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_4_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_4_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_4_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_4_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_4_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_5_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_5_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_5_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_5_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_5_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_5_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_5_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_6_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_6_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_6_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_6_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_6_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_6_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_6_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_7_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_7_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_7_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_7_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_7_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_7_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_7_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_8_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_8_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_8_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_8_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_8_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_8_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_8_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_9_mul_ip (
    .aclk                 (clk_0_clk                                  ), //i
    .s_axis_a_tvalid      (flowVec0_9_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_9_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_9_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_9_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_9_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_9_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_10_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_10_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_10_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_10_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_10_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_10_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_10_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_11_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_11_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_11_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_11_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_11_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_11_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_11_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_12_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_12_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_12_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_12_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_12_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_12_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_12_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_13_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_13_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_13_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_13_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_13_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_13_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_13_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_14_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_14_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_14_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_14_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_14_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_14_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_14_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_15_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_15_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_15_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_15_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_15_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_15_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_15_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_16_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_16_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_16_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_16_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_16_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_16_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_16_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_17_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_17_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_17_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_17_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_17_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_17_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_17_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_18_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_18_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_18_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_18_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_18_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_18_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_18_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_19_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_19_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_19_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_19_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_19_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_19_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_19_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_20_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_20_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_20_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_20_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_20_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_20_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_20_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_21_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_21_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_21_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_21_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_21_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_21_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_21_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_22_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_22_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_22_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_22_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_22_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_22_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_22_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_23_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_23_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_23_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_23_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_23_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_23_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_23_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_24_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_24_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_24_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_24_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_24_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_24_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_24_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_25_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_25_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_25_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_25_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_25_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_25_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_25_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_26_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_26_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_26_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_26_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_26_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_26_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_26_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_27_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_27_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_27_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_27_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_27_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_27_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_27_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_28_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_28_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_28_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_28_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_28_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_28_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_28_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_29_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_29_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_29_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_29_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_29_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_29_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_29_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_30_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_30_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_30_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_30_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_30_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_30_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_30_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  fp16mul6 flowVec0_31_mul_ip (
    .aclk                 (clk_0_clk                                   ), //i
    .s_axis_a_tvalid      (flowVec0_31_valid                           ), //i
    .s_axis_a_tdata       (flowVec0_31_payload[15:0]                   ), //i
    .s_axis_b_tvalid      (flowVec1_31_valid                           ), //i
    .s_axis_b_tdata       (flowVec1_31_payload[15:0]                   ), //i
    .m_axis_result_tvalid (flowVec0_31_mul_ip_m_axis_result_tvalid     ), //o
    .m_axis_result_tdata  (flowVec0_31_mul_ip_m_axis_result_tdata[15:0])  //o
  );
  assign flowVec0_0_valid = 1'b1;
  assign flowVec0_1_valid = 1'b1;
  assign flowVec0_2_valid = 1'b1;
  assign flowVec0_3_valid = 1'b1;
  assign flowVec0_4_valid = 1'b1;
  assign flowVec0_5_valid = 1'b1;
  assign flowVec0_6_valid = 1'b1;
  assign flowVec0_7_valid = 1'b1;
  assign flowVec0_8_valid = 1'b1;
  assign flowVec0_9_valid = 1'b1;
  assign flowVec0_10_valid = 1'b1;
  assign flowVec0_11_valid = 1'b1;
  assign flowVec0_12_valid = 1'b1;
  assign flowVec0_13_valid = 1'b1;
  assign flowVec0_14_valid = 1'b1;
  assign flowVec0_15_valid = 1'b1;
  assign flowVec0_16_valid = 1'b1;
  assign flowVec0_17_valid = 1'b1;
  assign flowVec0_18_valid = 1'b1;
  assign flowVec0_19_valid = 1'b1;
  assign flowVec0_20_valid = 1'b1;
  assign flowVec0_21_valid = 1'b1;
  assign flowVec0_22_valid = 1'b1;
  assign flowVec0_23_valid = 1'b1;
  assign flowVec0_24_valid = 1'b1;
  assign flowVec0_25_valid = 1'b1;
  assign flowVec0_26_valid = 1'b1;
  assign flowVec0_27_valid = 1'b1;
  assign flowVec0_28_valid = 1'b1;
  assign flowVec0_29_valid = 1'b1;
  assign flowVec0_30_valid = 1'b1;
  assign flowVec0_31_valid = 1'b1;
  assign flowVec0_0_payload = io_in0_payload_0;
  assign flowVec0_1_payload = io_in0_payload_1;
  assign flowVec0_2_payload = io_in0_payload_2;
  assign flowVec0_3_payload = io_in0_payload_3;
  assign flowVec0_4_payload = io_in0_payload_4;
  assign flowVec0_5_payload = io_in0_payload_5;
  assign flowVec0_6_payload = io_in0_payload_6;
  assign flowVec0_7_payload = io_in0_payload_7;
  assign flowVec0_8_payload = io_in0_payload_8;
  assign flowVec0_9_payload = io_in0_payload_9;
  assign flowVec0_10_payload = io_in0_payload_10;
  assign flowVec0_11_payload = io_in0_payload_11;
  assign flowVec0_12_payload = io_in0_payload_12;
  assign flowVec0_13_payload = io_in0_payload_13;
  assign flowVec0_14_payload = io_in0_payload_14;
  assign flowVec0_15_payload = io_in0_payload_15;
  assign flowVec0_16_payload = io_in0_payload_16;
  assign flowVec0_17_payload = io_in0_payload_17;
  assign flowVec0_18_payload = io_in0_payload_18;
  assign flowVec0_19_payload = io_in0_payload_19;
  assign flowVec0_20_payload = io_in0_payload_20;
  assign flowVec0_21_payload = io_in0_payload_21;
  assign flowVec0_22_payload = io_in0_payload_22;
  assign flowVec0_23_payload = io_in0_payload_23;
  assign flowVec0_24_payload = io_in0_payload_24;
  assign flowVec0_25_payload = io_in0_payload_25;
  assign flowVec0_26_payload = io_in0_payload_26;
  assign flowVec0_27_payload = io_in0_payload_27;
  assign flowVec0_28_payload = io_in0_payload_28;
  assign flowVec0_29_payload = io_in0_payload_29;
  assign flowVec0_30_payload = io_in0_payload_30;
  assign flowVec0_31_payload = io_in0_payload_31;
  assign flowVec1_0_valid = 1'b1;
  assign flowVec1_1_valid = 1'b1;
  assign flowVec1_2_valid = 1'b1;
  assign flowVec1_3_valid = 1'b1;
  assign flowVec1_4_valid = 1'b1;
  assign flowVec1_5_valid = 1'b1;
  assign flowVec1_6_valid = 1'b1;
  assign flowVec1_7_valid = 1'b1;
  assign flowVec1_8_valid = 1'b1;
  assign flowVec1_9_valid = 1'b1;
  assign flowVec1_10_valid = 1'b1;
  assign flowVec1_11_valid = 1'b1;
  assign flowVec1_12_valid = 1'b1;
  assign flowVec1_13_valid = 1'b1;
  assign flowVec1_14_valid = 1'b1;
  assign flowVec1_15_valid = 1'b1;
  assign flowVec1_16_valid = 1'b1;
  assign flowVec1_17_valid = 1'b1;
  assign flowVec1_18_valid = 1'b1;
  assign flowVec1_19_valid = 1'b1;
  assign flowVec1_20_valid = 1'b1;
  assign flowVec1_21_valid = 1'b1;
  assign flowVec1_22_valid = 1'b1;
  assign flowVec1_23_valid = 1'b1;
  assign flowVec1_24_valid = 1'b1;
  assign flowVec1_25_valid = 1'b1;
  assign flowVec1_26_valid = 1'b1;
  assign flowVec1_27_valid = 1'b1;
  assign flowVec1_28_valid = 1'b1;
  assign flowVec1_29_valid = 1'b1;
  assign flowVec1_30_valid = 1'b1;
  assign flowVec1_31_valid = 1'b1;
  assign flowVec1_0_payload = io_in1_payload_0;
  assign flowVec1_1_payload = io_in1_payload_1;
  assign flowVec1_2_payload = io_in1_payload_2;
  assign flowVec1_3_payload = io_in1_payload_3;
  assign flowVec1_4_payload = io_in1_payload_4;
  assign flowVec1_5_payload = io_in1_payload_5;
  assign flowVec1_6_payload = io_in1_payload_6;
  assign flowVec1_7_payload = io_in1_payload_7;
  assign flowVec1_8_payload = io_in1_payload_8;
  assign flowVec1_9_payload = io_in1_payload_9;
  assign flowVec1_10_payload = io_in1_payload_10;
  assign flowVec1_11_payload = io_in1_payload_11;
  assign flowVec1_12_payload = io_in1_payload_12;
  assign flowVec1_13_payload = io_in1_payload_13;
  assign flowVec1_14_payload = io_in1_payload_14;
  assign flowVec1_15_payload = io_in1_payload_15;
  assign flowVec1_16_payload = io_in1_payload_16;
  assign flowVec1_17_payload = io_in1_payload_17;
  assign flowVec1_18_payload = io_in1_payload_18;
  assign flowVec1_19_payload = io_in1_payload_19;
  assign flowVec1_20_payload = io_in1_payload_20;
  assign flowVec1_21_payload = io_in1_payload_21;
  assign flowVec1_22_payload = io_in1_payload_22;
  assign flowVec1_23_payload = io_in1_payload_23;
  assign flowVec1_24_payload = io_in1_payload_24;
  assign flowVec1_25_payload = io_in1_payload_25;
  assign flowVec1_26_payload = io_in1_payload_26;
  assign flowVec1_27_payload = io_in1_payload_27;
  assign flowVec1_28_payload = io_in1_payload_28;
  assign flowVec1_29_payload = io_in1_payload_29;
  assign flowVec1_30_payload = io_in1_payload_30;
  assign flowVec1_31_payload = io_in1_payload_31;
  assign io_res_payload_0 = flowVec0_0_mul_ip_m_axis_result_tdata;
  assign io_res_payload_1 = flowVec0_1_mul_ip_m_axis_result_tdata;
  assign io_res_payload_2 = flowVec0_2_mul_ip_m_axis_result_tdata;
  assign io_res_payload_3 = flowVec0_3_mul_ip_m_axis_result_tdata;
  assign io_res_payload_4 = flowVec0_4_mul_ip_m_axis_result_tdata;
  assign io_res_payload_5 = flowVec0_5_mul_ip_m_axis_result_tdata;
  assign io_res_payload_6 = flowVec0_6_mul_ip_m_axis_result_tdata;
  assign io_res_payload_7 = flowVec0_7_mul_ip_m_axis_result_tdata;
  assign io_res_payload_8 = flowVec0_8_mul_ip_m_axis_result_tdata;
  assign io_res_payload_9 = flowVec0_9_mul_ip_m_axis_result_tdata;
  assign io_res_payload_10 = flowVec0_10_mul_ip_m_axis_result_tdata;
  assign io_res_payload_11 = flowVec0_11_mul_ip_m_axis_result_tdata;
  assign io_res_payload_12 = flowVec0_12_mul_ip_m_axis_result_tdata;
  assign io_res_payload_13 = flowVec0_13_mul_ip_m_axis_result_tdata;
  assign io_res_payload_14 = flowVec0_14_mul_ip_m_axis_result_tdata;
  assign io_res_payload_15 = flowVec0_15_mul_ip_m_axis_result_tdata;
  assign io_res_payload_16 = flowVec0_16_mul_ip_m_axis_result_tdata;
  assign io_res_payload_17 = flowVec0_17_mul_ip_m_axis_result_tdata;
  assign io_res_payload_18 = flowVec0_18_mul_ip_m_axis_result_tdata;
  assign io_res_payload_19 = flowVec0_19_mul_ip_m_axis_result_tdata;
  assign io_res_payload_20 = flowVec0_20_mul_ip_m_axis_result_tdata;
  assign io_res_payload_21 = flowVec0_21_mul_ip_m_axis_result_tdata;
  assign io_res_payload_22 = flowVec0_22_mul_ip_m_axis_result_tdata;
  assign io_res_payload_23 = flowVec0_23_mul_ip_m_axis_result_tdata;
  assign io_res_payload_24 = flowVec0_24_mul_ip_m_axis_result_tdata;
  assign io_res_payload_25 = flowVec0_25_mul_ip_m_axis_result_tdata;
  assign io_res_payload_26 = flowVec0_26_mul_ip_m_axis_result_tdata;
  assign io_res_payload_27 = flowVec0_27_mul_ip_m_axis_result_tdata;
  assign io_res_payload_28 = flowVec0_28_mul_ip_m_axis_result_tdata;
  assign io_res_payload_29 = flowVec0_29_mul_ip_m_axis_result_tdata;
  assign io_res_payload_30 = flowVec0_30_mul_ip_m_axis_result_tdata;
  assign io_res_payload_31 = flowVec0_31_mul_ip_m_axis_result_tdata;
  assign io_res_valid = t_io_res_valid_5;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      t_io_res_valid <= 1'b0;
      t_io_res_valid_1 <= 1'b0;
      t_io_res_valid_2 <= 1'b0;
      t_io_res_valid_3 <= 1'b0;
      t_io_res_valid_4 <= 1'b0;
      t_io_res_valid_5 <= 1'b0;
    end else begin
      t_io_res_valid <= (io_in0_valid && io_in1_valid);
      t_io_res_valid_1 <= t_io_res_valid;
      t_io_res_valid_2 <= t_io_res_valid_1;
      t_io_res_valid_3 <= t_io_res_valid_2;
      t_io_res_valid_4 <= t_io_res_valid_3;
      t_io_res_valid_5 <= t_io_res_valid_4;
    end
  end


endmodule

module StreamMux_49 (
  input  wire [0:0]    io_select,
  input  wire          io_inputs_0_valid,
  output wire          io_inputs_0_ready,
  input  wire [511:0]  io_inputs_0_payload,
  input  wire          io_inputs_1_valid,
  output wire          io_inputs_1_ready,
  input  wire [511:0]  io_inputs_1_payload,
  output wire          io_output_valid,
  input  wire          io_output_ready,
  output wire [511:0]  io_output_payload
);

  reg                 t_io_output_valid;
  reg        [511:0]  t_io_output_payload;

  always @(*) begin
    case(io_select)
      1'b0 : begin
        t_io_output_valid = io_inputs_0_valid;
        t_io_output_payload = io_inputs_0_payload;
      end
      default : begin
        t_io_output_valid = io_inputs_1_valid;
        t_io_output_payload = io_inputs_1_payload;
      end
    endcase
  end

  assign io_inputs_0_ready = ((io_select == 1'b0) && io_output_ready);
  assign io_inputs_1_ready = ((io_select == 1'b1) && io_output_ready);
  assign io_output_valid = t_io_output_valid;
  assign io_output_payload = t_io_output_payload;

endmodule

module StreamDemux_25 (
  input  wire [0:0]    io_select,
  input  wire          io_input_valid,
  output reg           io_input_ready,
  input  wire [31:0]   io_input_payload,
  output reg           io_outputs_0_valid,
  input  wire          io_outputs_0_ready,
  output wire [31:0]   io_outputs_0_payload,
  output reg           io_outputs_1_valid,
  input  wire          io_outputs_1_ready,
  output wire [31:0]   io_outputs_1_payload
);

  wire                t_when;
  wire                t_when_1;

  assign t_when = (1'b0 != io_select);
  assign t_when_1 = (1'b1 != io_select);
  always @(*) begin
    io_input_ready = 1'b0;
    if(!t_when) begin
      io_input_ready = io_outputs_0_ready;
    end
    if(!t_when_1) begin
      io_input_ready = io_outputs_1_ready;
    end
  end

  assign io_outputs_0_payload = io_input_payload;
  always @(*) begin
    if(t_when) begin
      io_outputs_0_valid = 1'b0;
    end else begin
      io_outputs_0_valid = io_input_valid;
    end
  end

  assign io_outputs_1_payload = io_input_payload;
  always @(*) begin
    if(t_when_1) begin
      io_outputs_1_valid = 1'b0;
    end else begin
      io_outputs_1_valid = io_input_valid;
    end
  end


endmodule

//StreamFifo_139 replaced by StreamFifo_136

//StreamFifo_138 replaced by StreamFifo_136

//StreamFifo_137 replaced by StreamFifo_136

module StreamFifo_136 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [511:0]  io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [511:0]  io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [511:0]  logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_push;
  (* max_fanout = 100 *) reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [5:0]    logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                io_pop_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [5:0]    logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [511:0]  logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [511:0]  logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [511:0]  logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [5:0]    logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [5:0]    logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "distributed" *) reg [511:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 6'h01);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[5];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 6'h01);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 6'h01);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign io_pop_fire = (io_pop_valid && io_pop_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = io_pop_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[5];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 6'h01);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 6'h01);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = io_pop_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 6'h01);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 6'h01);
  assign logic_fmaxAvail_incr = io_pop_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      logic_ptr_fmax_value <= 6'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
      logic_fmaxAvail_value <= 6'h20;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 6'h20;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 6'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 6'h20;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

//StreamFifoPipe_8 replaced by StreamFifoPipe_9

module StreamFifoPipe_9 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [71:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [71:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [12:0]   io_occupancy,
  output wire [12:0]   io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [71:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                popOut_valid;
  reg                 popOut_ready;
  wire       [71:0]   popOut_payload;
  wire                popOut_m2sPipe_valid;
  wire                popOut_m2sPipe_ready;
  wire       [71:0]   popOut_m2sPipe_payload;
  reg                 popOut_rValid;
  reg        [71:0]   popOut_rData;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [12:0]   logic_ptr_push;
  reg        [12:0]   logic_ptr_pop;
  wire       [12:0]   logic_ptr_occupancy;
  wire       [12:0]   logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                logic_ptr_arb_fmax_emptyTracker_incr;
  wire                logic_ptr_arb_fmax_emptyTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_emptyTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_emptyTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_ptr_arb_fmax_fullTracker_incr;
  wire                logic_ptr_arb_fmax_fullTracker_decr;
  reg        [12:0]   logic_ptr_arb_fmax_fullTracker_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_arb_fmax_fullTracker_minusOne /* synthesis syn_keep = 1 */ ;
  wire                io_push_fire;
  wire                popOut_fire;
  wire                logic_ptr_fmax_incr;
  wire                logic_ptr_fmax_decr;
  reg        [12:0]   logic_ptr_fmax_value;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_ptr_fmax_minusOne /* synthesis syn_keep = 1 */ ;
  wire                logic_push_onRam_write_valid;
  wire       [11:0]   logic_push_onRam_write_payload_address;
  wire       [71:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [11:0]   logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [11:0]   logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [11:0]   logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [11:0]   logic_pop_sync_readPort_cmd_payload;
  wire       [71:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [71:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [12:0]   logic_pop_sync_popReg;
  wire                logic_fmaxAvail_incr;
  wire                logic_fmaxAvail_decr;
  reg        [12:0]   logic_fmaxAvail_value;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_plusOne /* synthesis syn_keep = 1 */ ;
  (* keep , syn_keep *) wire       [12:0]   logic_fmaxAvail_minusOne /* synthesis syn_keep = 1 */ ;
  (* ram_style = "ultra" *) reg [71:0] logic_ram [0:4095];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  always @(*) begin
    popOut_ready = popOut_m2sPipe_ready;
    if((! popOut_m2sPipe_valid)) begin
      popOut_ready = 1'b1;
    end
  end

  assign popOut_m2sPipe_valid = popOut_rValid;
  assign popOut_m2sPipe_payload = popOut_rData;
  assign io_pop_valid = popOut_m2sPipe_valid;
  assign popOut_m2sPipe_ready = io_pop_ready;
  assign io_pop_payload = popOut_m2sPipe_payload;
  assign logic_ptr_arb_fmax_emptyTracker_plusOne = (logic_ptr_arb_fmax_emptyTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_minusOne = (logic_ptr_arb_fmax_emptyTracker_value - 13'h0001);
  assign logic_ptr_arb_fmax_emptyTracker_incr = logic_ptr_doPop;
  assign logic_ptr_arb_fmax_emptyTracker_decr = logic_ptr_doPush;
  assign logic_ptr_empty = logic_ptr_arb_fmax_emptyTracker_value[12];
  assign logic_ptr_arb_fmax_fullTracker_plusOne = (logic_ptr_arb_fmax_fullTracker_value + 13'h0001);
  assign logic_ptr_arb_fmax_fullTracker_minusOne = (logic_ptr_arb_fmax_fullTracker_value - 13'h0001);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_arb_fmax_fullTracker_incr = io_push_fire;
  assign popOut_fire = (popOut_valid && popOut_ready);
  assign logic_ptr_arb_fmax_fullTracker_decr = popOut_fire;
  assign logic_ptr_full = logic_ptr_arb_fmax_fullTracker_value[12];
  assign logic_ptr_fmax_plusOne = (logic_ptr_fmax_value + 13'h0001);
  assign logic_ptr_fmax_minusOne = (logic_ptr_fmax_value - 13'h0001);
  assign logic_ptr_fmax_incr = io_push_fire;
  assign logic_ptr_fmax_decr = popOut_fire;
  assign logic_ptr_occupancy = logic_ptr_fmax_value;
  assign io_push_ready = (! logic_ptr_full);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[11:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[11:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign popOut_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = popOut_ready;
  assign popOut_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign logic_fmaxAvail_plusOne = (logic_fmaxAvail_value + 13'h0001);
  assign logic_fmaxAvail_minusOne = (logic_fmaxAvail_value - 13'h0001);
  assign logic_fmaxAvail_incr = popOut_fire;
  assign logic_fmaxAvail_decr = io_push_fire;
  assign io_availability = logic_fmaxAvail_value;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      popOut_rValid <= 1'b0;
      logic_ptr_push <= 13'h0;
      logic_ptr_pop <= 13'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      logic_ptr_fmax_value <= 13'h0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 13'h0;
      logic_fmaxAvail_value <= 13'h1000;
    end else begin
      if(popOut_ready) begin
        popOut_rValid <= popOut_valid;
      end
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if((logic_ptr_arb_fmax_emptyTracker_incr != logic_ptr_arb_fmax_emptyTracker_decr)) begin
        logic_ptr_arb_fmax_emptyTracker_value <= (logic_ptr_arb_fmax_emptyTracker_incr ? logic_ptr_arb_fmax_emptyTracker_plusOne : logic_ptr_arb_fmax_emptyTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_emptyTracker_value <= 13'h1000;
      end
      if((logic_ptr_arb_fmax_fullTracker_incr != logic_ptr_arb_fmax_fullTracker_decr)) begin
        logic_ptr_arb_fmax_fullTracker_value <= (logic_ptr_arb_fmax_fullTracker_incr ? logic_ptr_arb_fmax_fullTracker_plusOne : logic_ptr_arb_fmax_fullTracker_minusOne);
      end
      if(io_flush) begin
        logic_ptr_arb_fmax_fullTracker_value <= 13'h0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 13'h0001);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 13'h0001);
      end
      if(io_flush) begin
        logic_ptr_push <= 13'h0;
        logic_ptr_pop <= 13'h0;
      end
      if((logic_ptr_fmax_incr != logic_ptr_fmax_decr)) begin
        logic_ptr_fmax_value <= (logic_ptr_fmax_incr ? logic_ptr_fmax_plusOne : logic_ptr_fmax_minusOne);
      end
      if(io_flush) begin
        logic_ptr_fmax_value <= 13'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 13'h0;
      end
      if((logic_fmaxAvail_incr != logic_fmaxAvail_decr)) begin
        logic_fmaxAvail_value <= (logic_fmaxAvail_incr ? logic_fmaxAvail_plusOne : logic_fmaxAvail_minusOne);
      end
      if(io_flush) begin
        logic_fmaxAvail_value <= 13'h1000;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(popOut_ready) begin
      popOut_rData <= popOut_payload;
    end
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_140 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [5:0]    io_occupancy,
  output wire [5:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [5:0]    logic_ptr_push;
  reg        [5:0]    logic_ptr_pop;
  wire       [5:0]    logic_ptr_occupancy;
  wire       [5:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [4:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [4:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [4:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [4:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [4:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [5:0]    logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:31];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 6'h20) == 6'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[4:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[4:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (6'h20 - logic_ptr_occupancy);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 6'h0;
      logic_ptr_pop <= 6'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 6'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 6'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 6'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 6'h0;
        logic_ptr_pop <= 6'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 6'h0;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module StreamFifo_141 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [13:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [13:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [7:0]    io_occupancy,
  output wire [7:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [13:0]   logic_ram_spinal_port1;
  wire       [13:0]   t_logic_ram_port;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [7:0]    logic_ptr_push;
  reg        [7:0]    logic_ptr_pop;
  wire       [7:0]    logic_ptr_occupancy;
  wire       [7:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [6:0]    logic_push_onRam_write_payload_address;
  wire       [13:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [6:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [6:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [6:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [6:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [13:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [13:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [7:0]    logic_pop_sync_popReg;
  reg [13:0] logic_ram [0:127];

  assign t_logic_ram_port = logic_push_onRam_write_payload_data;
  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= t_logic_ram_port;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 8'h80) == 8'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[6:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[6:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (8'h80 - logic_ptr_occupancy);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 8'h0;
      logic_ptr_pop <= 8'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 8'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 8'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 8'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 8'h0;
        logic_ptr_pop <= 8'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 8'h0;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule

module InvFreqRom_1 (
  output wire          io_invFreq_valid,
  input  wire          io_invFreq_ready,
  output wire [31:0]   io_invFreq_payload,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [31:0]   rom_spinal_port0;
  wire                popPre_valid;
  reg                 popPre_ready;
  reg        [5:0]    addr;
  wire                popPre_fire;
  wire       [31:0]   rdOut;
  wire                popPre_m2sPipe_valid;
  wire                popPre_m2sPipe_ready;
  reg                 popPre_rValid;
  reg [31:0] rom [0:63];

  initial begin
    rom[0] = 32'b01000101001000101111100110000011;
    rom[1] = 32'b01000101000011010010000101011000;
    rom[2] = 32'b01000100111101000110110101110001;
    rom[3] = 32'b01000100110100111010101001011110;
    rom[4] = 32'b01000100101101110100101101110110;
    rom[5] = 32'b01000100100111101011101000001011;
    rom[6] = 32'b01000100100010010111001110100010;
    rom[7] = 32'b01000100011011100000111001111000;
    rom[8] = 32'b01000100010011100010011000000001;
    rom[9] = 32'b01000100001100101000010001101000;
    rom[10] = 32'b01000100000110101001011011101100;
    rom[11] = 32'b01000100000001011101111001111000;
    rom[12] = 32'b01000011111001111101101000000010;
    rom[13] = 32'b01000011110010001100011001110100;
    rom[14] = 32'b01000011101011011101110100111010;
    rom[15] = 32'b01000011100101101000111101100111;
    rom[16] = 32'b01000011100000100110000100110110;
    rom[17] = 32'b01000011011000011100111011110011;
    rom[18] = 32'b01000011010000111000101011000001;
    rom[19] = 32'b01000011001010010101010100011000;
    rom[20] = 32'b01000011000100101010001011000101;
    rom[21] = 32'b01000010111111011111011001111001;
    rom[22] = 32'b01000010110110111110110000110110;
    rom[23] = 32'b01000010101111100111000111111010;
    rom[24] = 32'b01000010101001001110101100110100;
    rom[25] = 32'b01000010100011101101000001010011;
    rom[26] = 32'b01000010011101110101011111011111;
    rom[27] = 32'b01000010010101100011000011000000;
    rom[28] = 32'b01000010001110010111101100110101;
    rom[29] = 32'b01000010001000001001111011000011;
    rom[30] = 32'b01000010000010110001011101100001;
    rom[31] = 32'b01000001111100001110010101110001;
    rom[32] = 32'b01000001110100001001101110001010;
    rom[33] = 32'b01000001101101001010010110001111;
    rom[34] = 32'b01000001100111000110111100000001;
    rom[35] = 32'b01000001100001110111011101000111;
    rom[36] = 32'b01000001011010101001111000001000;
    rom[37] = 32'b01000001010010110010101110010100;
    rom[38] = 32'b01000001001011111111000000101011;
    rom[39] = 32'b01000001000110000101101100101110;
    rom[40] = 32'b01000001000000111110111101011101;
    rom[41] = 32'b01000000111001001000000010000101;
    rom[42] = 32'b01000000110001011101111111100110;
    rom[43] = 32'b01000000101010110101101000110011;
    rom[44] = 32'b01000000100101000110001010010000;
    rom[45] = 32'b01000000100000000111111100000010;
    rom[46] = 32'b01000000010111101000101111001111;
    rom[47] = 32'b01000000010000001011011110001110;
    rom[48] = 32'b01000000001001101110001011010100;
    rom[49] = 32'b01000000000100001000010001110010;
    rom[50] = 32'b00111111111110100100101100110101;
    rom[51] = 32'b00111111110110001011111011010111;
    rom[52] = 32'b00111111101110111011000110100000;
    rom[53] = 32'b00111111101000101000100101000011;
    rom[54] = 32'b00111111100011001100000000100011;
    rom[55] = 32'b00111111011100111100010100010111;
    rom[56] = 32'b00111111010100110001100010010100;
    rom[57] = 32'b00111111001101101100110100110111;
    rom[58] = 32'b00111111000111100100110010111000;
    rom[59] = 32'b00111111000010010001010011110110;
    rom[60] = 32'b00111110111011010110101010000001;
    rom[61] = 32'b00111110110011011001100000000100;
    rom[62] = 32'b00111110101100100000100101110010;
    rom[63] = 32'b00111110100110100010110001110001;
  end
  always @(posedge clk_0_clk) begin
    if(popPre_ready) begin
      rom_spinal_port0 <= rom[addr];
    end
  end

  assign popPre_fire = (popPre_valid && popPre_ready);
  assign rdOut = rom_spinal_port0;
  assign popPre_valid = 1'b1;
  assign io_invFreq_payload = rdOut;
  always @(*) begin
    popPre_ready = popPre_m2sPipe_ready;
    if((! popPre_m2sPipe_valid)) begin
      popPre_ready = 1'b1;
    end
  end

  assign popPre_m2sPipe_valid = popPre_rValid;
  assign io_invFreq_valid = popPre_m2sPipe_valid;
  assign popPre_m2sPipe_ready = io_invFreq_ready;
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      addr <= 6'h0;
      popPre_rValid <= 1'b0;
    end else begin
      if(popPre_fire) begin
        addr <= (addr + 6'h01);
      end
      if(popPre_ready) begin
        popPre_rValid <= popPre_valid;
      end
    end
  end


endmodule

//StreamFifo_143 replaced by StreamFifo_142

module StreamFifo_142 (
  input  wire          io_push_valid,
  output wire          io_push_ready,
  input  wire [15:0]   io_push_payload,
  output wire          io_pop_valid,
  input  wire          io_pop_ready,
  output wire [15:0]   io_pop_payload,
  input  wire          io_flush,
  output wire [6:0]    io_occupancy,
  output wire [6:0]    io_availability,
  input  wire          clk_0_clk,
  input  wire          clk_0_resetn
);

  reg        [15:0]   logic_ram_spinal_port1;
  reg                 t_1;
  wire                logic_ptr_doPush;
  wire                logic_ptr_doPop;
  wire                logic_ptr_full;
  wire                logic_ptr_empty;
  reg        [6:0]    logic_ptr_push;
  reg        [6:0]    logic_ptr_pop;
  wire       [6:0]    logic_ptr_occupancy;
  wire       [6:0]    logic_ptr_popOnIo;
  reg                 logic_ptr_wentUp;
  wire                io_push_fire;
  wire                logic_push_onRam_write_valid;
  wire       [5:0]    logic_push_onRam_write_payload_address;
  wire       [15:0]   logic_push_onRam_write_payload_data;
  wire                logic_pop_addressGen_valid;
  reg                 logic_pop_addressGen_ready;
  wire       [5:0]    logic_pop_addressGen_payload;
  wire                logic_pop_addressGen_fire;
  wire                logic_pop_sync_readArbitation_valid;
  wire                logic_pop_sync_readArbitation_ready;
  wire       [5:0]    logic_pop_sync_readArbitation_payload;
  reg                 logic_pop_addressGen_rValid;
  reg        [5:0]    logic_pop_addressGen_rData;
  wire                logic_pop_sync_readPort_cmd_valid;
  wire       [5:0]    logic_pop_sync_readPort_cmd_payload;
  wire       [15:0]   logic_pop_sync_readPort_rsp;
  wire                logic_pop_sync_readArbitation_translated_valid;
  wire                logic_pop_sync_readArbitation_translated_ready;
  wire       [15:0]   logic_pop_sync_readArbitation_translated_payload;
  wire                logic_pop_sync_readArbitation_fire;
  reg        [6:0]    logic_pop_sync_popReg;
  reg [15:0] logic_ram [0:63];

  always @(posedge clk_0_clk) begin
    if(t_1) begin
      logic_ram[logic_push_onRam_write_payload_address] <= logic_push_onRam_write_payload_data;
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_sync_readPort_cmd_valid) begin
      logic_ram_spinal_port1 <= logic_ram[logic_pop_sync_readPort_cmd_payload];
    end
  end

  always @(*) begin
    t_1 = 1'b0;
    if(logic_push_onRam_write_valid) begin
      t_1 = 1'b1;
    end
  end

  assign logic_ptr_full = (((logic_ptr_push ^ logic_ptr_popOnIo) ^ 7'h40) == 7'h0);
  assign logic_ptr_empty = (logic_ptr_push == logic_ptr_pop);
  assign logic_ptr_occupancy = (logic_ptr_push - logic_ptr_popOnIo);
  assign io_push_ready = (! logic_ptr_full);
  assign io_push_fire = (io_push_valid && io_push_ready);
  assign logic_ptr_doPush = io_push_fire;
  assign logic_push_onRam_write_valid = io_push_fire;
  assign logic_push_onRam_write_payload_address = logic_ptr_push[5:0];
  assign logic_push_onRam_write_payload_data = io_push_payload;
  assign logic_pop_addressGen_valid = (! logic_ptr_empty);
  assign logic_pop_addressGen_payload = logic_ptr_pop[5:0];
  assign logic_pop_addressGen_fire = (logic_pop_addressGen_valid && logic_pop_addressGen_ready);
  assign logic_ptr_doPop = logic_pop_addressGen_fire;
  always @(*) begin
    logic_pop_addressGen_ready = logic_pop_sync_readArbitation_ready;
    if((! logic_pop_sync_readArbitation_valid)) begin
      logic_pop_addressGen_ready = 1'b1;
    end
  end

  assign logic_pop_sync_readArbitation_valid = logic_pop_addressGen_rValid;
  assign logic_pop_sync_readArbitation_payload = logic_pop_addressGen_rData;
  assign logic_pop_sync_readPort_rsp = logic_ram_spinal_port1;
  assign logic_pop_sync_readPort_cmd_valid = logic_pop_addressGen_fire;
  assign logic_pop_sync_readPort_cmd_payload = logic_pop_addressGen_payload;
  assign logic_pop_sync_readArbitation_translated_valid = logic_pop_sync_readArbitation_valid;
  assign logic_pop_sync_readArbitation_ready = logic_pop_sync_readArbitation_translated_ready;
  assign logic_pop_sync_readArbitation_translated_payload = logic_pop_sync_readPort_rsp;
  assign io_pop_valid = logic_pop_sync_readArbitation_translated_valid;
  assign logic_pop_sync_readArbitation_translated_ready = io_pop_ready;
  assign io_pop_payload = logic_pop_sync_readArbitation_translated_payload;
  assign logic_pop_sync_readArbitation_fire = (logic_pop_sync_readArbitation_valid && logic_pop_sync_readArbitation_ready);
  assign logic_ptr_popOnIo = logic_pop_sync_popReg;
  assign io_occupancy = logic_ptr_occupancy;
  assign io_availability = (7'h40 - logic_ptr_occupancy);
  always @(posedge clk_0_clk or negedge clk_0_resetn) begin
    if(!clk_0_resetn) begin
      logic_ptr_push <= 7'h0;
      logic_ptr_pop <= 7'h0;
      logic_ptr_wentUp <= 1'b0;
      logic_pop_addressGen_rValid <= 1'b0;
      logic_pop_sync_popReg <= 7'h0;
    end else begin
      if((logic_ptr_doPush != logic_ptr_doPop)) begin
        logic_ptr_wentUp <= logic_ptr_doPush;
      end
      if(io_flush) begin
        logic_ptr_wentUp <= 1'b0;
      end
      if(logic_ptr_doPush) begin
        logic_ptr_push <= (logic_ptr_push + 7'h01);
      end
      if(logic_ptr_doPop) begin
        logic_ptr_pop <= (logic_ptr_pop + 7'h01);
      end
      if(io_flush) begin
        logic_ptr_push <= 7'h0;
        logic_ptr_pop <= 7'h0;
      end
      if(logic_pop_addressGen_ready) begin
        logic_pop_addressGen_rValid <= logic_pop_addressGen_valid;
      end
      if(io_flush) begin
        logic_pop_addressGen_rValid <= 1'b0;
      end
      if(logic_pop_sync_readArbitation_fire) begin
        logic_pop_sync_popReg <= logic_ptr_pop;
      end
      if(io_flush) begin
        logic_pop_sync_popReg <= 7'h0;
      end
    end
  end

  always @(posedge clk_0_clk) begin
    if(logic_pop_addressGen_ready) begin
      logic_pop_addressGen_rData <= logic_pop_addressGen_payload;
    end
  end


endmodule
